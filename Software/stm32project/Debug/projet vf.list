
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024f8  08018ec8  08018ec8  00028ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b3c0  0801b3c0  000302f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b3c0  0801b3c0  0002b3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b3c8  0801b3c8  000302f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b3c8  0801b3c8  0002b3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b3cc  0801b3cc  0002b3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  0801b3d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000209c  200002f8  0801b6c4  000302f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002394  0801b6c4  00032394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b54e  00000000  00000000  00030367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000616d  00000000  00000000  0005b8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a8  00000000  00000000  00061a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aac  00000000  00000000  00063cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029f9c  00000000  00000000  0006577c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fab4  00000000  00000000  0008f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e89ce  00000000  00000000  000bf1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ab0c  00000000  00000000  001a7b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001b26a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018eac 	.word	0x08018eac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	08018eac 	.word	0x08018eac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001008:	4a38      	ldr	r2, [pc, #224]	; (80010ec <MX_ADC1_Init+0xfc>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001026:	2204      	movs	r2, #4
 8001028:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800102c:	2200      	movs	r2, #0
 800102e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001032:	2201      	movs	r2, #1
 8001034:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001038:	2203      	movs	r2, #3
 800103a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001046:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800104e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	481f      	ldr	r0, [pc, #124]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800106c:	f004 fb9c 	bl	80057a8 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001076:	f000 fcbc 	bl	80019f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_ADC1_Init+0x100>)
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	2306      	movs	r3, #6
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001082:	2307      	movs	r3, #7
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001086:	237f      	movs	r3, #127	; 0x7f
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108a:	2304      	movs	r3, #4
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001098:	f004 ff1e 	bl	8005ed8 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010a2:	f000 fca6 	bl	80019f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_ADC1_Init+0x104>)
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010aa:	230c      	movs	r3, #12
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010b4:	f004 ff10 	bl	8005ed8 <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80010be:	f000 fc98 	bl	80019f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010c6:	2312      	movs	r3, #18
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010d0:	f004 ff02 	bl	8005ed8 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010da:	f000 fc8a 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000314 	.word	0x20000314
 80010ec:	50040000 	.word	0x50040000
 80010f0:	80000001 	.word	0x80000001
 80010f4:	c7520000 	.word	0xc7520000
 80010f8:	25b00200 	.word	0x25b00200

080010fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_ADC_MspInit+0xdc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d157      	bne.n	80011ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001124:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114e:	2310      	movs	r3, #16
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001152:	230b      	movs	r3, #11
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f005 ff7a 	bl	800705c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001194:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011a4:	f005 fcd8 	bl	8006b58 <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80011ae:	f000 fc20 	bl	80019f2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2012      	movs	r0, #18
 80011c4:	f005 fc91 	bl	8006aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80011c8:	2012      	movs	r0, #18
 80011ca:	f005 fcaa 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	50040000 	.word	0x50040000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000378 	.word	0x20000378
 80011e4:	40020008 	.word	0x40020008

080011e8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a54      	ldr	r2, [pc, #336]	; (8001348 <HAL_ADC_ConvCpltCallback+0x160>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	f040 8091 	bne.w	8001320 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80011fe:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f98e 	bl	8000524 <__aeabi_i2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	a14a      	add	r1, pc, #296	; (adr r1, 8001338 <HAL_ADC_ConvCpltCallback+0x150>)
 800120e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001212:	f7ff fb1b 	bl	800084c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fce3 	bl	8000be8 <__aeabi_d2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001226:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_ADC_ConvCpltCallback+0x16c>)
 800122a:	ed93 7a00 	vldr	s14, [r3]
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001238:	ee17 0a90 	vmov	r0, s15
 800123c:	f7ff f984 	bl	8000548 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	4944      	ldr	r1, [pc, #272]	; (800135c <HAL_ADC_ConvCpltCallback+0x174>)
 800124a:	f7ff faff 	bl	800084c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4690      	mov	r8, r2
 8001254:	4699      	mov	r9, r3
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001258:	885b      	ldrh	r3, [r3, #2]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f962 	bl	8000524 <__aeabi_i2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_ADC_ConvCpltCallback+0x178>)
 8001274:	f7ff faea 	bl	800084c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f9ba 	bl	80005f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	461d      	mov	r5, r3
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f959 	bl	8000548 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe fff3 	bl	8000288 <__aeabi_dsub>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4640      	mov	r0, r8
 80012a8:	4649      	mov	r1, r9
 80012aa:	f7ff f9a5 	bl	80005f8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc97 	bl	8000be8 <__aeabi_d2f>
 80012ba:	ee07 0a10 	vmov	s14, r0
 80012be:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_ADC_ConvCpltCallback+0x17c>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 80012ce:	889b      	ldrh	r3, [r3, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f927 	bl	8000524 <__aeabi_i2d>
 80012d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001340 <HAL_ADC_ConvCpltCallback+0x158>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fab6 	bl	800084c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	f7fe ffce 	bl	800028c <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7ff f975 	bl	80005f8 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc67 	bl	8000be8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_ADC_ConvCpltCallback+0x180>)
 800131e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001320:	2203      	movs	r2, #3
 8001322:	490a      	ldr	r1, [pc, #40]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <HAL_ADC_ConvCpltCallback+0x184>)
 8001326:	f004 fb81 	bl	8005a2c <HAL_ADC_Start_DMA>



}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001334:	f3af 8000 	nop.w
 8001338:	d70a3d70 	.word	0xd70a3d70
 800133c:	40b36323 	.word	0x40b36323
 8001340:	00000000 	.word	0x00000000
 8001344:	40affe00 	.word	0x40affe00
 8001348:	50040000 	.word	0x50040000
 800134c:	20000720 	.word	0x20000720
 8001350:	2000072c 	.word	0x2000072c
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004
 800135c:	40590000 	.word	0x40590000
 8001360:	40080000 	.word	0x40080000
 8001364:	20000728 	.word	0x20000728
 8001368:	20000730 	.word	0x20000730
 800136c:	20000314 	.word	0x20000314

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_DMA_Init+0x60>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <MX_DMA_Init+0x60>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6493      	str	r3, [r2, #72]	; 0x48
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_DMA_Init+0x60>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_DMA_Init+0x60>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <MX_DMA_Init+0x60>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6493      	str	r3, [r2, #72]	; 0x48
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <MX_DMA_Init+0x60>)
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	200b      	movs	r0, #11
 80013ac:	f005 fb9d 	bl	8006aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b0:	200b      	movs	r0, #11
 80013b2:	f005 fbb6 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2045      	movs	r0, #69	; 0x45
 80013bc:	f005 fb95 	bl	8006aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80013c0:	2045      	movs	r0, #69	; 0x45
 80013c2:	f005 fbae 	bl	8006b22 <HAL_NVIC_EnableIRQ>

}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000

080013d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <MX_GPIO_Init+0xf8>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a37      	ldr	r2, [pc, #220]	; (80014cc <MX_GPIO_Init+0xf8>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_GPIO_Init+0xf8>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b32      	ldr	r3, [pc, #200]	; (80014cc <MX_GPIO_Init+0xf8>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a31      	ldr	r2, [pc, #196]	; (80014cc <MX_GPIO_Init+0xf8>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <MX_GPIO_Init+0xf8>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f005 ff85 	bl	8007330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2101      	movs	r1, #1
 800142a:	4829      	ldr	r0, [pc, #164]	; (80014d0 <MX_GPIO_Init+0xfc>)
 800142c:	f005 ff80 	bl	8007330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001430:	2302      	movs	r3, #2
 8001432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f005 fe07 	bl	800705c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800144e:	2301      	movs	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4619      	mov	r1, r3
 8001464:	481a      	ldr	r0, [pc, #104]	; (80014d0 <MX_GPIO_Init+0xfc>)
 8001466:	f005 fdf9 	bl	800705c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800146a:	2302      	movs	r3, #2
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_GPIO_Init+0xfc>)
 8001480:	f005 fdec 	bl	800705c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800148a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f005 fddd 	bl	800705c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	2007      	movs	r0, #7
 80014a8:	f005 fb1f 	bl	8006aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014ac:	2007      	movs	r0, #7
 80014ae:	f005 fb38 	bl	8006b22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2101      	movs	r1, #1
 80014b6:	2017      	movs	r0, #23
 80014b8:	f005 fb17 	bl	8006aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014bc:	2017      	movs	r0, #23
 80014be:	f005 fb30 	bl	8006b22 <HAL_NVIC_EnableIRQ>

}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000400 	.word	0x48000400

080014d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <MX_I2C1_Init+0x74>)
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <MX_I2C1_Init+0x78>)
 80014dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_I2C1_Init+0x74>)
 80014e0:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <MX_I2C1_Init+0x7c>)
 80014e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MX_I2C1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_I2C1_Init+0x74>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_I2C1_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_I2C1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_I2C1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_I2C1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_I2C1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <MX_I2C1_Init+0x74>)
 8001510:	f005 ff3e 	bl	8007390 <HAL_I2C_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800151a:	f000 fa6a 	bl	80019f2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151e:	2100      	movs	r1, #0
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <MX_I2C1_Init+0x74>)
 8001522:	f006 fb49 	bl	8007bb8 <HAL_I2CEx_ConfigAnalogFilter>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800152c:	f000 fa61 	bl	80019f2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_I2C1_Init+0x74>)
 8001534:	f006 fb8b 	bl	8007c4e <HAL_I2CEx_ConfigDigitalFilter>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800153e:	f000 fa58 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200003c0 	.word	0x200003c0
 800154c:	40005400 	.word	0x40005400
 8001550:	00202538 	.word	0x00202538

08001554 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <MX_I2C3_Init+0x80>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <MX_I2C3_Init+0x84>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800156c:	2201      	movs	r2, #1
 800156e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_I2C3_Init+0x7c>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800158e:	4810      	ldr	r0, [pc, #64]	; (80015d0 <MX_I2C3_Init+0x7c>)
 8001590:	f005 fefe 	bl	8007390 <HAL_I2C_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800159a:	f000 fa2a 	bl	80019f2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_I2C3_Init+0x7c>)
 80015a2:	f006 fb09 	bl	8007bb8 <HAL_I2CEx_ConfigAnalogFilter>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015ac:	f000 fa21 	bl	80019f2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_I2C3_Init+0x7c>)
 80015b4:	f006 fb4b 	bl	8007c4e <HAL_I2CEx_ConfigDigitalFilter>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015be:	f000 fa18 	bl	80019f2 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80015c2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80015c6:	f006 fb8f 	bl	8007ce8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000414 	.word	0x20000414
 80015d4:	40005c00 	.word	0x40005c00
 80015d8:	00100618 	.word	0x00100618

080015dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0a2      	sub	sp, #136	; 0x88
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	2254      	movs	r2, #84	; 0x54
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f013 fd24 	bl	801504a <memset>
  if(i2cHandle->Instance==I2C1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a50      	ldr	r2, [pc, #320]	; (8001748 <HAL_I2C_MspInit+0x16c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d13a      	bne.n	8001682 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800160c:	2340      	movs	r3, #64	; 0x40
 800160e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001610:	2300      	movs	r3, #0
 8001612:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4618      	mov	r0, r3
 800161a:	f008 ffaf 	bl	800a57c <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001624:	f000 f9e5 	bl	80019f2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b48      	ldr	r3, [pc, #288]	; (800174c <HAL_I2C_MspInit+0x170>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a47      	ldr	r2, [pc, #284]	; (800174c <HAL_I2C_MspInit+0x170>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b45      	ldr	r3, [pc, #276]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001640:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001644:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001646:	2312      	movs	r3, #18
 8001648:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001654:	2304      	movs	r3, #4
 8001656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f005 fcfa 	bl	800705c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001668:	4b38      	ldr	r3, [pc, #224]	; (800174c <HAL_I2C_MspInit+0x170>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	4a37      	ldr	r2, [pc, #220]	; (800174c <HAL_I2C_MspInit+0x170>)
 800166e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001672:	6593      	str	r3, [r2, #88]	; 0x58
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001680:	e05d      	b.n	800173e <HAL_I2C_MspInit+0x162>
  else if(i2cHandle->Instance==I2C3)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a32      	ldr	r2, [pc, #200]	; (8001750 <HAL_I2C_MspInit+0x174>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d158      	bne.n	800173e <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800168c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001690:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8001692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001696:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	4618      	mov	r0, r3
 800169e:	f008 ff6d 	bl	800a57c <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80016a8:	f000 f9a3 	bl	80019f2 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a26      	ldr	r2, [pc, #152]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a20      	ldr	r2, [pc, #128]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_I2C_MspInit+0x170>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016ee:	2304      	movs	r3, #4
 80016f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f005 fcad 	bl	800705c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001702:	2310      	movs	r3, #16
 8001704:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001706:	2312      	movs	r3, #18
 8001708:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001714:	2304      	movs	r3, #4
 8001716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800171e:	4619      	mov	r1, r3
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <HAL_I2C_MspInit+0x178>)
 8001722:	f005 fc9b 	bl	800705c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_I2C_MspInit+0x170>)
 800172c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001730:	6593      	str	r3, [r2, #88]	; 0x58
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_I2C_MspInit+0x170>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
}
 800173e:	bf00      	nop
 8001740:	3788      	adds	r7, #136	; 0x88
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40005400 	.word	0x40005400
 800174c:	40021000 	.word	0x40021000
 8001750:	40005c00 	.word	0x40005c00
 8001754:	48000400 	.word	0x48000400

08001758 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001768:	d104      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_GPIO_EXTI_Callback+0x38>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_GPIO_EXTI_Callback+0x38>)
 8001772:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_1){
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d104      	bne.n	8001784 <HAL_GPIO_EXTI_Callback+0x2c>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_GPIO_EXTI_Callback+0x3c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001782:	6013      	str	r3, [r2, #0]

	}
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	200006f0 	.word	0x200006f0
 8001794:	200006f4 	.word	0x200006f4

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179e:	f003 fd90 	bl	80052c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a2:	f000 f8a5 	bl	80018f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017a6:	f000 f8f6 	bl	8001996 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017aa:	f7ff fe13 	bl	80013d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ae:	f7ff fddf 	bl	8001370 <MX_DMA_Init>
  MX_I2C3_Init();
 80017b2:	f7ff fecf 	bl	8001554 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80017b6:	f003 fbc1 	bl	8004f3c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80017ba:	f7ff fc19 	bl	8000ff0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017be:	f003 fb51 	bl	8004e64 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80017c2:	f010 ff15 	bl	80125f0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80017c6:	f7ff fe85 	bl	80014d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80017ca:	f003 fbe3 	bl	8004f94 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80017ce:	f000 fcdd 	bl	800218c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 80017d2:	f000 ff51 	bl	8002678 <ssd1306_Init>

	HAL_Delay(100);
 80017d6:	2064      	movs	r0, #100	; 0x64
 80017d8:	f003 fde8 	bl	80053ac <HAL_Delay>
	ssd1306_Fill(Black);
 80017dc:	2000      	movs	r0, #0
 80017de:	f000 ffb5 	bl	800274c <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 80017e2:	2301      	movs	r3, #1
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2340      	movs	r3, #64	; 0x40
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2340      	movs	r3, #64	; 0x40
 80017ec:	4a2f      	ldr	r2, [pc, #188]	; (80018ac <main+0x114>)
 80017ee:	2120      	movs	r1, #32
 80017f0:	2020      	movs	r0, #32
 80017f2:	f001 fa7d 	bl	8002cf0 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80017f6:	f000 ffc1 	bl	800277c <ssd1306_UpdateScreen>

	HAL_Delay(500);
 80017fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017fe:	f003 fdd5 	bl	80053ac <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001802:	2203      	movs	r2, #3
 8001804:	492a      	ldr	r1, [pc, #168]	; (80018b0 <main+0x118>)
 8001806:	482b      	ldr	r0, [pc, #172]	; (80018b4 <main+0x11c>)
 8001808:	f004 f910 	bl	8005a2c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 800180c:	482a      	ldr	r0, [pc, #168]	; (80018b8 <main+0x120>)
 800180e:	f00a f923 	bl	800ba58 <HAL_TIM_Base_Start>

	HAL_UART_Abort(&hlpuart1);
 8001812:	482a      	ldr	r0, [pc, #168]	; (80018bc <main+0x124>)
 8001814:	f00a fc34 	bl	800c080 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001818:	2240      	movs	r2, #64	; 0x40
 800181a:	4929      	ldr	r1, [pc, #164]	; (80018c0 <main+0x128>)
 800181c:	4827      	ldr	r0, [pc, #156]	; (80018bc <main+0x124>)
 800181e:	f00a fbe3 	bl	800bfe8 <HAL_UART_Receive_DMA>

	memset(flashread,'1',256);
 8001822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001826:	2131      	movs	r1, #49	; 0x31
 8001828:	4826      	ldr	r0, [pc, #152]	; (80018c4 <main+0x12c>)
 800182a:	f013 fc0e 	bl	801504a <memset>
	memset(flashwrite,'\0',256);
 800182e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001832:	2100      	movs	r1, #0
 8001834:	4824      	ldr	r0, [pc, #144]	; (80018c8 <main+0x130>)
 8001836:	f013 fc08 	bl	801504a <memset>

	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_0);
 800183a:	2301      	movs	r3, #1
 800183c:	4a23      	ldr	r2, [pc, #140]	; (80018cc <main+0x134>)
 800183e:	4924      	ldr	r1, [pc, #144]	; (80018d0 <main+0x138>)
 8001840:	4824      	ldr	r0, [pc, #144]	; (80018d4 <main+0x13c>)
 8001842:	f010 fd72 	bl	801232a <SPIF_Init>

	ssd1306_Fill(Black);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 ff80 	bl	800274c <ssd1306_Fill>

	getindex();
 800184c:	f000 fde0 	bl	8002410 <getindex>

	snprintf((uint8_t*)str,20, "off=%d",pageoffset);
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <main+0x140>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a21      	ldr	r2, [pc, #132]	; (80018dc <main+0x144>)
 8001856:	2114      	movs	r1, #20
 8001858:	4821      	ldr	r0, [pc, #132]	; (80018e0 <main+0x148>)
 800185a:	f013 fb5f 	bl	8014f1c <sniprintf>
	ssd1306_SetCursor(32,40);
 800185e:	2128      	movs	r1, #40	; 0x28
 8001860:	2020      	movs	r0, #32
 8001862:	f001 f8b5 	bl	80029d0 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8001866:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <main+0x14c>)
 8001868:	2301      	movs	r3, #1
 800186a:	ca06      	ldmia	r2, {r1, r2}
 800186c:	481c      	ldr	r0, [pc, #112]	; (80018e0 <main+0x148>)
 800186e:	f001 f889 	bl	8002984 <ssd1306_WriteString>
	snprintf((uint8_t*)str,20, "page=%d",pagenumber);
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <main+0x150>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <main+0x154>)
 8001878:	2114      	movs	r1, #20
 800187a:	4819      	ldr	r0, [pc, #100]	; (80018e0 <main+0x148>)
 800187c:	f013 fb4e 	bl	8014f1c <sniprintf>
	ssd1306_SetCursor(32,48);
 8001880:	2130      	movs	r1, #48	; 0x30
 8001882:	2020      	movs	r0, #32
 8001884:	f001 f8a4 	bl	80029d0 <ssd1306_SetCursor>
	ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 8001888:	4a16      	ldr	r2, [pc, #88]	; (80018e4 <main+0x14c>)
 800188a:	2301      	movs	r3, #1
 800188c:	ca06      	ldmia	r2, {r1, r2}
 800188e:	4814      	ldr	r0, [pc, #80]	; (80018e0 <main+0x148>)
 8001890:	f001 f878 	bl	8002984 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001894:	f000 ff72 	bl	800277c <ssd1306_UpdateScreen>

	HAL_Delay(1000);
 8001898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800189c:	f003 fd86 	bl	80053ac <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		statemachine();
 80018a0:	f001 fc2e 	bl	8003100 <statemachine>
		ssd1306_UpdateScreen();
 80018a4:	f000 ff6a 	bl	800277c <ssd1306_UpdateScreen>
		statemachine();
 80018a8:	e7fa      	b.n	80018a0 <main+0x108>
 80018aa:	bf00      	nop
 80018ac:	0801914c 	.word	0x0801914c
 80018b0:	20000720 	.word	0x20000720
 80018b4:	20000314 	.word	0x20000314
 80018b8:	20000ea8 	.word	0x20000ea8
 80018bc:	20000ef4 	.word	0x20000ef4
 80018c0:	2000046c 	.word	0x2000046c
 80018c4:	20000834 	.word	0x20000834
 80018c8:	20000734 	.word	0x20000734
 80018cc:	48000400 	.word	0x48000400
 80018d0:	200009c8 	.word	0x200009c8
 80018d4:	20000700 	.word	0x20000700
 80018d8:	20000934 	.word	0x20000934
 80018dc:	08018ec8 	.word	0x08018ec8
 80018e0:	20000e48 	.word	0x20000e48
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000938 	.word	0x20000938
 80018ec:	08018ed0 	.word	0x08018ed0

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b096      	sub	sp, #88	; 0x58
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2244      	movs	r2, #68	; 0x44
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f013 fba3 	bl	801504a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001912:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001916:	f007 ff93 	bl	8009840 <HAL_PWREx_ControlVoltageScaling>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001920:	f000 f867 	bl	80019f2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001924:	2310      	movs	r3, #16
 8001926:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001928:	2301      	movs	r3, #1
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001930:	2360      	movs	r3, #96	; 0x60
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001934:	2302      	movs	r3, #2
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001938:	2301      	movs	r3, #1
 800193a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800193c:	2301      	movs	r3, #1
 800193e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001940:	2314      	movs	r3, #20
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001944:	2307      	movs	r3, #7
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001948:	2302      	movs	r3, #2
 800194a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800194c:	2302      	movs	r3, #2
 800194e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4618      	mov	r0, r3
 8001956:	f007 ffd9 	bl	800990c <HAL_RCC_OscConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001960:	f000 f847 	bl	80019f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001964:	230f      	movs	r3, #15
 8001966:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	2303      	movs	r3, #3
 800196a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001970:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800197a:	463b      	mov	r3, r7
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f008 fbd8 	bl	800a134 <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800198a:	f000 f832 	bl	80019f2 <Error_Handler>
  }
}
 800198e:	bf00      	nop
 8001990:	3758      	adds	r7, #88	; 0x58
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b096      	sub	sp, #88	; 0x58
 800199a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2254      	movs	r2, #84	; 0x54
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f013 fb51 	bl	801504a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80019a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80019ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80019b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019ba:	2301      	movs	r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80019c2:	2318      	movs	r3, #24
 80019c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019c6:	2307      	movs	r3, #7
 80019c8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80019d2:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80019d6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	f008 fdce 	bl	800a57c <HAL_RCCEx_PeriphCLKConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80019e6:	f000 f804 	bl	80019f2 <Error_Handler>
  }
}
 80019ea:	bf00      	nop
 80019ec:	3758      	adds	r7, #88	; 0x58
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f6:	b672      	cpsid	i
}
 80019f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019fa:	e7fe      	b.n	80019fa <Error_Handler+0x8>

080019fc <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7fe fc33 	bl	8000270 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d801      	bhi.n	8001a14 <gps_checksum+0x18>
 8001a10:	2300      	movs	r3, #0
 8001a12:	e038      	b.n	8001a86 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7fe fc2b 	bl	8000270 <strlen>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	3b04      	subs	r3, #4
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe fc22 	bl	8000270 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	3b03      	subs	r3, #3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	e00a      	b.n	8001a58 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4053      	eors	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3301      	adds	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7fe fc09 	bl	8000270 <strlen>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	1f5a      	subs	r2, r3, #5
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8ec      	bhi.n	8001a42 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f012 fb11 	bl	8014098 <strtol>
 8001a76:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d101      	bne.n	8001a84 <gps_checksum+0x88>
        return 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001a84:	2300      	movs	r3, #0
    }
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b0b7      	sub	sp, #220	; 0xdc
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	2264      	movs	r2, #100	; 0x64
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f013 face 	bl	801504a <memset>
    char *marker = strtok(inputString, ",");
 8001aae:	49c2      	ldr	r1, [pc, #776]	; (8001db8 <nmea_GPGGA+0x328>)
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f013 fae5 	bl	8015080 <strtok>
 8001ab6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001aba:	e027      	b.n	8001b0c <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001abc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001ac0:	f7fe fbd6 	bl	8000270 <strlen>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001acc:	1c63      	adds	r3, r4, #1
 8001ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f011 fb28 	bl	8013128 <malloc>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	00a3      	lsls	r3, r4, #2
 8001ade:	33d8      	adds	r3, #216	; 0xd8
 8001ae0:	443b      	add	r3, r7
 8001ae2:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001aea:	3b01      	subs	r3, #1
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	33d8      	adds	r3, #216	; 0xd8
 8001af0:	443b      	add	r3, r7
 8001af2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001af6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f013 fbb9 	bl	8015272 <strcpy>
        marker = strtok(NULL, ",");
 8001b00:	49ad      	ldr	r1, [pc, #692]	; (8001db8 <nmea_GPGGA+0x328>)
 8001b02:	2000      	movs	r0, #0
 8001b04:	f013 fabc 	bl	8015080 <strtok>
 8001b08:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001b0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1d3      	bne.n	8001abc <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	332c      	adds	r3, #44	; 0x2c
 8001b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f013 fba0 	bl	8015272 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001b32:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b36:	2b53      	cmp	r3, #83	; 0x53
 8001b38:	d004      	beq.n	8001b44 <nmea_GPGGA+0xb4>
 8001b3a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b3e:	2b4e      	cmp	r3, #78	; 0x4e
 8001b40:	f040 8159 	bne.w	8001df6 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b4a:	e010      	b.n	8001b6e <nmea_GPGGA+0xde>
 8001b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b52:	4413      	add	r3, r2
 8001b54:	7819      	ldrb	r1, [r3, #0]
 8001b56:	f107 021c 	add.w	r2, r7, #28
 8001b5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b5e:	4413      	add	r3, r2
 8001b60:	460a      	mov	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	ddea      	ble.n	8001b4c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b7c:	e011      	b.n	8001ba2 <nmea_GPGGA+0x112>
 8001b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b84:	3302      	adds	r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	7819      	ldrb	r1, [r3, #0]
 8001b8a:	f107 0214 	add.w	r2, r7, #20
 8001b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b92:	4413      	add	r3, r2
 8001b94:	460a      	mov	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	dde9      	ble.n	8001b7e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	220a      	movs	r2, #10
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f012 fa70 	bl	8014098 <strtol>
 8001bb8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f012 f97e 	bl	8013ec4 <strtof>
 8001bc8:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd8:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001bdc:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001dbc <nmea_GPGGA+0x32c>
 8001be0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	ee17 0a90 	vmov	r0, s15
 8001bec:	f7fe fcac 	bl	8000548 <__aeabi_f2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bfe:	e010      	b.n	8001c22 <nmea_GPGGA+0x192>
 8001c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c06:	4413      	add	r3, r2
 8001c08:	7819      	ldrb	r1, [r3, #0]
 8001c0a:	f107 0210 	add.w	r2, r7, #16
 8001c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c12:	4413      	add	r3, r2
 8001c14:	460a      	mov	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	ddea      	ble.n	8001c00 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c30:	e011      	b.n	8001c56 <nmea_GPGGA+0x1c6>
 8001c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c38:	3303      	adds	r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	7819      	ldrb	r1, [r3, #0]
 8001c3e:	f107 0208 	add.w	r2, r7, #8
 8001c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c46:	4413      	add	r3, r2
 8001c48:	460a      	mov	r2, r1
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c50:	3301      	adds	r3, #1
 8001c52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	dde9      	ble.n	8001c32 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	220a      	movs	r2, #10
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f012 fa16 	bl	8014098 <strtol>
 8001c6c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f012 f924 	bl	8013ec4 <strtof>
 8001c7c:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001c90:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001dbc <nmea_GPGGA+0x32c>
 8001c94:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	ee17 0a90 	vmov	r0, s15
 8001ca0:	f7fe fc52 	bl	8000548 <__aeabi_f2d>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001cb8:	f7fe ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d176      	bne.n	8001db0 <nmea_GPGGA+0x320>
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cce:	f7fe fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d16b      	bne.n	8001db0 <nmea_GPGGA+0x320>
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <nmea_GPGGA+0x330>)
 8001cde:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001ce2:	f7fe fefb 	bl	8000adc <__aeabi_dcmplt>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d061      	beq.n	8001db0 <nmea_GPGGA+0x320>
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <nmea_GPGGA+0x334>)
 8001cf2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cf6:	f7fe fef1 	bl	8000adc <__aeabi_dcmplt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d057      	beq.n	8001db0 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001d06:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001d10:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001d18:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001d22:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f012 f8cb 	bl	8013ec4 <strtof>
 8001d2e:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001d32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d102      	bne.n	8001d46 <nmea_GPGGA+0x2b6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	e001      	b.n	8001d4a <nmea_GPGGA+0x2ba>
 8001d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d50:	220a      	movs	r2, #10
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f012 f99f 	bl	8014098 <strtol>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d62:	220a      	movs	r2, #10
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f012 f996 	bl	8014098 <strtol>
 8001d6c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bfcc      	ite	gt
 8001d78:	2301      	movgt	r3, #1
 8001d7a:	2300      	movle	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f012 f89b 	bl	8013ec4 <strtof>
 8001d8e:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001d92:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	d102      	bne.n	8001da6 <nmea_GPGGA+0x316>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	e001      	b.n	8001daa <nmea_GPGGA+0x31a>
 8001da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001dae:	e022      	b.n	8001df6 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001db6:	e016      	b.n	8001de6 <nmea_GPGGA+0x356>
 8001db8:	08018ed8 	.word	0x08018ed8
 8001dbc:	42700000 	.word	0x42700000
 8001dc0:	40568000 	.word	0x40568000
 8001dc4:	40668000 	.word	0x40668000
 8001dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	33d8      	adds	r3, #216	; 0xd8
 8001dd0:	443b      	add	r3, r7
 8001dd2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f011 f9ae 	bl	8013138 <free>
 8001ddc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001de0:	3301      	adds	r3, #1
 8001de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001de6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbea      	blt.n	8001dc8 <nmea_GPGGA+0x338>
            return 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e019      	b.n	8001e2a <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dfc:	e00e      	b.n	8001e1c <nmea_GPGGA+0x38c>
 8001dfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	33d8      	adds	r3, #216	; 0xd8
 8001e06:	443b      	add	r3, r7
 8001e08:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f011 f993 	bl	8013138 <free>
 8001e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e16:	3301      	adds	r3, #1
 8001e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbea      	blt.n	8001dfe <nmea_GPGGA+0x36e>
    return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	37dc      	adds	r7, #220	; 0xdc
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}
 8001e32:	bf00      	nop

08001e34 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b0a3      	sub	sp, #140	; 0x8c
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2264      	movs	r2, #100	; 0x64
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f013 f8fc 	bl	801504a <memset>
    char *marker = strtok(inputString, ",");
 8001e52:	493b      	ldr	r1, [pc, #236]	; (8001f40 <nmea_GPGSA+0x10c>)
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f013 f913 	bl	8015080 <strtok>
 8001e5a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001e5e:	e027      	b.n	8001eb0 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001e60:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001e64:	f7fe fa04 	bl	8000270 <strlen>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001e70:	1c63      	adds	r3, r4, #1
 8001e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e76:	4610      	mov	r0, r2
 8001e78:	f011 f956 	bl	8013128 <malloc>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	00a3      	lsls	r3, r4, #2
 8001e82:	3388      	adds	r3, #136	; 0x88
 8001e84:	443b      	add	r3, r7
 8001e86:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	3388      	adds	r3, #136	; 0x88
 8001e94:	443b      	add	r3, r7
 8001e96:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001e9a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f013 f9e7 	bl	8015272 <strcpy>
        marker = strtok(NULL, ",");
 8001ea4:	4926      	ldr	r1, [pc, #152]	; (8001f40 <nmea_GPGSA+0x10c>)
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f013 f8ea 	bl	8015080 <strtok>
 8001eac:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1d3      	bne.n	8001e60 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	220a      	movs	r2, #10
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f012 f8ea 	bl	8014098 <strtol>
 8001ec4:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	bfcc      	ite	gt
 8001ecc:	2301      	movgt	r3, #1
 8001ece:	2300      	movle	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001edc:	2303      	movs	r3, #3
 8001ede:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ee0:	e00e      	b.n	8001f00 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3388      	adds	r3, #136	; 0x88
 8001ee8:	443b      	add	r3, r7
 8001eea:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001ef4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001efc:	3301      	adds	r3, #1
 8001efe:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f02:	2b0e      	cmp	r3, #14
 8001f04:	dded      	ble.n	8001ee2 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	677b      	str	r3, [r7, #116]	; 0x74
 8001f10:	e00b      	b.n	8001f2a <nmea_GPGSA+0xf6>
 8001f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	3388      	adds	r3, #136	; 0x88
 8001f18:	443b      	add	r3, r7
 8001f1a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f011 f90a 	bl	8013138 <free>
 8001f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f26:	3301      	adds	r3, #1
 8001f28:	677b      	str	r3, [r7, #116]	; 0x74
 8001f2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbee      	blt.n	8001f12 <nmea_GPGSA+0xde>
    return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	378c      	adds	r7, #140	; 0x8c
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	08018ed8 	.word	0x08018ed8
 8001f44:	00000000 	.word	0x00000000

08001f48 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b0a1      	sub	sp, #132	; 0x84
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	2264      	movs	r2, #100	; 0x64
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f013 f873 	bl	801504a <memset>
    char *marker = strtok(inputString, ",");
 8001f64:	4930      	ldr	r1, [pc, #192]	; (8002028 <nmea_GNRMC+0xe0>)
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f013 f88a 	bl	8015080 <strtok>
 8001f6c:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001f6e:	e021      	b.n	8001fb4 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001f70:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f72:	f7fe f97d 	bl	8000270 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001f7c:	1c63      	adds	r3, r4, #1
 8001f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f80:	4610      	mov	r0, r2
 8001f82:	f011 f8d1 	bl	8013128 <malloc>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	00a3      	lsls	r3, r4, #2
 8001f8c:	3380      	adds	r3, #128	; 0x80
 8001f8e:	443b      	add	r3, r7
 8001f90:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f96:	3b01      	subs	r3, #1
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3380      	adds	r3, #128	; 0x80
 8001f9c:	443b      	add	r3, r7
 8001f9e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001fa2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f013 f964 	bl	8015272 <strcpy>
        marker = strtok(NULL, ",");
 8001faa:	491f      	ldr	r1, [pc, #124]	; (8002028 <nmea_GNRMC+0xe0>)
 8001fac:	2000      	movs	r0, #0
 8001fae:	f013 f867 	bl	8015080 <strtok>
 8001fb2:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1da      	bne.n	8001f70 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f011 ff80 	bl	8013ec4 <strtof>
 8001fc4:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001fc8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001fca:	f7fe fabd 	bl	8000548 <__aeabi_f2d>
 8001fce:	a314      	add	r3, pc, #80	; (adr r3, 8002020 <nmea_GNRMC+0xd8>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fc3a 	bl	800084c <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7fe fe02 	bl	8000be8 <__aeabi_d2f>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001fea:	2300      	movs	r3, #0
 8001fec:	677b      	str	r3, [r7, #116]	; 0x74
 8001fee:	e00b      	b.n	8002008 <nmea_GNRMC+0xc0>
 8001ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	3380      	adds	r3, #128	; 0x80
 8001ff6:	443b      	add	r3, r7
 8001ff8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f011 f89b 	bl	8013138 <free>
 8002002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002004:	3301      	adds	r3, #1
 8002006:	677b      	str	r3, [r7, #116]	; 0x74
 8002008:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800200a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800200c:	429a      	cmp	r2, r3
 800200e:	dbef      	blt.n	8001ff0 <nmea_GNRMC+0xa8>
    return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	3784      	adds	r7, #132	; 0x84
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
 8002020:	be76c8b4 	.word	0xbe76c8b4
 8002024:	3fff1a9f 	.word	0x3fff1a9f
 8002028:	08018ed8 	.word	0x08018ed8

0800202c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8002036:	223c      	movs	r2, #60	; 0x3c
 8002038:	2100      	movs	r1, #0
 800203a:	484e      	ldr	r0, [pc, #312]	; (8002174 <nmea_parse+0x148>)
 800203c:	f013 f805 	bl	801504a <memset>
    char * token = strtok(buffer, "$");
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <nmea_parse+0x14c>)
 8002042:	6838      	ldr	r0, [r7, #0]
 8002044:	f013 f81c 	bl	8015080 <strtok>
 8002048:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 800204e:	e01d      	b.n	800208c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7fe f90d 	bl	8000270 <strlen>
 8002056:	4603      	mov	r3, r0
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	693c      	ldr	r4, [r7, #16]
 800205c:	1c63      	adds	r3, r4, #1
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	4610      	mov	r0, r2
 8002062:	f011 f861 	bl	8013128 <malloc>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	4b42      	ldr	r3, [pc, #264]	; (8002174 <nmea_parse+0x148>)
 800206c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	3b01      	subs	r3, #1
 8002074:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <nmea_parse+0x148>)
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	6979      	ldr	r1, [r7, #20]
 800207c:	4618      	mov	r0, r3
 800207e:	f013 f8f8 	bl	8015272 <strcpy>
        token = strtok(NULL, "$");
 8002082:	493d      	ldr	r1, [pc, #244]	; (8002178 <nmea_parse+0x14c>)
 8002084:	2000      	movs	r0, #0
 8002086:	f012 fffb 	bl	8015080 <strtok>
 800208a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1de      	bne.n	8002050 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e052      	b.n	800213e <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002098:	4a36      	ldr	r2, [pc, #216]	; (8002174 <nmea_parse+0x148>)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	4936      	ldr	r1, [pc, #216]	; (800217c <nmea_parse+0x150>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	f013 f848 	bl	8015138 <strstr>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d044      	beq.n	8002138 <nmea_parse+0x10c>
 80020ae:	4a31      	ldr	r2, [pc, #196]	; (8002174 <nmea_parse+0x148>)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fca0 	bl	80019fc <gps_checksum>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03a      	beq.n	8002138 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 80020c2:	4a2c      	ldr	r2, [pc, #176]	; (8002174 <nmea_parse+0x148>)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	492d      	ldr	r1, [pc, #180]	; (8002180 <nmea_parse+0x154>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f013 f833 	bl	8015138 <strstr>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <nmea_parse+0x148>)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ff30 	bl	8001f48 <nmea_GNRMC>
 80020e8:	e026      	b.n	8002138 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80020ea:	4a22      	ldr	r2, [pc, #136]	; (8002174 <nmea_parse+0x148>)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	4924      	ldr	r1, [pc, #144]	; (8002184 <nmea_parse+0x158>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f013 f81f 	bl	8015138 <strstr>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <nmea_parse+0x148>)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fe92 	bl	8001e34 <nmea_GPGSA>
 8002110:	e012      	b.n	8002138 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8002112:	4a18      	ldr	r2, [pc, #96]	; (8002174 <nmea_parse+0x148>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	491b      	ldr	r1, [pc, #108]	; (8002188 <nmea_parse+0x15c>)
 800211c:	4618      	mov	r0, r3
 800211e:	f013 f80b 	bl	8015138 <strstr>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002128:	4a12      	ldr	r2, [pc, #72]	; (8002174 <nmea_parse+0x148>)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fcac 	bl	8001a90 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	429a      	cmp	r2, r3
 8002144:	dba8      	blt.n	8002098 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	e009      	b.n	8002160 <nmea_parse+0x134>
 800214c:	4a09      	ldr	r2, [pc, #36]	; (8002174 <nmea_parse+0x148>)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	4618      	mov	r0, r3
 8002156:	f010 ffef 	bl	8013138 <free>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3301      	adds	r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	dbf1      	blt.n	800214c <nmea_parse+0x120>


}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd90      	pop	{r4, r7, pc}
 8002172:	bf00      	nop
 8002174:	20000958 	.word	0x20000958
 8002178:	08018edc 	.word	0x08018edc
 800217c:	08018ee0 	.word	0x08018ee0
 8002180:	08018ee4 	.word	0x08018ee4
 8002184:	08018eec 	.word	0x08018eec
 8002188:	08018ef4 	.word	0x08018ef4

0800218c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <MX_SPI1_Init+0x74>)
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <MX_SPI1_Init+0x78>)
 8002194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <MX_SPI1_Init+0x74>)
 8002198:	f44f 7282 	mov.w	r2, #260	; 0x104
 800219c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MX_SPI1_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_SPI1_Init+0x74>)
 80021a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_SPI1_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <MX_SPI1_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_SPI1_Init+0x74>)
 80021ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_SPI1_Init+0x74>)
 80021c2:	2210      	movs	r2, #16
 80021c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_SPI1_Init+0x74>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <MX_SPI1_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_SPI1_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_SPI1_Init+0x74>)
 80021da:	2207      	movs	r2, #7
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <MX_SPI1_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_SPI1_Init+0x74>)
 80021e6:	2208      	movs	r2, #8
 80021e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_SPI1_Init+0x74>)
 80021ec:	f008 fcae 	bl	800ab4c <HAL_SPI_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80021f6:	f7ff fbfc 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200009c8 	.word	0x200009c8
 8002204:	40013000 	.word	0x40013000

08002208 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a25      	ldr	r2, [pc, #148]	; (80022bc <HAL_SPI_MspInit+0xb4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d144      	bne.n	80022b4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002234:	6613      	str	r3, [r2, #96]	; 0x60
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_SPI_MspInit+0xb8>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002272:	2360      	movs	r3, #96	; 0x60
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002282:	2305      	movs	r3, #5
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002290:	f004 fee4 	bl	800705c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002294:	2320      	movs	r3, #32
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a4:	2305      	movs	r3, #5
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_SPI_MspInit+0xbc>)
 80022b0:	f004 fed4 	bl	800705c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022b4:	bf00      	nop
 80022b6:	3728      	adds	r7, #40	; 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40013000 	.word	0x40013000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48000400 	.word	0x48000400

080022c8 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	ed2d 8b02 	vpush	{d8}
 80022d0:	b09c      	sub	sp, #112	; 0x70
 80022d2:	af10      	add	r7, sp, #64	; 0x40
 80022d4:	6278      	str	r0, [r7, #36]	; 0x24
 80022d6:	ed87 0a08 	vstr	s0, [r7, #32]
 80022da:	edc7 0a07 	vstr	s1, [r7, #28]
 80022de:	61b9      	str	r1, [r7, #24]
 80022e0:	617a      	str	r2, [r7, #20]
 80022e2:	ed87 1a04 	vstr	s2, [r7, #16]
	int framesize=0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	framesize=snprintf((uint8_t*)buffer,256, "%0.2f,%0.2f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2);
 80022ea:	6a38      	ldr	r0, [r7, #32]
 80022ec:	f7fe f92c 	bl	8000548 <__aeabi_f2d>
 80022f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80022f4:	69f8      	ldr	r0, [r7, #28]
 80022f6:	f7fe f927 	bl	8000548 <__aeabi_f2d>
 80022fa:	e9c7 0100 	strd	r0, r1, [r7]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f920 	bl	8000548 <__aeabi_f2d>
 8002308:	a320      	add	r3, pc, #128	; (adr r3, 800238c <csvframe+0xc4>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fe f973 	bl	80005f8 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	ec43 2b18 	vmov	d8, r2, r3
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f90c 	bl	8000548 <__aeabi_f2d>
 8002330:	4604      	mov	r4, r0
 8002332:	460d      	mov	r5, r1
 8002334:	6938      	ldr	r0, [r7, #16]
 8002336:	f7fe f907 	bl	8000548 <__aeabi_f2d>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	930c      	str	r3, [sp, #48]	; 0x30
 8002346:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800234a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800234e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002352:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002356:	ed97 7b00 	vldr	d7, [r7]
 800235a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800235e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002362:	ed8d 7b00 	vstr	d7, [sp]
 8002366:	4a08      	ldr	r2, [pc, #32]	; (8002388 <csvframe+0xc0>)
 8002368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800236e:	f012 fdd5 	bl	8014f1c <sniprintf>
 8002372:	62f8      	str	r0, [r7, #44]	; 0x2c
	return framesize;
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002376:	4618      	mov	r0, r3
 8002378:	3730      	adds	r7, #48	; 0x30
 800237a:	46bd      	mov	sp, r7
 800237c:	ecbd 8b02 	vpop	{d8}
 8002380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002384:	f3af 8000 	nop.w
 8002388:	08018efc 	.word	0x08018efc
 800238c:	cccccccd 	.word	0xcccccccd
 8002390:	400ccccc 	.word	0x400ccccc

08002394 <storeindex>:


void storeindex(void){
 8002394:	b580      	push	{r7, lr}
 8002396:	b09c      	sub	sp, #112	; 0x70
 8002398:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 800239a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800239e:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 80023a0:	463b      	mov	r3, r7
 80023a2:	2264      	movs	r2, #100	; 0x64
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f012 fe4f 	bl	801504a <memset>
	snprintf((uint8_t*)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <storeindex+0x6c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <storeindex+0x70>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4638      	mov	r0, r7
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	4a13      	ldr	r2, [pc, #76]	; (8002408 <storeindex+0x74>)
 80023bc:	2164      	movs	r1, #100	; 0x64
 80023be:	f012 fdad 	bl	8014f1c <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 80023c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	da00      	bge.n	80023ca <storeindex+0x36>
 80023c8:	330f      	adds	r3, #15
 80023ca:	111b      	asrs	r3, r3, #4
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f8a9 	bl	8000524 <__aeabi_i2d>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fbbd 	bl	8000b58 <__aeabi_d2iz>
 80023de:	4603      	mov	r3, r0
 80023e0:	4619      	mov	r1, r3
 80023e2:	480a      	ldr	r0, [pc, #40]	; (800240c <storeindex+0x78>)
 80023e4:	f010 f837 	bl	8012456 <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 80023e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80023ea:	463a      	mov	r2, r7
 80023ec:	2300      	movs	r3, #0
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2364      	movs	r3, #100	; 0x64
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <storeindex+0x78>)
 80023f4:	f010 f8b2 	bl	801255c <SPIF_WritePage>

}
 80023f8:	bf00      	nop
 80023fa:	3768      	adds	r7, #104	; 0x68
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000934 	.word	0x20000934
 8002404:	20000938 	.word	0x20000938
 8002408:	08018f2c 	.word	0x08018f2c
 800240c:	20000700 	.word	0x20000700

08002410 <getindex>:

void getindex(void){
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8002416:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800241a:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	2300      	movs	r3, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2332      	movs	r3, #50	; 0x32
 8002424:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <getindex+0xc4>)
 8002426:	482c      	ldr	r0, [pc, #176]	; (80024d8 <getindex+0xc8>)
 8002428:	f010 f8b6 	bl	8012598 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 800242c:	220a      	movs	r2, #10
 800242e:	2124      	movs	r1, #36	; 0x24
 8002430:	482a      	ldr	r0, [pc, #168]	; (80024dc <getindex+0xcc>)
 8002432:	f012 fe0a 	bl	801504a <memset>
	memset(numbuf2,'$',10);
 8002436:	220a      	movs	r2, #10
 8002438:	2124      	movs	r1, #36	; 0x24
 800243a:	4829      	ldr	r0, [pc, #164]	; (80024e0 <getindex+0xd0>)
 800243c:	f012 fe05 	bl	801504a <memset>
	int cnt=0;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8002444:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <getindex+0xc4>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	2b09      	cmp	r3, #9
 800244e:	dc3a      	bgt.n	80024c6 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8002450:	e00b      	b.n	800246a <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8002452:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <getindex+0xc4>)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	7819      	ldrb	r1, [r3, #0]
 800245a:	4a20      	ldr	r2, [pc, #128]	; (80024dc <getindex+0xcc>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	460a      	mov	r2, r1
 8002462:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <getindex+0xc4>)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b24      	cmp	r3, #36	; 0x24
 8002474:	d1ed      	bne.n	8002452 <getindex+0x42>
		  }
		  cnt++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3301      	adds	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8002480:	e00e      	b.n	80024a0 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <getindex+0xc4>)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	7819      	ldrb	r1, [r3, #0]
 800248a:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <getindex+0xd0>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4413      	add	r3, r2
 8002490:	460a      	mov	r2, r1
 8002492:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3301      	adds	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3301      	adds	r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <getindex+0xc4>)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b24      	cmp	r3, #36	; 0x24
 80024aa:	d1ea      	bne.n	8002482 <getindex+0x72>
		  	  }

		 pageoffset=atoi((uint8_t*)numbuf1);
 80024ac:	480b      	ldr	r0, [pc, #44]	; (80024dc <getindex+0xcc>)
 80024ae:	f010 fe37 	bl	8013120 <atoi>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <getindex+0xd4>)
 80024b6:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((uint8_t*)numbuf2);
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <getindex+0xd0>)
 80024ba:	f010 fe31 	bl	8013120 <atoi>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <getindex+0xd8>)
 80024c2:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 80024c4:	e001      	b.n	80024ca <getindex+0xba>
		storeindex();
 80024c6:	f7ff ff65 	bl	8002394 <storeindex>
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000994 	.word	0x20000994
 80024d8:	20000700 	.word	0x20000700
 80024dc:	20000940 	.word	0x20000940
 80024e0:	2000094c 	.word	0x2000094c
 80024e4:	20000934 	.word	0x20000934
 80024e8:	20000938 	.word	0x20000938

080024ec <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 80024f6:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <writebuffertoflash+0x108>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11b      	bne.n	800253c <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8002504:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <writebuffertoflash+0x10c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d117      	bne.n	800253c <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <writebuffertoflash+0x108>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	da00      	bge.n	8002518 <writebuffertoflash+0x2c>
 8002516:	330f      	adds	r3, #15
 8002518:	111b      	asrs	r3, r3, #4
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f802 	bl	8000524 <__aeabi_i2d>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe fb16 	bl	8000b58 <__aeabi_d2iz>
 800252c:	4603      	mov	r3, r0
 800252e:	4619      	mov	r1, r3
 8002530:	4832      	ldr	r0, [pc, #200]	; (80025fc <writebuffertoflash+0x110>)
 8002532:	f00f ff90 	bl	8012456 <SPIF_EraseSector>
		sectoreraseen=1;
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <writebuffertoflash+0x10c>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <writebuffertoflash+0x114>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	2bff      	cmp	r3, #255	; 0xff
 8002546:	dc11      	bgt.n	800256c <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8002548:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <writebuffertoflash+0x108>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <writebuffertoflash+0x114>)
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	9200      	str	r2, [sp, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4828      	ldr	r0, [pc, #160]	; (80025fc <writebuffertoflash+0x110>)
 800255a:	f00f ffff 	bl	801255c <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 800255e:	4b28      	ldr	r3, [pc, #160]	; (8002600 <writebuffertoflash+0x114>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	4413      	add	r3, r2
 8002566:	4a26      	ldr	r2, [pc, #152]	; (8002600 <writebuffertoflash+0x114>)
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e03c      	b.n	80025e6 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <writebuffertoflash+0x108>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	4b23      	ldr	r3, [pc, #140]	; (8002600 <writebuffertoflash+0x114>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800257a:	461a      	mov	r2, r3
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <writebuffertoflash+0x114>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	481d      	ldr	r0, [pc, #116]	; (80025fc <writebuffertoflash+0x110>)
 8002588:	f00f ffe8 	bl	801255c <SPIF_WritePage>
		HAL_Delay(100);
 800258c:	2064      	movs	r0, #100	; 0x64
 800258e:	f002 ff0d 	bl	80053ac <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <writebuffertoflash+0x108>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	4618      	mov	r0, r3
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <writebuffertoflash+0x114>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	1899      	adds	r1, r3, r2
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <writebuffertoflash+0x114>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	2300      	movs	r3, #0
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	460a      	mov	r2, r1
 80025be:	4601      	mov	r1, r0
 80025c0:	480e      	ldr	r0, [pc, #56]	; (80025fc <writebuffertoflash+0x110>)
 80025c2:	f00f ffcb 	bl	801255c <SPIF_WritePage>
		pagenumber=pagenumber+1;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <writebuffertoflash+0x108>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <writebuffertoflash+0x108>)
 80025ce:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <writebuffertoflash+0x10c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <writebuffertoflash+0x114>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <writebuffertoflash+0x114>)
 80025e4:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 80025e6:	f7ff fed5 	bl	8002394 <storeindex>

}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000938 	.word	0x20000938
 80025f8:	2000093c 	.word	0x2000093c
 80025fc:	20000700 	.word	0x20000700
 8002600:	20000934 	.word	0x20000934

08002604 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af04      	add	r7, sp, #16
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	2301      	movs	r3, #1
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	1dfb      	adds	r3, r7, #7
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	2200      	movs	r2, #0
 8002630:	2178      	movs	r1, #120	; 0x78
 8002632:	4803      	ldr	r0, [pc, #12]	; (8002640 <ssd1306_WriteCommand+0x2c>)
 8002634:	f004 ff48 	bl	80074c8 <HAL_I2C_Mem_Write>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000414 	.word	0x20000414

08002644 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af04      	add	r7, sp, #16
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	f04f 32ff 	mov.w	r2, #4294967295
 8002656:	9202      	str	r2, [sp, #8]
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2301      	movs	r3, #1
 8002660:	2240      	movs	r2, #64	; 0x40
 8002662:	2178      	movs	r1, #120	; 0x78
 8002664:	4803      	ldr	r0, [pc, #12]	; (8002674 <ssd1306_WriteData+0x30>)
 8002666:	f004 ff2f 	bl	80074c8 <HAL_I2C_Mem_Write>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000414 	.word	0x20000414

08002678 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800267c:	f7ff ffc2 	bl	8002604 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002680:	2064      	movs	r0, #100	; 0x64
 8002682:	f002 fe93 	bl	80053ac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002686:	2000      	movs	r0, #0
 8002688:	f000 fba0 	bl	8002dcc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800268c:	2020      	movs	r0, #32
 800268e:	f7ff ffc1 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff ffbe 	bl	8002614 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002698:	20b0      	movs	r0, #176	; 0xb0
 800269a:	f7ff ffbb 	bl	8002614 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800269e:	20c8      	movs	r0, #200	; 0xc8
 80026a0:	f7ff ffb8 	bl	8002614 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7ff ffb5 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80026aa:	2010      	movs	r0, #16
 80026ac:	f7ff ffb2 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80026b0:	2040      	movs	r0, #64	; 0x40
 80026b2:	f7ff ffaf 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80026b6:	20ff      	movs	r0, #255	; 0xff
 80026b8:	f000 fb75 	bl	8002da6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80026bc:	20a1      	movs	r0, #161	; 0xa1
 80026be:	f7ff ffa9 	bl	8002614 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80026c2:	20a6      	movs	r0, #166	; 0xa6
 80026c4:	f7ff ffa6 	bl	8002614 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80026c8:	20a8      	movs	r0, #168	; 0xa8
 80026ca:	f7ff ffa3 	bl	8002614 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80026ce:	203f      	movs	r0, #63	; 0x3f
 80026d0:	f7ff ffa0 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80026d4:	20a4      	movs	r0, #164	; 0xa4
 80026d6:	f7ff ff9d 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80026da:	20d3      	movs	r0, #211	; 0xd3
 80026dc:	f7ff ff9a 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7ff ff97 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80026e6:	20d5      	movs	r0, #213	; 0xd5
 80026e8:	f7ff ff94 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80026ec:	20f0      	movs	r0, #240	; 0xf0
 80026ee:	f7ff ff91 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80026f2:	20d9      	movs	r0, #217	; 0xd9
 80026f4:	f7ff ff8e 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80026f8:	2022      	movs	r0, #34	; 0x22
 80026fa:	f7ff ff8b 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80026fe:	20da      	movs	r0, #218	; 0xda
 8002700:	f7ff ff88 	bl	8002614 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002704:	2012      	movs	r0, #18
 8002706:	f7ff ff85 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800270a:	20db      	movs	r0, #219	; 0xdb
 800270c:	f7ff ff82 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002710:	2020      	movs	r0, #32
 8002712:	f7ff ff7f 	bl	8002614 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002716:	208d      	movs	r0, #141	; 0x8d
 8002718:	f7ff ff7c 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800271c:	2014      	movs	r0, #20
 800271e:	f7ff ff79 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002722:	2001      	movs	r0, #1
 8002724:	f000 fb52 	bl	8002dcc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002728:	2000      	movs	r0, #0
 800272a:	f000 f80f 	bl	800274c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800272e:	f000 f825 	bl	800277c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <ssd1306_Init+0xd0>)
 8002734:	2200      	movs	r2, #0
 8002736:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <ssd1306_Init+0xd0>)
 800273a:	2200      	movs	r2, #0
 800273c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800273e:	4b02      	ldr	r3, [pc, #8]	; (8002748 <ssd1306_Init+0xd0>)
 8002740:	2201      	movs	r2, #1
 8002742:	711a      	strb	r2, [r3, #4]
}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000e2c 	.word	0x20000e2c

0800274c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <ssd1306_Fill+0x14>
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <ssd1306_Fill+0x16>
 8002760:	23ff      	movs	r3, #255	; 0xff
 8002762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002766:	4619      	mov	r1, r3
 8002768:	4803      	ldr	r0, [pc, #12]	; (8002778 <ssd1306_Fill+0x2c>)
 800276a:	f012 fc6e 	bl	801504a <memset>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000a2c 	.word	0x20000a2c

0800277c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002782:	2300      	movs	r3, #0
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	e016      	b.n	80027b6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	3b50      	subs	r3, #80	; 0x50
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff40 	bl	8002614 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002794:	2000      	movs	r0, #0
 8002796:	f7ff ff3d 	bl	8002614 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800279a:	2010      	movs	r0, #16
 800279c:	f7ff ff3a 	bl	8002614 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	01db      	lsls	r3, r3, #7
 80027a4:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <ssd1306_UpdateScreen+0x4c>)
 80027a6:	4413      	add	r3, r2
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff4a 	bl	8002644 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	3301      	adds	r3, #1
 80027b4:	71fb      	strb	r3, [r7, #7]
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2b07      	cmp	r3, #7
 80027ba:	d9e5      	bls.n	8002788 <ssd1306_UpdateScreen+0xc>
    }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000a2c 	.word	0x20000a2c

080027cc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	460b      	mov	r3, r1
 80027d8:	71bb      	strb	r3, [r7, #6]
 80027da:	4613      	mov	r3, r2
 80027dc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	db3d      	blt.n	8002862 <ssd1306_DrawPixel+0x96>
 80027e6:	79bb      	ldrb	r3, [r7, #6]
 80027e8:	2b3f      	cmp	r3, #63	; 0x3f
 80027ea:	d83a      	bhi.n	8002862 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80027ec:	797b      	ldrb	r3, [r7, #5]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d11a      	bne.n	8002828 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027f2:	79fa      	ldrb	r2, [r7, #7]
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	b2d8      	uxtb	r0, r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	01db      	lsls	r3, r3, #7
 80027fe:	4413      	add	r3, r2
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <ssd1306_DrawPixel+0xa4>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	b25a      	sxtb	r2, r3
 8002806:	79bb      	ldrb	r3, [r7, #6]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	b25b      	sxtb	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b259      	sxtb	r1, r3
 8002818:	79fa      	ldrb	r2, [r7, #7]
 800281a:	4603      	mov	r3, r0
 800281c:	01db      	lsls	r3, r3, #7
 800281e:	4413      	add	r3, r2
 8002820:	b2c9      	uxtb	r1, r1
 8002822:	4a13      	ldr	r2, [pc, #76]	; (8002870 <ssd1306_DrawPixel+0xa4>)
 8002824:	54d1      	strb	r1, [r2, r3]
 8002826:	e01d      	b.n	8002864 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002828:	79fa      	ldrb	r2, [r7, #7]
 800282a:	79bb      	ldrb	r3, [r7, #6]
 800282c:	08db      	lsrs	r3, r3, #3
 800282e:	b2d8      	uxtb	r0, r3
 8002830:	4603      	mov	r3, r0
 8002832:	01db      	lsls	r3, r3, #7
 8002834:	4413      	add	r3, r2
 8002836:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <ssd1306_DrawPixel+0xa4>)
 8002838:	5cd3      	ldrb	r3, [r2, r3]
 800283a:	b25a      	sxtb	r2, r3
 800283c:	79bb      	ldrb	r3, [r7, #6]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	2101      	movs	r1, #1
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	b25b      	sxtb	r3, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	b25b      	sxtb	r3, r3
 800284e:	4013      	ands	r3, r2
 8002850:	b259      	sxtb	r1, r3
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	4603      	mov	r3, r0
 8002856:	01db      	lsls	r3, r3, #7
 8002858:	4413      	add	r3, r2
 800285a:	b2c9      	uxtb	r1, r1
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <ssd1306_DrawPixel+0xa4>)
 800285e:	54d1      	strb	r1, [r2, r3]
 8002860:	e000      	b.n	8002864 <ssd1306_DrawPixel+0x98>
        return;
 8002862:	bf00      	nop
    }
}
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000a2c 	.word	0x20000a2c

08002874 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	4604      	mov	r4, r0
 800287c:	1d38      	adds	r0, r7, #4
 800287e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002882:	461a      	mov	r2, r3
 8002884:	4623      	mov	r3, r4
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	4613      	mov	r3, r2
 800288a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b1f      	cmp	r3, #31
 8002890:	d902      	bls.n	8002898 <ssd1306_WriteChar+0x24>
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b7e      	cmp	r3, #126	; 0x7e
 8002896:	d901      	bls.n	800289c <ssd1306_WriteChar+0x28>
        return 0;
 8002898:	2300      	movs	r3, #0
 800289a:	e06d      	b.n	8002978 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800289c:	4b38      	ldr	r3, [pc, #224]	; (8002980 <ssd1306_WriteChar+0x10c>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	793b      	ldrb	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	2b80      	cmp	r3, #128	; 0x80
 80028a8:	dc06      	bgt.n	80028b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80028aa:	4b35      	ldr	r3, [pc, #212]	; (8002980 <ssd1306_WriteChar+0x10c>)
 80028ac:	885b      	ldrh	r3, [r3, #2]
 80028ae:	461a      	mov	r2, r3
 80028b0:	797b      	ldrb	r3, [r7, #5]
 80028b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	dd01      	ble.n	80028bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e05d      	b.n	8002978 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	e04c      	b.n	800295c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	3b20      	subs	r3, #32
 80028c8:	7979      	ldrb	r1, [r7, #5]
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4619      	mov	r1, r3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	440b      	add	r3, r1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	e034      	b.n	800294c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028f2:	4b23      	ldr	r3, [pc, #140]	; (8002980 <ssd1306_WriteChar+0x10c>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	b2d8      	uxtb	r0, r3
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <ssd1306_WriteChar+0x10c>)
 8002902:	885b      	ldrh	r3, [r3, #2]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	4413      	add	r3, r2
 800290c:	b2db      	uxtb	r3, r3
 800290e:	7bba      	ldrb	r2, [r7, #14]
 8002910:	4619      	mov	r1, r3
 8002912:	f7ff ff5b 	bl	80027cc <ssd1306_DrawPixel>
 8002916:	e016      	b.n	8002946 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <ssd1306_WriteChar+0x10c>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4413      	add	r3, r2
 8002924:	b2d8      	uxtb	r0, r3
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <ssd1306_WriteChar+0x10c>)
 8002928:	885b      	ldrh	r3, [r3, #2]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4413      	add	r3, r2
 8002932:	b2d9      	uxtb	r1, r3
 8002934:	7bbb      	ldrb	r3, [r7, #14]
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	f7ff ff43 	bl	80027cc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	3301      	adds	r3, #1
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	793b      	ldrb	r3, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4293      	cmp	r3, r2
 8002954:	d3c5      	bcc.n	80028e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	797b      	ldrb	r3, [r7, #5]
 800295e:	461a      	mov	r2, r3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4293      	cmp	r3, r2
 8002964:	d3ad      	bcc.n	80028c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <ssd1306_WriteChar+0x10c>)
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	793b      	ldrb	r3, [r7, #4]
 800296c:	b29b      	uxth	r3, r3
 800296e:	4413      	add	r3, r2
 8002970:	b29a      	uxth	r2, r3
 8002972:	4b03      	ldr	r3, [pc, #12]	; (8002980 <ssd1306_WriteChar+0x10c>)
 8002974:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3724      	adds	r7, #36	; 0x24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}
 8002980:	20000e2c 	.word	0x20000e2c

08002984 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	1d38      	adds	r0, r7, #4
 800298e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002992:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002994:	e012      	b.n	80029bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	7818      	ldrb	r0, [r3, #0]
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	1d3a      	adds	r2, r7, #4
 800299e:	ca06      	ldmia	r2, {r1, r2}
 80029a0:	f7ff ff68 	bl	8002874 <ssd1306_WriteChar>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d002      	beq.n	80029b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	e008      	b.n	80029c8 <ssd1306_WriteString+0x44>
        }
        str++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e8      	bne.n	8002996 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	781b      	ldrb	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	460a      	mov	r2, r1
 80029da:	71fb      	strb	r3, [r7, #7]
 80029dc:	4613      	mov	r3, r2
 80029de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <ssd1306_SetCursor+0x2c>)
 80029e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80029e8:	79bb      	ldrb	r3, [r7, #6]
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <ssd1306_SetCursor+0x2c>)
 80029ee:	805a      	strh	r2, [r3, #2]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	20000e2c 	.word	0x20000e2c

08002a00 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4604      	mov	r4, r0
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	71fb      	strb	r3, [r7, #7]
 8002a12:	4603      	mov	r3, r0
 8002a14:	71bb      	strb	r3, [r7, #6]
 8002a16:	460b      	mov	r3, r1
 8002a18:	717b      	strb	r3, [r7, #5]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002a1e:	797a      	ldrb	r2, [r7, #5]
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bfb8      	it	lt
 8002a28:	425b      	neglt	r3, r3
 8002a2a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002a2c:	793a      	ldrb	r2, [r7, #4]
 8002a2e:	79bb      	ldrb	r3, [r7, #6]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bfb8      	it	lt
 8002a36:	425b      	neglt	r3, r3
 8002a38:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002a3a:	79fa      	ldrb	r2, [r7, #7]
 8002a3c:	797b      	ldrb	r3, [r7, #5]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d201      	bcs.n	8002a46 <ssd1306_Line+0x46>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e001      	b.n	8002a4a <ssd1306_Line+0x4a>
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002a4c:	79ba      	ldrb	r2, [r7, #6]
 8002a4e:	793b      	ldrb	r3, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d201      	bcs.n	8002a58 <ssd1306_Line+0x58>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e001      	b.n	8002a5c <ssd1306_Line+0x5c>
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002a66:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002a6a:	7939      	ldrb	r1, [r7, #4]
 8002a6c:	797b      	ldrb	r3, [r7, #5]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff feac 	bl	80027cc <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002a74:	e024      	b.n	8002ac0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002a76:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002a7a:	79b9      	ldrb	r1, [r7, #6]
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fea4 	bl	80027cc <ssd1306_DrawPixel>
        error2 = error * 2;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	425b      	negs	r3, r3
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dd08      	ble.n	8002aa6 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	da08      	bge.n	8002ac0 <ssd1306_Line+0xc0>
            error += deltaX;
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	79bb      	ldrb	r3, [r7, #6]
 8002abc:	4413      	add	r3, r2
 8002abe:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002ac0:	79fa      	ldrb	r2, [r7, #7]
 8002ac2:	797b      	ldrb	r3, [r7, #5]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1d6      	bne.n	8002a76 <ssd1306_Line+0x76>
 8002ac8:	79ba      	ldrb	r2, [r7, #6]
 8002aca:	793b      	ldrb	r3, [r7, #4]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1d2      	bne.n	8002a76 <ssd1306_Line+0x76>
        }
    }
    return;
 8002ad0:	bf00      	nop
}
 8002ad2:	3724      	adds	r7, #36	; 0x24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd90      	pop	{r4, r7, pc}

08002ad8 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4604      	mov	r4, r0
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	71fb      	strb	r3, [r7, #7]
 8002aea:	4603      	mov	r3, r0
 8002aec:	71bb      	strb	r3, [r7, #6]
 8002aee:	460b      	mov	r3, r1
 8002af0:	717b      	strb	r3, [r7, #5]
 8002af2:	4613      	mov	r3, r2
 8002af4:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002af6:	797b      	ldrb	r3, [r7, #5]
 8002af8:	425b      	negs	r3, r3
 8002afa:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002b00:	797b      	ldrb	r3, [r7, #5]
 8002b02:	f1c3 0301 	rsb	r3, r3, #1
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	db65      	blt.n	8002bde <ssd1306_DrawCircle+0x106>
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	2b3f      	cmp	r3, #63	; 0x3f
 8002b16:	d862      	bhi.n	8002bde <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	79fa      	ldrb	r2, [r7, #7]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	b2d8      	uxtb	r0, r3
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	79bb      	ldrb	r3, [r7, #6]
 8002b28:	4413      	add	r3, r2
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	793a      	ldrb	r2, [r7, #4]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7ff fe4c 	bl	80027cc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	b2d8      	uxtb	r0, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	79bb      	ldrb	r3, [r7, #6]
 8002b44:	4413      	add	r3, r2
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	793a      	ldrb	r2, [r7, #4]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f7ff fe3e 	bl	80027cc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4413      	add	r3, r2
 8002b58:	b2d8      	uxtb	r0, r3
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	79ba      	ldrb	r2, [r7, #6]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	793a      	ldrb	r2, [r7, #4]
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7ff fe30 	bl	80027cc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	79fa      	ldrb	r2, [r7, #7]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	b2d8      	uxtb	r0, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	79ba      	ldrb	r2, [r7, #6]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	793a      	ldrb	r2, [r7, #4]
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7ff fe22 	bl	80027cc <ssd1306_DrawPixel>
        e2 = err;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	dc13      	bgt.n	8002bbc <ssd1306_DrawCircle+0xe4>
            y++;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	3301      	adds	r3, #1
 8002b98:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	425b      	negs	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d105      	bne.n	8002bbc <ssd1306_DrawCircle+0xe4>
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dc01      	bgt.n	8002bbc <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	dd08      	ble.n	8002bd6 <ssd1306_DrawCircle+0xfe>
            x++;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	3301      	adds	r3, #1
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	dd9d      	ble.n	8002b18 <ssd1306_DrawCircle+0x40>

    return;
 8002bdc:	e000      	b.n	8002be0 <ssd1306_DrawCircle+0x108>
        return;
 8002bde:	bf00      	nop
}
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}

08002be6 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002be6:	b590      	push	{r4, r7, lr}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	4604      	mov	r4, r0
 8002bee:	4608      	mov	r0, r1
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	71bb      	strb	r3, [r7, #6]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	717b      	strb	r3, [r7, #5]
 8002c00:	4613      	mov	r3, r2
 8002c02:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002c04:	79bc      	ldrb	r4, [r7, #6]
 8002c06:	797a      	ldrb	r2, [r7, #5]
 8002c08:	79b9      	ldrb	r1, [r7, #6]
 8002c0a:	79f8      	ldrb	r0, [r7, #7]
 8002c0c:	7e3b      	ldrb	r3, [r7, #24]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4623      	mov	r3, r4
 8002c12:	f7ff fef5 	bl	8002a00 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002c16:	793c      	ldrb	r4, [r7, #4]
 8002c18:	797a      	ldrb	r2, [r7, #5]
 8002c1a:	79b9      	ldrb	r1, [r7, #6]
 8002c1c:	7978      	ldrb	r0, [r7, #5]
 8002c1e:	7e3b      	ldrb	r3, [r7, #24]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	4623      	mov	r3, r4
 8002c24:	f7ff feec 	bl	8002a00 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002c28:	793c      	ldrb	r4, [r7, #4]
 8002c2a:	79fa      	ldrb	r2, [r7, #7]
 8002c2c:	7939      	ldrb	r1, [r7, #4]
 8002c2e:	7978      	ldrb	r0, [r7, #5]
 8002c30:	7e3b      	ldrb	r3, [r7, #24]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	4623      	mov	r3, r4
 8002c36:	f7ff fee3 	bl	8002a00 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002c3a:	79bc      	ldrb	r4, [r7, #6]
 8002c3c:	79fa      	ldrb	r2, [r7, #7]
 8002c3e:	7939      	ldrb	r1, [r7, #4]
 8002c40:	79f8      	ldrb	r0, [r7, #7]
 8002c42:	7e3b      	ldrb	r3, [r7, #24]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	4623      	mov	r3, r4
 8002c48:	f7ff feda 	bl	8002a00 <ssd1306_Line>

    return;
 8002c4c:	bf00      	nop
}
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}

08002c54 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	71fb      	strb	r3, [r7, #7]
 8002c66:	4603      	mov	r3, r0
 8002c68:	71bb      	strb	r3, [r7, #6]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	717b      	strb	r3, [r7, #5]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002c72:	79fa      	ldrb	r2, [r7, #7]
 8002c74:	797b      	ldrb	r3, [r7, #5]
 8002c76:	4293      	cmp	r3, r2
 8002c78:	bf28      	it	cs
 8002c7a:	4613      	movcs	r3, r2
 8002c7c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002c7e:	797a      	ldrb	r2, [r7, #5]
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	4293      	cmp	r3, r2
 8002c84:	bf38      	it	cc
 8002c86:	4613      	movcc	r3, r2
 8002c88:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002c8a:	79ba      	ldrb	r2, [r7, #6]
 8002c8c:	793b      	ldrb	r3, [r7, #4]
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	bf28      	it	cs
 8002c92:	4613      	movcs	r3, r2
 8002c94:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002c96:	793a      	ldrb	r2, [r7, #4]
 8002c98:	79bb      	ldrb	r3, [r7, #6]
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	bf38      	it	cc
 8002c9e:	4613      	movcc	r3, r2
 8002ca0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	e017      	b.n	8002cd8 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002ca8:	7b7b      	ldrb	r3, [r7, #13]
 8002caa:	73bb      	strb	r3, [r7, #14]
 8002cac:	e009      	b.n	8002cc2 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002cae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002cb2:	7bf9      	ldrb	r1, [r7, #15]
 8002cb4:	7bbb      	ldrb	r3, [r7, #14]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fd88 	bl	80027cc <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002cbc:	7bbb      	ldrb	r3, [r7, #14]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	73bb      	strb	r3, [r7, #14]
 8002cc2:	7bba      	ldrb	r2, [r7, #14]
 8002cc4:	7b3b      	ldrb	r3, [r7, #12]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d803      	bhi.n	8002cd2 <ssd1306_FillRectangle+0x7e>
 8002cca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	daed      	bge.n	8002cae <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	7abb      	ldrb	r3, [r7, #10]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d803      	bhi.n	8002ce8 <ssd1306_FillRectangle+0x94>
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b3f      	cmp	r3, #63	; 0x3f
 8002ce4:	d9e0      	bls.n	8002ca8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
}
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd90      	pop	{r4, r7, pc}

08002cf0 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	603a      	str	r2, [r7, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	71bb      	strb	r3, [r7, #6]
 8002d02:	4613      	mov	r3, r2
 8002d04:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002d06:	797b      	ldrb	r3, [r7, #5]
 8002d08:	3307      	adds	r3, #7
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	da00      	bge.n	8002d10 <ssd1306_DrawBitmap+0x20>
 8002d0e:	3307      	adds	r3, #7
 8002d10:	10db      	asrs	r3, r3, #3
 8002d12:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db3e      	blt.n	8002d9e <ssd1306_DrawBitmap+0xae>
 8002d20:	79bb      	ldrb	r3, [r7, #6]
 8002d22:	2b3f      	cmp	r3, #63	; 0x3f
 8002d24:	d83b      	bhi.n	8002d9e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002d26:	2300      	movs	r3, #0
 8002d28:	73bb      	strb	r3, [r7, #14]
 8002d2a:	e033      	b.n	8002d94 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	737b      	strb	r3, [r7, #13]
 8002d30:	e026      	b.n	8002d80 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002d32:	7b7b      	ldrb	r3, [r7, #13]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
 8002d42:	e00d      	b.n	8002d60 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002d44:	7bbb      	ldrb	r3, [r7, #14]
 8002d46:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	7b7a      	ldrb	r2, [r7, #13]
 8002d50:	08d2      	lsrs	r2, r2, #3
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	4413      	add	r3, r2
 8002d56:	461a      	mov	r2, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da08      	bge.n	8002d7a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002d68:	79fa      	ldrb	r2, [r7, #7]
 8002d6a:	7b7b      	ldrb	r3, [r7, #13]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	7f3a      	ldrb	r2, [r7, #28]
 8002d72:	79b9      	ldrb	r1, [r7, #6]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fd29 	bl	80027cc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002d7a:	7b7b      	ldrb	r3, [r7, #13]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	737b      	strb	r3, [r7, #13]
 8002d80:	7b7a      	ldrb	r2, [r7, #13]
 8002d82:	797b      	ldrb	r3, [r7, #5]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d3d4      	bcc.n	8002d32 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002d88:	7bbb      	ldrb	r3, [r7, #14]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73bb      	strb	r3, [r7, #14]
 8002d8e:	79bb      	ldrb	r3, [r7, #6]
 8002d90:	3301      	adds	r3, #1
 8002d92:	71bb      	strb	r3, [r7, #6]
 8002d94:	7bba      	ldrb	r2, [r7, #14]
 8002d96:	7e3b      	ldrb	r3, [r7, #24]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d3c7      	bcc.n	8002d2c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002d9c:	e000      	b.n	8002da0 <ssd1306_DrawBitmap+0xb0>
        return;
 8002d9e:	bf00      	nop
}
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002db0:	2381      	movs	r3, #129	; 0x81
 8002db2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fc2c 	bl	8002614 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fc28 	bl	8002614 <ssd1306_WriteCommand>
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002ddc:	23af      	movs	r3, #175	; 0xaf
 8002dde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <ssd1306_SetDisplayOn+0x38>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	715a      	strb	r2, [r3, #5]
 8002de6:	e004      	b.n	8002df2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002de8:	23ae      	movs	r3, #174	; 0xae
 8002dea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <ssd1306_SetDisplayOn+0x38>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fc0d 	bl	8002614 <ssd1306_WriteCommand>
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000e2c 	.word	0x20000e2c

08002e08 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002e12:	60b8      	str	r0, [r7, #8]
 8002e14:	6079      	str	r1, [r7, #4]
 8002e16:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	330f      	adds	r3, #15
 8002e1e:	b2d8      	uxtb	r0, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	b2d9      	uxtb	r1, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	330f      	adds	r3, #15
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3305      	adds	r3, #5
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2401      	movs	r4, #1
 8002e3a:	9400      	str	r4, [sp, #0]
 8002e3c:	f7ff fde0 	bl	8002a00 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3310      	adds	r3, #16
 8002e46:	b2d8      	uxtb	r0, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b2d9      	uxtb	r1, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	3310      	adds	r3, #16
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3305      	adds	r3, #5
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2401      	movs	r4, #1
 8002e62:	9400      	str	r4, [sp, #0]
 8002e64:	f7ff fdcc 	bl	8002a00 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	b2d8      	uxtb	r0, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	b2d9      	uxtb	r1, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	330e      	adds	r3, #14
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3306      	adds	r3, #6
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2401      	movs	r4, #1
 8002e82:	9400      	str	r4, [sp, #0]
 8002e84:	f7ff feaf 	bl	8002be6 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7fd fb5d 	bl	8000548 <__aeabi_f2d>
 8002e8e:	a396      	add	r3, pc, #600	; (adr r3, 80030e8 <batterygauge+0x2e0>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fe2c 	bl	8000af0 <__aeabi_dcmple>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d02a      	beq.n	8002ef4 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	b2d8      	uxtb	r0, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	3302      	adds	r3, #2
 8002eac:	b2d9      	uxtb	r1, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	3303      	adds	r3, #3
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	3304      	adds	r3, #4
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2401      	movs	r4, #1
 8002ec0:	9400      	str	r4, [sp, #0]
 8002ec2:	f7ff fe90 	bl	8002be6 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d113      	bne.n	8002ef4 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	b2d8      	uxtb	r0, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	3302      	adds	r3, #2
 8002eda:	b2d9      	uxtb	r1, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3303      	adds	r3, #3
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3304      	adds	r3, #4
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2401      	movs	r4, #1
 8002eee:	9400      	str	r4, [sp, #0]
 8002ef0:	f7ff fe79 	bl	8002be6 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7fd fb27 	bl	8000548 <__aeabi_f2d>
 8002efa:	a37b      	add	r3, pc, #492	; (adr r3, 80030e8 <batterygauge+0x2e0>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f7fd fe0a 	bl	8000b18 <__aeabi_dcmpgt>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d035      	beq.n	8002f76 <batterygauge+0x16e>
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7fd fb1c 	bl	8000548 <__aeabi_f2d>
 8002f10:	a377      	add	r3, pc, #476	; (adr r3, 80030f0 <batterygauge+0x2e8>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f7fd fdeb 	bl	8000af0 <__aeabi_dcmple>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02a      	beq.n	8002f76 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3302      	adds	r3, #2
 8002f26:	b2d8      	uxtb	r0, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	b2d9      	uxtb	r1, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3303      	adds	r3, #3
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2401      	movs	r4, #1
 8002f42:	9400      	str	r4, [sp, #0]
 8002f44:	f7ff fe4f 	bl	8002be6 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d113      	bne.n	8002f76 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3305      	adds	r3, #5
 8002f54:	b2d8      	uxtb	r0, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	b2d9      	uxtb	r1, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3306      	adds	r3, #6
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2401      	movs	r4, #1
 8002f70:	9400      	str	r4, [sp, #0]
 8002f72:	f7ff fe38 	bl	8002be6 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7fd fae6 	bl	8000548 <__aeabi_f2d>
 8002f7c:	a35c      	add	r3, pc, #368	; (adr r3, 80030f0 <batterygauge+0x2e8>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd fdc9 	bl	8000b18 <__aeabi_dcmpgt>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d049      	beq.n	8003020 <batterygauge+0x218>
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7fd fadb 	bl	8000548 <__aeabi_f2d>
 8002f92:	a359      	add	r3, pc, #356	; (adr r3, 80030f8 <batterygauge+0x2f0>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd fdaa 	bl	8000af0 <__aeabi_dcmple>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d03e      	beq.n	8003020 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	b2d8      	uxtb	r0, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3302      	adds	r3, #2
 8002fb0:	b2d9      	uxtb	r1, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3303      	adds	r3, #3
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2401      	movs	r4, #1
 8002fc4:	9400      	str	r4, [sp, #0]
 8002fc6:	f7ff fe0e 	bl	8002be6 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	3305      	adds	r3, #5
 8002fd0:	b2d8      	uxtb	r0, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	b2d9      	uxtb	r1, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3306      	adds	r3, #6
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2401      	movs	r4, #1
 8002fec:	9400      	str	r4, [sp, #0]
 8002fee:	f7ff fdfa 	bl	8002be6 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	b2d8      	uxtb	r0, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	3302      	adds	r3, #2
 8003006:	b2d9      	uxtb	r1, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3309      	adds	r3, #9
 800300e:	b2da      	uxtb	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3304      	adds	r3, #4
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2401      	movs	r4, #1
 800301a:	9400      	str	r4, [sp, #0]
 800301c:	f7ff fde3 	bl	8002be6 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7fd fa91 	bl	8000548 <__aeabi_f2d>
 8003026:	a334      	add	r3, pc, #208	; (adr r3, 80030f8 <batterygauge+0x2f0>)
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f7fd fd74 	bl	8000b18 <__aeabi_dcmpgt>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d100      	bne.n	8003038 <batterygauge+0x230>
	}




}
 8003036:	e052      	b.n	80030de <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3302      	adds	r3, #2
 800303e:	b2d8      	uxtb	r0, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3302      	adds	r3, #2
 8003046:	b2d9      	uxtb	r1, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3303      	adds	r3, #3
 800304e:	b2da      	uxtb	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3304      	adds	r3, #4
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2401      	movs	r4, #1
 800305a:	9400      	str	r4, [sp, #0]
 800305c:	f7ff fdc3 	bl	8002be6 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	3305      	adds	r3, #5
 8003066:	b2d8      	uxtb	r0, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3302      	adds	r3, #2
 800306e:	b2d9      	uxtb	r1, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	3306      	adds	r3, #6
 8003076:	b2da      	uxtb	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3304      	adds	r3, #4
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2401      	movs	r4, #1
 8003082:	9400      	str	r4, [sp, #0]
 8003084:	f7ff fdaf 	bl	8002be6 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3308      	adds	r3, #8
 800308e:	b2d8      	uxtb	r0, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	3302      	adds	r3, #2
 8003096:	b2d9      	uxtb	r1, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3309      	adds	r3, #9
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3304      	adds	r3, #4
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2401      	movs	r4, #1
 80030aa:	9400      	str	r4, [sp, #0]
 80030ac:	f7ff fd9b 	bl	8002be6 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d113      	bne.n	80030de <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	330b      	adds	r3, #11
 80030bc:	b2d8      	uxtb	r0, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	3302      	adds	r3, #2
 80030c4:	b2d9      	uxtb	r1, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	330c      	adds	r3, #12
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	3304      	adds	r3, #4
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2401      	movs	r4, #1
 80030d8:	9400      	str	r4, [sp, #0]
 80030da:	f7ff fd84 	bl	8002be6 <ssd1306_DrawRectangle>
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	9999999a 	.word	0x9999999a
 80030ec:	400d9999 	.word	0x400d9999
 80030f0:	33333333 	.word	0x33333333
 80030f4:	400f3333 	.word	0x400f3333
 80030f8:	66666666 	.word	0x66666666
 80030fc:	40106666 	.word	0x40106666

08003100 <statemachine>:
int erasetime=0;
int erasedisplay=0;
int usbtransmiten=0;
float usbpercent=0;

void statemachine(void){
 8003100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003102:	ed2d 8b02 	vpush	{d8}
 8003106:	b09f      	sub	sp, #124	; 0x7c
 8003108:	af04      	add	r7, sp, #16
	switch(state){
 800310a:	4b97      	ldr	r3, [pc, #604]	; (8003368 <statemachine+0x268>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b06      	cmp	r3, #6
 8003110:	f201 853a 	bhi.w	8004b88 <statemachine+0x1a88>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <statemachine+0x1c>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	08003139 	.word	0x08003139
 8003120:	080035c9 	.word	0x080035c9
 8003124:	08003b11 	.word	0x08003b11
 8003128:	0800417b 	.word	0x0800417b
 800312c:	08004333 	.word	0x08004333
 8003130:	080044f3 	.word	0x080044f3
 8003134:	08004739 	.word	0x08004739
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8003138:	2000      	movs	r0, #0
 800313a:	f7ff fb07 	bl	800274c <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 800313e:	2120      	movs	r1, #32
 8003140:	2020      	movs	r0, #32
 8003142:	f7ff fc45 	bl	80029d0 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8003146:	4989      	ldr	r1, [pc, #548]	; (800336c <statemachine+0x26c>)
 8003148:	4889      	ldr	r0, [pc, #548]	; (8003370 <statemachine+0x270>)
 800314a:	f7fe ff6f 	bl	800202c <nmea_parse>
				 if(myData.speed>=vitmax){
 800314e:	4b88      	ldr	r3, [pc, #544]	; (8003370 <statemachine+0x270>)
 8003150:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003154:	4b87      	ldr	r3, [pc, #540]	; (8003374 <statemachine+0x274>)
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	db03      	blt.n	800316c <statemachine+0x6c>
									 vitmax=myData.speed;
 8003164:	4b82      	ldr	r3, [pc, #520]	; (8003370 <statemachine+0x270>)
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	4a82      	ldr	r2, [pc, #520]	; (8003374 <statemachine+0x274>)
 800316a:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	667b      	str	r3, [r7, #100]	; 0x64
								 float sec=0;
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	663b      	str	r3, [r7, #96]	; 0x60
								 if (myData.speed!=0){
 8003178:	4b7d      	ldr	r3, [pc, #500]	; (8003370 <statemachine+0x270>)
 800317a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800317e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003186:	d032      	beq.n	80031ee <statemachine+0xee>
									 pace=1000/(60*myData.speed);
 8003188:	4b79      	ldr	r3, [pc, #484]	; (8003370 <statemachine+0x270>)
 800318a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800318e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003378 <statemachine+0x278>
 8003192:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003196:	eddf 6a79 	vldr	s13, [pc, #484]	; 800337c <statemachine+0x27c>
 800319a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800319e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
									 sec=(pace-floor(pace))*60;
 80031a2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80031a4:	f7fd f9d0 	bl	8000548 <__aeabi_f2d>
 80031a8:	4604      	mov	r4, r0
 80031aa:	460d      	mov	r5, r1
 80031ac:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80031ae:	f7fd f9cb 	bl	8000548 <__aeabi_f2d>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	ec43 2b10 	vmov	d0, r2, r3
 80031ba:	f014 fda1 	bl	8017d00 <floor>
 80031be:	ec53 2b10 	vmov	r2, r3, d0
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7fd f85f 	bl	8000288 <__aeabi_dsub>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	4b6a      	ldr	r3, [pc, #424]	; (8003380 <statemachine+0x280>)
 80031d8:	f7fd fa0e 	bl	80005f8 <__aeabi_dmul>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7fd fd00 	bl	8000be8 <__aeabi_d2f>
 80031e8:	4603      	mov	r3, r0
 80031ea:	663b      	str	r3, [r7, #96]	; 0x60
 80031ec:	e001      	b.n	80031f2 <statemachine+0xf2>
								 }
								 else {
									 pace=9999;//en cas de division par 0, techniquement le temps devient infini mais ce n'est pas intérréssant
 80031ee:	4b65      	ldr	r3, [pc, #404]	; (8003384 <statemachine+0x284>)
 80031f0:	667b      	str	r3, [r7, #100]	; 0x64
								 }


				  switch(spdstate){
 80031f2:	4b65      	ldr	r3, [pc, #404]	; (8003388 <statemachine+0x288>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	f000 8160 	beq.w	80034bc <statemachine+0x3bc>
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	f300 81d0 	bgt.w	80035a2 <statemachine+0x4a2>
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <statemachine+0x10e>
 8003206:	2b01      	cmp	r3, #1
 8003208:	f000 80d0 	beq.w	80033ac <statemachine+0x2ac>
 800320c:	e1c9      	b.n	80035a2 <statemachine+0x4a2>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 800320e:	4b58      	ldr	r3, [pc, #352]	; (8003370 <statemachine+0x270>)
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	2b01      	cmp	r3, #1
 8003214:	d16f      	bne.n	80032f6 <statemachine+0x1f6>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8003216:	2014      	movs	r0, #20
 8003218:	f00f ff86 	bl	8013128 <malloc>
 800321c:	4603      	mov	r3, r0
 800321e:	607b      	str	r3, [r7, #4]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);//amélioration possible la stocker en eeprom
 8003220:	4b54      	ldr	r3, [pc, #336]	; (8003374 <statemachine+0x274>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd f98f 	bl	8000548 <__aeabi_f2d>
 800322a:	a34d      	add	r3, pc, #308	; (adr r3, 8003360 <statemachine+0x260>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f7fd f9e2 	bl	80005f8 <__aeabi_dmul>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	e9cd 2300 	strd	r2, r3, [sp]
 800323c:	4a53      	ldr	r2, [pc, #332]	; (800338c <statemachine+0x28c>)
 800323e:	210f      	movs	r1, #15
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f011 fe6b 	bl	8014f1c <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 8003246:	2120      	movs	r1, #32
 8003248:	2020      	movs	r0, #32
 800324a:	f7ff fbc1 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 800324e:	4a50      	ldr	r2, [pc, #320]	; (8003390 <statemachine+0x290>)
 8003250:	2301      	movs	r3, #1
 8003252:	ca06      	ldmia	r2, {r1, r2}
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fb95 	bl	8002984 <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 800325a:	4b45      	ldr	r3, [pc, #276]	; (8003370 <statemachine+0x270>)
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd f972 	bl	8000548 <__aeabi_f2d>
 8003264:	a33e      	add	r3, pc, #248	; (adr r3, 8003360 <statemachine+0x260>)
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f7fd f9c5 	bl	80005f8 <__aeabi_dmul>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	e9cd 2300 	strd	r2, r3, [sp]
 8003276:	4a47      	ldr	r2, [pc, #284]	; (8003394 <statemachine+0x294>)
 8003278:	210f      	movs	r1, #15
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f011 fe4e 	bl	8014f1c <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8003280:	212a      	movs	r1, #42	; 0x2a
 8003282:	2020      	movs	r0, #32
 8003284:	f7ff fba4 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8003288:	4a41      	ldr	r2, [pc, #260]	; (8003390 <statemachine+0x290>)
 800328a:	2301      	movs	r3, #1
 800328c:	ca06      	ldmia	r2, {r1, r2}
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff fb78 	bl	8002984 <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));//affichage au format minute puis seconde
 8003294:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003296:	f7fd f957 	bl	8000548 <__aeabi_f2d>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	ec43 2b10 	vmov	d0, r2, r3
 80032a2:	f014 fd2d 	bl	8017d00 <floor>
 80032a6:	eeb0 8a40 	vmov.f32	s16, s0
 80032aa:	eef0 8a60 	vmov.f32	s17, s1
 80032ae:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80032b0:	f7fd f94a 	bl	8000548 <__aeabi_f2d>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	ec43 2b10 	vmov	d0, r2, r3
 80032bc:	f014 fd20 	bl	8017d00 <floor>
 80032c0:	eeb0 7a40 	vmov.f32	s14, s0
 80032c4:	eef0 7a60 	vmov.f32	s15, s1
 80032c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80032cc:	ed8d 8b00 	vstr	d8, [sp]
 80032d0:	4a31      	ldr	r2, [pc, #196]	; (8003398 <statemachine+0x298>)
 80032d2:	210f      	movs	r1, #15
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f011 fe21 	bl	8014f1c <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 80032da:	2134      	movs	r1, #52	; 0x34
 80032dc:	2020      	movs	r0, #32
 80032de:	f7ff fb77 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80032e2:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <statemachine+0x290>)
 80032e4:	2301      	movs	r3, #1
 80032e6:	ca06      	ldmia	r2, {r1, r2}
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff fb4b 	bl	8002984 <ssd1306_WriteString>
					 				 						free(str);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f00f ff22 	bl	8013138 <free>
 80032f4:	e025      	b.n	8003342 <statemachine+0x242>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 80032f6:	2014      	movs	r0, #20
 80032f8:	f00f ff16 	bl	8013128 <malloc>
 80032fc:	4603      	mov	r3, r0
 80032fe:	60bb      	str	r3, [r7, #8]
					 				 						ssd1306_SetCursor(32, 32);
 8003300:	2120      	movs	r1, #32
 8003302:	2020      	movs	r0, #32
 8003304:	f7ff fb64 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 8003308:	4a21      	ldr	r2, [pc, #132]	; (8003390 <statemachine+0x290>)
 800330a:	2301      	movs	r3, #1
 800330c:	ca06      	ldmia	r2, {r1, r2}
 800330e:	4823      	ldr	r0, [pc, #140]	; (800339c <statemachine+0x29c>)
 8003310:	f7ff fb38 	bl	8002984 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	2020      	movs	r0, #32
 8003318:	f7ff fb5a 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <statemachine+0x290>)
 800331e:	2301      	movs	r3, #1
 8003320:	ca06      	ldmia	r2, {r1, r2}
 8003322:	481f      	ldr	r0, [pc, #124]	; (80033a0 <statemachine+0x2a0>)
 8003324:	f7ff fb2e 	bl	8002984 <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <statemachine+0x2a4>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	2201      	movs	r2, #1
 8003330:	2136      	movs	r1, #54	; 0x36
 8003332:	2023      	movs	r0, #35	; 0x23
 8003334:	eeb0 0a67 	vmov.f32	s0, s15
 8003338:	f7ff fd66 	bl	8002e08 <batterygauge>
					 				 						free(str);
 800333c:	68b8      	ldr	r0, [r7, #8]
 800333e:	f00f fefb 	bl	8013138 <free>
					 				 					}
					 if(BTN_B>=1){
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <statemachine+0x2a8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f340 8126 	ble.w	8003598 <statemachine+0x498>
					 					 				 					spdstate++;
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <statemachine+0x288>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <statemachine+0x288>)
 8003356:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <statemachine+0x2a8>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 800335e:	e11b      	b.n	8003598 <statemachine+0x498>
 8003360:	cccccccd 	.word	0xcccccccd
 8003364:	400ccccc 	.word	0x400ccccc
 8003368:	200006f8 	.word	0x200006f8
 800336c:	200004ac 	.word	0x200004ac
 8003370:	200006b0 	.word	0x200006b0
 8003374:	20000e34 	.word	0x20000e34
 8003378:	42700000 	.word	0x42700000
 800337c:	447a0000 	.word	0x447a0000
 8003380:	404e0000 	.word	0x404e0000
 8003384:	461c3c00 	.word	0x461c3c00
 8003388:	200006fa 	.word	0x200006fa
 800338c:	08018f34 	.word	0x08018f34
 8003390:	20000008 	.word	0x20000008
 8003394:	08018f40 	.word	0x08018f40
 8003398:	08018f48 	.word	0x08018f48
 800339c:	08018f5c 	.word	0x08018f5c
 80033a0:	08018f64 	.word	0x08018f64
 80033a4:	20000730 	.word	0x20000730
 80033a8:	200006f4 	.word	0x200006f4
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 80033ac:	4b96      	ldr	r3, [pc, #600]	; (8003608 <statemachine+0x508>)
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d159      	bne.n	8003468 <statemachine+0x368>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 80033b4:	2014      	movs	r0, #20
 80033b6:	f00f feb7 	bl	8013128 <malloc>
 80033ba:	4603      	mov	r3, r0
 80033bc:	60fb      	str	r3, [r7, #12]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80033be:	4b92      	ldr	r3, [pc, #584]	; (8003608 <statemachine+0x508>)
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f8c0 	bl	8000548 <__aeabi_f2d>
 80033c8:	a38b      	add	r3, pc, #556	; (adr r3, 80035f8 <statemachine+0x4f8>)
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f7fd f913 	bl	80005f8 <__aeabi_dmul>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	e9cd 2300 	strd	r2, r3, [sp]
 80033da:	4a8c      	ldr	r2, [pc, #560]	; (800360c <statemachine+0x50c>)
 80033dc:	210f      	movs	r1, #15
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f011 fd9c 	bl	8014f1c <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 80033e4:	2136      	movs	r1, #54	; 0x36
 80033e6:	2020      	movs	r0, #32
 80033e8:	f7ff faf2 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80033ec:	4a88      	ldr	r2, [pc, #544]	; (8003610 <statemachine+0x510>)
 80033ee:	2301      	movs	r3, #1
 80033f0:	ca06      	ldmia	r2, {r1, r2}
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff fac6 	bl	8002984 <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 80033f8:	2301      	movs	r3, #1
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2335      	movs	r3, #53	; 0x35
 80033fe:	225f      	movs	r2, #95	; 0x5f
 8003400:	2126      	movs	r1, #38	; 0x26
 8003402:	2020      	movs	r0, #32
 8003404:	f7ff fbef 	bl	8002be6 <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8003408:	4b7f      	ldr	r3, [pc, #508]	; (8003608 <statemachine+0x508>)
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd f89b 	bl	8000548 <__aeabi_f2d>
 8003412:	a37b      	add	r3, pc, #492	; (adr r3, 8003600 <statemachine+0x500>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f7fd f8ee 	bl	80005f8 <__aeabi_dmul>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	4b7a      	ldr	r3, [pc, #488]	; (8003614 <statemachine+0x514>)
 800342a:	f7fc ff2f 	bl	800028c <__adddf3>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	ec43 2b17 	vmov	d7, r2, r3
 8003436:	eeb0 0a47 	vmov.f32	s0, s14
 800343a:	eef0 0a67 	vmov.f32	s1, s15
 800343e:	f014 fc5f 	bl	8017d00 <floor>
 8003442:	ec53 2b10 	vmov	r2, r3, d0
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	f7fd fb85 	bl	8000b58 <__aeabi_d2iz>
 800344e:	4603      	mov	r3, r0
 8003450:	b2da      	uxtb	r2, r3
 8003452:	2301      	movs	r3, #1
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2335      	movs	r3, #53	; 0x35
 8003458:	2126      	movs	r1, #38	; 0x26
 800345a:	2020      	movs	r0, #32
 800345c:	f7ff fbfa 	bl	8002c54 <ssd1306_FillRectangle>

					 				 						free(str);
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f00f fe69 	bl	8013138 <free>
 8003466:	e01b      	b.n	80034a0 <statemachine+0x3a0>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8003468:	2014      	movs	r0, #20
 800346a:	f00f fe5d 	bl	8013128 <malloc>
 800346e:	4603      	mov	r3, r0
 8003470:	613b      	str	r3, [r7, #16]
					 				 						ssd1306_SetCursor(32, 32);
 8003472:	2120      	movs	r1, #32
 8003474:	2020      	movs	r0, #32
 8003476:	f7ff faab 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 800347a:	4a65      	ldr	r2, [pc, #404]	; (8003610 <statemachine+0x510>)
 800347c:	2301      	movs	r3, #1
 800347e:	ca06      	ldmia	r2, {r1, r2}
 8003480:	4865      	ldr	r0, [pc, #404]	; (8003618 <statemachine+0x518>)
 8003482:	f7ff fa7f 	bl	8002984 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	2020      	movs	r0, #32
 800348a:	f7ff faa1 	bl	80029d0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800348e:	4a60      	ldr	r2, [pc, #384]	; (8003610 <statemachine+0x510>)
 8003490:	2301      	movs	r3, #1
 8003492:	ca06      	ldmia	r2, {r1, r2}
 8003494:	4861      	ldr	r0, [pc, #388]	; (800361c <statemachine+0x51c>)
 8003496:	f7ff fa75 	bl	8002984 <ssd1306_WriteString>
					 				 						free(str);
 800349a:	6938      	ldr	r0, [r7, #16]
 800349c:	f00f fe4c 	bl	8013138 <free>
					 				 					}
					 if(BTN_B>=1){
 80034a0:	4b5f      	ldr	r3, [pc, #380]	; (8003620 <statemachine+0x520>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	dd79      	ble.n	800359c <statemachine+0x49c>
					 				 					spdstate++;
 80034a8:	4b5e      	ldr	r3, [pc, #376]	; (8003624 <statemachine+0x524>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	3301      	adds	r3, #1
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <statemachine+0x524>)
 80034b2:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 80034b4:	4b5a      	ldr	r3, [pc, #360]	; (8003620 <statemachine+0x520>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 80034ba:	e06f      	b.n	800359c <statemachine+0x49c>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 80034bc:	4b52      	ldr	r3, [pc, #328]	; (8003608 <statemachine+0x508>)
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d12f      	bne.n	8003524 <statemachine+0x424>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 80034c4:	2014      	movs	r0, #20
 80034c6:	f00f fe2f 	bl	8013128 <malloc>
 80034ca:	4603      	mov	r3, r0
 80034cc:	617b      	str	r3, [r7, #20]

					 				 						ssd1306_SetCursor(32, 32);
 80034ce:	2120      	movs	r1, #32
 80034d0:	2020      	movs	r0, #32
 80034d2:	f7ff fa7d 	bl	80029d0 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 80034d6:	4b4c      	ldr	r3, [pc, #304]	; (8003608 <statemachine+0x508>)
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd f834 	bl	8000548 <__aeabi_f2d>
 80034e0:	a345      	add	r3, pc, #276	; (adr r3, 80035f8 <statemachine+0x4f8>)
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	f7fd f887 	bl	80005f8 <__aeabi_dmul>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	e9cd 2300 	strd	r2, r3, [sp]
 80034f2:	4a4d      	ldr	r2, [pc, #308]	; (8003628 <statemachine+0x528>)
 80034f4:	210f      	movs	r1, #15
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f011 fd10 	bl	8014f1c <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 80034fc:	4a4b      	ldr	r2, [pc, #300]	; (800362c <statemachine+0x52c>)
 80034fe:	2301      	movs	r3, #1
 8003500:	ca06      	ldmia	r2, {r1, r2}
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff fa3e 	bl	8002984 <ssd1306_WriteString>
					 				 						batterygauge(vbat,35, 54,1);
 8003508:	4b49      	ldr	r3, [pc, #292]	; (8003630 <statemachine+0x530>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	2201      	movs	r2, #1
 8003510:	2136      	movs	r1, #54	; 0x36
 8003512:	2023      	movs	r0, #35	; 0x23
 8003514:	eeb0 0a67 	vmov.f32	s0, s15
 8003518:	f7ff fc76 	bl	8002e08 <batterygauge>

					 				 						free(str);
 800351c:	6978      	ldr	r0, [r7, #20]
 800351e:	f00f fe0b 	bl	8013138 <free>
 8003522:	e025      	b.n	8003570 <statemachine+0x470>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8003524:	2014      	movs	r0, #20
 8003526:	f00f fdff 	bl	8013128 <malloc>
 800352a:	4603      	mov	r3, r0
 800352c:	61bb      	str	r3, [r7, #24]
						 ssd1306_SetCursor(32, 32);
 800352e:	2120      	movs	r1, #32
 8003530:	2020      	movs	r0, #32
 8003532:	f7ff fa4d 	bl	80029d0 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 8003536:	4a36      	ldr	r2, [pc, #216]	; (8003610 <statemachine+0x510>)
 8003538:	2301      	movs	r3, #1
 800353a:	ca06      	ldmia	r2, {r1, r2}
 800353c:	483d      	ldr	r0, [pc, #244]	; (8003634 <statemachine+0x534>)
 800353e:	f7ff fa21 	bl	8002984 <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	2020      	movs	r0, #32
 8003546:	f7ff fa43 	bl	80029d0 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800354a:	4a31      	ldr	r2, [pc, #196]	; (8003610 <statemachine+0x510>)
 800354c:	2301      	movs	r3, #1
 800354e:	ca06      	ldmia	r2, {r1, r2}
 8003550:	4832      	ldr	r0, [pc, #200]	; (800361c <statemachine+0x51c>)
 8003552:	f7ff fa17 	bl	8002984 <ssd1306_WriteString>
						 batterygauge(vbat,35, 54,1);
 8003556:	4b36      	ldr	r3, [pc, #216]	; (8003630 <statemachine+0x530>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	2201      	movs	r2, #1
 800355e:	2136      	movs	r1, #54	; 0x36
 8003560:	2023      	movs	r0, #35	; 0x23
 8003562:	eeb0 0a67 	vmov.f32	s0, s15
 8003566:	f7ff fc4f 	bl	8002e08 <batterygauge>
						 free(str);
 800356a:	69b8      	ldr	r0, [r7, #24]
 800356c:	f00f fde4 	bl	8013138 <free>
					 }

					 if(BTN_B>=1){
 8003570:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <statemachine+0x520>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	dd13      	ble.n	80035a0 <statemachine+0x4a0>
					 					 				 					spdstate--;
 8003578:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <statemachine+0x524>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	3b01      	subs	r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <statemachine+0x524>)
 8003582:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 8003584:	4b27      	ldr	r3, [pc, #156]	; (8003624 <statemachine+0x524>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	3b01      	subs	r3, #1
 800358a:	b2da      	uxtb	r2, r3
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <statemachine+0x524>)
 800358e:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8003590:	4b23      	ldr	r3, [pc, #140]	; (8003620 <statemachine+0x520>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8003596:	e003      	b.n	80035a0 <statemachine+0x4a0>
					 break;
 8003598:	bf00      	nop
 800359a:	e002      	b.n	80035a2 <statemachine+0x4a2>
					 break;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <statemachine+0x4a2>
					 break;
 80035a0:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 80035a2:	4b25      	ldr	r3, [pc, #148]	; (8003638 <statemachine+0x538>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f341 82b8 	ble.w	8004b1c <statemachine+0x1a1c>
				 					state++;
 80035ac:	4b23      	ldr	r3, [pc, #140]	; (800363c <statemachine+0x53c>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <statemachine+0x53c>)
 80035b6:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 80035b8:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <statemachine+0x538>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <statemachine+0x520>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 80035c4:	f001 baaa 	b.w	8004b1c <statemachine+0x1a1c>


	case STATE_POS:
			  ssd1306_Fill(Black);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7ff f8bf 	bl	800274c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80035ce:	491c      	ldr	r1, [pc, #112]	; (8003640 <statemachine+0x540>)
 80035d0:	480d      	ldr	r0, [pc, #52]	; (8003608 <statemachine+0x508>)
 80035d2:	f7fe fd2b 	bl	800202c <nmea_parse>
			  switch(posstate){
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <statemachine+0x544>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	f200 8285 	bhi.w	8003aea <statemachine+0x9ea>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <statemachine+0x4e8>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	08003649 	.word	0x08003649
 80035ec:	08003761 	.word	0x08003761
 80035f0:	08003857 	.word	0x08003857
 80035f4:	08003987 	.word	0x08003987
 80035f8:	cccccccd 	.word	0xcccccccd
 80035fc:	400ccccc 	.word	0x400ccccc
 8003600:	c28f5c29 	.word	0xc28f5c29
 8003604:	3fe428f5 	.word	0x3fe428f5
 8003608:	200006b0 	.word	0x200006b0
 800360c:	08018f40 	.word	0x08018f40
 8003610:	20000008 	.word	0x20000008
 8003614:	40400000 	.word	0x40400000
 8003618:	08018f70 	.word	0x08018f70
 800361c:	08018f64 	.word	0x08018f64
 8003620:	200006f4 	.word	0x200006f4
 8003624:	200006fa 	.word	0x200006fa
 8003628:	08018f78 	.word	0x08018f78
 800362c:	20000018 	.word	0x20000018
 8003630:	20000730 	.word	0x20000730
 8003634:	08018f80 	.word	0x08018f80
 8003638:	200006f0 	.word	0x200006f0
 800363c:	200006f8 	.word	0x200006f8
 8003640:	200004ac 	.word	0x200004ac
 8003644:	200006fb 	.word	0x200006fb

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8003648:	4bab      	ldr	r3, [pc, #684]	; (80038f8 <statemachine+0x7f8>)
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	2b01      	cmp	r3, #1
 800364e:	d14e      	bne.n	80036ee <statemachine+0x5ee>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003650:	2014      	movs	r0, #20
 8003652:	f00f fd69 	bl	8013128 <malloc>
 8003656:	4603      	mov	r3, r0
 8003658:	61fb      	str	r3, [r7, #28]
				  						ssd1306_SetCursor(32, 32);
 800365a:	2120      	movs	r1, #32
 800365c:	2020      	movs	r0, #32
 800365e:	f7ff f9b7 	bl	80029d0 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8003662:	4aa6      	ldr	r2, [pc, #664]	; (80038fc <statemachine+0x7fc>)
 8003664:	210f      	movs	r1, #15
 8003666:	69f8      	ldr	r0, [r7, #28]
 8003668:	f011 fc58 	bl	8014f1c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800366c:	4aa4      	ldr	r2, [pc, #656]	; (8003900 <statemachine+0x800>)
 800366e:	2301      	movs	r3, #1
 8003670:	ca06      	ldmia	r2, {r1, r2}
 8003672:	69f8      	ldr	r0, [r7, #28]
 8003674:	f7ff f986 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003678:	4b9f      	ldr	r3, [pc, #636]	; (80038f8 <statemachine+0x7f8>)
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	e9cd 2300 	strd	r2, r3, [sp]
 8003682:	4aa0      	ldr	r2, [pc, #640]	; (8003904 <statemachine+0x804>)
 8003684:	210f      	movs	r1, #15
 8003686:	69f8      	ldr	r0, [r7, #28]
 8003688:	f011 fc48 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800368c:	2128      	movs	r1, #40	; 0x28
 800368e:	2020      	movs	r0, #32
 8003690:	f7ff f99e 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003694:	4a9a      	ldr	r2, [pc, #616]	; (8003900 <statemachine+0x800>)
 8003696:	2301      	movs	r3, #1
 8003698:	ca06      	ldmia	r2, {r1, r2}
 800369a:	69f8      	ldr	r0, [r7, #28]
 800369c:	f7ff f972 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 80036a0:	4a99      	ldr	r2, [pc, #612]	; (8003908 <statemachine+0x808>)
 80036a2:	210f      	movs	r1, #15
 80036a4:	69f8      	ldr	r0, [r7, #28]
 80036a6:	f011 fc39 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80036aa:	2130      	movs	r1, #48	; 0x30
 80036ac:	2020      	movs	r0, #32
 80036ae:	f7ff f98f 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80036b2:	4a93      	ldr	r2, [pc, #588]	; (8003900 <statemachine+0x800>)
 80036b4:	2301      	movs	r3, #1
 80036b6:	ca06      	ldmia	r2, {r1, r2}
 80036b8:	69f8      	ldr	r0, [r7, #28]
 80036ba:	f7ff f963 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 80036be:	4b8e      	ldr	r3, [pc, #568]	; (80038f8 <statemachine+0x7f8>)
 80036c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80036c4:	e9cd 2300 	strd	r2, r3, [sp]
 80036c8:	4a8e      	ldr	r2, [pc, #568]	; (8003904 <statemachine+0x804>)
 80036ca:	210f      	movs	r1, #15
 80036cc:	69f8      	ldr	r0, [r7, #28]
 80036ce:	f011 fc25 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80036d2:	2138      	movs	r1, #56	; 0x38
 80036d4:	2020      	movs	r0, #32
 80036d6:	f7ff f97b 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80036da:	4a89      	ldr	r2, [pc, #548]	; (8003900 <statemachine+0x800>)
 80036dc:	2301      	movs	r3, #1
 80036de:	ca06      	ldmia	r2, {r1, r2}
 80036e0:	69f8      	ldr	r0, [r7, #28]
 80036e2:	f7ff f94f 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 80036e6:	69f8      	ldr	r0, [r7, #28]
 80036e8:	f00f fd26 	bl	8013138 <free>
 80036ec:	e029      	b.n	8003742 <statemachine+0x642>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80036ee:	2014      	movs	r0, #20
 80036f0:	f00f fd1a 	bl	8013128 <malloc>
 80036f4:	4603      	mov	r3, r0
 80036f6:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 80036f8:	2120      	movs	r1, #32
 80036fa:	2020      	movs	r0, #32
 80036fc:	f7ff f968 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8003700:	4a7f      	ldr	r2, [pc, #508]	; (8003900 <statemachine+0x800>)
 8003702:	2301      	movs	r3, #1
 8003704:	ca06      	ldmia	r2, {r1, r2}
 8003706:	4881      	ldr	r0, [pc, #516]	; (800390c <statemachine+0x80c>)
 8003708:	f7ff f93c 	bl	8002984 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	2020      	movs	r0, #32
 8003710:	f7ff f95e 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003714:	4a7a      	ldr	r2, [pc, #488]	; (8003900 <statemachine+0x800>)
 8003716:	2301      	movs	r3, #1
 8003718:	ca06      	ldmia	r2, {r1, r2}
 800371a:	487d      	ldr	r0, [pc, #500]	; (8003910 <statemachine+0x810>)
 800371c:	f7ff f932 	bl	8002984 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 54);
 8003720:	2136      	movs	r1, #54	; 0x36
 8003722:	2020      	movs	r0, #32
 8003724:	f7ff f954 	bl	80029d0 <ssd1306_SetCursor>
				  						batterygauge(vbat,35, 54,1);
 8003728:	4b7a      	ldr	r3, [pc, #488]	; (8003914 <statemachine+0x814>)
 800372a:	edd3 7a00 	vldr	s15, [r3]
 800372e:	2201      	movs	r2, #1
 8003730:	2136      	movs	r1, #54	; 0x36
 8003732:	2023      	movs	r0, #35	; 0x23
 8003734:	eeb0 0a67 	vmov.f32	s0, s15
 8003738:	f7ff fb66 	bl	8002e08 <batterygauge>
				  						free(str);
 800373c:	6a38      	ldr	r0, [r7, #32]
 800373e:	f00f fcfb 	bl	8013138 <free>
				  					}
				  if(BTN_B>=1){
 8003742:	4b75      	ldr	r3, [pc, #468]	; (8003918 <statemachine+0x818>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f340 81c8 	ble.w	8003adc <statemachine+0x9dc>
					  posstate++;
 800374c:	4b73      	ldr	r3, [pc, #460]	; (800391c <statemachine+0x81c>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	b2da      	uxtb	r2, r3
 8003754:	4b71      	ldr	r3, [pc, #452]	; (800391c <statemachine+0x81c>)
 8003756:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8003758:	4b6f      	ldr	r3, [pc, #444]	; (8003918 <statemachine+0x818>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]





				  break;
 800375e:	e1bd      	b.n	8003adc <statemachine+0x9dc>
			  case STATE_LAT:
				  if(myData.fix == 1){
 8003760:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <statemachine+0x7f8>)
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	2b01      	cmp	r3, #1
 8003766:	d14b      	bne.n	8003800 <statemachine+0x700>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003768:	2014      	movs	r0, #20
 800376a:	f00f fcdd 	bl	8013128 <malloc>
 800376e:	4603      	mov	r3, r0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 8003772:	2120      	movs	r1, #32
 8003774:	2020      	movs	r0, #32
 8003776:	f7ff f92b 	bl	80029d0 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 800377a:	4a69      	ldr	r2, [pc, #420]	; (8003920 <statemachine+0x820>)
 800377c:	210f      	movs	r1, #15
 800377e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003780:	f011 fbcc 	bl	8014f1c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003784:	4a5e      	ldr	r2, [pc, #376]	; (8003900 <statemachine+0x800>)
 8003786:	2301      	movs	r3, #1
 8003788:	ca06      	ldmia	r2, {r1, r2}
 800378a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800378c:	f7ff f8fa 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003790:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <statemachine+0x7f8>)
 8003792:	7a1b      	ldrb	r3, [r3, #8]
 8003794:	4a63      	ldr	r2, [pc, #396]	; (8003924 <statemachine+0x824>)
 8003796:	210f      	movs	r1, #15
 8003798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800379a:	f011 fbbf 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800379e:	2128      	movs	r1, #40	; 0x28
 80037a0:	2020      	movs	r0, #32
 80037a2:	f7ff f915 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80037a6:	4a56      	ldr	r2, [pc, #344]	; (8003900 <statemachine+0x800>)
 80037a8:	2301      	movs	r3, #1
 80037aa:	ca06      	ldmia	r2, {r1, r2}
 80037ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ae:	f7ff f8e9 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 80037b2:	4a52      	ldr	r2, [pc, #328]	; (80038fc <statemachine+0x7fc>)
 80037b4:	210f      	movs	r1, #15
 80037b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037b8:	f011 fbb0 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80037bc:	2130      	movs	r1, #48	; 0x30
 80037be:	2020      	movs	r0, #32
 80037c0:	f7ff f906 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80037c4:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <statemachine+0x800>)
 80037c6:	2301      	movs	r3, #1
 80037c8:	ca06      	ldmia	r2, {r1, r2}
 80037ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037cc:	f7ff f8da 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 80037d0:	4b49      	ldr	r3, [pc, #292]	; (80038f8 <statemachine+0x7f8>)
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	e9cd 2300 	strd	r2, r3, [sp]
 80037da:	4a4a      	ldr	r2, [pc, #296]	; (8003904 <statemachine+0x804>)
 80037dc:	210f      	movs	r1, #15
 80037de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037e0:	f011 fb9c 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80037e4:	2138      	movs	r1, #56	; 0x38
 80037e6:	2020      	movs	r0, #32
 80037e8:	f7ff f8f2 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80037ec:	4a44      	ldr	r2, [pc, #272]	; (8003900 <statemachine+0x800>)
 80037ee:	2301      	movs	r3, #1
 80037f0:	ca06      	ldmia	r2, {r1, r2}
 80037f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037f4:	f7ff f8c6 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 80037f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037fa:	f00f fc9d 	bl	8013138 <free>
 80037fe:	e01b      	b.n	8003838 <statemachine+0x738>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003800:	2014      	movs	r0, #20
 8003802:	f00f fc91 	bl	8013128 <malloc>
 8003806:	4603      	mov	r3, r0
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 800380a:	2120      	movs	r1, #32
 800380c:	2020      	movs	r0, #32
 800380e:	f7ff f8df 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 8003812:	4a3b      	ldr	r2, [pc, #236]	; (8003900 <statemachine+0x800>)
 8003814:	2301      	movs	r3, #1
 8003816:	ca06      	ldmia	r2, {r1, r2}
 8003818:	4843      	ldr	r0, [pc, #268]	; (8003928 <statemachine+0x828>)
 800381a:	f7ff f8b3 	bl	8002984 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	2020      	movs	r0, #32
 8003822:	f7ff f8d5 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003826:	4a36      	ldr	r2, [pc, #216]	; (8003900 <statemachine+0x800>)
 8003828:	2301      	movs	r3, #1
 800382a:	ca06      	ldmia	r2, {r1, r2}
 800382c:	4838      	ldr	r0, [pc, #224]	; (8003910 <statemachine+0x810>)
 800382e:	f7ff f8a9 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 8003832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003834:	f00f fc80 	bl	8013138 <free>
				  					}
				  if(BTN_B>=1){
 8003838:	4b37      	ldr	r3, [pc, #220]	; (8003918 <statemachine+0x818>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f340 814f 	ble.w	8003ae0 <statemachine+0x9e0>
				  					  posstate++;
 8003842:	4b36      	ldr	r3, [pc, #216]	; (800391c <statemachine+0x81c>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4b34      	ldr	r3, [pc, #208]	; (800391c <statemachine+0x81c>)
 800384c:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800384e:	4b32      	ldr	r3, [pc, #200]	; (8003918 <statemachine+0x818>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 8003854:	e144      	b.n	8003ae0 <statemachine+0x9e0>
			  case STATE_LONG:
				  if(myData.fix == 1){
 8003856:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <statemachine+0x7f8>)
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	2b01      	cmp	r3, #1
 800385c:	d168      	bne.n	8003930 <statemachine+0x830>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 800385e:	2014      	movs	r0, #20
 8003860:	f00f fc62 	bl	8013128 <malloc>
 8003864:	4603      	mov	r3, r0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 8003868:	2120      	movs	r1, #32
 800386a:	2020      	movs	r0, #32
 800386c:	f7ff f8b0 	bl	80029d0 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 8003870:	4a2e      	ldr	r2, [pc, #184]	; (800392c <statemachine+0x82c>)
 8003872:	210f      	movs	r1, #15
 8003874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003876:	f011 fb51 	bl	8014f1c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <statemachine+0x800>)
 800387c:	2301      	movs	r3, #1
 800387e:	ca06      	ldmia	r2, {r1, r2}
 8003880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003882:	f7ff f87f 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <statemachine+0x7f8>)
 8003888:	7e1b      	ldrb	r3, [r3, #24]
 800388a:	4a26      	ldr	r2, [pc, #152]	; (8003924 <statemachine+0x824>)
 800388c:	210f      	movs	r1, #15
 800388e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003890:	f011 fb44 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003894:	2128      	movs	r1, #40	; 0x28
 8003896:	2020      	movs	r0, #32
 8003898:	f7ff f89a 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <statemachine+0x800>)
 800389e:	2301      	movs	r3, #1
 80038a0:	ca06      	ldmia	r2, {r1, r2}
 80038a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038a4:	f7ff f86e 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 80038a8:	4a17      	ldr	r2, [pc, #92]	; (8003908 <statemachine+0x808>)
 80038aa:	210f      	movs	r1, #15
 80038ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038ae:	f011 fb35 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80038b2:	2130      	movs	r1, #48	; 0x30
 80038b4:	2020      	movs	r0, #32
 80038b6:	f7ff f88b 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80038ba:	4a11      	ldr	r2, [pc, #68]	; (8003900 <statemachine+0x800>)
 80038bc:	2301      	movs	r3, #1
 80038be:	ca06      	ldmia	r2, {r1, r2}
 80038c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038c2:	f7ff f85f 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 80038c6:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <statemachine+0x7f8>)
 80038c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038cc:	e9cd 2300 	strd	r2, r3, [sp]
 80038d0:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <statemachine+0x804>)
 80038d2:	210f      	movs	r1, #15
 80038d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038d6:	f011 fb21 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80038da:	2138      	movs	r1, #56	; 0x38
 80038dc:	2020      	movs	r0, #32
 80038de:	f7ff f877 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <statemachine+0x800>)
 80038e4:	2301      	movs	r3, #1
 80038e6:	ca06      	ldmia	r2, {r1, r2}
 80038e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038ea:	f7ff f84b 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 80038ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038f0:	f00f fc22 	bl	8013138 <free>
 80038f4:	e038      	b.n	8003968 <statemachine+0x868>
 80038f6:	bf00      	nop
 80038f8:	200006b0 	.word	0x200006b0
 80038fc:	08018f88 	.word	0x08018f88
 8003900:	20000008 	.word	0x20000008
 8003904:	08018f94 	.word	0x08018f94
 8003908:	08018f9c 	.word	0x08018f9c
 800390c:	08018fa8 	.word	0x08018fa8
 8003910:	08018f64 	.word	0x08018f64
 8003914:	20000730 	.word	0x20000730
 8003918:	200006f4 	.word	0x200006f4
 800391c:	200006fb 	.word	0x200006fb
 8003920:	08018fb0 	.word	0x08018fb0
 8003924:	08018fbc 	.word	0x08018fbc
 8003928:	08018fc0 	.word	0x08018fc0
 800392c:	08018fc8 	.word	0x08018fc8
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003930:	2014      	movs	r0, #20
 8003932:	f00f fbf9 	bl	8013128 <malloc>
 8003936:	4603      	mov	r3, r0
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 800393a:	2120      	movs	r1, #32
 800393c:	2020      	movs	r0, #32
 800393e:	f7ff f847 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8003942:	4aa1      	ldr	r2, [pc, #644]	; (8003bc8 <statemachine+0xac8>)
 8003944:	2301      	movs	r3, #1
 8003946:	ca06      	ldmia	r2, {r1, r2}
 8003948:	48a0      	ldr	r0, [pc, #640]	; (8003bcc <statemachine+0xacc>)
 800394a:	f7ff f81b 	bl	8002984 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800394e:	212c      	movs	r1, #44	; 0x2c
 8003950:	2020      	movs	r0, #32
 8003952:	f7ff f83d 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003956:	4a9c      	ldr	r2, [pc, #624]	; (8003bc8 <statemachine+0xac8>)
 8003958:	2301      	movs	r3, #1
 800395a:	ca06      	ldmia	r2, {r1, r2}
 800395c:	489c      	ldr	r0, [pc, #624]	; (8003bd0 <statemachine+0xad0>)
 800395e:	f7ff f811 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 8003962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003964:	f00f fbe8 	bl	8013138 <free>
				  					}
				  if(BTN_B>=1){
 8003968:	4b9a      	ldr	r3, [pc, #616]	; (8003bd4 <statemachine+0xad4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f340 80b9 	ble.w	8003ae4 <statemachine+0x9e4>
				  					  posstate++;
 8003972:	4b99      	ldr	r3, [pc, #612]	; (8003bd8 <statemachine+0xad8>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4b97      	ldr	r3, [pc, #604]	; (8003bd8 <statemachine+0xad8>)
 800397c:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800397e:	4b95      	ldr	r3, [pc, #596]	; (8003bd4 <statemachine+0xad4>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 8003984:	e0ae      	b.n	8003ae4 <statemachine+0x9e4>
			  case STATE_ALT:
				  if(myData.fix == 1){
 8003986:	4b95      	ldr	r3, [pc, #596]	; (8003bdc <statemachine+0xadc>)
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	2b01      	cmp	r3, #1
 800398c:	d170      	bne.n	8003a70 <statemachine+0x970>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 800398e:	2014      	movs	r0, #20
 8003990:	f00f fbca 	bl	8013128 <malloc>
 8003994:	4603      	mov	r3, r0
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 8003998:	2120      	movs	r1, #32
 800399a:	2020      	movs	r0, #32
 800399c:	f7ff f818 	bl	80029d0 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 80039a0:	4a8f      	ldr	r2, [pc, #572]	; (8003be0 <statemachine+0xae0>)
 80039a2:	210f      	movs	r1, #15
 80039a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039a6:	f011 fab9 	bl	8014f1c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80039aa:	4a87      	ldr	r2, [pc, #540]	; (8003bc8 <statemachine+0xac8>)
 80039ac:	2301      	movs	r3, #1
 80039ae:	ca06      	ldmia	r2, {r1, r2}
 80039b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039b2:	f7fe ffe7 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80039b6:	4b89      	ldr	r3, [pc, #548]	; (8003bdc <statemachine+0xadc>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fc fdc4 	bl	8000548 <__aeabi_f2d>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	e9cd 2300 	strd	r2, r3, [sp]
 80039c8:	4a86      	ldr	r2, [pc, #536]	; (8003be4 <statemachine+0xae4>)
 80039ca:	210f      	movs	r1, #15
 80039cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039ce:	f011 faa5 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80039d2:	2128      	movs	r1, #40	; 0x28
 80039d4:	2020      	movs	r0, #32
 80039d6:	f7fe fffb 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80039da:	4a7b      	ldr	r2, [pc, #492]	; (8003bc8 <statemachine+0xac8>)
 80039dc:	2301      	movs	r3, #1
 80039de:	ca06      	ldmia	r2, {r1, r2}
 80039e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039e2:	f7fe ffcf 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 80039e6:	4a80      	ldr	r2, [pc, #512]	; (8003be8 <statemachine+0xae8>)
 80039e8:	210f      	movs	r1, #15
 80039ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039ec:	f011 fa96 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80039f0:	2130      	movs	r1, #48	; 0x30
 80039f2:	2020      	movs	r0, #32
 80039f4:	f7fe ffec 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80039f8:	4a73      	ldr	r2, [pc, #460]	; (8003bc8 <statemachine+0xac8>)
 80039fa:	2301      	movs	r3, #1
 80039fc:	ca06      	ldmia	r2, {r1, r2}
 80039fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a00:	f7fe ffc0 	bl	8002984 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8003a04:	4b75      	ldr	r3, [pc, #468]	; (8003bdc <statemachine+0xadc>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fc fd9d 	bl	8000548 <__aeabi_f2d>
 8003a0e:	a36c      	add	r3, pc, #432	; (adr r3, 8003bc0 <statemachine+0xac0>)
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f7fc fdf0 	bl	80005f8 <__aeabi_dmul>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f7fd f8e2 	bl	8000be8 <__aeabi_d2f>
 8003a24:	4603      	mov	r3, r0
 8003a26:	ee00 3a10 	vmov	s0, r3
 8003a2a:	f014 f925 	bl	8017c78 <expf>
 8003a2e:	eef0 7a40 	vmov.f32	s15, s0
 8003a32:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8003bec <statemachine+0xaec>
 8003a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a3a:	ee17 0a90 	vmov	r0, s15
 8003a3e:	f7fc fd83 	bl	8000548 <__aeabi_f2d>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	e9cd 2300 	strd	r2, r3, [sp]
 8003a4a:	4a69      	ldr	r2, [pc, #420]	; (8003bf0 <statemachine+0xaf0>)
 8003a4c:	210f      	movs	r1, #15
 8003a4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a50:	f011 fa64 	bl	8014f1c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003a54:	2138      	movs	r1, #56	; 0x38
 8003a56:	2020      	movs	r0, #32
 8003a58:	f7fe ffba 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003a5c:	4a5a      	ldr	r2, [pc, #360]	; (8003bc8 <statemachine+0xac8>)
 8003a5e:	2301      	movs	r3, #1
 8003a60:	ca06      	ldmia	r2, {r1, r2}
 8003a62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a64:	f7fe ff8e 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 8003a68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a6a:	f00f fb65 	bl	8013138 <free>
 8003a6e:	e01b      	b.n	8003aa8 <statemachine+0x9a8>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003a70:	2014      	movs	r0, #20
 8003a72:	f00f fb59 	bl	8013128 <malloc>
 8003a76:	4603      	mov	r3, r0
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
				  						ssd1306_SetCursor(32, 32);
 8003a7a:	2120      	movs	r1, #32
 8003a7c:	2020      	movs	r0, #32
 8003a7e:	f7fe ffa7 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 8003a82:	4a51      	ldr	r2, [pc, #324]	; (8003bc8 <statemachine+0xac8>)
 8003a84:	2301      	movs	r3, #1
 8003a86:	ca06      	ldmia	r2, {r1, r2}
 8003a88:	485a      	ldr	r0, [pc, #360]	; (8003bf4 <statemachine+0xaf4>)
 8003a8a:	f7fe ff7b 	bl	8002984 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003a8e:	212c      	movs	r1, #44	; 0x2c
 8003a90:	2020      	movs	r0, #32
 8003a92:	f7fe ff9d 	bl	80029d0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003a96:	4a4c      	ldr	r2, [pc, #304]	; (8003bc8 <statemachine+0xac8>)
 8003a98:	2301      	movs	r3, #1
 8003a9a:	ca06      	ldmia	r2, {r1, r2}
 8003a9c:	484c      	ldr	r0, [pc, #304]	; (8003bd0 <statemachine+0xad0>)
 8003a9e:	f7fe ff71 	bl	8002984 <ssd1306_WriteString>
				  						free(str);
 8003aa2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003aa4:	f00f fb48 	bl	8013138 <free>
				  					}
				  if(BTN_B>=1){
 8003aa8:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <statemachine+0xad4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	dd1b      	ble.n	8003ae8 <statemachine+0x9e8>
				  					posstate--;
 8003ab0:	4b49      	ldr	r3, [pc, #292]	; (8003bd8 <statemachine+0xad8>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <statemachine+0xad8>)
 8003aba:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003abc:	4b46      	ldr	r3, [pc, #280]	; (8003bd8 <statemachine+0xad8>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	4b44      	ldr	r3, [pc, #272]	; (8003bd8 <statemachine+0xad8>)
 8003ac6:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003ac8:	4b43      	ldr	r3, [pc, #268]	; (8003bd8 <statemachine+0xad8>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <statemachine+0xad8>)
 8003ad2:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8003ad4:	4b3f      	ldr	r3, [pc, #252]	; (8003bd4 <statemachine+0xad4>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 8003ada:	e005      	b.n	8003ae8 <statemachine+0x9e8>
				  break;
 8003adc:	bf00      	nop
 8003ade:	e004      	b.n	8003aea <statemachine+0x9ea>
				  break;
 8003ae0:	bf00      	nop
 8003ae2:	e002      	b.n	8003aea <statemachine+0x9ea>
				  break;
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <statemachine+0x9ea>
				  break;
 8003ae8:	bf00      	nop
			  }

					if(BTN_A>=1){
 8003aea:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <statemachine+0xaf8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f341 8016 	ble.w	8004b20 <statemachine+0x1a20>
							state++;
 8003af4:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <statemachine+0xafc>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <statemachine+0xafc>)
 8003afe:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8003b00:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <statemachine+0xaf8>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8003b06:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <statemachine+0xad4>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]


						}
			  break;
 8003b0c:	f001 b808 	b.w	8004b20 <statemachine+0x1a20>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8003b10:	2000      	movs	r0, #0
 8003b12:	f7fe fe1b 	bl	800274c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003b16:	493a      	ldr	r1, [pc, #232]	; (8003c00 <statemachine+0xb00>)
 8003b18:	4830      	ldr	r0, [pc, #192]	; (8003bdc <statemachine+0xadc>)
 8003b1a:	f7fe fa87 	bl	800202c <nmea_parse>
			  int heure=0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	65fb      	str	r3, [r7, #92]	; 0x5c
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8003b22:	4b2e      	ldr	r3, [pc, #184]	; (8003bdc <statemachine+0xadc>)
 8003b24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b28:	f003 020f 	and.w	r2, r3, #15
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <statemachine+0xadc>)
 8003b38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	4413      	add	r3, r2
 8003b42:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if((heure+2)>=24){
 8003b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b46:	2b15      	cmp	r3, #21
 8003b48:	dd03      	ble.n	8003b52 <statemachine+0xa52>
				  heure=heure-22;
 8003b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b4c:	3b16      	subs	r3, #22
 8003b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b50:	e002      	b.n	8003b58 <statemachine+0xa58>
			  }
			  else{
				  heure=heure+2;
 8003b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b54:	3302      	adds	r3, #2
 8003b56:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }

			  if(myData.fix == 1){
 8003b58:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <statemachine+0xadc>)
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	f040 82e3 	bne.w	8004128 <statemachine+0x1028>

				  switch(hrstate){
 8003b62:	4b28      	ldr	r3, [pc, #160]	; (8003c04 <statemachine+0xb04>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <statemachine+0xa72>
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	f000 808f 	beq.w	8003c8e <statemachine+0xb8e>
 8003b70:	e2f0      	b.n	8004154 <statemachine+0x1054>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 8003b72:	2014      	movs	r0, #20
 8003b74:	f00f fad8 	bl	8013128 <malloc>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
					  ssd1306_SetCursor(32, 32);
 8003b7c:	2120      	movs	r1, #32
 8003b7e:	2020      	movs	r0, #32
 8003b80:	f7fe ff26 	bl	80029d0 <ssd1306_SetCursor>
					  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 8003b84:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <statemachine+0xac8>)
 8003b86:	2301      	movs	r3, #1
 8003b88:	ca06      	ldmia	r2, {r1, r2}
 8003b8a:	481f      	ldr	r0, [pc, #124]	; (8003c08 <statemachine+0xb08>)
 8003b8c:	f7fe fefa 	bl	8002984 <ssd1306_WriteString>
					 ssd1306_SetCursor(34, 42);
 8003b90:	212a      	movs	r1, #42	; 0x2a
 8003b92:	2022      	movs	r0, #34	; 0x22
 8003b94:	f7fe ff1c 	bl	80029d0 <ssd1306_SetCursor>
					 if(heure>=10){
 8003b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b9a:	2b09      	cmp	r3, #9
 8003b9c:	dd38      	ble.n	8003c10 <statemachine+0xb10>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <statemachine+0xadc>)
 8003ba0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <statemachine+0xadc>)
 8003ba8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	9200      	str	r2, [sp, #0]
 8003bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb2:	4a16      	ldr	r2, [pc, #88]	; (8003c0c <statemachine+0xb0c>)
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003bb8:	f011 f9b0 	bl	8014f1c <sniprintf>
 8003bbc:	e037      	b.n	8003c2e <statemachine+0xb2e>
 8003bbe:	bf00      	nop
 8003bc0:	fb798882 	.word	0xfb798882
 8003bc4:	bf1e1818 	.word	0xbf1e1818
 8003bc8:	20000008 	.word	0x20000008
 8003bcc:	08018fd4 	.word	0x08018fd4
 8003bd0:	08018f64 	.word	0x08018f64
 8003bd4:	200006f4 	.word	0x200006f4
 8003bd8:	200006fb 	.word	0x200006fb
 8003bdc:	200006b0 	.word	0x200006b0
 8003be0:	08018fdc 	.word	0x08018fdc
 8003be4:	08018fe8 	.word	0x08018fe8
 8003be8:	08018ff0 	.word	0x08018ff0
 8003bec:	447a0000 	.word	0x447a0000
 8003bf0:	08018ffc 	.word	0x08018ffc
 8003bf4:	08019008 	.word	0x08019008
 8003bf8:	200006f0 	.word	0x200006f0
 8003bfc:	200006f8 	.word	0x200006f8
 8003c00:	200004ac 	.word	0x200004ac
 8003c04:	200006f9 	.word	0x200006f9
 8003c08:	08019010 	.word	0x08019010
 8003c0c:	0801901c 	.word	0x0801901c
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003c10:	4bb5      	ldr	r3, [pc, #724]	; (8003ee8 <statemachine+0xde8>)
 8003c12:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003c16:	461a      	mov	r2, r3
 8003c18:	4bb3      	ldr	r3, [pc, #716]	; (8003ee8 <statemachine+0xde8>)
 8003c1a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	9200      	str	r2, [sp, #0]
 8003c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c24:	4ab1      	ldr	r2, [pc, #708]	; (8003eec <statemachine+0xdec>)
 8003c26:	210f      	movs	r1, #15
 8003c28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c2a:	f011 f977 	bl	8014f1c <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 8003c2e:	4ab0      	ldr	r2, [pc, #704]	; (8003ef0 <statemachine+0xdf0>)
 8003c30:	2301      	movs	r3, #1
 8003c32:	ca06      	ldmia	r2, {r1, r2}
 8003c34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c36:	f7fe fea5 	bl	8002984 <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 8003c3a:	2134      	movs	r1, #52	; 0x34
 8003c3c:	2022      	movs	r0, #34	; 0x22
 8003c3e:	f7fe fec7 	bl	80029d0 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 8003c42:	4ba9      	ldr	r3, [pc, #676]	; (8003ee8 <statemachine+0xde8>)
 8003c44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4ba7      	ldr	r3, [pc, #668]	; (8003ee8 <statemachine+0xde8>)
 8003c4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	4613      	mov	r3, r2
 8003c54:	4aa7      	ldr	r2, [pc, #668]	; (8003ef4 <statemachine+0xdf4>)
 8003c56:	210f      	movs	r1, #15
 8003c58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c5a:	f011 f95f 	bl	8014f1c <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 8003c5e:	4aa6      	ldr	r2, [pc, #664]	; (8003ef8 <statemachine+0xdf8>)
 8003c60:	2301      	movs	r3, #1
 8003c62:	ca06      	ldmia	r2, {r1, r2}
 8003c64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c66:	f7fe fe8d 	bl	8002984 <ssd1306_WriteString>
					free(str);
 8003c6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c6c:	f00f fa64 	bl	8013138 <free>
					if(BTN_B>=1){
 8003c70:	4ba2      	ldr	r3, [pc, #648]	; (8003efc <statemachine+0xdfc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f340 826a 	ble.w	800414e <statemachine+0x104e>
												hrstate++;
 8003c7a:	4ba1      	ldr	r3, [pc, #644]	; (8003f00 <statemachine+0xe00>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4b9f      	ldr	r3, [pc, #636]	; (8003f00 <statemachine+0xe00>)
 8003c84:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8003c86:	4b9d      	ldr	r3, [pc, #628]	; (8003efc <statemachine+0xdfc>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
											}




					  break;
 8003c8c:	e25f      	b.n	800414e <statemachine+0x104e>
				  case STATE_OLD:
					  if(heure>12){
 8003c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c90:	2b0c      	cmp	r3, #12
 8003c92:	dd02      	ble.n	8003c9a <statemachine+0xb9a>
						  heure=heure-12;
 8003c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c96:	3b0c      	subs	r3, #12
 8003c98:	65fb      	str	r3, [r7, #92]	; 0x5c
					  }
					  int minute=0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	643b      	str	r3, [r7, #64]	; 0x40
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8003c9e:	4b92      	ldr	r3, [pc, #584]	; (8003ee8 <statemachine+0xde8>)
 8003ca0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b8d      	ldr	r3, [pc, #564]	; (8003ee8 <statemachine+0xde8>)
 8003cb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	4413      	add	r3, r2
 8003cbe:	643b      	str	r3, [r7, #64]	; 0x40
					  ssd1306_DrawCircle(64, 48, 12, White);
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	220c      	movs	r2, #12
 8003cc4:	2130      	movs	r1, #48	; 0x30
 8003cc6:	2040      	movs	r0, #64	; 0x40
 8003cc8:	f7fe ff06 	bl	8002ad8 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 8003ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cce:	f1c3 0303 	rsb	r3, r3, #3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc fc26 	bl	8000524 <__aeabi_i2d>
 8003cd8:	a381      	add	r3, pc, #516	; (adr r3, 8003ee0 <statemachine+0xde0>)
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	f7fc fc8b 	bl	80005f8 <__aeabi_dmul>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	4b85      	ldr	r3, [pc, #532]	; (8003f04 <statemachine+0xe04>)
 8003cf0:	f7fc fdac 	bl	800084c <__aeabi_ddiv>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	ec43 2b17 	vmov	d7, r2, r3
 8003cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8003d00:	eef0 0a67 	vmov.f32	s1, s15
 8003d04:	f013 ff0c 	bl	8017b20 <cos>
 8003d08:	ec51 0b10 	vmov	r0, r1, d0
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	4b7c      	ldr	r3, [pc, #496]	; (8003f04 <statemachine+0xe04>)
 8003d12:	f7fc fc71 	bl	80005f8 <__aeabi_dmul>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	ec43 2b17 	vmov	d7, r2, r3
 8003d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d22:	eef0 0a67 	vmov.f32	s1, s15
 8003d26:	f013 ffeb 	bl	8017d00 <floor>
 8003d2a:	ec51 0b10 	vmov	r0, r1, d0
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	4b75      	ldr	r3, [pc, #468]	; (8003f08 <statemachine+0xe08>)
 8003d34:	f7fc faaa 	bl	800028c <__adddf3>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f7fc ff32 	bl	8000ba8 <__aeabi_d2uiz>
 8003d44:	4603      	mov	r3, r0
 8003d46:	b2dc      	uxtb	r4, r3
 8003d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d4a:	f1c3 0303 	rsb	r3, r3, #3
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fc fbe8 	bl	8000524 <__aeabi_i2d>
 8003d54:	a362      	add	r3, pc, #392	; (adr r3, 8003ee0 <statemachine+0xde0>)
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	f7fc fc4d 	bl	80005f8 <__aeabi_dmul>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <statemachine+0xe04>)
 8003d6c:	f7fc fd6e 	bl	800084c <__aeabi_ddiv>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	ec43 2b17 	vmov	d7, r2, r3
 8003d78:	eeb0 0a47 	vmov.f32	s0, s14
 8003d7c:	eef0 0a67 	vmov.f32	s1, s15
 8003d80:	f013 ff22 	bl	8017bc8 <sin>
 8003d84:	ec51 0b10 	vmov	r0, r1, d0
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	4b5d      	ldr	r3, [pc, #372]	; (8003f04 <statemachine+0xe04>)
 8003d8e:	f7fc fc33 	bl	80005f8 <__aeabi_dmul>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	ec43 2b17 	vmov	d7, r2, r3
 8003d9a:	eeb0 0a47 	vmov.f32	s0, s14
 8003d9e:	eef0 0a67 	vmov.f32	s1, s15
 8003da2:	f013 ffad 	bl	8017d00 <floor>
 8003da6:	ec53 2b10 	vmov	r2, r3, d0
 8003daa:	f04f 0000 	mov.w	r0, #0
 8003dae:	4957      	ldr	r1, [pc, #348]	; (8003f0c <statemachine+0xe0c>)
 8003db0:	f7fc fa6a 	bl	8000288 <__aeabi_dsub>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f7fc fef4 	bl	8000ba8 <__aeabi_d2uiz>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	9200      	str	r2, [sp, #0]
 8003dc8:	4622      	mov	r2, r4
 8003dca:	2130      	movs	r1, #48	; 0x30
 8003dcc:	2040      	movs	r0, #64	; 0x40
 8003dce:	f7fe fe17 	bl	8002a00 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd4:	f1c3 030f 	rsb	r3, r3, #15
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fc fba3 	bl	8000524 <__aeabi_i2d>
 8003dde:	a340      	add	r3, pc, #256	; (adr r3, 8003ee0 <statemachine+0xde0>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fc08 	bl	80005f8 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <statemachine+0xe10>)
 8003df6:	f7fc fd29 	bl	800084c <__aeabi_ddiv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	ec43 2b17 	vmov	d7, r2, r3
 8003e02:	eeb0 0a47 	vmov.f32	s0, s14
 8003e06:	eef0 0a67 	vmov.f32	s1, s15
 8003e0a:	f013 fe89 	bl	8017b20 <cos>
 8003e0e:	ec51 0b10 	vmov	r0, r1, d0
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <statemachine+0xe14>)
 8003e18:	f7fc fbee 	bl	80005f8 <__aeabi_dmul>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	ec43 2b17 	vmov	d7, r2, r3
 8003e24:	eeb0 0a47 	vmov.f32	s0, s14
 8003e28:	eef0 0a67 	vmov.f32	s1, s15
 8003e2c:	f013 ff68 	bl	8017d00 <floor>
 8003e30:	ec51 0b10 	vmov	r0, r1, d0
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	4b33      	ldr	r3, [pc, #204]	; (8003f08 <statemachine+0xe08>)
 8003e3a:	f7fc fa27 	bl	800028c <__adddf3>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	f7fc feaf 	bl	8000ba8 <__aeabi_d2uiz>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	b2dc      	uxtb	r4, r3
 8003e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e50:	f1c3 030f 	rsb	r3, r3, #15
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fb65 	bl	8000524 <__aeabi_i2d>
 8003e5a:	a321      	add	r3, pc, #132	; (adr r3, 8003ee0 <statemachine+0xde0>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f7fc fbca 	bl	80005f8 <__aeabi_dmul>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <statemachine+0xe10>)
 8003e72:	f7fc fceb 	bl	800084c <__aeabi_ddiv>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	ec43 2b17 	vmov	d7, r2, r3
 8003e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e82:	eef0 0a67 	vmov.f32	s1, s15
 8003e86:	f013 fe9f 	bl	8017bc8 <sin>
 8003e8a:	ec51 0b10 	vmov	r0, r1, d0
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <statemachine+0xe14>)
 8003e94:	f7fc fbb0 	bl	80005f8 <__aeabi_dmul>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	ec43 2b17 	vmov	d7, r2, r3
 8003ea0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ea4:	eef0 0a67 	vmov.f32	s1, s15
 8003ea8:	f013 ff2a 	bl	8017d00 <floor>
 8003eac:	ec53 2b10 	vmov	r2, r3, d0
 8003eb0:	f04f 0000 	mov.w	r0, #0
 8003eb4:	4915      	ldr	r1, [pc, #84]	; (8003f0c <statemachine+0xe0c>)
 8003eb6:	f7fc f9e7 	bl	8000288 <__aeabi_dsub>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f7fc fe71 	bl	8000ba8 <__aeabi_d2uiz>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2201      	movs	r2, #1
 8003ecc:	9200      	str	r2, [sp, #0]
 8003ece:	4622      	mov	r2, r4
 8003ed0:	2130      	movs	r1, #48	; 0x30
 8003ed2:	2040      	movs	r0, #64	; 0x40
 8003ed4:	f7fe fd94 	bl	8002a00 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8003ed8:	2300      	movs	r3, #0
 8003eda:	65bb      	str	r3, [r7, #88]	; 0x58
 8003edc:	e112      	b.n	8004104 <statemachine+0x1004>
 8003ede:	bf00      	nop
 8003ee0:	54442d18 	.word	0x54442d18
 8003ee4:	400921fb 	.word	0x400921fb
 8003ee8:	200006b0 	.word	0x200006b0
 8003eec:	08019024 	.word	0x08019024
 8003ef0:	20000010 	.word	0x20000010
 8003ef4:	08019030 	.word	0x08019030
 8003ef8:	20000008 	.word	0x20000008
 8003efc:	200006f4 	.word	0x200006f4
 8003f00:	200006f9 	.word	0x200006f9
 8003f04:	40180000 	.word	0x40180000
 8003f08:	40500000 	.word	0x40500000
 8003f0c:	40480000 	.word	0x40480000
 8003f10:	403e0000 	.word	0x403e0000
 8003f14:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 8003f18:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003f1a:	f7fc fb03 	bl	8000524 <__aeabi_i2d>
 8003f1e:	a3c6      	add	r3, pc, #792	; (adr r3, 8004238 <statemachine+0x1138>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f7fc fb68 	bl	80005f8 <__aeabi_dmul>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4619      	mov	r1, r3
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	4bc2      	ldr	r3, [pc, #776]	; (8004240 <statemachine+0x1140>)
 8003f36:	f7fc fc89 	bl	800084c <__aeabi_ddiv>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	ec43 2b17 	vmov	d7, r2, r3
 8003f42:	eeb0 0a47 	vmov.f32	s0, s14
 8003f46:	eef0 0a67 	vmov.f32	s1, s15
 8003f4a:	f013 fde9 	bl	8017b20 <cos>
 8003f4e:	ec51 0b10 	vmov	r0, r1, d0
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	4bbb      	ldr	r3, [pc, #748]	; (8004244 <statemachine+0x1144>)
 8003f58:	f7fc fb4e 	bl	80005f8 <__aeabi_dmul>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	ec43 2b17 	vmov	d7, r2, r3
 8003f64:	eeb0 0a47 	vmov.f32	s0, s14
 8003f68:	eef0 0a67 	vmov.f32	s1, s15
 8003f6c:	f013 fec8 	bl	8017d00 <floor>
 8003f70:	ec51 0b10 	vmov	r0, r1, d0
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	4bb3      	ldr	r3, [pc, #716]	; (8004248 <statemachine+0x1148>)
 8003f7a:	f7fc f987 	bl	800028c <__adddf3>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	f7fc fe0f 	bl	8000ba8 <__aeabi_d2uiz>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	b2dc      	uxtb	r4, r3
 8003f8e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003f90:	f7fc fac8 	bl	8000524 <__aeabi_i2d>
 8003f94:	a3a8      	add	r3, pc, #672	; (adr r3, 8004238 <statemachine+0x1138>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f7fc fb2d 	bl	80005f8 <__aeabi_dmul>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	4ba5      	ldr	r3, [pc, #660]	; (8004240 <statemachine+0x1140>)
 8003fac:	f7fc fc4e 	bl	800084c <__aeabi_ddiv>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	ec43 2b17 	vmov	d7, r2, r3
 8003fb8:	eeb0 0a47 	vmov.f32	s0, s14
 8003fbc:	eef0 0a67 	vmov.f32	s1, s15
 8003fc0:	f013 fe02 	bl	8017bc8 <sin>
 8003fc4:	ec51 0b10 	vmov	r0, r1, d0
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	4b9d      	ldr	r3, [pc, #628]	; (8004244 <statemachine+0x1144>)
 8003fce:	f7fc fb13 	bl	80005f8 <__aeabi_dmul>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	ec43 2b17 	vmov	d7, r2, r3
 8003fda:	eeb0 0a47 	vmov.f32	s0, s14
 8003fde:	eef0 0a67 	vmov.f32	s1, s15
 8003fe2:	f013 fe8d 	bl	8017d00 <floor>
 8003fe6:	ec51 0b10 	vmov	r0, r1, d0
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	4b97      	ldr	r3, [pc, #604]	; (800424c <statemachine+0x114c>)
 8003ff0:	f7fc f94c 	bl	800028c <__adddf3>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7fc fdd4 	bl	8000ba8 <__aeabi_d2uiz>
 8004000:	4603      	mov	r3, r0
 8004002:	b2dd      	uxtb	r5, r3
 8004004:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004006:	f7fc fa8d 	bl	8000524 <__aeabi_i2d>
 800400a:	a38b      	add	r3, pc, #556	; (adr r3, 8004238 <statemachine+0x1138>)
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f7fc faf2 	bl	80005f8 <__aeabi_dmul>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	4b87      	ldr	r3, [pc, #540]	; (8004240 <statemachine+0x1140>)
 8004022:	f7fc fc13 	bl	800084c <__aeabi_ddiv>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	ec43 2b17 	vmov	d7, r2, r3
 800402e:	eeb0 0a47 	vmov.f32	s0, s14
 8004032:	eef0 0a67 	vmov.f32	s1, s15
 8004036:	f013 fd73 	bl	8017b20 <cos>
 800403a:	ec51 0b10 	vmov	r0, r1, d0
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	4b83      	ldr	r3, [pc, #524]	; (8004250 <statemachine+0x1150>)
 8004044:	f7fc fad8 	bl	80005f8 <__aeabi_dmul>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	ec43 2b17 	vmov	d7, r2, r3
 8004050:	eeb0 0a47 	vmov.f32	s0, s14
 8004054:	eef0 0a67 	vmov.f32	s1, s15
 8004058:	f013 fe52 	bl	8017d00 <floor>
 800405c:	ec51 0b10 	vmov	r0, r1, d0
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	4b78      	ldr	r3, [pc, #480]	; (8004248 <statemachine+0x1148>)
 8004066:	f7fc f911 	bl	800028c <__adddf3>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4610      	mov	r0, r2
 8004070:	4619      	mov	r1, r3
 8004072:	f7fc fd99 	bl	8000ba8 <__aeabi_d2uiz>
 8004076:	4603      	mov	r3, r0
 8004078:	b2de      	uxtb	r6, r3
 800407a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800407c:	f7fc fa52 	bl	8000524 <__aeabi_i2d>
 8004080:	a36d      	add	r3, pc, #436	; (adr r3, 8004238 <statemachine+0x1138>)
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f7fc fab7 	bl	80005f8 <__aeabi_dmul>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	4b6a      	ldr	r3, [pc, #424]	; (8004240 <statemachine+0x1140>)
 8004098:	f7fc fbd8 	bl	800084c <__aeabi_ddiv>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	ec43 2b17 	vmov	d7, r2, r3
 80040a4:	eeb0 0a47 	vmov.f32	s0, s14
 80040a8:	eef0 0a67 	vmov.f32	s1, s15
 80040ac:	f013 fd8c 	bl	8017bc8 <sin>
 80040b0:	ec51 0b10 	vmov	r0, r1, d0
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	4b65      	ldr	r3, [pc, #404]	; (8004250 <statemachine+0x1150>)
 80040ba:	f7fc fa9d 	bl	80005f8 <__aeabi_dmul>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	ec43 2b17 	vmov	d7, r2, r3
 80040c6:	eeb0 0a47 	vmov.f32	s0, s14
 80040ca:	eef0 0a67 	vmov.f32	s1, s15
 80040ce:	f013 fe17 	bl	8017d00 <floor>
 80040d2:	ec51 0b10 	vmov	r0, r1, d0
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	4b5c      	ldr	r3, [pc, #368]	; (800424c <statemachine+0x114c>)
 80040dc:	f7fc f8d6 	bl	800028c <__adddf3>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	f7fc fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80040ec:	4603      	mov	r3, r0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2201      	movs	r2, #1
 80040f2:	9200      	str	r2, [sp, #0]
 80040f4:	4632      	mov	r2, r6
 80040f6:	4629      	mov	r1, r5
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7fe fc81 	bl	8002a00 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80040fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004100:	3301      	adds	r3, #1
 8004102:	65bb      	str	r3, [r7, #88]	; 0x58
 8004104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004106:	2b0c      	cmp	r3, #12
 8004108:	f77f af06 	ble.w	8003f18 <statemachine+0xe18>
					  }
					  if(BTN_B>=1){
 800410c:	4b51      	ldr	r3, [pc, #324]	; (8004254 <statemachine+0x1154>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	dd1e      	ble.n	8004152 <statemachine+0x1052>
					  	hrstate--;
 8004114:	4b50      	ldr	r3, [pc, #320]	; (8004258 <statemachine+0x1158>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	3b01      	subs	r3, #1
 800411a:	b2da      	uxtb	r2, r3
 800411c:	4b4e      	ldr	r3, [pc, #312]	; (8004258 <statemachine+0x1158>)
 800411e:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 8004120:	4b4c      	ldr	r3, [pc, #304]	; (8004254 <statemachine+0x1154>)
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8004126:	e014      	b.n	8004152 <statemachine+0x1052>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 8004128:	2014      	movs	r0, #20
 800412a:	f00e fffd 	bl	8013128 <malloc>
 800412e:	4603      	mov	r3, r0
 8004130:	647b      	str	r3, [r7, #68]	; 0x44
			  			 						ssd1306_SetCursor(32, 44);
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	2020      	movs	r0, #32
 8004136:	f7fe fc4b 	bl	80029d0 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800413a:	4a48      	ldr	r2, [pc, #288]	; (800425c <statemachine+0x115c>)
 800413c:	2301      	movs	r3, #1
 800413e:	ca06      	ldmia	r2, {r1, r2}
 8004140:	4847      	ldr	r0, [pc, #284]	; (8004260 <statemachine+0x1160>)
 8004142:	f7fe fc1f 	bl	8002984 <ssd1306_WriteString>
			  			 						free(str);
 8004146:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004148:	f00e fff6 	bl	8013138 <free>
 800414c:	e002      	b.n	8004154 <statemachine+0x1054>
					  break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <statemachine+0x1054>
					  break;
 8004152:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 8004154:	4b43      	ldr	r3, [pc, #268]	; (8004264 <statemachine+0x1164>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f340 850b 	ble.w	8004b74 <statemachine+0x1a74>
			  		state++;
 800415e:	4b42      	ldr	r3, [pc, #264]	; (8004268 <statemachine+0x1168>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	b2da      	uxtb	r2, r3
 8004166:	4b40      	ldr	r3, [pc, #256]	; (8004268 <statemachine+0x1168>)
 8004168:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800416a:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <statemachine+0x1164>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004170:	4b38      	ldr	r3, [pc, #224]	; (8004254 <statemachine+0x1154>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8004176:	f000 bcfd 	b.w	8004b74 <statemachine+0x1a74>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 800417a:	2000      	movs	r0, #0
 800417c:	f7fe fae6 	bl	800274c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8004180:	493a      	ldr	r1, [pc, #232]	; (800426c <statemachine+0x116c>)
 8004182:	483b      	ldr	r0, [pc, #236]	; (8004270 <statemachine+0x1170>)
 8004184:	f7fd ff52 	bl	800202c <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8004188:	4b39      	ldr	r3, [pc, #228]	; (8004270 <statemachine+0x1170>)
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	2b01      	cmp	r3, #1
 800418e:	d17b      	bne.n	8004288 <statemachine+0x1188>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8004190:	2014      	movs	r0, #20
 8004192:	f00e ffc9 	bl	8013128 <malloc>
 8004196:	4603      	mov	r3, r0
 8004198:	64bb      	str	r3, [r7, #72]	; 0x48
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 800419a:	4b35      	ldr	r3, [pc, #212]	; (8004270 <statemachine+0x1170>)
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc f9d2 	bl	8000548 <__aeabi_f2d>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	e9cd 2300 	strd	r2, r3, [sp]
 80041ac:	4a31      	ldr	r2, [pc, #196]	; (8004274 <statemachine+0x1174>)
 80041ae:	210f      	movs	r1, #15
 80041b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80041b2:	f010 feb3 	bl	8014f1c <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 80041b6:	2120      	movs	r1, #32
 80041b8:	2020      	movs	r0, #32
 80041ba:	f7fe fc09 	bl	80029d0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80041be:	4a27      	ldr	r2, [pc, #156]	; (800425c <statemachine+0x115c>)
 80041c0:	2301      	movs	r3, #1
 80041c2:	ca06      	ldmia	r2, {r1, r2}
 80041c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80041c6:	f7fe fbdd 	bl	8002984 <ssd1306_WriteString>
			 			 						snprintf(str,20, "v=%0.2fV",vbat);
 80041ca:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <statemachine+0x1178>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc f9ba 	bl	8000548 <__aeabi_f2d>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	e9cd 2300 	strd	r2, r3, [sp]
 80041dc:	4a27      	ldr	r2, [pc, #156]	; (800427c <statemachine+0x117c>)
 80041de:	2114      	movs	r1, #20
 80041e0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80041e2:	f010 fe9b 	bl	8014f1c <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 80041e6:	212a      	movs	r1, #42	; 0x2a
 80041e8:	2020      	movs	r0, #32
 80041ea:	f7fe fbf1 	bl	80029d0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80041ee:	4a1b      	ldr	r2, [pc, #108]	; (800425c <statemachine+0x115c>)
 80041f0:	2301      	movs	r3, #1
 80041f2:	ca06      	ldmia	r2, {r1, r2}
 80041f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80041f6:	f7fe fbc5 	bl	8002984 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 80041fa:	2132      	movs	r1, #50	; 0x32
 80041fc:	2020      	movs	r0, #32
 80041fe:	f7fe fbe7 	bl	80029d0 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 8004202:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <statemachine+0x1180>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc f99e 	bl	8000548 <__aeabi_f2d>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	e9cd 2300 	strd	r2, r3, [sp]
 8004214:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <statemachine+0x1184>)
 8004216:	210f      	movs	r1, #15
 8004218:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800421a:	f010 fe7f 	bl	8014f1c <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 800421e:	4a0f      	ldr	r2, [pc, #60]	; (800425c <statemachine+0x115c>)
 8004220:	2301      	movs	r3, #1
 8004222:	ca06      	ldmia	r2, {r1, r2}
 8004224:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004226:	f7fe fbad 	bl	8002984 <ssd1306_WriteString>
			 			 						free(str);
 800422a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800422c:	f00e ff84 	bl	8013138 <free>
 8004230:	e06c      	b.n	800430c <statemachine+0x120c>
 8004232:	bf00      	nop
 8004234:	f3af 8000 	nop.w
 8004238:	54442d18 	.word	0x54442d18
 800423c:	400921fb 	.word	0x400921fb
 8004240:	40180000 	.word	0x40180000
 8004244:	40240000 	.word	0x40240000
 8004248:	40500000 	.word	0x40500000
 800424c:	40480000 	.word	0x40480000
 8004250:	40280000 	.word	0x40280000
 8004254:	200006f4 	.word	0x200006f4
 8004258:	200006f9 	.word	0x200006f9
 800425c:	20000008 	.word	0x20000008
 8004260:	08018f64 	.word	0x08018f64
 8004264:	200006f0 	.word	0x200006f0
 8004268:	200006f8 	.word	0x200006f8
 800426c:	200004ac 	.word	0x200004ac
 8004270:	200006b0 	.word	0x200006b0
 8004274:	0801903c 	.word	0x0801903c
 8004278:	20000730 	.word	0x20000730
 800427c:	08019048 	.word	0x08019048
 8004280:	20000728 	.word	0x20000728
 8004284:	08019054 	.word	0x08019054
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8004288:	2014      	movs	r0, #20
 800428a:	f00e ff4d 	bl	8013128 <malloc>
 800428e:	4603      	mov	r3, r0
 8004290:	64fb      	str	r3, [r7, #76]	; 0x4c
			 			 						ssd1306_SetCursor(32, 32);
 8004292:	2120      	movs	r1, #32
 8004294:	2020      	movs	r0, #32
 8004296:	f7fe fb9b 	bl	80029d0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 800429a:	4a9e      	ldr	r2, [pc, #632]	; (8004514 <statemachine+0x1414>)
 800429c:	2301      	movs	r3, #1
 800429e:	ca06      	ldmia	r2, {r1, r2}
 80042a0:	489d      	ldr	r0, [pc, #628]	; (8004518 <statemachine+0x1418>)
 80042a2:	f7fe fb6f 	bl	8002984 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 80042a6:	2129      	movs	r1, #41	; 0x29
 80042a8:	2020      	movs	r0, #32
 80042aa:	f7fe fb91 	bl	80029d0 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "vbat=%0.2fV",vbat);
 80042ae:	4b9b      	ldr	r3, [pc, #620]	; (800451c <statemachine+0x141c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f948 	bl	8000548 <__aeabi_f2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	e9cd 2300 	strd	r2, r3, [sp]
 80042c0:	4a97      	ldr	r2, [pc, #604]	; (8004520 <statemachine+0x1420>)
 80042c2:	210f      	movs	r1, #15
 80042c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80042c6:	f010 fe29 	bl	8014f1c <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80042ca:	4a92      	ldr	r2, [pc, #584]	; (8004514 <statemachine+0x1414>)
 80042cc:	2301      	movs	r3, #1
 80042ce:	ca06      	ldmia	r2, {r1, r2}
 80042d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80042d2:	f7fe fb57 	bl	8002984 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 80042d6:	2132      	movs	r1, #50	; 0x32
 80042d8:	2020      	movs	r0, #32
 80042da:	f7fe fb79 	bl	80029d0 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 80042de:	4b91      	ldr	r3, [pc, #580]	; (8004524 <statemachine+0x1424>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fc f930 	bl	8000548 <__aeabi_f2d>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	e9cd 2300 	strd	r2, r3, [sp]
 80042f0:	4a8d      	ldr	r2, [pc, #564]	; (8004528 <statemachine+0x1428>)
 80042f2:	210f      	movs	r1, #15
 80042f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80042f6:	f010 fe11 	bl	8014f1c <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80042fa:	4a86      	ldr	r2, [pc, #536]	; (8004514 <statemachine+0x1414>)
 80042fc:	2301      	movs	r3, #1
 80042fe:	ca06      	ldmia	r2, {r1, r2}
 8004300:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004302:	f7fe fb3f 	bl	8002984 <ssd1306_WriteString>
			 			 						free(str);
 8004306:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004308:	f00e ff16 	bl	8013138 <free>
			 			 					}
			  if(BTN_A>=1){
 800430c:	4b87      	ldr	r3, [pc, #540]	; (800452c <statemachine+0x142c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f340 8431 	ble.w	8004b78 <statemachine+0x1a78>
			  		state++;
 8004316:	4b86      	ldr	r3, [pc, #536]	; (8004530 <statemachine+0x1430>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	b2da      	uxtb	r2, r3
 800431e:	4b84      	ldr	r3, [pc, #528]	; (8004530 <statemachine+0x1430>)
 8004320:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8004322:	4b82      	ldr	r3, [pc, #520]	; (800452c <statemachine+0x142c>)
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004328:	4b82      	ldr	r3, [pc, #520]	; (8004534 <statemachine+0x1434>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 800432e:	f000 bc23 	b.w	8004b78 <statemachine+0x1a78>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8004332:	2000      	movs	r0, #0
 8004334:	f7fe fa0a 	bl	800274c <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8004338:	2120      	movs	r1, #32
 800433a:	2020      	movs	r0, #32
 800433c:	f7fe fb48 	bl	80029d0 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 8004340:	2014      	movs	r0, #20
 8004342:	f00e fef1 	bl	8013128 <malloc>
 8004346:	4603      	mov	r3, r0
 8004348:	653b      	str	r3, [r7, #80]	; 0x50
			  ssd1306_WriteString("chrono", Font_6x8, White);
 800434a:	4a72      	ldr	r2, [pc, #456]	; (8004514 <statemachine+0x1414>)
 800434c:	2301      	movs	r3, #1
 800434e:	ca06      	ldmia	r2, {r1, r2}
 8004350:	4879      	ldr	r0, [pc, #484]	; (8004538 <statemachine+0x1438>)
 8004352:	f7fe fb17 	bl	8002984 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8004356:	2128      	movs	r1, #40	; 0x28
 8004358:	2020      	movs	r0, #32
 800435a:	f7fe fb39 	bl	80029d0 <ssd1306_SetCursor>

			  switch(chronostate){
 800435e:	4b77      	ldr	r3, [pc, #476]	; (800453c <statemachine+0x143c>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d038      	beq.n	80043d8 <statemachine+0x12d8>
 8004366:	2b02      	cmp	r3, #2
 8004368:	dc4f      	bgt.n	800440a <statemachine+0x130a>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <statemachine+0x1274>
 800436e:	2b01      	cmp	r3, #1
 8004370:	d01d      	beq.n	80043ae <statemachine+0x12ae>
 8004372:	e04a      	b.n	800440a <statemachine+0x130a>
			  case STATE_RESET:
				  min=0;
 8004374:	4b72      	ldr	r3, [pc, #456]	; (8004540 <statemachine+0x1440>)
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
				  seconde=0;
 800437c:	4b71      	ldr	r3, [pc, #452]	; (8004544 <statemachine+0x1444>)
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8004384:	4b70      	ldr	r3, [pc, #448]	; (8004548 <statemachine+0x1448>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 800438a:	4b6a      	ldr	r3, [pc, #424]	; (8004534 <statemachine+0x1434>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	dd36      	ble.n	8004400 <statemachine+0x1300>
				  		chronostate++;
 8004392:	4b6a      	ldr	r3, [pc, #424]	; (800453c <statemachine+0x143c>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	b2da      	uxtb	r2, r3
 800439a:	4b68      	ldr	r3, [pc, #416]	; (800453c <statemachine+0x143c>)
 800439c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 800439e:	4b65      	ldr	r3, [pc, #404]	; (8004534 <statemachine+0x1434>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 80043a4:	4b69      	ldr	r3, [pc, #420]	; (800454c <statemachine+0x144c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a69      	ldr	r2, [pc, #420]	; (8004550 <statemachine+0x1450>)
 80043aa:	6013      	str	r3, [r2, #0]

				  }


				  break;
 80043ac:	e028      	b.n	8004400 <statemachine+0x1300>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 80043ae:	4b67      	ldr	r3, [pc, #412]	; (800454c <statemachine+0x144c>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b67      	ldr	r3, [pc, #412]	; (8004550 <statemachine+0x1450>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	4a63      	ldr	r2, [pc, #396]	; (8004548 <statemachine+0x1448>)
 80043ba:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 80043bc:	4b5d      	ldr	r3, [pc, #372]	; (8004534 <statemachine+0x1434>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	dd1f      	ble.n	8004404 <statemachine+0x1304>
				  		chronostate++;
 80043c4:	4b5d      	ldr	r3, [pc, #372]	; (800453c <statemachine+0x143c>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	4b5b      	ldr	r3, [pc, #364]	; (800453c <statemachine+0x143c>)
 80043ce:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 80043d0:	4b58      	ldr	r3, [pc, #352]	; (8004534 <statemachine+0x1434>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
			  }


				  break;
 80043d6:	e015      	b.n	8004404 <statemachine+0x1304>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 80043d8:	4b56      	ldr	r3, [pc, #344]	; (8004534 <statemachine+0x1434>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	dd13      	ble.n	8004408 <statemachine+0x1308>
				  			chronostate--;
 80043e0:	4b56      	ldr	r3, [pc, #344]	; (800453c <statemachine+0x143c>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	4b54      	ldr	r3, [pc, #336]	; (800453c <statemachine+0x143c>)
 80043ea:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 80043ec:	4b53      	ldr	r3, [pc, #332]	; (800453c <statemachine+0x143c>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	4b51      	ldr	r3, [pc, #324]	; (800453c <statemachine+0x143c>)
 80043f6:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 80043f8:	4b4e      	ldr	r3, [pc, #312]	; (8004534 <statemachine+0x1434>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
			 }

				  break;
 80043fe:	e003      	b.n	8004408 <statemachine+0x1308>
				  break;
 8004400:	bf00      	nop
 8004402:	e002      	b.n	800440a <statemachine+0x130a>
				  break;
 8004404:	bf00      	nop
 8004406:	e000      	b.n	800440a <statemachine+0x130a>
				  break;
 8004408:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 800440a:	4b4f      	ldr	r3, [pc, #316]	; (8004548 <statemachine+0x1448>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004554 <statemachine+0x1454>
 800441a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800441e:	ee16 0a90 	vmov	r0, s13
 8004422:	f7fc f891 	bl	8000548 <__aeabi_f2d>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	ec43 2b10 	vmov	d0, r2, r3
 800442e:	f013 fc67 	bl	8017d00 <floor>
 8004432:	ec53 2b10 	vmov	r2, r3, d0
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	f7fc fbd5 	bl	8000be8 <__aeabi_d2f>
 800443e:	4603      	mov	r3, r0
 8004440:	4a3f      	ldr	r2, [pc, #252]	; (8004540 <statemachine+0x1440>)
 8004442:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8004444:	4b40      	ldr	r3, [pc, #256]	; (8004548 <statemachine+0x1448>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	ee07 3a90 	vmov	s15, r3
 800444c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004450:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <statemachine+0x1440>)
 8004452:	edd3 7a00 	vldr	s15, [r3]
 8004456:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8004554 <statemachine+0x1454>
 800445a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800445e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004462:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004558 <statemachine+0x1458>
 8004466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800446a:	4b36      	ldr	r3, [pc, #216]	; (8004544 <statemachine+0x1444>)
 800446c:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8004470:	4b33      	ldr	r3, [pc, #204]	; (8004540 <statemachine+0x1440>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fc f867 	bl	8000548 <__aeabi_f2d>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	e9cd 2300 	strd	r2, r3, [sp]
 8004482:	4a36      	ldr	r2, [pc, #216]	; (800455c <statemachine+0x145c>)
 8004484:	210f      	movs	r1, #15
 8004486:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004488:	f010 fd48 	bl	8014f1c <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 800448c:	4a34      	ldr	r2, [pc, #208]	; (8004560 <statemachine+0x1460>)
 800448e:	2301      	movs	r3, #1
 8004490:	ca06      	ldmia	r2, {r1, r2}
 8004492:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004494:	f7fe fa76 	bl	8002984 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8004498:	2132      	movs	r1, #50	; 0x32
 800449a:	2020      	movs	r0, #32
 800449c:	f7fe fa98 	bl	80029d0 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 80044a0:	4b28      	ldr	r3, [pc, #160]	; (8004544 <statemachine+0x1444>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc f84f 	bl	8000548 <__aeabi_f2d>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	e9cd 2300 	strd	r2, r3, [sp]
 80044b2:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <statemachine+0x1464>)
 80044b4:	210f      	movs	r1, #15
 80044b6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80044b8:	f010 fd30 	bl	8014f1c <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <statemachine+0x1414>)
 80044be:	2301      	movs	r3, #1
 80044c0:	ca06      	ldmia	r2, {r1, r2}
 80044c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80044c4:	f7fe fa5e 	bl	8002984 <ssd1306_WriteString>
			  free(str);
 80044c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80044ca:	f00e fe35 	bl	8013138 <free>


			  if(BTN_A>=1){
 80044ce:	4b17      	ldr	r3, [pc, #92]	; (800452c <statemachine+0x142c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f340 8352 	ble.w	8004b7c <statemachine+0x1a7c>
			 	state++;
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <statemachine+0x1430>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	3301      	adds	r3, #1
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <statemachine+0x1430>)
 80044e2:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 80044e4:	4b11      	ldr	r3, [pc, #68]	; (800452c <statemachine+0x142c>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <statemachine+0x1434>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]


	}
			  break;
 80044f0:	e344      	b.n	8004b7c <statemachine+0x1a7c>

			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 80044f2:	2000      	movs	r0, #0
 80044f4:	f7fe f92a 	bl	800274c <ssd1306_Fill>
				  switch(balisestate){
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <statemachine+0x1468>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	f000 80dc 	beq.w	80046ba <statemachine+0x15ba>
 8004502:	2b02      	cmp	r3, #2
 8004504:	f300 8106 	bgt.w	8004714 <statemachine+0x1614>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d02f      	beq.n	800456c <statemachine+0x146c>
 800450c:	2b01      	cmp	r3, #1
 800450e:	d053      	beq.n	80045b8 <statemachine+0x14b8>
 8004510:	e100      	b.n	8004714 <statemachine+0x1614>
 8004512:	bf00      	nop
 8004514:	20000008 	.word	0x20000008
 8004518:	08019060 	.word	0x08019060
 800451c:	20000730 	.word	0x20000730
 8004520:	08019068 	.word	0x08019068
 8004524:	20000728 	.word	0x20000728
 8004528:	08019054 	.word	0x08019054
 800452c:	200006f0 	.word	0x200006f0
 8004530:	200006f8 	.word	0x200006f8
 8004534:	200006f4 	.word	0x200006f4
 8004538:	08019074 	.word	0x08019074
 800453c:	200006fc 	.word	0x200006fc
 8004540:	20000e3c 	.word	0x20000e3c
 8004544:	20000e38 	.word	0x20000e38
 8004548:	20000e44 	.word	0x20000e44
 800454c:	2000104c 	.word	0x2000104c
 8004550:	20000e40 	.word	0x20000e40
 8004554:	476a6000 	.word	0x476a6000
 8004558:	447a0000 	.word	0x447a0000
 800455c:	0801907c 	.word	0x0801907c
 8004560:	20000010 	.word	0x20000010
 8004564:	08019088 	.word	0x08019088
 8004568:	20000e33 	.word	0x20000e33
				  case BALISESTATE1:
					  ssd1306_SetCursor(32,32);
 800456c:	2120      	movs	r1, #32
 800456e:	2020      	movs	r0, #32
 8004570:	f7fe fa2e 	bl	80029d0 <ssd1306_SetCursor>
					  ssd1306_WriteString("balise",Font_6x8,White);
 8004574:	4aa4      	ldr	r2, [pc, #656]	; (8004808 <statemachine+0x1708>)
 8004576:	2301      	movs	r3, #1
 8004578:	ca06      	ldmia	r2, {r1, r2}
 800457a:	48a4      	ldr	r0, [pc, #656]	; (800480c <statemachine+0x170c>)
 800457c:	f7fe fa02 	bl	8002984 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 8004580:	2128      	movs	r1, #40	; 0x28
 8004582:	2020      	movs	r0, #32
 8004584:	f7fe fa24 	bl	80029d0 <ssd1306_SetCursor>
					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8004588:	4a9f      	ldr	r2, [pc, #636]	; (8004808 <statemachine+0x1708>)
 800458a:	2301      	movs	r3, #1
 800458c:	ca06      	ldmia	r2, {r1, r2}
 800458e:	48a0      	ldr	r0, [pc, #640]	; (8004810 <statemachine+0x1710>)
 8004590:	f7fe f9f8 	bl	8002984 <ssd1306_WriteString>

					  if(BTN_B>=1){
 8004594:	4b9f      	ldr	r3, [pc, #636]	; (8004814 <statemachine+0x1714>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	f340 80b8 	ble.w	800470e <statemachine+0x160e>
						  balisestate++;
 800459e:	4b9e      	ldr	r3, [pc, #632]	; (8004818 <statemachine+0x1718>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4b9c      	ldr	r3, [pc, #624]	; (8004818 <statemachine+0x1718>)
 80045a8:	701a      	strb	r2, [r3, #0]
						  BTN_B=0;
 80045aa:	4b9a      	ldr	r3, [pc, #616]	; (8004814 <statemachine+0x1714>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
						  BTN_A=0;
 80045b0:	4b9a      	ldr	r3, [pc, #616]	; (800481c <statemachine+0x171c>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
					  }



					  break;
 80045b6:	e0aa      	b.n	800470e <statemachine+0x160e>
				  case BALISESTATE2:

					  nmea_parse(&myData, DataBuffer);
 80045b8:	4999      	ldr	r1, [pc, #612]	; (8004820 <statemachine+0x1720>)
 80045ba:	489a      	ldr	r0, [pc, #616]	; (8004824 <statemachine+0x1724>)
 80045bc:	f7fd fd36 	bl	800202c <nmea_parse>
					  if(pagenumber+1<MAX_WRITE_PAGE){
 80045c0:	4b99      	ldr	r3, [pc, #612]	; (8004828 <statemachine+0x1728>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f246 32fd 	movw	r2, #25597	; 0x63fd
 80045c8:	4293      	cmp	r3, r2
 80045ca:	dc72      	bgt.n	80046b2 <statemachine+0x15b2>

					  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,0,0.0);
 80045cc:	4b97      	ldr	r3, [pc, #604]	; (800482c <statemachine+0x172c>)
 80045ce:	edd3 7a00 	vldr	s15, [r3]
 80045d2:	4b97      	ldr	r3, [pc, #604]	; (8004830 <statemachine+0x1730>)
 80045d4:	ed93 7a00 	vldr	s14, [r3]
 80045d8:	ed9f 1a96 	vldr	s2, [pc, #600]	; 8004834 <statemachine+0x1734>
 80045dc:	2200      	movs	r2, #0
 80045de:	4991      	ldr	r1, [pc, #580]	; (8004824 <statemachine+0x1724>)
 80045e0:	eef0 0a47 	vmov.f32	s1, s14
 80045e4:	eeb0 0a67 	vmov.f32	s0, s15
 80045e8:	4893      	ldr	r0, [pc, #588]	; (8004838 <statemachine+0x1738>)
 80045ea:	f7fd fe6d 	bl	80022c8 <csvframe>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4a92      	ldr	r2, [pc, #584]	; (800483c <statemachine+0x173c>)
 80045f2:	6013      	str	r3, [r2, #0]
					  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 80045f4:	4b91      	ldr	r3, [pc, #580]	; (800483c <statemachine+0x173c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4619      	mov	r1, r3
 80045fa:	488f      	ldr	r0, [pc, #572]	; (8004838 <statemachine+0x1738>)
 80045fc:	f7fd ff76 	bl	80024ec <writebuffertoflash>
					  ssd1306_SetCursor(32,32);
 8004600:	2120      	movs	r1, #32
 8004602:	2020      	movs	r0, #32
 8004604:	f7fe f9e4 	bl	80029d0 <ssd1306_SetCursor>
					  snprintf((uint8_t *)str1,50,"p=%d",pagenumber);
 8004608:	4b87      	ldr	r3, [pc, #540]	; (8004828 <statemachine+0x1728>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a8c      	ldr	r2, [pc, #560]	; (8004840 <statemachine+0x1740>)
 800460e:	2132      	movs	r1, #50	; 0x32
 8004610:	488c      	ldr	r0, [pc, #560]	; (8004844 <statemachine+0x1744>)
 8004612:	f010 fc83 	bl	8014f1c <sniprintf>
					  ssd1306_WriteString((uint8_t*)str1,Font_7x10,White);
 8004616:	4a8c      	ldr	r2, [pc, #560]	; (8004848 <statemachine+0x1748>)
 8004618:	2301      	movs	r3, #1
 800461a:	ca06      	ldmia	r2, {r1, r2}
 800461c:	4889      	ldr	r0, [pc, #548]	; (8004844 <statemachine+0x1744>)
 800461e:	f7fe f9b1 	bl	8002984 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,42);
 8004622:	212a      	movs	r1, #42	; 0x2a
 8004624:	2020      	movs	r0, #32
 8004626:	f7fe f9d3 	bl	80029d0 <ssd1306_SetCursor>
					  snprintf((uint8_t *)str1,50, "sat=%d",myData.satelliteCount);
 800462a:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <statemachine+0x1724>)
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	4a87      	ldr	r2, [pc, #540]	; (800484c <statemachine+0x174c>)
 8004630:	2132      	movs	r1, #50	; 0x32
 8004632:	4884      	ldr	r0, [pc, #528]	; (8004844 <statemachine+0x1744>)
 8004634:	f010 fc72 	bl	8014f1c <sniprintf>
					  ssd1306_WriteString((uint8_t*)str1,Font_6x8,White);
 8004638:	4a73      	ldr	r2, [pc, #460]	; (8004808 <statemachine+0x1708>)
 800463a:	2301      	movs	r3, #1
 800463c:	ca06      	ldmia	r2, {r1, r2}
 800463e:	4881      	ldr	r0, [pc, #516]	; (8004844 <statemachine+0x1744>)
 8004640:	f7fe f9a0 	bl	8002984 <ssd1306_WriteString>
					  batterygauge(vbat,34, 50,1);
 8004644:	4b7a      	ldr	r3, [pc, #488]	; (8004830 <statemachine+0x1730>)
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	2201      	movs	r2, #1
 800464c:	2132      	movs	r1, #50	; 0x32
 800464e:	2022      	movs	r0, #34	; 0x22
 8004650:	eeb0 0a67 	vmov.f32	s0, s15
 8004654:	f7fe fbd8 	bl	8002e08 <batterygauge>
					  ssd1306_SetCursor(60,50);
 8004658:	2132      	movs	r1, #50	; 0x32
 800465a:	203c      	movs	r0, #60	; 0x3c
 800465c:	f7fe f9b8 	bl	80029d0 <ssd1306_SetCursor>
					  snprintf((uint8_t *)str1,50, "%0.2fV",vbat);
 8004660:	4b73      	ldr	r3, [pc, #460]	; (8004830 <statemachine+0x1730>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7fb ff6f 	bl	8000548 <__aeabi_f2d>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	e9cd 2300 	strd	r2, r3, [sp]
 8004672:	4a77      	ldr	r2, [pc, #476]	; (8004850 <statemachine+0x1750>)
 8004674:	2132      	movs	r1, #50	; 0x32
 8004676:	4873      	ldr	r0, [pc, #460]	; (8004844 <statemachine+0x1744>)
 8004678:	f010 fc50 	bl	8014f1c <sniprintf>
					  ssd1306_WriteString((uint8_t*)str1,Font_6x8,White);
 800467c:	4a62      	ldr	r2, [pc, #392]	; (8004808 <statemachine+0x1708>)
 800467e:	2301      	movs	r3, #1
 8004680:	ca06      	ldmia	r2, {r1, r2}
 8004682:	4870      	ldr	r0, [pc, #448]	; (8004844 <statemachine+0x1744>)
 8004684:	f7fe f97e 	bl	8002984 <ssd1306_WriteString>
					  HAL_Delay(1000);
 8004688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800468c:	f000 fe8e 	bl	80053ac <HAL_Delay>
					  if(BTN_B>=1){
 8004690:	4b60      	ldr	r3, [pc, #384]	; (8004814 <statemachine+0x1714>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	dd3c      	ble.n	8004712 <statemachine+0x1612>
					  						  balisestate--;
 8004698:	4b5f      	ldr	r3, [pc, #380]	; (8004818 <statemachine+0x1718>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	3b01      	subs	r3, #1
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	4b5d      	ldr	r3, [pc, #372]	; (8004818 <statemachine+0x1718>)
 80046a2:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 80046a4:	4b5b      	ldr	r3, [pc, #364]	; (8004814 <statemachine+0x1714>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 80046aa:	4b5c      	ldr	r3, [pc, #368]	; (800481c <statemachine+0x171c>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
					 						  balisestate=2;
					 					  }



					  break;
 80046b0:	e02f      	b.n	8004712 <statemachine+0x1612>
					 						  balisestate=2;
 80046b2:	4b59      	ldr	r3, [pc, #356]	; (8004818 <statemachine+0x1718>)
 80046b4:	2202      	movs	r2, #2
 80046b6:	701a      	strb	r2, [r3, #0]
					  break;
 80046b8:	e02b      	b.n	8004712 <statemachine+0x1612>

				  case BALISESTATE3:
					  ssd1306_SetCursor(32,32);
 80046ba:	2120      	movs	r1, #32
 80046bc:	2020      	movs	r0, #32
 80046be:	f7fe f987 	bl	80029d0 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 80046c2:	4a51      	ldr	r2, [pc, #324]	; (8004808 <statemachine+0x1708>)
 80046c4:	2301      	movs	r3, #1
 80046c6:	ca06      	ldmia	r2, {r1, r2}
 80046c8:	4862      	ldr	r0, [pc, #392]	; (8004854 <statemachine+0x1754>)
 80046ca:	f7fe f95b 	bl	8002984 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 80046ce:	2128      	movs	r1, #40	; 0x28
 80046d0:	2020      	movs	r0, #32
 80046d2:	f7fe f97d 	bl	80029d0 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 80046d6:	4a4c      	ldr	r2, [pc, #304]	; (8004808 <statemachine+0x1708>)
 80046d8:	2301      	movs	r3, #1
 80046da:	ca06      	ldmia	r2, {r1, r2}
 80046dc:	485e      	ldr	r0, [pc, #376]	; (8004858 <statemachine+0x1758>)
 80046de:	f7fe f951 	bl	8002984 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 80046e2:	2130      	movs	r1, #48	; 0x30
 80046e4:	2020      	movs	r0, #32
 80046e6:	f7fe f973 	bl	80029d0 <ssd1306_SetCursor>
					  snprintf((uint8_t *)str1,50,"%d,%d",pageoffset,pagenumber);
 80046ea:	4b5c      	ldr	r3, [pc, #368]	; (800485c <statemachine+0x175c>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b4e      	ldr	r3, [pc, #312]	; (8004828 <statemachine+0x1728>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	4a5a      	ldr	r2, [pc, #360]	; (8004860 <statemachine+0x1760>)
 80046f8:	2132      	movs	r1, #50	; 0x32
 80046fa:	4852      	ldr	r0, [pc, #328]	; (8004844 <statemachine+0x1744>)
 80046fc:	f010 fc0e 	bl	8014f1c <sniprintf>
					  ssd1306_WriteString((uint8_t*)str1,Font_6x8,White);
 8004700:	4a41      	ldr	r2, [pc, #260]	; (8004808 <statemachine+0x1708>)
 8004702:	2301      	movs	r3, #1
 8004704:	ca06      	ldmia	r2, {r1, r2}
 8004706:	484f      	ldr	r0, [pc, #316]	; (8004844 <statemachine+0x1744>)
 8004708:	f7fe f93c 	bl	8002984 <ssd1306_WriteString>
					  break;
 800470c:	e002      	b.n	8004714 <statemachine+0x1614>
					  break;
 800470e:	bf00      	nop
 8004710:	e000      	b.n	8004714 <statemachine+0x1614>
					  break;
 8004712:	bf00      	nop



				  }

				  if(BTN_A>=1){
 8004714:	4b41      	ldr	r3, [pc, #260]	; (800481c <statemachine+0x171c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f340 8231 	ble.w	8004b80 <statemachine+0x1a80>
				  			 	state++;
 800471e:	4b51      	ldr	r3, [pc, #324]	; (8004864 <statemachine+0x1764>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	3301      	adds	r3, #1
 8004724:	b2da      	uxtb	r2, r3
 8004726:	4b4f      	ldr	r3, [pc, #316]	; (8004864 <statemachine+0x1764>)
 8004728:	701a      	strb	r2, [r3, #0]
				  			 	BTN_A=0;
 800472a:	4b3c      	ldr	r3, [pc, #240]	; (800481c <statemachine+0x171c>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
				  			 	BTN_B=0;
 8004730:	4b38      	ldr	r3, [pc, #224]	; (8004814 <statemachine+0x1714>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]





				  break;
 8004736:	e223      	b.n	8004b80 <statemachine+0x1a80>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 8004738:	2000      	movs	r0, #0
 800473a:	f7fe f807 	bl	800274c <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 800473e:	2120      	movs	r1, #32
 8004740:	2020      	movs	r0, #32
 8004742:	f7fe f945 	bl	80029d0 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8004746:	4a30      	ldr	r2, [pc, #192]	; (8004808 <statemachine+0x1708>)
 8004748:	2301      	movs	r3, #1
 800474a:	ca06      	ldmia	r2, {r1, r2}
 800474c:	4846      	ldr	r0, [pc, #280]	; (8004868 <statemachine+0x1768>)
 800474e:	f7fe f919 	bl	8002984 <ssd1306_WriteString>
				  switch(usbstate){
 8004752:	4b46      	ldr	r3, [pc, #280]	; (800486c <statemachine+0x176c>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b02      	cmp	r3, #2
 8004758:	f000 80fe 	beq.w	8004958 <statemachine+0x1858>
 800475c:	2b02      	cmp	r3, #2
 800475e:	f300 8211 	bgt.w	8004b84 <statemachine+0x1a84>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <statemachine+0x166e>
 8004766:	2b01      	cmp	r3, #1
 8004768:	f000 8084 	beq.w	8004874 <statemachine+0x1774>





				  break;
 800476c:	e20a      	b.n	8004b84 <statemachine+0x1a84>
				 					  ssd1306_SetCursor(32,40);
 800476e:	2128      	movs	r1, #40	; 0x28
 8004770:	2020      	movs	r0, #32
 8004772:	f7fe f92d 	bl	80029d0 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8004776:	4a24      	ldr	r2, [pc, #144]	; (8004808 <statemachine+0x1708>)
 8004778:	2301      	movs	r3, #1
 800477a:	ca06      	ldmia	r2, {r1, r2}
 800477c:	4824      	ldr	r0, [pc, #144]	; (8004810 <statemachine+0x1710>)
 800477e:	f7fe f901 	bl	8002984 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8004782:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <statemachine+0x1770>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8004788:	4b22      	ldr	r3, [pc, #136]	; (8004814 <statemachine+0x1714>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	dd0b      	ble.n	80047a8 <statemachine+0x16a8>
				 						  usbstate++;
 8004790:	4b36      	ldr	r3, [pc, #216]	; (800486c <statemachine+0x176c>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	3301      	adds	r3, #1
 8004796:	b2da      	uxtb	r2, r3
 8004798:	4b34      	ldr	r3, [pc, #208]	; (800486c <statemachine+0x176c>)
 800479a:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 800479c:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <statemachine+0x1714>)
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 80047a2:	4b1e      	ldr	r3, [pc, #120]	; (800481c <statemachine+0x171c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80047a8:	4b1c      	ldr	r3, [pc, #112]	; (800481c <statemachine+0x171c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f340 81af 	ble.w	8004b10 <statemachine+0x1a10>
				 									  			 	state--;
 80047b2:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <statemachine+0x1764>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <statemachine+0x1764>)
 80047bc:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80047be:	4b29      	ldr	r3, [pc, #164]	; (8004864 <statemachine+0x1764>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4b27      	ldr	r3, [pc, #156]	; (8004864 <statemachine+0x1764>)
 80047c8:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80047ca:	4b26      	ldr	r3, [pc, #152]	; (8004864 <statemachine+0x1764>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4b24      	ldr	r3, [pc, #144]	; (8004864 <statemachine+0x1764>)
 80047d4:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80047d6:	4b23      	ldr	r3, [pc, #140]	; (8004864 <statemachine+0x1764>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	3b01      	subs	r3, #1
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4b21      	ldr	r3, [pc, #132]	; (8004864 <statemachine+0x1764>)
 80047e0:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <statemachine+0x1764>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <statemachine+0x1764>)
 80047ec:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 80047ee:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <statemachine+0x1764>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <statemachine+0x1764>)
 80047f8:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 80047fa:	4b08      	ldr	r3, [pc, #32]	; (800481c <statemachine+0x171c>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <statemachine+0x1714>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
				 					  break;
 8004806:	e183      	b.n	8004b10 <statemachine+0x1a10>
 8004808:	20000008 	.word	0x20000008
 800480c:	08019094 	.word	0x08019094
 8004810:	0801909c 	.word	0x0801909c
 8004814:	200006f4 	.word	0x200006f4
 8004818:	20000e33 	.word	0x20000e33
 800481c:	200006f0 	.word	0x200006f0
 8004820:	200004ac 	.word	0x200004ac
 8004824:	200006b0 	.word	0x200006b0
 8004828:	20000938 	.word	0x20000938
 800482c:	20000728 	.word	0x20000728
 8004830:	20000730 	.word	0x20000730
 8004834:	00000000 	.word	0x00000000
 8004838:	20000734 	.word	0x20000734
 800483c:	20000e90 	.word	0x20000e90
 8004840:	080190a8 	.word	0x080190a8
 8004844:	20000e5c 	.word	0x20000e5c
 8004848:	20000010 	.word	0x20000010
 800484c:	080190b0 	.word	0x080190b0
 8004850:	080190b8 	.word	0x080190b8
 8004854:	080190c0 	.word	0x080190c0
 8004858:	080190c8 	.word	0x080190c8
 800485c:	20000934 	.word	0x20000934
 8004860:	080190d0 	.word	0x080190d0
 8004864:	200006f8 	.word	0x200006f8
 8004868:	080190d8 	.word	0x080190d8
 800486c:	20000e32 	.word	0x20000e32
 8004870:	20000e9c 	.word	0x20000e9c
				 					 ssd1306_SetCursor(32,40);
 8004874:	2128      	movs	r1, #40	; 0x28
 8004876:	2020      	movs	r0, #32
 8004878:	f7fe f8aa 	bl	80029d0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 800487c:	4aa9      	ldr	r2, [pc, #676]	; (8004b24 <statemachine+0x1a24>)
 800487e:	2301      	movs	r3, #1
 8004880:	ca06      	ldmia	r2, {r1, r2}
 8004882:	48a9      	ldr	r0, [pc, #676]	; (8004b28 <statemachine+0x1a28>)
 8004884:	f7fe f87e 	bl	8002984 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8004888:	2130      	movs	r1, #48	; 0x30
 800488a:	2020      	movs	r0, #32
 800488c:	f7fe f8a0 	bl	80029d0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8004890:	4aa4      	ldr	r2, [pc, #656]	; (8004b24 <statemachine+0x1a24>)
 8004892:	2301      	movs	r3, #1
 8004894:	ca06      	ldmia	r2, {r1, r2}
 8004896:	48a5      	ldr	r0, [pc, #660]	; (8004b2c <statemachine+0x1a2c>)
 8004898:	f7fe f874 	bl	8002984 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 800489c:	4ba4      	ldr	r3, [pc, #656]	; (8004b30 <statemachine+0x1a30>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d120      	bne.n	80048e6 <statemachine+0x17e6>
				 						snprintf((uint8_t *)str,50,"t=%0.2f",(float)erasetime/1000);
 80048a4:	4ba3      	ldr	r3, [pc, #652]	; (8004b34 <statemachine+0x1a34>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048b0:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8004b38 <statemachine+0x1a38>
 80048b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048b8:	ee16 0a90 	vmov	r0, s13
 80048bc:	f7fb fe44 	bl	8000548 <__aeabi_f2d>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	e9cd 2300 	strd	r2, r3, [sp]
 80048c8:	4a9c      	ldr	r2, [pc, #624]	; (8004b3c <statemachine+0x1a3c>)
 80048ca:	2132      	movs	r1, #50	; 0x32
 80048cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80048ce:	f010 fb25 	bl	8014f1c <sniprintf>
				 						ssd1306_SetCursor(32,56);
 80048d2:	2138      	movs	r1, #56	; 0x38
 80048d4:	2020      	movs	r0, #32
 80048d6:	f7fe f87b 	bl	80029d0 <ssd1306_SetCursor>
				 						ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 80048da:	4a92      	ldr	r2, [pc, #584]	; (8004b24 <statemachine+0x1a24>)
 80048dc:	2301      	movs	r3, #1
 80048de:	ca06      	ldmia	r2, {r1, r2}
 80048e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80048e2:	f7fe f84f 	bl	8002984 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 80048e6:	4b96      	ldr	r3, [pc, #600]	; (8004b40 <statemachine+0x1a40>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	dd22      	ble.n	8004934 <statemachine+0x1834>
				 						erasetime=HAL_GetTick();
 80048ee:	f000 fd51 	bl	8005394 <HAL_GetTick>
 80048f2:	4603      	mov	r3, r0
 80048f4:	461a      	mov	r2, r3
 80048f6:	4b8f      	ldr	r3, [pc, #572]	; (8004b34 <statemachine+0x1a34>)
 80048f8:	601a      	str	r2, [r3, #0]
				 						SPIF_EraseChip(&hspif1);
 80048fa:	4892      	ldr	r0, [pc, #584]	; (8004b44 <statemachine+0x1a44>)
 80048fc:	f00d fd61 	bl	80123c2 <SPIF_EraseChip>
				 						erasetime=HAL_GetTick()-erasetime;
 8004900:	f000 fd48 	bl	8005394 <HAL_GetTick>
 8004904:	4603      	mov	r3, r0
 8004906:	4a8b      	ldr	r2, [pc, #556]	; (8004b34 <statemachine+0x1a34>)
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	461a      	mov	r2, r3
 800490e:	4b89      	ldr	r3, [pc, #548]	; (8004b34 <statemachine+0x1a34>)
 8004910:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8004912:	4b87      	ldr	r3, [pc, #540]	; (8004b30 <statemachine+0x1a30>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8004918:	4b8b      	ldr	r3, [pc, #556]	; (8004b48 <statemachine+0x1a48>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 800491e:	4b8b      	ldr	r3, [pc, #556]	; (8004b4c <statemachine+0x1a4c>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8004924:	f7fd fd36 	bl	8002394 <storeindex>
				 						BTN_A=0;
 8004928:	4b85      	ldr	r3, [pc, #532]	; (8004b40 <statemachine+0x1a40>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 800492e:	4b88      	ldr	r3, [pc, #544]	; (8004b50 <statemachine+0x1a50>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8004934:	4b86      	ldr	r3, [pc, #536]	; (8004b50 <statemachine+0x1a50>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f340 80eb 	ble.w	8004b14 <statemachine+0x1a14>
					 						usbstate++;
 800493e:	4b85      	ldr	r3, [pc, #532]	; (8004b54 <statemachine+0x1a54>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4b83      	ldr	r3, [pc, #524]	; (8004b54 <statemachine+0x1a54>)
 8004948:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 800494a:	4b81      	ldr	r3, [pc, #516]	; (8004b50 <statemachine+0x1a50>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8004950:	4b7b      	ldr	r3, [pc, #492]	; (8004b40 <statemachine+0x1a40>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
				 			  break;
 8004956:	e0dd      	b.n	8004b14 <statemachine+0x1a14>
				 					ssd1306_Fill(Black);
 8004958:	2000      	movs	r0, #0
 800495a:	f7fd fef7 	bl	800274c <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 800495e:	2128      	movs	r1, #40	; 0x28
 8004960:	2020      	movs	r0, #32
 8004962:	f7fe f835 	bl	80029d0 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8004966:	4a6f      	ldr	r2, [pc, #444]	; (8004b24 <statemachine+0x1a24>)
 8004968:	2301      	movs	r3, #1
 800496a:	ca06      	ldmia	r2, {r1, r2}
 800496c:	487a      	ldr	r0, [pc, #488]	; (8004b58 <statemachine+0x1a58>)
 800496e:	f7fe f809 	bl	8002984 <ssd1306_WriteString>
				 					if(pagenumber>0){
 8004972:	4b76      	ldr	r3, [pc, #472]	; (8004b4c <statemachine+0x1a4c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	dd6e      	ble.n	8004a58 <statemachine+0x1958>
				 					int i=0;
 800497a:	2300      	movs	r3, #0
 800497c:	657b      	str	r3, [r7, #84]	; 0x54
				 					if(usbtransmiten==0){
 800497e:	4b77      	ldr	r3, [pc, #476]	; (8004b5c <statemachine+0x1a5c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d163      	bne.n	8004a4e <statemachine+0x194e>
				 						while(i<pagenumber){
 8004986:	e046      	b.n	8004a16 <statemachine+0x1916>
				 							ssd1306_Fill(Black);
 8004988:	2000      	movs	r0, #0
 800498a:	f7fd fedf 	bl	800274c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 800498e:	2128      	movs	r1, #40	; 0x28
 8004990:	2020      	movs	r0, #32
 8004992:	f7fe f81d 	bl	80029d0 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8004996:	4a63      	ldr	r2, [pc, #396]	; (8004b24 <statemachine+0x1a24>)
 8004998:	2301      	movs	r3, #1
 800499a:	ca06      	ldmia	r2, {r1, r2}
 800499c:	486e      	ldr	r0, [pc, #440]	; (8004b58 <statemachine+0x1a58>)
 800499e:	f7fd fff1 	bl	8002984 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 80049a2:	2130      	movs	r1, #48	; 0x30
 80049a4:	2020      	movs	r0, #32
 80049a6:	f7fe f813 	bl	80029d0 <ssd1306_SetCursor>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t *)flashread, 256, 0);
 80049aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049ac:	2300      	movs	r3, #0
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049b4:	4a6a      	ldr	r2, [pc, #424]	; (8004b60 <statemachine+0x1a60>)
 80049b6:	4863      	ldr	r0, [pc, #396]	; (8004b44 <statemachine+0x1a44>)
 80049b8:	f00d fdee 	bl	8012598 <SPIF_ReadPage>
				 							CDC_Transmit_FS((uint8_t * )flashread,256);
 80049bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049c0:	4867      	ldr	r0, [pc, #412]	; (8004b60 <statemachine+0x1a60>)
 80049c2:	f00d fed3 	bl	801276c <CDC_Transmit_FS>
				 							snprintf((uint8_t *)str,50,"w=%0.2f",(float) (i)/pagenumber);
 80049c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049d0:	4b5e      	ldr	r3, [pc, #376]	; (8004b4c <statemachine+0x1a4c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80049e0:	ee16 0a90 	vmov	r0, s13
 80049e4:	f7fb fdb0 	bl	8000548 <__aeabi_f2d>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	e9cd 2300 	strd	r2, r3, [sp]
 80049f0:	4a5c      	ldr	r2, [pc, #368]	; (8004b64 <statemachine+0x1a64>)
 80049f2:	2132      	movs	r1, #50	; 0x32
 80049f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80049f6:	f010 fa91 	bl	8014f1c <sniprintf>
				 							ssd1306_WriteString((uint8_t*)str,Font_6x8,White);
 80049fa:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <statemachine+0x1a24>)
 80049fc:	2301      	movs	r3, #1
 80049fe:	ca06      	ldmia	r2, {r1, r2}
 8004a00:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004a02:	f7fd ffbf 	bl	8002984 <ssd1306_WriteString>
				 							ssd1306_UpdateScreen();
 8004a06:	f7fd feb9 	bl	800277c <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8004a0a:	207d      	movs	r0, #125	; 0x7d
 8004a0c:	f000 fcce 	bl	80053ac <HAL_Delay>
				 							i++;
 8004a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a12:	3301      	adds	r3, #1
 8004a14:	657b      	str	r3, [r7, #84]	; 0x54
				 						while(i<pagenumber){
 8004a16:	4b4d      	ldr	r3, [pc, #308]	; (8004b4c <statemachine+0x1a4c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	dbb3      	blt.n	8004988 <statemachine+0x1888>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t *)flashread, pageoffset, 0);
 8004a20:	4b4a      	ldr	r3, [pc, #296]	; (8004b4c <statemachine+0x1a4c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4619      	mov	r1, r3
 8004a26:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <statemachine+0x1a48>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	4a4b      	ldr	r2, [pc, #300]	; (8004b60 <statemachine+0x1a60>)
 8004a34:	4843      	ldr	r0, [pc, #268]	; (8004b44 <statemachine+0x1a44>)
 8004a36:	f00d fdaf 	bl	8012598 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t * )flashread,pageoffset);
 8004a3a:	4b43      	ldr	r3, [pc, #268]	; (8004b48 <statemachine+0x1a48>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4847      	ldr	r0, [pc, #284]	; (8004b60 <statemachine+0x1a60>)
 8004a42:	f00d fe93 	bl	801276c <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8004a46:	4b45      	ldr	r3, [pc, #276]	; (8004b5c <statemachine+0x1a5c>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	e01b      	b.n	8004a86 <statemachine+0x1986>
				 						usbpercent=1;
 8004a4e:	4b46      	ldr	r3, [pc, #280]	; (8004b68 <statemachine+0x1a68>)
 8004a50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e016      	b.n	8004a86 <statemachine+0x1986>
				 							ssd1306_Fill(Black);
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f7fd fe77 	bl	800274c <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 8004a5e:	2128      	movs	r1, #40	; 0x28
 8004a60:	2020      	movs	r0, #32
 8004a62:	f7fd ffb5 	bl	80029d0 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8004a66:	4a2f      	ldr	r2, [pc, #188]	; (8004b24 <statemachine+0x1a24>)
 8004a68:	2301      	movs	r3, #1
 8004a6a:	ca06      	ldmia	r2, {r1, r2}
 8004a6c:	483a      	ldr	r0, [pc, #232]	; (8004b58 <statemachine+0x1a58>)
 8004a6e:	f7fd ff89 	bl	8002984 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 8004a72:	2130      	movs	r1, #48	; 0x30
 8004a74:	2020      	movs	r0, #32
 8004a76:	f7fd ffab 	bl	80029d0 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <statemachine+0x1a24>)
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	ca06      	ldmia	r2, {r1, r2}
 8004a80:	483a      	ldr	r0, [pc, #232]	; (8004b6c <statemachine+0x1a6c>)
 8004a82:	f7fd ff7f 	bl	8002984 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8004a86:	4b32      	ldr	r3, [pc, #200]	; (8004b50 <statemachine+0x1a50>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	dd11      	ble.n	8004ab2 <statemachine+0x19b2>
				 									 						usbstate--;
 8004a8e:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <statemachine+0x1a54>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <statemachine+0x1a54>)
 8004a98:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8004a9a:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <statemachine+0x1a54>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <statemachine+0x1a54>)
 8004aa4:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8004aa6:	4b2a      	ldr	r3, [pc, #168]	; (8004b50 <statemachine+0x1a50>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8004aac:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <statemachine+0x1a40>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8004ab2:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <statemachine+0x1a40>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	dd2e      	ble.n	8004b18 <statemachine+0x1a18>
				 									  			 	state--;
 8004aba:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <statemachine+0x1a70>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4b2b      	ldr	r3, [pc, #172]	; (8004b70 <statemachine+0x1a70>)
 8004ac4:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004ac6:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <statemachine+0x1a70>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <statemachine+0x1a70>)
 8004ad0:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004ad2:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <statemachine+0x1a70>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <statemachine+0x1a70>)
 8004adc:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004ade:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <statemachine+0x1a70>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <statemachine+0x1a70>)
 8004ae8:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004aea:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <statemachine+0x1a70>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	4b1f      	ldr	r3, [pc, #124]	; (8004b70 <statemachine+0x1a70>)
 8004af4:	701a      	strb	r2, [r3, #0]
				 									  			 	state--;
 8004af6:	4b1e      	ldr	r3, [pc, #120]	; (8004b70 <statemachine+0x1a70>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	4b1c      	ldr	r3, [pc, #112]	; (8004b70 <statemachine+0x1a70>)
 8004b00:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8004b02:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <statemachine+0x1a40>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8004b08:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <statemachine+0x1a50>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
				 					 break;
 8004b0e:	e003      	b.n	8004b18 <statemachine+0x1a18>
				 					  break;
 8004b10:	bf00      	nop
 8004b12:	e037      	b.n	8004b84 <statemachine+0x1a84>
				 			  break;
 8004b14:	bf00      	nop
 8004b16:	e035      	b.n	8004b84 <statemachine+0x1a84>
				 					 break;
 8004b18:	bf00      	nop
				  break;
 8004b1a:	e033      	b.n	8004b84 <statemachine+0x1a84>
				  break;
 8004b1c:	bf00      	nop
 8004b1e:	e032      	b.n	8004b86 <statemachine+0x1a86>
			  break;
 8004b20:	bf00      	nop
 8004b22:	e030      	b.n	8004b86 <statemachine+0x1a86>
 8004b24:	20000008 	.word	0x20000008
 8004b28:	080190dc 	.word	0x080190dc
 8004b2c:	080190e4 	.word	0x080190e4
 8004b30:	20000e98 	.word	0x20000e98
 8004b34:	20000e94 	.word	0x20000e94
 8004b38:	447a0000 	.word	0x447a0000
 8004b3c:	080190f0 	.word	0x080190f0
 8004b40:	200006f0 	.word	0x200006f0
 8004b44:	20000700 	.word	0x20000700
 8004b48:	20000934 	.word	0x20000934
 8004b4c:	20000938 	.word	0x20000938
 8004b50:	200006f4 	.word	0x200006f4
 8004b54:	20000e32 	.word	0x20000e32
 8004b58:	080190f8 	.word	0x080190f8
 8004b5c:	20000e9c 	.word	0x20000e9c
 8004b60:	20000834 	.word	0x20000834
 8004b64:	08019100 	.word	0x08019100
 8004b68:	20000ea0 	.word	0x20000ea0
 8004b6c:	08019108 	.word	0x08019108
 8004b70:	200006f8 	.word	0x200006f8
			  break;
 8004b74:	bf00      	nop
 8004b76:	e006      	b.n	8004b86 <statemachine+0x1a86>
			  break;
 8004b78:	bf00      	nop
 8004b7a:	e004      	b.n	8004b86 <statemachine+0x1a86>
			  break;
 8004b7c:	bf00      	nop
 8004b7e:	e002      	b.n	8004b86 <statemachine+0x1a86>
				  break;
 8004b80:	bf00      	nop
 8004b82:	e000      	b.n	8004b86 <statemachine+0x1a86>
				  break;
 8004b84:	bf00      	nop

	}

return ;
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
}
 8004b8a:	376c      	adds	r7, #108	; 0x6c
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	ecbd 8b02 	vpop	{d8}
 8004b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <HAL_MspInit+0x44>)
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9e:	4a0e      	ldr	r2, [pc, #56]	; (8004bd8 <HAL_MspInit+0x44>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <HAL_MspInit+0x44>)
 8004ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	607b      	str	r3, [r7, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_MspInit+0x44>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <HAL_MspInit+0x44>)
 8004bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bbe:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <HAL_MspInit+0x44>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000

08004bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004be0:	e7fe      	b.n	8004be0 <NMI_Handler+0x4>

08004be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004be2:	b480      	push	{r7}
 8004be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004be6:	e7fe      	b.n	8004be6 <HardFault_Handler+0x4>

08004be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bec:	e7fe      	b.n	8004bec <MemManage_Handler+0x4>

08004bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bf2:	e7fe      	b.n	8004bf2 <BusFault_Handler+0x4>

08004bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bf8:	e7fe      	b.n	8004bf8 <UsageFault_Handler+0x4>

08004bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c16:	b480      	push	{r7}
 8004c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c1a:	bf00      	nop
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c28:	f000 fba0 	bl	800536c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c2c:	bf00      	nop
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004c34:	2002      	movs	r0, #2
 8004c36:	f002 fb93 	bl	8007360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <DMA1_Channel1_IRQHandler+0x10>)
 8004c46:	f002 f91e 	bl	8006e86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000378 	.word	0x20000378

08004c54 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004c58:	4802      	ldr	r0, [pc, #8]	; (8004c64 <ADC1_IRQHandler+0x10>)
 8004c5a:	f000 ff6b 	bl	8005b34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000314 	.word	0x20000314

08004c68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004c6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004c70:	f002 fb76 	bl	8007360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004c74:	bf00      	nop
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004c7c:	4802      	ldr	r0, [pc, #8]	; (8004c88 <USB_IRQHandler+0x10>)
 8004c7e:	f003 f97b 	bl	8007f78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004c82:	bf00      	nop
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20001d30 	.word	0x20001d30

08004c8c <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8004c90:	4802      	ldr	r0, [pc, #8]	; (8004c9c <DMA2_Channel7_IRQHandler+0x10>)
 8004c92:	f002 f8f8 	bl	8006e86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8004c96:	bf00      	nop
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20001004 	.word	0x20001004

08004ca0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004ca4:	4802      	ldr	r0, [pc, #8]	; (8004cb0 <LPUART1_IRQHandler+0x10>)
 8004ca6:	f007 fae7 	bl	800c278 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000ef4 	.word	0x20000ef4

08004cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return 1;
 8004cb8:	2301      	movs	r3, #1
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <_kill>:

int _kill(int pid, int sig)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004cce:	f010 faa3 	bl	8015218 <__errno>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2216      	movs	r2, #22
 8004cd6:	601a      	str	r2, [r3, #0]
  return -1;
 8004cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_exit>:

void _exit (int status)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004cec:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ffe7 	bl	8004cc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004cf6:	e7fe      	b.n	8004cf6 <_exit+0x12>

08004cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	e00a      	b.n	8004d20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d0a:	f3af 8000 	nop.w
 8004d0e:	4601      	mov	r1, r0
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	60ba      	str	r2, [r7, #8]
 8004d16:	b2ca      	uxtb	r2, r1
 8004d18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	dbf0      	blt.n	8004d0a <_read+0x12>
  }

  return len;
 8004d28:	687b      	ldr	r3, [r7, #4]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e009      	b.n	8004d58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	60ba      	str	r2, [r7, #8]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	3301      	adds	r3, #1
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	dbf1      	blt.n	8004d44 <_write+0x12>
  }
  return len;
 8004d60:	687b      	ldr	r3, [r7, #4]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <_close>:

int _close(int file)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d92:	605a      	str	r2, [r3, #4]
  return 0;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <_isatty>:

int _isatty(int file)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004daa:	2301      	movs	r3, #1
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ddc:	4a14      	ldr	r2, [pc, #80]	; (8004e30 <_sbrk+0x5c>)
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <_sbrk+0x60>)
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <_sbrk+0x64>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <_sbrk+0x64>)
 8004df2:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <_sbrk+0x68>)
 8004df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <_sbrk+0x64>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d207      	bcs.n	8004e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e04:	f010 fa08 	bl	8015218 <__errno>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	220c      	movs	r2, #12
 8004e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e12:	e009      	b.n	8004e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e14:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <_sbrk+0x64>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e1a:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <_sbrk+0x64>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4413      	add	r3, r2
 8004e22:	4a05      	ldr	r2, [pc, #20]	; (8004e38 <_sbrk+0x64>)
 8004e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20010000 	.word	0x20010000
 8004e34:	00000400 	.word	0x00000400
 8004e38:	20000ea4 	.word	0x20000ea4
 8004e3c:	20002398 	.word	0x20002398

08004e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <SystemInit+0x20>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <SystemInit+0x20>)
 8004e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	e000ed00 	.word	0xe000ed00

08004e64 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e6a:	f107 0310 	add.w	r3, r7, #16
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e78:	1d3b      	adds	r3, r7, #4
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e82:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <MX_TIM2_Init+0x98>)
 8004e84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 8004e8a:	4b1c      	ldr	r3, [pc, #112]	; (8004efc <MX_TIM2_Init+0x98>)
 8004e8c:	f240 128f 	movw	r2, #399	; 0x18f
 8004e90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e92:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <MX_TIM2_Init+0x98>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8004e98:	4b18      	ldr	r3, [pc, #96]	; (8004efc <MX_TIM2_Init+0x98>)
 8004e9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8004e9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ea0:	4b16      	ldr	r3, [pc, #88]	; (8004efc <MX_TIM2_Init+0x98>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <MX_TIM2_Init+0x98>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004eac:	4813      	ldr	r0, [pc, #76]	; (8004efc <MX_TIM2_Init+0x98>)
 8004eae:	f006 fd7b 	bl	800b9a8 <HAL_TIM_Base_Init>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004eb8:	f7fc fd9b 	bl	80019f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ec0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ec2:	f107 0310 	add.w	r3, r7, #16
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	480c      	ldr	r0, [pc, #48]	; (8004efc <MX_TIM2_Init+0x98>)
 8004eca:	f006 fe11 	bl	800baf0 <HAL_TIM_ConfigClockSource>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004ed4:	f7fc fd8d 	bl	80019f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ed8:	2320      	movs	r3, #32
 8004eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ee0:	1d3b      	adds	r3, r7, #4
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4805      	ldr	r0, [pc, #20]	; (8004efc <MX_TIM2_Init+0x98>)
 8004ee6:	f006 ffcb 	bl	800be80 <HAL_TIMEx_MasterConfigSynchronization>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004ef0:	f7fc fd7f 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ef4:	bf00      	nop
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000ea8 	.word	0x20000ea8

08004f00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f10:	d10b      	bne.n	8004f2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f12:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <HAL_TIM_Base_MspInit+0x38>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <HAL_TIM_Base_MspInit+0x38>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_TIM_Base_MspInit+0x38>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40021000 	.word	0x40021000

08004f3c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004f40:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <MX_LPUART1_UART_Init+0x50>)
 8004f42:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <MX_LPUART1_UART_Init+0x54>)
 8004f44:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8004f46:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <MX_LPUART1_UART_Init+0x50>)
 8004f48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004f4c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f4e:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <MX_LPUART1_UART_Init+0x50>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <MX_LPUART1_UART_Init+0x50>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <MX_LPUART1_UART_Init+0x50>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <MX_LPUART1_UART_Init+0x50>)
 8004f62:	220c      	movs	r2, #12
 8004f64:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <MX_LPUART1_UART_Init+0x50>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f6c:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <MX_LPUART1_UART_Init+0x50>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <MX_LPUART1_UART_Init+0x50>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004f78:	4804      	ldr	r0, [pc, #16]	; (8004f8c <MX_LPUART1_UART_Init+0x50>)
 8004f7a:	f006 ffe7 	bl	800bf4c <HAL_UART_Init>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8004f84:	f7fc fd35 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004f88:	bf00      	nop
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000ef4 	.word	0x20000ef4
 8004f90:	40008000 	.word	0x40008000

08004f94 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f98:	4b14      	ldr	r3, [pc, #80]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <MX_USART1_UART_Init+0x5c>)
 8004f9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004f9e:	4b13      	ldr	r3, [pc, #76]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fa6:	4b11      	ldr	r3, [pc, #68]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004fba:	220c      	movs	r2, #12
 8004fbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fca:	4b08      	ldr	r3, [pc, #32]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fd6:	4805      	ldr	r0, [pc, #20]	; (8004fec <MX_USART1_UART_Init+0x58>)
 8004fd8:	f006 ffb8 	bl	800bf4c <HAL_UART_Init>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004fe2:	f7fc fd06 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004fe6:	bf00      	nop
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000f7c 	.word	0x20000f7c
 8004ff0:	40013800 	.word	0x40013800

08004ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b0a0      	sub	sp, #128	; 0x80
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	609a      	str	r2, [r3, #8]
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800500c:	f107 0318 	add.w	r3, r7, #24
 8005010:	2254      	movs	r2, #84	; 0x54
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f010 f818 	bl	801504a <memset>
  if(uartHandle->Instance==LPUART1)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a55      	ldr	r2, [pc, #340]	; (8005174 <HAL_UART_MspInit+0x180>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d168      	bne.n	80050f6 <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005024:	2320      	movs	r3, #32
 8005026:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005028:	2300      	movs	r3, #0
 800502a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800502c:	f107 0318 	add.w	r3, r7, #24
 8005030:	4618      	mov	r0, r3
 8005032:	f005 faa3 	bl	800a57c <HAL_RCCEx_PeriphCLKConfig>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800503c:	f7fc fcd9 	bl	80019f2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005040:	4b4d      	ldr	r3, [pc, #308]	; (8005178 <HAL_UART_MspInit+0x184>)
 8005042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005044:	4a4c      	ldr	r2, [pc, #304]	; (8005178 <HAL_UART_MspInit+0x184>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800504c:	4b4a      	ldr	r3, [pc, #296]	; (8005178 <HAL_UART_MspInit+0x184>)
 800504e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005058:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_UART_MspInit+0x184>)
 800505a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505c:	4a46      	ldr	r2, [pc, #280]	; (8005178 <HAL_UART_MspInit+0x184>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005064:	4b44      	ldr	r3, [pc, #272]	; (8005178 <HAL_UART_MspInit+0x184>)
 8005066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005070:	230c      	movs	r3, #12
 8005072:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005074:	2302      	movs	r3, #2
 8005076:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005078:	2300      	movs	r3, #0
 800507a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800507c:	2303      	movs	r3, #3
 800507e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005080:	2308      	movs	r3, #8
 8005082:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005084:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005088:	4619      	mov	r1, r3
 800508a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800508e:	f001 ffe5 	bl	800705c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8005092:	4b3a      	ldr	r3, [pc, #232]	; (800517c <HAL_UART_MspInit+0x188>)
 8005094:	4a3a      	ldr	r2, [pc, #232]	; (8005180 <HAL_UART_MspInit+0x18c>)
 8005096:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8005098:	4b38      	ldr	r3, [pc, #224]	; (800517c <HAL_UART_MspInit+0x188>)
 800509a:	2204      	movs	r2, #4
 800509c:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800509e:	4b37      	ldr	r3, [pc, #220]	; (800517c <HAL_UART_MspInit+0x188>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050a4:	4b35      	ldr	r3, [pc, #212]	; (800517c <HAL_UART_MspInit+0x188>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050aa:	4b34      	ldr	r3, [pc, #208]	; (800517c <HAL_UART_MspInit+0x188>)
 80050ac:	2280      	movs	r2, #128	; 0x80
 80050ae:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <HAL_UART_MspInit+0x188>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050b6:	4b31      	ldr	r3, [pc, #196]	; (800517c <HAL_UART_MspInit+0x188>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 80050bc:	4b2f      	ldr	r3, [pc, #188]	; (800517c <HAL_UART_MspInit+0x188>)
 80050be:	2200      	movs	r2, #0
 80050c0:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050c2:	4b2e      	ldr	r3, [pc, #184]	; (800517c <HAL_UART_MspInit+0x188>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 80050c8:	482c      	ldr	r0, [pc, #176]	; (800517c <HAL_UART_MspInit+0x188>)
 80050ca:	f001 fd45 	bl	8006b58 <HAL_DMA_Init>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80050d4:	f7fc fc8d 	bl	80019f2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a28      	ldr	r2, [pc, #160]	; (800517c <HAL_UART_MspInit+0x188>)
 80050dc:	675a      	str	r2, [r3, #116]	; 0x74
 80050de:	4a27      	ldr	r2, [pc, #156]	; (800517c <HAL_UART_MspInit+0x188>)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80050e4:	2200      	movs	r2, #0
 80050e6:	2100      	movs	r1, #0
 80050e8:	2046      	movs	r0, #70	; 0x46
 80050ea:	f001 fcfe 	bl	8006aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80050ee:	2046      	movs	r0, #70	; 0x46
 80050f0:	f001 fd17 	bl	8006b22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80050f4:	e03a      	b.n	800516c <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a22      	ldr	r2, [pc, #136]	; (8005184 <HAL_UART_MspInit+0x190>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d135      	bne.n	800516c <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005100:	2301      	movs	r3, #1
 8005102:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005104:	2300      	movs	r3, #0
 8005106:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005108:	f107 0318 	add.w	r3, r7, #24
 800510c:	4618      	mov	r0, r3
 800510e:	f005 fa35 	bl	800a57c <HAL_RCCEx_PeriphCLKConfig>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_UART_MspInit+0x128>
      Error_Handler();
 8005118:	f7fc fc6b 	bl	80019f2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800511c:	4b16      	ldr	r3, [pc, #88]	; (8005178 <HAL_UART_MspInit+0x184>)
 800511e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005120:	4a15      	ldr	r2, [pc, #84]	; (8005178 <HAL_UART_MspInit+0x184>)
 8005122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005126:	6613      	str	r3, [r2, #96]	; 0x60
 8005128:	4b13      	ldr	r3, [pc, #76]	; (8005178 <HAL_UART_MspInit+0x184>)
 800512a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005134:	4b10      	ldr	r3, [pc, #64]	; (8005178 <HAL_UART_MspInit+0x184>)
 8005136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005138:	4a0f      	ldr	r2, [pc, #60]	; (8005178 <HAL_UART_MspInit+0x184>)
 800513a:	f043 0302 	orr.w	r3, r3, #2
 800513e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005140:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <HAL_UART_MspInit+0x184>)
 8005142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800514c:	23c0      	movs	r3, #192	; 0xc0
 800514e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005150:	2302      	movs	r3, #2
 8005152:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005154:	2300      	movs	r3, #0
 8005156:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005158:	2303      	movs	r3, #3
 800515a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800515c:	2307      	movs	r3, #7
 800515e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005160:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005164:	4619      	mov	r1, r3
 8005166:	4808      	ldr	r0, [pc, #32]	; (8005188 <HAL_UART_MspInit+0x194>)
 8005168:	f001 ff78 	bl	800705c <HAL_GPIO_Init>
}
 800516c:	bf00      	nop
 800516e:	3780      	adds	r7, #128	; 0x80
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40008000 	.word	0x40008000
 8005178:	40021000 	.word	0x40021000
 800517c:	20001004 	.word	0x20001004
 8005180:	40020480 	.word	0x40020480
 8005184:	40013800 	.word	0x40013800
 8005188:	48000400 	.word	0x48000400

0800518c <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800518c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8005194:	4b30      	ldr	r3, [pc, #192]	; (8005258 <HAL_UART_RxCpltCallback+0xcc>)
 8005196:	881a      	ldrh	r2, [r3, #0]
 8005198:	4b30      	ldr	r3, [pc, #192]	; (800525c <HAL_UART_RxCpltCallback+0xd0>)
 800519a:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 800519c:	4b2f      	ldr	r3, [pc, #188]	; (800525c <HAL_UART_RxCpltCallback+0xd0>)
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80051a4:	d922      	bls.n	80051ec <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80051a6:	4b2d      	ldr	r3, [pc, #180]	; (800525c <HAL_UART_RxCpltCallback+0xd0>)
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80051ae:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 80051b0:	4b2a      	ldr	r3, [pc, #168]	; (800525c <HAL_UART_RxCpltCallback+0xd0>)
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <HAL_UART_RxCpltCallback+0xd4>)
 80051b8:	4413      	add	r3, r2
 80051ba:	89fa      	ldrh	r2, [r7, #14]
 80051bc:	4929      	ldr	r1, [pc, #164]	; (8005264 <HAL_UART_RxCpltCallback+0xd8>)
 80051be:	4618      	mov	r0, r3
 80051c0:	f010 f85f 	bl	8015282 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 80051c4:	4b25      	ldr	r3, [pc, #148]	; (800525c <HAL_UART_RxCpltCallback+0xd0>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 80051ca:	89fb      	ldrh	r3, [r7, #14]
 80051cc:	4a25      	ldr	r2, [pc, #148]	; (8005264 <HAL_UART_RxCpltCallback+0xd8>)
 80051ce:	1899      	adds	r1, r3, r2
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80051d6:	461a      	mov	r2, r3
 80051d8:	4821      	ldr	r0, [pc, #132]	; (8005260 <HAL_UART_RxCpltCallback+0xd4>)
 80051da:	f010 f852 	bl	8015282 <memcpy>
				newPos = (64-datatocopy);  // update the position
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <HAL_UART_RxCpltCallback+0xcc>)
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	e01e      	b.n	800522a <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <HAL_UART_RxCpltCallback+0xd0>)
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <HAL_UART_RxCpltCallback+0xd4>)
 80051f4:	441a      	add	r2, r3
 80051f6:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <HAL_UART_RxCpltCallback+0xd8>)
 80051f8:	4610      	mov	r0, r2
 80051fa:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80051fe:	4602      	mov	r2, r0
 8005200:	4619      	mov	r1, r3
 8005202:	f8d1 c000 	ldr.w	ip, [r1]
 8005206:	684e      	ldr	r6, [r1, #4]
 8005208:	688d      	ldr	r5, [r1, #8]
 800520a:	68c9      	ldr	r1, [r1, #12]
 800520c:	f8c2 c000 	str.w	ip, [r2]
 8005210:	6056      	str	r6, [r2, #4]
 8005212:	6095      	str	r5, [r2, #8]
 8005214:	60d1      	str	r1, [r2, #12]
 8005216:	3310      	adds	r3, #16
 8005218:	3010      	adds	r0, #16
 800521a:	42a3      	cmp	r3, r4
 800521c:	d1ef      	bne.n	80051fe <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 800521e:	4b0f      	ldr	r3, [pc, #60]	; (800525c <HAL_UART_RxCpltCallback+0xd0>)
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	3340      	adds	r3, #64	; 0x40
 8005224:	b29a      	uxth	r2, r3
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_UART_RxCpltCallback+0xcc>)
 8005228:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 800522a:	2240      	movs	r2, #64	; 0x40
 800522c:	490d      	ldr	r1, [pc, #52]	; (8005264 <HAL_UART_RxCpltCallback+0xd8>)
 800522e:	480e      	ldr	r0, [pc, #56]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 8005230:	f006 feda 	bl	800bfe8 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8005234:	4b0d      	ldr	r3, [pc, #52]	; (800526c <HAL_UART_RxCpltCallback+0xe0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <HAL_UART_RxCpltCallback+0xe0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0204 	bic.w	r2, r2, #4
 8005242:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 8005244:	2240      	movs	r2, #64	; 0x40
 8005246:	4907      	ldr	r1, [pc, #28]	; (8005264 <HAL_UART_RxCpltCallback+0xd8>)
 8005248:	4807      	ldr	r0, [pc, #28]	; (8005268 <HAL_UART_RxCpltCallback+0xdc>)
 800524a:	f006 fecd 	bl	800bfe8 <HAL_UART_Receive_DMA>
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005256:	bf00      	nop
 8005258:	2000046a 	.word	0x2000046a
 800525c:	20000468 	.word	0x20000468
 8005260:	200004ac 	.word	0x200004ac
 8005264:	2000046c 	.word	0x2000046c
 8005268:	20000ef4 	.word	0x20000ef4
 800526c:	20001004 	.word	0x20001004

08005270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005274:	f7ff fde4 	bl	8004e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005278:	480c      	ldr	r0, [pc, #48]	; (80052ac <LoopForever+0x6>)
  ldr r1, =_edata
 800527a:	490d      	ldr	r1, [pc, #52]	; (80052b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800527c:	4a0d      	ldr	r2, [pc, #52]	; (80052b4 <LoopForever+0xe>)
  movs r3, #0
 800527e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005280:	e002      	b.n	8005288 <LoopCopyDataInit>

08005282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005286:	3304      	adds	r3, #4

08005288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800528a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800528c:	d3f9      	bcc.n	8005282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005290:	4c0a      	ldr	r4, [pc, #40]	; (80052bc <LoopForever+0x16>)
  movs r3, #0
 8005292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005294:	e001      	b.n	800529a <LoopFillZerobss>

08005296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005298:	3204      	adds	r2, #4

0800529a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800529a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800529c:	d3fb      	bcc.n	8005296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800529e:	f00f ffc1 	bl	8015224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80052a2:	f7fc fa79 	bl	8001798 <main>

080052a6 <LoopForever>:

LoopForever:
    b LoopForever
 80052a6:	e7fe      	b.n	80052a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80052a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80052ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052b0:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 80052b4:	0801b3d0 	.word	0x0801b3d0
  ldr r2, =_sbss
 80052b8:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 80052bc:	20002394 	.word	0x20002394

080052c0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80052c0:	e7fe      	b.n	80052c0 <CAN1_RX0_IRQHandler>

080052c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052cc:	2003      	movs	r0, #3
 80052ce:	f001 fc01 	bl	8006ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052d2:	200f      	movs	r0, #15
 80052d4:	f000 f80e 	bl	80052f4 <HAL_InitTick>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	71fb      	strb	r3, [r7, #7]
 80052e2:	e001      	b.n	80052e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80052e4:	f7ff fc56 	bl	8004b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80052e8:	79fb      	ldrb	r3, [r7, #7]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <HAL_InitTick+0x6c>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d023      	beq.n	8005350 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005308:	4b16      	ldr	r3, [pc, #88]	; (8005364 <HAL_InitTick+0x70>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b14      	ldr	r3, [pc, #80]	; (8005360 <HAL_InitTick+0x6c>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	4619      	mov	r1, r3
 8005312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005316:	fbb3 f3f1 	udiv	r3, r3, r1
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fc0d 	bl	8006b3e <HAL_SYSTICK_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10f      	bne.n	800534a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b0f      	cmp	r3, #15
 800532e:	d809      	bhi.n	8005344 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005330:	2200      	movs	r2, #0
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	f04f 30ff 	mov.w	r0, #4294967295
 8005338:	f001 fbd7 	bl	8006aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800533c:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <HAL_InitTick+0x74>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e007      	b.n	8005354 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]
 8005348:	e004      	b.n	8005354 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
 800534e:	e001      	b.n	8005354 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000028 	.word	0x20000028
 8005364:	20000020 	.word	0x20000020
 8005368:	20000024 	.word	0x20000024

0800536c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005370:	4b06      	ldr	r3, [pc, #24]	; (800538c <HAL_IncTick+0x20>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_IncTick+0x24>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4413      	add	r3, r2
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <HAL_IncTick+0x24>)
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000028 	.word	0x20000028
 8005390:	2000104c 	.word	0x2000104c

08005394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  return uwTick;
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <HAL_GetTick+0x14>)
 800539a:	681b      	ldr	r3, [r3, #0]
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	2000104c 	.word	0x2000104c

080053ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053b4:	f7ff ffee 	bl	8005394 <HAL_GetTick>
 80053b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d005      	beq.n	80053d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <HAL_Delay+0x44>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053d2:	bf00      	nop
 80053d4:	f7ff ffde 	bl	8005394 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d8f7      	bhi.n	80053d4 <HAL_Delay+0x28>
  {
  }
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000028 	.word	0x20000028

080053f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	609a      	str	r2, [r3, #8]
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	609a      	str	r2, [r3, #8]
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3360      	adds	r3, #96	; 0x60
 800546e:	461a      	mov	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <LL_ADC_SetOffset+0x44>)
 800547e:	4013      	ands	r3, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	4313      	orrs	r3, r2
 800548c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	03fff000 	.word	0x03fff000

080054a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3360      	adds	r3, #96	; 0x60
 80054b2:	461a      	mov	r2, r3
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3360      	adds	r3, #96	; 0x60
 80054e0:	461a      	mov	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3330      	adds	r3, #48	; 0x30
 800553c:	461a      	mov	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	0a1b      	lsrs	r3, r3, #8
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	f003 030c 	and.w	r3, r3, #12
 8005548:	4413      	add	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	211f      	movs	r1, #31
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	0e9b      	lsrs	r3, r3, #26
 8005564:	f003 011f 	and.w	r1, r3, #31
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	431a      	orrs	r2, r3
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005590:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3314      	adds	r3, #20
 80055ba:	461a      	mov	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	0e5b      	lsrs	r3, r3, #25
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	4413      	add	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	0d1b      	lsrs	r3, r3, #20
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	2107      	movs	r1, #7
 80055d8:	fa01 f303 	lsl.w	r3, r1, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	401a      	ands	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	0d1b      	lsrs	r3, r3, #20
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	431a      	orrs	r2, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005618:	43db      	mvns	r3, r3
 800561a:	401a      	ands	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f003 0318 	and.w	r3, r3, #24
 8005622:	4908      	ldr	r1, [pc, #32]	; (8005644 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005624:	40d9      	lsrs	r1, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	400b      	ands	r3, r1
 800562a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562e:	431a      	orrs	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	0007ffff 	.word	0x0007ffff

08005648 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005658:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6093      	str	r3, [r2, #8]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800567c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005680:	d101      	bne.n	8005686 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80056a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056d0:	d101      	bne.n	80056d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056f8:	f043 0201 	orr.w	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <LL_ADC_IsEnabled+0x18>
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <LL_ADC_IsEnabled+0x1a>
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005742:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005746:	f043 0204 	orr.w	r2, r3, #4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b04      	cmp	r3, #4
 800576c:	d101      	bne.n	8005772 <LL_ADC_REG_IsConversionOngoing+0x18>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b08      	cmp	r3, #8
 8005792:	d101      	bne.n	8005798 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e126      	b.n	8005a10 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7fb fc93 	bl	80010fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff ff3f 	bl	800566c <LL_ADC_IsDeepPowerDownEnabled>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff ff25 	bl	8005648 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff ff5a 	bl	80056bc <LL_ADC_IsInternalRegulatorEnabled>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d115      	bne.n	800583a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff ff3e 	bl	8005694 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005818:	4b7f      	ldr	r3, [pc, #508]	; (8005a18 <HAL_ADC_Init+0x270>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	099b      	lsrs	r3, r3, #6
 800581e:	4a7f      	ldr	r2, [pc, #508]	; (8005a1c <HAL_ADC_Init+0x274>)
 8005820:	fba2 2303 	umull	r2, r3, r2, r3
 8005824:	099b      	lsrs	r3, r3, #6
 8005826:	3301      	adds	r3, #1
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800582c:	e002      	b.n	8005834 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3b01      	subs	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f9      	bne.n	800582e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff ff3c 	bl	80056bc <LL_ADC_IsInternalRegulatorEnabled>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10d      	bne.n	8005866 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584e:	f043 0210 	orr.w	r2, r3, #16
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585a:	f043 0201 	orr.w	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff ff75 	bl	800575a <LL_ADC_REG_IsConversionOngoing>
 8005870:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	f003 0310 	and.w	r3, r3, #16
 800587a:	2b00      	cmp	r3, #0
 800587c:	f040 80bf 	bne.w	80059fe <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 80bb 	bne.w	80059fe <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005890:	f043 0202 	orr.w	r2, r3, #2
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff ff35 	bl	800570c <LL_ADC_IsEnabled>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058a8:	485d      	ldr	r0, [pc, #372]	; (8005a20 <HAL_ADC_Init+0x278>)
 80058aa:	f7ff ff2f 	bl	800570c <LL_ADC_IsEnabled>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d105      	bne.n	80058c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4619      	mov	r1, r3
 80058ba:	485a      	ldr	r0, [pc, #360]	; (8005a24 <HAL_ADC_Init+0x27c>)
 80058bc:	f7ff fd9a 	bl	80053f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7e5b      	ldrb	r3, [r3, #25]
 80058c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80058d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80058d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d106      	bne.n	80058fc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	3b01      	subs	r3, #1
 80058f4:	045b      	lsls	r3, r3, #17
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	4b42      	ldr	r3, [pc, #264]	; (8005a28 <HAL_ADC_Init+0x280>)
 8005920:	4013      	ands	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	69b9      	ldr	r1, [r7, #24]
 8005928:	430b      	orrs	r3, r1
 800592a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff ff25 	bl	8005780 <LL_ADC_INJ_IsConversionOngoing>
 8005936:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d13d      	bne.n	80059ba <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d13a      	bne.n	80059ba <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005948:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005950:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005952:	4313      	orrs	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005960:	f023 0302 	bic.w	r3, r3, #2
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	69b9      	ldr	r1, [r7, #24]
 800596a:	430b      	orrs	r3, r1
 800596c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005974:	2b01      	cmp	r3, #1
 8005976:	d118      	bne.n	80059aa <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005982:	f023 0304 	bic.w	r3, r3, #4
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800598e:	4311      	orrs	r1, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005994:	4311      	orrs	r1, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800599a:	430a      	orrs	r2, r1
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	611a      	str	r2, [r3, #16]
 80059a8:	e007      	b.n	80059ba <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d10c      	bne.n	80059dc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	f023 010f 	bic.w	r1, r3, #15
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	1e5a      	subs	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30
 80059da:	e007      	b.n	80059ec <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 020f 	bic.w	r2, r2, #15
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	f023 0303 	bic.w	r3, r3, #3
 80059f4:	f043 0201 	orr.w	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	655a      	str	r2, [r3, #84]	; 0x54
 80059fc:	e007      	b.n	8005a0e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	f043 0210 	orr.w	r2, r3, #16
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000020 	.word	0x20000020
 8005a1c:	053e2d63 	.word	0x053e2d63
 8005a20:	50040000 	.word	0x50040000
 8005a24:	50040300 	.word	0x50040300
 8005a28:	fff0c007 	.word	0xfff0c007

08005a2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fe8c 	bl	800575a <LL_ADC_REG_IsConversionOngoing>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d167      	bne.n	8005b18 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_ADC_Start_DMA+0x2a>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e063      	b.n	8005b1e <HAL_ADC_Start_DMA+0xf2>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fe1c 	bl	800669c <ADC_Enable>
 8005a64:	4603      	mov	r3, r0
 8005a66:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d14f      	bne.n	8005b0e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d006      	beq.n	8005a9c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	f023 0206 	bic.w	r2, r3, #6
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	659a      	str	r2, [r3, #88]	; 0x58
 8005a9a:	e002      	b.n	8005aa2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa6:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <HAL_ADC_Start_DMA+0xfc>)
 8005aa8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aae:	4a1f      	ldr	r2, [pc, #124]	; (8005b2c <HAL_ADC_Start_DMA+0x100>)
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab6:	4a1e      	ldr	r2, [pc, #120]	; (8005b30 <HAL_ADC_Start_DMA+0x104>)
 8005ab8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	221c      	movs	r2, #28
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0210 	orr.w	r2, r2, #16
 8005ad8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3340      	adds	r3, #64	; 0x40
 8005af4:	4619      	mov	r1, r3
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f001 f8e5 	bl	8006cc8 <HAL_DMA_Start_IT>
 8005afe:	4603      	mov	r3, r0
 8005b00:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fe13 	bl	8005732 <LL_ADC_REG_StartConversion>
 8005b0c:	e006      	b.n	8005b1c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005b16:	e001      	b.n	8005b1c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	080067a9 	.word	0x080067a9
 8005b2c:	08006881 	.word	0x08006881
 8005b30:	0800689d 	.word	0x0800689d

08005b34 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d017      	beq.n	8005b8a <HAL_ADC_IRQHandler+0x56>
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d012      	beq.n	8005b8a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b74:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fecf 	bl	8006920 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2202      	movs	r2, #2
 8005b88:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <HAL_ADC_IRQHandler+0x6a>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d109      	bne.n	8005bb2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d05e      	beq.n	8005c66 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d059      	beq.n	8005c66 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d105      	bne.n	8005bca <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff fc99 	bl	8005506 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d03e      	beq.n	8005c58 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d135      	bne.n	8005c58 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d12e      	bne.n	8005c58 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff fdab 	bl	800575a <LL_ADC_REG_IsConversionOngoing>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d11a      	bne.n	8005c40 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 020c 	bic.w	r2, r2, #12
 8005c18:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d112      	bne.n	8005c58 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c36:	f043 0201 	orr.w	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	655a      	str	r2, [r3, #84]	; 0x54
 8005c3e:	e00b      	b.n	8005c58 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c44:	f043 0210 	orr.w	r2, r3, #16
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c50:	f043 0201 	orr.w	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7fb fac5 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	220c      	movs	r2, #12
 8005c64:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <HAL_ADC_IRQHandler+0x146>
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d072      	beq.n	8005d6a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d06d      	beq.n	8005d6a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d105      	bne.n	8005ca6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fc6a 	bl	8005584 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005cb0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff fc25 	bl	8005506 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005cbc:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d047      	beq.n	8005d5c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <HAL_ADC_IRQHandler+0x1b2>
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d03f      	beq.n	8005d5c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d13a      	bne.n	8005d5c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b40      	cmp	r3, #64	; 0x40
 8005cf2:	d133      	bne.n	8005d5c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d12e      	bne.n	8005d5c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fd3c 	bl	8005780 <LL_ADC_INJ_IsConversionOngoing>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d11a      	bne.n	8005d44 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d1c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d112      	bne.n	8005d5c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3a:	f043 0201 	orr.w	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54
 8005d42:	e00b      	b.n	8005d5c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d48:	f043 0210 	orr.w	r2, r3, #16
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d54:	f043 0201 	orr.w	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fdb7 	bl	80068d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2260      	movs	r2, #96	; 0x60
 8005d68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d011      	beq.n	8005d98 <HAL_ADC_IRQHandler+0x264>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00c      	beq.n	8005d98 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f890 	bl	8005eb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d012      	beq.n	8005dc8 <HAL_ADC_IRQHandler+0x294>
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fd9d 	bl	80068f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dc6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d012      	beq.n	8005df8 <HAL_ADC_IRQHandler+0x2c4>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00d      	beq.n	8005df8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fd8f 	bl	800690c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f003 0310 	and.w	r3, r3, #16
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d02a      	beq.n	8005e58 <HAL_ADC_IRQHandler+0x324>
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d025      	beq.n	8005e58 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8005e14:	2301      	movs	r3, #1
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	e008      	b.n	8005e2c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d10e      	bne.n	8005e50 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e36:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e42:	f043 0202 	orr.w	r2, r3, #2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f83a 	bl	8005ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2210      	movs	r2, #16
 8005e56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d018      	beq.n	8005e94 <HAL_ADC_IRQHandler+0x360>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d013      	beq.n	8005e94 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e70:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7c:	f043 0208 	orr.w	r2, r3, #8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e8c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fd28 	bl	80068e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005e94:	bf00      	nop
 8005e96:	3720      	adds	r7, #32
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b0b6      	sub	sp, #216	; 0xd8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_ADC_ConfigChannel+0x22>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e3bb      	b.n	8006672 <HAL_ADC_ConfigChannel+0x79a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fc27 	bl	800575a <LL_ADC_REG_IsConversionOngoing>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f040 83a0 	bne.w	8006654 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b05      	cmp	r3, #5
 8005f22:	d824      	bhi.n	8005f6e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	3b02      	subs	r3, #2
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d81b      	bhi.n	8005f66 <HAL_ADC_ConfigChannel+0x8e>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <HAL_ADC_ConfigChannel+0x5c>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f4d 	.word	0x08005f4d
 8005f3c:	08005f55 	.word	0x08005f55
 8005f40:	08005f5d 	.word	0x08005f5d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005f44:	230c      	movs	r3, #12
 8005f46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005f4a:	e010      	b.n	8005f6e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005f4c:	2312      	movs	r3, #18
 8005f4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005f52:	e00c      	b.n	8005f6e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005f54:	2318      	movs	r3, #24
 8005f56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005f5a:	e008      	b.n	8005f6e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005f64:	e003      	b.n	8005f6e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005f66:	2306      	movs	r3, #6
 8005f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005f6c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005f7c:	f7ff fad6 	bl	800552c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fbe8 	bl	800575a <LL_ADC_REG_IsConversionOngoing>
 8005f8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fbf4 	bl	8005780 <LL_ADC_INJ_IsConversionOngoing>
 8005f98:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f040 81a4 	bne.w	80062ee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 819f 	bne.w	80062ee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6819      	ldr	r1, [r3, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f7ff faf4 	bl	80055aa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695a      	ldr	r2, [r3, #20]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	08db      	lsrs	r3, r3, #3
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d00a      	beq.n	8005ffa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	6919      	ldr	r1, [r3, #16]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ff4:	f7ff fa32 	bl	800545c <LL_ADC_SetOffset>
 8005ff8:	e179      	b.n	80062ee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2100      	movs	r1, #0
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fa4f 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 8006006:	4603      	mov	r3, r0
 8006008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <HAL_ADC_ConfigChannel+0x14e>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fa44 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 800601c:	4603      	mov	r3, r0
 800601e:	0e9b      	lsrs	r3, r3, #26
 8006020:	f003 021f 	and.w	r2, r3, #31
 8006024:	e01e      	b.n	8006064 <HAL_ADC_ConfigChannel+0x18c>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2100      	movs	r1, #0
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff fa39 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 8006032:	4603      	mov	r3, r0
 8006034:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800603c:	fa93 f3a3 	rbit	r3, r3
 8006040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800604c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8006054:	2320      	movs	r3, #32
 8006056:	e004      	b.n	8006062 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8006058:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800605c:	fab3 f383 	clz	r3, r3
 8006060:	b2db      	uxtb	r3, r3
 8006062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606c:	2b00      	cmp	r3, #0
 800606e:	d105      	bne.n	800607c <HAL_ADC_ConfigChannel+0x1a4>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	0e9b      	lsrs	r3, r3, #26
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	e018      	b.n	80060ae <HAL_ADC_ConfigChannel+0x1d6>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006088:	fa93 f3a3 	rbit	r3, r3
 800608c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8006090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80060a0:	2320      	movs	r3, #32
 80060a2:	e004      	b.n	80060ae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80060a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060a8:	fab3 f383 	clz	r3, r3
 80060ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d106      	bne.n	80060c0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fa08 	bl	80054d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2101      	movs	r1, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff f9ec 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <HAL_ADC_ConfigChannel+0x214>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2101      	movs	r1, #1
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff f9e1 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 80060e2:	4603      	mov	r3, r0
 80060e4:	0e9b      	lsrs	r3, r3, #26
 80060e6:	f003 021f 	and.w	r2, r3, #31
 80060ea:	e01e      	b.n	800612a <HAL_ADC_ConfigChannel+0x252>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2101      	movs	r1, #1
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff f9d6 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006102:	fa93 f3a3 	rbit	r3, r3
 8006106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800610a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800610e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800611a:	2320      	movs	r3, #32
 800611c:	e004      	b.n	8006128 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800611e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006122:	fab3 f383 	clz	r3, r3
 8006126:	b2db      	uxtb	r3, r3
 8006128:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006132:	2b00      	cmp	r3, #0
 8006134:	d105      	bne.n	8006142 <HAL_ADC_ConfigChannel+0x26a>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	0e9b      	lsrs	r3, r3, #26
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	e018      	b.n	8006174 <HAL_ADC_ConfigChannel+0x29c>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8006156:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800615a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800615e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8006166:	2320      	movs	r3, #32
 8006168:	e004      	b.n	8006174 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800616a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800616e:	fab3 f383 	clz	r3, r3
 8006172:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006174:	429a      	cmp	r2, r3
 8006176:	d106      	bne.n	8006186 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2200      	movs	r2, #0
 800617e:	2101      	movs	r1, #1
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff f9a5 	bl	80054d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2102      	movs	r1, #2
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff f989 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 8006192:	4603      	mov	r3, r0
 8006194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <HAL_ADC_ConfigChannel+0x2da>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2102      	movs	r1, #2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff f97e 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 80061a8:	4603      	mov	r3, r0
 80061aa:	0e9b      	lsrs	r3, r3, #26
 80061ac:	f003 021f 	and.w	r2, r3, #31
 80061b0:	e01e      	b.n	80061f0 <HAL_ADC_ConfigChannel+0x318>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2102      	movs	r1, #2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff f973 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 80061be:	4603      	mov	r3, r0
 80061c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061c8:	fa93 f3a3 	rbit	r3, r3
 80061cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80061d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80061d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80061e0:	2320      	movs	r3, #32
 80061e2:	e004      	b.n	80061ee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80061e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061e8:	fab3 f383 	clz	r3, r3
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <HAL_ADC_ConfigChannel+0x330>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	0e9b      	lsrs	r3, r3, #26
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	e014      	b.n	8006232 <HAL_ADC_ConfigChannel+0x35a>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006210:	fa93 f3a3 	rbit	r3, r3
 8006214:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800621c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8006224:	2320      	movs	r3, #32
 8006226:	e004      	b.n	8006232 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8006228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800622c:	fab3 f383 	clz	r3, r3
 8006230:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006232:	429a      	cmp	r2, r3
 8006234:	d106      	bne.n	8006244 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	2102      	movs	r1, #2
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff f946 	bl	80054d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2103      	movs	r1, #3
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f92a 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 8006250:	4603      	mov	r3, r0
 8006252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <HAL_ADC_ConfigChannel+0x398>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2103      	movs	r1, #3
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff f91f 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 8006266:	4603      	mov	r3, r0
 8006268:	0e9b      	lsrs	r3, r3, #26
 800626a:	f003 021f 	and.w	r2, r3, #31
 800626e:	e017      	b.n	80062a0 <HAL_ADC_ConfigChannel+0x3c8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2103      	movs	r1, #3
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff f914 	bl	80054a4 <LL_ADC_GetOffsetChannel>
 800627c:	4603      	mov	r3, r0
 800627e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006282:	fa93 f3a3 	rbit	r3, r3
 8006286:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800628c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8006292:	2320      	movs	r3, #32
 8006294:	e003      	b.n	800629e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8006296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006298:	fab3 f383 	clz	r3, r3
 800629c:	b2db      	uxtb	r3, r3
 800629e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d105      	bne.n	80062b8 <HAL_ADC_ConfigChannel+0x3e0>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	0e9b      	lsrs	r3, r3, #26
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	e011      	b.n	80062dc <HAL_ADC_ConfigChannel+0x404>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c0:	fa93 f3a3 	rbit	r3, r3
 80062c4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80062c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80062ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80062d0:	2320      	movs	r3, #32
 80062d2:	e003      	b.n	80062dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80062d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062d6:	fab3 f383 	clz	r3, r3
 80062da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062dc:	429a      	cmp	r2, r3
 80062de:	d106      	bne.n	80062ee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2200      	movs	r2, #0
 80062e6:	2103      	movs	r1, #3
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff f8f1 	bl	80054d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fa0a 	bl	800570c <LL_ADC_IsEnabled>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f040 8140 	bne.w	8006580 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	6819      	ldr	r1, [r3, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	461a      	mov	r2, r3
 800630e:	f7ff f977 	bl	8005600 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	4a8f      	ldr	r2, [pc, #572]	; (8006554 <HAL_ADC_ConfigChannel+0x67c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	f040 8131 	bne.w	8006580 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <HAL_ADC_ConfigChannel+0x46e>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	0e9b      	lsrs	r3, r3, #26
 8006334:	3301      	adds	r3, #1
 8006336:	f003 031f 	and.w	r3, r3, #31
 800633a:	2b09      	cmp	r3, #9
 800633c:	bf94      	ite	ls
 800633e:	2301      	movls	r3, #1
 8006340:	2300      	movhi	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e019      	b.n	800637a <HAL_ADC_ConfigChannel+0x4a2>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800634e:	fa93 f3a3 	rbit	r3, r3
 8006352:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006356:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800635e:	2320      	movs	r3, #32
 8006360:	e003      	b.n	800636a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8006362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006364:	fab3 f383 	clz	r3, r3
 8006368:	b2db      	uxtb	r3, r3
 800636a:	3301      	adds	r3, #1
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2b09      	cmp	r3, #9
 8006372:	bf94      	ite	ls
 8006374:	2301      	movls	r3, #1
 8006376:	2300      	movhi	r3, #0
 8006378:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800637a:	2b00      	cmp	r3, #0
 800637c:	d079      	beq.n	8006472 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <HAL_ADC_ConfigChannel+0x4c2>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	0e9b      	lsrs	r3, r3, #26
 8006390:	3301      	adds	r3, #1
 8006392:	069b      	lsls	r3, r3, #26
 8006394:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006398:	e015      	b.n	80063c6 <HAL_ADC_ConfigChannel+0x4ee>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a2:	fa93 f3a3 	rbit	r3, r3
 80063a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80063a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80063ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80063b2:	2320      	movs	r3, #32
 80063b4:	e003      	b.n	80063be <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80063b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b8:	fab3 f383 	clz	r3, r3
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	3301      	adds	r3, #1
 80063c0:	069b      	lsls	r3, r3, #26
 80063c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <HAL_ADC_ConfigChannel+0x50e>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	0e9b      	lsrs	r3, r3, #26
 80063d8:	3301      	adds	r3, #1
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2101      	movs	r1, #1
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	e017      	b.n	8006416 <HAL_ADC_ConfigChannel+0x53e>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80063f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80063f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80063fe:	2320      	movs	r3, #32
 8006400:	e003      	b.n	800640a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8006402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006404:	fab3 f383 	clz	r3, r3
 8006408:	b2db      	uxtb	r3, r3
 800640a:	3301      	adds	r3, #1
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2101      	movs	r1, #1
 8006412:	fa01 f303 	lsl.w	r3, r1, r3
 8006416:	ea42 0103 	orr.w	r1, r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <HAL_ADC_ConfigChannel+0x564>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	0e9b      	lsrs	r3, r3, #26
 800642c:	3301      	adds	r3, #1
 800642e:	f003 021f 	and.w	r2, r3, #31
 8006432:	4613      	mov	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	051b      	lsls	r3, r3, #20
 800643a:	e018      	b.n	800646e <HAL_ADC_ConfigChannel+0x596>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	fa93 f3a3 	rbit	r3, r3
 8006448:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8006454:	2320      	movs	r3, #32
 8006456:	e003      	b.n	8006460 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	fab3 f383 	clz	r3, r3
 800645e:	b2db      	uxtb	r3, r3
 8006460:	3301      	adds	r3, #1
 8006462:	f003 021f 	and.w	r2, r3, #31
 8006466:	4613      	mov	r3, r2
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	4413      	add	r3, r2
 800646c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800646e:	430b      	orrs	r3, r1
 8006470:	e081      	b.n	8006576 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <HAL_ADC_ConfigChannel+0x5b6>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	0e9b      	lsrs	r3, r3, #26
 8006484:	3301      	adds	r3, #1
 8006486:	069b      	lsls	r3, r3, #26
 8006488:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800648c:	e015      	b.n	80064ba <HAL_ADC_ConfigChannel+0x5e2>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	fa93 f3a3 	rbit	r3, r3
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80064a6:	2320      	movs	r3, #32
 80064a8:	e003      	b.n	80064b2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	fab3 f383 	clz	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	3301      	adds	r3, #1
 80064b4:	069b      	lsls	r3, r3, #26
 80064b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_ADC_ConfigChannel+0x602>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	0e9b      	lsrs	r3, r3, #26
 80064cc:	3301      	adds	r3, #1
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2101      	movs	r1, #1
 80064d4:	fa01 f303 	lsl.w	r3, r1, r3
 80064d8:	e017      	b.n	800650a <HAL_ADC_ConfigChannel+0x632>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	fa93 f3a3 	rbit	r3, r3
 80064e6:	61bb      	str	r3, [r7, #24]
  return result;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80064f2:	2320      	movs	r3, #32
 80064f4:	e003      	b.n	80064fe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	fab3 f383 	clz	r3, r3
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	3301      	adds	r3, #1
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2101      	movs	r1, #1
 8006506:	fa01 f303 	lsl.w	r3, r1, r3
 800650a:	ea42 0103 	orr.w	r1, r2, r3
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10d      	bne.n	8006536 <HAL_ADC_ConfigChannel+0x65e>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	0e9b      	lsrs	r3, r3, #26
 8006520:	3301      	adds	r3, #1
 8006522:	f003 021f 	and.w	r2, r3, #31
 8006526:	4613      	mov	r3, r2
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	4413      	add	r3, r2
 800652c:	3b1e      	subs	r3, #30
 800652e:	051b      	lsls	r3, r3, #20
 8006530:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006534:	e01e      	b.n	8006574 <HAL_ADC_ConfigChannel+0x69c>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	fa93 f3a3 	rbit	r3, r3
 8006542:	60fb      	str	r3, [r7, #12]
  return result;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800654e:	2320      	movs	r3, #32
 8006550:	e006      	b.n	8006560 <HAL_ADC_ConfigChannel+0x688>
 8006552:	bf00      	nop
 8006554:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	fab3 f383 	clz	r3, r3
 800655e:	b2db      	uxtb	r3, r3
 8006560:	3301      	adds	r3, #1
 8006562:	f003 021f 	and.w	r2, r3, #31
 8006566:	4613      	mov	r3, r2
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	4413      	add	r3, r2
 800656c:	3b1e      	subs	r3, #30
 800656e:	051b      	lsls	r3, r3, #20
 8006570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006574:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800657a:	4619      	mov	r1, r3
 800657c:	f7ff f815 	bl	80055aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4b3d      	ldr	r3, [pc, #244]	; (800667c <HAL_ADC_ConfigChannel+0x7a4>)
 8006586:	4013      	ands	r3, r2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d06c      	beq.n	8006666 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800658c:	483c      	ldr	r0, [pc, #240]	; (8006680 <HAL_ADC_ConfigChannel+0x7a8>)
 800658e:	f7fe ff57 	bl	8005440 <LL_ADC_GetCommonPathInternalCh>
 8006592:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3a      	ldr	r2, [pc, #232]	; (8006684 <HAL_ADC_ConfigChannel+0x7ac>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d127      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d121      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a35      	ldr	r2, [pc, #212]	; (8006688 <HAL_ADC_ConfigChannel+0x7b0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d157      	bne.n	8006666 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065be:	4619      	mov	r1, r3
 80065c0:	482f      	ldr	r0, [pc, #188]	; (8006680 <HAL_ADC_ConfigChannel+0x7a8>)
 80065c2:	f7fe ff2a 	bl	800541a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065c6:	4b31      	ldr	r3, [pc, #196]	; (800668c <HAL_ADC_ConfigChannel+0x7b4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	099b      	lsrs	r3, r3, #6
 80065cc:	4a30      	ldr	r2, [pc, #192]	; (8006690 <HAL_ADC_ConfigChannel+0x7b8>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	099b      	lsrs	r3, r3, #6
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	4613      	mov	r3, r2
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065e0:	e002      	b.n	80065e8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f9      	bne.n	80065e2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065ee:	e03a      	b.n	8006666 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a27      	ldr	r2, [pc, #156]	; (8006694 <HAL_ADC_ConfigChannel+0x7bc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d113      	bne.n	8006622 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10d      	bne.n	8006622 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <HAL_ADC_ConfigChannel+0x7b0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d12a      	bne.n	8006666 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006614:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006618:	4619      	mov	r1, r3
 800661a:	4819      	ldr	r0, [pc, #100]	; (8006680 <HAL_ADC_ConfigChannel+0x7a8>)
 800661c:	f7fe fefd 	bl	800541a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006620:	e021      	b.n	8006666 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1c      	ldr	r2, [pc, #112]	; (8006698 <HAL_ADC_ConfigChannel+0x7c0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d11c      	bne.n	8006666 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800662c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d116      	bne.n	8006666 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a12      	ldr	r2, [pc, #72]	; (8006688 <HAL_ADC_ConfigChannel+0x7b0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d111      	bne.n	8006666 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006642:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800664a:	4619      	mov	r1, r3
 800664c:	480c      	ldr	r0, [pc, #48]	; (8006680 <HAL_ADC_ConfigChannel+0x7a8>)
 800664e:	f7fe fee4 	bl	800541a <LL_ADC_SetCommonPathInternalCh>
 8006652:	e008      	b.n	8006666 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006658:	f043 0220 	orr.w	r2, r3, #32
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800666e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006672:	4618      	mov	r0, r3
 8006674:	37d8      	adds	r7, #216	; 0xd8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	80080000 	.word	0x80080000
 8006680:	50040300 	.word	0x50040300
 8006684:	c7520000 	.word	0xc7520000
 8006688:	50040000 	.word	0x50040000
 800668c:	20000020 	.word	0x20000020
 8006690:	053e2d63 	.word	0x053e2d63
 8006694:	cb840000 	.word	0xcb840000
 8006698:	80000001 	.word	0x80000001

0800669c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff f82d 	bl	800570c <LL_ADC_IsEnabled>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d169      	bne.n	800678c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	4b36      	ldr	r3, [pc, #216]	; (8006798 <ADC_Enable+0xfc>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00d      	beq.n	80066e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	f043 0210 	orr.w	r2, r3, #16
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	f043 0201 	orr.w	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e055      	b.n	800678e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fffc 	bl	80056e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80066ec:	482b      	ldr	r0, [pc, #172]	; (800679c <ADC_Enable+0x100>)
 80066ee:	f7fe fea7 	bl	8005440 <LL_ADC_GetCommonPathInternalCh>
 80066f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80066f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d013      	beq.n	8006724 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066fc:	4b28      	ldr	r3, [pc, #160]	; (80067a0 <ADC_Enable+0x104>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	099b      	lsrs	r3, r3, #6
 8006702:	4a28      	ldr	r2, [pc, #160]	; (80067a4 <ADC_Enable+0x108>)
 8006704:	fba2 2303 	umull	r2, r3, r2, r3
 8006708:	099b      	lsrs	r3, r3, #6
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	4613      	mov	r3, r2
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006716:	e002      	b.n	800671e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	3b01      	subs	r3, #1
 800671c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f9      	bne.n	8006718 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006724:	f7fe fe36 	bl	8005394 <HAL_GetTick>
 8006728:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800672a:	e028      	b.n	800677e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4618      	mov	r0, r3
 8006732:	f7fe ffeb 	bl	800570c <LL_ADC_IsEnabled>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe ffcf 	bl	80056e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006746:	f7fe fe25 	bl	8005394 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d914      	bls.n	800677e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b01      	cmp	r3, #1
 8006760:	d00d      	beq.n	800677e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006766:	f043 0210 	orr.w	r2, r3, #16
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	f043 0201 	orr.w	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e007      	b.n	800678e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d1cf      	bne.n	800672c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	8000003f 	.word	0x8000003f
 800679c:	50040300 	.word	0x50040300
 80067a0:	20000020 	.word	0x20000020
 80067a4:	053e2d63 	.word	0x053e2d63

080067a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d14b      	bne.n	800685a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d021      	beq.n	8006820 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe fe90 	bl	8005506 <LL_ADC_REG_IsTriggerSourceSWStart>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d032      	beq.n	8006852 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d12b      	bne.n	8006852 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d11f      	bne.n	8006852 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	f043 0201 	orr.w	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	655a      	str	r2, [r3, #84]	; 0x54
 800681e:	e018      	b.n	8006852 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d111      	bne.n	8006852 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d105      	bne.n	8006852 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684a:	f043 0201 	orr.w	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7fa fcc8 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006858:	e00e      	b.n	8006878 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff fb2c 	bl	8005ec4 <HAL_ADC_ErrorCallback>
}
 800686c:	e004      	b.n	8006878 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	4798      	blx	r3
}
 8006878:	bf00      	nop
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff fb04 	bl	8005e9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006894:	bf00      	nop
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	f043 0204 	orr.w	r2, r3, #4
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7ff fafe 	bl	8005ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068c8:	bf00      	nop
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006944:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <__NVIC_SetPriorityGrouping+0x44>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006950:	4013      	ands	r3, r2
 8006952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800695c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006966:	4a04      	ldr	r2, [pc, #16]	; (8006978 <__NVIC_SetPriorityGrouping+0x44>)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	60d3      	str	r3, [r2, #12]
}
 800696c:	bf00      	nop
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	e000ed00 	.word	0xe000ed00

0800697c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006980:	4b04      	ldr	r3, [pc, #16]	; (8006994 <__NVIC_GetPriorityGrouping+0x18>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	0a1b      	lsrs	r3, r3, #8
 8006986:	f003 0307 	and.w	r3, r3, #7
}
 800698a:	4618      	mov	r0, r3
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	e000ed00 	.word	0xe000ed00

08006998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	db0b      	blt.n	80069c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	f003 021f 	and.w	r2, r3, #31
 80069b0:	4907      	ldr	r1, [pc, #28]	; (80069d0 <__NVIC_EnableIRQ+0x38>)
 80069b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	2001      	movs	r0, #1
 80069ba:	fa00 f202 	lsl.w	r2, r0, r2
 80069be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	e000e100 	.word	0xe000e100

080069d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	6039      	str	r1, [r7, #0]
 80069de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	db0a      	blt.n	80069fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	490c      	ldr	r1, [pc, #48]	; (8006a20 <__NVIC_SetPriority+0x4c>)
 80069ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f2:	0112      	lsls	r2, r2, #4
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	440b      	add	r3, r1
 80069f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069fc:	e00a      	b.n	8006a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	4908      	ldr	r1, [pc, #32]	; (8006a24 <__NVIC_SetPriority+0x50>)
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	3b04      	subs	r3, #4
 8006a0c:	0112      	lsls	r2, r2, #4
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	440b      	add	r3, r1
 8006a12:	761a      	strb	r2, [r3, #24]
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	e000e100 	.word	0xe000e100
 8006a24:	e000ed00 	.word	0xe000ed00

08006a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b089      	sub	sp, #36	; 0x24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f1c3 0307 	rsb	r3, r3, #7
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	bf28      	it	cs
 8006a46:	2304      	movcs	r3, #4
 8006a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	2b06      	cmp	r3, #6
 8006a50:	d902      	bls.n	8006a58 <NVIC_EncodePriority+0x30>
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3b03      	subs	r3, #3
 8006a56:	e000      	b.n	8006a5a <NVIC_EncodePriority+0x32>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43da      	mvns	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a70:	f04f 31ff 	mov.w	r1, #4294967295
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7a:	43d9      	mvns	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a80:	4313      	orrs	r3, r2
         );
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3724      	adds	r7, #36	; 0x24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aa0:	d301      	bcc.n	8006aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e00f      	b.n	8006ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aa6:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <SysTick_Config+0x40>)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006aae:	210f      	movs	r1, #15
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	f7ff ff8e 	bl	80069d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ab8:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <SysTick_Config+0x40>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006abe:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <SysTick_Config+0x40>)
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	e000e010 	.word	0xe000e010

08006ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff ff29 	bl	8006934 <__NVIC_SetPriorityGrouping>
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b086      	sub	sp, #24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	4603      	mov	r3, r0
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
 8006af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006afc:	f7ff ff3e 	bl	800697c <__NVIC_GetPriorityGrouping>
 8006b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	6978      	ldr	r0, [r7, #20]
 8006b08:	f7ff ff8e 	bl	8006a28 <NVIC_EncodePriority>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff5d 	bl	80069d4 <__NVIC_SetPriority>
}
 8006b1a:	bf00      	nop
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	4603      	mov	r3, r0
 8006b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff ff31 	bl	8006998 <__NVIC_EnableIRQ>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ffa2 	bl	8006a90 <SysTick_Config>
 8006b4c:	4603      	mov	r3, r0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e098      	b.n	8006c9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4b4d      	ldr	r3, [pc, #308]	; (8006ca8 <HAL_DMA_Init+0x150>)
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d80f      	bhi.n	8006b96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4b4b      	ldr	r3, [pc, #300]	; (8006cac <HAL_DMA_Init+0x154>)
 8006b7e:	4413      	add	r3, r2
 8006b80:	4a4b      	ldr	r2, [pc, #300]	; (8006cb0 <HAL_DMA_Init+0x158>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	091b      	lsrs	r3, r3, #4
 8006b88:	009a      	lsls	r2, r3, #2
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a48      	ldr	r2, [pc, #288]	; (8006cb4 <HAL_DMA_Init+0x15c>)
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40
 8006b94:	e00e      	b.n	8006bb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4b46      	ldr	r3, [pc, #280]	; (8006cb8 <HAL_DMA_Init+0x160>)
 8006b9e:	4413      	add	r3, r2
 8006ba0:	4a43      	ldr	r2, [pc, #268]	; (8006cb0 <HAL_DMA_Init+0x158>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	091b      	lsrs	r3, r3, #4
 8006ba8:	009a      	lsls	r2, r3, #2
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a42      	ldr	r2, [pc, #264]	; (8006cbc <HAL_DMA_Init+0x164>)
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c0e:	d039      	beq.n	8006c84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	4a27      	ldr	r2, [pc, #156]	; (8006cb4 <HAL_DMA_Init+0x15c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d11a      	bne.n	8006c50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006c1a:	4b29      	ldr	r3, [pc, #164]	; (8006cc0 <HAL_DMA_Init+0x168>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c22:	f003 031c 	and.w	r3, r3, #28
 8006c26:	210f      	movs	r1, #15
 8006c28:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	4924      	ldr	r1, [pc, #144]	; (8006cc0 <HAL_DMA_Init+0x168>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006c34:	4b22      	ldr	r3, [pc, #136]	; (8006cc0 <HAL_DMA_Init+0x168>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6859      	ldr	r1, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c40:	f003 031c 	and.w	r3, r3, #28
 8006c44:	fa01 f303 	lsl.w	r3, r1, r3
 8006c48:	491d      	ldr	r1, [pc, #116]	; (8006cc0 <HAL_DMA_Init+0x168>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	600b      	str	r3, [r1, #0]
 8006c4e:	e019      	b.n	8006c84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006c50:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <HAL_DMA_Init+0x16c>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c58:	f003 031c 	and.w	r3, r3, #28
 8006c5c:	210f      	movs	r1, #15
 8006c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c62:	43db      	mvns	r3, r3
 8006c64:	4917      	ldr	r1, [pc, #92]	; (8006cc4 <HAL_DMA_Init+0x16c>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006c6a:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <HAL_DMA_Init+0x16c>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6859      	ldr	r1, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c76:	f003 031c 	and.w	r3, r3, #28
 8006c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7e:	4911      	ldr	r1, [pc, #68]	; (8006cc4 <HAL_DMA_Init+0x16c>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	40020407 	.word	0x40020407
 8006cac:	bffdfff8 	.word	0xbffdfff8
 8006cb0:	cccccccd 	.word	0xcccccccd
 8006cb4:	40020000 	.word	0x40020000
 8006cb8:	bffdfbf8 	.word	0xbffdfbf8
 8006cbc:	40020400 	.word	0x40020400
 8006cc0:	400200a8 	.word	0x400200a8
 8006cc4:	400204a8 	.word	0x400204a8

08006cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_DMA_Start_IT+0x20>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e04b      	b.n	8006d80 <HAL_DMA_Start_IT+0xb8>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d13a      	bne.n	8006d72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0201 	bic.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f96b 	bl	8006ffc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 020e 	orr.w	r2, r2, #14
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e00f      	b.n	8006d60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0204 	bic.w	r2, r2, #4
 8006d4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 020a 	orr.w	r2, r2, #10
 8006d5e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0201 	orr.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e005      	b.n	8006d7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d008      	beq.n	8006db2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2204      	movs	r2, #4
 8006da4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e022      	b.n	8006df8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 020e 	bic.w	r2, r2, #14
 8006dc0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd6:	f003 021c 	and.w	r2, r3, #28
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	2101      	movs	r1, #1
 8006de0:	fa01 f202 	lsl.w	r2, r1, r2
 8006de4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d005      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2204      	movs	r2, #4
 8006e20:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	73fb      	strb	r3, [r7, #15]
 8006e26:	e029      	b.n	8006e7c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 020e 	bic.w	r2, r2, #14
 8006e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4c:	f003 021c 	and.w	r2, r3, #28
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	2101      	movs	r1, #1
 8006e56:	fa01 f202 	lsl.w	r2, r1, r2
 8006e5a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
    }
  }
  return status;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea2:	f003 031c 	and.w	r3, r3, #28
 8006ea6:	2204      	movs	r2, #4
 8006ea8:	409a      	lsls	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d026      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x7a>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d021      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d107      	bne.n	8006eda <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0204 	bic.w	r2, r2, #4
 8006ed8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ede:	f003 021c 	and.w	r2, r3, #28
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	2104      	movs	r1, #4
 8006ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8006eec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d071      	beq.n	8006fda <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006efe:	e06c      	b.n	8006fda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f04:	f003 031c 	and.w	r3, r3, #28
 8006f08:	2202      	movs	r2, #2
 8006f0a:	409a      	lsls	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d02e      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xec>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d029      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10b      	bne.n	8006f44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 020a 	bic.w	r2, r2, #10
 8006f3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f48:	f003 021c 	and.w	r2, r3, #28
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	2102      	movs	r1, #2
 8006f52:	fa01 f202 	lsl.w	r2, r1, r2
 8006f56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d038      	beq.n	8006fda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006f70:	e033      	b.n	8006fda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f76:	f003 031c 	and.w	r3, r3, #28
 8006f7a:	2208      	movs	r2, #8
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4013      	ands	r3, r2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d02a      	beq.n	8006fdc <HAL_DMA_IRQHandler+0x156>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d025      	beq.n	8006fdc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 020e 	bic.w	r2, r2, #14
 8006f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa4:	f003 021c 	and.w	r2, r3, #28
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	2101      	movs	r1, #1
 8006fae:	fa01 f202 	lsl.w	r2, r1, r2
 8006fb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
}
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700e:	f003 021c 	and.w	r2, r3, #28
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	2101      	movs	r1, #1
 8007018:	fa01 f202 	lsl.w	r2, r1, r2
 800701c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b10      	cmp	r3, #16
 800702c:	d108      	bne.n	8007040 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800703e:	e007      	b.n	8007050 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	60da      	str	r2, [r3, #12]
}
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007066:	2300      	movs	r3, #0
 8007068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800706a:	e148      	b.n	80072fe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	2101      	movs	r1, #1
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	fa01 f303 	lsl.w	r3, r1, r3
 8007078:	4013      	ands	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 813a 	beq.w	80072f8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d005      	beq.n	800709c <HAL_GPIO_Init+0x40>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d130      	bne.n	80070fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	2203      	movs	r2, #3
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	43db      	mvns	r3, r3
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4013      	ands	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	fa02 f303 	lsl.w	r3, r2, r3
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070d2:	2201      	movs	r2, #1
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	43db      	mvns	r3, r3
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4013      	ands	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	091b      	lsrs	r3, r3, #4
 80070e8:	f003 0201 	and.w	r2, r3, #1
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d017      	beq.n	800713a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	2203      	movs	r2, #3
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	43db      	mvns	r3, r3
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4013      	ands	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	fa02 f303 	lsl.w	r3, r2, r3
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d123      	bne.n	800718e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	08da      	lsrs	r2, r3, #3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3208      	adds	r2, #8
 800714e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	220f      	movs	r2, #15
 800715e:	fa02 f303 	lsl.w	r3, r2, r3
 8007162:	43db      	mvns	r3, r3
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4013      	ands	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	fa02 f303 	lsl.w	r3, r2, r3
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	4313      	orrs	r3, r2
 800717e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	08da      	lsrs	r2, r3, #3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3208      	adds	r2, #8
 8007188:	6939      	ldr	r1, [r7, #16]
 800718a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	2203      	movs	r2, #3
 800719a:	fa02 f303 	lsl.w	r3, r2, r3
 800719e:	43db      	mvns	r3, r3
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4013      	ands	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f003 0203 	and.w	r2, r3, #3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	fa02 f303 	lsl.w	r3, r2, r3
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8094 	beq.w	80072f8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071d0:	4b52      	ldr	r3, [pc, #328]	; (800731c <HAL_GPIO_Init+0x2c0>)
 80071d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d4:	4a51      	ldr	r2, [pc, #324]	; (800731c <HAL_GPIO_Init+0x2c0>)
 80071d6:	f043 0301 	orr.w	r3, r3, #1
 80071da:	6613      	str	r3, [r2, #96]	; 0x60
 80071dc:	4b4f      	ldr	r3, [pc, #316]	; (800731c <HAL_GPIO_Init+0x2c0>)
 80071de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80071e8:	4a4d      	ldr	r2, [pc, #308]	; (8007320 <HAL_GPIO_Init+0x2c4>)
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	089b      	lsrs	r3, r3, #2
 80071ee:	3302      	adds	r3, #2
 80071f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f003 0303 	and.w	r3, r3, #3
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	220f      	movs	r2, #15
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	43db      	mvns	r3, r3
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4013      	ands	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007212:	d00d      	beq.n	8007230 <HAL_GPIO_Init+0x1d4>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a43      	ldr	r2, [pc, #268]	; (8007324 <HAL_GPIO_Init+0x2c8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d007      	beq.n	800722c <HAL_GPIO_Init+0x1d0>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a42      	ldr	r2, [pc, #264]	; (8007328 <HAL_GPIO_Init+0x2cc>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d101      	bne.n	8007228 <HAL_GPIO_Init+0x1cc>
 8007224:	2302      	movs	r3, #2
 8007226:	e004      	b.n	8007232 <HAL_GPIO_Init+0x1d6>
 8007228:	2307      	movs	r3, #7
 800722a:	e002      	b.n	8007232 <HAL_GPIO_Init+0x1d6>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <HAL_GPIO_Init+0x1d6>
 8007230:	2300      	movs	r3, #0
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	f002 0203 	and.w	r2, r2, #3
 8007238:	0092      	lsls	r2, r2, #2
 800723a:	4093      	lsls	r3, r2
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007242:	4937      	ldr	r1, [pc, #220]	; (8007320 <HAL_GPIO_Init+0x2c4>)
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	089b      	lsrs	r3, r3, #2
 8007248:	3302      	adds	r3, #2
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007250:	4b36      	ldr	r3, [pc, #216]	; (800732c <HAL_GPIO_Init+0x2d0>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	43db      	mvns	r3, r3
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4013      	ands	r3, r2
 800725e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007274:	4a2d      	ldr	r2, [pc, #180]	; (800732c <HAL_GPIO_Init+0x2d0>)
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800727a:	4b2c      	ldr	r3, [pc, #176]	; (800732c <HAL_GPIO_Init+0x2d0>)
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	43db      	mvns	r3, r3
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4013      	ands	r3, r2
 8007288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800729e:	4a23      	ldr	r2, [pc, #140]	; (800732c <HAL_GPIO_Init+0x2d0>)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80072a4:	4b21      	ldr	r3, [pc, #132]	; (800732c <HAL_GPIO_Init+0x2d0>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	43db      	mvns	r3, r3
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4013      	ands	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80072c8:	4a18      	ldr	r2, [pc, #96]	; (800732c <HAL_GPIO_Init+0x2d0>)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80072ce:	4b17      	ldr	r3, [pc, #92]	; (800732c <HAL_GPIO_Init+0x2d0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	43db      	mvns	r3, r3
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	4013      	ands	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072f2:	4a0e      	ldr	r2, [pc, #56]	; (800732c <HAL_GPIO_Init+0x2d0>)
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	3301      	adds	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	f47f aeaf 	bne.w	800706c <HAL_GPIO_Init+0x10>
  }
}
 800730e:	bf00      	nop
 8007310:	bf00      	nop
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	40021000 	.word	0x40021000
 8007320:	40010000 	.word	0x40010000
 8007324:	48000400 	.word	0x48000400
 8007328:	48000800 	.word	0x48000800
 800732c:	40010400 	.word	0x40010400

08007330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	807b      	strh	r3, [r7, #2]
 800733c:	4613      	mov	r3, r2
 800733e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007340:	787b      	ldrb	r3, [r7, #1]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007346:	887a      	ldrh	r2, [r7, #2]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800734c:	e002      	b.n	8007354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800734e:	887a      	ldrh	r2, [r7, #2]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800736a:	4b08      	ldr	r3, [pc, #32]	; (800738c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800736c:	695a      	ldr	r2, [r3, #20]
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	4013      	ands	r3, r2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d006      	beq.n	8007384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007376:	4a05      	ldr	r2, [pc, #20]	; (800738c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007378:	88fb      	ldrh	r3, [r7, #6]
 800737a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	4618      	mov	r0, r3
 8007380:	f7fa f9ea 	bl	8001758 <HAL_GPIO_EXTI_Callback>
  }
}
 8007384:	bf00      	nop
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	40010400 	.word	0x40010400

08007390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e08d      	b.n	80074be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fa f910 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2224      	movs	r2, #36	; 0x24
 80073c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0201 	bic.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d107      	bne.n	800740a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	e006      	b.n	8007418 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007416:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d108      	bne.n	8007432 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800742e:	605a      	str	r2, [r3, #4]
 8007430:	e007      	b.n	8007442 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007440:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6812      	ldr	r2, [r2, #0]
 800744c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007454:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007464:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	69d9      	ldr	r1, [r3, #28]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1a      	ldr	r2, [r3, #32]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	4608      	mov	r0, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	461a      	mov	r2, r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	817b      	strh	r3, [r7, #10]
 80074da:	460b      	mov	r3, r1
 80074dc:	813b      	strh	r3, [r7, #8]
 80074de:	4613      	mov	r3, r2
 80074e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	f040 80f9 	bne.w	80076e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_I2C_Mem_Write+0x34>
 80074f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d105      	bne.n	8007508 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007502:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0ed      	b.n	80076e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800750e:	2b01      	cmp	r3, #1
 8007510:	d101      	bne.n	8007516 <HAL_I2C_Mem_Write+0x4e>
 8007512:	2302      	movs	r3, #2
 8007514:	e0e6      	b.n	80076e4 <HAL_I2C_Mem_Write+0x21c>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800751e:	f7fd ff39 	bl	8005394 <HAL_GetTick>
 8007522:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	2319      	movs	r3, #25
 800752a:	2201      	movs	r2, #1
 800752c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f955 	bl	80077e0 <I2C_WaitOnFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e0d1      	b.n	80076e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2221      	movs	r2, #33	; 0x21
 8007544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2240      	movs	r2, #64	; 0x40
 800754c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a3a      	ldr	r2, [r7, #32]
 800755a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007568:	88f8      	ldrh	r0, [r7, #6]
 800756a:	893a      	ldrh	r2, [r7, #8]
 800756c:	8979      	ldrh	r1, [r7, #10]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	4603      	mov	r3, r0
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f8b9 	bl	80076f0 <I2C_RequestMemoryWrite>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d005      	beq.n	8007590 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e0a9      	b.n	80076e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007594:	b29b      	uxth	r3, r3
 8007596:	2bff      	cmp	r3, #255	; 0xff
 8007598:	d90e      	bls.n	80075b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	22ff      	movs	r2, #255	; 0xff
 800759e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	8979      	ldrh	r1, [r7, #10]
 80075a8:	2300      	movs	r3, #0
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 facf 	bl	8007b54 <I2C_TransferConfig>
 80075b6:	e00f      	b.n	80075d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	8979      	ldrh	r1, [r7, #10]
 80075ca:	2300      	movs	r3, #0
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fabe 	bl	8007b54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f94e 	bl	800787e <I2C_WaitOnTXISFlagUntilTimeout>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e07b      	b.n	80076e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	781a      	ldrb	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007614:	3b01      	subs	r3, #1
 8007616:	b29a      	uxth	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d034      	beq.n	8007690 <HAL_I2C_Mem_Write+0x1c8>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	d130      	bne.n	8007690 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	2200      	movs	r2, #0
 8007636:	2180      	movs	r1, #128	; 0x80
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f8d1 	bl	80077e0 <I2C_WaitOnFlagUntilTimeout>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e04d      	b.n	80076e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764c:	b29b      	uxth	r3, r3
 800764e:	2bff      	cmp	r3, #255	; 0xff
 8007650:	d90e      	bls.n	8007670 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	22ff      	movs	r2, #255	; 0xff
 8007656:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765c:	b2da      	uxtb	r2, r3
 800765e:	8979      	ldrh	r1, [r7, #10]
 8007660:	2300      	movs	r3, #0
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fa73 	bl	8007b54 <I2C_TransferConfig>
 800766e:	e00f      	b.n	8007690 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800767e:	b2da      	uxtb	r2, r3
 8007680:	8979      	ldrh	r1, [r7, #10]
 8007682:	2300      	movs	r3, #0
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fa62 	bl	8007b54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d19e      	bne.n	80075d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 f934 	bl	800790c <I2C_WaitOnSTOPFlagUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e01a      	b.n	80076e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2220      	movs	r2, #32
 80076b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <HAL_I2C_Mem_Write+0x224>)
 80076c2:	400b      	ands	r3, r1
 80076c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	e000      	b.n	80076e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80076e2:	2302      	movs	r3, #2
  }
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	fe00e800 	.word	0xfe00e800

080076f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	4608      	mov	r0, r1
 80076fa:	4611      	mov	r1, r2
 80076fc:	461a      	mov	r2, r3
 80076fe:	4603      	mov	r3, r0
 8007700:	817b      	strh	r3, [r7, #10]
 8007702:	460b      	mov	r3, r1
 8007704:	813b      	strh	r3, [r7, #8]
 8007706:	4613      	mov	r3, r2
 8007708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	b2da      	uxtb	r2, r3
 800770e:	8979      	ldrh	r1, [r7, #10]
 8007710:	4b20      	ldr	r3, [pc, #128]	; (8007794 <I2C_RequestMemoryWrite+0xa4>)
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fa1b 	bl	8007b54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	69b9      	ldr	r1, [r7, #24]
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f8ab 	bl	800787e <I2C_WaitOnTXISFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e02c      	b.n	800778c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007732:	88fb      	ldrh	r3, [r7, #6]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d105      	bne.n	8007744 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007738:	893b      	ldrh	r3, [r7, #8]
 800773a:	b2da      	uxtb	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	629a      	str	r2, [r3, #40]	; 0x28
 8007742:	e015      	b.n	8007770 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007744:	893b      	ldrh	r3, [r7, #8]
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	b29b      	uxth	r3, r3
 800774a:	b2da      	uxtb	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	69b9      	ldr	r1, [r7, #24]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f891 	bl	800787e <I2C_WaitOnTXISFlagUntilTimeout>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e012      	b.n	800778c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007766:	893b      	ldrh	r3, [r7, #8]
 8007768:	b2da      	uxtb	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	2200      	movs	r2, #0
 8007778:	2180      	movs	r1, #128	; 0x80
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 f830 	bl	80077e0 <I2C_WaitOnFlagUntilTimeout>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e000      	b.n	800778c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	80002000 	.word	0x80002000

08007798 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d103      	bne.n	80077b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2200      	movs	r2, #0
 80077b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d007      	beq.n	80077d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	619a      	str	r2, [r3, #24]
  }
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	4613      	mov	r3, r2
 80077ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077f0:	e031      	b.n	8007856 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f8:	d02d      	beq.n	8007856 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077fa:	f7fd fdcb 	bl	8005394 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d302      	bcc.n	8007810 <I2C_WaitOnFlagUntilTimeout+0x30>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d122      	bne.n	8007856 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	4013      	ands	r3, r2
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	429a      	cmp	r2, r3
 800781e:	bf0c      	ite	eq
 8007820:	2301      	moveq	r3, #1
 8007822:	2300      	movne	r3, #0
 8007824:	b2db      	uxtb	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	429a      	cmp	r2, r3
 800782c:	d113      	bne.n	8007856 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007832:	f043 0220 	orr.w	r2, r3, #32
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e00f      	b.n	8007876 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	699a      	ldr	r2, [r3, #24]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4013      	ands	r3, r2
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	429a      	cmp	r2, r3
 8007864:	bf0c      	ite	eq
 8007866:	2301      	moveq	r3, #1
 8007868:	2300      	movne	r3, #0
 800786a:	b2db      	uxtb	r3, r3
 800786c:	461a      	mov	r2, r3
 800786e:	79fb      	ldrb	r3, [r7, #7]
 8007870:	429a      	cmp	r2, r3
 8007872:	d0be      	beq.n	80077f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800788a:	e033      	b.n	80078f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f87f 	bl	8007994 <I2C_IsErrorOccurred>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e031      	b.n	8007904 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d025      	beq.n	80078f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a8:	f7fd fd74 	bl	8005394 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d302      	bcc.n	80078be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d11a      	bne.n	80078f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d013      	beq.n	80078f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d0:	f043 0220 	orr.w	r2, r3, #32
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e007      	b.n	8007904 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d1c4      	bne.n	800788c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007918:	e02f      	b.n	800797a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f838 	bl	8007994 <I2C_IsErrorOccurred>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e02d      	b.n	800798a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792e:	f7fd fd31 	bl	8005394 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	429a      	cmp	r2, r3
 800793c:	d302      	bcc.n	8007944 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11a      	bne.n	800797a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b20      	cmp	r3, #32
 8007950:	d013      	beq.n	800797a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007956:	f043 0220 	orr.w	r2, r3, #32
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2220      	movs	r2, #32
 8007962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e007      	b.n	800798a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b20      	cmp	r3, #32
 8007986:	d1c8      	bne.n	800791a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	; 0x28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	f003 0310 	and.w	r3, r3, #16
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d068      	beq.n	8007a92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2210      	movs	r2, #16
 80079c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079c8:	e049      	b.n	8007a5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d045      	beq.n	8007a5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80079d2:	f7fd fcdf 	bl	8005394 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <I2C_IsErrorOccurred+0x54>
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d13a      	bne.n	8007a5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a0a:	d121      	bne.n	8007a50 <I2C_IsErrorOccurred+0xbc>
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a12:	d01d      	beq.n	8007a50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007a14:	7cfb      	ldrb	r3, [r7, #19]
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d01a      	beq.n	8007a50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007a2a:	f7fd fcb3 	bl	8005394 <HAL_GetTick>
 8007a2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a30:	e00e      	b.n	8007a50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a32:	f7fd fcaf 	bl	8005394 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	2b19      	cmp	r3, #25
 8007a3e:	d907      	bls.n	8007a50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	f043 0320 	orr.w	r3, r3, #32
 8007a46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007a4e:	e006      	b.n	8007a5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	d1e9      	bne.n	8007a32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d003      	beq.n	8007a74 <I2C_IsErrorOccurred+0xe0>
 8007a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0aa      	beq.n	80079ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d103      	bne.n	8007a84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2220      	movs	r2, #32
 8007a82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	f043 0304 	orr.w	r3, r3, #4
 8007a8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	f043 0301 	orr.w	r3, r3, #1
 8007aaa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ab4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	f043 0308 	orr.w	r3, r3, #8
 8007acc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ad6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	f043 0302 	orr.w	r3, r3, #2
 8007aee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007af8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01c      	beq.n	8007b42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7ff fe45 	bl	8007798 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <I2C_IsErrorOccurred+0x1bc>)
 8007b1a:	400b      	ands	r3, r1
 8007b1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	431a      	orrs	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3728      	adds	r7, #40	; 0x28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	fe00e800 	.word	0xfe00e800

08007b54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	607b      	str	r3, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	817b      	strh	r3, [r7, #10]
 8007b62:	4613      	mov	r3, r2
 8007b64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b66:	897b      	ldrh	r3, [r7, #10]
 8007b68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b6c:	7a7b      	ldrb	r3, [r7, #9]
 8007b6e:	041b      	lsls	r3, r3, #16
 8007b70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	0d5b      	lsrs	r3, r3, #21
 8007b8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b92:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <I2C_TransferConfig+0x60>)
 8007b94:	430b      	orrs	r3, r1
 8007b96:	43db      	mvns	r3, r3
 8007b98:	ea02 0103 	and.w	r1, r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	03ff63ff 	.word	0x03ff63ff

08007bb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	d138      	bne.n	8007c40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e032      	b.n	8007c42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2224      	movs	r2, #36	; 0x24
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0201 	bic.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6819      	ldr	r1, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0201 	orr.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e000      	b.n	8007c42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c40:	2302      	movs	r3, #2
  }
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d139      	bne.n	8007cd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e033      	b.n	8007cda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2224      	movs	r2, #36	; 0x24
 8007c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0201 	bic.w	r2, r2, #1
 8007c90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ca0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e000      	b.n	8007cda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cd8:	2302      	movs	r3, #2
  }
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf4:	4a0a      	ldr	r2, [pc, #40]	; (8007d20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8007cfc:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8007d08:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	4905      	ldr	r1, [pc, #20]	; (8007d24 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	604b      	str	r3, [r1, #4]
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	40021000 	.word	0x40021000
 8007d24:	40010000 	.word	0x40010000

08007d28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d2a:	b08b      	sub	sp, #44	; 0x2c
 8007d2c:	af06      	add	r7, sp, #24
 8007d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e0f8      	b.n	8007f2c <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f00a fe66 	bl	8012a20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2203      	movs	r2, #3
 8007d58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f005 fc0b 	bl	800d57c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	687e      	ldr	r6, [r7, #4]
 8007d6e:	466d      	mov	r5, sp
 8007d70:	f106 0410 	add.w	r4, r6, #16
 8007d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	602b      	str	r3, [r5, #0]
 8007d7c:	1d33      	adds	r3, r6, #4
 8007d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d80:	6838      	ldr	r0, [r7, #0]
 8007d82:	f005 fbd3 	bl	800d52c <USB_CoreInit>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e0c9      	b.n	8007f2c <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f005 fc07 	bl	800d5b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
 8007da8:	e040      	b.n	8007e2c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	440b      	add	r3, r1
 8007dba:	3301      	adds	r3, #1
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	440b      	add	r3, r1
 8007dd0:	7bfa      	ldrb	r2, [r7, #15]
 8007dd2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	440b      	add	r3, r1
 8007de4:	3303      	adds	r3, #3
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007dea:	7bfa      	ldrb	r2, [r7, #15]
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	440b      	add	r3, r1
 8007df8:	3338      	adds	r3, #56	; 0x38
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007dfe:	7bfa      	ldrb	r2, [r7, #15]
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	440b      	add	r3, r1
 8007e0c:	333c      	adds	r3, #60	; 0x3c
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007e12:	7bfa      	ldrb	r2, [r7, #15]
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	440b      	add	r3, r1
 8007e20:	3340      	adds	r3, #64	; 0x40
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	73fb      	strb	r3, [r7, #15]
 8007e2c:	7bfa      	ldrb	r2, [r7, #15]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d3b9      	bcc.n	8007daa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]
 8007e3a:	e044      	b.n	8007ec6 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007e3c:	7bfa      	ldrb	r2, [r7, #15]
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	440b      	add	r3, r1
 8007e4a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007e52:	7bfa      	ldrb	r2, [r7, #15]
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	440b      	add	r3, r1
 8007e60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007e64:	7bfa      	ldrb	r2, [r7, #15]
 8007e66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007e68:	7bfa      	ldrb	r2, [r7, #15]
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	440b      	add	r3, r1
 8007e76:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007e7e:	7bfa      	ldrb	r2, [r7, #15]
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	440b      	add	r3, r1
 8007e8c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007e94:	7bfa      	ldrb	r2, [r7, #15]
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	440b      	add	r3, r1
 8007ea2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007eaa:	7bfa      	ldrb	r2, [r7, #15]
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	440b      	add	r3, r1
 8007eb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	73fb      	strb	r3, [r7, #15]
 8007ec6:	7bfa      	ldrb	r2, [r7, #15]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d3b5      	bcc.n	8007e3c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	603b      	str	r3, [r7, #0]
 8007ed6:	687e      	ldr	r6, [r7, #4]
 8007ed8:	466d      	mov	r5, sp
 8007eda:	f106 0410 	add.w	r4, r6, #16
 8007ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	1d33      	adds	r3, r6, #4
 8007ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007eea:	6838      	ldr	r0, [r7, #0]
 8007eec:	f005 fb6e 	bl	800d5cc <USB_DevInit>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e014      	b.n	8007f2c <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d102      	bne.n	8007f20 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fc58 	bl	80097d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f007 fdff 	bl	800fb28 <USB_DevDisconnect>

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <HAL_PCD_Start+0x16>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e012      	b.n	8007f70 <HAL_PCD_Start+0x3c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f005 faf9 	bl	800d54e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f007 fdca 	bl	800fafa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f007 fde4 	bl	800fb52 <USB_ReadInterrupts>
 8007f8a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fb13 	bl	80085c2 <PCD_EP_ISR_Handler>

    return;
 8007f9c:	e110      	b.n	80081c0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d013      	beq.n	8007fd0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fba:	b292      	uxth	r2, r2
 8007fbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f00a fda8 	bl	8012b16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f8fc 	bl	80081c6 <HAL_PCD_SetAddress>

    return;
 8007fce:	e0f7      	b.n	80081c0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00c      	beq.n	8007ff4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007fec:	b292      	uxth	r2, r2
 8007fee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007ff2:	e0e5      	b.n	80081c0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008010:	b292      	uxth	r2, r2
 8008012:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008016:	e0d3      	b.n	80081c0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d034      	beq.n	800808c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0204 	bic.w	r2, r2, #4
 8008034:	b292      	uxth	r2, r2
 8008036:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008042:	b29a      	uxth	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0208 	bic.w	r2, r2, #8
 800804c:	b292      	uxth	r2, r2
 800804e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8008058:	2b01      	cmp	r3, #1
 800805a:	d107      	bne.n	800806c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008064:	2100      	movs	r1, #0
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f00b f806 	bl	8013078 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f00a fd8b 	bl	8012b88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800807a:	b29a      	uxth	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008084:	b292      	uxth	r2, r2
 8008086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800808a:	e099      	b.n	80081c0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008092:	2b00      	cmp	r3, #0
 8008094:	d027      	beq.n	80080e6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800809e:	b29a      	uxth	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f042 0208 	orr.w	r2, r2, #8
 80080a8:	b292      	uxth	r2, r2
 80080aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080c0:	b292      	uxth	r2, r2
 80080c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0204 	orr.w	r2, r2, #4
 80080d8:	b292      	uxth	r2, r2
 80080da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f00a fd38 	bl	8012b54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80080e4:	e06c      	b.n	80081c0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d040      	beq.n	8008172 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008102:	b292      	uxth	r2, r2
 8008104:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d12b      	bne.n	800816a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0204 	orr.w	r2, r2, #4
 8008124:	b292      	uxth	r2, r2
 8008126:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008132:	b29a      	uxth	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0208 	orr.w	r2, r2, #8
 800813c:	b292      	uxth	r2, r2
 800813e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008152:	b29b      	uxth	r3, r3
 8008154:	089b      	lsrs	r3, r3, #2
 8008156:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008160:	2101      	movs	r1, #1
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f00a ff88 	bl	8013078 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008168:	e02a      	b.n	80081c0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f00a fcf2 	bl	8012b54 <HAL_PCD_SuspendCallback>
    return;
 8008170:	e026      	b.n	80081c0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00f      	beq.n	800819c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008184:	b29a      	uxth	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800818e:	b292      	uxth	r2, r2
 8008190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f00a fcb0 	bl	8012afa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800819a:	e011      	b.n	80081c0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00c      	beq.n	80081c0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081b8:	b292      	uxth	r2, r2
 80081ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80081be:	bf00      	nop
  }
}
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	460b      	mov	r3, r1
 80081d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d101      	bne.n	80081e0 <HAL_PCD_SetAddress+0x1a>
 80081dc:	2302      	movs	r3, #2
 80081de:	e013      	b.n	8008208 <HAL_PCD_SetAddress+0x42>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	4611      	mov	r1, r2
 80081f8:	4618      	mov	r0, r3
 80081fa:	f007 fc6a 	bl	800fad2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	4608      	mov	r0, r1
 800821a:	4611      	mov	r1, r2
 800821c:	461a      	mov	r2, r3
 800821e:	4603      	mov	r3, r0
 8008220:	70fb      	strb	r3, [r7, #3]
 8008222:	460b      	mov	r3, r1
 8008224:	803b      	strh	r3, [r7, #0]
 8008226:	4613      	mov	r3, r2
 8008228:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800822e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008232:	2b00      	cmp	r3, #0
 8008234:	da0e      	bge.n	8008254 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008236:	78fb      	ldrb	r3, [r7, #3]
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	1c5a      	adds	r2, r3, #1
 800823e:	4613      	mov	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	705a      	strb	r2, [r3, #1]
 8008252:	e00e      	b.n	8008272 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	f003 0207 	and.w	r2, r3, #7
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	4413      	add	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	b2da      	uxtb	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800827e:	883a      	ldrh	r2, [r7, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	78ba      	ldrb	r2, [r7, #2]
 8008288:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800828a:	78bb      	ldrb	r3, [r7, #2]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d102      	bne.n	8008296 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_PCD_EP_Open+0x94>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e00e      	b.n	80082c2 <HAL_PCD_EP_Open+0xb2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68f9      	ldr	r1, [r7, #12]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f005 f9ac 	bl	800d610 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80082c0:	7afb      	ldrb	r3, [r7, #11]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80082d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	da0e      	bge.n	80082fc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	f003 0307 	and.w	r3, r3, #7
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	4413      	add	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2201      	movs	r2, #1
 80082f8:	705a      	strb	r2, [r3, #1]
 80082fa:	e00e      	b.n	800831a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082fc:	78fb      	ldrb	r3, [r7, #3]
 80082fe:	f003 0207 	and.w	r2, r3, #7
 8008302:	4613      	mov	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	4413      	add	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800831a:	78fb      	ldrb	r3, [r7, #3]
 800831c:	f003 0307 	and.w	r3, r3, #7
 8008320:	b2da      	uxtb	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_PCD_EP_Close+0x6a>
 8008330:	2302      	movs	r3, #2
 8008332:	e00e      	b.n	8008352 <HAL_PCD_EP_Close+0x88>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68f9      	ldr	r1, [r7, #12]
 8008342:	4618      	mov	r0, r3
 8008344:	f005 fd28 	bl	800dd98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	460b      	mov	r3, r1
 8008368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800836a:	7afb      	ldrb	r3, [r7, #11]
 800836c:	f003 0207 	and.w	r2, r3, #7
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4413      	add	r3, r2
 8008380:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2200      	movs	r2, #0
 8008392:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2200      	movs	r2, #0
 8008398:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800839a:	7afb      	ldrb	r3, [r7, #11]
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6979      	ldr	r1, [r7, #20]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f005 fee0 	bl	800e172 <USB_EPStartXfer>

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	f003 0207 	and.w	r2, r3, #7
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	440b      	add	r3, r1
 80083da:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80083de:	681b      	ldr	r3, [r3, #0]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	607a      	str	r2, [r7, #4]
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	460b      	mov	r3, r1
 80083fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2200      	movs	r2, #0
 8008430:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2201      	movs	r2, #1
 8008436:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	b2da      	uxtb	r2, r3
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6979      	ldr	r1, [r7, #20]
 800844a:	4618      	mov	r0, r3
 800844c:	f005 fe91 	bl	800e172 <USB_EPStartXfer>

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	f003 0207 	and.w	r2, r3, #7
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d901      	bls.n	8008478 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e04c      	b.n	8008512 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800847c:	2b00      	cmp	r3, #0
 800847e:	da0e      	bge.n	800849e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	4413      	add	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2201      	movs	r2, #1
 800849a:	705a      	strb	r2, [r3, #1]
 800849c:	e00c      	b.n	80084b8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800849e:	78fa      	ldrb	r2, [r7, #3]
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	4413      	add	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_PCD_EP_SetStall+0x7e>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e01c      	b.n	8008512 <HAL_PCD_EP_SetStall+0xb8>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68f9      	ldr	r1, [r7, #12]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f007 f9f4 	bl	800f8d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d108      	bne.n	8008508 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f007 fb35 	bl	800fb72 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	f003 020f 	and.w	r2, r3, #15
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d901      	bls.n	8008538 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e040      	b.n	80085ba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800853c:	2b00      	cmp	r3, #0
 800853e:	da0e      	bge.n	800855e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	1c5a      	adds	r2, r3, #1
 8008548:	4613      	mov	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	4413      	add	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	705a      	strb	r2, [r3, #1]
 800855c:	e00e      	b.n	800857c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	f003 0207 	and.w	r2, r3, #7
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	4413      	add	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	f003 0307 	and.w	r3, r3, #7
 8008588:	b2da      	uxtb	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008594:	2b01      	cmp	r3, #1
 8008596:	d101      	bne.n	800859c <HAL_PCD_EP_ClrStall+0x82>
 8008598:	2302      	movs	r3, #2
 800859a:	e00e      	b.n	80085ba <HAL_PCD_EP_ClrStall+0xa0>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68f9      	ldr	r1, [r7, #12]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f007 f9e3 	bl	800f976 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b096      	sub	sp, #88	; 0x58
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80085ca:	e3b1      	b.n	8008d30 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80085d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80085d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	f003 030f 	and.w	r3, r3, #15
 80085e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80085e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f040 8173 	bne.w	80088d6 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80085f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80085f4:	f003 0310 	and.w	r3, r3, #16
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d150      	bne.n	800869e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	b29b      	uxth	r3, r3
 8008604:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860c:	81fb      	strh	r3, [r7, #14]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	89fb      	ldrh	r3, [r7, #14]
 8008614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800861c:	b29b      	uxth	r3, r3
 800861e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3328      	adds	r3, #40	; 0x28
 8008624:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800862e:	b29b      	uxth	r3, r3
 8008630:	461a      	mov	r2, r3
 8008632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	4413      	add	r3, r2
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	4413      	add	r3, r2
 8008640:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800864a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800864c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800864e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008650:	695a      	ldr	r2, [r3, #20]
 8008652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	441a      	add	r2, r3
 8008658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800865a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800865c:	2100      	movs	r1, #0
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f00a fa31 	bl	8012ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 835f 	beq.w	8008d30 <PCD_EP_ISR_Handler+0x76e>
 8008672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f040 835a 	bne.w	8008d30 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008682:	b2db      	uxtb	r3, r3
 8008684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008688:	b2da      	uxtb	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	b292      	uxth	r2, r2
 8008690:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800869c:	e348      	b.n	8008d30 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80086a4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80086b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80086b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d032      	beq.n	8008722 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	461a      	mov	r2, r3
 80086c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	4413      	add	r3, r2
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6812      	ldr	r2, [r2, #0]
 80086d4:	4413      	add	r3, r2
 80086d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80086e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80086ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80086f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f007 fa89 	bl	800fc0e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	b29a      	uxth	r2, r3
 8008704:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008708:	4013      	ands	r3, r2
 800870a:	823b      	strh	r3, [r7, #16]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	8a3a      	ldrh	r2, [r7, #16]
 8008712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008716:	b292      	uxth	r2, r2
 8008718:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f00a f9a6 	bl	8012a6c <HAL_PCD_SetupStageCallback>
 8008720:	e306      	b.n	8008d30 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008722:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8008726:	2b00      	cmp	r3, #0
 8008728:	f280 8302 	bge.w	8008d30 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	b29a      	uxth	r2, r3
 8008734:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008738:	4013      	ands	r3, r2
 800873a:	83fb      	strh	r3, [r7, #30]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	8bfa      	ldrh	r2, [r7, #30]
 8008742:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008746:	b292      	uxth	r2, r2
 8008748:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008752:	b29b      	uxth	r3, r3
 8008754:	461a      	mov	r2, r3
 8008756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	4413      	add	r3, r2
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6812      	ldr	r2, [r2, #0]
 8008762:	4413      	add	r3, r2
 8008764:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800876e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008770:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d019      	beq.n	80087ae <PCD_EP_ISR_Handler+0x1ec>
 800877a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d015      	beq.n	80087ae <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008788:	6959      	ldr	r1, [r3, #20]
 800878a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800878c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800878e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008790:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008792:	b29b      	uxth	r3, r3
 8008794:	f007 fa3b 	bl	800fc0e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800879a:	695a      	ldr	r2, [r3, #20]
 800879c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	441a      	add	r2, r3
 80087a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80087a6:	2100      	movs	r1, #0
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f00a f971 	bl	8012a90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80087b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80087bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f040 82b5 	bne.w	8008d30 <PCD_EP_ISR_Handler+0x76e>
 80087c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80087ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80087ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087d2:	f000 82ad 	beq.w	8008d30 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	61bb      	str	r3, [r7, #24]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	4413      	add	r3, r2
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008800:	b29a      	uxth	r2, r3
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	801a      	strh	r2, [r3, #0]
 8008806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	2b3e      	cmp	r3, #62	; 0x3e
 800880c:	d91d      	bls.n	800884a <PCD_EP_ISR_Handler+0x288>
 800880e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	095b      	lsrs	r3, r3, #5
 8008814:	647b      	str	r3, [r7, #68]	; 0x44
 8008816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f003 031f 	and.w	r3, r3, #31
 800881e:	2b00      	cmp	r3, #0
 8008820:	d102      	bne.n	8008828 <PCD_EP_ISR_Handler+0x266>
 8008822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008824:	3b01      	subs	r3, #1
 8008826:	647b      	str	r3, [r7, #68]	; 0x44
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29a      	uxth	r2, r3
 800882e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008830:	b29b      	uxth	r3, r3
 8008832:	029b      	lsls	r3, r3, #10
 8008834:	b29b      	uxth	r3, r3
 8008836:	4313      	orrs	r3, r2
 8008838:	b29b      	uxth	r3, r3
 800883a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800883e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008842:	b29a      	uxth	r2, r3
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	e026      	b.n	8008898 <PCD_EP_ISR_Handler+0x2d6>
 800884a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <PCD_EP_ISR_Handler+0x2a6>
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	b29b      	uxth	r3, r3
 8008858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800885c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008860:	b29a      	uxth	r2, r3
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	801a      	strh	r2, [r3, #0]
 8008866:	e017      	b.n	8008898 <PCD_EP_ISR_Handler+0x2d6>
 8008868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	085b      	lsrs	r3, r3, #1
 800886e:	647b      	str	r3, [r7, #68]	; 0x44
 8008870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <PCD_EP_ISR_Handler+0x2c0>
 800887c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800887e:	3301      	adds	r3, #1
 8008880:	647b      	str	r3, [r7, #68]	; 0x44
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29a      	uxth	r2, r3
 8008888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888a:	b29b      	uxth	r3, r3
 800888c:	029b      	lsls	r3, r3, #10
 800888e:	b29b      	uxth	r3, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	b29a      	uxth	r2, r3
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a8:	827b      	strh	r3, [r7, #18]
 80088aa:	8a7b      	ldrh	r3, [r7, #18]
 80088ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088b0:	827b      	strh	r3, [r7, #18]
 80088b2:	8a7b      	ldrh	r3, [r7, #18]
 80088b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088b8:	827b      	strh	r3, [r7, #18]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	8a7b      	ldrh	r3, [r7, #18]
 80088c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	8013      	strh	r3, [r2, #0]
 80088d4:	e22c      	b.n	8008d30 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80088ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f280 80f6 	bge.w	8008ae0 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	461a      	mov	r2, r3
 80088fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29a      	uxth	r2, r3
 8008906:	f640 738f 	movw	r3, #3983	; 0xf8f
 800890a:	4013      	ands	r3, r2
 800890c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8008922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008926:	b292      	uxth	r2, r2
 8008928:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800892a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	4413      	add	r3, r2
 800893e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008942:	7b1b      	ldrb	r3, [r3, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d123      	bne.n	8008990 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008950:	b29b      	uxth	r3, r3
 8008952:	461a      	mov	r2, r3
 8008954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	4413      	add	r3, r2
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	6812      	ldr	r2, [r2, #0]
 8008960:	4413      	add	r3, r2
 8008962:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800896c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8008970:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 808e 	beq.w	8008a96 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008980:	6959      	ldr	r1, [r3, #20]
 8008982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008984:	88da      	ldrh	r2, [r3, #6]
 8008986:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800898a:	f007 f940 	bl	800fc0e <USB_ReadPMA>
 800898e:	e082      	b.n	8008a96 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008992:	78db      	ldrb	r3, [r3, #3]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d10a      	bne.n	80089ae <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008998:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800899c:	461a      	mov	r2, r3
 800899e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f9d3 	bl	8008d4c <HAL_PCD_EP_DB_Receive>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80089ac:	e073      	b.n	8008a96 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	441a      	add	r2, r3
 80089da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80089de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d022      	beq.n	8008a52 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	461a      	mov	r2, r3
 8008a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	4413      	add	r3, r2
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6812      	ldr	r2, [r2, #0]
 8008a24:	4413      	add	r3, r2
 8008a26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a30:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008a34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d02c      	beq.n	8008a96 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6818      	ldr	r0, [r3, #0]
 8008a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a42:	6959      	ldr	r1, [r3, #20]
 8008a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a46:	891a      	ldrh	r2, [r3, #8]
 8008a48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008a4c:	f007 f8df 	bl	800fc0e <USB_ReadPMA>
 8008a50:	e021      	b.n	8008a96 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	4413      	add	r3, r2
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	6812      	ldr	r2, [r2, #0]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008a7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d009      	beq.n	8008a96 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a88:	6959      	ldr	r1, [r3, #20]
 8008a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a8c:	895a      	ldrh	r2, [r3, #10]
 8008a8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008a92:	f007 f8bc 	bl	800fc0e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a98:	69da      	ldr	r2, [r3, #28]
 8008a9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008a9e:	441a      	add	r2, r3
 8008aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aa2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aa6:	695a      	ldr	r2, [r3, #20]
 8008aa8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008aac:	441a      	add	r2, r3
 8008aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <PCD_EP_ISR_Handler+0x504>
 8008aba:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8008abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d206      	bcs.n	8008ad4 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f009 ffdf 	bl	8012a90 <HAL_PCD_DataOutStageCallback>
 8008ad2:	e005      	b.n	8008ae0 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ada:	4618      	mov	r0, r3
 8008adc:	f005 fb49 	bl	800e172 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008ae0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 8121 	beq.w	8008d30 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8008aee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	4413      	add	r3, r2
 8008b00:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	441a      	add	r2, r3
 8008b2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b40:	78db      	ldrb	r3, [r3, #3]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	f040 80a2 	bne.w	8008c8c <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8008b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b50:	7b1b      	ldrb	r3, [r3, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 8093 	beq.w	8008c7e <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008b58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d046      	beq.n	8008bf2 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b66:	785b      	ldrb	r3, [r3, #1]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d126      	bne.n	8008bba <PCD_EP_ISR_Handler+0x5f8>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	4413      	add	r3, r2
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
 8008b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	00da      	lsls	r2, r3, #3
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b92:	623b      	str	r3, [r7, #32]
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	801a      	strh	r2, [r3, #0]
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	e061      	b.n	8008c7e <PCD_EP_ISR_Handler+0x6bc>
 8008bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bbc:	785b      	ldrb	r3, [r3, #1]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d15d      	bne.n	8008c7e <PCD_EP_ISR_Handler+0x6bc>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	4413      	add	r3, r2
 8008bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	00da      	lsls	r2, r3, #3
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	4413      	add	r3, r2
 8008be4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	2200      	movs	r2, #0
 8008bee:	801a      	strh	r2, [r3, #0]
 8008bf0:	e045      	b.n	8008c7e <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bfa:	785b      	ldrb	r3, [r3, #1]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d126      	bne.n	8008c4e <PCD_EP_ISR_Handler+0x68c>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	637b      	str	r3, [r7, #52]	; 0x34
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	461a      	mov	r2, r3
 8008c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c14:	4413      	add	r3, r2
 8008c16:	637b      	str	r3, [r7, #52]	; 0x34
 8008c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	00da      	lsls	r2, r3, #3
 8008c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c20:	4413      	add	r3, r2
 8008c22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c26:	633b      	str	r3, [r7, #48]	; 0x30
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	801a      	strh	r2, [r3, #0]
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	e017      	b.n	8008c7e <PCD_EP_ISR_Handler+0x6bc>
 8008c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d113      	bne.n	8008c7e <PCD_EP_ISR_Handler+0x6bc>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c64:	4413      	add	r3, r2
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	00da      	lsls	r2, r3, #3
 8008c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c70:	4413      	add	r3, r2
 8008c72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c76:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f009 ff1e 	bl	8012ac6 <HAL_PCD_DataInStageCallback>
 8008c8a:	e051      	b.n	8008d30 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008c8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d144      	bne.n	8008d22 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	4413      	add	r3, r2
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cbc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8008cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cc2:	699a      	ldr	r2, [r3, #24]
 8008cc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d907      	bls.n	8008cdc <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8008ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cce:	699a      	ldr	r2, [r3, #24]
 8008cd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008cd4:	1ad2      	subs	r2, r2, r3
 8008cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cd8:	619a      	str	r2, [r3, #24]
 8008cda:	e002      	b.n	8008ce2 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8008cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cde:	2200      	movs	r2, #0
 8008ce0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f009 fee8 	bl	8012ac6 <HAL_PCD_DataInStageCallback>
 8008cf6:	e01b      	b.n	8008d30 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cfa:	695a      	ldr	r2, [r3, #20]
 8008cfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008d00:	441a      	add	r2, r3
 8008d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d04:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d08:	69da      	ldr	r2, [r3, #28]
 8008d0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008d0e:	441a      	add	r2, r3
 8008d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d12:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f005 fa29 	bl	800e172 <USB_EPStartXfer>
 8008d20:	e006      	b.n	8008d30 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008d22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008d26:	461a      	mov	r2, r3
 8008d28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f917 	bl	8008f5e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	b21b      	sxth	r3, r3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f6ff ac45 	blt.w	80085cc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3758      	adds	r7, #88	; 0x58
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b088      	sub	sp, #32
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	4613      	mov	r3, r2
 8008d58:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008d5a:	88fb      	ldrh	r3, [r7, #6]
 8008d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d07c      	beq.n	8008e5e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	461a      	mov	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	4413      	add	r3, r2
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	6812      	ldr	r2, [r2, #0]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d88:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	8b7b      	ldrh	r3, [r7, #26]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d306      	bcc.n	8008da2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	699a      	ldr	r2, [r3, #24]
 8008d98:	8b7b      	ldrh	r3, [r7, #26]
 8008d9a:	1ad2      	subs	r2, r2, r3
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	619a      	str	r2, [r3, #24]
 8008da0:	e002      	b.n	8008da8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2200      	movs	r2, #0
 8008da6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d123      	bne.n	8008df8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	461a      	mov	r2, r3
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dca:	833b      	strh	r3, [r7, #24]
 8008dcc:	8b3b      	ldrh	r3, [r7, #24]
 8008dce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008dd2:	833b      	strh	r3, [r7, #24]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	441a      	add	r2, r3
 8008de2:	8b3b      	ldrh	r3, [r7, #24]
 8008de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008df8:	88fb      	ldrh	r3, [r7, #6]
 8008dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01f      	beq.n	8008e42 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e1c:	82fb      	strh	r3, [r7, #22]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	441a      	add	r2, r3
 8008e2c:	8afb      	ldrh	r3, [r7, #22]
 8008e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008e42:	8b7b      	ldrh	r3, [r7, #26]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8085 	beq.w	8008f54 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	6959      	ldr	r1, [r3, #20]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	891a      	ldrh	r2, [r3, #8]
 8008e56:	8b7b      	ldrh	r3, [r7, #26]
 8008e58:	f006 fed9 	bl	800fc0e <USB_ReadPMA>
 8008e5c:	e07a      	b.n	8008f54 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	4413      	add	r3, r2
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	6812      	ldr	r2, [r2, #0]
 8008e76:	4413      	add	r3, r2
 8008e78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e82:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	699a      	ldr	r2, [r3, #24]
 8008e88:	8b7b      	ldrh	r3, [r7, #26]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d306      	bcc.n	8008e9c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	8b7b      	ldrh	r3, [r7, #26]
 8008e94:	1ad2      	subs	r2, r2, r3
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	619a      	str	r2, [r3, #24]
 8008e9a:	e002      	b.n	8008ea2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d123      	bne.n	8008ef2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec4:	83fb      	strh	r3, [r7, #30]
 8008ec6:	8bfb      	ldrh	r3, [r7, #30]
 8008ec8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ecc:	83fb      	strh	r3, [r7, #30]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	441a      	add	r2, r3
 8008edc:	8bfb      	ldrh	r3, [r7, #30]
 8008ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008ef2:	88fb      	ldrh	r3, [r7, #6]
 8008ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d11f      	bne.n	8008f3c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f16:	83bb      	strh	r3, [r7, #28]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	441a      	add	r2, r3
 8008f26:	8bbb      	ldrh	r3, [r7, #28]
 8008f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008f3c:	8b7b      	ldrh	r3, [r7, #26]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d008      	beq.n	8008f54 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	6959      	ldr	r1, [r3, #20]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	895a      	ldrh	r2, [r3, #10]
 8008f4e:	8b7b      	ldrh	r3, [r7, #26]
 8008f50:	f006 fe5d 	bl	800fc0e <USB_ReadPMA>
    }
  }

  return count;
 8008f54:	8b7b      	ldrh	r3, [r7, #26]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3720      	adds	r7, #32
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b0a4      	sub	sp, #144	; 0x90
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008f6c:	88fb      	ldrh	r3, [r7, #6]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 81db 	beq.w	800932e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	00db      	lsls	r3, r3, #3
 8008f8a:	4413      	add	r3, r2
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	6812      	ldr	r2, [r2, #0]
 8008f90:	4413      	add	r3, r2
 8008f92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f9c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d907      	bls.n	8008fbc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	699a      	ldr	r2, [r3, #24]
 8008fb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008fb4:	1ad2      	subs	r2, r2, r3
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	619a      	str	r2, [r3, #24]
 8008fba:	e002      	b.n	8008fc2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f040 80b9 	bne.w	800913e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	785b      	ldrb	r3, [r3, #1]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d126      	bne.n	8009022 <HAL_PCD_EP_DB_Transmit+0xc4>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	4413      	add	r3, r2
 8008fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	00da      	lsls	r2, r3, #3
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	b29b      	uxth	r3, r3
 8009002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009006:	b29a      	uxth	r2, r3
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900a:	801a      	strh	r2, [r3, #0]
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	b29b      	uxth	r3, r3
 8009012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800901a:	b29a      	uxth	r2, r3
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	801a      	strh	r2, [r3, #0]
 8009020:	e01a      	b.n	8009058 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d116      	bne.n	8009058 <HAL_PCD_EP_DB_Transmit+0xfa>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	637b      	str	r3, [r7, #52]	; 0x34
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009038:	b29b      	uxth	r3, r3
 800903a:	461a      	mov	r2, r3
 800903c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903e:	4413      	add	r3, r2
 8009040:	637b      	str	r3, [r7, #52]	; 0x34
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	00da      	lsls	r2, r3, #3
 8009048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904a:	4413      	add	r3, r2
 800904c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009050:	633b      	str	r3, [r7, #48]	; 0x30
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	2200      	movs	r2, #0
 8009056:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	627b      	str	r3, [r7, #36]	; 0x24
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d126      	bne.n	80090b4 <HAL_PCD_EP_DB_Transmit+0x156>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	61fb      	str	r3, [r7, #28]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009074:	b29b      	uxth	r3, r3
 8009076:	461a      	mov	r2, r3
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	4413      	add	r3, r2
 800907c:	61fb      	str	r3, [r7, #28]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	00da      	lsls	r2, r3, #3
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	4413      	add	r3, r2
 8009088:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800908c:	61bb      	str	r3, [r7, #24]
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	b29b      	uxth	r3, r3
 8009094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009098:	b29a      	uxth	r2, r3
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	801a      	strh	r2, [r3, #0]
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	e017      	b.n	80090e4 <HAL_PCD_EP_DB_Transmit+0x186>
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	785b      	ldrb	r3, [r3, #1]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d113      	bne.n	80090e4 <HAL_PCD_EP_DB_Transmit+0x186>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	4413      	add	r3, r2
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	00da      	lsls	r2, r3, #3
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	4413      	add	r3, r2
 80090d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80090dc:	623b      	str	r3, [r7, #32]
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	2200      	movs	r2, #0
 80090e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	4619      	mov	r1, r3
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f009 fceb 	bl	8012ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80090f0:	88fb      	ldrh	r3, [r7, #6]
 80090f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 82fa 	beq.w	80096f0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	461a      	mov	r2, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	b29b      	uxth	r3, r3
 800910e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009116:	82fb      	strh	r3, [r7, #22]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	441a      	add	r2, r3
 8009126:	8afb      	ldrh	r3, [r7, #22]
 8009128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800912c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009138:	b29b      	uxth	r3, r3
 800913a:	8013      	strh	r3, [r2, #0]
 800913c:	e2d8      	b.n	80096f0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800913e:	88fb      	ldrh	r3, [r7, #6]
 8009140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d021      	beq.n	800918c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	b29b      	uxth	r3, r3
 800915a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800915e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009162:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	441a      	add	r2, r3
 8009174:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800917c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009188:	b29b      	uxth	r3, r3
 800918a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009192:	2b01      	cmp	r3, #1
 8009194:	f040 82ac 	bne.w	80096f0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	695a      	ldr	r2, [r3, #20]
 800919c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80091a0:	441a      	add	r2, r3
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	69da      	ldr	r2, [r3, #28]
 80091aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80091ae:	441a      	add	r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	6a1a      	ldr	r2, [r3, #32]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d30b      	bcc.n	80091d8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	6a1a      	ldr	r2, [r3, #32]
 80091cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091d0:	1ad2      	subs	r2, r2, r3
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	621a      	str	r2, [r3, #32]
 80091d6:	e017      	b.n	8009208 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d108      	bne.n	80091f2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80091e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80091e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80091f0:	e00a      	b.n	8009208 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2200      	movs	r2, #0
 8009206:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d165      	bne.n	80092dc <HAL_PCD_EP_DB_Transmit+0x37e>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800921e:	b29b      	uxth	r3, r3
 8009220:	461a      	mov	r2, r3
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009224:	4413      	add	r3, r2
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	00da      	lsls	r2, r3, #3
 800922e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009230:	4413      	add	r3, r2
 8009232:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009236:	63bb      	str	r3, [r7, #56]	; 0x38
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009242:	b29a      	uxth	r2, r3
 8009244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800924c:	2b3e      	cmp	r3, #62	; 0x3e
 800924e:	d91d      	bls.n	800928c <HAL_PCD_EP_DB_Transmit+0x32e>
 8009250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009254:	095b      	lsrs	r3, r3, #5
 8009256:	64bb      	str	r3, [r7, #72]	; 0x48
 8009258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800925c:	f003 031f 	and.w	r3, r3, #31
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <HAL_PCD_EP_DB_Transmit+0x30c>
 8009264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009266:	3b01      	subs	r3, #1
 8009268:	64bb      	str	r3, [r7, #72]	; 0x48
 800926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	b29a      	uxth	r2, r3
 8009270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009272:	b29b      	uxth	r3, r3
 8009274:	029b      	lsls	r3, r3, #10
 8009276:	b29b      	uxth	r3, r3
 8009278:	4313      	orrs	r3, r2
 800927a:	b29b      	uxth	r3, r3
 800927c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009284:	b29a      	uxth	r2, r3
 8009286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009288:	801a      	strh	r2, [r3, #0]
 800928a:	e044      	b.n	8009316 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800928c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <HAL_PCD_EP_DB_Transmit+0x34c>
 8009294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009296:	881b      	ldrh	r3, [r3, #0]
 8009298:	b29b      	uxth	r3, r3
 800929a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800929e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	801a      	strh	r2, [r3, #0]
 80092a8:	e035      	b.n	8009316 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80092aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092ae:	085b      	lsrs	r3, r3, #1
 80092b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80092b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <HAL_PCD_EP_DB_Transmit+0x366>
 80092be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c0:	3301      	adds	r3, #1
 80092c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	881b      	ldrh	r3, [r3, #0]
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	029b      	lsls	r3, r3, #10
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	4313      	orrs	r3, r2
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	801a      	strh	r2, [r3, #0]
 80092da:	e01c      	b.n	8009316 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d118      	bne.n	8009316 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	647b      	str	r3, [r7, #68]	; 0x44
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092f8:	4413      	add	r3, r2
 80092fa:	647b      	str	r3, [r7, #68]	; 0x44
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	00da      	lsls	r2, r3, #3
 8009302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009304:	4413      	add	r3, r2
 8009306:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800930a:	643b      	str	r3, [r7, #64]	; 0x40
 800930c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009310:	b29a      	uxth	r2, r3
 8009312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009314:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	6959      	ldr	r1, [r3, #20]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	891a      	ldrh	r2, [r3, #8]
 8009322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009326:	b29b      	uxth	r3, r3
 8009328:	f006 fc2f 	bl	800fb8a <USB_WritePMA>
 800932c:	e1e0      	b.n	80096f0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009336:	b29b      	uxth	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	4413      	add	r3, r2
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	4413      	add	r3, r2
 8009348:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009352:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	699a      	ldr	r2, [r3, #24]
 800935a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800935e:	429a      	cmp	r2, r3
 8009360:	d307      	bcc.n	8009372 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	699a      	ldr	r2, [r3, #24]
 8009366:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800936a:	1ad2      	subs	r2, r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	619a      	str	r2, [r3, #24]
 8009370:	e002      	b.n	8009378 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2200      	movs	r2, #0
 8009376:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	2b00      	cmp	r3, #0
 800937e:	f040 80c0 	bne.w	8009502 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d126      	bne.n	80093d8 <HAL_PCD_EP_DB_Transmit+0x47a>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009398:	b29b      	uxth	r3, r3
 800939a:	461a      	mov	r2, r3
 800939c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800939e:	4413      	add	r3, r2
 80093a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	00da      	lsls	r2, r3, #3
 80093a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093aa:	4413      	add	r3, r2
 80093ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80093b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80093b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093bc:	b29a      	uxth	r2, r3
 80093be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093c0:	801a      	strh	r2, [r3, #0]
 80093c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093d4:	801a      	strh	r2, [r3, #0]
 80093d6:	e01a      	b.n	800940e <HAL_PCD_EP_DB_Transmit+0x4b0>
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	785b      	ldrb	r3, [r3, #1]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d116      	bne.n	800940e <HAL_PCD_EP_DB_Transmit+0x4b0>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	667b      	str	r3, [r7, #100]	; 0x64
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	461a      	mov	r2, r3
 80093f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093f4:	4413      	add	r3, r2
 80093f6:	667b      	str	r3, [r7, #100]	; 0x64
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	00da      	lsls	r2, r3, #3
 80093fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009400:	4413      	add	r3, r2
 8009402:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009406:	663b      	str	r3, [r7, #96]	; 0x60
 8009408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800940a:	2200      	movs	r2, #0
 800940c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	677b      	str	r3, [r7, #116]	; 0x74
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d12b      	bne.n	8009474 <HAL_PCD_EP_DB_Transmit+0x516>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800942a:	b29b      	uxth	r3, r3
 800942c:	461a      	mov	r2, r3
 800942e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009430:	4413      	add	r3, r2
 8009432:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	00da      	lsls	r2, r3, #3
 800943a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800943c:	4413      	add	r3, r2
 800943e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009442:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009446:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	b29b      	uxth	r3, r3
 800944e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009452:	b29a      	uxth	r2, r3
 8009454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009458:	801a      	strh	r2, [r3, #0]
 800945a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	b29b      	uxth	r3, r3
 8009462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800946a:	b29a      	uxth	r2, r3
 800946c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009470:	801a      	strh	r2, [r3, #0]
 8009472:	e017      	b.n	80094a4 <HAL_PCD_EP_DB_Transmit+0x546>
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	785b      	ldrb	r3, [r3, #1]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d113      	bne.n	80094a4 <HAL_PCD_EP_DB_Transmit+0x546>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009484:	b29b      	uxth	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800948a:	4413      	add	r3, r2
 800948c:	677b      	str	r3, [r7, #116]	; 0x74
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	00da      	lsls	r2, r3, #3
 8009494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009496:	4413      	add	r3, r2
 8009498:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800949c:	673b      	str	r3, [r7, #112]	; 0x70
 800949e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094a0:	2200      	movs	r2, #0
 80094a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	4619      	mov	r1, r3
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f009 fb0b 	bl	8012ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80094b0:	88fb      	ldrh	r3, [r7, #6]
 80094b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f040 811a 	bne.w	80096f0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	441a      	add	r2, r3
 80094e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80094ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	8013      	strh	r3, [r2, #0]
 8009500:	e0f6      	b.n	80096f0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009502:	88fb      	ldrh	r3, [r7, #6]
 8009504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d121      	bne.n	8009550 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	461a      	mov	r2, r3
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009526:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	441a      	add	r2, r3
 8009538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800953c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800954c:	b29b      	uxth	r3, r3
 800954e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009556:	2b01      	cmp	r3, #1
 8009558:	f040 80ca 	bne.w	80096f0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	695a      	ldr	r2, [r3, #20]
 8009560:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009564:	441a      	add	r2, r3
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	69da      	ldr	r2, [r3, #28]
 800956e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009572:	441a      	add	r2, r3
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	6a1a      	ldr	r2, [r3, #32]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	429a      	cmp	r2, r3
 8009582:	d30b      	bcc.n	800959c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	6a1a      	ldr	r2, [r3, #32]
 8009590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009594:	1ad2      	subs	r2, r2, r3
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	621a      	str	r2, [r3, #32]
 800959a:	e017      	b.n	80095cc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	6a1b      	ldr	r3, [r3, #32]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d108      	bne.n	80095b6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80095a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80095a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80095b4:	e00a      	b.n	80095cc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2200      	movs	r2, #0
 80095c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	657b      	str	r3, [r7, #84]	; 0x54
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	785b      	ldrb	r3, [r3, #1]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d165      	bne.n	80096a6 <HAL_PCD_EP_DB_Transmit+0x748>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	461a      	mov	r2, r3
 80095ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095ee:	4413      	add	r3, r2
 80095f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	00da      	lsls	r2, r3, #3
 80095f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095fa:	4413      	add	r3, r2
 80095fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009600:	65bb      	str	r3, [r7, #88]	; 0x58
 8009602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	b29b      	uxth	r3, r3
 8009608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800960c:	b29a      	uxth	r2, r3
 800960e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009610:	801a      	strh	r2, [r3, #0]
 8009612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009616:	2b3e      	cmp	r3, #62	; 0x3e
 8009618:	d91d      	bls.n	8009656 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800961a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800961e:	095b      	lsrs	r3, r3, #5
 8009620:	66bb      	str	r3, [r7, #104]	; 0x68
 8009622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009626:	f003 031f 	and.w	r3, r3, #31
 800962a:	2b00      	cmp	r3, #0
 800962c:	d102      	bne.n	8009634 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800962e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009630:	3b01      	subs	r3, #1
 8009632:	66bb      	str	r3, [r7, #104]	; 0x68
 8009634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	b29a      	uxth	r2, r3
 800963a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800963c:	b29b      	uxth	r3, r3
 800963e:	029b      	lsls	r3, r3, #10
 8009640:	b29b      	uxth	r3, r3
 8009642:	4313      	orrs	r3, r2
 8009644:	b29b      	uxth	r3, r3
 8009646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800964a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800964e:	b29a      	uxth	r2, r3
 8009650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009652:	801a      	strh	r2, [r3, #0]
 8009654:	e041      	b.n	80096da <HAL_PCD_EP_DB_Transmit+0x77c>
 8009656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <HAL_PCD_EP_DB_Transmit+0x716>
 800965e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	b29b      	uxth	r3, r3
 8009664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800966c:	b29a      	uxth	r2, r3
 800966e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009670:	801a      	strh	r2, [r3, #0]
 8009672:	e032      	b.n	80096da <HAL_PCD_EP_DB_Transmit+0x77c>
 8009674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009678:	085b      	lsrs	r3, r3, #1
 800967a:	66bb      	str	r3, [r7, #104]	; 0x68
 800967c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <HAL_PCD_EP_DB_Transmit+0x730>
 8009688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800968a:	3301      	adds	r3, #1
 800968c:	66bb      	str	r3, [r7, #104]	; 0x68
 800968e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	b29a      	uxth	r2, r3
 8009694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009696:	b29b      	uxth	r3, r3
 8009698:	029b      	lsls	r3, r3, #10
 800969a:	b29b      	uxth	r3, r3
 800969c:	4313      	orrs	r3, r2
 800969e:	b29a      	uxth	r2, r3
 80096a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096a2:	801a      	strh	r2, [r3, #0]
 80096a4:	e019      	b.n	80096da <HAL_PCD_EP_DB_Transmit+0x77c>
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	785b      	ldrb	r3, [r3, #1]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d115      	bne.n	80096da <HAL_PCD_EP_DB_Transmit+0x77c>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096bc:	4413      	add	r3, r2
 80096be:	657b      	str	r3, [r7, #84]	; 0x54
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	00da      	lsls	r2, r3, #3
 80096c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096c8:	4413      	add	r3, r2
 80096ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80096ce:	653b      	str	r3, [r7, #80]	; 0x50
 80096d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	6959      	ldr	r1, [r3, #20]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	895a      	ldrh	r2, [r3, #10]
 80096e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	f006 fa4d 	bl	800fb8a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	461a      	mov	r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	881b      	ldrh	r3, [r3, #0]
 8009700:	b29b      	uxth	r3, r3
 8009702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800970a:	82bb      	strh	r3, [r7, #20]
 800970c:	8abb      	ldrh	r3, [r7, #20]
 800970e:	f083 0310 	eor.w	r3, r3, #16
 8009712:	82bb      	strh	r3, [r7, #20]
 8009714:	8abb      	ldrh	r3, [r7, #20]
 8009716:	f083 0320 	eor.w	r3, r3, #32
 800971a:	82bb      	strh	r3, [r7, #20]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	441a      	add	r2, r3
 800972a:	8abb      	ldrh	r3, [r7, #20]
 800972c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973c:	b29b      	uxth	r3, r3
 800973e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3790      	adds	r7, #144	; 0x90
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800974a:	b480      	push	{r7}
 800974c:	b087      	sub	sp, #28
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	607b      	str	r3, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	817b      	strh	r3, [r7, #10]
 8009758:	4613      	mov	r3, r2
 800975a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800975c:	897b      	ldrh	r3, [r7, #10]
 800975e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009762:	b29b      	uxth	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00b      	beq.n	8009780 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009768:	897b      	ldrh	r3, [r7, #10]
 800976a:	f003 0307 	and.w	r3, r3, #7
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4413      	add	r3, r2
 800977c:	617b      	str	r3, [r7, #20]
 800977e:	e009      	b.n	8009794 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009780:	897a      	ldrh	r2, [r7, #10]
 8009782:	4613      	mov	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	00db      	lsls	r3, r3, #3
 800978a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	4413      	add	r3, r2
 8009792:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009794:	893b      	ldrh	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d107      	bne.n	80097aa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2200      	movs	r2, #0
 800979e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	80da      	strh	r2, [r3, #6]
 80097a8:	e00b      	b.n	80097c2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2201      	movs	r2, #1
 80097ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	0c1b      	lsrs	r3, r3, #16
 80097bc:	b29a      	uxth	r2, r3
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	f043 0301 	orr.w	r3, r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009808:	b29b      	uxth	r3, r3
 800980a:	f043 0302 	orr.w	r3, r3, #2
 800980e:	b29a      	uxth	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009824:	b480      	push	{r7}
 8009826:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <HAL_PWREx_GetVoltageRange+0x18>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009830:	4618      	mov	r0, r3
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	40007000 	.word	0x40007000

08009840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800984e:	d130      	bne.n	80098b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009850:	4b23      	ldr	r3, [pc, #140]	; (80098e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800985c:	d038      	beq.n	80098d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800985e:	4b20      	ldr	r3, [pc, #128]	; (80098e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009866:	4a1e      	ldr	r2, [pc, #120]	; (80098e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800986c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800986e:	4b1d      	ldr	r3, [pc, #116]	; (80098e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2232      	movs	r2, #50	; 0x32
 8009874:	fb02 f303 	mul.w	r3, r2, r3
 8009878:	4a1b      	ldr	r2, [pc, #108]	; (80098e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	0c9b      	lsrs	r3, r3, #18
 8009880:	3301      	adds	r3, #1
 8009882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009884:	e002      	b.n	800988c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3b01      	subs	r3, #1
 800988a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800988c:	4b14      	ldr	r3, [pc, #80]	; (80098e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009898:	d102      	bne.n	80098a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1f2      	bne.n	8009886 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80098a0:	4b0f      	ldr	r3, [pc, #60]	; (80098e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ac:	d110      	bne.n	80098d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e00f      	b.n	80098d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80098b2:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098be:	d007      	beq.n	80098d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80098c8:	4a05      	ldr	r2, [pc, #20]	; (80098e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80098ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	40007000 	.word	0x40007000
 80098e4:	20000020 	.word	0x20000020
 80098e8:	431bde83 	.word	0x431bde83

080098ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	4a04      	ldr	r2, [pc, #16]	; (8009908 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098fa:	6053      	str	r3, [r2, #4]
}
 80098fc:	bf00      	nop
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	40007000 	.word	0x40007000

0800990c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	f000 bc02 	b.w	800a124 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009920:	4b96      	ldr	r3, [pc, #600]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f003 030c 	and.w	r3, r3, #12
 8009928:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800992a:	4b94      	ldr	r3, [pc, #592]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 0310 	and.w	r3, r3, #16
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 80e4 	beq.w	8009b0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d007      	beq.n	8009958 <HAL_RCC_OscConfig+0x4c>
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b0c      	cmp	r3, #12
 800994c:	f040 808b 	bne.w	8009a66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	2b01      	cmp	r3, #1
 8009954:	f040 8087 	bne.w	8009a66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009958:	4b88      	ldr	r3, [pc, #544]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0302 	and.w	r3, r3, #2
 8009960:	2b00      	cmp	r3, #0
 8009962:	d005      	beq.n	8009970 <HAL_RCC_OscConfig+0x64>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e3d9      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a1a      	ldr	r2, [r3, #32]
 8009974:	4b81      	ldr	r3, [pc, #516]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0308 	and.w	r3, r3, #8
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <HAL_RCC_OscConfig+0x7e>
 8009980:	4b7e      	ldr	r3, [pc, #504]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009988:	e005      	b.n	8009996 <HAL_RCC_OscConfig+0x8a>
 800998a:	4b7c      	ldr	r3, [pc, #496]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 800998c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009990:	091b      	lsrs	r3, r3, #4
 8009992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009996:	4293      	cmp	r3, r2
 8009998:	d223      	bcs.n	80099e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fd8c 	bl	800a4bc <RCC_SetFlashLatencyFromMSIRange>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e3ba      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80099ae:	4b73      	ldr	r3, [pc, #460]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a72      	ldr	r2, [pc, #456]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 80099b4:	f043 0308 	orr.w	r3, r3, #8
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	4b70      	ldr	r3, [pc, #448]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	496d      	ldr	r1, [pc, #436]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 80099c8:	4313      	orrs	r3, r2
 80099ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80099cc:	4b6b      	ldr	r3, [pc, #428]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	021b      	lsls	r3, r3, #8
 80099da:	4968      	ldr	r1, [pc, #416]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	604b      	str	r3, [r1, #4]
 80099e0:	e025      	b.n	8009a2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80099e2:	4b66      	ldr	r3, [pc, #408]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a65      	ldr	r2, [pc, #404]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 80099e8:	f043 0308 	orr.w	r3, r3, #8
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	4b63      	ldr	r3, [pc, #396]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	4960      	ldr	r1, [pc, #384]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a00:	4b5e      	ldr	r3, [pc, #376]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	69db      	ldr	r3, [r3, #28]
 8009a0c:	021b      	lsls	r3, r3, #8
 8009a0e:	495b      	ldr	r1, [pc, #364]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d109      	bne.n	8009a2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 fd4c 	bl	800a4bc <RCC_SetFlashLatencyFromMSIRange>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e37a      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009a2e:	f000 fc81 	bl	800a334 <HAL_RCC_GetSysClockFreq>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4b51      	ldr	r3, [pc, #324]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	091b      	lsrs	r3, r3, #4
 8009a3a:	f003 030f 	and.w	r3, r3, #15
 8009a3e:	4950      	ldr	r1, [pc, #320]	; (8009b80 <HAL_RCC_OscConfig+0x274>)
 8009a40:	5ccb      	ldrb	r3, [r1, r3]
 8009a42:	f003 031f 	and.w	r3, r3, #31
 8009a46:	fa22 f303 	lsr.w	r3, r2, r3
 8009a4a:	4a4e      	ldr	r2, [pc, #312]	; (8009b84 <HAL_RCC_OscConfig+0x278>)
 8009a4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009a4e:	4b4e      	ldr	r3, [pc, #312]	; (8009b88 <HAL_RCC_OscConfig+0x27c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fb fc4e 	bl	80052f4 <HAL_InitTick>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d052      	beq.n	8009b08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	e35e      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d032      	beq.n	8009ad4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009a6e:	4b43      	ldr	r3, [pc, #268]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a42      	ldr	r2, [pc, #264]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009a74:	f043 0301 	orr.w	r3, r3, #1
 8009a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009a7a:	f7fb fc8b 	bl	8005394 <HAL_GetTick>
 8009a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009a80:	e008      	b.n	8009a94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009a82:	f7fb fc87 	bl	8005394 <HAL_GetTick>
 8009a86:	4602      	mov	r2, r0
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d901      	bls.n	8009a94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e347      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009a94:	4b39      	ldr	r3, [pc, #228]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0302 	and.w	r3, r3, #2
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d0f0      	beq.n	8009a82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009aa0:	4b36      	ldr	r3, [pc, #216]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a35      	ldr	r2, [pc, #212]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009aa6:	f043 0308 	orr.w	r3, r3, #8
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	4b33      	ldr	r3, [pc, #204]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a1b      	ldr	r3, [r3, #32]
 8009ab8:	4930      	ldr	r1, [pc, #192]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009abe:	4b2f      	ldr	r3, [pc, #188]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	69db      	ldr	r3, [r3, #28]
 8009aca:	021b      	lsls	r3, r3, #8
 8009acc:	492b      	ldr	r1, [pc, #172]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	604b      	str	r3, [r1, #4]
 8009ad2:	e01a      	b.n	8009b0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009ad4:	4b29      	ldr	r3, [pc, #164]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a28      	ldr	r2, [pc, #160]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009ada:	f023 0301 	bic.w	r3, r3, #1
 8009ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009ae0:	f7fb fc58 	bl	8005394 <HAL_GetTick>
 8009ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009ae6:	e008      	b.n	8009afa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009ae8:	f7fb fc54 	bl	8005394 <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d901      	bls.n	8009afa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e314      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009afa:	4b20      	ldr	r3, [pc, #128]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 0302 	and.w	r3, r3, #2
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1f0      	bne.n	8009ae8 <HAL_RCC_OscConfig+0x1dc>
 8009b06:	e000      	b.n	8009b0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d073      	beq.n	8009bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d005      	beq.n	8009b28 <HAL_RCC_OscConfig+0x21c>
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	2b0c      	cmp	r3, #12
 8009b20:	d10e      	bne.n	8009b40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d10b      	bne.n	8009b40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b28:	4b14      	ldr	r3, [pc, #80]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d063      	beq.n	8009bfc <HAL_RCC_OscConfig+0x2f0>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d15f      	bne.n	8009bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e2f1      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b48:	d106      	bne.n	8009b58 <HAL_RCC_OscConfig+0x24c>
 8009b4a:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a0b      	ldr	r2, [pc, #44]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	e025      	b.n	8009ba4 <HAL_RCC_OscConfig+0x298>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b60:	d114      	bne.n	8009b8c <HAL_RCC_OscConfig+0x280>
 8009b62:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a05      	ldr	r2, [pc, #20]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	4b03      	ldr	r3, [pc, #12]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a02      	ldr	r2, [pc, #8]	; (8009b7c <HAL_RCC_OscConfig+0x270>)
 8009b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	e013      	b.n	8009ba4 <HAL_RCC_OscConfig+0x298>
 8009b7c:	40021000 	.word	0x40021000
 8009b80:	0801ad04 	.word	0x0801ad04
 8009b84:	20000020 	.word	0x20000020
 8009b88:	20000024 	.word	0x20000024
 8009b8c:	4ba0      	ldr	r3, [pc, #640]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a9f      	ldr	r2, [pc, #636]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	4b9d      	ldr	r3, [pc, #628]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a9c      	ldr	r2, [pc, #624]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d013      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bac:	f7fb fbf2 	bl	8005394 <HAL_GetTick>
 8009bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bb2:	e008      	b.n	8009bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bb4:	f7fb fbee 	bl	8005394 <HAL_GetTick>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	2b64      	cmp	r3, #100	; 0x64
 8009bc0:	d901      	bls.n	8009bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e2ae      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bc6:	4b92      	ldr	r3, [pc, #584]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0f0      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x2a8>
 8009bd2:	e014      	b.n	8009bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd4:	f7fb fbde 	bl	8005394 <HAL_GetTick>
 8009bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009bda:	e008      	b.n	8009bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bdc:	f7fb fbda 	bl	8005394 <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b64      	cmp	r3, #100	; 0x64
 8009be8:	d901      	bls.n	8009bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e29a      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009bee:	4b88      	ldr	r3, [pc, #544]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1f0      	bne.n	8009bdc <HAL_RCC_OscConfig+0x2d0>
 8009bfa:	e000      	b.n	8009bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0302 	and.w	r3, r3, #2
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d060      	beq.n	8009ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	2b04      	cmp	r3, #4
 8009c0e:	d005      	beq.n	8009c1c <HAL_RCC_OscConfig+0x310>
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	2b0c      	cmp	r3, #12
 8009c14:	d119      	bne.n	8009c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d116      	bne.n	8009c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c1c:	4b7c      	ldr	r3, [pc, #496]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d005      	beq.n	8009c34 <HAL_RCC_OscConfig+0x328>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e277      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c34:	4b76      	ldr	r3, [pc, #472]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	061b      	lsls	r3, r3, #24
 8009c42:	4973      	ldr	r1, [pc, #460]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009c44:	4313      	orrs	r3, r2
 8009c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c48:	e040      	b.n	8009ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d023      	beq.n	8009c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c52:	4b6f      	ldr	r3, [pc, #444]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a6e      	ldr	r2, [pc, #440]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c5e:	f7fb fb99 	bl	8005394 <HAL_GetTick>
 8009c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c64:	e008      	b.n	8009c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c66:	f7fb fb95 	bl	8005394 <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d901      	bls.n	8009c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e255      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c78:	4b65      	ldr	r3, [pc, #404]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d0f0      	beq.n	8009c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c84:	4b62      	ldr	r3, [pc, #392]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	061b      	lsls	r3, r3, #24
 8009c92:	495f      	ldr	r1, [pc, #380]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009c94:	4313      	orrs	r3, r2
 8009c96:	604b      	str	r3, [r1, #4]
 8009c98:	e018      	b.n	8009ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c9a:	4b5d      	ldr	r3, [pc, #372]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a5c      	ldr	r2, [pc, #368]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca6:	f7fb fb75 	bl	8005394 <HAL_GetTick>
 8009caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009cac:	e008      	b.n	8009cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cae:	f7fb fb71 	bl	8005394 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d901      	bls.n	8009cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e231      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009cc0:	4b53      	ldr	r3, [pc, #332]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1f0      	bne.n	8009cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0308 	and.w	r3, r3, #8
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d03c      	beq.n	8009d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01c      	beq.n	8009d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ce0:	4b4b      	ldr	r3, [pc, #300]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ce6:	4a4a      	ldr	r2, [pc, #296]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009ce8:	f043 0301 	orr.w	r3, r3, #1
 8009cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cf0:	f7fb fb50 	bl	8005394 <HAL_GetTick>
 8009cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009cf6:	e008      	b.n	8009d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cf8:	f7fb fb4c 	bl	8005394 <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d901      	bls.n	8009d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e20c      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d0a:	4b41      	ldr	r3, [pc, #260]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d0ef      	beq.n	8009cf8 <HAL_RCC_OscConfig+0x3ec>
 8009d18:	e01b      	b.n	8009d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d1a:	4b3d      	ldr	r3, [pc, #244]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d20:	4a3b      	ldr	r2, [pc, #236]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009d22:	f023 0301 	bic.w	r3, r3, #1
 8009d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d2a:	f7fb fb33 	bl	8005394 <HAL_GetTick>
 8009d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d30:	e008      	b.n	8009d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d32:	f7fb fb2f 	bl	8005394 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d901      	bls.n	8009d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e1ef      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d44:	4b32      	ldr	r3, [pc, #200]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1ef      	bne.n	8009d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0304 	and.w	r3, r3, #4
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 80a6 	beq.w	8009eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d60:	2300      	movs	r3, #0
 8009d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009d64:	4b2a      	ldr	r3, [pc, #168]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10d      	bne.n	8009d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d70:	4b27      	ldr	r3, [pc, #156]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d74:	4a26      	ldr	r2, [pc, #152]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8009d7c:	4b24      	ldr	r3, [pc, #144]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d84:	60bb      	str	r3, [r7, #8]
 8009d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d8c:	4b21      	ldr	r3, [pc, #132]	; (8009e14 <HAL_RCC_OscConfig+0x508>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d118      	bne.n	8009dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d98:	4b1e      	ldr	r3, [pc, #120]	; (8009e14 <HAL_RCC_OscConfig+0x508>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a1d      	ldr	r2, [pc, #116]	; (8009e14 <HAL_RCC_OscConfig+0x508>)
 8009d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009da4:	f7fb faf6 	bl	8005394 <HAL_GetTick>
 8009da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009daa:	e008      	b.n	8009dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dac:	f7fb faf2 	bl	8005394 <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e1b2      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009dbe:	4b15      	ldr	r3, [pc, #84]	; (8009e14 <HAL_RCC_OscConfig+0x508>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0f0      	beq.n	8009dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d108      	bne.n	8009de4 <HAL_RCC_OscConfig+0x4d8>
 8009dd2:	4b0f      	ldr	r3, [pc, #60]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dd8:	4a0d      	ldr	r2, [pc, #52]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009dda:	f043 0301 	orr.w	r3, r3, #1
 8009dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009de2:	e029      	b.n	8009e38 <HAL_RCC_OscConfig+0x52c>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	2b05      	cmp	r3, #5
 8009dea:	d115      	bne.n	8009e18 <HAL_RCC_OscConfig+0x50c>
 8009dec:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009df2:	4a07      	ldr	r2, [pc, #28]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009df4:	f043 0304 	orr.w	r3, r3, #4
 8009df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009dfc:	4b04      	ldr	r3, [pc, #16]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e02:	4a03      	ldr	r2, [pc, #12]	; (8009e10 <HAL_RCC_OscConfig+0x504>)
 8009e04:	f043 0301 	orr.w	r3, r3, #1
 8009e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009e0c:	e014      	b.n	8009e38 <HAL_RCC_OscConfig+0x52c>
 8009e0e:	bf00      	nop
 8009e10:	40021000 	.word	0x40021000
 8009e14:	40007000 	.word	0x40007000
 8009e18:	4b9a      	ldr	r3, [pc, #616]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e1e:	4a99      	ldr	r2, [pc, #612]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009e20:	f023 0301 	bic.w	r3, r3, #1
 8009e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009e28:	4b96      	ldr	r3, [pc, #600]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e2e:	4a95      	ldr	r2, [pc, #596]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009e30:	f023 0304 	bic.w	r3, r3, #4
 8009e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d016      	beq.n	8009e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e40:	f7fb faa8 	bl	8005394 <HAL_GetTick>
 8009e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e46:	e00a      	b.n	8009e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e48:	f7fb faa4 	bl	8005394 <HAL_GetTick>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d901      	bls.n	8009e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e162      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e5e:	4b89      	ldr	r3, [pc, #548]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d0ed      	beq.n	8009e48 <HAL_RCC_OscConfig+0x53c>
 8009e6c:	e015      	b.n	8009e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e6e:	f7fb fa91 	bl	8005394 <HAL_GetTick>
 8009e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e74:	e00a      	b.n	8009e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e76:	f7fb fa8d 	bl	8005394 <HAL_GetTick>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d901      	bls.n	8009e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e14b      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e8c:	4b7d      	ldr	r3, [pc, #500]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1ed      	bne.n	8009e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e9a:	7ffb      	ldrb	r3, [r7, #31]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d105      	bne.n	8009eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ea0:	4b78      	ldr	r3, [pc, #480]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea4:	4a77      	ldr	r2, [pc, #476]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009eaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 0320 	and.w	r3, r3, #32
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d03c      	beq.n	8009f32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d01c      	beq.n	8009efa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ec0:	4b70      	ldr	r3, [pc, #448]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ec6:	4a6f      	ldr	r2, [pc, #444]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009ec8:	f043 0301 	orr.w	r3, r3, #1
 8009ecc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ed0:	f7fb fa60 	bl	8005394 <HAL_GetTick>
 8009ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ed8:	f7fb fa5c 	bl	8005394 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e11c      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009eea:	4b66      	ldr	r3, [pc, #408]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ef0:	f003 0302 	and.w	r3, r3, #2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0ef      	beq.n	8009ed8 <HAL_RCC_OscConfig+0x5cc>
 8009ef8:	e01b      	b.n	8009f32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009efa:	4b62      	ldr	r3, [pc, #392]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f00:	4a60      	ldr	r2, [pc, #384]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009f02:	f023 0301 	bic.w	r3, r3, #1
 8009f06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f0a:	f7fb fa43 	bl	8005394 <HAL_GetTick>
 8009f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009f10:	e008      	b.n	8009f24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f12:	f7fb fa3f 	bl	8005394 <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d901      	bls.n	8009f24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e0ff      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009f24:	4b57      	ldr	r3, [pc, #348]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1ef      	bne.n	8009f12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 80f3 	beq.w	800a122 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	f040 80c9 	bne.w	800a0d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009f46:	4b4f      	ldr	r3, [pc, #316]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f003 0203 	and.w	r2, r3, #3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d12c      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f64:	3b01      	subs	r3, #1
 8009f66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d123      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d11b      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d113      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f96:	085b      	lsrs	r3, r3, #1
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d109      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	085b      	lsrs	r3, r3, #1
 8009fac:	3b01      	subs	r3, #1
 8009fae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d06b      	beq.n	800a08c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	2b0c      	cmp	r3, #12
 8009fb8:	d062      	beq.n	800a080 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009fba:	4b32      	ldr	r3, [pc, #200]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e0ac      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009fca:	4b2e      	ldr	r3, [pc, #184]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a2d      	ldr	r2, [pc, #180]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009fd6:	f7fb f9dd 	bl	8005394 <HAL_GetTick>
 8009fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fdc:	e008      	b.n	8009ff0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fde:	f7fb f9d9 	bl	8005394 <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d901      	bls.n	8009ff0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e099      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ff0:	4b24      	ldr	r3, [pc, #144]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1f0      	bne.n	8009fde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ffc:	4b21      	ldr	r3, [pc, #132]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 8009ffe:	68da      	ldr	r2, [r3, #12]
 800a000:	4b21      	ldr	r3, [pc, #132]	; (800a088 <HAL_RCC_OscConfig+0x77c>)
 800a002:	4013      	ands	r3, r2
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a00c:	3a01      	subs	r2, #1
 800a00e:	0112      	lsls	r2, r2, #4
 800a010:	4311      	orrs	r1, r2
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a016:	0212      	lsls	r2, r2, #8
 800a018:	4311      	orrs	r1, r2
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a01e:	0852      	lsrs	r2, r2, #1
 800a020:	3a01      	subs	r2, #1
 800a022:	0552      	lsls	r2, r2, #21
 800a024:	4311      	orrs	r1, r2
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a02a:	0852      	lsrs	r2, r2, #1
 800a02c:	3a01      	subs	r2, #1
 800a02e:	0652      	lsls	r2, r2, #25
 800a030:	4311      	orrs	r1, r2
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a036:	06d2      	lsls	r2, r2, #27
 800a038:	430a      	orrs	r2, r1
 800a03a:	4912      	ldr	r1, [pc, #72]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a040:	4b10      	ldr	r3, [pc, #64]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a0f      	ldr	r2, [pc, #60]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 800a046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a04a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a04c:	4b0d      	ldr	r3, [pc, #52]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	4a0c      	ldr	r2, [pc, #48]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 800a052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a058:	f7fb f99c 	bl	8005394 <HAL_GetTick>
 800a05c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a05e:	e008      	b.n	800a072 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a060:	f7fb f998 	bl	8005394 <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d901      	bls.n	800a072 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e058      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a072:	4b04      	ldr	r3, [pc, #16]	; (800a084 <HAL_RCC_OscConfig+0x778>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0f0      	beq.n	800a060 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a07e:	e050      	b.n	800a122 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e04f      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
 800a084:	40021000 	.word	0x40021000
 800a088:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a08c:	4b27      	ldr	r3, [pc, #156]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d144      	bne.n	800a122 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a098:	4b24      	ldr	r3, [pc, #144]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a23      	ldr	r2, [pc, #140]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a09e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a0a4:	4b21      	ldr	r3, [pc, #132]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	4a20      	ldr	r2, [pc, #128]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a0aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a0b0:	f7fb f970 	bl	8005394 <HAL_GetTick>
 800a0b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0b6:	e008      	b.n	800a0ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0b8:	f7fb f96c 	bl	8005394 <HAL_GetTick>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d901      	bls.n	800a0ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e02c      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0ca:	4b18      	ldr	r3, [pc, #96]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0f0      	beq.n	800a0b8 <HAL_RCC_OscConfig+0x7ac>
 800a0d6:	e024      	b.n	800a122 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	2b0c      	cmp	r3, #12
 800a0dc:	d01f      	beq.n	800a11e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0de:	4b13      	ldr	r3, [pc, #76]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a12      	ldr	r2, [pc, #72]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a0e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ea:	f7fb f953 	bl	8005394 <HAL_GetTick>
 800a0ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a0f0:	e008      	b.n	800a104 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0f2:	f7fb f94f 	bl	8005394 <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d901      	bls.n	800a104 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e00f      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a104:	4b09      	ldr	r3, [pc, #36]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1f0      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a112:	68da      	ldr	r2, [r3, #12]
 800a114:	4905      	ldr	r1, [pc, #20]	; (800a12c <HAL_RCC_OscConfig+0x820>)
 800a116:	4b06      	ldr	r3, [pc, #24]	; (800a130 <HAL_RCC_OscConfig+0x824>)
 800a118:	4013      	ands	r3, r2
 800a11a:	60cb      	str	r3, [r1, #12]
 800a11c:	e001      	b.n	800a122 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e000      	b.n	800a124 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3720      	adds	r7, #32
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	40021000 	.word	0x40021000
 800a130:	feeefffc 	.word	0xfeeefffc

0800a134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e0e7      	b.n	800a318 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a148:	4b75      	ldr	r3, [pc, #468]	; (800a320 <HAL_RCC_ClockConfig+0x1ec>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0307 	and.w	r3, r3, #7
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	429a      	cmp	r2, r3
 800a154:	d910      	bls.n	800a178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a156:	4b72      	ldr	r3, [pc, #456]	; (800a320 <HAL_RCC_ClockConfig+0x1ec>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f023 0207 	bic.w	r2, r3, #7
 800a15e:	4970      	ldr	r1, [pc, #448]	; (800a320 <HAL_RCC_ClockConfig+0x1ec>)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	4313      	orrs	r3, r2
 800a164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a166:	4b6e      	ldr	r3, [pc, #440]	; (800a320 <HAL_RCC_ClockConfig+0x1ec>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	429a      	cmp	r2, r3
 800a172:	d001      	beq.n	800a178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e0cf      	b.n	800a318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d010      	beq.n	800a1a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689a      	ldr	r2, [r3, #8]
 800a188:	4b66      	ldr	r3, [pc, #408]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a190:	429a      	cmp	r2, r3
 800a192:	d908      	bls.n	800a1a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a194:	4b63      	ldr	r3, [pc, #396]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	4960      	ldr	r1, [pc, #384]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d04c      	beq.n	800a24c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	d107      	bne.n	800a1ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1ba:	4b5a      	ldr	r3, [pc, #360]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d121      	bne.n	800a20a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e0a6      	b.n	800a318 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d107      	bne.n	800a1e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a1d2:	4b54      	ldr	r3, [pc, #336]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d115      	bne.n	800a20a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e09a      	b.n	800a318 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d107      	bne.n	800a1fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a1ea:	4b4e      	ldr	r3, [pc, #312]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d109      	bne.n	800a20a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e08e      	b.n	800a318 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a1fa:	4b4a      	ldr	r3, [pc, #296]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e086      	b.n	800a318 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a20a:	4b46      	ldr	r3, [pc, #280]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f023 0203 	bic.w	r2, r3, #3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	4943      	ldr	r1, [pc, #268]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a218:	4313      	orrs	r3, r2
 800a21a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a21c:	f7fb f8ba 	bl	8005394 <HAL_GetTick>
 800a220:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a222:	e00a      	b.n	800a23a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a224:	f7fb f8b6 	bl	8005394 <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a232:	4293      	cmp	r3, r2
 800a234:	d901      	bls.n	800a23a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e06e      	b.n	800a318 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a23a:	4b3a      	ldr	r3, [pc, #232]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f003 020c 	and.w	r2, r3, #12
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	429a      	cmp	r2, r3
 800a24a:	d1eb      	bne.n	800a224 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0302 	and.w	r3, r3, #2
 800a254:	2b00      	cmp	r3, #0
 800a256:	d010      	beq.n	800a27a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	4b31      	ldr	r3, [pc, #196]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a264:	429a      	cmp	r2, r3
 800a266:	d208      	bcs.n	800a27a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a268:	4b2e      	ldr	r3, [pc, #184]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	492b      	ldr	r1, [pc, #172]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a276:	4313      	orrs	r3, r2
 800a278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a27a:	4b29      	ldr	r3, [pc, #164]	; (800a320 <HAL_RCC_ClockConfig+0x1ec>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	429a      	cmp	r2, r3
 800a286:	d210      	bcs.n	800a2aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a288:	4b25      	ldr	r3, [pc, #148]	; (800a320 <HAL_RCC_ClockConfig+0x1ec>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f023 0207 	bic.w	r2, r3, #7
 800a290:	4923      	ldr	r1, [pc, #140]	; (800a320 <HAL_RCC_ClockConfig+0x1ec>)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	4313      	orrs	r3, r2
 800a296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a298:	4b21      	ldr	r3, [pc, #132]	; (800a320 <HAL_RCC_ClockConfig+0x1ec>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 0307 	and.w	r3, r3, #7
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d001      	beq.n	800a2aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e036      	b.n	800a318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0304 	and.w	r3, r3, #4
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d008      	beq.n	800a2c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2b6:	4b1b      	ldr	r3, [pc, #108]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	4918      	ldr	r1, [pc, #96]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 0308 	and.w	r3, r3, #8
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d009      	beq.n	800a2e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2d4:	4b13      	ldr	r3, [pc, #76]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	4910      	ldr	r1, [pc, #64]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a2e8:	f000 f824 	bl	800a334 <HAL_RCC_GetSysClockFreq>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <HAL_RCC_ClockConfig+0x1f0>)
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	091b      	lsrs	r3, r3, #4
 800a2f4:	f003 030f 	and.w	r3, r3, #15
 800a2f8:	490b      	ldr	r1, [pc, #44]	; (800a328 <HAL_RCC_ClockConfig+0x1f4>)
 800a2fa:	5ccb      	ldrb	r3, [r1, r3]
 800a2fc:	f003 031f 	and.w	r3, r3, #31
 800a300:	fa22 f303 	lsr.w	r3, r2, r3
 800a304:	4a09      	ldr	r2, [pc, #36]	; (800a32c <HAL_RCC_ClockConfig+0x1f8>)
 800a306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a308:	4b09      	ldr	r3, [pc, #36]	; (800a330 <HAL_RCC_ClockConfig+0x1fc>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fa fff1 	bl	80052f4 <HAL_InitTick>
 800a312:	4603      	mov	r3, r0
 800a314:	72fb      	strb	r3, [r7, #11]

  return status;
 800a316:	7afb      	ldrb	r3, [r7, #11]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	40022000 	.word	0x40022000
 800a324:	40021000 	.word	0x40021000
 800a328:	0801ad04 	.word	0x0801ad04
 800a32c:	20000020 	.word	0x20000020
 800a330:	20000024 	.word	0x20000024

0800a334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a334:	b480      	push	{r7}
 800a336:	b089      	sub	sp, #36	; 0x24
 800a338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a33a:	2300      	movs	r3, #0
 800a33c:	61fb      	str	r3, [r7, #28]
 800a33e:	2300      	movs	r3, #0
 800a340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a342:	4b3e      	ldr	r3, [pc, #248]	; (800a43c <HAL_RCC_GetSysClockFreq+0x108>)
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 030c 	and.w	r3, r3, #12
 800a34a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a34c:	4b3b      	ldr	r3, [pc, #236]	; (800a43c <HAL_RCC_GetSysClockFreq+0x108>)
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f003 0303 	and.w	r3, r3, #3
 800a354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d005      	beq.n	800a368 <HAL_RCC_GetSysClockFreq+0x34>
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	2b0c      	cmp	r3, #12
 800a360:	d121      	bne.n	800a3a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d11e      	bne.n	800a3a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a368:	4b34      	ldr	r3, [pc, #208]	; (800a43c <HAL_RCC_GetSysClockFreq+0x108>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0308 	and.w	r3, r3, #8
 800a370:	2b00      	cmp	r3, #0
 800a372:	d107      	bne.n	800a384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a374:	4b31      	ldr	r3, [pc, #196]	; (800a43c <HAL_RCC_GetSysClockFreq+0x108>)
 800a376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	f003 030f 	and.w	r3, r3, #15
 800a380:	61fb      	str	r3, [r7, #28]
 800a382:	e005      	b.n	800a390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a384:	4b2d      	ldr	r3, [pc, #180]	; (800a43c <HAL_RCC_GetSysClockFreq+0x108>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	091b      	lsrs	r3, r3, #4
 800a38a:	f003 030f 	and.w	r3, r3, #15
 800a38e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a390:	4a2b      	ldr	r2, [pc, #172]	; (800a440 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10d      	bne.n	800a3bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a3a4:	e00a      	b.n	800a3bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d102      	bne.n	800a3b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a3ac:	4b25      	ldr	r3, [pc, #148]	; (800a444 <HAL_RCC_GetSysClockFreq+0x110>)
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	e004      	b.n	800a3bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	2b08      	cmp	r3, #8
 800a3b6:	d101      	bne.n	800a3bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a3b8:	4b23      	ldr	r3, [pc, #140]	; (800a448 <HAL_RCC_GetSysClockFreq+0x114>)
 800a3ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b0c      	cmp	r3, #12
 800a3c0:	d134      	bne.n	800a42c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a3c2:	4b1e      	ldr	r3, [pc, #120]	; (800a43c <HAL_RCC_GetSysClockFreq+0x108>)
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	f003 0303 	and.w	r3, r3, #3
 800a3ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d003      	beq.n	800a3da <HAL_RCC_GetSysClockFreq+0xa6>
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d003      	beq.n	800a3e0 <HAL_RCC_GetSysClockFreq+0xac>
 800a3d8:	e005      	b.n	800a3e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a3da:	4b1a      	ldr	r3, [pc, #104]	; (800a444 <HAL_RCC_GetSysClockFreq+0x110>)
 800a3dc:	617b      	str	r3, [r7, #20]
      break;
 800a3de:	e005      	b.n	800a3ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a3e0:	4b19      	ldr	r3, [pc, #100]	; (800a448 <HAL_RCC_GetSysClockFreq+0x114>)
 800a3e2:	617b      	str	r3, [r7, #20]
      break;
 800a3e4:	e002      	b.n	800a3ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	617b      	str	r3, [r7, #20]
      break;
 800a3ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a3ec:	4b13      	ldr	r3, [pc, #76]	; (800a43c <HAL_RCC_GetSysClockFreq+0x108>)
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	091b      	lsrs	r3, r3, #4
 800a3f2:	f003 0307 	and.w	r3, r3, #7
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a3fa:	4b10      	ldr	r3, [pc, #64]	; (800a43c <HAL_RCC_GetSysClockFreq+0x108>)
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	0a1b      	lsrs	r3, r3, #8
 800a400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	fb03 f202 	mul.w	r2, r3, r2
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a412:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <HAL_RCC_GetSysClockFreq+0x108>)
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	0e5b      	lsrs	r3, r3, #25
 800a418:	f003 0303 	and.w	r3, r3, #3
 800a41c:	3301      	adds	r3, #1
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a42c:	69bb      	ldr	r3, [r7, #24]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3724      	adds	r7, #36	; 0x24
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40021000 	.word	0x40021000
 800a440:	0801ad1c 	.word	0x0801ad1c
 800a444:	00f42400 	.word	0x00f42400
 800a448:	007a1200 	.word	0x007a1200

0800a44c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a44c:	b480      	push	{r7}
 800a44e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a450:	4b03      	ldr	r3, [pc, #12]	; (800a460 <HAL_RCC_GetHCLKFreq+0x14>)
 800a452:	681b      	ldr	r3, [r3, #0]
}
 800a454:	4618      	mov	r0, r3
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	20000020 	.word	0x20000020

0800a464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a468:	f7ff fff0 	bl	800a44c <HAL_RCC_GetHCLKFreq>
 800a46c:	4602      	mov	r2, r0
 800a46e:	4b06      	ldr	r3, [pc, #24]	; (800a488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	0a1b      	lsrs	r3, r3, #8
 800a474:	f003 0307 	and.w	r3, r3, #7
 800a478:	4904      	ldr	r1, [pc, #16]	; (800a48c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a47a:	5ccb      	ldrb	r3, [r1, r3]
 800a47c:	f003 031f 	and.w	r3, r3, #31
 800a480:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a484:	4618      	mov	r0, r3
 800a486:	bd80      	pop	{r7, pc}
 800a488:	40021000 	.word	0x40021000
 800a48c:	0801ad14 	.word	0x0801ad14

0800a490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a494:	f7ff ffda 	bl	800a44c <HAL_RCC_GetHCLKFreq>
 800a498:	4602      	mov	r2, r0
 800a49a:	4b06      	ldr	r3, [pc, #24]	; (800a4b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	0adb      	lsrs	r3, r3, #11
 800a4a0:	f003 0307 	and.w	r3, r3, #7
 800a4a4:	4904      	ldr	r1, [pc, #16]	; (800a4b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a4a6:	5ccb      	ldrb	r3, [r1, r3]
 800a4a8:	f003 031f 	and.w	r3, r3, #31
 800a4ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	40021000 	.word	0x40021000
 800a4b8:	0801ad14 	.word	0x0801ad14

0800a4bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a4c8:	4b2a      	ldr	r3, [pc, #168]	; (800a574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a4ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a4d4:	f7ff f9a6 	bl	8009824 <HAL_PWREx_GetVoltageRange>
 800a4d8:	6178      	str	r0, [r7, #20]
 800a4da:	e014      	b.n	800a506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a4dc:	4b25      	ldr	r3, [pc, #148]	; (800a574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e0:	4a24      	ldr	r2, [pc, #144]	; (800a574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a4e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4e6:	6593      	str	r3, [r2, #88]	; 0x58
 800a4e8:	4b22      	ldr	r3, [pc, #136]	; (800a574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a4ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4f0:	60fb      	str	r3, [r7, #12]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a4f4:	f7ff f996 	bl	8009824 <HAL_PWREx_GetVoltageRange>
 800a4f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a4fa:	4b1e      	ldr	r3, [pc, #120]	; (800a574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4fe:	4a1d      	ldr	r2, [pc, #116]	; (800a574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a504:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a50c:	d10b      	bne.n	800a526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b80      	cmp	r3, #128	; 0x80
 800a512:	d919      	bls.n	800a548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2ba0      	cmp	r3, #160	; 0xa0
 800a518:	d902      	bls.n	800a520 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a51a:	2302      	movs	r3, #2
 800a51c:	613b      	str	r3, [r7, #16]
 800a51e:	e013      	b.n	800a548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a520:	2301      	movs	r3, #1
 800a522:	613b      	str	r3, [r7, #16]
 800a524:	e010      	b.n	800a548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b80      	cmp	r3, #128	; 0x80
 800a52a:	d902      	bls.n	800a532 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a52c:	2303      	movs	r3, #3
 800a52e:	613b      	str	r3, [r7, #16]
 800a530:	e00a      	b.n	800a548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b80      	cmp	r3, #128	; 0x80
 800a536:	d102      	bne.n	800a53e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a538:	2302      	movs	r3, #2
 800a53a:	613b      	str	r3, [r7, #16]
 800a53c:	e004      	b.n	800a548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b70      	cmp	r3, #112	; 0x70
 800a542:	d101      	bne.n	800a548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a544:	2301      	movs	r3, #1
 800a546:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a548:	4b0b      	ldr	r3, [pc, #44]	; (800a578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f023 0207 	bic.w	r2, r3, #7
 800a550:	4909      	ldr	r1, [pc, #36]	; (800a578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	4313      	orrs	r3, r2
 800a556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a558:	4b07      	ldr	r3, [pc, #28]	; (800a578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0307 	and.w	r3, r3, #7
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	429a      	cmp	r2, r3
 800a564:	d001      	beq.n	800a56a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e000      	b.n	800a56c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	40021000 	.word	0x40021000
 800a578:	40022000 	.word	0x40022000

0800a57c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a584:	2300      	movs	r3, #0
 800a586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a588:	2300      	movs	r3, #0
 800a58a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a594:	2b00      	cmp	r3, #0
 800a596:	d031      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a5a0:	d01a      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a5a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a5a6:	d814      	bhi.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d009      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a5ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5b0:	d10f      	bne.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a5b2:	4b5d      	ldr	r3, [pc, #372]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	4a5c      	ldr	r2, [pc, #368]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a5b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a5be:	e00c      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 f9ce 	bl	800a968 <RCCEx_PLLSAI1_Config>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a5d0:	e003      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	74fb      	strb	r3, [r7, #19]
      break;
 800a5d6:	e000      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800a5d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5da:	7cfb      	ldrb	r3, [r7, #19]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10b      	bne.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5e0:	4b51      	ldr	r3, [pc, #324]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ee:	494e      	ldr	r1, [pc, #312]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a5f6:	e001      	b.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f8:	7cfb      	ldrb	r3, [r7, #19]
 800a5fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 809e 	beq.w	800a746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a60a:	2300      	movs	r3, #0
 800a60c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a60e:	4b46      	ldr	r3, [pc, #280]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e000      	b.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800a61e:	2300      	movs	r3, #0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00d      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a624:	4b40      	ldr	r3, [pc, #256]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a628:	4a3f      	ldr	r2, [pc, #252]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a62a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a62e:	6593      	str	r3, [r2, #88]	; 0x58
 800a630:	4b3d      	ldr	r3, [pc, #244]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a638:	60bb      	str	r3, [r7, #8]
 800a63a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a63c:	2301      	movs	r3, #1
 800a63e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a640:	4b3a      	ldr	r3, [pc, #232]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a39      	ldr	r2, [pc, #228]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a64a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a64c:	f7fa fea2 	bl	8005394 <HAL_GetTick>
 800a650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a652:	e009      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a654:	f7fa fe9e 	bl	8005394 <HAL_GetTick>
 800a658:	4602      	mov	r2, r0
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d902      	bls.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	74fb      	strb	r3, [r7, #19]
        break;
 800a666:	e005      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a668:	4b30      	ldr	r3, [pc, #192]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a670:	2b00      	cmp	r3, #0
 800a672:	d0ef      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800a674:	7cfb      	ldrb	r3, [r7, #19]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d15a      	bne.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a67a:	4b2b      	ldr	r3, [pc, #172]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01e      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	429a      	cmp	r2, r3
 800a694:	d019      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a696:	4b24      	ldr	r3, [pc, #144]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a69c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a6a2:	4b21      	ldr	r3, [pc, #132]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a8:	4a1f      	ldr	r2, [pc, #124]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a6aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a6b2:	4b1d      	ldr	r3, [pc, #116]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b8:	4a1b      	ldr	r2, [pc, #108]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a6ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a6c2:	4a19      	ldr	r2, [pc, #100]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d016      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d4:	f7fa fe5e 	bl	8005394 <HAL_GetTick>
 800a6d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6da:	e00b      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6dc:	f7fa fe5a 	bl	8005394 <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d902      	bls.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	74fb      	strb	r3, [r7, #19]
            break;
 800a6f2:	e006      	b.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6f4:	4b0c      	ldr	r3, [pc, #48]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6fa:	f003 0302 	and.w	r3, r3, #2
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0ec      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800a702:	7cfb      	ldrb	r3, [r7, #19]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10b      	bne.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a708:	4b07      	ldr	r3, [pc, #28]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a70a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a70e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a716:	4904      	ldr	r1, [pc, #16]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a718:	4313      	orrs	r3, r2
 800a71a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a71e:	e009      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a720:	7cfb      	ldrb	r3, [r7, #19]
 800a722:	74bb      	strb	r3, [r7, #18]
 800a724:	e006      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800a726:	bf00      	nop
 800a728:	40021000 	.word	0x40021000
 800a72c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a730:	7cfb      	ldrb	r3, [r7, #19]
 800a732:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a734:	7c7b      	ldrb	r3, [r7, #17]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d105      	bne.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a73a:	4b8a      	ldr	r3, [pc, #552]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a73c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a73e:	4a89      	ldr	r2, [pc, #548]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a744:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00a      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a752:	4b84      	ldr	r3, [pc, #528]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a758:	f023 0203 	bic.w	r2, r3, #3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	4980      	ldr	r1, [pc, #512]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a762:	4313      	orrs	r3, r2
 800a764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00a      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a774:	4b7b      	ldr	r3, [pc, #492]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77a:	f023 020c 	bic.w	r2, r3, #12
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a782:	4978      	ldr	r1, [pc, #480]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a784:	4313      	orrs	r3, r2
 800a786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0320 	and.w	r3, r3, #32
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a796:	4b73      	ldr	r3, [pc, #460]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a4:	496f      	ldr	r1, [pc, #444]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00a      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7b8:	4b6a      	ldr	r3, [pc, #424]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c6:	4967      	ldr	r1, [pc, #412]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00a      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a7da:	4b62      	ldr	r3, [pc, #392]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e8:	495e      	ldr	r1, [pc, #376]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00a      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a7fc:	4b59      	ldr	r3, [pc, #356]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a7fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a802:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80a:	4956      	ldr	r1, [pc, #344]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00a      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a81e:	4b51      	ldr	r3, [pc, #324]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82c:	494d      	ldr	r1, [pc, #308]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d028      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a840:	4b48      	ldr	r3, [pc, #288]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	4945      	ldr	r1, [pc, #276]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a850:	4313      	orrs	r3, r2
 800a852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a85e:	d106      	bne.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a860:	4b40      	ldr	r3, [pc, #256]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	4a3f      	ldr	r2, [pc, #252]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a86a:	60d3      	str	r3, [r2, #12]
 800a86c:	e011      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a876:	d10c      	bne.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3304      	adds	r3, #4
 800a87c:	2101      	movs	r1, #1
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 f872 	bl	800a968 <RCCEx_PLLSAI1_Config>
 800a884:	4603      	mov	r3, r0
 800a886:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a888:	7cfb      	ldrb	r3, [r7, #19]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800a88e:	7cfb      	ldrb	r3, [r7, #19]
 800a890:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d028      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a89e:	4b31      	ldr	r3, [pc, #196]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a8a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ac:	492d      	ldr	r1, [pc, #180]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8bc:	d106      	bne.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8be:	4b29      	ldr	r3, [pc, #164]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	4a28      	ldr	r2, [pc, #160]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a8c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8c8:	60d3      	str	r3, [r2, #12]
 800a8ca:	e011      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8d4:	d10c      	bne.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	3304      	adds	r3, #4
 800a8da:	2101      	movs	r1, #1
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 f843 	bl	800a968 <RCCEx_PLLSAI1_Config>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a8e6:	7cfb      	ldrb	r3, [r7, #19]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d001      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800a8ec:	7cfb      	ldrb	r3, [r7, #19]
 800a8ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d01c      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a8fc:	4b19      	ldr	r3, [pc, #100]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a902:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a90a:	4916      	ldr	r1, [pc, #88]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a90c:	4313      	orrs	r3, r2
 800a90e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a91a:	d10c      	bne.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3304      	adds	r3, #4
 800a920:	2102      	movs	r1, #2
 800a922:	4618      	mov	r0, r3
 800a924:	f000 f820 	bl	800a968 <RCCEx_PLLSAI1_Config>
 800a928:	4603      	mov	r3, r0
 800a92a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a92c:	7cfb      	ldrb	r3, [r7, #19]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800a932:	7cfb      	ldrb	r3, [r7, #19]
 800a934:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a942:	4b08      	ldr	r3, [pc, #32]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a948:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a950:	4904      	ldr	r1, [pc, #16]	; (800a964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a952:	4313      	orrs	r3, r2
 800a954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a958:	7cbb      	ldrb	r3, [r7, #18]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	40021000 	.word	0x40021000

0800a968 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a976:	4b74      	ldr	r3, [pc, #464]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d018      	beq.n	800a9b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a982:	4b71      	ldr	r3, [pc, #452]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	f003 0203 	and.w	r2, r3, #3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d10d      	bne.n	800a9ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
       ||
 800a996:	2b00      	cmp	r3, #0
 800a998:	d009      	beq.n	800a9ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a99a:	4b6b      	ldr	r3, [pc, #428]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	091b      	lsrs	r3, r3, #4
 800a9a0:	f003 0307 	and.w	r3, r3, #7
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
       ||
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d047      	beq.n	800aa3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	73fb      	strb	r3, [r7, #15]
 800a9b2:	e044      	b.n	800aa3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d018      	beq.n	800a9ee <RCCEx_PLLSAI1_Config+0x86>
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	d825      	bhi.n	800aa0c <RCCEx_PLLSAI1_Config+0xa4>
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d002      	beq.n	800a9ca <RCCEx_PLLSAI1_Config+0x62>
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d009      	beq.n	800a9dc <RCCEx_PLLSAI1_Config+0x74>
 800a9c8:	e020      	b.n	800aa0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a9ca:	4b5f      	ldr	r3, [pc, #380]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0302 	and.w	r3, r3, #2
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d11d      	bne.n	800aa12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9da:	e01a      	b.n	800aa12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a9dc:	4b5a      	ldr	r3, [pc, #360]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d116      	bne.n	800aa16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9ec:	e013      	b.n	800aa16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a9ee:	4b56      	ldr	r3, [pc, #344]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10f      	bne.n	800aa1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a9fa:	4b53      	ldr	r3, [pc, #332]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d109      	bne.n	800aa1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa0a:	e006      	b.n	800aa1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa10:	e004      	b.n	800aa1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aa12:	bf00      	nop
 800aa14:	e002      	b.n	800aa1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aa16:	bf00      	nop
 800aa18:	e000      	b.n	800aa1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aa1a:	bf00      	nop
    }

    if(status == HAL_OK)
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10d      	bne.n	800aa3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800aa22:	4b49      	ldr	r3, [pc, #292]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6819      	ldr	r1, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	011b      	lsls	r3, r3, #4
 800aa36:	430b      	orrs	r3, r1
 800aa38:	4943      	ldr	r1, [pc, #268]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d17c      	bne.n	800ab3e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800aa44:	4b40      	ldr	r3, [pc, #256]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a3f      	ldr	r2, [pc, #252]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aa4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa50:	f7fa fca0 	bl	8005394 <HAL_GetTick>
 800aa54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800aa56:	e009      	b.n	800aa6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aa58:	f7fa fc9c 	bl	8005394 <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d902      	bls.n	800aa6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	73fb      	strb	r3, [r7, #15]
        break;
 800aa6a:	e005      	b.n	800aa78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800aa6c:	4b36      	ldr	r3, [pc, #216]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1ef      	bne.n	800aa58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d15f      	bne.n	800ab3e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d110      	bne.n	800aaa6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aa84:	4b30      	ldr	r3, [pc, #192]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800aa8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	6892      	ldr	r2, [r2, #8]
 800aa94:	0211      	lsls	r1, r2, #8
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	68d2      	ldr	r2, [r2, #12]
 800aa9a:	06d2      	lsls	r2, r2, #27
 800aa9c:	430a      	orrs	r2, r1
 800aa9e:	492a      	ldr	r1, [pc, #168]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	610b      	str	r3, [r1, #16]
 800aaa4:	e027      	b.n	800aaf6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d112      	bne.n	800aad2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aaac:	4b26      	ldr	r3, [pc, #152]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800aab4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	6892      	ldr	r2, [r2, #8]
 800aabc:	0211      	lsls	r1, r2, #8
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	6912      	ldr	r2, [r2, #16]
 800aac2:	0852      	lsrs	r2, r2, #1
 800aac4:	3a01      	subs	r2, #1
 800aac6:	0552      	lsls	r2, r2, #21
 800aac8:	430a      	orrs	r2, r1
 800aaca:	491f      	ldr	r1, [pc, #124]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aacc:	4313      	orrs	r3, r2
 800aace:	610b      	str	r3, [r1, #16]
 800aad0:	e011      	b.n	800aaf6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aad2:	4b1d      	ldr	r3, [pc, #116]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800aada:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	6892      	ldr	r2, [r2, #8]
 800aae2:	0211      	lsls	r1, r2, #8
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	6952      	ldr	r2, [r2, #20]
 800aae8:	0852      	lsrs	r2, r2, #1
 800aaea:	3a01      	subs	r2, #1
 800aaec:	0652      	lsls	r2, r2, #25
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	4915      	ldr	r1, [pc, #84]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800aaf6:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a13      	ldr	r2, [pc, #76]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aafc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab02:	f7fa fc47 	bl	8005394 <HAL_GetTick>
 800ab06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ab08:	e009      	b.n	800ab1e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab0a:	f7fa fc43 	bl	8005394 <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d902      	bls.n	800ab1e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	73fb      	strb	r3, [r7, #15]
          break;
 800ab1c:	e005      	b.n	800ab2a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ab1e:	4b0a      	ldr	r3, [pc, #40]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d0ef      	beq.n	800ab0a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d106      	bne.n	800ab3e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ab30:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab32:	691a      	ldr	r2, [r3, #16]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	4903      	ldr	r1, [pc, #12]	; (800ab48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	40021000 	.word	0x40021000

0800ab4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e095      	b.n	800ac8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d108      	bne.n	800ab78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab6e:	d009      	beq.n	800ab84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	61da      	str	r2, [r3, #28]
 800ab76:	e005      	b.n	800ab84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d106      	bne.n	800aba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7f7 fb32 	bl	8002208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800abc4:	d902      	bls.n	800abcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800abc6:	2300      	movs	r3, #0
 800abc8:	60fb      	str	r3, [r7, #12]
 800abca:	e002      	b.n	800abd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800abcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800abda:	d007      	beq.n	800abec <HAL_SPI_Init+0xa0>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800abe4:	d002      	beq.n	800abec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800abfc:	431a      	orrs	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	431a      	orrs	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	f003 0301 	and.w	r3, r3, #1
 800ac10:	431a      	orrs	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac1a:	431a      	orrs	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac24:	431a      	orrs	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2e:	ea42 0103 	orr.w	r1, r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	0c1b      	lsrs	r3, r3, #16
 800ac48:	f003 0204 	and.w	r2, r3, #4
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	f003 0310 	and.w	r3, r3, #16
 800ac54:	431a      	orrs	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5a:	f003 0308 	and.w	r3, r3, #8
 800ac5e:	431a      	orrs	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ac68:	ea42 0103 	orr.w	r1, r2, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	430a      	orrs	r2, r1
 800ac78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b088      	sub	sp, #32
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	60f8      	str	r0, [r7, #12]
 800ac9a:	60b9      	str	r1, [r7, #8]
 800ac9c:	603b      	str	r3, [r7, #0]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800acac:	2b01      	cmp	r3, #1
 800acae:	d101      	bne.n	800acb4 <HAL_SPI_Transmit+0x22>
 800acb0:	2302      	movs	r3, #2
 800acb2:	e15f      	b.n	800af74 <HAL_SPI_Transmit+0x2e2>
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acbc:	f7fa fb6a 	bl	8005394 <HAL_GetTick>
 800acc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800acc2:	88fb      	ldrh	r3, [r7, #6]
 800acc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d002      	beq.n	800acd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800acd2:	2302      	movs	r3, #2
 800acd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800acd6:	e148      	b.n	800af6a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d002      	beq.n	800ace4 <HAL_SPI_Transmit+0x52>
 800acde:	88fb      	ldrh	r3, [r7, #6]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ace8:	e13f      	b.n	800af6a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2203      	movs	r2, #3
 800acee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	88fa      	ldrh	r2, [r7, #6]
 800ad02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	88fa      	ldrh	r2, [r7, #6]
 800ad08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad34:	d10f      	bne.n	800ad56 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad60:	2b40      	cmp	r3, #64	; 0x40
 800ad62:	d007      	beq.n	800ad74 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad7c:	d94f      	bls.n	800ae1e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d002      	beq.n	800ad8c <HAL_SPI_Transmit+0xfa>
 800ad86:	8afb      	ldrh	r3, [r7, #22]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d142      	bne.n	800ae12 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad90:	881a      	ldrh	r2, [r3, #0]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9c:	1c9a      	adds	r2, r3, #2
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	3b01      	subs	r3, #1
 800adaa:	b29a      	uxth	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800adb0:	e02f      	b.n	800ae12 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d112      	bne.n	800ade6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	881a      	ldrh	r2, [r3, #0]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add0:	1c9a      	adds	r2, r3, #2
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adda:	b29b      	uxth	r3, r3
 800addc:	3b01      	subs	r3, #1
 800adde:	b29a      	uxth	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ade4:	e015      	b.n	800ae12 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ade6:	f7fa fad5 	bl	8005394 <HAL_GetTick>
 800adea:	4602      	mov	r2, r0
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d803      	bhi.n	800adfe <HAL_SPI_Transmit+0x16c>
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfc:	d102      	bne.n	800ae04 <HAL_SPI_Transmit+0x172>
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d106      	bne.n	800ae12 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800ae10:	e0ab      	b.n	800af6a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1ca      	bne.n	800adb2 <HAL_SPI_Transmit+0x120>
 800ae1c:	e080      	b.n	800af20 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d002      	beq.n	800ae2c <HAL_SPI_Transmit+0x19a>
 800ae26:	8afb      	ldrh	r3, [r7, #22]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d174      	bne.n	800af16 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d912      	bls.n	800ae5c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3a:	881a      	ldrh	r2, [r3, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae46:	1c9a      	adds	r2, r3, #2
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	3b02      	subs	r3, #2
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ae5a:	e05c      	b.n	800af16 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	330c      	adds	r3, #12
 800ae66:	7812      	ldrb	r2, [r2, #0]
 800ae68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6e:	1c5a      	adds	r2, r3, #1
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ae82:	e048      	b.n	800af16 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d12b      	bne.n	800aeea <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d912      	bls.n	800aec2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea0:	881a      	ldrh	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeac:	1c9a      	adds	r2, r3, #2
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	3b02      	subs	r3, #2
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aec0:	e029      	b.n	800af16 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	330c      	adds	r3, #12
 800aecc:	7812      	ldrb	r2, [r2, #0]
 800aece:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aede:	b29b      	uxth	r3, r3
 800aee0:	3b01      	subs	r3, #1
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aee8:	e015      	b.n	800af16 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aeea:	f7fa fa53 	bl	8005394 <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d803      	bhi.n	800af02 <HAL_SPI_Transmit+0x270>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af00:	d102      	bne.n	800af08 <HAL_SPI_Transmit+0x276>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d106      	bne.n	800af16 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800af14:	e029      	b.n	800af6a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1b1      	bne.n	800ae84 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 fcf9 	bl	800b91c <SPI_EndRxTxTransaction>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2220      	movs	r2, #32
 800af34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10a      	bne.n	800af54 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af3e:	2300      	movs	r3, #0
 800af40:	613b      	str	r3, [r7, #16]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	613b      	str	r3, [r7, #16]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	613b      	str	r3, [r7, #16]
 800af52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	77fb      	strb	r3, [r7, #31]
 800af60:	e003      	b.n	800af6a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800af72:	7ffb      	ldrb	r3, [r7, #31]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3720      	adds	r7, #32
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af02      	add	r7, sp, #8
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	603b      	str	r3, [r7, #0]
 800af88:	4613      	mov	r3, r2
 800af8a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d002      	beq.n	800afa2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800af9c:	2302      	movs	r3, #2
 800af9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800afa0:	e11a      	b.n	800b1d8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afaa:	d112      	bne.n	800afd2 <HAL_SPI_Receive+0x56>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10e      	bne.n	800afd2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2204      	movs	r2, #4
 800afb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800afbc:	88fa      	ldrh	r2, [r7, #6]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	4613      	mov	r3, r2
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	68b9      	ldr	r1, [r7, #8]
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f000 f90e 	bl	800b1ea <HAL_SPI_TransmitReceive>
 800afce:	4603      	mov	r3, r0
 800afd0:	e107      	b.n	800b1e2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d101      	bne.n	800afe0 <HAL_SPI_Receive+0x64>
 800afdc:	2302      	movs	r3, #2
 800afde:	e100      	b.n	800b1e2 <HAL_SPI_Receive+0x266>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800afe8:	f7fa f9d4 	bl	8005394 <HAL_GetTick>
 800afec:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d002      	beq.n	800affa <HAL_SPI_Receive+0x7e>
 800aff4:	88fb      	ldrh	r3, [r7, #6]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d102      	bne.n	800b000 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800affe:	e0eb      	b.n	800b1d8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2204      	movs	r2, #4
 800b004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	88fa      	ldrh	r2, [r7, #6]
 800b018:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	88fa      	ldrh	r2, [r7, #6]
 800b020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b04a:	d908      	bls.n	800b05e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b05a:	605a      	str	r2, [r3, #4]
 800b05c:	e007      	b.n	800b06e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b06c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b076:	d10f      	bne.n	800b098 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b086:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b096:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a2:	2b40      	cmp	r3, #64	; 0x40
 800b0a4:	d007      	beq.n	800b0b6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b0be:	d86f      	bhi.n	800b1a0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b0c0:	e034      	b.n	800b12c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d117      	bne.n	800b100 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f103 020c 	add.w	r2, r3, #12
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0dc:	7812      	ldrb	r2, [r2, #0]
 800b0de:	b2d2      	uxtb	r2, r2
 800b0e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e6:	1c5a      	adds	r2, r3, #1
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b0fe:	e015      	b.n	800b12c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b100:	f7fa f948 	bl	8005394 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d803      	bhi.n	800b118 <HAL_SPI_Receive+0x19c>
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b116:	d102      	bne.n	800b11e <HAL_SPI_Receive+0x1a2>
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800b11e:	2303      	movs	r3, #3
 800b120:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2201      	movs	r2, #1
 800b126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b12a:	e055      	b.n	800b1d8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b132:	b29b      	uxth	r3, r3
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1c4      	bne.n	800b0c2 <HAL_SPI_Receive+0x146>
 800b138:	e038      	b.n	800b1ac <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f003 0301 	and.w	r3, r3, #1
 800b144:	2b01      	cmp	r3, #1
 800b146:	d115      	bne.n	800b174 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68da      	ldr	r2, [r3, #12]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b152:	b292      	uxth	r2, r2
 800b154:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	1c9a      	adds	r2, r3, #2
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b166:	b29b      	uxth	r3, r3
 800b168:	3b01      	subs	r3, #1
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b172:	e015      	b.n	800b1a0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b174:	f7fa f90e 	bl	8005394 <HAL_GetTick>
 800b178:	4602      	mov	r2, r0
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d803      	bhi.n	800b18c <HAL_SPI_Receive+0x210>
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18a:	d102      	bne.n	800b192 <HAL_SPI_Receive+0x216>
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b19e:	e01b      	b.n	800b1d8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1c6      	bne.n	800b13a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 fb5b 	bl	800b86c <SPI_EndRxTransaction>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2220      	movs	r2, #32
 800b1c0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	75fb      	strb	r3, [r7, #23]
 800b1ce:	e003      	b.n	800b1d8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b08a      	sub	sp, #40	; 0x28
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	60f8      	str	r0, [r7, #12]
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	607a      	str	r2, [r7, #4]
 800b1f6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d101      	bne.n	800b210 <HAL_SPI_TransmitReceive+0x26>
 800b20c:	2302      	movs	r3, #2
 800b20e:	e20a      	b.n	800b626 <HAL_SPI_TransmitReceive+0x43c>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b218:	f7fa f8bc 	bl	8005394 <HAL_GetTick>
 800b21c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b224:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b22c:	887b      	ldrh	r3, [r7, #2]
 800b22e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b230:	887b      	ldrh	r3, [r7, #2]
 800b232:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b234:	7efb      	ldrb	r3, [r7, #27]
 800b236:	2b01      	cmp	r3, #1
 800b238:	d00e      	beq.n	800b258 <HAL_SPI_TransmitReceive+0x6e>
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b240:	d106      	bne.n	800b250 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d102      	bne.n	800b250 <HAL_SPI_TransmitReceive+0x66>
 800b24a:	7efb      	ldrb	r3, [r7, #27]
 800b24c:	2b04      	cmp	r3, #4
 800b24e:	d003      	beq.n	800b258 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b250:	2302      	movs	r3, #2
 800b252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b256:	e1e0      	b.n	800b61a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d005      	beq.n	800b26a <HAL_SPI_TransmitReceive+0x80>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <HAL_SPI_TransmitReceive+0x80>
 800b264:	887b      	ldrh	r3, [r7, #2]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d103      	bne.n	800b272 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b270:	e1d3      	b.n	800b61a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b04      	cmp	r3, #4
 800b27c:	d003      	beq.n	800b286 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2205      	movs	r2, #5
 800b282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	887a      	ldrh	r2, [r7, #2]
 800b296:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	887a      	ldrh	r2, [r7, #2]
 800b29e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	887a      	ldrh	r2, [r7, #2]
 800b2ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	887a      	ldrh	r2, [r7, #2]
 800b2b2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2c8:	d802      	bhi.n	800b2d0 <HAL_SPI_TransmitReceive+0xe6>
 800b2ca:	8a3b      	ldrh	r3, [r7, #16]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d908      	bls.n	800b2e2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b2de:	605a      	str	r2, [r3, #4]
 800b2e0:	e007      	b.n	800b2f2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b2f0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2fc:	2b40      	cmp	r3, #64	; 0x40
 800b2fe:	d007      	beq.n	800b310 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b30e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b318:	f240 8081 	bls.w	800b41e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <HAL_SPI_TransmitReceive+0x140>
 800b324:	8a7b      	ldrh	r3, [r7, #18]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d16d      	bne.n	800b406 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32e:	881a      	ldrh	r2, [r3, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33a:	1c9a      	adds	r2, r3, #2
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b344:	b29b      	uxth	r3, r3
 800b346:	3b01      	subs	r3, #1
 800b348:	b29a      	uxth	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b34e:	e05a      	b.n	800b406 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d11b      	bne.n	800b396 <HAL_SPI_TransmitReceive+0x1ac>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b362:	b29b      	uxth	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d016      	beq.n	800b396 <HAL_SPI_TransmitReceive+0x1ac>
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d113      	bne.n	800b396 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b372:	881a      	ldrh	r2, [r3, #0]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37e:	1c9a      	adds	r2, r3, #2
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b388:	b29b      	uxth	r3, r3
 800b38a:	3b01      	subs	r3, #1
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f003 0301 	and.w	r3, r3, #1
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d11c      	bne.n	800b3de <HAL_SPI_TransmitReceive+0x1f4>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d016      	beq.n	800b3de <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68da      	ldr	r2, [r3, #12]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ba:	b292      	uxth	r2, r2
 800b3bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c2:	1c9a      	adds	r2, r3, #2
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b3de:	f7f9 ffd9 	bl	8005394 <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d80b      	bhi.n	800b406 <HAL_SPI_TransmitReceive+0x21c>
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f4:	d007      	beq.n	800b406 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800b404:	e109      	b.n	800b61a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d19f      	bne.n	800b350 <HAL_SPI_TransmitReceive+0x166>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b416:	b29b      	uxth	r3, r3
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d199      	bne.n	800b350 <HAL_SPI_TransmitReceive+0x166>
 800b41c:	e0e3      	b.n	800b5e6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d003      	beq.n	800b42e <HAL_SPI_TransmitReceive+0x244>
 800b426:	8a7b      	ldrh	r3, [r7, #18]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	f040 80cf 	bne.w	800b5cc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b432:	b29b      	uxth	r3, r3
 800b434:	2b01      	cmp	r3, #1
 800b436:	d912      	bls.n	800b45e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43c:	881a      	ldrh	r2, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b448:	1c9a      	adds	r2, r3, #2
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b452:	b29b      	uxth	r3, r3
 800b454:	3b02      	subs	r3, #2
 800b456:	b29a      	uxth	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b45c:	e0b6      	b.n	800b5cc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	330c      	adds	r3, #12
 800b468:	7812      	ldrb	r2, [r2, #0]
 800b46a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b470:	1c5a      	adds	r2, r3, #1
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	3b01      	subs	r3, #1
 800b47e:	b29a      	uxth	r2, r3
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b484:	e0a2      	b.n	800b5cc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	f003 0302 	and.w	r3, r3, #2
 800b490:	2b02      	cmp	r3, #2
 800b492:	d134      	bne.n	800b4fe <HAL_SPI_TransmitReceive+0x314>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b498:	b29b      	uxth	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d02f      	beq.n	800b4fe <HAL_SPI_TransmitReceive+0x314>
 800b49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d12c      	bne.n	800b4fe <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d912      	bls.n	800b4d4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	881a      	ldrh	r2, [r3, #0]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4be:	1c9a      	adds	r2, r3, #2
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	3b02      	subs	r3, #2
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b4d2:	e012      	b.n	800b4fa <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	330c      	adds	r3, #12
 800b4de:	7812      	ldrb	r2, [r2, #0]
 800b4e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d148      	bne.n	800b59e <HAL_SPI_TransmitReceive+0x3b4>
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b512:	b29b      	uxth	r3, r3
 800b514:	2b00      	cmp	r3, #0
 800b516:	d042      	beq.n	800b59e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b51e:	b29b      	uxth	r3, r3
 800b520:	2b01      	cmp	r3, #1
 800b522:	d923      	bls.n	800b56c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52e:	b292      	uxth	r2, r2
 800b530:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b536:	1c9a      	adds	r2, r3, #2
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b542:	b29b      	uxth	r3, r3
 800b544:	3b02      	subs	r3, #2
 800b546:	b29a      	uxth	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b554:	b29b      	uxth	r3, r3
 800b556:	2b01      	cmp	r3, #1
 800b558:	d81f      	bhi.n	800b59a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b568:	605a      	str	r2, [r3, #4]
 800b56a:	e016      	b.n	800b59a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f103 020c 	add.w	r2, r3, #12
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b578:	7812      	ldrb	r2, [r2, #0]
 800b57a:	b2d2      	uxtb	r2, r2
 800b57c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b58e:	b29b      	uxth	r3, r3
 800b590:	3b01      	subs	r3, #1
 800b592:	b29a      	uxth	r2, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b59a:	2301      	movs	r3, #1
 800b59c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b59e:	f7f9 fef9 	bl	8005394 <HAL_GetTick>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d803      	bhi.n	800b5b6 <HAL_SPI_TransmitReceive+0x3cc>
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b4:	d102      	bne.n	800b5bc <HAL_SPI_TransmitReceive+0x3d2>
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d107      	bne.n	800b5cc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800b5ca:	e026      	b.n	800b61a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f47f af57 	bne.w	800b486 <HAL_SPI_TransmitReceive+0x29c>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f47f af50 	bne.w	800b486 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b5e6:	69fa      	ldr	r2, [r7, #28]
 800b5e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f000 f996 	bl	800b91c <SPI_EndRxTxTransaction>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d005      	beq.n	800b602 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2220      	movs	r2, #32
 800b600:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b606:	2b00      	cmp	r3, #0
 800b608:	d003      	beq.n	800b612 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b610:	e003      	b.n	800b61a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b626:	4618      	mov	r0, r3
 800b628:	3728      	adds	r7, #40	; 0x28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
	...

0800b630 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b088      	sub	sp, #32
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	603b      	str	r3, [r7, #0]
 800b63c:	4613      	mov	r3, r2
 800b63e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b640:	f7f9 fea8 	bl	8005394 <HAL_GetTick>
 800b644:	4602      	mov	r2, r0
 800b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b648:	1a9b      	subs	r3, r3, r2
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	4413      	add	r3, r2
 800b64e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b650:	f7f9 fea0 	bl	8005394 <HAL_GetTick>
 800b654:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b656:	4b39      	ldr	r3, [pc, #228]	; (800b73c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	015b      	lsls	r3, r3, #5
 800b65c:	0d1b      	lsrs	r3, r3, #20
 800b65e:	69fa      	ldr	r2, [r7, #28]
 800b660:	fb02 f303 	mul.w	r3, r2, r3
 800b664:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b666:	e054      	b.n	800b712 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b66e:	d050      	beq.n	800b712 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b670:	f7f9 fe90 	bl	8005394 <HAL_GetTick>
 800b674:	4602      	mov	r2, r0
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	69fa      	ldr	r2, [r7, #28]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d902      	bls.n	800b686 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d13d      	bne.n	800b702 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b694:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b69e:	d111      	bne.n	800b6c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6a8:	d004      	beq.n	800b6b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6b2:	d107      	bne.n	800b6c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6cc:	d10f      	bne.n	800b6ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e017      	b.n	800b732 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d101      	bne.n	800b70c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	3b01      	subs	r3, #1
 800b710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	4013      	ands	r3, r2
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	429a      	cmp	r2, r3
 800b720:	bf0c      	ite	eq
 800b722:	2301      	moveq	r3, #1
 800b724:	2300      	movne	r3, #0
 800b726:	b2db      	uxtb	r3, r3
 800b728:	461a      	mov	r2, r3
 800b72a:	79fb      	ldrb	r3, [r7, #7]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d19b      	bne.n	800b668 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3720      	adds	r7, #32
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20000020 	.word	0x20000020

0800b740 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08a      	sub	sp, #40	; 0x28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
 800b74c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b752:	f7f9 fe1f 	bl	8005394 <HAL_GetTick>
 800b756:	4602      	mov	r2, r0
 800b758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75a:	1a9b      	subs	r3, r3, r2
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	4413      	add	r3, r2
 800b760:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b762:	f7f9 fe17 	bl	8005394 <HAL_GetTick>
 800b766:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	330c      	adds	r3, #12
 800b76e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b770:	4b3d      	ldr	r3, [pc, #244]	; (800b868 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	4613      	mov	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4413      	add	r3, r2
 800b77a:	00da      	lsls	r2, r3, #3
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	0d1b      	lsrs	r3, r3, #20
 800b780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b782:	fb02 f303 	mul.w	r3, r2, r3
 800b786:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b788:	e060      	b.n	800b84c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b790:	d107      	bne.n	800b7a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d104      	bne.n	800b7a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b7a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a8:	d050      	beq.n	800b84c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b7aa:	f7f9 fdf3 	bl	8005394 <HAL_GetTick>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d902      	bls.n	800b7c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d13d      	bne.n	800b83c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b7ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7d8:	d111      	bne.n	800b7fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7e2:	d004      	beq.n	800b7ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7ec:	d107      	bne.n	800b7fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b806:	d10f      	bne.n	800b828 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b826:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e010      	b.n	800b85e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d101      	bne.n	800b846 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	3b01      	subs	r3, #1
 800b84a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	689a      	ldr	r2, [r3, #8]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	4013      	ands	r3, r2
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d196      	bne.n	800b78a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3728      	adds	r7, #40	; 0x28
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20000020 	.word	0x20000020

0800b86c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af02      	add	r7, sp, #8
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b880:	d111      	bne.n	800b8a6 <SPI_EndRxTransaction+0x3a>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b88a:	d004      	beq.n	800b896 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b894:	d107      	bne.n	800b8a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2180      	movs	r1, #128	; 0x80
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f7ff febd 	bl	800b630 <SPI_WaitFlagStateUntilTimeout>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d007      	beq.n	800b8cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8c0:	f043 0220 	orr.w	r2, r3, #32
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e023      	b.n	800b914 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8d4:	d11d      	bne.n	800b912 <SPI_EndRxTransaction+0xa6>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8de:	d004      	beq.n	800b8ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8e8:	d113      	bne.n	800b912 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f7ff ff22 	bl	800b740 <SPI_WaitFifoStateUntilTimeout>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d007      	beq.n	800b912 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b906:	f043 0220 	orr.w	r2, r3, #32
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b90e:	2303      	movs	r3, #3
 800b910:	e000      	b.n	800b914 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af02      	add	r7, sp, #8
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2200      	movs	r2, #0
 800b930:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f7ff ff03 	bl	800b740 <SPI_WaitFifoStateUntilTimeout>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d007      	beq.n	800b950 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b944:	f043 0220 	orr.w	r2, r3, #32
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b94c:	2303      	movs	r3, #3
 800b94e:	e027      	b.n	800b9a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2200      	movs	r2, #0
 800b958:	2180      	movs	r1, #128	; 0x80
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f7ff fe68 	bl	800b630 <SPI_WaitFlagStateUntilTimeout>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d007      	beq.n	800b976 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b96a:	f043 0220 	orr.w	r2, r3, #32
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b972:	2303      	movs	r3, #3
 800b974:	e014      	b.n	800b9a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7ff fedc 	bl	800b740 <SPI_WaitFifoStateUntilTimeout>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d007      	beq.n	800b99e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b992:	f043 0220 	orr.w	r2, r3, #32
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b99a:	2303      	movs	r3, #3
 800b99c:	e000      	b.n	800b9a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e049      	b.n	800ba4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d106      	bne.n	800b9d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7f9 fa96 	bl	8004f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	3304      	adds	r3, #4
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	f000 f94c 	bl	800bc84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
	...

0800ba58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d001      	beq.n	800ba70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e033      	b.n	800bad8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2202      	movs	r2, #2
 800ba74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a19      	ldr	r2, [pc, #100]	; (800bae4 <HAL_TIM_Base_Start+0x8c>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d009      	beq.n	800ba96 <HAL_TIM_Base_Start+0x3e>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba8a:	d004      	beq.n	800ba96 <HAL_TIM_Base_Start+0x3e>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a15      	ldr	r2, [pc, #84]	; (800bae8 <HAL_TIM_Base_Start+0x90>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d115      	bne.n	800bac2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	689a      	ldr	r2, [r3, #8]
 800ba9c:	4b13      	ldr	r3, [pc, #76]	; (800baec <HAL_TIM_Base_Start+0x94>)
 800ba9e:	4013      	ands	r3, r2
 800baa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2b06      	cmp	r3, #6
 800baa6:	d015      	beq.n	800bad4 <HAL_TIM_Base_Start+0x7c>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baae:	d011      	beq.n	800bad4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f042 0201 	orr.w	r2, r2, #1
 800babe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bac0:	e008      	b.n	800bad4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0201 	orr.w	r2, r2, #1
 800bad0:	601a      	str	r2, [r3, #0]
 800bad2:	e000      	b.n	800bad6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bad4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr
 800bae4:	40012c00 	.word	0x40012c00
 800bae8:	40014000 	.word	0x40014000
 800baec:	00010007 	.word	0x00010007

0800baf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d101      	bne.n	800bb0c <HAL_TIM_ConfigClockSource+0x1c>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	e0b6      	b.n	800bc7a <HAL_TIM_ConfigClockSource+0x18a>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2202      	movs	r2, #2
 800bb18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bb2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb48:	d03e      	beq.n	800bbc8 <HAL_TIM_ConfigClockSource+0xd8>
 800bb4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb4e:	f200 8087 	bhi.w	800bc60 <HAL_TIM_ConfigClockSource+0x170>
 800bb52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb56:	f000 8086 	beq.w	800bc66 <HAL_TIM_ConfigClockSource+0x176>
 800bb5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb5e:	d87f      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x170>
 800bb60:	2b70      	cmp	r3, #112	; 0x70
 800bb62:	d01a      	beq.n	800bb9a <HAL_TIM_ConfigClockSource+0xaa>
 800bb64:	2b70      	cmp	r3, #112	; 0x70
 800bb66:	d87b      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x170>
 800bb68:	2b60      	cmp	r3, #96	; 0x60
 800bb6a:	d050      	beq.n	800bc0e <HAL_TIM_ConfigClockSource+0x11e>
 800bb6c:	2b60      	cmp	r3, #96	; 0x60
 800bb6e:	d877      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x170>
 800bb70:	2b50      	cmp	r3, #80	; 0x50
 800bb72:	d03c      	beq.n	800bbee <HAL_TIM_ConfigClockSource+0xfe>
 800bb74:	2b50      	cmp	r3, #80	; 0x50
 800bb76:	d873      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x170>
 800bb78:	2b40      	cmp	r3, #64	; 0x40
 800bb7a:	d058      	beq.n	800bc2e <HAL_TIM_ConfigClockSource+0x13e>
 800bb7c:	2b40      	cmp	r3, #64	; 0x40
 800bb7e:	d86f      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x170>
 800bb80:	2b30      	cmp	r3, #48	; 0x30
 800bb82:	d064      	beq.n	800bc4e <HAL_TIM_ConfigClockSource+0x15e>
 800bb84:	2b30      	cmp	r3, #48	; 0x30
 800bb86:	d86b      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x170>
 800bb88:	2b20      	cmp	r3, #32
 800bb8a:	d060      	beq.n	800bc4e <HAL_TIM_ConfigClockSource+0x15e>
 800bb8c:	2b20      	cmp	r3, #32
 800bb8e:	d867      	bhi.n	800bc60 <HAL_TIM_ConfigClockSource+0x170>
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d05c      	beq.n	800bc4e <HAL_TIM_ConfigClockSource+0x15e>
 800bb94:	2b10      	cmp	r3, #16
 800bb96:	d05a      	beq.n	800bc4e <HAL_TIM_ConfigClockSource+0x15e>
 800bb98:	e062      	b.n	800bc60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbaa:	f000 f949 	bl	800be40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bbbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	609a      	str	r2, [r3, #8]
      break;
 800bbc6:	e04f      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbd8:	f000 f932 	bl	800be40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	689a      	ldr	r2, [r3, #8]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbea:	609a      	str	r2, [r3, #8]
      break;
 800bbec:	e03c      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f000 f8a6 	bl	800bd4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2150      	movs	r1, #80	; 0x50
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f8ff 	bl	800be0a <TIM_ITRx_SetConfig>
      break;
 800bc0c:	e02c      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	f000 f8c5 	bl	800bdaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2160      	movs	r1, #96	; 0x60
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 f8ef 	bl	800be0a <TIM_ITRx_SetConfig>
      break;
 800bc2c:	e01c      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f000 f886 	bl	800bd4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2140      	movs	r1, #64	; 0x40
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 f8df 	bl	800be0a <TIM_ITRx_SetConfig>
      break;
 800bc4c:	e00c      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4619      	mov	r1, r3
 800bc58:	4610      	mov	r0, r2
 800bc5a:	f000 f8d6 	bl	800be0a <TIM_ITRx_SetConfig>
      break;
 800bc5e:	e003      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	73fb      	strb	r3, [r7, #15]
      break;
 800bc64:	e000      	b.n	800bc68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800bc66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a2a      	ldr	r2, [pc, #168]	; (800bd40 <TIM_Base_SetConfig+0xbc>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d003      	beq.n	800bca4 <TIM_Base_SetConfig+0x20>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bca2:	d108      	bne.n	800bcb6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a21      	ldr	r2, [pc, #132]	; (800bd40 <TIM_Base_SetConfig+0xbc>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d00b      	beq.n	800bcd6 <TIM_Base_SetConfig+0x52>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcc4:	d007      	beq.n	800bcd6 <TIM_Base_SetConfig+0x52>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a1e      	ldr	r2, [pc, #120]	; (800bd44 <TIM_Base_SetConfig+0xc0>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d003      	beq.n	800bcd6 <TIM_Base_SetConfig+0x52>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a1d      	ldr	r2, [pc, #116]	; (800bd48 <TIM_Base_SetConfig+0xc4>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d108      	bne.n	800bce8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	689a      	ldr	r2, [r3, #8]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a0c      	ldr	r2, [pc, #48]	; (800bd40 <TIM_Base_SetConfig+0xbc>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d007      	beq.n	800bd24 <TIM_Base_SetConfig+0xa0>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a0b      	ldr	r2, [pc, #44]	; (800bd44 <TIM_Base_SetConfig+0xc0>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d003      	beq.n	800bd24 <TIM_Base_SetConfig+0xa0>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a0a      	ldr	r2, [pc, #40]	; (800bd48 <TIM_Base_SetConfig+0xc4>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d103      	bne.n	800bd2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	691a      	ldr	r2, [r3, #16]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	615a      	str	r2, [r3, #20]
}
 800bd32:	bf00      	nop
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	40012c00 	.word	0x40012c00
 800bd44:	40014000 	.word	0x40014000
 800bd48:	40014400 	.word	0x40014400

0800bd4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	f023 0201 	bic.w	r2, r3, #1
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	699b      	ldr	r3, [r3, #24]
 800bd6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f023 030a 	bic.w	r3, r3, #10
 800bd88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd8a:	697a      	ldr	r2, [r7, #20]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	621a      	str	r2, [r3, #32]
}
 800bd9e:	bf00      	nop
 800bda0:	371c      	adds	r7, #28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b087      	sub	sp, #28
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a1b      	ldr	r3, [r3, #32]
 800bdba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6a1b      	ldr	r3, [r3, #32]
 800bdc0:	f023 0210 	bic.w	r2, r3, #16
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	031b      	lsls	r3, r3, #12
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bde6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	011b      	lsls	r3, r3, #4
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	621a      	str	r2, [r3, #32]
}
 800bdfe:	bf00      	nop
 800be00:	371c      	adds	r7, #28
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b085      	sub	sp, #20
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	4313      	orrs	r3, r2
 800be28:	f043 0307 	orr.w	r3, r3, #7
 800be2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	609a      	str	r2, [r3, #8]
}
 800be34:	bf00      	nop
 800be36:	3714      	adds	r7, #20
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be40:	b480      	push	{r7}
 800be42:	b087      	sub	sp, #28
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	021a      	lsls	r2, r3, #8
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	431a      	orrs	r2, r3
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4313      	orrs	r3, r2
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	609a      	str	r2, [r3, #8]
}
 800be74:	bf00      	nop
 800be76:	371c      	adds	r7, #28
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be90:	2b01      	cmp	r3, #1
 800be92:	d101      	bne.n	800be98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be94:	2302      	movs	r3, #2
 800be96:	e04f      	b.n	800bf38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2201      	movs	r2, #1
 800be9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2202      	movs	r2, #2
 800bea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a21      	ldr	r2, [pc, #132]	; (800bf44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d108      	bne.n	800bed4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bec8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a14      	ldr	r2, [pc, #80]	; (800bf44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d009      	beq.n	800bf0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf00:	d004      	beq.n	800bf0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4a10      	ldr	r2, [pc, #64]	; (800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d10c      	bne.n	800bf26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr
 800bf44:	40012c00 	.word	0x40012c00
 800bf48:	40014000 	.word	0x40014000

0800bf4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d101      	bne.n	800bf5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e040      	b.n	800bfe0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d106      	bne.n	800bf74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7f9 f840 	bl	8004ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2224      	movs	r2, #36	; 0x24
 800bf78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f022 0201 	bic.w	r2, r2, #1
 800bf88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 feb0 	bl	800ccf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 fc81 	bl	800c8a0 <UART_SetConfig>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d101      	bne.n	800bfa8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e01b      	b.n	800bfe0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	689a      	ldr	r2, [r3, #8]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f042 0201 	orr.w	r2, r2, #1
 800bfd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 ff2f 	bl	800ce3c <UART_CheckIdleState>
 800bfde:	4603      	mov	r3, r0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	4613      	mov	r3, r2
 800bff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bffc:	2b20      	cmp	r3, #32
 800bffe:	d137      	bne.n	800c070 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d002      	beq.n	800c00c <HAL_UART_Receive_DMA+0x24>
 800c006:	88fb      	ldrh	r3, [r7, #6]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d101      	bne.n	800c010 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	e030      	b.n	800c072 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2200      	movs	r2, #0
 800c014:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a18      	ldr	r2, [pc, #96]	; (800c07c <HAL_UART_Receive_DMA+0x94>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d01f      	beq.n	800c060 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d018      	beq.n	800c060 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	e853 3f00 	ldrex	r3, [r3]
 800c03a:	613b      	str	r3, [r7, #16]
   return(result);
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c042:	627b      	str	r3, [r7, #36]	; 0x24
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	461a      	mov	r2, r3
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	623b      	str	r3, [r7, #32]
 800c04e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c050:	69f9      	ldr	r1, [r7, #28]
 800c052:	6a3a      	ldr	r2, [r7, #32]
 800c054:	e841 2300 	strex	r3, r2, [r1]
 800c058:	61bb      	str	r3, [r7, #24]
   return(result);
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e6      	bne.n	800c02e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c060:	88fb      	ldrh	r3, [r7, #6]
 800c062:	461a      	mov	r2, r3
 800c064:	68b9      	ldr	r1, [r7, #8]
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f000 fff8 	bl	800d05c <UART_Start_Receive_DMA>
 800c06c:	4603      	mov	r3, r0
 800c06e:	e000      	b.n	800c072 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c070:	2302      	movs	r3, #2
  }
}
 800c072:	4618      	mov	r0, r3
 800c074:	3728      	adds	r7, #40	; 0x28
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	40008000 	.word	0x40008000

0800c080 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b0a0      	sub	sp, #128	; 0x80
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c090:	e853 3f00 	ldrex	r3, [r3]
 800c094:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c098:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800c09c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0a8:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c0ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0ae:	e841 2300 	strex	r3, r2, [r1]
 800c0b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c0b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e6      	bne.n	800c088 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	3308      	adds	r3, #8
 800c0c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0c4:	e853 3f00 	ldrex	r3, [r3]
 800c0c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c0ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0cc:	f023 0301 	bic.w	r3, r3, #1
 800c0d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0da:	657a      	str	r2, [r7, #84]	; 0x54
 800c0dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c0e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e5      	bne.n	800c0ba <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d118      	bne.n	800c128 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0fe:	e853 3f00 	ldrex	r3, [r3]
 800c102:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	f023 0310 	bic.w	r3, r3, #16
 800c10a:	677b      	str	r3, [r7, #116]	; 0x74
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	461a      	mov	r2, r3
 800c112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c114:	643b      	str	r3, [r7, #64]	; 0x40
 800c116:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c118:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c11a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c11c:	e841 2300 	strex	r3, r2, [r1]
 800c120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1e6      	bne.n	800c0f6 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c132:	2b80      	cmp	r3, #128	; 0x80
 800c134:	d137      	bne.n	800c1a6 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	3308      	adds	r3, #8
 800c13c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13e:	6a3b      	ldr	r3, [r7, #32]
 800c140:	e853 3f00 	ldrex	r3, [r3]
 800c144:	61fb      	str	r3, [r7, #28]
   return(result);
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c14c:	673b      	str	r3, [r7, #112]	; 0x70
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3308      	adds	r3, #8
 800c154:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c156:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c15c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c15e:	e841 2300 	strex	r3, r2, [r1]
 800c162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1e5      	bne.n	800c136 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d019      	beq.n	800c1a6 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c176:	2200      	movs	r2, #0
 800c178:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fa fe02 	bl	8006d88 <HAL_DMA_Abort>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00d      	beq.n	800c1a6 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fa ff28 	bl	8006fe4 <HAL_DMA_GetError>
 800c194:	4603      	mov	r3, r0
 800c196:	2b20      	cmp	r3, #32
 800c198:	d105      	bne.n	800c1a6 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2210      	movs	r2, #16
 800c19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	e063      	b.n	800c26e <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1b0:	2b40      	cmp	r3, #64	; 0x40
 800c1b2:	d137      	bne.n	800c224 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3308      	adds	r3, #8
 800c1ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	e853 3f00 	ldrex	r3, [r3]
 800c1c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c1d4:	61ba      	str	r2, [r7, #24]
 800c1d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d8:	6979      	ldr	r1, [r7, #20]
 800c1da:	69ba      	ldr	r2, [r7, #24]
 800c1dc:	e841 2300 	strex	r3, r2, [r1]
 800c1e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1e5      	bne.n	800c1b4 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d019      	beq.n	800c224 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fa fdc3 	bl	8006d88 <HAL_DMA_Abort>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00d      	beq.n	800c224 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fa fee9 	bl	8006fe4 <HAL_DMA_GetError>
 800c212:	4603      	mov	r3, r0
 800c214:	2b20      	cmp	r3, #32
 800c216:	d105      	bne.n	800c224 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2210      	movs	r2, #16
 800c21c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e024      	b.n	800c26e <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	220f      	movs	r2, #15
 800c23a:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	8b1b      	ldrh	r3, [r3, #24]
 800c242:	b29a      	uxth	r2, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f042 0208 	orr.w	r2, r2, #8
 800c24c:	b292      	uxth	r2, r2
 800c24e:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2220      	movs	r2, #32
 800c254:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2220      	movs	r2, #32
 800c25a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3780      	adds	r7, #128	; 0x80
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
	...

0800c278 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b0ba      	sub	sp, #232	; 0xe8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c29e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c2a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c2ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d115      	bne.n	800c2e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2b8:	f003 0320 	and.w	r3, r3, #32
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00f      	beq.n	800c2e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c2c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2c4:	f003 0320 	and.w	r3, r3, #32
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d009      	beq.n	800c2e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 82ae 	beq.w	800c832 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	4798      	blx	r3
      }
      return;
 800c2de:	e2a8      	b.n	800c832 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c2e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f000 8117 	beq.w	800c518 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c2ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d106      	bne.n	800c304 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c2f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c2fa:	4b85      	ldr	r3, [pc, #532]	; (800c510 <HAL_UART_IRQHandler+0x298>)
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f000 810a 	beq.w	800c518 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c308:	f003 0301 	and.w	r3, r3, #1
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d011      	beq.n	800c334 <HAL_UART_IRQHandler+0xbc>
 800c310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00b      	beq.n	800c334 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2201      	movs	r2, #1
 800c322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c32a:	f043 0201 	orr.w	r2, r3, #1
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c338:	f003 0302 	and.w	r3, r3, #2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d011      	beq.n	800c364 <HAL_UART_IRQHandler+0xec>
 800c340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c344:	f003 0301 	and.w	r3, r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00b      	beq.n	800c364 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2202      	movs	r2, #2
 800c352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c35a:	f043 0204 	orr.w	r2, r3, #4
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c368:	f003 0304 	and.w	r3, r3, #4
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d011      	beq.n	800c394 <HAL_UART_IRQHandler+0x11c>
 800c370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00b      	beq.n	800c394 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2204      	movs	r2, #4
 800c382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c38a:	f043 0202 	orr.w	r2, r3, #2
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c398:	f003 0308 	and.w	r3, r3, #8
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d017      	beq.n	800c3d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3a4:	f003 0320 	and.w	r3, r3, #32
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d105      	bne.n	800c3b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c3ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00b      	beq.n	800c3d0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2208      	movs	r2, #8
 800c3be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c6:	f043 0208 	orr.w	r2, r3, #8
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d012      	beq.n	800c402 <HAL_UART_IRQHandler+0x18a>
 800c3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00c      	beq.n	800c402 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3f8:	f043 0220 	orr.w	r2, r3, #32
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 8214 	beq.w	800c836 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c40e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c412:	f003 0320 	and.w	r3, r3, #32
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00d      	beq.n	800c436 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c41a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c41e:	f003 0320 	and.w	r3, r3, #32
 800c422:	2b00      	cmp	r3, #0
 800c424:	d007      	beq.n	800c436 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c43c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c44a:	2b40      	cmp	r3, #64	; 0x40
 800c44c:	d005      	beq.n	800c45a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c44e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c452:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c456:	2b00      	cmp	r3, #0
 800c458:	d04f      	beq.n	800c4fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fec4 	bl	800d1e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c46a:	2b40      	cmp	r3, #64	; 0x40
 800c46c:	d141      	bne.n	800c4f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3308      	adds	r3, #8
 800c474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c478:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c47c:	e853 3f00 	ldrex	r3, [r3]
 800c480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c484:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c48c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	3308      	adds	r3, #8
 800c496:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c49a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c49e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c4a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c4aa:	e841 2300 	strex	r3, r2, [r1]
 800c4ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c4b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1d9      	bne.n	800c46e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d013      	beq.n	800c4ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4c6:	4a13      	ldr	r2, [pc, #76]	; (800c514 <HAL_UART_IRQHandler+0x29c>)
 800c4c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fa fc98 	bl	8006e04 <HAL_DMA_Abort_IT>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d017      	beq.n	800c50a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4e8:	e00f      	b.n	800c50a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f9c2 	bl	800c874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4f0:	e00b      	b.n	800c50a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f9be 	bl	800c874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4f8:	e007      	b.n	800c50a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f9ba 	bl	800c874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800c508:	e195      	b.n	800c836 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c50a:	bf00      	nop
    return;
 800c50c:	e193      	b.n	800c836 <HAL_UART_IRQHandler+0x5be>
 800c50e:	bf00      	nop
 800c510:	04000120 	.word	0x04000120
 800c514:	0800d499 	.word	0x0800d499

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	f040 814e 	bne.w	800c7be <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c526:	f003 0310 	and.w	r3, r3, #16
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 8147 	beq.w	800c7be <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c534:	f003 0310 	and.w	r3, r3, #16
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f000 8140 	beq.w	800c7be <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2210      	movs	r2, #16
 800c544:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c550:	2b40      	cmp	r3, #64	; 0x40
 800c552:	f040 80b8 	bne.w	800c6c6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c562:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c566:	2b00      	cmp	r3, #0
 800c568:	f000 8167 	beq.w	800c83a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c576:	429a      	cmp	r2, r3
 800c578:	f080 815f 	bcs.w	800c83a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c582:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 0320 	and.w	r3, r3, #32
 800c592:	2b00      	cmp	r3, #0
 800c594:	f040 8086 	bne.w	800c6a4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c5ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c5c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c5c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c5ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5d2:	e841 2300 	strex	r3, r2, [r1]
 800c5d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c5da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1da      	bne.n	800c598 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3308      	adds	r3, #8
 800c5e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5ec:	e853 3f00 	ldrex	r3, [r3]
 800c5f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c5f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5f4:	f023 0301 	bic.w	r3, r3, #1
 800c5f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3308      	adds	r3, #8
 800c602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c60a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c60e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c612:	e841 2300 	strex	r3, r2, [r1]
 800c616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1e1      	bne.n	800c5e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3308      	adds	r3, #8
 800c624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c628:	e853 3f00 	ldrex	r3, [r3]
 800c62c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c62e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	3308      	adds	r3, #8
 800c63e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c642:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c64a:	e841 2300 	strex	r3, r2, [r1]
 800c64e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1e3      	bne.n	800c61e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2220      	movs	r2, #32
 800c65a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c66c:	e853 3f00 	ldrex	r3, [r3]
 800c670:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c674:	f023 0310 	bic.w	r3, r3, #16
 800c678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	461a      	mov	r2, r3
 800c682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c686:	65bb      	str	r3, [r7, #88]	; 0x58
 800c688:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c68c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c68e:	e841 2300 	strex	r3, r2, [r1]
 800c692:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1e4      	bne.n	800c664 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7fa fb72 	bl	8006d88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f8e2 	bl	800c888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6c4:	e0b9      	b.n	800c83a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f000 80ab 	beq.w	800c83e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800c6e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f000 80a6 	beq.w	800c83e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	e853 3f00 	ldrex	r3, [r3]
 800c6fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	461a      	mov	r2, r3
 800c710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c714:	647b      	str	r3, [r7, #68]	; 0x44
 800c716:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c71a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c71c:	e841 2300 	strex	r3, r2, [r1]
 800c720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1e4      	bne.n	800c6f2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3308      	adds	r3, #8
 800c72e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	e853 3f00 	ldrex	r3, [r3]
 800c736:	623b      	str	r3, [r7, #32]
   return(result);
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	f023 0301 	bic.w	r3, r3, #1
 800c73e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3308      	adds	r3, #8
 800c748:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c74c:	633a      	str	r2, [r7, #48]	; 0x30
 800c74e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c754:	e841 2300 	strex	r3, r2, [r1]
 800c758:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1e3      	bne.n	800c728 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2220      	movs	r2, #32
 800c764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	e853 3f00 	ldrex	r3, [r3]
 800c780:	60fb      	str	r3, [r7, #12]
   return(result);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f023 0310 	bic.w	r3, r3, #16
 800c788:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	461a      	mov	r2, r3
 800c792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c796:	61fb      	str	r3, [r7, #28]
 800c798:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79a:	69b9      	ldr	r1, [r7, #24]
 800c79c:	69fa      	ldr	r2, [r7, #28]
 800c79e:	e841 2300 	strex	r3, r2, [r1]
 800c7a2:	617b      	str	r3, [r7, #20]
   return(result);
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1e4      	bne.n	800c774 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f866 	bl	800c888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7bc:	e03f      	b.n	800c83e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00e      	beq.n	800c7e8 <HAL_UART_IRQHandler+0x570>
 800c7ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d008      	beq.n	800c7e8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c7de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 fe99 	bl	800d518 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7e6:	e02d      	b.n	800c844 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00e      	beq.n	800c812 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d008      	beq.n	800c812 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d01c      	beq.n	800c842 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	4798      	blx	r3
    }
    return;
 800c810:	e017      	b.n	800c842 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d012      	beq.n	800c844 <HAL_UART_IRQHandler+0x5cc>
 800c81e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00c      	beq.n	800c844 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fe4a 	bl	800d4c4 <UART_EndTransmit_IT>
    return;
 800c830:	e008      	b.n	800c844 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c832:	bf00      	nop
 800c834:	e006      	b.n	800c844 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c836:	bf00      	nop
 800c838:	e004      	b.n	800c844 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c83a:	bf00      	nop
 800c83c:	e002      	b.n	800c844 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c83e:	bf00      	nop
 800c840:	e000      	b.n	800c844 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c842:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c844:	37e8      	adds	r7, #232	; 0xe8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop

0800c84c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c868:	bf00      	nop
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8a4:	b08a      	sub	sp, #40	; 0x28
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	689a      	ldr	r2, [r3, #8]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	431a      	orrs	r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	695b      	ldr	r3, [r3, #20]
 800c8be:	431a      	orrs	r2, r3
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	69db      	ldr	r3, [r3, #28]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	4bb4      	ldr	r3, [pc, #720]	; (800cba0 <UART_SetConfig+0x300>)
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	6812      	ldr	r2, [r2, #0]
 800c8d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8d8:	430b      	orrs	r3, r1
 800c8da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	68da      	ldr	r2, [r3, #12]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	430a      	orrs	r2, r1
 800c8f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4aa9      	ldr	r2, [pc, #676]	; (800cba4 <UART_SetConfig+0x304>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d004      	beq.n	800c90c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c908:	4313      	orrs	r3, r2
 800c90a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c91c:	430a      	orrs	r2, r1
 800c91e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4aa0      	ldr	r2, [pc, #640]	; (800cba8 <UART_SetConfig+0x308>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d126      	bne.n	800c978 <UART_SetConfig+0xd8>
 800c92a:	4ba0      	ldr	r3, [pc, #640]	; (800cbac <UART_SetConfig+0x30c>)
 800c92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c930:	f003 0303 	and.w	r3, r3, #3
 800c934:	2b03      	cmp	r3, #3
 800c936:	d81b      	bhi.n	800c970 <UART_SetConfig+0xd0>
 800c938:	a201      	add	r2, pc, #4	; (adr r2, 800c940 <UART_SetConfig+0xa0>)
 800c93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c93e:	bf00      	nop
 800c940:	0800c951 	.word	0x0800c951
 800c944:	0800c961 	.word	0x0800c961
 800c948:	0800c959 	.word	0x0800c959
 800c94c:	0800c969 	.word	0x0800c969
 800c950:	2301      	movs	r3, #1
 800c952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c956:	e080      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800c958:	2302      	movs	r3, #2
 800c95a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c95e:	e07c      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800c960:	2304      	movs	r3, #4
 800c962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c966:	e078      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800c968:	2308      	movs	r3, #8
 800c96a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c96e:	e074      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800c970:	2310      	movs	r3, #16
 800c972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c976:	e070      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a8c      	ldr	r2, [pc, #560]	; (800cbb0 <UART_SetConfig+0x310>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d138      	bne.n	800c9f4 <UART_SetConfig+0x154>
 800c982:	4b8a      	ldr	r3, [pc, #552]	; (800cbac <UART_SetConfig+0x30c>)
 800c984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c988:	f003 030c 	and.w	r3, r3, #12
 800c98c:	2b0c      	cmp	r3, #12
 800c98e:	d82d      	bhi.n	800c9ec <UART_SetConfig+0x14c>
 800c990:	a201      	add	r2, pc, #4	; (adr r2, 800c998 <UART_SetConfig+0xf8>)
 800c992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c996:	bf00      	nop
 800c998:	0800c9cd 	.word	0x0800c9cd
 800c99c:	0800c9ed 	.word	0x0800c9ed
 800c9a0:	0800c9ed 	.word	0x0800c9ed
 800c9a4:	0800c9ed 	.word	0x0800c9ed
 800c9a8:	0800c9dd 	.word	0x0800c9dd
 800c9ac:	0800c9ed 	.word	0x0800c9ed
 800c9b0:	0800c9ed 	.word	0x0800c9ed
 800c9b4:	0800c9ed 	.word	0x0800c9ed
 800c9b8:	0800c9d5 	.word	0x0800c9d5
 800c9bc:	0800c9ed 	.word	0x0800c9ed
 800c9c0:	0800c9ed 	.word	0x0800c9ed
 800c9c4:	0800c9ed 	.word	0x0800c9ed
 800c9c8:	0800c9e5 	.word	0x0800c9e5
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9d2:	e042      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9da:	e03e      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800c9dc:	2304      	movs	r3, #4
 800c9de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9e2:	e03a      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800c9e4:	2308      	movs	r3, #8
 800c9e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9ea:	e036      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800c9ec:	2310      	movs	r3, #16
 800c9ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9f2:	e032      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a6a      	ldr	r2, [pc, #424]	; (800cba4 <UART_SetConfig+0x304>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d12a      	bne.n	800ca54 <UART_SetConfig+0x1b4>
 800c9fe:	4b6b      	ldr	r3, [pc, #428]	; (800cbac <UART_SetConfig+0x30c>)
 800ca00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ca08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca0c:	d01a      	beq.n	800ca44 <UART_SetConfig+0x1a4>
 800ca0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca12:	d81b      	bhi.n	800ca4c <UART_SetConfig+0x1ac>
 800ca14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca18:	d00c      	beq.n	800ca34 <UART_SetConfig+0x194>
 800ca1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca1e:	d815      	bhi.n	800ca4c <UART_SetConfig+0x1ac>
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d003      	beq.n	800ca2c <UART_SetConfig+0x18c>
 800ca24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca28:	d008      	beq.n	800ca3c <UART_SetConfig+0x19c>
 800ca2a:	e00f      	b.n	800ca4c <UART_SetConfig+0x1ac>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca32:	e012      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800ca34:	2302      	movs	r3, #2
 800ca36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca3a:	e00e      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800ca3c:	2304      	movs	r3, #4
 800ca3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca42:	e00a      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800ca44:	2308      	movs	r3, #8
 800ca46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca4a:	e006      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800ca4c:	2310      	movs	r3, #16
 800ca4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca52:	e002      	b.n	800ca5a <UART_SetConfig+0x1ba>
 800ca54:	2310      	movs	r3, #16
 800ca56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a51      	ldr	r2, [pc, #324]	; (800cba4 <UART_SetConfig+0x304>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d17a      	bne.n	800cb5a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca68:	2b08      	cmp	r3, #8
 800ca6a:	d824      	bhi.n	800cab6 <UART_SetConfig+0x216>
 800ca6c:	a201      	add	r2, pc, #4	; (adr r2, 800ca74 <UART_SetConfig+0x1d4>)
 800ca6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca72:	bf00      	nop
 800ca74:	0800ca99 	.word	0x0800ca99
 800ca78:	0800cab7 	.word	0x0800cab7
 800ca7c:	0800caa1 	.word	0x0800caa1
 800ca80:	0800cab7 	.word	0x0800cab7
 800ca84:	0800caa7 	.word	0x0800caa7
 800ca88:	0800cab7 	.word	0x0800cab7
 800ca8c:	0800cab7 	.word	0x0800cab7
 800ca90:	0800cab7 	.word	0x0800cab7
 800ca94:	0800caaf 	.word	0x0800caaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca98:	f7fd fce4 	bl	800a464 <HAL_RCC_GetPCLK1Freq>
 800ca9c:	61f8      	str	r0, [r7, #28]
        break;
 800ca9e:	e010      	b.n	800cac2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800caa0:	4b44      	ldr	r3, [pc, #272]	; (800cbb4 <UART_SetConfig+0x314>)
 800caa2:	61fb      	str	r3, [r7, #28]
        break;
 800caa4:	e00d      	b.n	800cac2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800caa6:	f7fd fc45 	bl	800a334 <HAL_RCC_GetSysClockFreq>
 800caaa:	61f8      	str	r0, [r7, #28]
        break;
 800caac:	e009      	b.n	800cac2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800caae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cab2:	61fb      	str	r3, [r7, #28]
        break;
 800cab4:	e005      	b.n	800cac2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800cab6:	2300      	movs	r3, #0
 800cab8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cac0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 8107 	beq.w	800ccd8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	685a      	ldr	r2, [r3, #4]
 800cace:	4613      	mov	r3, r2
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	4413      	add	r3, r2
 800cad4:	69fa      	ldr	r2, [r7, #28]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d305      	bcc.n	800cae6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cae0:	69fa      	ldr	r2, [r7, #28]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d903      	bls.n	800caee <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800caec:	e0f4      	b.n	800ccd8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800caee:	69fb      	ldr	r3, [r7, #28]
 800caf0:	2200      	movs	r2, #0
 800caf2:	461c      	mov	r4, r3
 800caf4:	4615      	mov	r5, r2
 800caf6:	f04f 0200 	mov.w	r2, #0
 800cafa:	f04f 0300 	mov.w	r3, #0
 800cafe:	022b      	lsls	r3, r5, #8
 800cb00:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cb04:	0222      	lsls	r2, r4, #8
 800cb06:	68f9      	ldr	r1, [r7, #12]
 800cb08:	6849      	ldr	r1, [r1, #4]
 800cb0a:	0849      	lsrs	r1, r1, #1
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	4688      	mov	r8, r1
 800cb10:	4681      	mov	r9, r0
 800cb12:	eb12 0a08 	adds.w	sl, r2, r8
 800cb16:	eb43 0b09 	adc.w	fp, r3, r9
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	603b      	str	r3, [r7, #0]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb28:	4650      	mov	r0, sl
 800cb2a:	4659      	mov	r1, fp
 800cb2c:	f7f4 f8ac 	bl	8000c88 <__aeabi_uldivmod>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	4613      	mov	r3, r2
 800cb36:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb3e:	d308      	bcc.n	800cb52 <UART_SetConfig+0x2b2>
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb46:	d204      	bcs.n	800cb52 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	69ba      	ldr	r2, [r7, #24]
 800cb4e:	60da      	str	r2, [r3, #12]
 800cb50:	e0c2      	b.n	800ccd8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cb58:	e0be      	b.n	800ccd8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	69db      	ldr	r3, [r3, #28]
 800cb5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb62:	d16a      	bne.n	800cc3a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800cb64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb68:	2b08      	cmp	r3, #8
 800cb6a:	d834      	bhi.n	800cbd6 <UART_SetConfig+0x336>
 800cb6c:	a201      	add	r2, pc, #4	; (adr r2, 800cb74 <UART_SetConfig+0x2d4>)
 800cb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb72:	bf00      	nop
 800cb74:	0800cb99 	.word	0x0800cb99
 800cb78:	0800cbb9 	.word	0x0800cbb9
 800cb7c:	0800cbc1 	.word	0x0800cbc1
 800cb80:	0800cbd7 	.word	0x0800cbd7
 800cb84:	0800cbc7 	.word	0x0800cbc7
 800cb88:	0800cbd7 	.word	0x0800cbd7
 800cb8c:	0800cbd7 	.word	0x0800cbd7
 800cb90:	0800cbd7 	.word	0x0800cbd7
 800cb94:	0800cbcf 	.word	0x0800cbcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb98:	f7fd fc64 	bl	800a464 <HAL_RCC_GetPCLK1Freq>
 800cb9c:	61f8      	str	r0, [r7, #28]
        break;
 800cb9e:	e020      	b.n	800cbe2 <UART_SetConfig+0x342>
 800cba0:	efff69f3 	.word	0xefff69f3
 800cba4:	40008000 	.word	0x40008000
 800cba8:	40013800 	.word	0x40013800
 800cbac:	40021000 	.word	0x40021000
 800cbb0:	40004400 	.word	0x40004400
 800cbb4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbb8:	f7fd fc6a 	bl	800a490 <HAL_RCC_GetPCLK2Freq>
 800cbbc:	61f8      	str	r0, [r7, #28]
        break;
 800cbbe:	e010      	b.n	800cbe2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbc0:	4b4c      	ldr	r3, [pc, #304]	; (800ccf4 <UART_SetConfig+0x454>)
 800cbc2:	61fb      	str	r3, [r7, #28]
        break;
 800cbc4:	e00d      	b.n	800cbe2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbc6:	f7fd fbb5 	bl	800a334 <HAL_RCC_GetSysClockFreq>
 800cbca:	61f8      	str	r0, [r7, #28]
        break;
 800cbcc:	e009      	b.n	800cbe2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbd2:	61fb      	str	r3, [r7, #28]
        break;
 800cbd4:	e005      	b.n	800cbe2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cbe0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d077      	beq.n	800ccd8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	005a      	lsls	r2, r3, #1
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	085b      	lsrs	r3, r3, #1
 800cbf2:	441a      	add	r2, r3
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbfc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	2b0f      	cmp	r3, #15
 800cc02:	d916      	bls.n	800cc32 <UART_SetConfig+0x392>
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc0a:	d212      	bcs.n	800cc32 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	f023 030f 	bic.w	r3, r3, #15
 800cc14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	085b      	lsrs	r3, r3, #1
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	f003 0307 	and.w	r3, r3, #7
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	8afb      	ldrh	r3, [r7, #22]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	8afa      	ldrh	r2, [r7, #22]
 800cc2e:	60da      	str	r2, [r3, #12]
 800cc30:	e052      	b.n	800ccd8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800cc32:	2301      	movs	r3, #1
 800cc34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cc38:	e04e      	b.n	800ccd8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc3e:	2b08      	cmp	r3, #8
 800cc40:	d827      	bhi.n	800cc92 <UART_SetConfig+0x3f2>
 800cc42:	a201      	add	r2, pc, #4	; (adr r2, 800cc48 <UART_SetConfig+0x3a8>)
 800cc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc48:	0800cc6d 	.word	0x0800cc6d
 800cc4c:	0800cc75 	.word	0x0800cc75
 800cc50:	0800cc7d 	.word	0x0800cc7d
 800cc54:	0800cc93 	.word	0x0800cc93
 800cc58:	0800cc83 	.word	0x0800cc83
 800cc5c:	0800cc93 	.word	0x0800cc93
 800cc60:	0800cc93 	.word	0x0800cc93
 800cc64:	0800cc93 	.word	0x0800cc93
 800cc68:	0800cc8b 	.word	0x0800cc8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc6c:	f7fd fbfa 	bl	800a464 <HAL_RCC_GetPCLK1Freq>
 800cc70:	61f8      	str	r0, [r7, #28]
        break;
 800cc72:	e014      	b.n	800cc9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc74:	f7fd fc0c 	bl	800a490 <HAL_RCC_GetPCLK2Freq>
 800cc78:	61f8      	str	r0, [r7, #28]
        break;
 800cc7a:	e010      	b.n	800cc9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc7c:	4b1d      	ldr	r3, [pc, #116]	; (800ccf4 <UART_SetConfig+0x454>)
 800cc7e:	61fb      	str	r3, [r7, #28]
        break;
 800cc80:	e00d      	b.n	800cc9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc82:	f7fd fb57 	bl	800a334 <HAL_RCC_GetSysClockFreq>
 800cc86:	61f8      	str	r0, [r7, #28]
        break;
 800cc88:	e009      	b.n	800cc9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc8e:	61fb      	str	r3, [r7, #28]
        break;
 800cc90:	e005      	b.n	800cc9e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800cc92:	2300      	movs	r3, #0
 800cc94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cc9c:	bf00      	nop
    }

    if (pclk != 0U)
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d019      	beq.n	800ccd8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	085a      	lsrs	r2, r3, #1
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	441a      	add	r2, r3
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccb6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	2b0f      	cmp	r3, #15
 800ccbc:	d909      	bls.n	800ccd2 <UART_SetConfig+0x432>
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccc4:	d205      	bcs.n	800ccd2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	60da      	str	r2, [r3, #12]
 800ccd0:	e002      	b.n	800ccd8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2200      	movs	r2, #0
 800cce2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800cce4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3728      	adds	r7, #40	; 0x28
 800ccec:	46bd      	mov	sp, r7
 800ccee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccf2:	bf00      	nop
 800ccf4:	00f42400 	.word	0x00f42400

0800ccf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd04:	f003 0308 	and.w	r3, r3, #8
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00a      	beq.n	800cd22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	430a      	orrs	r2, r1
 800cd20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd26:	f003 0301 	and.w	r3, r3, #1
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00a      	beq.n	800cd44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	430a      	orrs	r2, r1
 800cd42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd48:	f003 0302 	and.w	r3, r3, #2
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00a      	beq.n	800cd66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	430a      	orrs	r2, r1
 800cd64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6a:	f003 0304 	and.w	r3, r3, #4
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00a      	beq.n	800cd88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	430a      	orrs	r2, r1
 800cd86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8c:	f003 0310 	and.w	r3, r3, #16
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00a      	beq.n	800cdaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	430a      	orrs	r2, r1
 800cda8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdae:	f003 0320 	and.w	r3, r3, #32
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00a      	beq.n	800cdcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	430a      	orrs	r2, r1
 800cdca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d01a      	beq.n	800ce0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	430a      	orrs	r2, r1
 800cdec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdf6:	d10a      	bne.n	800ce0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	430a      	orrs	r2, r1
 800ce0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00a      	beq.n	800ce30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	430a      	orrs	r2, r1
 800ce2e:	605a      	str	r2, [r3, #4]
  }
}
 800ce30:	bf00      	nop
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b098      	sub	sp, #96	; 0x60
 800ce40:	af02      	add	r7, sp, #8
 800ce42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce4c:	f7f8 faa2 	bl	8005394 <HAL_GetTick>
 800ce50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 0308 	and.w	r3, r3, #8
 800ce5c:	2b08      	cmp	r3, #8
 800ce5e:	d12e      	bne.n	800cebe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f88c 	bl	800cf8c <UART_WaitOnFlagUntilTimeout>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d021      	beq.n	800cebe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce82:	e853 3f00 	ldrex	r3, [r3]
 800ce86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce8e:	653b      	str	r3, [r7, #80]	; 0x50
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	461a      	mov	r2, r3
 800ce96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce98:	647b      	str	r3, [r7, #68]	; 0x44
 800ce9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cea0:	e841 2300 	strex	r3, r2, [r1]
 800cea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d1e6      	bne.n	800ce7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2220      	movs	r2, #32
 800ceb0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ceba:	2303      	movs	r3, #3
 800cebc:	e062      	b.n	800cf84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f003 0304 	and.w	r3, r3, #4
 800cec8:	2b04      	cmp	r3, #4
 800ceca:	d149      	bne.n	800cf60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ced4:	2200      	movs	r2, #0
 800ced6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 f856 	bl	800cf8c <UART_WaitOnFlagUntilTimeout>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d03c      	beq.n	800cf60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	e853 3f00 	ldrex	r3, [r3]
 800cef2:	623b      	str	r3, [r7, #32]
   return(result);
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cefa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	461a      	mov	r2, r3
 800cf02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf04:	633b      	str	r3, [r7, #48]	; 0x30
 800cf06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf0c:	e841 2300 	strex	r3, r2, [r1]
 800cf10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d1e6      	bne.n	800cee6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	3308      	adds	r3, #8
 800cf1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	e853 3f00 	ldrex	r3, [r3]
 800cf26:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f023 0301 	bic.w	r3, r3, #1
 800cf2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3308      	adds	r3, #8
 800cf36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf38:	61fa      	str	r2, [r7, #28]
 800cf3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf3c:	69b9      	ldr	r1, [r7, #24]
 800cf3e:	69fa      	ldr	r2, [r7, #28]
 800cf40:	e841 2300 	strex	r3, r2, [r1]
 800cf44:	617b      	str	r3, [r7, #20]
   return(result);
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1e5      	bne.n	800cf18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2220      	movs	r2, #32
 800cf50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e011      	b.n	800cf84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2220      	movs	r2, #32
 800cf64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2220      	movs	r2, #32
 800cf6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3758      	adds	r7, #88	; 0x58
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	603b      	str	r3, [r7, #0]
 800cf98:	4613      	mov	r3, r2
 800cf9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf9c:	e049      	b.n	800d032 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa4:	d045      	beq.n	800d032 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfa6:	f7f8 f9f5 	bl	8005394 <HAL_GetTick>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	69ba      	ldr	r2, [r7, #24]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d302      	bcc.n	800cfbc <UART_WaitOnFlagUntilTimeout+0x30>
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d101      	bne.n	800cfc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	e048      	b.n	800d052 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f003 0304 	and.w	r3, r3, #4
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d031      	beq.n	800d032 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	69db      	ldr	r3, [r3, #28]
 800cfd4:	f003 0308 	and.w	r3, r3, #8
 800cfd8:	2b08      	cmp	r3, #8
 800cfda:	d110      	bne.n	800cffe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2208      	movs	r2, #8
 800cfe2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f000 f8ff 	bl	800d1e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2208      	movs	r2, #8
 800cfee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	e029      	b.n	800d052 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	69db      	ldr	r3, [r3, #28]
 800d004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d00c:	d111      	bne.n	800d032 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f000 f8e5 	bl	800d1e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2220      	movs	r2, #32
 800d022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d02e:	2303      	movs	r3, #3
 800d030:	e00f      	b.n	800d052 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	69da      	ldr	r2, [r3, #28]
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	4013      	ands	r3, r2
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	429a      	cmp	r2, r3
 800d040:	bf0c      	ite	eq
 800d042:	2301      	moveq	r3, #1
 800d044:	2300      	movne	r3, #0
 800d046:	b2db      	uxtb	r3, r3
 800d048:	461a      	mov	r2, r3
 800d04a:	79fb      	ldrb	r3, [r7, #7]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d0a6      	beq.n	800cf9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b096      	sub	sp, #88	; 0x58
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	4613      	mov	r3, r2
 800d068:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	88fa      	ldrh	r2, [r7, #6]
 800d074:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2222      	movs	r2, #34	; 0x22
 800d084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d028      	beq.n	800d0e2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d094:	4a3e      	ldr	r2, [pc, #248]	; (800d190 <UART_Start_Receive_DMA+0x134>)
 800d096:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d09c:	4a3d      	ldr	r2, [pc, #244]	; (800d194 <UART_Start_Receive_DMA+0x138>)
 800d09e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0a4:	4a3c      	ldr	r2, [pc, #240]	; (800d198 <UART_Start_Receive_DMA+0x13c>)
 800d0a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	3324      	adds	r3, #36	; 0x24
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	88fb      	ldrh	r3, [r7, #6]
 800d0c4:	f7f9 fe00 	bl	8006cc8 <HAL_DMA_Start_IT>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d009      	beq.n	800d0e2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2210      	movs	r2, #16
 800d0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2220      	movs	r2, #32
 800d0da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e051      	b.n	800d186 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d018      	beq.n	800d11c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0f2:	e853 3f00 	ldrex	r3, [r3]
 800d0f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0fe:	657b      	str	r3, [r7, #84]	; 0x54
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	461a      	mov	r2, r3
 800d106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d108:	64bb      	str	r3, [r7, #72]	; 0x48
 800d10a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d10c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d10e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d110:	e841 2300 	strex	r3, r2, [r1]
 800d114:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d1e6      	bne.n	800d0ea <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	3308      	adds	r3, #8
 800d122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d126:	e853 3f00 	ldrex	r3, [r3]
 800d12a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	f043 0301 	orr.w	r3, r3, #1
 800d132:	653b      	str	r3, [r7, #80]	; 0x50
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	3308      	adds	r3, #8
 800d13a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d13c:	637a      	str	r2, [r7, #52]	; 0x34
 800d13e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d144:	e841 2300 	strex	r3, r2, [r1]
 800d148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1e5      	bne.n	800d11c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	3308      	adds	r3, #8
 800d156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	e853 3f00 	ldrex	r3, [r3]
 800d15e:	613b      	str	r3, [r7, #16]
   return(result);
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d166:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	3308      	adds	r3, #8
 800d16e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d170:	623a      	str	r2, [r7, #32]
 800d172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d174:	69f9      	ldr	r1, [r7, #28]
 800d176:	6a3a      	ldr	r2, [r7, #32]
 800d178:	e841 2300 	strex	r3, r2, [r1]
 800d17c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1e5      	bne.n	800d150 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d184:	2300      	movs	r3, #0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3758      	adds	r7, #88	; 0x58
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	0800d2b1 	.word	0x0800d2b1
 800d194:	0800d3dd 	.word	0x0800d3dd
 800d198:	0800d41b 	.word	0x0800d41b

0800d19c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b089      	sub	sp, #36	; 0x24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	e853 3f00 	ldrex	r3, [r3]
 800d1b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d1b8:	61fb      	str	r3, [r7, #28]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	61bb      	str	r3, [r7, #24]
 800d1c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c6:	6979      	ldr	r1, [r7, #20]
 800d1c8:	69ba      	ldr	r2, [r7, #24]
 800d1ca:	e841 2300 	strex	r3, r2, [r1]
 800d1ce:	613b      	str	r3, [r7, #16]
   return(result);
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1e6      	bne.n	800d1a4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2220      	movs	r2, #32
 800d1da:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800d1dc:	bf00      	nop
 800d1de:	3724      	adds	r7, #36	; 0x24
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b095      	sub	sp, #84	; 0x54
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f8:	e853 3f00 	ldrex	r3, [r3]
 800d1fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d204:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	461a      	mov	r2, r3
 800d20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d20e:	643b      	str	r3, [r7, #64]	; 0x40
 800d210:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d216:	e841 2300 	strex	r3, r2, [r1]
 800d21a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1e6      	bne.n	800d1f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	3308      	adds	r3, #8
 800d228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22a:	6a3b      	ldr	r3, [r7, #32]
 800d22c:	e853 3f00 	ldrex	r3, [r3]
 800d230:	61fb      	str	r3, [r7, #28]
   return(result);
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	f023 0301 	bic.w	r3, r3, #1
 800d238:	64bb      	str	r3, [r7, #72]	; 0x48
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	3308      	adds	r3, #8
 800d240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d242:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d24a:	e841 2300 	strex	r3, r2, [r1]
 800d24e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1e5      	bne.n	800d222 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d118      	bne.n	800d290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	e853 3f00 	ldrex	r3, [r3]
 800d26a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	f023 0310 	bic.w	r3, r3, #16
 800d272:	647b      	str	r3, [r7, #68]	; 0x44
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	461a      	mov	r2, r3
 800d27a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d27c:	61bb      	str	r3, [r7, #24]
 800d27e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d280:	6979      	ldr	r1, [r7, #20]
 800d282:	69ba      	ldr	r2, [r7, #24]
 800d284:	e841 2300 	strex	r3, r2, [r1]
 800d288:	613b      	str	r3, [r7, #16]
   return(result);
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1e6      	bne.n	800d25e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2220      	movs	r2, #32
 800d294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800d2a4:	bf00      	nop
 800d2a6:	3754      	adds	r7, #84	; 0x54
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b09c      	sub	sp, #112	; 0x70
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2bc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f003 0320 	and.w	r3, r3, #32
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d171      	bne.n	800d3b0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d2cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2dc:	e853 3f00 	ldrex	r3, [r3]
 800d2e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2fa:	e841 2300 	strex	r3, r2, [r1]
 800d2fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1e6      	bne.n	800d2d4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	3308      	adds	r3, #8
 800d30c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	e853 3f00 	ldrex	r3, [r3]
 800d314:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d318:	f023 0301 	bic.w	r3, r3, #1
 800d31c:	667b      	str	r3, [r7, #100]	; 0x64
 800d31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3308      	adds	r3, #8
 800d324:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d326:	647a      	str	r2, [r7, #68]	; 0x44
 800d328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d32a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d32c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d32e:	e841 2300 	strex	r3, r2, [r1]
 800d332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1e5      	bne.n	800d306 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d33a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	3308      	adds	r3, #8
 800d340:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d344:	e853 3f00 	ldrex	r3, [r3]
 800d348:	623b      	str	r3, [r7, #32]
   return(result);
 800d34a:	6a3b      	ldr	r3, [r7, #32]
 800d34c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d350:	663b      	str	r3, [r7, #96]	; 0x60
 800d352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3308      	adds	r3, #8
 800d358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d35a:	633a      	str	r2, [r7, #48]	; 0x30
 800d35c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d362:	e841 2300 	strex	r3, r2, [r1]
 800d366:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d1e5      	bne.n	800d33a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d370:	2220      	movs	r2, #32
 800d372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d118      	bne.n	800d3b0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	e853 3f00 	ldrex	r3, [r3]
 800d38a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f023 0310 	bic.w	r3, r3, #16
 800d392:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	461a      	mov	r2, r3
 800d39a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d39c:	61fb      	str	r3, [r7, #28]
 800d39e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a0:	69b9      	ldr	r1, [r7, #24]
 800d3a2:	69fa      	ldr	r2, [r7, #28]
 800d3a4:	e841 2300 	strex	r3, r2, [r1]
 800d3a8:	617b      	str	r3, [r7, #20]
   return(result);
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1e6      	bne.n	800d37e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d107      	bne.n	800d3ce <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d3c8:	f7ff fa5e 	bl	800c888 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d3cc:	e002      	b.n	800d3d4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d3ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d3d0:	f7f7 fedc 	bl	800518c <HAL_UART_RxCpltCallback>
}
 800d3d4:	bf00      	nop
 800d3d6:	3770      	adds	r7, #112	; 0x70
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d109      	bne.n	800d40c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d3fe:	085b      	lsrs	r3, r3, #1
 800d400:	b29b      	uxth	r3, r3
 800d402:	4619      	mov	r1, r3
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f7ff fa3f 	bl	800c888 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d40a:	e002      	b.n	800d412 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f7ff fa27 	bl	800c860 <HAL_UART_RxHalfCpltCallback>
}
 800d412:	bf00      	nop
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b086      	sub	sp, #24
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d426:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d42c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d434:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d440:	2b80      	cmp	r3, #128	; 0x80
 800d442:	d109      	bne.n	800d458 <UART_DMAError+0x3e>
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	2b21      	cmp	r3, #33	; 0x21
 800d448:	d106      	bne.n	800d458 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800d452:	6978      	ldr	r0, [r7, #20]
 800d454:	f7ff fea2 	bl	800d19c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d462:	2b40      	cmp	r3, #64	; 0x40
 800d464:	d109      	bne.n	800d47a <UART_DMAError+0x60>
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2b22      	cmp	r3, #34	; 0x22
 800d46a:	d106      	bne.n	800d47a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	2200      	movs	r2, #0
 800d470:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800d474:	6978      	ldr	r0, [r7, #20]
 800d476:	f7ff feb7 	bl	800d1e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d480:	f043 0210 	orr.w	r2, r3, #16
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d48a:	6978      	ldr	r0, [r7, #20]
 800d48c:	f7ff f9f2 	bl	800c874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d490:	bf00      	nop
 800d492:	3718      	adds	r7, #24
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	f7ff f9dc 	bl	800c874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4bc:	bf00      	nop
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b088      	sub	sp, #32
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	e853 3f00 	ldrex	r3, [r3]
 800d4d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4e0:	61fb      	str	r3, [r7, #28]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	61bb      	str	r3, [r7, #24]
 800d4ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ee:	6979      	ldr	r1, [r7, #20]
 800d4f0:	69ba      	ldr	r2, [r7, #24]
 800d4f2:	e841 2300 	strex	r3, r2, [r1]
 800d4f6:	613b      	str	r3, [r7, #16]
   return(result);
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1e6      	bne.n	800d4cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2220      	movs	r2, #32
 800d502:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7ff f99e 	bl	800c84c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d510:	bf00      	nop
 800d512:	3720      	adds	r7, #32
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d520:	bf00      	nop
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d52c:	b084      	sub	sp, #16
 800d52e:	b480      	push	{r7}
 800d530:	b083      	sub	sp, #12
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
 800d536:	f107 0014 	add.w	r0, r7, #20
 800d53a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	b004      	add	sp, #16
 800d54c:	4770      	bx	lr

0800d54e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d54e:	b480      	push	{r7}
 800d550:	b085      	sub	sp, #20
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d55e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d562:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	b29a      	uxth	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	3714      	adds	r7, #20
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d584:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d588:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d590:	b29a      	uxth	r2, r3
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	b29b      	uxth	r3, r3
 800d596:	43db      	mvns	r3, r3
 800d598:	b29b      	uxth	r3, r3
 800d59a:	4013      	ands	r3, r2
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3714      	adds	r7, #20
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800d5b2:	b480      	push	{r7}
 800d5b4:	b083      	sub	sp, #12
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d5cc:	b084      	sub	sp, #16
 800d5ce:	b480      	push	{r7}
 800d5d0:	b083      	sub	sp, #12
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	f107 0014 	add.w	r0, r7, #20
 800d5da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	b004      	add	sp, #16
 800d60c:	4770      	bx	lr
	...

0800d610 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d610:	b480      	push	{r7}
 800d612:	b09d      	sub	sp, #116	; 0x74
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	4413      	add	r3, r2
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800d632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d636:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	78db      	ldrb	r3, [r3, #3]
 800d63e:	2b03      	cmp	r3, #3
 800d640:	d81f      	bhi.n	800d682 <USB_ActivateEndpoint+0x72>
 800d642:	a201      	add	r2, pc, #4	; (adr r2, 800d648 <USB_ActivateEndpoint+0x38>)
 800d644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d648:	0800d659 	.word	0x0800d659
 800d64c:	0800d675 	.word	0x0800d675
 800d650:	0800d68b 	.word	0x0800d68b
 800d654:	0800d667 	.word	0x0800d667
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d658:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d65c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d660:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d664:	e012      	b.n	800d68c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d666:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d66a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800d66e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d672:	e00b      	b.n	800d68c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d674:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d678:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d67c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d680:	e004      	b.n	800d68c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d682:	2301      	movs	r3, #1
 800d684:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800d688:	e000      	b.n	800d68c <USB_ActivateEndpoint+0x7c>
      break;
 800d68a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	441a      	add	r2, r3
 800d696:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d69a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d69e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	4413      	add	r3, r2
 800d6b8:	881b      	ldrh	r3, [r3, #0]
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	b21b      	sxth	r3, r3
 800d6be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6c6:	b21a      	sxth	r2, r3
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	b21b      	sxth	r3, r3
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	b21b      	sxth	r3, r3
 800d6d2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	441a      	add	r2, r3
 800d6e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d6e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	7b1b      	ldrb	r3, [r3, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	f040 8178 	bne.w	800d9f2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	785b      	ldrb	r3, [r3, #1]
 800d706:	2b00      	cmp	r3, #0
 800d708:	f000 8084 	beq.w	800d814 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	61bb      	str	r3, [r7, #24]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d716:	b29b      	uxth	r3, r3
 800d718:	461a      	mov	r2, r3
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	4413      	add	r3, r2
 800d71e:	61bb      	str	r3, [r7, #24]
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	00da      	lsls	r2, r3, #3
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	4413      	add	r3, r2
 800d72a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	88db      	ldrh	r3, [r3, #6]
 800d734:	085b      	lsrs	r3, r3, #1
 800d736:	b29b      	uxth	r3, r3
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	4413      	add	r3, r2
 800d74a:	881b      	ldrh	r3, [r3, #0]
 800d74c:	827b      	strh	r3, [r7, #18]
 800d74e:	8a7b      	ldrh	r3, [r7, #18]
 800d750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d754:	2b00      	cmp	r3, #0
 800d756:	d01b      	beq.n	800d790 <USB_ActivateEndpoint+0x180>
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	4413      	add	r3, r2
 800d762:	881b      	ldrh	r3, [r3, #0]
 800d764:	b29b      	uxth	r3, r3
 800d766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d76e:	823b      	strh	r3, [r7, #16]
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	441a      	add	r2, r3
 800d77a:	8a3b      	ldrh	r3, [r7, #16]
 800d77c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d788:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	78db      	ldrb	r3, [r3, #3]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d020      	beq.n	800d7da <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	4413      	add	r3, r2
 800d7a2:	881b      	ldrh	r3, [r3, #0]
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7ae:	81bb      	strh	r3, [r7, #12]
 800d7b0:	89bb      	ldrh	r3, [r7, #12]
 800d7b2:	f083 0320 	eor.w	r3, r3, #32
 800d7b6:	81bb      	strh	r3, [r7, #12]
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	441a      	add	r2, r3
 800d7c2:	89bb      	ldrh	r3, [r7, #12]
 800d7c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	8013      	strh	r3, [r2, #0]
 800d7d8:	e2d5      	b.n	800dd86 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	4413      	add	r3, r2
 800d7e4:	881b      	ldrh	r3, [r3, #0]
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7f0:	81fb      	strh	r3, [r7, #14]
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	441a      	add	r2, r3
 800d7fc:	89fb      	ldrh	r3, [r7, #14]
 800d7fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d80e:	b29b      	uxth	r3, r3
 800d810:	8013      	strh	r3, [r2, #0]
 800d812:	e2b8      	b.n	800dd86 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	633b      	str	r3, [r7, #48]	; 0x30
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d81e:	b29b      	uxth	r3, r3
 800d820:	461a      	mov	r2, r3
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	4413      	add	r3, r2
 800d826:	633b      	str	r3, [r7, #48]	; 0x30
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	00da      	lsls	r2, r3, #3
 800d82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d830:	4413      	add	r3, r2
 800d832:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d836:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	88db      	ldrh	r3, [r3, #6]
 800d83c:	085b      	lsrs	r3, r3, #1
 800d83e:	b29b      	uxth	r3, r3
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	b29a      	uxth	r2, r3
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d852:	b29b      	uxth	r3, r3
 800d854:	461a      	mov	r2, r3
 800d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d858:	4413      	add	r3, r2
 800d85a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	00da      	lsls	r2, r3, #3
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	4413      	add	r3, r2
 800d866:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d86a:	627b      	str	r3, [r7, #36]	; 0x24
 800d86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	b29b      	uxth	r3, r3
 800d872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d876:	b29a      	uxth	r2, r3
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87a:	801a      	strh	r2, [r3, #0]
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	2b3e      	cmp	r3, #62	; 0x3e
 800d882:	d91d      	bls.n	800d8c0 <USB_ActivateEndpoint+0x2b0>
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	095b      	lsrs	r3, r3, #5
 800d88a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	691b      	ldr	r3, [r3, #16]
 800d890:	f003 031f 	and.w	r3, r3, #31
 800d894:	2b00      	cmp	r3, #0
 800d896:	d102      	bne.n	800d89e <USB_ActivateEndpoint+0x28e>
 800d898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d89a:	3b01      	subs	r3, #1
 800d89c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a0:	881b      	ldrh	r3, [r3, #0]
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	029b      	lsls	r3, r3, #10
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8bc:	801a      	strh	r2, [r3, #0]
 800d8be:	e026      	b.n	800d90e <USB_ActivateEndpoint+0x2fe>
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <USB_ActivateEndpoint+0x2ce>
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8da:	801a      	strh	r2, [r3, #0]
 800d8dc:	e017      	b.n	800d90e <USB_ActivateEndpoint+0x2fe>
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	691b      	ldr	r3, [r3, #16]
 800d8e2:	085b      	lsrs	r3, r3, #1
 800d8e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <USB_ActivateEndpoint+0x2e8>
 800d8f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	881b      	ldrh	r3, [r3, #0]
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d900:	b29b      	uxth	r3, r3
 800d902:	029b      	lsls	r3, r3, #10
 800d904:	b29b      	uxth	r3, r3
 800d906:	4313      	orrs	r3, r2
 800d908:	b29a      	uxth	r2, r3
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4413      	add	r3, r2
 800d918:	881b      	ldrh	r3, [r3, #0]
 800d91a:	847b      	strh	r3, [r7, #34]	; 0x22
 800d91c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d91e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d922:	2b00      	cmp	r3, #0
 800d924:	d01b      	beq.n	800d95e <USB_ActivateEndpoint+0x34e>
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	4413      	add	r3, r2
 800d930:	881b      	ldrh	r3, [r3, #0]
 800d932:	b29b      	uxth	r3, r3
 800d934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d93c:	843b      	strh	r3, [r7, #32]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	441a      	add	r2, r3
 800d948:	8c3b      	ldrh	r3, [r7, #32]
 800d94a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d94e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d124      	bne.n	800d9b0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	4413      	add	r3, r2
 800d970:	881b      	ldrh	r3, [r3, #0]
 800d972:	b29b      	uxth	r3, r3
 800d974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d97c:	83bb      	strh	r3, [r7, #28]
 800d97e:	8bbb      	ldrh	r3, [r7, #28]
 800d980:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d984:	83bb      	strh	r3, [r7, #28]
 800d986:	8bbb      	ldrh	r3, [r7, #28]
 800d988:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d98c:	83bb      	strh	r3, [r7, #28]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	441a      	add	r2, r3
 800d998:	8bbb      	ldrh	r3, [r7, #28]
 800d99a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d99e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	8013      	strh	r3, [r2, #0]
 800d9ae:	e1ea      	b.n	800dd86 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	4413      	add	r3, r2
 800d9ba:	881b      	ldrh	r3, [r3, #0]
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d9c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9c6:	83fb      	strh	r3, [r7, #30]
 800d9c8:	8bfb      	ldrh	r3, [r7, #30]
 800d9ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d9ce:	83fb      	strh	r3, [r7, #30]
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	441a      	add	r2, r3
 800d9da:	8bfb      	ldrh	r3, [r7, #30]
 800d9dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	8013      	strh	r3, [r2, #0]
 800d9f0:	e1c9      	b.n	800dd86 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	78db      	ldrb	r3, [r3, #3]
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d11e      	bne.n	800da38 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	4413      	add	r3, r2
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	b29b      	uxth	r3, r3
 800da08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da10:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	441a      	add	r2, r3
 800da1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800da22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800da2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da32:	b29b      	uxth	r3, r3
 800da34:	8013      	strh	r3, [r2, #0]
 800da36:	e01d      	b.n	800da74 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	4413      	add	r3, r2
 800da42:	881b      	ldrh	r3, [r3, #0]
 800da44:	b29b      	uxth	r3, r3
 800da46:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800da4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	441a      	add	r2, r3
 800da5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800da60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da70:	b29b      	uxth	r3, r3
 800da72:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da7e:	b29b      	uxth	r3, r3
 800da80:	461a      	mov	r2, r3
 800da82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da84:	4413      	add	r3, r2
 800da86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	00da      	lsls	r2, r3, #3
 800da8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da90:	4413      	add	r3, r2
 800da92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da96:	65bb      	str	r3, [r7, #88]	; 0x58
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	891b      	ldrh	r3, [r3, #8]
 800da9c:	085b      	lsrs	r3, r3, #1
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	005b      	lsls	r3, r3, #1
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800daa6:	801a      	strh	r2, [r3, #0]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	657b      	str	r3, [r7, #84]	; 0x54
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	461a      	mov	r2, r3
 800dab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dab8:	4413      	add	r3, r2
 800daba:	657b      	str	r3, [r7, #84]	; 0x54
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	00da      	lsls	r2, r3, #3
 800dac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dac4:	4413      	add	r3, r2
 800dac6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800daca:	653b      	str	r3, [r7, #80]	; 0x50
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	895b      	ldrh	r3, [r3, #10]
 800dad0:	085b      	lsrs	r3, r3, #1
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dada:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	785b      	ldrb	r3, [r3, #1]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	f040 8093 	bne.w	800dc0c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	4413      	add	r3, r2
 800daf0:	881b      	ldrh	r3, [r3, #0]
 800daf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800daf6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dafa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d01b      	beq.n	800db3a <USB_ActivateEndpoint+0x52a>
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	881b      	ldrh	r3, [r3, #0]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db18:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	441a      	add	r2, r3
 800db24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800db32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db36:	b29b      	uxth	r3, r3
 800db38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	4413      	add	r3, r2
 800db44:	881b      	ldrh	r3, [r3, #0]
 800db46:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800db48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800db4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d01b      	beq.n	800db8a <USB_ActivateEndpoint+0x57a>
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	4413      	add	r3, r2
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db68:	877b      	strh	r3, [r7, #58]	; 0x3a
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	441a      	add	r2, r3
 800db74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800db76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800db86:	b29b      	uxth	r3, r3
 800db88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	4413      	add	r3, r2
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	b29b      	uxth	r3, r3
 800db98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dba0:	873b      	strh	r3, [r7, #56]	; 0x38
 800dba2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dba4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dba8:	873b      	strh	r3, [r7, #56]	; 0x38
 800dbaa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dbac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dbb0:	873b      	strh	r3, [r7, #56]	; 0x38
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	441a      	add	r2, r3
 800dbbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dbbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4413      	add	r3, r2
 800dbdc:	881b      	ldrh	r3, [r3, #0]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbe8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	441a      	add	r2, r3
 800dbf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dbf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	8013      	strh	r3, [r2, #0]
 800dc0a:	e0bc      	b.n	800dd86 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	881b      	ldrh	r3, [r3, #0]
 800dc18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800dc1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dc20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d01d      	beq.n	800dc64 <USB_ActivateEndpoint+0x654>
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	441a      	add	r2, r3
 800dc4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800dc50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dc5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	4413      	add	r3, r2
 800dc6e:	881b      	ldrh	r3, [r3, #0]
 800dc70:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800dc74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800dc78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d01d      	beq.n	800dcbc <USB_ActivateEndpoint+0x6ac>
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	4413      	add	r3, r2
 800dc8a:	881b      	ldrh	r3, [r3, #0]
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	441a      	add	r2, r3
 800dca4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800dca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	78db      	ldrb	r3, [r3, #3]
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d024      	beq.n	800dd0e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	4413      	add	r3, r2
 800dcce:	881b      	ldrh	r3, [r3, #0]
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800dcde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dce2:	f083 0320 	eor.w	r3, r3, #32
 800dce6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	441a      	add	r2, r3
 800dcf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dcf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	8013      	strh	r3, [r2, #0]
 800dd0c:	e01d      	b.n	800dd4a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	441a      	add	r2, r3
 800dd32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4413      	add	r3, r2
 800dd54:	881b      	ldrh	r3, [r3, #0]
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	441a      	add	r2, r3
 800dd6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800dd86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3774      	adds	r7, #116	; 0x74
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop

0800dd98 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b08d      	sub	sp, #52	; 0x34
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	7b1b      	ldrb	r3, [r3, #12]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	f040 808e 	bne.w	800dec8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	785b      	ldrb	r3, [r3, #1]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d044      	beq.n	800de3e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	4413      	add	r3, r2
 800ddbe:	881b      	ldrh	r3, [r3, #0]
 800ddc0:	81bb      	strh	r3, [r7, #12]
 800ddc2:	89bb      	ldrh	r3, [r7, #12]
 800ddc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d01b      	beq.n	800de04 <USB_DeactivateEndpoint+0x6c>
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	4413      	add	r3, r2
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dde2:	817b      	strh	r3, [r7, #10]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	441a      	add	r2, r3
 800ddee:	897b      	ldrh	r3, [r7, #10]
 800ddf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800de00:	b29b      	uxth	r3, r3
 800de02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	881b      	ldrh	r3, [r3, #0]
 800de10:	b29b      	uxth	r3, r3
 800de12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de1a:	813b      	strh	r3, [r7, #8]
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	441a      	add	r2, r3
 800de26:	893b      	ldrh	r3, [r7, #8]
 800de28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de38:	b29b      	uxth	r3, r3
 800de3a:	8013      	strh	r3, [r2, #0]
 800de3c:	e192      	b.n	800e164 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4413      	add	r3, r2
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	827b      	strh	r3, [r7, #18]
 800de4c:	8a7b      	ldrh	r3, [r7, #18]
 800de4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de52:	2b00      	cmp	r3, #0
 800de54:	d01b      	beq.n	800de8e <USB_DeactivateEndpoint+0xf6>
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	4413      	add	r3, r2
 800de60:	881b      	ldrh	r3, [r3, #0]
 800de62:	b29b      	uxth	r3, r3
 800de64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de6c:	823b      	strh	r3, [r7, #16]
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	441a      	add	r2, r3
 800de78:	8a3b      	ldrh	r3, [r7, #16]
 800de7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800de86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	4413      	add	r3, r2
 800de98:	881b      	ldrh	r3, [r3, #0]
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dea4:	81fb      	strh	r3, [r7, #14]
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	441a      	add	r2, r3
 800deb0:	89fb      	ldrh	r3, [r7, #14]
 800deb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800deb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800deba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800debe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	8013      	strh	r3, [r2, #0]
 800dec6:	e14d      	b.n	800e164 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	785b      	ldrb	r3, [r3, #1]
 800decc:	2b00      	cmp	r3, #0
 800dece:	f040 80a5 	bne.w	800e01c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4413      	add	r3, r2
 800dedc:	881b      	ldrh	r3, [r3, #0]
 800dede:	843b      	strh	r3, [r7, #32]
 800dee0:	8c3b      	ldrh	r3, [r7, #32]
 800dee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d01b      	beq.n	800df22 <USB_DeactivateEndpoint+0x18a>
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	4413      	add	r3, r2
 800def4:	881b      	ldrh	r3, [r3, #0]
 800def6:	b29b      	uxth	r3, r3
 800def8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800defc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df00:	83fb      	strh	r3, [r7, #30]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	441a      	add	r2, r3
 800df0c:	8bfb      	ldrh	r3, [r7, #30]
 800df0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800df1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df1e:	b29b      	uxth	r3, r3
 800df20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4413      	add	r3, r2
 800df2c:	881b      	ldrh	r3, [r3, #0]
 800df2e:	83bb      	strh	r3, [r7, #28]
 800df30:	8bbb      	ldrh	r3, [r7, #28]
 800df32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df36:	2b00      	cmp	r3, #0
 800df38:	d01b      	beq.n	800df72 <USB_DeactivateEndpoint+0x1da>
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4413      	add	r3, r2
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	b29b      	uxth	r3, r3
 800df48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df50:	837b      	strh	r3, [r7, #26]
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	441a      	add	r2, r3
 800df5c:	8b7b      	ldrh	r3, [r7, #26]
 800df5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800df6e:	b29b      	uxth	r3, r3
 800df70:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	4413      	add	r3, r2
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	b29b      	uxth	r3, r3
 800df80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df88:	833b      	strh	r3, [r7, #24]
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	441a      	add	r2, r3
 800df94:	8b3b      	ldrh	r3, [r7, #24]
 800df96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	4413      	add	r3, r2
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dfbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfc0:	82fb      	strh	r3, [r7, #22]
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	441a      	add	r2, r3
 800dfcc:	8afb      	ldrh	r3, [r7, #22]
 800dfce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	4413      	add	r3, r2
 800dfec:	881b      	ldrh	r3, [r3, #0]
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dff8:	82bb      	strh	r3, [r7, #20]
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	441a      	add	r2, r3
 800e004:	8abb      	ldrh	r3, [r7, #20]
 800e006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e00a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e00e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e016:	b29b      	uxth	r3, r3
 800e018:	8013      	strh	r3, [r2, #0]
 800e01a:	e0a3      	b.n	800e164 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	881b      	ldrh	r3, [r3, #0]
 800e028:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e02a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e02c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e030:	2b00      	cmp	r3, #0
 800e032:	d01b      	beq.n	800e06c <USB_DeactivateEndpoint+0x2d4>
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4413      	add	r3, r2
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	b29b      	uxth	r3, r3
 800e042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e04a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	441a      	add	r2, r3
 800e056:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e05c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e068:	b29b      	uxth	r3, r3
 800e06a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4413      	add	r3, r2
 800e076:	881b      	ldrh	r3, [r3, #0]
 800e078:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e07a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e080:	2b00      	cmp	r3, #0
 800e082:	d01b      	beq.n	800e0bc <USB_DeactivateEndpoint+0x324>
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	881b      	ldrh	r3, [r3, #0]
 800e090:	b29b      	uxth	r3, r3
 800e092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e09a:	853b      	strh	r3, [r7, #40]	; 0x28
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	441a      	add	r2, r3
 800e0a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	881b      	ldrh	r3, [r3, #0]
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e0ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	441a      	add	r2, r3
 800e0de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e0e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e0ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	4413      	add	r3, r2
 800e0fe:	881b      	ldrh	r3, [r3, #0]
 800e100:	b29b      	uxth	r3, r3
 800e102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e10a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	441a      	add	r2, r3
 800e116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e11c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e128:	b29b      	uxth	r3, r3
 800e12a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	881b      	ldrh	r3, [r3, #0]
 800e138:	b29b      	uxth	r3, r3
 800e13a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e142:	847b      	strh	r3, [r7, #34]	; 0x22
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	441a      	add	r2, r3
 800e14e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e15c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e160:	b29b      	uxth	r3, r3
 800e162:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e164:	2300      	movs	r3, #0
}
 800e166:	4618      	mov	r0, r3
 800e168:	3734      	adds	r7, #52	; 0x34
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e172:	b580      	push	{r7, lr}
 800e174:	b0c2      	sub	sp, #264	; 0x108
 800e176:	af00      	add	r7, sp, #0
 800e178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e17c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e180:	6018      	str	r0, [r3, #0]
 800e182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e18a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e18c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	785b      	ldrb	r3, [r3, #1]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	f040 86b7 	bne.w	800ef0c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	699a      	ldr	r2, [r3, #24]
 800e1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	691b      	ldr	r3, [r3, #16]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d908      	bls.n	800e1cc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e1ca:	e007      	b.n	800e1dc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e1dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	7b1b      	ldrb	r3, [r3, #12]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d13a      	bne.n	800e262 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	6959      	ldr	r1, [r3, #20]
 800e1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	88da      	ldrh	r2, [r3, #6]
 800e204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e208:	b29b      	uxth	r3, r3
 800e20a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e20e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e212:	6800      	ldr	r0, [r0, #0]
 800e214:	f001 fcb9 	bl	800fb8a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e21c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	613b      	str	r3, [r7, #16]
 800e224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e232:	b29b      	uxth	r3, r3
 800e234:	461a      	mov	r2, r3
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	4413      	add	r3, r2
 800e23a:	613b      	str	r3, [r7, #16]
 800e23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	00da      	lsls	r2, r3, #3
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	4413      	add	r3, r2
 800e24e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e252:	60fb      	str	r3, [r7, #12]
 800e254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e258:	b29a      	uxth	r2, r3
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	801a      	strh	r2, [r3, #0]
 800e25e:	f000 be1f 	b.w	800eea0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	78db      	ldrb	r3, [r3, #3]
 800e26e:	2b02      	cmp	r3, #2
 800e270:	f040 8462 	bne.w	800eb38 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	6a1a      	ldr	r2, [r3, #32]
 800e280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	691b      	ldr	r3, [r3, #16]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	f240 83df 	bls.w	800ea50 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4413      	add	r3, r2
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e2b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e2bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	441a      	add	r2, r3
 800e2d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e2da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e2e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	6a1a      	ldr	r2, [r3, #32]
 800e2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2fe:	1ad2      	subs	r2, r2, r3
 800e300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e31a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4413      	add	r3, r2
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	b29b      	uxth	r3, r3
 800e32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f000 81c7 	beq.w	800e6c2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	633b      	str	r3, [r7, #48]	; 0x30
 800e340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	785b      	ldrb	r3, [r3, #1]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d177      	bne.n	800e440 <USB_EPStartXfer+0x2ce>
 800e350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	461a      	mov	r2, r3
 800e36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e370:	4413      	add	r3, r2
 800e372:	62bb      	str	r3, [r7, #40]	; 0x28
 800e374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	00da      	lsls	r2, r3, #3
 800e382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e384:	4413      	add	r3, r2
 800e386:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e38a:	627b      	str	r3, [r7, #36]	; 0x24
 800e38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38e:	881b      	ldrh	r3, [r3, #0]
 800e390:	b29b      	uxth	r3, r3
 800e392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e396:	b29a      	uxth	r2, r3
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	801a      	strh	r2, [r3, #0]
 800e39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3a0:	2b3e      	cmp	r3, #62	; 0x3e
 800e3a2:	d921      	bls.n	800e3e8 <USB_EPStartXfer+0x276>
 800e3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3a8:	095b      	lsrs	r3, r3, #5
 800e3aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3b2:	f003 031f 	and.w	r3, r3, #31
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d104      	bne.n	800e3c4 <USB_EPStartXfer+0x252>
 800e3ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	881b      	ldrh	r3, [r3, #0]
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	029b      	lsls	r3, r3, #10
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	801a      	strh	r2, [r3, #0]
 800e3e6:	e050      	b.n	800e48a <USB_EPStartXfer+0x318>
 800e3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10a      	bne.n	800e406 <USB_EPStartXfer+0x294>
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f2:	881b      	ldrh	r3, [r3, #0]
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e402:	801a      	strh	r2, [r3, #0]
 800e404:	e041      	b.n	800e48a <USB_EPStartXfer+0x318>
 800e406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e40a:	085b      	lsrs	r3, r3, #1
 800e40c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e414:	f003 0301 	and.w	r3, r3, #1
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d004      	beq.n	800e426 <USB_EPStartXfer+0x2b4>
 800e41c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e420:	3301      	adds	r3, #1
 800e422:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e430:	b29b      	uxth	r3, r3
 800e432:	029b      	lsls	r3, r3, #10
 800e434:	b29b      	uxth	r3, r3
 800e436:	4313      	orrs	r3, r2
 800e438:	b29a      	uxth	r2, r3
 800e43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43c:	801a      	strh	r2, [r3, #0]
 800e43e:	e024      	b.n	800e48a <USB_EPStartXfer+0x318>
 800e440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	785b      	ldrb	r3, [r3, #1]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d11c      	bne.n	800e48a <USB_EPStartXfer+0x318>
 800e450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e45e:	b29b      	uxth	r3, r3
 800e460:	461a      	mov	r2, r3
 800e462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e464:	4413      	add	r3, r2
 800e466:	633b      	str	r3, [r7, #48]	; 0x30
 800e468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e46c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	00da      	lsls	r2, r3, #3
 800e476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e478:	4413      	add	r3, r2
 800e47a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e47e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e484:	b29a      	uxth	r2, r3
 800e486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e48e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	895b      	ldrh	r3, [r3, #10]
 800e496:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e49a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e49e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	6959      	ldr	r1, [r3, #20]
 800e4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e4b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e4b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e4b8:	6800      	ldr	r0, [r0, #0]
 800e4ba:	f001 fb66 	bl	800fb8a <USB_WritePMA>
            ep->xfer_buff += len;
 800e4be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	695a      	ldr	r2, [r3, #20]
 800e4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4ce:	441a      	add	r2, r3
 800e4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	6a1a      	ldr	r2, [r3, #32]
 800e4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d90f      	bls.n	800e518 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800e4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	6a1a      	ldr	r2, [r3, #32]
 800e504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e508:	1ad2      	subs	r2, r2, r3
 800e50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e50e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	621a      	str	r2, [r3, #32]
 800e516:	e00e      	b.n	800e536 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800e518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e51c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	6a1b      	ldr	r3, [r3, #32]
 800e524:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e52c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2200      	movs	r2, #0
 800e534:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e53a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	785b      	ldrb	r3, [r3, #1]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d177      	bne.n	800e636 <USB_EPStartXfer+0x4c4>
 800e546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e54a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	61bb      	str	r3, [r7, #24]
 800e552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e560:	b29b      	uxth	r3, r3
 800e562:	461a      	mov	r2, r3
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	4413      	add	r3, r2
 800e568:	61bb      	str	r3, [r7, #24]
 800e56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e56e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	00da      	lsls	r2, r3, #3
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	4413      	add	r3, r2
 800e57c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e580:	617b      	str	r3, [r7, #20]
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	881b      	ldrh	r3, [r3, #0]
 800e586:	b29b      	uxth	r3, r3
 800e588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	801a      	strh	r2, [r3, #0]
 800e592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e596:	2b3e      	cmp	r3, #62	; 0x3e
 800e598:	d921      	bls.n	800e5de <USB_EPStartXfer+0x46c>
 800e59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e59e:	095b      	lsrs	r3, r3, #5
 800e5a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5a8:	f003 031f 	and.w	r3, r3, #31
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d104      	bne.n	800e5ba <USB_EPStartXfer+0x448>
 800e5b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e5b4:	3b01      	subs	r3, #1
 800e5b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	881b      	ldrh	r3, [r3, #0]
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	029b      	lsls	r3, r3, #10
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	801a      	strh	r2, [r3, #0]
 800e5dc:	e056      	b.n	800e68c <USB_EPStartXfer+0x51a>
 800e5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d10a      	bne.n	800e5fc <USB_EPStartXfer+0x48a>
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	881b      	ldrh	r3, [r3, #0]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5f4:	b29a      	uxth	r2, r3
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	801a      	strh	r2, [r3, #0]
 800e5fa:	e047      	b.n	800e68c <USB_EPStartXfer+0x51a>
 800e5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e600:	085b      	lsrs	r3, r3, #1
 800e602:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e60a:	f003 0301 	and.w	r3, r3, #1
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d004      	beq.n	800e61c <USB_EPStartXfer+0x4aa>
 800e612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e616:	3301      	adds	r3, #1
 800e618:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	881b      	ldrh	r3, [r3, #0]
 800e620:	b29a      	uxth	r2, r3
 800e622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e626:	b29b      	uxth	r3, r3
 800e628:	029b      	lsls	r3, r3, #10
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	4313      	orrs	r3, r2
 800e62e:	b29a      	uxth	r2, r3
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	801a      	strh	r2, [r3, #0]
 800e634:	e02a      	b.n	800e68c <USB_EPStartXfer+0x51a>
 800e636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	785b      	ldrb	r3, [r3, #1]
 800e642:	2b01      	cmp	r3, #1
 800e644:	d122      	bne.n	800e68c <USB_EPStartXfer+0x51a>
 800e646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e64a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	623b      	str	r3, [r7, #32]
 800e652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e660:	b29b      	uxth	r3, r3
 800e662:	461a      	mov	r2, r3
 800e664:	6a3b      	ldr	r3, [r7, #32]
 800e666:	4413      	add	r3, r2
 800e668:	623b      	str	r3, [r7, #32]
 800e66a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e66e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	00da      	lsls	r2, r3, #3
 800e678:	6a3b      	ldr	r3, [r7, #32]
 800e67a:	4413      	add	r3, r2
 800e67c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e680:	61fb      	str	r3, [r7, #28]
 800e682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e686:	b29a      	uxth	r2, r3
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e68c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	891b      	ldrh	r3, [r3, #8]
 800e698:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e69c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	6959      	ldr	r1, [r3, #20]
 800e6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e6b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e6b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e6ba:	6800      	ldr	r0, [r0, #0]
 800e6bc:	f001 fa65 	bl	800fb8a <USB_WritePMA>
 800e6c0:	e3ee      	b.n	800eea0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e6c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	785b      	ldrb	r3, [r3, #1]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d177      	bne.n	800e7c2 <USB_EPStartXfer+0x650>
 800e6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6f2:	4413      	add	r3, r2
 800e6f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	00da      	lsls	r2, r3, #3
 800e704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e706:	4413      	add	r3, r2
 800e708:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e70c:	647b      	str	r3, [r7, #68]	; 0x44
 800e70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e710:	881b      	ldrh	r3, [r3, #0]
 800e712:	b29b      	uxth	r3, r3
 800e714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e718:	b29a      	uxth	r2, r3
 800e71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e71c:	801a      	strh	r2, [r3, #0]
 800e71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e722:	2b3e      	cmp	r3, #62	; 0x3e
 800e724:	d921      	bls.n	800e76a <USB_EPStartXfer+0x5f8>
 800e726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e72a:	095b      	lsrs	r3, r3, #5
 800e72c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e734:	f003 031f 	and.w	r3, r3, #31
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d104      	bne.n	800e746 <USB_EPStartXfer+0x5d4>
 800e73c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e740:	3b01      	subs	r3, #1
 800e742:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e748:	881b      	ldrh	r3, [r3, #0]
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e750:	b29b      	uxth	r3, r3
 800e752:	029b      	lsls	r3, r3, #10
 800e754:	b29b      	uxth	r3, r3
 800e756:	4313      	orrs	r3, r2
 800e758:	b29b      	uxth	r3, r3
 800e75a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e75e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e762:	b29a      	uxth	r2, r3
 800e764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e766:	801a      	strh	r2, [r3, #0]
 800e768:	e056      	b.n	800e818 <USB_EPStartXfer+0x6a6>
 800e76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10a      	bne.n	800e788 <USB_EPStartXfer+0x616>
 800e772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e774:	881b      	ldrh	r3, [r3, #0]
 800e776:	b29b      	uxth	r3, r3
 800e778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e77c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e780:	b29a      	uxth	r2, r3
 800e782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e784:	801a      	strh	r2, [r3, #0]
 800e786:	e047      	b.n	800e818 <USB_EPStartXfer+0x6a6>
 800e788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e78c:	085b      	lsrs	r3, r3, #1
 800e78e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e796:	f003 0301 	and.w	r3, r3, #1
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d004      	beq.n	800e7a8 <USB_EPStartXfer+0x636>
 800e79e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7aa:	881b      	ldrh	r3, [r3, #0]
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	029b      	lsls	r3, r3, #10
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7be:	801a      	strh	r2, [r3, #0]
 800e7c0:	e02a      	b.n	800e818 <USB_EPStartXfer+0x6a6>
 800e7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	785b      	ldrb	r3, [r3, #1]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d122      	bne.n	800e818 <USB_EPStartXfer+0x6a6>
 800e7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	653b      	str	r3, [r7, #80]	; 0x50
 800e7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7f2:	4413      	add	r3, r2
 800e7f4:	653b      	str	r3, [r7, #80]	; 0x50
 800e7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	00da      	lsls	r2, r3, #3
 800e804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e806:	4413      	add	r3, r2
 800e808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e80c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e812:	b29a      	uxth	r2, r3
 800e814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e816:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e81c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	891b      	ldrh	r3, [r3, #8]
 800e824:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e82c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	6959      	ldr	r1, [r3, #20]
 800e834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e838:	b29b      	uxth	r3, r3
 800e83a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e83e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e842:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e846:	6800      	ldr	r0, [r0, #0]
 800e848:	f001 f99f 	bl	800fb8a <USB_WritePMA>
            ep->xfer_buff += len;
 800e84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	695a      	ldr	r2, [r3, #20]
 800e858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e85c:	441a      	add	r2, r3
 800e85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e86e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6a1a      	ldr	r2, [r3, #32]
 800e876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e87a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	691b      	ldr	r3, [r3, #16]
 800e882:	429a      	cmp	r2, r3
 800e884:	d90f      	bls.n	800e8a6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6a1a      	ldr	r2, [r3, #32]
 800e892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e896:	1ad2      	subs	r2, r2, r3
 800e898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	621a      	str	r2, [r3, #32]
 800e8a4:	e00e      	b.n	800e8c4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e8a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	6a1b      	ldr	r3, [r3, #32]
 800e8b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	643b      	str	r3, [r7, #64]	; 0x40
 800e8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	785b      	ldrb	r3, [r3, #1]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d177      	bne.n	800e9d0 <USB_EPStartXfer+0x85e>
 800e8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e900:	4413      	add	r3, r2
 800e902:	63bb      	str	r3, [r7, #56]	; 0x38
 800e904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	00da      	lsls	r2, r3, #3
 800e912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e914:	4413      	add	r3, r2
 800e916:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e91a:	637b      	str	r3, [r7, #52]	; 0x34
 800e91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e91e:	881b      	ldrh	r3, [r3, #0]
 800e920:	b29b      	uxth	r3, r3
 800e922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e926:	b29a      	uxth	r2, r3
 800e928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e92a:	801a      	strh	r2, [r3, #0]
 800e92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e930:	2b3e      	cmp	r3, #62	; 0x3e
 800e932:	d921      	bls.n	800e978 <USB_EPStartXfer+0x806>
 800e934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e938:	095b      	lsrs	r3, r3, #5
 800e93a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e942:	f003 031f 	and.w	r3, r3, #31
 800e946:	2b00      	cmp	r3, #0
 800e948:	d104      	bne.n	800e954 <USB_EPStartXfer+0x7e2>
 800e94a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e94e:	3b01      	subs	r3, #1
 800e950:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e956:	881b      	ldrh	r3, [r3, #0]
 800e958:	b29a      	uxth	r2, r3
 800e95a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e95e:	b29b      	uxth	r3, r3
 800e960:	029b      	lsls	r3, r3, #10
 800e962:	b29b      	uxth	r3, r3
 800e964:	4313      	orrs	r3, r2
 800e966:	b29b      	uxth	r3, r3
 800e968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e96c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e970:	b29a      	uxth	r2, r3
 800e972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e974:	801a      	strh	r2, [r3, #0]
 800e976:	e050      	b.n	800ea1a <USB_EPStartXfer+0x8a8>
 800e978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d10a      	bne.n	800e996 <USB_EPStartXfer+0x824>
 800e980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e982:	881b      	ldrh	r3, [r3, #0]
 800e984:	b29b      	uxth	r3, r3
 800e986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e98a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e98e:	b29a      	uxth	r2, r3
 800e990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e992:	801a      	strh	r2, [r3, #0]
 800e994:	e041      	b.n	800ea1a <USB_EPStartXfer+0x8a8>
 800e996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e99a:	085b      	lsrs	r3, r3, #1
 800e99c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9a4:	f003 0301 	and.w	r3, r3, #1
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d004      	beq.n	800e9b6 <USB_EPStartXfer+0x844>
 800e9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	029b      	lsls	r3, r3, #10
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	b29a      	uxth	r2, r3
 800e9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9cc:	801a      	strh	r2, [r3, #0]
 800e9ce:	e024      	b.n	800ea1a <USB_EPStartXfer+0x8a8>
 800e9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	785b      	ldrb	r3, [r3, #1]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d11c      	bne.n	800ea1a <USB_EPStartXfer+0x8a8>
 800e9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9f4:	4413      	add	r3, r2
 800e9f6:	643b      	str	r3, [r7, #64]	; 0x40
 800e9f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	00da      	lsls	r2, r3, #3
 800ea06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea08:	4413      	add	r3, r2
 800ea0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ea0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ea1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	895b      	ldrh	r3, [r3, #10]
 800ea26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ea2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	6959      	ldr	r1, [r3, #20]
 800ea36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ea40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ea44:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ea48:	6800      	ldr	r0, [r0, #0]
 800ea4a:	f001 f89e 	bl	800fb8a <USB_WritePMA>
 800ea4e:	e227      	b.n	800eea0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ea50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	6a1b      	ldr	r3, [r3, #32]
 800ea5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ea60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	4413      	add	r3, r2
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ea82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea86:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ea8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	441a      	add	r2, r3
 800eaa4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800eaa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eaac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800eabc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eacc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	461a      	mov	r2, r3
 800eada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eadc:	4413      	add	r3, r2
 800eade:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	00da      	lsls	r2, r3, #3
 800eaee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaf0:	4413      	add	r3, r2
 800eaf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eaf6:	65bb      	str	r3, [r7, #88]	; 0x58
 800eaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800eb02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	891b      	ldrh	r3, [r3, #8]
 800eb0e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	6959      	ldr	r1, [r3, #20]
 800eb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800eb28:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800eb2c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800eb30:	6800      	ldr	r0, [r0, #0]
 800eb32:	f001 f82a 	bl	800fb8a <USB_WritePMA>
 800eb36:	e1b3      	b.n	800eea0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800eb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	6a1a      	ldr	r2, [r3, #32]
 800eb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb48:	1ad2      	subs	r2, r2, r3
 800eb4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800eb56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	4413      	add	r3, r2
 800eb70:	881b      	ldrh	r3, [r3, #0]
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f000 80c6 	beq.w	800ed0a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eb7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	673b      	str	r3, [r7, #112]	; 0x70
 800eb8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	785b      	ldrb	r3, [r3, #1]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d177      	bne.n	800ec8a <USB_EPStartXfer+0xb18>
 800eb9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	66bb      	str	r3, [r7, #104]	; 0x68
 800eba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebba:	4413      	add	r3, r2
 800ebbc:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	00da      	lsls	r2, r3, #3
 800ebcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebce:	4413      	add	r3, r2
 800ebd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ebd4:	667b      	str	r3, [r7, #100]	; 0x64
 800ebd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebd8:	881b      	ldrh	r3, [r3, #0]
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebe4:	801a      	strh	r2, [r3, #0]
 800ebe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebea:	2b3e      	cmp	r3, #62	; 0x3e
 800ebec:	d921      	bls.n	800ec32 <USB_EPStartXfer+0xac0>
 800ebee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebf2:	095b      	lsrs	r3, r3, #5
 800ebf4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ebf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebfc:	f003 031f 	and.w	r3, r3, #31
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d104      	bne.n	800ec0e <USB_EPStartXfer+0xa9c>
 800ec04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ec0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec10:	881b      	ldrh	r3, [r3, #0]
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	029b      	lsls	r3, r3, #10
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec2e:	801a      	strh	r2, [r3, #0]
 800ec30:	e050      	b.n	800ecd4 <USB_EPStartXfer+0xb62>
 800ec32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d10a      	bne.n	800ec50 <USB_EPStartXfer+0xade>
 800ec3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec3c:	881b      	ldrh	r3, [r3, #0]
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec4c:	801a      	strh	r2, [r3, #0]
 800ec4e:	e041      	b.n	800ecd4 <USB_EPStartXfer+0xb62>
 800ec50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec54:	085b      	lsrs	r3, r3, #1
 800ec56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ec5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec5e:	f003 0301 	and.w	r3, r3, #1
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d004      	beq.n	800ec70 <USB_EPStartXfer+0xafe>
 800ec66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ec70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec72:	881b      	ldrh	r3, [r3, #0]
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	029b      	lsls	r3, r3, #10
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	4313      	orrs	r3, r2
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec86:	801a      	strh	r2, [r3, #0]
 800ec88:	e024      	b.n	800ecd4 <USB_EPStartXfer+0xb62>
 800ec8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	785b      	ldrb	r3, [r3, #1]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d11c      	bne.n	800ecd4 <USB_EPStartXfer+0xb62>
 800ec9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	461a      	mov	r2, r3
 800ecac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ecae:	4413      	add	r3, r2
 800ecb0:	673b      	str	r3, [r7, #112]	; 0x70
 800ecb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	00da      	lsls	r2, r3, #3
 800ecc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ecc2:	4413      	add	r3, r2
 800ecc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ecc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ecca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecd2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ecd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	895b      	ldrh	r3, [r3, #10]
 800ece0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ece4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ece8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	6959      	ldr	r1, [r3, #20]
 800ecf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ecfa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ecfe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ed02:	6800      	ldr	r0, [r0, #0]
 800ed04:	f000 ff41 	bl	800fb8a <USB_WritePMA>
 800ed08:	e0ca      	b.n	800eea0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ed0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	785b      	ldrb	r3, [r3, #1]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d177      	bne.n	800ee0a <USB_EPStartXfer+0xc98>
 800ed1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ed26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	461a      	mov	r2, r3
 800ed38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed3a:	4413      	add	r3, r2
 800ed3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ed3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	00da      	lsls	r2, r3, #3
 800ed4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed4e:	4413      	add	r3, r2
 800ed50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ed54:	67bb      	str	r3, [r7, #120]	; 0x78
 800ed56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed58:	881b      	ldrh	r3, [r3, #0]
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed64:	801a      	strh	r2, [r3, #0]
 800ed66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed6a:	2b3e      	cmp	r3, #62	; 0x3e
 800ed6c:	d921      	bls.n	800edb2 <USB_EPStartXfer+0xc40>
 800ed6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed72:	095b      	lsrs	r3, r3, #5
 800ed74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ed78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed7c:	f003 031f 	and.w	r3, r3, #31
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d104      	bne.n	800ed8e <USB_EPStartXfer+0xc1c>
 800ed84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ed8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed90:	881b      	ldrh	r3, [r3, #0]
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	029b      	lsls	r3, r3, #10
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eda6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edaa:	b29a      	uxth	r2, r3
 800edac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edae:	801a      	strh	r2, [r3, #0]
 800edb0:	e05c      	b.n	800ee6c <USB_EPStartXfer+0xcfa>
 800edb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d10a      	bne.n	800edd0 <USB_EPStartXfer+0xc5e>
 800edba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edbc:	881b      	ldrh	r3, [r3, #0]
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edc8:	b29a      	uxth	r2, r3
 800edca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edcc:	801a      	strh	r2, [r3, #0]
 800edce:	e04d      	b.n	800ee6c <USB_EPStartXfer+0xcfa>
 800edd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edd4:	085b      	lsrs	r3, r3, #1
 800edd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800edda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edde:	f003 0301 	and.w	r3, r3, #1
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d004      	beq.n	800edf0 <USB_EPStartXfer+0xc7e>
 800ede6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800edea:	3301      	adds	r3, #1
 800edec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800edf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edf2:	881b      	ldrh	r3, [r3, #0]
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	029b      	lsls	r3, r3, #10
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	4313      	orrs	r3, r2
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee06:	801a      	strh	r2, [r3, #0]
 800ee08:	e030      	b.n	800ee6c <USB_EPStartXfer+0xcfa>
 800ee0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	785b      	ldrb	r3, [r3, #1]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d128      	bne.n	800ee6c <USB_EPStartXfer+0xcfa>
 800ee1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ee28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	461a      	mov	r2, r3
 800ee3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee3e:	4413      	add	r3, r2
 800ee40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ee44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	00da      	lsls	r2, r3, #3
 800ee52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee56:	4413      	add	r3, r2
 800ee58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ee5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ee6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	891b      	ldrh	r3, [r3, #8]
 800ee78:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6959      	ldr	r1, [r3, #20]
 800ee88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ee92:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ee96:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ee9a:	6800      	ldr	r0, [r0, #0]
 800ee9c:	f000 fe75 	bl	800fb8a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800eea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4413      	add	r3, r2
 800eeba:	881b      	ldrh	r3, [r3, #0]
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eec6:	817b      	strh	r3, [r7, #10]
 800eec8:	897b      	ldrh	r3, [r7, #10]
 800eeca:	f083 0310 	eor.w	r3, r3, #16
 800eece:	817b      	strh	r3, [r7, #10]
 800eed0:	897b      	ldrh	r3, [r7, #10]
 800eed2:	f083 0320 	eor.w	r3, r3, #32
 800eed6:	817b      	strh	r3, [r7, #10]
 800eed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eedc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	441a      	add	r2, r3
 800eef2:	897b      	ldrh	r3, [r7, #10]
 800eef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eefc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	8013      	strh	r3, [r2, #0]
 800ef08:	f000 bcde 	b.w	800f8c8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ef0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	7b1b      	ldrb	r3, [r3, #12]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f040 80bb 	bne.w	800f094 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ef1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	699a      	ldr	r2, [r3, #24]
 800ef2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	691b      	ldr	r3, [r3, #16]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d917      	bls.n	800ef6a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800ef3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ef4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	699a      	ldr	r2, [r3, #24]
 800ef56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef5a:	1ad2      	subs	r2, r2, r3
 800ef5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	619a      	str	r2, [r3, #24]
 800ef68:	e00e      	b.n	800ef88 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ef6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	699b      	ldr	r3, [r3, #24]
 800ef76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ef7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2200      	movs	r2, #0
 800ef86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ef88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ef96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	461a      	mov	r2, r3
 800efa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800efac:	4413      	add	r3, r2
 800efae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800efb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	00da      	lsls	r2, r3, #3
 800efc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800efc4:	4413      	add	r3, r2
 800efc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800efca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800efce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efd2:	881b      	ldrh	r3, [r3, #0]
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efda:	b29a      	uxth	r2, r3
 800efdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efe0:	801a      	strh	r2, [r3, #0]
 800efe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efe6:	2b3e      	cmp	r3, #62	; 0x3e
 800efe8:	d924      	bls.n	800f034 <USB_EPStartXfer+0xec2>
 800efea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efee:	095b      	lsrs	r3, r3, #5
 800eff0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800eff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eff8:	f003 031f 	and.w	r3, r3, #31
 800effc:	2b00      	cmp	r3, #0
 800effe:	d104      	bne.n	800f00a <USB_EPStartXfer+0xe98>
 800f000:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f004:	3b01      	subs	r3, #1
 800f006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f00a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	b29a      	uxth	r2, r3
 800f012:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f016:	b29b      	uxth	r3, r3
 800f018:	029b      	lsls	r3, r3, #10
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	4313      	orrs	r3, r2
 800f01e:	b29b      	uxth	r3, r3
 800f020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f028:	b29a      	uxth	r2, r3
 800f02a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f02e:	801a      	strh	r2, [r3, #0]
 800f030:	f000 bc10 	b.w	800f854 <USB_EPStartXfer+0x16e2>
 800f034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d10c      	bne.n	800f056 <USB_EPStartXfer+0xee4>
 800f03c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	b29b      	uxth	r3, r3
 800f044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f052:	801a      	strh	r2, [r3, #0]
 800f054:	e3fe      	b.n	800f854 <USB_EPStartXfer+0x16e2>
 800f056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f05a:	085b      	lsrs	r3, r3, #1
 800f05c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d004      	beq.n	800f076 <USB_EPStartXfer+0xf04>
 800f06c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f070:	3301      	adds	r3, #1
 800f072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f07a:	881b      	ldrh	r3, [r3, #0]
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f082:	b29b      	uxth	r3, r3
 800f084:	029b      	lsls	r3, r3, #10
 800f086:	b29b      	uxth	r3, r3
 800f088:	4313      	orrs	r3, r2
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f090:	801a      	strh	r2, [r3, #0]
 800f092:	e3df      	b.n	800f854 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	78db      	ldrb	r3, [r3, #3]
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	f040 8218 	bne.w	800f4d6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	785b      	ldrb	r3, [r3, #1]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	f040 809d 	bne.w	800f1f2 <USB_EPStartXfer+0x1080>
 800f0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0dc:	4413      	add	r3, r2
 800f0de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	00da      	lsls	r2, r3, #3
 800f0f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0f4:	4413      	add	r3, r2
 800f0f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f0fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f0fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f102:	881b      	ldrh	r3, [r3, #0]
 800f104:	b29b      	uxth	r3, r3
 800f106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f110:	801a      	strh	r2, [r3, #0]
 800f112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	691b      	ldr	r3, [r3, #16]
 800f11e:	2b3e      	cmp	r3, #62	; 0x3e
 800f120:	d92b      	bls.n	800f17a <USB_EPStartXfer+0x1008>
 800f122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	691b      	ldr	r3, [r3, #16]
 800f12e:	095b      	lsrs	r3, r3, #5
 800f130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	691b      	ldr	r3, [r3, #16]
 800f140:	f003 031f 	and.w	r3, r3, #31
 800f144:	2b00      	cmp	r3, #0
 800f146:	d104      	bne.n	800f152 <USB_EPStartXfer+0xfe0>
 800f148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f14c:	3b01      	subs	r3, #1
 800f14e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	b29a      	uxth	r2, r3
 800f15a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f15e:	b29b      	uxth	r3, r3
 800f160:	029b      	lsls	r3, r3, #10
 800f162:	b29b      	uxth	r3, r3
 800f164:	4313      	orrs	r3, r2
 800f166:	b29b      	uxth	r3, r3
 800f168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f170:	b29a      	uxth	r2, r3
 800f172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f176:	801a      	strh	r2, [r3, #0]
 800f178:	e070      	b.n	800f25c <USB_EPStartXfer+0x10ea>
 800f17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	691b      	ldr	r3, [r3, #16]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d10c      	bne.n	800f1a4 <USB_EPStartXfer+0x1032>
 800f18a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f18e:	881b      	ldrh	r3, [r3, #0]
 800f190:	b29b      	uxth	r3, r3
 800f192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f1a0:	801a      	strh	r2, [r3, #0]
 800f1a2:	e05b      	b.n	800f25c <USB_EPStartXfer+0x10ea>
 800f1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	691b      	ldr	r3, [r3, #16]
 800f1b0:	085b      	lsrs	r3, r3, #1
 800f1b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	f003 0301 	and.w	r3, r3, #1
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d004      	beq.n	800f1d4 <USB_EPStartXfer+0x1062>
 800f1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f1d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f1d8:	881b      	ldrh	r3, [r3, #0]
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	029b      	lsls	r3, r3, #10
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f1ee:	801a      	strh	r2, [r3, #0]
 800f1f0:	e034      	b.n	800f25c <USB_EPStartXfer+0x10ea>
 800f1f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	785b      	ldrb	r3, [r3, #1]
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	d12c      	bne.n	800f25c <USB_EPStartXfer+0x10ea>
 800f202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f21e:	b29b      	uxth	r3, r3
 800f220:	461a      	mov	r2, r3
 800f222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f226:	4413      	add	r3, r2
 800f228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	00da      	lsls	r2, r3, #3
 800f23a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f23e:	4413      	add	r3, r2
 800f240:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	691b      	ldr	r3, [r3, #16]
 800f254:	b29a      	uxth	r2, r3
 800f256:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f25a:	801a      	strh	r2, [r3, #0]
 800f25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f26e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	785b      	ldrb	r3, [r3, #1]
 800f276:	2b00      	cmp	r3, #0
 800f278:	f040 809d 	bne.w	800f3b6 <USB_EPStartXfer+0x1244>
 800f27c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f28e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f298:	b29b      	uxth	r3, r3
 800f29a:	461a      	mov	r2, r3
 800f29c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	00da      	lsls	r2, r3, #3
 800f2b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f2b8:	4413      	add	r3, r2
 800f2ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f2be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f2c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f2c6:	881b      	ldrh	r3, [r3, #0]
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f2d4:	801a      	strh	r2, [r3, #0]
 800f2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	2b3e      	cmp	r3, #62	; 0x3e
 800f2e4:	d92b      	bls.n	800f33e <USB_EPStartXfer+0x11cc>
 800f2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	095b      	lsrs	r3, r3, #5
 800f2f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	691b      	ldr	r3, [r3, #16]
 800f304:	f003 031f 	and.w	r3, r3, #31
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d104      	bne.n	800f316 <USB_EPStartXfer+0x11a4>
 800f30c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f310:	3b01      	subs	r3, #1
 800f312:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f31a:	881b      	ldrh	r3, [r3, #0]
 800f31c:	b29a      	uxth	r2, r3
 800f31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f322:	b29b      	uxth	r3, r3
 800f324:	029b      	lsls	r3, r3, #10
 800f326:	b29b      	uxth	r3, r3
 800f328:	4313      	orrs	r3, r2
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f334:	b29a      	uxth	r2, r3
 800f336:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f33a:	801a      	strh	r2, [r3, #0]
 800f33c:	e069      	b.n	800f412 <USB_EPStartXfer+0x12a0>
 800f33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	691b      	ldr	r3, [r3, #16]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d10c      	bne.n	800f368 <USB_EPStartXfer+0x11f6>
 800f34e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f352:	881b      	ldrh	r3, [r3, #0]
 800f354:	b29b      	uxth	r3, r3
 800f356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f35a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f35e:	b29a      	uxth	r2, r3
 800f360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f364:	801a      	strh	r2, [r3, #0]
 800f366:	e054      	b.n	800f412 <USB_EPStartXfer+0x12a0>
 800f368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f36c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	691b      	ldr	r3, [r3, #16]
 800f374:	085b      	lsrs	r3, r3, #1
 800f376:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f37e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	691b      	ldr	r3, [r3, #16]
 800f386:	f003 0301 	and.w	r3, r3, #1
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d004      	beq.n	800f398 <USB_EPStartXfer+0x1226>
 800f38e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f392:	3301      	adds	r3, #1
 800f394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f39c:	881b      	ldrh	r3, [r3, #0]
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	029b      	lsls	r3, r3, #10
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	b29a      	uxth	r2, r3
 800f3ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f3b2:	801a      	strh	r2, [r3, #0]
 800f3b4:	e02d      	b.n	800f412 <USB_EPStartXfer+0x12a0>
 800f3b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	785b      	ldrb	r3, [r3, #1]
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	d125      	bne.n	800f412 <USB_EPStartXfer+0x12a0>
 800f3c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f3dc:	4413      	add	r3, r2
 800f3de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f3e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	00da      	lsls	r2, r3, #3
 800f3f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f3f4:	4413      	add	r3, r2
 800f3f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f3fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f3fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	691b      	ldr	r3, [r3, #16]
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f410:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	69db      	ldr	r3, [r3, #28]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	f000 8218 	beq.w	800f854 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	4413      	add	r3, r2
 800f43e:	881b      	ldrh	r3, [r3, #0]
 800f440:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f444:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d005      	beq.n	800f45c <USB_EPStartXfer+0x12ea>
 800f450:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10d      	bne.n	800f478 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f45c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f464:	2b00      	cmp	r3, #0
 800f466:	f040 81f5 	bne.w	800f854 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f46a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f472:	2b00      	cmp	r3, #0
 800f474:	f040 81ee 	bne.w	800f854 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f47c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	4413      	add	r3, r2
 800f492:	881b      	ldrh	r3, [r3, #0]
 800f494:	b29b      	uxth	r3, r3
 800f496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f49e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	441a      	add	r2, r3
 800f4bc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f4c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	8013      	strh	r3, [r2, #0]
 800f4d4:	e1be      	b.n	800f854 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	78db      	ldrb	r3, [r3, #3]
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	f040 81b4 	bne.w	800f850 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	699a      	ldr	r2, [r3, #24]
 800f4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	691b      	ldr	r3, [r3, #16]
 800f500:	429a      	cmp	r2, r3
 800f502:	d917      	bls.n	800f534 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800f504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	691b      	ldr	r3, [r3, #16]
 800f510:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800f514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	699a      	ldr	r2, [r3, #24]
 800f520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f524:	1ad2      	subs	r2, r2, r3
 800f526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f52a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	619a      	str	r2, [r3, #24]
 800f532:	e00e      	b.n	800f552 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800f534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	699b      	ldr	r3, [r3, #24]
 800f540:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800f544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	2200      	movs	r2, #0
 800f550:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	785b      	ldrb	r3, [r3, #1]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f040 8085 	bne.w	800f66e <USB_EPStartXfer+0x14fc>
 800f564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f580:	b29b      	uxth	r3, r3
 800f582:	461a      	mov	r2, r3
 800f584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f588:	4413      	add	r3, r2
 800f58a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	00da      	lsls	r2, r3, #3
 800f59c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f5a0:	4413      	add	r3, r2
 800f5a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f5a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f5aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f5bc:	801a      	strh	r2, [r3, #0]
 800f5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5c2:	2b3e      	cmp	r3, #62	; 0x3e
 800f5c4:	d923      	bls.n	800f60e <USB_EPStartXfer+0x149c>
 800f5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5ca:	095b      	lsrs	r3, r3, #5
 800f5cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5d4:	f003 031f 	and.w	r3, r3, #31
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d104      	bne.n	800f5e6 <USB_EPStartXfer+0x1474>
 800f5dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f5e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	029b      	lsls	r3, r3, #10
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f604:	b29a      	uxth	r2, r3
 800f606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f60a:	801a      	strh	r2, [r3, #0]
 800f60c:	e060      	b.n	800f6d0 <USB_EPStartXfer+0x155e>
 800f60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f612:	2b00      	cmp	r3, #0
 800f614:	d10c      	bne.n	800f630 <USB_EPStartXfer+0x14be>
 800f616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f61a:	881b      	ldrh	r3, [r3, #0]
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f626:	b29a      	uxth	r2, r3
 800f628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f62c:	801a      	strh	r2, [r3, #0]
 800f62e:	e04f      	b.n	800f6d0 <USB_EPStartXfer+0x155e>
 800f630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f634:	085b      	lsrs	r3, r3, #1
 800f636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f63e:	f003 0301 	and.w	r3, r3, #1
 800f642:	2b00      	cmp	r3, #0
 800f644:	d004      	beq.n	800f650 <USB_EPStartXfer+0x14de>
 800f646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f64a:	3301      	adds	r3, #1
 800f64c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f654:	881b      	ldrh	r3, [r3, #0]
 800f656:	b29a      	uxth	r2, r3
 800f658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	029b      	lsls	r3, r3, #10
 800f660:	b29b      	uxth	r3, r3
 800f662:	4313      	orrs	r3, r2
 800f664:	b29a      	uxth	r2, r3
 800f666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f66a:	801a      	strh	r2, [r3, #0]
 800f66c:	e030      	b.n	800f6d0 <USB_EPStartXfer+0x155e>
 800f66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	785b      	ldrb	r3, [r3, #1]
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d128      	bne.n	800f6d0 <USB_EPStartXfer+0x155e>
 800f67e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f68c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	461a      	mov	r2, r3
 800f69e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f6a2:	4413      	add	r3, r2
 800f6a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f6a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	00da      	lsls	r2, r3, #3
 800f6b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f6ba:	4413      	add	r3, r2
 800f6bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f6c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f6ce:	801a      	strh	r2, [r3, #0]
 800f6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	785b      	ldrb	r3, [r3, #1]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f040 8085 	bne.w	800f7fa <USB_EPStartXfer+0x1688>
 800f6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	461a      	mov	r2, r3
 800f710:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f714:	4413      	add	r3, r2
 800f716:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	00da      	lsls	r2, r3, #3
 800f728:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f72c:	4413      	add	r3, r2
 800f72e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f73a:	881b      	ldrh	r3, [r3, #0]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f742:	b29a      	uxth	r2, r3
 800f744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f748:	801a      	strh	r2, [r3, #0]
 800f74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f74e:	2b3e      	cmp	r3, #62	; 0x3e
 800f750:	d923      	bls.n	800f79a <USB_EPStartXfer+0x1628>
 800f752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f756:	095b      	lsrs	r3, r3, #5
 800f758:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f760:	f003 031f 	and.w	r3, r3, #31
 800f764:	2b00      	cmp	r3, #0
 800f766:	d104      	bne.n	800f772 <USB_EPStartXfer+0x1600>
 800f768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f76c:	3b01      	subs	r3, #1
 800f76e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f776:	881b      	ldrh	r3, [r3, #0]
 800f778:	b29a      	uxth	r2, r3
 800f77a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f77e:	b29b      	uxth	r3, r3
 800f780:	029b      	lsls	r3, r3, #10
 800f782:	b29b      	uxth	r3, r3
 800f784:	4313      	orrs	r3, r2
 800f786:	b29b      	uxth	r3, r3
 800f788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f78c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f790:	b29a      	uxth	r2, r3
 800f792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f796:	801a      	strh	r2, [r3, #0]
 800f798:	e05c      	b.n	800f854 <USB_EPStartXfer+0x16e2>
 800f79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d10c      	bne.n	800f7bc <USB_EPStartXfer+0x164a>
 800f7a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7a6:	881b      	ldrh	r3, [r3, #0]
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7b2:	b29a      	uxth	r2, r3
 800f7b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7b8:	801a      	strh	r2, [r3, #0]
 800f7ba:	e04b      	b.n	800f854 <USB_EPStartXfer+0x16e2>
 800f7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7c0:	085b      	lsrs	r3, r3, #1
 800f7c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7ca:	f003 0301 	and.w	r3, r3, #1
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d004      	beq.n	800f7dc <USB_EPStartXfer+0x166a>
 800f7d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f7dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7e0:	881b      	ldrh	r3, [r3, #0]
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	029b      	lsls	r3, r3, #10
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7f6:	801a      	strh	r2, [r3, #0]
 800f7f8:	e02c      	b.n	800f854 <USB_EPStartXfer+0x16e2>
 800f7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	785b      	ldrb	r3, [r3, #1]
 800f806:	2b01      	cmp	r3, #1
 800f808:	d124      	bne.n	800f854 <USB_EPStartXfer+0x16e2>
 800f80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f80e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f818:	b29b      	uxth	r3, r3
 800f81a:	461a      	mov	r2, r3
 800f81c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f820:	4413      	add	r3, r2
 800f822:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f82a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	00da      	lsls	r2, r3, #3
 800f834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f838:	4413      	add	r3, r2
 800f83a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f83e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f846:	b29a      	uxth	r2, r3
 800f848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f84c:	801a      	strh	r2, [r3, #0]
 800f84e:	e001      	b.n	800f854 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	e03a      	b.n	800f8ca <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f858:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	4413      	add	r3, r2
 800f86e:	881b      	ldrh	r3, [r3, #0]
 800f870:	b29b      	uxth	r3, r3
 800f872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f87a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f87e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f882:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f886:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f88a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f88e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f892:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f89a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	441a      	add	r2, r3
 800f8b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f8b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f8c8:	2300      	movs	r3, #0
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	785b      	ldrb	r3, [r3, #1]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d020      	beq.n	800f928 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	009b      	lsls	r3, r3, #2
 800f8ee:	4413      	add	r3, r2
 800f8f0:	881b      	ldrh	r3, [r3, #0]
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8fc:	81bb      	strh	r3, [r7, #12]
 800f8fe:	89bb      	ldrh	r3, [r7, #12]
 800f900:	f083 0310 	eor.w	r3, r3, #16
 800f904:	81bb      	strh	r3, [r7, #12]
 800f906:	687a      	ldr	r2, [r7, #4]
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	441a      	add	r2, r3
 800f910:	89bb      	ldrh	r3, [r7, #12]
 800f912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f91a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f922:	b29b      	uxth	r3, r3
 800f924:	8013      	strh	r3, [r2, #0]
 800f926:	e01f      	b.n	800f968 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	4413      	add	r3, r2
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	b29b      	uxth	r3, r3
 800f936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f93a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f93e:	81fb      	strh	r3, [r7, #14]
 800f940:	89fb      	ldrh	r3, [r7, #14]
 800f942:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f946:	81fb      	strh	r3, [r7, #14]
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	441a      	add	r2, r3
 800f952:	89fb      	ldrh	r3, [r7, #14]
 800f954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f95c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f964:	b29b      	uxth	r3, r3
 800f966:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f968:	2300      	movs	r3, #0
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3714      	adds	r7, #20
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr

0800f976 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f976:	b480      	push	{r7}
 800f978:	b087      	sub	sp, #28
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
 800f97e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	7b1b      	ldrb	r3, [r3, #12]
 800f984:	2b00      	cmp	r3, #0
 800f986:	f040 809d 	bne.w	800fac4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	785b      	ldrb	r3, [r3, #1]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d04c      	beq.n	800fa2c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	009b      	lsls	r3, r3, #2
 800f99a:	4413      	add	r3, r2
 800f99c:	881b      	ldrh	r3, [r3, #0]
 800f99e:	823b      	strh	r3, [r7, #16]
 800f9a0:	8a3b      	ldrh	r3, [r7, #16]
 800f9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d01b      	beq.n	800f9e2 <USB_EPClearStall+0x6c>
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4413      	add	r3, r2
 800f9b4:	881b      	ldrh	r3, [r3, #0]
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9c0:	81fb      	strh	r3, [r7, #14]
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	441a      	add	r2, r3
 800f9cc:	89fb      	ldrh	r3, [r7, #14]
 800f9ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	78db      	ldrb	r3, [r3, #3]
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d06c      	beq.n	800fac4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f9ea:	687a      	ldr	r2, [r7, #4]
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	4413      	add	r3, r2
 800f9f4:	881b      	ldrh	r3, [r3, #0]
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa00:	81bb      	strh	r3, [r7, #12]
 800fa02:	89bb      	ldrh	r3, [r7, #12]
 800fa04:	f083 0320 	eor.w	r3, r3, #32
 800fa08:	81bb      	strh	r3, [r7, #12]
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	441a      	add	r2, r3
 800fa14:	89bb      	ldrh	r3, [r7, #12]
 800fa16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	8013      	strh	r3, [r2, #0]
 800fa2a:	e04b      	b.n	800fac4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	4413      	add	r3, r2
 800fa36:	881b      	ldrh	r3, [r3, #0]
 800fa38:	82fb      	strh	r3, [r7, #22]
 800fa3a:	8afb      	ldrh	r3, [r7, #22]
 800fa3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d01b      	beq.n	800fa7c <USB_EPClearStall+0x106>
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	4413      	add	r3, r2
 800fa4e:	881b      	ldrh	r3, [r3, #0]
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa5a:	82bb      	strh	r3, [r7, #20]
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	441a      	add	r2, r3
 800fa66:	8abb      	ldrh	r3, [r7, #20]
 800fa68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fa74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa78:	b29b      	uxth	r3, r3
 800fa7a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	4413      	add	r3, r2
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa92:	827b      	strh	r3, [r7, #18]
 800fa94:	8a7b      	ldrh	r3, [r7, #18]
 800fa96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fa9a:	827b      	strh	r3, [r7, #18]
 800fa9c:	8a7b      	ldrh	r3, [r7, #18]
 800fa9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800faa2:	827b      	strh	r3, [r7, #18]
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	441a      	add	r2, r3
 800faae:	8a7b      	ldrh	r3, [r7, #18]
 800fab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fabc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fac4:	2300      	movs	r3, #0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	371c      	adds	r7, #28
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr

0800fad2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800fad2:	b480      	push	{r7}
 800fad4:	b083      	sub	sp, #12
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
 800fada:	460b      	mov	r3, r1
 800fadc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800fade:	78fb      	ldrb	r3, [r7, #3]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d103      	bne.n	800faec <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2280      	movs	r2, #128	; 0x80
 800fae8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	370c      	adds	r7, #12
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr

0800fafa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800fafa:	b480      	push	{r7}
 800fafc:	b083      	sub	sp, #12
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800fb44:	2300      	movs	r3, #0
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	370c      	adds	r7, #12
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr

0800fb52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800fb52:	b480      	push	{r7}
 800fb54:	b085      	sub	sp, #20
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fb64:	68fb      	ldr	r3, [r7, #12]
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3714      	adds	r7, #20
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr

0800fb72 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800fb72:	b480      	push	{r7}
 800fb74:	b083      	sub	sp, #12
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	370c      	adds	r7, #12
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b08b      	sub	sp, #44	; 0x2c
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	60f8      	str	r0, [r7, #12]
 800fb92:	60b9      	str	r1, [r7, #8]
 800fb94:	4611      	mov	r1, r2
 800fb96:	461a      	mov	r2, r3
 800fb98:	460b      	mov	r3, r1
 800fb9a:	80fb      	strh	r3, [r7, #6]
 800fb9c:	4613      	mov	r3, r2
 800fb9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800fba0:	88bb      	ldrh	r3, [r7, #4]
 800fba2:	3301      	adds	r3, #1
 800fba4:	085b      	lsrs	r3, r3, #1
 800fba6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fbb0:	88fa      	ldrh	r2, [r7, #6]
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	4413      	add	r3, r2
 800fbb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	627b      	str	r3, [r7, #36]	; 0x24
 800fbc0:	e01b      	b.n	800fbfa <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	021b      	lsls	r3, r3, #8
 800fbd0:	b21a      	sxth	r2, r3
 800fbd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	b21b      	sxth	r3, r3
 800fbda:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800fbdc:	6a3b      	ldr	r3, [r7, #32]
 800fbde:	8a7a      	ldrh	r2, [r7, #18]
 800fbe0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800fbe2:	6a3b      	ldr	r3, [r7, #32]
 800fbe4:	3302      	adds	r3, #2
 800fbe6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	3301      	adds	r3, #1
 800fbec:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	627b      	str	r3, [r7, #36]	; 0x24
 800fbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1e0      	bne.n	800fbc2 <USB_WritePMA+0x38>
  }
}
 800fc00:	bf00      	nop
 800fc02:	bf00      	nop
 800fc04:	372c      	adds	r7, #44	; 0x2c
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr

0800fc0e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fc0e:	b480      	push	{r7}
 800fc10:	b08b      	sub	sp, #44	; 0x2c
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	60f8      	str	r0, [r7, #12]
 800fc16:	60b9      	str	r1, [r7, #8]
 800fc18:	4611      	mov	r1, r2
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	80fb      	strh	r3, [r7, #6]
 800fc20:	4613      	mov	r3, r2
 800fc22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800fc24:	88bb      	ldrh	r3, [r7, #4]
 800fc26:	085b      	lsrs	r3, r3, #1
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fc34:	88fa      	ldrh	r2, [r7, #6]
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	4413      	add	r3, r2
 800fc3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc3e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	627b      	str	r3, [r7, #36]	; 0x24
 800fc44:	e018      	b.n	800fc78 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800fc46:	6a3b      	ldr	r3, [r7, #32]
 800fc48:	881b      	ldrh	r3, [r3, #0]
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	3302      	adds	r3, #2
 800fc52:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	b2da      	uxtb	r2, r3
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	3301      	adds	r3, #1
 800fc60:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	0a1b      	lsrs	r3, r3, #8
 800fc66:	b2da      	uxtb	r2, r3
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fc6c:	69fb      	ldr	r3, [r7, #28]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc74:	3b01      	subs	r3, #1
 800fc76:	627b      	str	r3, [r7, #36]	; 0x24
 800fc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d1e3      	bne.n	800fc46 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800fc7e:	88bb      	ldrh	r3, [r7, #4]
 800fc80:	f003 0301 	and.w	r3, r3, #1
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d007      	beq.n	800fc9a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800fc8a:	6a3b      	ldr	r3, [r7, #32]
 800fc8c:	881b      	ldrh	r3, [r3, #0]
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	b2da      	uxtb	r2, r3
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	701a      	strb	r2, [r3, #0]
  }
}
 800fc9a:	bf00      	nop
 800fc9c:	372c      	adds	r7, #44	; 0x2c
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr
	...

0800fca8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fcb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fcb8:	f003 fa14 	bl	80130e4 <USBD_static_malloc>
 800fcbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d109      	bne.n	800fcd8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	32b0      	adds	r2, #176	; 0xb0
 800fcce:	2100      	movs	r1, #0
 800fcd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fcd4:	2302      	movs	r3, #2
 800fcd6:	e0d4      	b.n	800fe82 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fcd8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800fcdc:	2100      	movs	r1, #0
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f005 f9b3 	bl	801504a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	32b0      	adds	r2, #176	; 0xb0
 800fcee:	68f9      	ldr	r1, [r7, #12]
 800fcf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	32b0      	adds	r2, #176	; 0xb0
 800fcfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	7c1b      	ldrb	r3, [r3, #16]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d138      	bne.n	800fd82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fd10:	4b5e      	ldr	r3, [pc, #376]	; (800fe8c <USBD_CDC_Init+0x1e4>)
 800fd12:	7819      	ldrb	r1, [r3, #0]
 800fd14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd18:	2202      	movs	r2, #2
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f002 ffe4 	bl	8012ce8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fd20:	4b5a      	ldr	r3, [pc, #360]	; (800fe8c <USBD_CDC_Init+0x1e4>)
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	f003 020f 	and.w	r2, r3, #15
 800fd28:	6879      	ldr	r1, [r7, #4]
 800fd2a:	4613      	mov	r3, r2
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	4413      	add	r3, r2
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	440b      	add	r3, r1
 800fd34:	3324      	adds	r3, #36	; 0x24
 800fd36:	2201      	movs	r2, #1
 800fd38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fd3a:	4b55      	ldr	r3, [pc, #340]	; (800fe90 <USBD_CDC_Init+0x1e8>)
 800fd3c:	7819      	ldrb	r1, [r3, #0]
 800fd3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd42:	2202      	movs	r2, #2
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f002 ffcf 	bl	8012ce8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fd4a:	4b51      	ldr	r3, [pc, #324]	; (800fe90 <USBD_CDC_Init+0x1e8>)
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	f003 020f 	and.w	r2, r3, #15
 800fd52:	6879      	ldr	r1, [r7, #4]
 800fd54:	4613      	mov	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	4413      	add	r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	440b      	add	r3, r1
 800fd5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fd62:	2201      	movs	r2, #1
 800fd64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fd66:	4b4b      	ldr	r3, [pc, #300]	; (800fe94 <USBD_CDC_Init+0x1ec>)
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	f003 020f 	and.w	r2, r3, #15
 800fd6e:	6879      	ldr	r1, [r7, #4]
 800fd70:	4613      	mov	r3, r2
 800fd72:	009b      	lsls	r3, r3, #2
 800fd74:	4413      	add	r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	440b      	add	r3, r1
 800fd7a:	3326      	adds	r3, #38	; 0x26
 800fd7c:	2210      	movs	r2, #16
 800fd7e:	801a      	strh	r2, [r3, #0]
 800fd80:	e035      	b.n	800fdee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fd82:	4b42      	ldr	r3, [pc, #264]	; (800fe8c <USBD_CDC_Init+0x1e4>)
 800fd84:	7819      	ldrb	r1, [r3, #0]
 800fd86:	2340      	movs	r3, #64	; 0x40
 800fd88:	2202      	movs	r2, #2
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f002 ffac 	bl	8012ce8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fd90:	4b3e      	ldr	r3, [pc, #248]	; (800fe8c <USBD_CDC_Init+0x1e4>)
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	f003 020f 	and.w	r2, r3, #15
 800fd98:	6879      	ldr	r1, [r7, #4]
 800fd9a:	4613      	mov	r3, r2
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	4413      	add	r3, r2
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	440b      	add	r3, r1
 800fda4:	3324      	adds	r3, #36	; 0x24
 800fda6:	2201      	movs	r2, #1
 800fda8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fdaa:	4b39      	ldr	r3, [pc, #228]	; (800fe90 <USBD_CDC_Init+0x1e8>)
 800fdac:	7819      	ldrb	r1, [r3, #0]
 800fdae:	2340      	movs	r3, #64	; 0x40
 800fdb0:	2202      	movs	r2, #2
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f002 ff98 	bl	8012ce8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fdb8:	4b35      	ldr	r3, [pc, #212]	; (800fe90 <USBD_CDC_Init+0x1e8>)
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	f003 020f 	and.w	r2, r3, #15
 800fdc0:	6879      	ldr	r1, [r7, #4]
 800fdc2:	4613      	mov	r3, r2
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	4413      	add	r3, r2
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	440b      	add	r3, r1
 800fdcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fdd4:	4b2f      	ldr	r3, [pc, #188]	; (800fe94 <USBD_CDC_Init+0x1ec>)
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	f003 020f 	and.w	r2, r3, #15
 800fddc:	6879      	ldr	r1, [r7, #4]
 800fdde:	4613      	mov	r3, r2
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	4413      	add	r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	440b      	add	r3, r1
 800fde8:	3326      	adds	r3, #38	; 0x26
 800fdea:	2210      	movs	r2, #16
 800fdec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fdee:	4b29      	ldr	r3, [pc, #164]	; (800fe94 <USBD_CDC_Init+0x1ec>)
 800fdf0:	7819      	ldrb	r1, [r3, #0]
 800fdf2:	2308      	movs	r3, #8
 800fdf4:	2203      	movs	r2, #3
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f002 ff76 	bl	8012ce8 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fdfc:	4b25      	ldr	r3, [pc, #148]	; (800fe94 <USBD_CDC_Init+0x1ec>)
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	f003 020f 	and.w	r2, r3, #15
 800fe04:	6879      	ldr	r1, [r7, #4]
 800fe06:	4613      	mov	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	4413      	add	r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	440b      	add	r3, r1
 800fe10:	3324      	adds	r3, #36	; 0x24
 800fe12:	2201      	movs	r2, #1
 800fe14:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fe24:	687a      	ldr	r2, [r7, #4]
 800fe26:	33b0      	adds	r3, #176	; 0xb0
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	4413      	add	r3, r2
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2200      	movs	r2, #0
 800fe36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d101      	bne.n	800fe50 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fe4c:	2302      	movs	r3, #2
 800fe4e:	e018      	b.n	800fe82 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	7c1b      	ldrb	r3, [r3, #16]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d10a      	bne.n	800fe6e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fe58:	4b0d      	ldr	r3, [pc, #52]	; (800fe90 <USBD_CDC_Init+0x1e8>)
 800fe5a:	7819      	ldrb	r1, [r3, #0]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fe62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f003 f8ba 	bl	8012fe0 <USBD_LL_PrepareReceive>
 800fe6c:	e008      	b.n	800fe80 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fe6e:	4b08      	ldr	r3, [pc, #32]	; (800fe90 <USBD_CDC_Init+0x1e8>)
 800fe70:	7819      	ldrb	r1, [r3, #0]
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fe78:	2340      	movs	r3, #64	; 0x40
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f003 f8b0 	bl	8012fe0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fe80:	2300      	movs	r3, #0
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	200000b3 	.word	0x200000b3
 800fe90:	200000b4 	.word	0x200000b4
 800fe94:	200000b5 	.word	0x200000b5

0800fe98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	460b      	mov	r3, r1
 800fea2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fea4:	4b3a      	ldr	r3, [pc, #232]	; (800ff90 <USBD_CDC_DeInit+0xf8>)
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	4619      	mov	r1, r3
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f002 ff5a 	bl	8012d64 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800feb0:	4b37      	ldr	r3, [pc, #220]	; (800ff90 <USBD_CDC_DeInit+0xf8>)
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	f003 020f 	and.w	r2, r3, #15
 800feb8:	6879      	ldr	r1, [r7, #4]
 800feba:	4613      	mov	r3, r2
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	4413      	add	r3, r2
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	440b      	add	r3, r1
 800fec4:	3324      	adds	r3, #36	; 0x24
 800fec6:	2200      	movs	r2, #0
 800fec8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800feca:	4b32      	ldr	r3, [pc, #200]	; (800ff94 <USBD_CDC_DeInit+0xfc>)
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	4619      	mov	r1, r3
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f002 ff47 	bl	8012d64 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fed6:	4b2f      	ldr	r3, [pc, #188]	; (800ff94 <USBD_CDC_DeInit+0xfc>)
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	f003 020f 	and.w	r2, r3, #15
 800fede:	6879      	ldr	r1, [r7, #4]
 800fee0:	4613      	mov	r3, r2
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	4413      	add	r3, r2
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	440b      	add	r3, r1
 800feea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800feee:	2200      	movs	r2, #0
 800fef0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fef2:	4b29      	ldr	r3, [pc, #164]	; (800ff98 <USBD_CDC_DeInit+0x100>)
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	4619      	mov	r1, r3
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f002 ff33 	bl	8012d64 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fefe:	4b26      	ldr	r3, [pc, #152]	; (800ff98 <USBD_CDC_DeInit+0x100>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	f003 020f 	and.w	r2, r3, #15
 800ff06:	6879      	ldr	r1, [r7, #4]
 800ff08:	4613      	mov	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4413      	add	r3, r2
 800ff0e:	009b      	lsls	r3, r3, #2
 800ff10:	440b      	add	r3, r1
 800ff12:	3324      	adds	r3, #36	; 0x24
 800ff14:	2200      	movs	r2, #0
 800ff16:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ff18:	4b1f      	ldr	r3, [pc, #124]	; (800ff98 <USBD_CDC_DeInit+0x100>)
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	f003 020f 	and.w	r2, r3, #15
 800ff20:	6879      	ldr	r1, [r7, #4]
 800ff22:	4613      	mov	r3, r2
 800ff24:	009b      	lsls	r3, r3, #2
 800ff26:	4413      	add	r3, r2
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	440b      	add	r3, r1
 800ff2c:	3326      	adds	r3, #38	; 0x26
 800ff2e:	2200      	movs	r2, #0
 800ff30:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	32b0      	adds	r2, #176	; 0xb0
 800ff3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d01f      	beq.n	800ff84 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ff4a:	687a      	ldr	r2, [r7, #4]
 800ff4c:	33b0      	adds	r3, #176	; 0xb0
 800ff4e:	009b      	lsls	r3, r3, #2
 800ff50:	4413      	add	r3, r2
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	32b0      	adds	r2, #176	; 0xb0
 800ff62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f003 f8ca 	bl	8013100 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	32b0      	adds	r2, #176	; 0xb0
 800ff76:	2100      	movs	r1, #0
 800ff78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ff84:	2300      	movs	r3, #0
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3708      	adds	r7, #8
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	200000b3 	.word	0x200000b3
 800ff94:	200000b4 	.word	0x200000b4
 800ff98:	200000b5 	.word	0x200000b5

0800ff9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b086      	sub	sp, #24
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	32b0      	adds	r2, #176	; 0xb0
 800ffb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d101      	bne.n	800ffcc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ffc8:	2303      	movs	r3, #3
 800ffca:	e0bf      	b.n	801014c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d050      	beq.n	801007a <USBD_CDC_Setup+0xde>
 800ffd8:	2b20      	cmp	r3, #32
 800ffda:	f040 80af 	bne.w	801013c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	88db      	ldrh	r3, [r3, #6]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d03a      	beq.n	801005c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	b25b      	sxtb	r3, r3
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	da1b      	bge.n	8010028 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	33b0      	adds	r3, #176	; 0xb0
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	4413      	add	r3, r2
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	689b      	ldr	r3, [r3, #8]
 8010002:	683a      	ldr	r2, [r7, #0]
 8010004:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010006:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010008:	683a      	ldr	r2, [r7, #0]
 801000a:	88d2      	ldrh	r2, [r2, #6]
 801000c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	88db      	ldrh	r3, [r3, #6]
 8010012:	2b07      	cmp	r3, #7
 8010014:	bf28      	it	cs
 8010016:	2307      	movcs	r3, #7
 8010018:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	89fa      	ldrh	r2, [r7, #14]
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f001 fd21 	bl	8011a68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010026:	e090      	b.n	801014a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	785a      	ldrb	r2, [r3, #1]
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	88db      	ldrh	r3, [r3, #6]
 8010036:	2b3f      	cmp	r3, #63	; 0x3f
 8010038:	d803      	bhi.n	8010042 <USBD_CDC_Setup+0xa6>
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	88db      	ldrh	r3, [r3, #6]
 801003e:	b2da      	uxtb	r2, r3
 8010040:	e000      	b.n	8010044 <USBD_CDC_Setup+0xa8>
 8010042:	2240      	movs	r2, #64	; 0x40
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801004a:	6939      	ldr	r1, [r7, #16]
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010052:	461a      	mov	r2, r3
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f001 fd33 	bl	8011ac0 <USBD_CtlPrepareRx>
      break;
 801005a:	e076      	b.n	801014a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	33b0      	adds	r3, #176	; 0xb0
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	4413      	add	r3, r2
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	689b      	ldr	r3, [r3, #8]
 801006e:	683a      	ldr	r2, [r7, #0]
 8010070:	7850      	ldrb	r0, [r2, #1]
 8010072:	2200      	movs	r2, #0
 8010074:	6839      	ldr	r1, [r7, #0]
 8010076:	4798      	blx	r3
      break;
 8010078:	e067      	b.n	801014a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	785b      	ldrb	r3, [r3, #1]
 801007e:	2b0b      	cmp	r3, #11
 8010080:	d851      	bhi.n	8010126 <USBD_CDC_Setup+0x18a>
 8010082:	a201      	add	r2, pc, #4	; (adr r2, 8010088 <USBD_CDC_Setup+0xec>)
 8010084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010088:	080100b9 	.word	0x080100b9
 801008c:	08010135 	.word	0x08010135
 8010090:	08010127 	.word	0x08010127
 8010094:	08010127 	.word	0x08010127
 8010098:	08010127 	.word	0x08010127
 801009c:	08010127 	.word	0x08010127
 80100a0:	08010127 	.word	0x08010127
 80100a4:	08010127 	.word	0x08010127
 80100a8:	08010127 	.word	0x08010127
 80100ac:	08010127 	.word	0x08010127
 80100b0:	080100e3 	.word	0x080100e3
 80100b4:	0801010d 	.word	0x0801010d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	2b03      	cmp	r3, #3
 80100c2:	d107      	bne.n	80100d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80100c4:	f107 030a 	add.w	r3, r7, #10
 80100c8:	2202      	movs	r2, #2
 80100ca:	4619      	mov	r1, r3
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f001 fccb 	bl	8011a68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80100d2:	e032      	b.n	801013a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80100d4:	6839      	ldr	r1, [r7, #0]
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f001 fc55 	bl	8011986 <USBD_CtlError>
            ret = USBD_FAIL;
 80100dc:	2303      	movs	r3, #3
 80100de:	75fb      	strb	r3, [r7, #23]
          break;
 80100e0:	e02b      	b.n	801013a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	2b03      	cmp	r3, #3
 80100ec:	d107      	bne.n	80100fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80100ee:	f107 030d 	add.w	r3, r7, #13
 80100f2:	2201      	movs	r2, #1
 80100f4:	4619      	mov	r1, r3
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f001 fcb6 	bl	8011a68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80100fc:	e01d      	b.n	801013a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80100fe:	6839      	ldr	r1, [r7, #0]
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f001 fc40 	bl	8011986 <USBD_CtlError>
            ret = USBD_FAIL;
 8010106:	2303      	movs	r3, #3
 8010108:	75fb      	strb	r3, [r7, #23]
          break;
 801010a:	e016      	b.n	801013a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b03      	cmp	r3, #3
 8010116:	d00f      	beq.n	8010138 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010118:	6839      	ldr	r1, [r7, #0]
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f001 fc33 	bl	8011986 <USBD_CtlError>
            ret = USBD_FAIL;
 8010120:	2303      	movs	r3, #3
 8010122:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010124:	e008      	b.n	8010138 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010126:	6839      	ldr	r1, [r7, #0]
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f001 fc2c 	bl	8011986 <USBD_CtlError>
          ret = USBD_FAIL;
 801012e:	2303      	movs	r3, #3
 8010130:	75fb      	strb	r3, [r7, #23]
          break;
 8010132:	e002      	b.n	801013a <USBD_CDC_Setup+0x19e>
          break;
 8010134:	bf00      	nop
 8010136:	e008      	b.n	801014a <USBD_CDC_Setup+0x1ae>
          break;
 8010138:	bf00      	nop
      }
      break;
 801013a:	e006      	b.n	801014a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801013c:	6839      	ldr	r1, [r7, #0]
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f001 fc21 	bl	8011986 <USBD_CtlError>
      ret = USBD_FAIL;
 8010144:	2303      	movs	r3, #3
 8010146:	75fb      	strb	r3, [r7, #23]
      break;
 8010148:	bf00      	nop
  }

  return (uint8_t)ret;
 801014a:	7dfb      	ldrb	r3, [r7, #23]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3718      	adds	r7, #24
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	460b      	mov	r3, r1
 801015e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010166:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	32b0      	adds	r2, #176	; 0xb0
 8010172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d101      	bne.n	801017e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801017a:	2303      	movs	r3, #3
 801017c:	e065      	b.n	801024a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	32b0      	adds	r2, #176	; 0xb0
 8010188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801018c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801018e:	78fb      	ldrb	r3, [r7, #3]
 8010190:	f003 020f 	and.w	r2, r3, #15
 8010194:	6879      	ldr	r1, [r7, #4]
 8010196:	4613      	mov	r3, r2
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	4413      	add	r3, r2
 801019c:	009b      	lsls	r3, r3, #2
 801019e:	440b      	add	r3, r1
 80101a0:	3318      	adds	r3, #24
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d02f      	beq.n	8010208 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80101a8:	78fb      	ldrb	r3, [r7, #3]
 80101aa:	f003 020f 	and.w	r2, r3, #15
 80101ae:	6879      	ldr	r1, [r7, #4]
 80101b0:	4613      	mov	r3, r2
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	4413      	add	r3, r2
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	440b      	add	r3, r1
 80101ba:	3318      	adds	r3, #24
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	78fb      	ldrb	r3, [r7, #3]
 80101c0:	f003 010f 	and.w	r1, r3, #15
 80101c4:	68f8      	ldr	r0, [r7, #12]
 80101c6:	460b      	mov	r3, r1
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	440b      	add	r3, r1
 80101cc:	00db      	lsls	r3, r3, #3
 80101ce:	4403      	add	r3, r0
 80101d0:	3338      	adds	r3, #56	; 0x38
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80101d8:	fb01 f303 	mul.w	r3, r1, r3
 80101dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d112      	bne.n	8010208 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80101e2:	78fb      	ldrb	r3, [r7, #3]
 80101e4:	f003 020f 	and.w	r2, r3, #15
 80101e8:	6879      	ldr	r1, [r7, #4]
 80101ea:	4613      	mov	r3, r2
 80101ec:	009b      	lsls	r3, r3, #2
 80101ee:	4413      	add	r3, r2
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	440b      	add	r3, r1
 80101f4:	3318      	adds	r3, #24
 80101f6:	2200      	movs	r2, #0
 80101f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80101fa:	78f9      	ldrb	r1, [r7, #3]
 80101fc:	2300      	movs	r3, #0
 80101fe:	2200      	movs	r2, #0
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f002 feb5 	bl	8012f70 <USBD_LL_Transmit>
 8010206:	e01f      	b.n	8010248 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	2200      	movs	r2, #0
 801020c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	33b0      	adds	r3, #176	; 0xb0
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	4413      	add	r3, r2
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	691b      	ldr	r3, [r3, #16]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d010      	beq.n	8010248 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	33b0      	adds	r3, #176	; 0xb0
 8010230:	009b      	lsls	r3, r3, #2
 8010232:	4413      	add	r3, r2
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	68ba      	ldr	r2, [r7, #8]
 801023a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801023e:	68ba      	ldr	r2, [r7, #8]
 8010240:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010244:	78fa      	ldrb	r2, [r7, #3]
 8010246:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010248:	2300      	movs	r3, #0
}
 801024a:	4618      	mov	r0, r3
 801024c:	3710      	adds	r7, #16
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}

08010252 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010252:	b580      	push	{r7, lr}
 8010254:	b084      	sub	sp, #16
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
 801025a:	460b      	mov	r3, r1
 801025c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	32b0      	adds	r2, #176	; 0xb0
 8010268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801026c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	32b0      	adds	r2, #176	; 0xb0
 8010278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010280:	2303      	movs	r3, #3
 8010282:	e01a      	b.n	80102ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010284:	78fb      	ldrb	r3, [r7, #3]
 8010286:	4619      	mov	r1, r3
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f002 fee1 	bl	8013050 <USBD_LL_GetRxDataSize>
 801028e:	4602      	mov	r2, r0
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801029c:	687a      	ldr	r2, [r7, #4]
 801029e:	33b0      	adds	r3, #176	; 0xb0
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	4413      	add	r3, r2
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80102b4:	4611      	mov	r1, r2
 80102b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80102b8:	2300      	movs	r3, #0
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3710      	adds	r7, #16
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}

080102c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80102c2:	b580      	push	{r7, lr}
 80102c4:	b084      	sub	sp, #16
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	32b0      	adds	r2, #176	; 0xb0
 80102d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d101      	bne.n	80102e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80102e0:	2303      	movs	r3, #3
 80102e2:	e025      	b.n	8010330 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80102ea:	687a      	ldr	r2, [r7, #4]
 80102ec:	33b0      	adds	r3, #176	; 0xb0
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	4413      	add	r3, r2
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d01a      	beq.n	801032e <USBD_CDC_EP0_RxReady+0x6c>
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80102fe:	2bff      	cmp	r3, #255	; 0xff
 8010300:	d015      	beq.n	801032e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	33b0      	adds	r3, #176	; 0xb0
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	4413      	add	r3, r2
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	689b      	ldr	r3, [r3, #8]
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801031a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010322:	b292      	uxth	r2, r2
 8010324:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	22ff      	movs	r2, #255	; 0xff
 801032a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801032e:	2300      	movs	r3, #0
}
 8010330:	4618      	mov	r0, r3
 8010332:	3710      	adds	r7, #16
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b086      	sub	sp, #24
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010340:	2182      	movs	r1, #130	; 0x82
 8010342:	4818      	ldr	r0, [pc, #96]	; (80103a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010344:	f000 fcbd 	bl	8010cc2 <USBD_GetEpDesc>
 8010348:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801034a:	2101      	movs	r1, #1
 801034c:	4815      	ldr	r0, [pc, #84]	; (80103a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801034e:	f000 fcb8 	bl	8010cc2 <USBD_GetEpDesc>
 8010352:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010354:	2181      	movs	r1, #129	; 0x81
 8010356:	4813      	ldr	r0, [pc, #76]	; (80103a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010358:	f000 fcb3 	bl	8010cc2 <USBD_GetEpDesc>
 801035c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d002      	beq.n	801036a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	2210      	movs	r2, #16
 8010368:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d006      	beq.n	801037e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	2200      	movs	r2, #0
 8010374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010378:	711a      	strb	r2, [r3, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d006      	beq.n	8010392 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2200      	movs	r2, #0
 8010388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801038c:	711a      	strb	r2, [r3, #4]
 801038e:	2200      	movs	r2, #0
 8010390:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2243      	movs	r2, #67	; 0x43
 8010396:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010398:	4b02      	ldr	r3, [pc, #8]	; (80103a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801039a:	4618      	mov	r0, r3
 801039c:	3718      	adds	r7, #24
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	20000070 	.word	0x20000070

080103a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b086      	sub	sp, #24
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80103b0:	2182      	movs	r1, #130	; 0x82
 80103b2:	4818      	ldr	r0, [pc, #96]	; (8010414 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80103b4:	f000 fc85 	bl	8010cc2 <USBD_GetEpDesc>
 80103b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80103ba:	2101      	movs	r1, #1
 80103bc:	4815      	ldr	r0, [pc, #84]	; (8010414 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80103be:	f000 fc80 	bl	8010cc2 <USBD_GetEpDesc>
 80103c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80103c4:	2181      	movs	r1, #129	; 0x81
 80103c6:	4813      	ldr	r0, [pc, #76]	; (8010414 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80103c8:	f000 fc7b 	bl	8010cc2 <USBD_GetEpDesc>
 80103cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d002      	beq.n	80103da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	2210      	movs	r2, #16
 80103d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d006      	beq.n	80103ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	2200      	movs	r2, #0
 80103e4:	711a      	strb	r2, [r3, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	f042 0202 	orr.w	r2, r2, #2
 80103ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d006      	beq.n	8010402 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	2200      	movs	r2, #0
 80103f8:	711a      	strb	r2, [r3, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f042 0202 	orr.w	r2, r2, #2
 8010400:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2243      	movs	r2, #67	; 0x43
 8010406:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010408:	4b02      	ldr	r3, [pc, #8]	; (8010414 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801040a:	4618      	mov	r0, r3
 801040c:	3718      	adds	r7, #24
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	20000070 	.word	0x20000070

08010418 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b086      	sub	sp, #24
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010420:	2182      	movs	r1, #130	; 0x82
 8010422:	4818      	ldr	r0, [pc, #96]	; (8010484 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010424:	f000 fc4d 	bl	8010cc2 <USBD_GetEpDesc>
 8010428:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801042a:	2101      	movs	r1, #1
 801042c:	4815      	ldr	r0, [pc, #84]	; (8010484 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801042e:	f000 fc48 	bl	8010cc2 <USBD_GetEpDesc>
 8010432:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010434:	2181      	movs	r1, #129	; 0x81
 8010436:	4813      	ldr	r0, [pc, #76]	; (8010484 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010438:	f000 fc43 	bl	8010cc2 <USBD_GetEpDesc>
 801043c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d002      	beq.n	801044a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	2210      	movs	r2, #16
 8010448:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d006      	beq.n	801045e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	2200      	movs	r2, #0
 8010454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010458:	711a      	strb	r2, [r3, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d006      	beq.n	8010472 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2200      	movs	r2, #0
 8010468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801046c:	711a      	strb	r2, [r3, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2243      	movs	r2, #67	; 0x43
 8010476:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010478:	4b02      	ldr	r3, [pc, #8]	; (8010484 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801047a:	4618      	mov	r0, r3
 801047c:	3718      	adds	r7, #24
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	20000070 	.word	0x20000070

08010488 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	220a      	movs	r2, #10
 8010494:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010496:	4b03      	ldr	r3, [pc, #12]	; (80104a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010498:	4618      	mov	r0, r3
 801049a:	370c      	adds	r7, #12
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr
 80104a4:	2000002c 	.word	0x2000002c

080104a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80104a8:	b480      	push	{r7}
 80104aa:	b083      	sub	sp, #12
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d101      	bne.n	80104bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80104b8:	2303      	movs	r3, #3
 80104ba:	e009      	b.n	80104d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	33b0      	adds	r3, #176	; 0xb0
 80104c6:	009b      	lsls	r3, r3, #2
 80104c8:	4413      	add	r3, r2
 80104ca:	683a      	ldr	r2, [r7, #0]
 80104cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80104ce:	2300      	movs	r3, #0
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	370c      	adds	r7, #12
 80104d4:	46bd      	mov	sp, r7
 80104d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104da:	4770      	bx	lr

080104dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80104dc:	b480      	push	{r7}
 80104de:	b087      	sub	sp, #28
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	32b0      	adds	r2, #176	; 0xb0
 80104f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d101      	bne.n	8010502 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80104fe:	2303      	movs	r3, #3
 8010500:	e008      	b.n	8010514 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	68ba      	ldr	r2, [r7, #8]
 8010506:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010512:	2300      	movs	r3, #0
}
 8010514:	4618      	mov	r0, r3
 8010516:	371c      	adds	r7, #28
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr

08010520 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010520:	b480      	push	{r7}
 8010522:	b085      	sub	sp, #20
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	32b0      	adds	r2, #176	; 0xb0
 8010534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010538:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d101      	bne.n	8010544 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010540:	2303      	movs	r3, #3
 8010542:	e004      	b.n	801054e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	683a      	ldr	r2, [r7, #0]
 8010548:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3714      	adds	r7, #20
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr
	...

0801055c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	32b0      	adds	r2, #176	; 0xb0
 801056e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010572:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010574:	2301      	movs	r3, #1
 8010576:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d101      	bne.n	8010582 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801057e:	2303      	movs	r3, #3
 8010580:	e025      	b.n	80105ce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010588:	2b00      	cmp	r3, #0
 801058a:	d11f      	bne.n	80105cc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	2201      	movs	r2, #1
 8010590:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010594:	4b10      	ldr	r3, [pc, #64]	; (80105d8 <USBD_CDC_TransmitPacket+0x7c>)
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	f003 020f 	and.w	r2, r3, #15
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	4613      	mov	r3, r2
 80105a6:	009b      	lsls	r3, r3, #2
 80105a8:	4413      	add	r3, r2
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	4403      	add	r3, r0
 80105ae:	3318      	adds	r3, #24
 80105b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80105b2:	4b09      	ldr	r3, [pc, #36]	; (80105d8 <USBD_CDC_TransmitPacket+0x7c>)
 80105b4:	7819      	ldrb	r1, [r3, #0]
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f002 fcd4 	bl	8012f70 <USBD_LL_Transmit>

    ret = USBD_OK;
 80105c8:	2300      	movs	r3, #0
 80105ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80105cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	200000b3 	.word	0x200000b3

080105dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	32b0      	adds	r2, #176	; 0xb0
 80105ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	32b0      	adds	r2, #176	; 0xb0
 80105fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d101      	bne.n	801060a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010606:	2303      	movs	r3, #3
 8010608:	e018      	b.n	801063c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	7c1b      	ldrb	r3, [r3, #16]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d10a      	bne.n	8010628 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010612:	4b0c      	ldr	r3, [pc, #48]	; (8010644 <USBD_CDC_ReceivePacket+0x68>)
 8010614:	7819      	ldrb	r1, [r3, #0]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801061c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f002 fcdd 	bl	8012fe0 <USBD_LL_PrepareReceive>
 8010626:	e008      	b.n	801063a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010628:	4b06      	ldr	r3, [pc, #24]	; (8010644 <USBD_CDC_ReceivePacket+0x68>)
 801062a:	7819      	ldrb	r1, [r3, #0]
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010632:	2340      	movs	r3, #64	; 0x40
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f002 fcd3 	bl	8012fe0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801063a:	2300      	movs	r3, #0
}
 801063c:	4618      	mov	r0, r3
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	200000b4 	.word	0x200000b4

08010648 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b086      	sub	sp, #24
 801064c:	af00      	add	r7, sp, #0
 801064e:	60f8      	str	r0, [r7, #12]
 8010650:	60b9      	str	r1, [r7, #8]
 8010652:	4613      	mov	r3, r2
 8010654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d101      	bne.n	8010660 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801065c:	2303      	movs	r3, #3
 801065e:	e01f      	b.n	80106a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2200      	movs	r2, #0
 8010664:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2200      	movs	r2, #0
 801066c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2200      	movs	r2, #0
 8010674:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d003      	beq.n	8010686 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	68ba      	ldr	r2, [r7, #8]
 8010682:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2201      	movs	r2, #1
 801068a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	79fa      	ldrb	r2, [r7, #7]
 8010692:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f002 fa93 	bl	8012bc0 <USBD_LL_Init>
 801069a:	4603      	mov	r3, r0
 801069c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801069e:	7dfb      	ldrb	r3, [r7, #23]
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3718      	adds	r7, #24
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80106b2:	2300      	movs	r3, #0
 80106b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d101      	bne.n	80106c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80106bc:	2303      	movs	r3, #3
 80106be:	e025      	b.n	801070c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	683a      	ldr	r2, [r7, #0]
 80106c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	32ae      	adds	r2, #174	; 0xae
 80106d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00f      	beq.n	80106fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	32ae      	adds	r2, #174	; 0xae
 80106e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ec:	f107 020e 	add.w	r2, r7, #14
 80106f0:	4610      	mov	r0, r2
 80106f2:	4798      	blx	r3
 80106f4:	4602      	mov	r2, r0
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8010702:	1c5a      	adds	r2, r3, #1
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801070a:	2300      	movs	r3, #0
}
 801070c:	4618      	mov	r0, r3
 801070e:	3710      	adds	r7, #16
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f002 fab1 	bl	8012c84 <USBD_LL_Start>
 8010722:	4603      	mov	r3, r0
}
 8010724:	4618      	mov	r0, r3
 8010726:	3708      	adds	r7, #8
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010734:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010736:	4618      	mov	r0, r3
 8010738:	370c      	adds	r7, #12
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr

08010742 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010742:	b580      	push	{r7, lr}
 8010744:	b084      	sub	sp, #16
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	460b      	mov	r3, r1
 801074c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801074e:	2300      	movs	r3, #0
 8010750:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010758:	2b00      	cmp	r3, #0
 801075a:	d009      	beq.n	8010770 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	78fa      	ldrb	r2, [r7, #3]
 8010766:	4611      	mov	r1, r2
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	4798      	blx	r3
 801076c:	4603      	mov	r3, r0
 801076e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010770:	7bfb      	ldrb	r3, [r7, #15]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}

0801077a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801077a:	b580      	push	{r7, lr}
 801077c:	b084      	sub	sp, #16
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
 8010782:	460b      	mov	r3, r1
 8010784:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010786:	2300      	movs	r3, #0
 8010788:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	78fa      	ldrb	r2, [r7, #3]
 8010794:	4611      	mov	r1, r2
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	4798      	blx	r3
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d001      	beq.n	80107a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80107a0:	2303      	movs	r3, #3
 80107a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80107a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3710      	adds	r7, #16
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}

080107ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80107ae:	b580      	push	{r7, lr}
 80107b0:	b084      	sub	sp, #16
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
 80107b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80107be:	6839      	ldr	r1, [r7, #0]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f001 f8a6 	bl	8011912 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2201      	movs	r2, #1
 80107ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80107d4:	461a      	mov	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80107e2:	f003 031f 	and.w	r3, r3, #31
 80107e6:	2b02      	cmp	r3, #2
 80107e8:	d01a      	beq.n	8010820 <USBD_LL_SetupStage+0x72>
 80107ea:	2b02      	cmp	r3, #2
 80107ec:	d822      	bhi.n	8010834 <USBD_LL_SetupStage+0x86>
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d002      	beq.n	80107f8 <USBD_LL_SetupStage+0x4a>
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d00a      	beq.n	801080c <USBD_LL_SetupStage+0x5e>
 80107f6:	e01d      	b.n	8010834 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80107fe:	4619      	mov	r1, r3
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fad3 	bl	8010dac <USBD_StdDevReq>
 8010806:	4603      	mov	r3, r0
 8010808:	73fb      	strb	r3, [r7, #15]
      break;
 801080a:	e020      	b.n	801084e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010812:	4619      	mov	r1, r3
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f000 fb3b 	bl	8010e90 <USBD_StdItfReq>
 801081a:	4603      	mov	r3, r0
 801081c:	73fb      	strb	r3, [r7, #15]
      break;
 801081e:	e016      	b.n	801084e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010826:	4619      	mov	r1, r3
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 fb9d 	bl	8010f68 <USBD_StdEPReq>
 801082e:	4603      	mov	r3, r0
 8010830:	73fb      	strb	r3, [r7, #15]
      break;
 8010832:	e00c      	b.n	801084e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801083a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801083e:	b2db      	uxtb	r3, r3
 8010840:	4619      	mov	r1, r3
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f002 fac4 	bl	8012dd0 <USBD_LL_StallEP>
 8010848:	4603      	mov	r3, r0
 801084a:	73fb      	strb	r3, [r7, #15]
      break;
 801084c:	bf00      	nop
  }

  return ret;
 801084e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010850:	4618      	mov	r0, r3
 8010852:	3710      	adds	r7, #16
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}

08010858 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b086      	sub	sp, #24
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	460b      	mov	r3, r1
 8010862:	607a      	str	r2, [r7, #4]
 8010864:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010866:	2300      	movs	r3, #0
 8010868:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801086a:	7afb      	ldrb	r3, [r7, #11]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d16e      	bne.n	801094e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010876:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801087e:	2b03      	cmp	r3, #3
 8010880:	f040 8098 	bne.w	80109b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	689a      	ldr	r2, [r3, #8]
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	68db      	ldr	r3, [r3, #12]
 801088c:	429a      	cmp	r2, r3
 801088e:	d913      	bls.n	80108b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	689a      	ldr	r2, [r3, #8]
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	1ad2      	subs	r2, r2, r3
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	68da      	ldr	r2, [r3, #12]
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	4293      	cmp	r3, r2
 80108a8:	bf28      	it	cs
 80108aa:	4613      	movcs	r3, r2
 80108ac:	461a      	mov	r2, r3
 80108ae:	6879      	ldr	r1, [r7, #4]
 80108b0:	68f8      	ldr	r0, [r7, #12]
 80108b2:	f001 f922 	bl	8011afa <USBD_CtlContinueRx>
 80108b6:	e07d      	b.n	80109b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80108be:	f003 031f 	and.w	r3, r3, #31
 80108c2:	2b02      	cmp	r3, #2
 80108c4:	d014      	beq.n	80108f0 <USBD_LL_DataOutStage+0x98>
 80108c6:	2b02      	cmp	r3, #2
 80108c8:	d81d      	bhi.n	8010906 <USBD_LL_DataOutStage+0xae>
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d002      	beq.n	80108d4 <USBD_LL_DataOutStage+0x7c>
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d003      	beq.n	80108da <USBD_LL_DataOutStage+0x82>
 80108d2:	e018      	b.n	8010906 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80108d4:	2300      	movs	r3, #0
 80108d6:	75bb      	strb	r3, [r7, #22]
            break;
 80108d8:	e018      	b.n	801090c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	4619      	mov	r1, r3
 80108e4:	68f8      	ldr	r0, [r7, #12]
 80108e6:	f000 f9d2 	bl	8010c8e <USBD_CoreFindIF>
 80108ea:	4603      	mov	r3, r0
 80108ec:	75bb      	strb	r3, [r7, #22]
            break;
 80108ee:	e00d      	b.n	801090c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	4619      	mov	r1, r3
 80108fa:	68f8      	ldr	r0, [r7, #12]
 80108fc:	f000 f9d4 	bl	8010ca8 <USBD_CoreFindEP>
 8010900:	4603      	mov	r3, r0
 8010902:	75bb      	strb	r3, [r7, #22]
            break;
 8010904:	e002      	b.n	801090c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010906:	2300      	movs	r3, #0
 8010908:	75bb      	strb	r3, [r7, #22]
            break;
 801090a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801090c:	7dbb      	ldrb	r3, [r7, #22]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d119      	bne.n	8010946 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010918:	b2db      	uxtb	r3, r3
 801091a:	2b03      	cmp	r3, #3
 801091c:	d113      	bne.n	8010946 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801091e:	7dba      	ldrb	r2, [r7, #22]
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	32ae      	adds	r2, #174	; 0xae
 8010924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010928:	691b      	ldr	r3, [r3, #16]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00b      	beq.n	8010946 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801092e:	7dba      	ldrb	r2, [r7, #22]
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010936:	7dba      	ldrb	r2, [r7, #22]
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	32ae      	adds	r2, #174	; 0xae
 801093c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010940:	691b      	ldr	r3, [r3, #16]
 8010942:	68f8      	ldr	r0, [r7, #12]
 8010944:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f001 f8e8 	bl	8011b1c <USBD_CtlSendStatus>
 801094c:	e032      	b.n	80109b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801094e:	7afb      	ldrb	r3, [r7, #11]
 8010950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010954:	b2db      	uxtb	r3, r3
 8010956:	4619      	mov	r1, r3
 8010958:	68f8      	ldr	r0, [r7, #12]
 801095a:	f000 f9a5 	bl	8010ca8 <USBD_CoreFindEP>
 801095e:	4603      	mov	r3, r0
 8010960:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010962:	7dbb      	ldrb	r3, [r7, #22]
 8010964:	2bff      	cmp	r3, #255	; 0xff
 8010966:	d025      	beq.n	80109b4 <USBD_LL_DataOutStage+0x15c>
 8010968:	7dbb      	ldrb	r3, [r7, #22]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d122      	bne.n	80109b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010974:	b2db      	uxtb	r3, r3
 8010976:	2b03      	cmp	r3, #3
 8010978:	d117      	bne.n	80109aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801097a:	7dba      	ldrb	r2, [r7, #22]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	32ae      	adds	r2, #174	; 0xae
 8010980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010984:	699b      	ldr	r3, [r3, #24]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00f      	beq.n	80109aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801098a:	7dba      	ldrb	r2, [r7, #22]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010992:	7dba      	ldrb	r2, [r7, #22]
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	32ae      	adds	r2, #174	; 0xae
 8010998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801099c:	699b      	ldr	r3, [r3, #24]
 801099e:	7afa      	ldrb	r2, [r7, #11]
 80109a0:	4611      	mov	r1, r2
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	4798      	blx	r3
 80109a6:	4603      	mov	r3, r0
 80109a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80109aa:	7dfb      	ldrb	r3, [r7, #23]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d001      	beq.n	80109b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80109b0:	7dfb      	ldrb	r3, [r7, #23]
 80109b2:	e000      	b.n	80109b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80109b4:	2300      	movs	r3, #0
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3718      	adds	r7, #24
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80109be:	b580      	push	{r7, lr}
 80109c0:	b086      	sub	sp, #24
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	60f8      	str	r0, [r7, #12]
 80109c6:	460b      	mov	r3, r1
 80109c8:	607a      	str	r2, [r7, #4]
 80109ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80109cc:	7afb      	ldrb	r3, [r7, #11]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d16f      	bne.n	8010ab2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	3314      	adds	r3, #20
 80109d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80109de:	2b02      	cmp	r3, #2
 80109e0:	d15a      	bne.n	8010a98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	689a      	ldr	r2, [r3, #8]
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	68db      	ldr	r3, [r3, #12]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d914      	bls.n	8010a18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	689a      	ldr	r2, [r3, #8]
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	68db      	ldr	r3, [r3, #12]
 80109f6:	1ad2      	subs	r2, r2, r3
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	461a      	mov	r2, r3
 8010a02:	6879      	ldr	r1, [r7, #4]
 8010a04:	68f8      	ldr	r0, [r7, #12]
 8010a06:	f001 f84a 	bl	8011a9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	2100      	movs	r1, #0
 8010a10:	68f8      	ldr	r0, [r7, #12]
 8010a12:	f002 fae5 	bl	8012fe0 <USBD_LL_PrepareReceive>
 8010a16:	e03f      	b.n	8010a98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	68da      	ldr	r2, [r3, #12]
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d11c      	bne.n	8010a5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	685a      	ldr	r2, [r3, #4]
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d316      	bcc.n	8010a5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	685a      	ldr	r2, [r3, #4]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d20f      	bcs.n	8010a5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010a3e:	2200      	movs	r2, #0
 8010a40:	2100      	movs	r1, #0
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	f001 f82b 	bl	8011a9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010a50:	2300      	movs	r3, #0
 8010a52:	2200      	movs	r2, #0
 8010a54:	2100      	movs	r1, #0
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f002 fac2 	bl	8012fe0 <USBD_LL_PrepareReceive>
 8010a5c:	e01c      	b.n	8010a98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	2b03      	cmp	r3, #3
 8010a68:	d10f      	bne.n	8010a8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a70:	68db      	ldr	r3, [r3, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d009      	beq.n	8010a8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a84:	68db      	ldr	r3, [r3, #12]
 8010a86:	68f8      	ldr	r0, [r7, #12]
 8010a88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a8a:	2180      	movs	r1, #128	; 0x80
 8010a8c:	68f8      	ldr	r0, [r7, #12]
 8010a8e:	f002 f99f 	bl	8012dd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f001 f855 	bl	8011b42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d03a      	beq.n	8010b18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010aa2:	68f8      	ldr	r0, [r7, #12]
 8010aa4:	f7ff fe42 	bl	801072c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010ab0:	e032      	b.n	8010b18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010ab2:	7afb      	ldrb	r3, [r7, #11]
 8010ab4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	4619      	mov	r1, r3
 8010abc:	68f8      	ldr	r0, [r7, #12]
 8010abe:	f000 f8f3 	bl	8010ca8 <USBD_CoreFindEP>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ac6:	7dfb      	ldrb	r3, [r7, #23]
 8010ac8:	2bff      	cmp	r3, #255	; 0xff
 8010aca:	d025      	beq.n	8010b18 <USBD_LL_DataInStage+0x15a>
 8010acc:	7dfb      	ldrb	r3, [r7, #23]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d122      	bne.n	8010b18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ad8:	b2db      	uxtb	r3, r3
 8010ada:	2b03      	cmp	r3, #3
 8010adc:	d11c      	bne.n	8010b18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010ade:	7dfa      	ldrb	r2, [r7, #23]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	32ae      	adds	r2, #174	; 0xae
 8010ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ae8:	695b      	ldr	r3, [r3, #20]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d014      	beq.n	8010b18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010aee:	7dfa      	ldrb	r2, [r7, #23]
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010af6:	7dfa      	ldrb	r2, [r7, #23]
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	32ae      	adds	r2, #174	; 0xae
 8010afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b00:	695b      	ldr	r3, [r3, #20]
 8010b02:	7afa      	ldrb	r2, [r7, #11]
 8010b04:	4611      	mov	r1, r2
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	4798      	blx	r3
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010b0e:	7dbb      	ldrb	r3, [r7, #22]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d001      	beq.n	8010b18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010b14:	7dbb      	ldrb	r3, [r7, #22]
 8010b16:	e000      	b.n	8010b1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010b18:	2300      	movs	r3, #0
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3718      	adds	r7, #24
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}

08010b22 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010b22:	b580      	push	{r7, lr}
 8010b24:	b084      	sub	sp, #16
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2201      	movs	r2, #1
 8010b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2200      	movs	r2, #0
 8010b42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2200      	movs	r2, #0
 8010b48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2200      	movs	r2, #0
 8010b50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d014      	beq.n	8010b88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d00e      	beq.n	8010b88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	6852      	ldr	r2, [r2, #4]
 8010b76:	b2d2      	uxtb	r2, r2
 8010b78:	4611      	mov	r1, r2
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	4798      	blx	r3
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d001      	beq.n	8010b88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010b84:	2303      	movs	r3, #3
 8010b86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010b88:	2340      	movs	r3, #64	; 0x40
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f002 f8aa 	bl	8012ce8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2201      	movs	r2, #1
 8010b98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2240      	movs	r2, #64	; 0x40
 8010ba0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ba4:	2340      	movs	r3, #64	; 0x40
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	2180      	movs	r1, #128	; 0x80
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f002 f89c 	bl	8012ce8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2240      	movs	r2, #64	; 0x40
 8010bba:	621a      	str	r2, [r3, #32]

  return ret;
 8010bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3710      	adds	r7, #16
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010bc6:	b480      	push	{r7}
 8010bc8:	b083      	sub	sp, #12
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]
 8010bce:	460b      	mov	r3, r1
 8010bd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	78fa      	ldrb	r2, [r7, #3]
 8010bd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010bd8:	2300      	movs	r3, #0
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	370c      	adds	r7, #12
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr

08010be6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010be6:	b480      	push	{r7}
 8010be8:	b083      	sub	sp, #12
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	2b04      	cmp	r3, #4
 8010bf8:	d006      	beq.n	8010c08 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c00:	b2da      	uxtb	r2, r3
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2204      	movs	r2, #4
 8010c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010c10:	2300      	movs	r3, #0
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	370c      	adds	r7, #12
 8010c16:	46bd      	mov	sp, r7
 8010c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1c:	4770      	bx	lr

08010c1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010c1e:	b480      	push	{r7}
 8010c20:	b083      	sub	sp, #12
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	2b04      	cmp	r3, #4
 8010c30:	d106      	bne.n	8010c40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010c40:	2300      	movs	r3, #0
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	370c      	adds	r7, #12
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr

08010c4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b082      	sub	sp, #8
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c5c:	b2db      	uxtb	r3, r3
 8010c5e:	2b03      	cmp	r3, #3
 8010c60:	d110      	bne.n	8010c84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d00b      	beq.n	8010c84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c72:	69db      	ldr	r3, [r3, #28]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d005      	beq.n	8010c84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c7e:	69db      	ldr	r3, [r3, #28]
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010c84:	2300      	movs	r3, #0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3708      	adds	r7, #8
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}

08010c8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010c8e:	b480      	push	{r7}
 8010c90:	b083      	sub	sp, #12
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	6078      	str	r0, [r7, #4]
 8010c96:	460b      	mov	r3, r1
 8010c98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010c9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	370c      	adds	r7, #12
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010cb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	370c      	adds	r7, #12
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc0:	4770      	bx	lr

08010cc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010cc2:	b580      	push	{r7, lr}
 8010cc4:	b086      	sub	sp, #24
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	6078      	str	r0, [r7, #4]
 8010cca:	460b      	mov	r3, r1
 8010ccc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	885b      	ldrh	r3, [r3, #2]
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d920      	bls.n	8010d2c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010cf2:	e013      	b.n	8010d1c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010cf4:	f107 030a 	add.w	r3, r7, #10
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	6978      	ldr	r0, [r7, #20]
 8010cfc:	f000 f81b 	bl	8010d36 <USBD_GetNextDesc>
 8010d00:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	785b      	ldrb	r3, [r3, #1]
 8010d06:	2b05      	cmp	r3, #5
 8010d08:	d108      	bne.n	8010d1c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	789b      	ldrb	r3, [r3, #2]
 8010d12:	78fa      	ldrb	r2, [r7, #3]
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d008      	beq.n	8010d2a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	885b      	ldrh	r3, [r3, #2]
 8010d20:	b29a      	uxth	r2, r3
 8010d22:	897b      	ldrh	r3, [r7, #10]
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d8e5      	bhi.n	8010cf4 <USBD_GetEpDesc+0x32>
 8010d28:	e000      	b.n	8010d2c <USBD_GetEpDesc+0x6a>
          break;
 8010d2a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010d2c:	693b      	ldr	r3, [r7, #16]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3718      	adds	r7, #24
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010d36:	b480      	push	{r7}
 8010d38:	b085      	sub	sp, #20
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
 8010d3e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	881a      	ldrh	r2, [r3, #0]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	4413      	add	r3, r2
 8010d50:	b29a      	uxth	r2, r3
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	4413      	add	r3, r2
 8010d60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010d62:	68fb      	ldr	r3, [r7, #12]
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3714      	adds	r7, #20
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr

08010d70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b087      	sub	sp, #28
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	3301      	adds	r3, #1
 8010d86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010d8e:	8a3b      	ldrh	r3, [r7, #16]
 8010d90:	021b      	lsls	r3, r3, #8
 8010d92:	b21a      	sxth	r2, r3
 8010d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	b21b      	sxth	r3, r3
 8010d9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	371c      	adds	r7, #28
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr

08010dac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010db6:	2300      	movs	r3, #0
 8010db8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010dc2:	2b40      	cmp	r3, #64	; 0x40
 8010dc4:	d005      	beq.n	8010dd2 <USBD_StdDevReq+0x26>
 8010dc6:	2b40      	cmp	r3, #64	; 0x40
 8010dc8:	d857      	bhi.n	8010e7a <USBD_StdDevReq+0xce>
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00f      	beq.n	8010dee <USBD_StdDevReq+0x42>
 8010dce:	2b20      	cmp	r3, #32
 8010dd0:	d153      	bne.n	8010e7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	32ae      	adds	r2, #174	; 0xae
 8010ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010de0:	689b      	ldr	r3, [r3, #8]
 8010de2:	6839      	ldr	r1, [r7, #0]
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	4798      	blx	r3
 8010de8:	4603      	mov	r3, r0
 8010dea:	73fb      	strb	r3, [r7, #15]
      break;
 8010dec:	e04a      	b.n	8010e84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	785b      	ldrb	r3, [r3, #1]
 8010df2:	2b09      	cmp	r3, #9
 8010df4:	d83b      	bhi.n	8010e6e <USBD_StdDevReq+0xc2>
 8010df6:	a201      	add	r2, pc, #4	; (adr r2, 8010dfc <USBD_StdDevReq+0x50>)
 8010df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dfc:	08010e51 	.word	0x08010e51
 8010e00:	08010e65 	.word	0x08010e65
 8010e04:	08010e6f 	.word	0x08010e6f
 8010e08:	08010e5b 	.word	0x08010e5b
 8010e0c:	08010e6f 	.word	0x08010e6f
 8010e10:	08010e2f 	.word	0x08010e2f
 8010e14:	08010e25 	.word	0x08010e25
 8010e18:	08010e6f 	.word	0x08010e6f
 8010e1c:	08010e47 	.word	0x08010e47
 8010e20:	08010e39 	.word	0x08010e39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010e24:	6839      	ldr	r1, [r7, #0]
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 fa3c 	bl	80112a4 <USBD_GetDescriptor>
          break;
 8010e2c:	e024      	b.n	8010e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010e2e:	6839      	ldr	r1, [r7, #0]
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f000 fbcb 	bl	80115cc <USBD_SetAddress>
          break;
 8010e36:	e01f      	b.n	8010e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010e38:	6839      	ldr	r1, [r7, #0]
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f000 fc0a 	bl	8011654 <USBD_SetConfig>
 8010e40:	4603      	mov	r3, r0
 8010e42:	73fb      	strb	r3, [r7, #15]
          break;
 8010e44:	e018      	b.n	8010e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010e46:	6839      	ldr	r1, [r7, #0]
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f000 fcad 	bl	80117a8 <USBD_GetConfig>
          break;
 8010e4e:	e013      	b.n	8010e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010e50:	6839      	ldr	r1, [r7, #0]
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f000 fcde 	bl	8011814 <USBD_GetStatus>
          break;
 8010e58:	e00e      	b.n	8010e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010e5a:	6839      	ldr	r1, [r7, #0]
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 fd0d 	bl	801187c <USBD_SetFeature>
          break;
 8010e62:	e009      	b.n	8010e78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010e64:	6839      	ldr	r1, [r7, #0]
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f000 fd31 	bl	80118ce <USBD_ClrFeature>
          break;
 8010e6c:	e004      	b.n	8010e78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010e6e:	6839      	ldr	r1, [r7, #0]
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f000 fd88 	bl	8011986 <USBD_CtlError>
          break;
 8010e76:	bf00      	nop
      }
      break;
 8010e78:	e004      	b.n	8010e84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010e7a:	6839      	ldr	r1, [r7, #0]
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 fd82 	bl	8011986 <USBD_CtlError>
      break;
 8010e82:	bf00      	nop
  }

  return ret;
 8010e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3710      	adds	r7, #16
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
 8010e8e:	bf00      	nop

08010e90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ea6:	2b40      	cmp	r3, #64	; 0x40
 8010ea8:	d005      	beq.n	8010eb6 <USBD_StdItfReq+0x26>
 8010eaa:	2b40      	cmp	r3, #64	; 0x40
 8010eac:	d852      	bhi.n	8010f54 <USBD_StdItfReq+0xc4>
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d001      	beq.n	8010eb6 <USBD_StdItfReq+0x26>
 8010eb2:	2b20      	cmp	r3, #32
 8010eb4:	d14e      	bne.n	8010f54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	3b01      	subs	r3, #1
 8010ec0:	2b02      	cmp	r3, #2
 8010ec2:	d840      	bhi.n	8010f46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	889b      	ldrh	r3, [r3, #4]
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	2b01      	cmp	r3, #1
 8010ecc:	d836      	bhi.n	8010f3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	889b      	ldrh	r3, [r3, #4]
 8010ed2:	b2db      	uxtb	r3, r3
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7ff fed9 	bl	8010c8e <USBD_CoreFindIF>
 8010edc:	4603      	mov	r3, r0
 8010ede:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ee0:	7bbb      	ldrb	r3, [r7, #14]
 8010ee2:	2bff      	cmp	r3, #255	; 0xff
 8010ee4:	d01d      	beq.n	8010f22 <USBD_StdItfReq+0x92>
 8010ee6:	7bbb      	ldrb	r3, [r7, #14]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d11a      	bne.n	8010f22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010eec:	7bba      	ldrb	r2, [r7, #14]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	32ae      	adds	r2, #174	; 0xae
 8010ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ef6:	689b      	ldr	r3, [r3, #8]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00f      	beq.n	8010f1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010efc:	7bba      	ldrb	r2, [r7, #14]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010f04:	7bba      	ldrb	r2, [r7, #14]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	32ae      	adds	r2, #174	; 0xae
 8010f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f0e:	689b      	ldr	r3, [r3, #8]
 8010f10:	6839      	ldr	r1, [r7, #0]
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	4798      	blx	r3
 8010f16:	4603      	mov	r3, r0
 8010f18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010f1a:	e004      	b.n	8010f26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010f1c:	2303      	movs	r3, #3
 8010f1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010f20:	e001      	b.n	8010f26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010f22:	2303      	movs	r3, #3
 8010f24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	88db      	ldrh	r3, [r3, #6]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d110      	bne.n	8010f50 <USBD_StdItfReq+0xc0>
 8010f2e:	7bfb      	ldrb	r3, [r7, #15]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10d      	bne.n	8010f50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f000 fdf1 	bl	8011b1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010f3a:	e009      	b.n	8010f50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010f3c:	6839      	ldr	r1, [r7, #0]
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 fd21 	bl	8011986 <USBD_CtlError>
          break;
 8010f44:	e004      	b.n	8010f50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010f46:	6839      	ldr	r1, [r7, #0]
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f000 fd1c 	bl	8011986 <USBD_CtlError>
          break;
 8010f4e:	e000      	b.n	8010f52 <USBD_StdItfReq+0xc2>
          break;
 8010f50:	bf00      	nop
      }
      break;
 8010f52:	e004      	b.n	8010f5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010f54:	6839      	ldr	r1, [r7, #0]
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fd15 	bl	8011986 <USBD_CtlError>
      break;
 8010f5c:	bf00      	nop
  }

  return ret;
 8010f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010f72:	2300      	movs	r3, #0
 8010f74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	889b      	ldrh	r3, [r3, #4]
 8010f7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f84:	2b40      	cmp	r3, #64	; 0x40
 8010f86:	d007      	beq.n	8010f98 <USBD_StdEPReq+0x30>
 8010f88:	2b40      	cmp	r3, #64	; 0x40
 8010f8a:	f200 817f 	bhi.w	801128c <USBD_StdEPReq+0x324>
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d02a      	beq.n	8010fe8 <USBD_StdEPReq+0x80>
 8010f92:	2b20      	cmp	r3, #32
 8010f94:	f040 817a 	bne.w	801128c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010f98:	7bbb      	ldrb	r3, [r7, #14]
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f7ff fe83 	bl	8010ca8 <USBD_CoreFindEP>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010fa6:	7b7b      	ldrb	r3, [r7, #13]
 8010fa8:	2bff      	cmp	r3, #255	; 0xff
 8010faa:	f000 8174 	beq.w	8011296 <USBD_StdEPReq+0x32e>
 8010fae:	7b7b      	ldrb	r3, [r7, #13]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	f040 8170 	bne.w	8011296 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010fb6:	7b7a      	ldrb	r2, [r7, #13]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010fbe:	7b7a      	ldrb	r2, [r7, #13]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	32ae      	adds	r2, #174	; 0xae
 8010fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fc8:	689b      	ldr	r3, [r3, #8]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f000 8163 	beq.w	8011296 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010fd0:	7b7a      	ldrb	r2, [r7, #13]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	32ae      	adds	r2, #174	; 0xae
 8010fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fda:	689b      	ldr	r3, [r3, #8]
 8010fdc:	6839      	ldr	r1, [r7, #0]
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	4798      	blx	r3
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010fe6:	e156      	b.n	8011296 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	785b      	ldrb	r3, [r3, #1]
 8010fec:	2b03      	cmp	r3, #3
 8010fee:	d008      	beq.n	8011002 <USBD_StdEPReq+0x9a>
 8010ff0:	2b03      	cmp	r3, #3
 8010ff2:	f300 8145 	bgt.w	8011280 <USBD_StdEPReq+0x318>
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f000 809b 	beq.w	8011132 <USBD_StdEPReq+0x1ca>
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d03c      	beq.n	801107a <USBD_StdEPReq+0x112>
 8011000:	e13e      	b.n	8011280 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011008:	b2db      	uxtb	r3, r3
 801100a:	2b02      	cmp	r3, #2
 801100c:	d002      	beq.n	8011014 <USBD_StdEPReq+0xac>
 801100e:	2b03      	cmp	r3, #3
 8011010:	d016      	beq.n	8011040 <USBD_StdEPReq+0xd8>
 8011012:	e02c      	b.n	801106e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011014:	7bbb      	ldrb	r3, [r7, #14]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d00d      	beq.n	8011036 <USBD_StdEPReq+0xce>
 801101a:	7bbb      	ldrb	r3, [r7, #14]
 801101c:	2b80      	cmp	r3, #128	; 0x80
 801101e:	d00a      	beq.n	8011036 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011020:	7bbb      	ldrb	r3, [r7, #14]
 8011022:	4619      	mov	r1, r3
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f001 fed3 	bl	8012dd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801102a:	2180      	movs	r1, #128	; 0x80
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f001 fecf 	bl	8012dd0 <USBD_LL_StallEP>
 8011032:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011034:	e020      	b.n	8011078 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011036:	6839      	ldr	r1, [r7, #0]
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f000 fca4 	bl	8011986 <USBD_CtlError>
              break;
 801103e:	e01b      	b.n	8011078 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	885b      	ldrh	r3, [r3, #2]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d10e      	bne.n	8011066 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011048:	7bbb      	ldrb	r3, [r7, #14]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d00b      	beq.n	8011066 <USBD_StdEPReq+0xfe>
 801104e:	7bbb      	ldrb	r3, [r7, #14]
 8011050:	2b80      	cmp	r3, #128	; 0x80
 8011052:	d008      	beq.n	8011066 <USBD_StdEPReq+0xfe>
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	88db      	ldrh	r3, [r3, #6]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d104      	bne.n	8011066 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801105c:	7bbb      	ldrb	r3, [r7, #14]
 801105e:	4619      	mov	r1, r3
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f001 feb5 	bl	8012dd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f000 fd58 	bl	8011b1c <USBD_CtlSendStatus>

              break;
 801106c:	e004      	b.n	8011078 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801106e:	6839      	ldr	r1, [r7, #0]
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f000 fc88 	bl	8011986 <USBD_CtlError>
              break;
 8011076:	bf00      	nop
          }
          break;
 8011078:	e107      	b.n	801128a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011080:	b2db      	uxtb	r3, r3
 8011082:	2b02      	cmp	r3, #2
 8011084:	d002      	beq.n	801108c <USBD_StdEPReq+0x124>
 8011086:	2b03      	cmp	r3, #3
 8011088:	d016      	beq.n	80110b8 <USBD_StdEPReq+0x150>
 801108a:	e04b      	b.n	8011124 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801108c:	7bbb      	ldrb	r3, [r7, #14]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d00d      	beq.n	80110ae <USBD_StdEPReq+0x146>
 8011092:	7bbb      	ldrb	r3, [r7, #14]
 8011094:	2b80      	cmp	r3, #128	; 0x80
 8011096:	d00a      	beq.n	80110ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011098:	7bbb      	ldrb	r3, [r7, #14]
 801109a:	4619      	mov	r1, r3
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f001 fe97 	bl	8012dd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80110a2:	2180      	movs	r1, #128	; 0x80
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f001 fe93 	bl	8012dd0 <USBD_LL_StallEP>
 80110aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80110ac:	e040      	b.n	8011130 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80110ae:	6839      	ldr	r1, [r7, #0]
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 fc68 	bl	8011986 <USBD_CtlError>
              break;
 80110b6:	e03b      	b.n	8011130 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	885b      	ldrh	r3, [r3, #2]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d136      	bne.n	801112e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80110c0:	7bbb      	ldrb	r3, [r7, #14]
 80110c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d004      	beq.n	80110d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80110ca:	7bbb      	ldrb	r3, [r7, #14]
 80110cc:	4619      	mov	r1, r3
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f001 feb4 	bl	8012e3c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f000 fd21 	bl	8011b1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80110da:	7bbb      	ldrb	r3, [r7, #14]
 80110dc:	4619      	mov	r1, r3
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7ff fde2 	bl	8010ca8 <USBD_CoreFindEP>
 80110e4:	4603      	mov	r3, r0
 80110e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80110e8:	7b7b      	ldrb	r3, [r7, #13]
 80110ea:	2bff      	cmp	r3, #255	; 0xff
 80110ec:	d01f      	beq.n	801112e <USBD_StdEPReq+0x1c6>
 80110ee:	7b7b      	ldrb	r3, [r7, #13]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d11c      	bne.n	801112e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80110f4:	7b7a      	ldrb	r2, [r7, #13]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80110fc:	7b7a      	ldrb	r2, [r7, #13]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	32ae      	adds	r2, #174	; 0xae
 8011102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011106:	689b      	ldr	r3, [r3, #8]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d010      	beq.n	801112e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801110c:	7b7a      	ldrb	r2, [r7, #13]
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	32ae      	adds	r2, #174	; 0xae
 8011112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011116:	689b      	ldr	r3, [r3, #8]
 8011118:	6839      	ldr	r1, [r7, #0]
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	4798      	blx	r3
 801111e:	4603      	mov	r3, r0
 8011120:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011122:	e004      	b.n	801112e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011124:	6839      	ldr	r1, [r7, #0]
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 fc2d 	bl	8011986 <USBD_CtlError>
              break;
 801112c:	e000      	b.n	8011130 <USBD_StdEPReq+0x1c8>
              break;
 801112e:	bf00      	nop
          }
          break;
 8011130:	e0ab      	b.n	801128a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011138:	b2db      	uxtb	r3, r3
 801113a:	2b02      	cmp	r3, #2
 801113c:	d002      	beq.n	8011144 <USBD_StdEPReq+0x1dc>
 801113e:	2b03      	cmp	r3, #3
 8011140:	d032      	beq.n	80111a8 <USBD_StdEPReq+0x240>
 8011142:	e097      	b.n	8011274 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011144:	7bbb      	ldrb	r3, [r7, #14]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d007      	beq.n	801115a <USBD_StdEPReq+0x1f2>
 801114a:	7bbb      	ldrb	r3, [r7, #14]
 801114c:	2b80      	cmp	r3, #128	; 0x80
 801114e:	d004      	beq.n	801115a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011150:	6839      	ldr	r1, [r7, #0]
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 fc17 	bl	8011986 <USBD_CtlError>
                break;
 8011158:	e091      	b.n	801127e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801115a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801115e:	2b00      	cmp	r3, #0
 8011160:	da0b      	bge.n	801117a <USBD_StdEPReq+0x212>
 8011162:	7bbb      	ldrb	r3, [r7, #14]
 8011164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011168:	4613      	mov	r3, r2
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	4413      	add	r3, r2
 801116e:	009b      	lsls	r3, r3, #2
 8011170:	3310      	adds	r3, #16
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	4413      	add	r3, r2
 8011176:	3304      	adds	r3, #4
 8011178:	e00b      	b.n	8011192 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801117a:	7bbb      	ldrb	r3, [r7, #14]
 801117c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011180:	4613      	mov	r3, r2
 8011182:	009b      	lsls	r3, r3, #2
 8011184:	4413      	add	r3, r2
 8011186:	009b      	lsls	r3, r3, #2
 8011188:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801118c:	687a      	ldr	r2, [r7, #4]
 801118e:	4413      	add	r3, r2
 8011190:	3304      	adds	r3, #4
 8011192:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	2200      	movs	r2, #0
 8011198:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	2202      	movs	r2, #2
 801119e:	4619      	mov	r1, r3
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f000 fc61 	bl	8011a68 <USBD_CtlSendData>
              break;
 80111a6:	e06a      	b.n	801127e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80111a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	da11      	bge.n	80111d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80111b0:	7bbb      	ldrb	r3, [r7, #14]
 80111b2:	f003 020f 	and.w	r2, r3, #15
 80111b6:	6879      	ldr	r1, [r7, #4]
 80111b8:	4613      	mov	r3, r2
 80111ba:	009b      	lsls	r3, r3, #2
 80111bc:	4413      	add	r3, r2
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	440b      	add	r3, r1
 80111c2:	3324      	adds	r3, #36	; 0x24
 80111c4:	881b      	ldrh	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d117      	bne.n	80111fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80111ca:	6839      	ldr	r1, [r7, #0]
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f000 fbda 	bl	8011986 <USBD_CtlError>
                  break;
 80111d2:	e054      	b.n	801127e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80111d4:	7bbb      	ldrb	r3, [r7, #14]
 80111d6:	f003 020f 	and.w	r2, r3, #15
 80111da:	6879      	ldr	r1, [r7, #4]
 80111dc:	4613      	mov	r3, r2
 80111de:	009b      	lsls	r3, r3, #2
 80111e0:	4413      	add	r3, r2
 80111e2:	009b      	lsls	r3, r3, #2
 80111e4:	440b      	add	r3, r1
 80111e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80111ea:	881b      	ldrh	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d104      	bne.n	80111fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80111f0:	6839      	ldr	r1, [r7, #0]
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f000 fbc7 	bl	8011986 <USBD_CtlError>
                  break;
 80111f8:	e041      	b.n	801127e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80111fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	da0b      	bge.n	801121a <USBD_StdEPReq+0x2b2>
 8011202:	7bbb      	ldrb	r3, [r7, #14]
 8011204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011208:	4613      	mov	r3, r2
 801120a:	009b      	lsls	r3, r3, #2
 801120c:	4413      	add	r3, r2
 801120e:	009b      	lsls	r3, r3, #2
 8011210:	3310      	adds	r3, #16
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	4413      	add	r3, r2
 8011216:	3304      	adds	r3, #4
 8011218:	e00b      	b.n	8011232 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801121a:	7bbb      	ldrb	r3, [r7, #14]
 801121c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011220:	4613      	mov	r3, r2
 8011222:	009b      	lsls	r3, r3, #2
 8011224:	4413      	add	r3, r2
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	4413      	add	r3, r2
 8011230:	3304      	adds	r3, #4
 8011232:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011234:	7bbb      	ldrb	r3, [r7, #14]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d002      	beq.n	8011240 <USBD_StdEPReq+0x2d8>
 801123a:	7bbb      	ldrb	r3, [r7, #14]
 801123c:	2b80      	cmp	r3, #128	; 0x80
 801123e:	d103      	bne.n	8011248 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	2200      	movs	r2, #0
 8011244:	601a      	str	r2, [r3, #0]
 8011246:	e00e      	b.n	8011266 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011248:	7bbb      	ldrb	r3, [r7, #14]
 801124a:	4619      	mov	r1, r3
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f001 fe2b 	bl	8012ea8 <USBD_LL_IsStallEP>
 8011252:	4603      	mov	r3, r0
 8011254:	2b00      	cmp	r3, #0
 8011256:	d003      	beq.n	8011260 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	2201      	movs	r2, #1
 801125c:	601a      	str	r2, [r3, #0]
 801125e:	e002      	b.n	8011266 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	2200      	movs	r2, #0
 8011264:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	2202      	movs	r2, #2
 801126a:	4619      	mov	r1, r3
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f000 fbfb 	bl	8011a68 <USBD_CtlSendData>
              break;
 8011272:	e004      	b.n	801127e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011274:	6839      	ldr	r1, [r7, #0]
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 fb85 	bl	8011986 <USBD_CtlError>
              break;
 801127c:	bf00      	nop
          }
          break;
 801127e:	e004      	b.n	801128a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011280:	6839      	ldr	r1, [r7, #0]
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f000 fb7f 	bl	8011986 <USBD_CtlError>
          break;
 8011288:	bf00      	nop
      }
      break;
 801128a:	e005      	b.n	8011298 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801128c:	6839      	ldr	r1, [r7, #0]
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f000 fb79 	bl	8011986 <USBD_CtlError>
      break;
 8011294:	e000      	b.n	8011298 <USBD_StdEPReq+0x330>
      break;
 8011296:	bf00      	nop
  }

  return ret;
 8011298:	7bfb      	ldrb	r3, [r7, #15]
}
 801129a:	4618      	mov	r0, r3
 801129c:	3710      	adds	r7, #16
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}
	...

080112a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80112ae:	2300      	movs	r3, #0
 80112b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80112b2:	2300      	movs	r3, #0
 80112b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80112b6:	2300      	movs	r3, #0
 80112b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	885b      	ldrh	r3, [r3, #2]
 80112be:	0a1b      	lsrs	r3, r3, #8
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	3b01      	subs	r3, #1
 80112c4:	2b0e      	cmp	r3, #14
 80112c6:	f200 8152 	bhi.w	801156e <USBD_GetDescriptor+0x2ca>
 80112ca:	a201      	add	r2, pc, #4	; (adr r2, 80112d0 <USBD_GetDescriptor+0x2c>)
 80112cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112d0:	08011341 	.word	0x08011341
 80112d4:	08011359 	.word	0x08011359
 80112d8:	08011399 	.word	0x08011399
 80112dc:	0801156f 	.word	0x0801156f
 80112e0:	0801156f 	.word	0x0801156f
 80112e4:	0801150f 	.word	0x0801150f
 80112e8:	0801153b 	.word	0x0801153b
 80112ec:	0801156f 	.word	0x0801156f
 80112f0:	0801156f 	.word	0x0801156f
 80112f4:	0801156f 	.word	0x0801156f
 80112f8:	0801156f 	.word	0x0801156f
 80112fc:	0801156f 	.word	0x0801156f
 8011300:	0801156f 	.word	0x0801156f
 8011304:	0801156f 	.word	0x0801156f
 8011308:	0801130d 	.word	0x0801130d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011312:	69db      	ldr	r3, [r3, #28]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d00b      	beq.n	8011330 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801131e:	69db      	ldr	r3, [r3, #28]
 8011320:	687a      	ldr	r2, [r7, #4]
 8011322:	7c12      	ldrb	r2, [r2, #16]
 8011324:	f107 0108 	add.w	r1, r7, #8
 8011328:	4610      	mov	r0, r2
 801132a:	4798      	blx	r3
 801132c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801132e:	e126      	b.n	801157e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011330:	6839      	ldr	r1, [r7, #0]
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f000 fb27 	bl	8011986 <USBD_CtlError>
        err++;
 8011338:	7afb      	ldrb	r3, [r7, #11]
 801133a:	3301      	adds	r3, #1
 801133c:	72fb      	strb	r3, [r7, #11]
      break;
 801133e:	e11e      	b.n	801157e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	7c12      	ldrb	r2, [r2, #16]
 801134c:	f107 0108 	add.w	r1, r7, #8
 8011350:	4610      	mov	r0, r2
 8011352:	4798      	blx	r3
 8011354:	60f8      	str	r0, [r7, #12]
      break;
 8011356:	e112      	b.n	801157e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	7c1b      	ldrb	r3, [r3, #16]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d10d      	bne.n	801137c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011368:	f107 0208 	add.w	r2, r7, #8
 801136c:	4610      	mov	r0, r2
 801136e:	4798      	blx	r3
 8011370:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	3301      	adds	r3, #1
 8011376:	2202      	movs	r2, #2
 8011378:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801137a:	e100      	b.n	801157e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011384:	f107 0208 	add.w	r2, r7, #8
 8011388:	4610      	mov	r0, r2
 801138a:	4798      	blx	r3
 801138c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	3301      	adds	r3, #1
 8011392:	2202      	movs	r2, #2
 8011394:	701a      	strb	r2, [r3, #0]
      break;
 8011396:	e0f2      	b.n	801157e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	885b      	ldrh	r3, [r3, #2]
 801139c:	b2db      	uxtb	r3, r3
 801139e:	2b05      	cmp	r3, #5
 80113a0:	f200 80ac 	bhi.w	80114fc <USBD_GetDescriptor+0x258>
 80113a4:	a201      	add	r2, pc, #4	; (adr r2, 80113ac <USBD_GetDescriptor+0x108>)
 80113a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113aa:	bf00      	nop
 80113ac:	080113c5 	.word	0x080113c5
 80113b0:	080113f9 	.word	0x080113f9
 80113b4:	0801142d 	.word	0x0801142d
 80113b8:	08011461 	.word	0x08011461
 80113bc:	08011495 	.word	0x08011495
 80113c0:	080114c9 	.word	0x080114c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d00b      	beq.n	80113e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	687a      	ldr	r2, [r7, #4]
 80113da:	7c12      	ldrb	r2, [r2, #16]
 80113dc:	f107 0108 	add.w	r1, r7, #8
 80113e0:	4610      	mov	r0, r2
 80113e2:	4798      	blx	r3
 80113e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80113e6:	e091      	b.n	801150c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80113e8:	6839      	ldr	r1, [r7, #0]
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	f000 facb 	bl	8011986 <USBD_CtlError>
            err++;
 80113f0:	7afb      	ldrb	r3, [r7, #11]
 80113f2:	3301      	adds	r3, #1
 80113f4:	72fb      	strb	r3, [r7, #11]
          break;
 80113f6:	e089      	b.n	801150c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d00b      	beq.n	801141c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801140a:	689b      	ldr	r3, [r3, #8]
 801140c:	687a      	ldr	r2, [r7, #4]
 801140e:	7c12      	ldrb	r2, [r2, #16]
 8011410:	f107 0108 	add.w	r1, r7, #8
 8011414:	4610      	mov	r0, r2
 8011416:	4798      	blx	r3
 8011418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801141a:	e077      	b.n	801150c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801141c:	6839      	ldr	r1, [r7, #0]
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f000 fab1 	bl	8011986 <USBD_CtlError>
            err++;
 8011424:	7afb      	ldrb	r3, [r7, #11]
 8011426:	3301      	adds	r3, #1
 8011428:	72fb      	strb	r3, [r7, #11]
          break;
 801142a:	e06f      	b.n	801150c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d00b      	beq.n	8011450 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801143e:	68db      	ldr	r3, [r3, #12]
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	7c12      	ldrb	r2, [r2, #16]
 8011444:	f107 0108 	add.w	r1, r7, #8
 8011448:	4610      	mov	r0, r2
 801144a:	4798      	blx	r3
 801144c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801144e:	e05d      	b.n	801150c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011450:	6839      	ldr	r1, [r7, #0]
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f000 fa97 	bl	8011986 <USBD_CtlError>
            err++;
 8011458:	7afb      	ldrb	r3, [r7, #11]
 801145a:	3301      	adds	r3, #1
 801145c:	72fb      	strb	r3, [r7, #11]
          break;
 801145e:	e055      	b.n	801150c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011466:	691b      	ldr	r3, [r3, #16]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d00b      	beq.n	8011484 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011472:	691b      	ldr	r3, [r3, #16]
 8011474:	687a      	ldr	r2, [r7, #4]
 8011476:	7c12      	ldrb	r2, [r2, #16]
 8011478:	f107 0108 	add.w	r1, r7, #8
 801147c:	4610      	mov	r0, r2
 801147e:	4798      	blx	r3
 8011480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011482:	e043      	b.n	801150c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011484:	6839      	ldr	r1, [r7, #0]
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f000 fa7d 	bl	8011986 <USBD_CtlError>
            err++;
 801148c:	7afb      	ldrb	r3, [r7, #11]
 801148e:	3301      	adds	r3, #1
 8011490:	72fb      	strb	r3, [r7, #11]
          break;
 8011492:	e03b      	b.n	801150c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801149a:	695b      	ldr	r3, [r3, #20]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00b      	beq.n	80114b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114a6:	695b      	ldr	r3, [r3, #20]
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	7c12      	ldrb	r2, [r2, #16]
 80114ac:	f107 0108 	add.w	r1, r7, #8
 80114b0:	4610      	mov	r0, r2
 80114b2:	4798      	blx	r3
 80114b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114b6:	e029      	b.n	801150c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80114b8:	6839      	ldr	r1, [r7, #0]
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 fa63 	bl	8011986 <USBD_CtlError>
            err++;
 80114c0:	7afb      	ldrb	r3, [r7, #11]
 80114c2:	3301      	adds	r3, #1
 80114c4:	72fb      	strb	r3, [r7, #11]
          break;
 80114c6:	e021      	b.n	801150c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114ce:	699b      	ldr	r3, [r3, #24]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00b      	beq.n	80114ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114da:	699b      	ldr	r3, [r3, #24]
 80114dc:	687a      	ldr	r2, [r7, #4]
 80114de:	7c12      	ldrb	r2, [r2, #16]
 80114e0:	f107 0108 	add.w	r1, r7, #8
 80114e4:	4610      	mov	r0, r2
 80114e6:	4798      	blx	r3
 80114e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114ea:	e00f      	b.n	801150c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80114ec:	6839      	ldr	r1, [r7, #0]
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f000 fa49 	bl	8011986 <USBD_CtlError>
            err++;
 80114f4:	7afb      	ldrb	r3, [r7, #11]
 80114f6:	3301      	adds	r3, #1
 80114f8:	72fb      	strb	r3, [r7, #11]
          break;
 80114fa:	e007      	b.n	801150c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80114fc:	6839      	ldr	r1, [r7, #0]
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 fa41 	bl	8011986 <USBD_CtlError>
          err++;
 8011504:	7afb      	ldrb	r3, [r7, #11]
 8011506:	3301      	adds	r3, #1
 8011508:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801150a:	bf00      	nop
      }
      break;
 801150c:	e037      	b.n	801157e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	7c1b      	ldrb	r3, [r3, #16]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d109      	bne.n	801152a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801151c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801151e:	f107 0208 	add.w	r2, r7, #8
 8011522:	4610      	mov	r0, r2
 8011524:	4798      	blx	r3
 8011526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011528:	e029      	b.n	801157e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801152a:	6839      	ldr	r1, [r7, #0]
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f000 fa2a 	bl	8011986 <USBD_CtlError>
        err++;
 8011532:	7afb      	ldrb	r3, [r7, #11]
 8011534:	3301      	adds	r3, #1
 8011536:	72fb      	strb	r3, [r7, #11]
      break;
 8011538:	e021      	b.n	801157e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	7c1b      	ldrb	r3, [r3, #16]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d10d      	bne.n	801155e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801154a:	f107 0208 	add.w	r2, r7, #8
 801154e:	4610      	mov	r0, r2
 8011550:	4798      	blx	r3
 8011552:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	3301      	adds	r3, #1
 8011558:	2207      	movs	r2, #7
 801155a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801155c:	e00f      	b.n	801157e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801155e:	6839      	ldr	r1, [r7, #0]
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f000 fa10 	bl	8011986 <USBD_CtlError>
        err++;
 8011566:	7afb      	ldrb	r3, [r7, #11]
 8011568:	3301      	adds	r3, #1
 801156a:	72fb      	strb	r3, [r7, #11]
      break;
 801156c:	e007      	b.n	801157e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801156e:	6839      	ldr	r1, [r7, #0]
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f000 fa08 	bl	8011986 <USBD_CtlError>
      err++;
 8011576:	7afb      	ldrb	r3, [r7, #11]
 8011578:	3301      	adds	r3, #1
 801157a:	72fb      	strb	r3, [r7, #11]
      break;
 801157c:	bf00      	nop
  }

  if (err != 0U)
 801157e:	7afb      	ldrb	r3, [r7, #11]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d11e      	bne.n	80115c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	88db      	ldrh	r3, [r3, #6]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d016      	beq.n	80115ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801158c:	893b      	ldrh	r3, [r7, #8]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d00e      	beq.n	80115b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	88da      	ldrh	r2, [r3, #6]
 8011596:	893b      	ldrh	r3, [r7, #8]
 8011598:	4293      	cmp	r3, r2
 801159a:	bf28      	it	cs
 801159c:	4613      	movcs	r3, r2
 801159e:	b29b      	uxth	r3, r3
 80115a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80115a2:	893b      	ldrh	r3, [r7, #8]
 80115a4:	461a      	mov	r2, r3
 80115a6:	68f9      	ldr	r1, [r7, #12]
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f000 fa5d 	bl	8011a68 <USBD_CtlSendData>
 80115ae:	e009      	b.n	80115c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80115b0:	6839      	ldr	r1, [r7, #0]
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f000 f9e7 	bl	8011986 <USBD_CtlError>
 80115b8:	e004      	b.n	80115c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 faae 	bl	8011b1c <USBD_CtlSendStatus>
 80115c0:	e000      	b.n	80115c4 <USBD_GetDescriptor+0x320>
    return;
 80115c2:	bf00      	nop
  }
}
 80115c4:	3710      	adds	r7, #16
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop

080115cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b084      	sub	sp, #16
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	889b      	ldrh	r3, [r3, #4]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d131      	bne.n	8011642 <USBD_SetAddress+0x76>
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	88db      	ldrh	r3, [r3, #6]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d12d      	bne.n	8011642 <USBD_SetAddress+0x76>
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	885b      	ldrh	r3, [r3, #2]
 80115ea:	2b7f      	cmp	r3, #127	; 0x7f
 80115ec:	d829      	bhi.n	8011642 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	885b      	ldrh	r3, [r3, #2]
 80115f2:	b2db      	uxtb	r3, r3
 80115f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011600:	b2db      	uxtb	r3, r3
 8011602:	2b03      	cmp	r3, #3
 8011604:	d104      	bne.n	8011610 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011606:	6839      	ldr	r1, [r7, #0]
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f000 f9bc 	bl	8011986 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801160e:	e01d      	b.n	801164c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	7bfa      	ldrb	r2, [r7, #15]
 8011614:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011618:	7bfb      	ldrb	r3, [r7, #15]
 801161a:	4619      	mov	r1, r3
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f001 fc71 	bl	8012f04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 fa7a 	bl	8011b1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011628:	7bfb      	ldrb	r3, [r7, #15]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d004      	beq.n	8011638 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2202      	movs	r2, #2
 8011632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011636:	e009      	b.n	801164c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2201      	movs	r2, #1
 801163c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011640:	e004      	b.n	801164c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011642:	6839      	ldr	r1, [r7, #0]
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f000 f99e 	bl	8011986 <USBD_CtlError>
  }
}
 801164a:	bf00      	nop
 801164c:	bf00      	nop
 801164e:	3710      	adds	r7, #16
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b084      	sub	sp, #16
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801165e:	2300      	movs	r3, #0
 8011660:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	885b      	ldrh	r3, [r3, #2]
 8011666:	b2da      	uxtb	r2, r3
 8011668:	4b4e      	ldr	r3, [pc, #312]	; (80117a4 <USBD_SetConfig+0x150>)
 801166a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801166c:	4b4d      	ldr	r3, [pc, #308]	; (80117a4 <USBD_SetConfig+0x150>)
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	2b01      	cmp	r3, #1
 8011672:	d905      	bls.n	8011680 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011674:	6839      	ldr	r1, [r7, #0]
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f000 f985 	bl	8011986 <USBD_CtlError>
    return USBD_FAIL;
 801167c:	2303      	movs	r3, #3
 801167e:	e08c      	b.n	801179a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011686:	b2db      	uxtb	r3, r3
 8011688:	2b02      	cmp	r3, #2
 801168a:	d002      	beq.n	8011692 <USBD_SetConfig+0x3e>
 801168c:	2b03      	cmp	r3, #3
 801168e:	d029      	beq.n	80116e4 <USBD_SetConfig+0x90>
 8011690:	e075      	b.n	801177e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011692:	4b44      	ldr	r3, [pc, #272]	; (80117a4 <USBD_SetConfig+0x150>)
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d020      	beq.n	80116dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801169a:	4b42      	ldr	r3, [pc, #264]	; (80117a4 <USBD_SetConfig+0x150>)
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	461a      	mov	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80116a4:	4b3f      	ldr	r3, [pc, #252]	; (80117a4 <USBD_SetConfig+0x150>)
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	4619      	mov	r1, r3
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7ff f849 	bl	8010742 <USBD_SetClassConfig>
 80116b0:	4603      	mov	r3, r0
 80116b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80116b4:	7bfb      	ldrb	r3, [r7, #15]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d008      	beq.n	80116cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80116ba:	6839      	ldr	r1, [r7, #0]
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	f000 f962 	bl	8011986 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2202      	movs	r2, #2
 80116c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80116ca:	e065      	b.n	8011798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 fa25 	bl	8011b1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2203      	movs	r2, #3
 80116d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80116da:	e05d      	b.n	8011798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f000 fa1d 	bl	8011b1c <USBD_CtlSendStatus>
      break;
 80116e2:	e059      	b.n	8011798 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80116e4:	4b2f      	ldr	r3, [pc, #188]	; (80117a4 <USBD_SetConfig+0x150>)
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d112      	bne.n	8011712 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2202      	movs	r2, #2
 80116f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80116f4:	4b2b      	ldr	r3, [pc, #172]	; (80117a4 <USBD_SetConfig+0x150>)
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	461a      	mov	r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80116fe:	4b29      	ldr	r3, [pc, #164]	; (80117a4 <USBD_SetConfig+0x150>)
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	4619      	mov	r1, r3
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f7ff f838 	bl	801077a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 fa06 	bl	8011b1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011710:	e042      	b.n	8011798 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011712:	4b24      	ldr	r3, [pc, #144]	; (80117a4 <USBD_SetConfig+0x150>)
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	461a      	mov	r2, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	429a      	cmp	r2, r3
 801171e:	d02a      	beq.n	8011776 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	b2db      	uxtb	r3, r3
 8011726:	4619      	mov	r1, r3
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f7ff f826 	bl	801077a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801172e:	4b1d      	ldr	r3, [pc, #116]	; (80117a4 <USBD_SetConfig+0x150>)
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	461a      	mov	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011738:	4b1a      	ldr	r3, [pc, #104]	; (80117a4 <USBD_SetConfig+0x150>)
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	4619      	mov	r1, r3
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f7fe ffff 	bl	8010742 <USBD_SetClassConfig>
 8011744:	4603      	mov	r3, r0
 8011746:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011748:	7bfb      	ldrb	r3, [r7, #15]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d00f      	beq.n	801176e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801174e:	6839      	ldr	r1, [r7, #0]
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f000 f918 	bl	8011986 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	b2db      	uxtb	r3, r3
 801175c:	4619      	mov	r1, r3
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f7ff f80b 	bl	801077a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2202      	movs	r2, #2
 8011768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801176c:	e014      	b.n	8011798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 f9d4 	bl	8011b1c <USBD_CtlSendStatus>
      break;
 8011774:	e010      	b.n	8011798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 f9d0 	bl	8011b1c <USBD_CtlSendStatus>
      break;
 801177c:	e00c      	b.n	8011798 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801177e:	6839      	ldr	r1, [r7, #0]
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f000 f900 	bl	8011986 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011786:	4b07      	ldr	r3, [pc, #28]	; (80117a4 <USBD_SetConfig+0x150>)
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	4619      	mov	r1, r3
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f7fe fff4 	bl	801077a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011792:	2303      	movs	r3, #3
 8011794:	73fb      	strb	r3, [r7, #15]
      break;
 8011796:	bf00      	nop
  }

  return ret;
 8011798:	7bfb      	ldrb	r3, [r7, #15]
}
 801179a:	4618      	mov	r0, r3
 801179c:	3710      	adds	r7, #16
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	20001050 	.word	0x20001050

080117a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b082      	sub	sp, #8
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	88db      	ldrh	r3, [r3, #6]
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d004      	beq.n	80117c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80117ba:	6839      	ldr	r1, [r7, #0]
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f000 f8e2 	bl	8011986 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80117c2:	e023      	b.n	801180c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117ca:	b2db      	uxtb	r3, r3
 80117cc:	2b02      	cmp	r3, #2
 80117ce:	dc02      	bgt.n	80117d6 <USBD_GetConfig+0x2e>
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	dc03      	bgt.n	80117dc <USBD_GetConfig+0x34>
 80117d4:	e015      	b.n	8011802 <USBD_GetConfig+0x5a>
 80117d6:	2b03      	cmp	r3, #3
 80117d8:	d00b      	beq.n	80117f2 <USBD_GetConfig+0x4a>
 80117da:	e012      	b.n	8011802 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	3308      	adds	r3, #8
 80117e6:	2201      	movs	r2, #1
 80117e8:	4619      	mov	r1, r3
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f000 f93c 	bl	8011a68 <USBD_CtlSendData>
        break;
 80117f0:	e00c      	b.n	801180c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	3304      	adds	r3, #4
 80117f6:	2201      	movs	r2, #1
 80117f8:	4619      	mov	r1, r3
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f000 f934 	bl	8011a68 <USBD_CtlSendData>
        break;
 8011800:	e004      	b.n	801180c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011802:	6839      	ldr	r1, [r7, #0]
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f000 f8be 	bl	8011986 <USBD_CtlError>
        break;
 801180a:	bf00      	nop
}
 801180c:	bf00      	nop
 801180e:	3708      	adds	r7, #8
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011824:	b2db      	uxtb	r3, r3
 8011826:	3b01      	subs	r3, #1
 8011828:	2b02      	cmp	r3, #2
 801182a:	d81e      	bhi.n	801186a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	88db      	ldrh	r3, [r3, #6]
 8011830:	2b02      	cmp	r3, #2
 8011832:	d004      	beq.n	801183e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011834:	6839      	ldr	r1, [r7, #0]
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 f8a5 	bl	8011986 <USBD_CtlError>
        break;
 801183c:	e01a      	b.n	8011874 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2201      	movs	r2, #1
 8011842:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801184a:	2b00      	cmp	r3, #0
 801184c:	d005      	beq.n	801185a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	f043 0202 	orr.w	r2, r3, #2
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	330c      	adds	r3, #12
 801185e:	2202      	movs	r2, #2
 8011860:	4619      	mov	r1, r3
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f000 f900 	bl	8011a68 <USBD_CtlSendData>
      break;
 8011868:	e004      	b.n	8011874 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801186a:	6839      	ldr	r1, [r7, #0]
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 f88a 	bl	8011986 <USBD_CtlError>
      break;
 8011872:	bf00      	nop
  }
}
 8011874:	bf00      	nop
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	885b      	ldrh	r3, [r3, #2]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d107      	bne.n	801189e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2201      	movs	r2, #1
 8011892:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 f940 	bl	8011b1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801189c:	e013      	b.n	80118c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	885b      	ldrh	r3, [r3, #2]
 80118a2:	2b02      	cmp	r3, #2
 80118a4:	d10b      	bne.n	80118be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	889b      	ldrh	r3, [r3, #4]
 80118aa:	0a1b      	lsrs	r3, r3, #8
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	b2da      	uxtb	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f000 f930 	bl	8011b1c <USBD_CtlSendStatus>
}
 80118bc:	e003      	b.n	80118c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80118be:	6839      	ldr	r1, [r7, #0]
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f000 f860 	bl	8011986 <USBD_CtlError>
}
 80118c6:	bf00      	nop
 80118c8:	3708      	adds	r7, #8
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118ce:	b580      	push	{r7, lr}
 80118d0:	b082      	sub	sp, #8
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
 80118d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	3b01      	subs	r3, #1
 80118e2:	2b02      	cmp	r3, #2
 80118e4:	d80b      	bhi.n	80118fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	885b      	ldrh	r3, [r3, #2]
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d10c      	bne.n	8011908 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2200      	movs	r2, #0
 80118f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 f910 	bl	8011b1c <USBD_CtlSendStatus>
      }
      break;
 80118fc:	e004      	b.n	8011908 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80118fe:	6839      	ldr	r1, [r7, #0]
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f000 f840 	bl	8011986 <USBD_CtlError>
      break;
 8011906:	e000      	b.n	801190a <USBD_ClrFeature+0x3c>
      break;
 8011908:	bf00      	nop
  }
}
 801190a:	bf00      	nop
 801190c:	3708      	adds	r7, #8
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}

08011912 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011912:	b580      	push	{r7, lr}
 8011914:	b084      	sub	sp, #16
 8011916:	af00      	add	r7, sp, #0
 8011918:	6078      	str	r0, [r7, #4]
 801191a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	781a      	ldrb	r2, [r3, #0]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	3301      	adds	r3, #1
 801192c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	781a      	ldrb	r2, [r3, #0]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	3301      	adds	r3, #1
 801193a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f7ff fa17 	bl	8010d70 <SWAPBYTE>
 8011942:	4603      	mov	r3, r0
 8011944:	461a      	mov	r2, r3
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	3301      	adds	r3, #1
 801194e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	3301      	adds	r3, #1
 8011954:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011956:	68f8      	ldr	r0, [r7, #12]
 8011958:	f7ff fa0a 	bl	8010d70 <SWAPBYTE>
 801195c:	4603      	mov	r3, r0
 801195e:	461a      	mov	r2, r3
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	3301      	adds	r3, #1
 8011968:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	3301      	adds	r3, #1
 801196e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011970:	68f8      	ldr	r0, [r7, #12]
 8011972:	f7ff f9fd 	bl	8010d70 <SWAPBYTE>
 8011976:	4603      	mov	r3, r0
 8011978:	461a      	mov	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	80da      	strh	r2, [r3, #6]
}
 801197e:	bf00      	nop
 8011980:	3710      	adds	r7, #16
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}

08011986 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011986:	b580      	push	{r7, lr}
 8011988:	b082      	sub	sp, #8
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
 801198e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011990:	2180      	movs	r1, #128	; 0x80
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f001 fa1c 	bl	8012dd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011998:	2100      	movs	r1, #0
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f001 fa18 	bl	8012dd0 <USBD_LL_StallEP>
}
 80119a0:	bf00      	nop
 80119a2:	3708      	adds	r7, #8
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b086      	sub	sp, #24
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	60b9      	str	r1, [r7, #8]
 80119b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80119b4:	2300      	movs	r3, #0
 80119b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d036      	beq.n	8011a2c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80119c2:	6938      	ldr	r0, [r7, #16]
 80119c4:	f000 f836 	bl	8011a34 <USBD_GetLen>
 80119c8:	4603      	mov	r3, r0
 80119ca:	3301      	adds	r3, #1
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	005b      	lsls	r3, r3, #1
 80119d0:	b29a      	uxth	r2, r3
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80119d6:	7dfb      	ldrb	r3, [r7, #23]
 80119d8:	68ba      	ldr	r2, [r7, #8]
 80119da:	4413      	add	r3, r2
 80119dc:	687a      	ldr	r2, [r7, #4]
 80119de:	7812      	ldrb	r2, [r2, #0]
 80119e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80119e2:	7dfb      	ldrb	r3, [r7, #23]
 80119e4:	3301      	adds	r3, #1
 80119e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80119e8:	7dfb      	ldrb	r3, [r7, #23]
 80119ea:	68ba      	ldr	r2, [r7, #8]
 80119ec:	4413      	add	r3, r2
 80119ee:	2203      	movs	r2, #3
 80119f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80119f2:	7dfb      	ldrb	r3, [r7, #23]
 80119f4:	3301      	adds	r3, #1
 80119f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80119f8:	e013      	b.n	8011a22 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80119fa:	7dfb      	ldrb	r3, [r7, #23]
 80119fc:	68ba      	ldr	r2, [r7, #8]
 80119fe:	4413      	add	r3, r2
 8011a00:	693a      	ldr	r2, [r7, #16]
 8011a02:	7812      	ldrb	r2, [r2, #0]
 8011a04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	3301      	adds	r3, #1
 8011a0a:	613b      	str	r3, [r7, #16]
    idx++;
 8011a0c:	7dfb      	ldrb	r3, [r7, #23]
 8011a0e:	3301      	adds	r3, #1
 8011a10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011a12:	7dfb      	ldrb	r3, [r7, #23]
 8011a14:	68ba      	ldr	r2, [r7, #8]
 8011a16:	4413      	add	r3, r2
 8011a18:	2200      	movs	r2, #0
 8011a1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8011a1c:	7dfb      	ldrb	r3, [r7, #23]
 8011a1e:	3301      	adds	r3, #1
 8011a20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	781b      	ldrb	r3, [r3, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d1e7      	bne.n	80119fa <USBD_GetString+0x52>
 8011a2a:	e000      	b.n	8011a2e <USBD_GetString+0x86>
    return;
 8011a2c:	bf00      	nop
  }
}
 8011a2e:	3718      	adds	r7, #24
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011a44:	e005      	b.n	8011a52 <USBD_GetLen+0x1e>
  {
    len++;
 8011a46:	7bfb      	ldrb	r3, [r7, #15]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d1f5      	bne.n	8011a46 <USBD_GetLen+0x12>
  }

  return len;
 8011a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3714      	adds	r7, #20
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr

08011a68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	2202      	movs	r2, #2
 8011a78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	687a      	ldr	r2, [r7, #4]
 8011a80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	68ba      	ldr	r2, [r7, #8]
 8011a8c:	2100      	movs	r1, #0
 8011a8e:	68f8      	ldr	r0, [r7, #12]
 8011a90:	f001 fa6e 	bl	8012f70 <USBD_LL_Transmit>

  return USBD_OK;
 8011a94:	2300      	movs	r3, #0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b084      	sub	sp, #16
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	60f8      	str	r0, [r7, #12]
 8011aa6:	60b9      	str	r1, [r7, #8]
 8011aa8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	68ba      	ldr	r2, [r7, #8]
 8011aae:	2100      	movs	r1, #0
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	f001 fa5d 	bl	8012f70 <USBD_LL_Transmit>

  return USBD_OK;
 8011ab6:	2300      	movs	r3, #0
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3710      	adds	r7, #16
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b084      	sub	sp, #16
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	60f8      	str	r0, [r7, #12]
 8011ac8:	60b9      	str	r1, [r7, #8]
 8011aca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2203      	movs	r2, #3
 8011ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	687a      	ldr	r2, [r7, #4]
 8011ae0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	68ba      	ldr	r2, [r7, #8]
 8011ae8:	2100      	movs	r1, #0
 8011aea:	68f8      	ldr	r0, [r7, #12]
 8011aec:	f001 fa78 	bl	8012fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3710      	adds	r7, #16
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}

08011afa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011afa:	b580      	push	{r7, lr}
 8011afc:	b084      	sub	sp, #16
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	60f8      	str	r0, [r7, #12]
 8011b02:	60b9      	str	r1, [r7, #8]
 8011b04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	68ba      	ldr	r2, [r7, #8]
 8011b0a:	2100      	movs	r1, #0
 8011b0c:	68f8      	ldr	r0, [r7, #12]
 8011b0e:	f001 fa67 	bl	8012fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b12:	2300      	movs	r3, #0
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	3710      	adds	r7, #16
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}

08011b1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2204      	movs	r2, #4
 8011b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	2200      	movs	r2, #0
 8011b30:	2100      	movs	r1, #0
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f001 fa1c 	bl	8012f70 <USBD_LL_Transmit>

  return USBD_OK;
 8011b38:	2300      	movs	r3, #0
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3708      	adds	r7, #8
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}

08011b42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b082      	sub	sp, #8
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2205      	movs	r2, #5
 8011b4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011b52:	2300      	movs	r3, #0
 8011b54:	2200      	movs	r2, #0
 8011b56:	2100      	movs	r1, #0
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f001 fa41 	bl	8012fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b5e:	2300      	movs	r3, #0
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3708      	adds	r7, #8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f7f3 fc1b 	bl	80053ac <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8011b76:	bf00      	nop
 8011b78:	3708      	adds	r7, #8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}

08011b7e <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8011b7e:	b580      	push	{r7, lr}
 8011b80:	b082      	sub	sp, #8
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8011b86:	e002      	b.n	8011b8e <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8011b88:	2001      	movs	r0, #1
 8011b8a:	f7ff ffed 	bl	8011b68 <SPIF_Delay>
  while (Handle->Lock)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	7b1b      	ldrb	r3, [r3, #12]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d1f8      	bne.n	8011b88 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2201      	movs	r2, #1
 8011b9a:	731a      	strb	r2, [r3, #12]
}
 8011b9c:	bf00      	nop
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b083      	sub	sp, #12
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	731a      	strb	r2, [r3, #12]
}
 8011bb2:	bf00      	nop
 8011bb4:	370c      	adds	r7, #12
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbc:	4770      	bx	lr

08011bbe <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8011bbe:	b580      	push	{r7, lr}
 8011bc0:	b084      	sub	sp, #16
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	6078      	str	r0, [r7, #4]
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6858      	ldr	r0, [r3, #4]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	691b      	ldr	r3, [r3, #16]
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	78fa      	ldrb	r2, [r7, #3]
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	f7f5 fbaa 	bl	8007330 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8011bdc:	2300      	movs	r3, #0
 8011bde:	60fb      	str	r3, [r7, #12]
 8011be0:	e002      	b.n	8011be8 <SPIF_CsPin+0x2a>
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	3301      	adds	r3, #1
 8011be6:	60fb      	str	r3, [r7, #12]
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2b09      	cmp	r3, #9
 8011bec:	ddf9      	ble.n	8011be2 <SPIF_CsPin+0x24>
}
 8011bee:	bf00      	nop
 8011bf0:	bf00      	nop
 8011bf2:	3710      	adds	r7, #16
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b088      	sub	sp, #32
 8011bfc:	af02      	add	r7, sp, #8
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	607a      	str	r2, [r7, #4]
 8011c04:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8011c06:	2300      	movs	r3, #0
 8011c08:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	6818      	ldr	r0, [r3, #0]
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	b29a      	uxth	r2, r3
 8011c12:	6a3b      	ldr	r3, [r7, #32]
 8011c14:	9300      	str	r3, [sp, #0]
 8011c16:	4613      	mov	r3, r2
 8011c18:	687a      	ldr	r2, [r7, #4]
 8011c1a:	68b9      	ldr	r1, [r7, #8]
 8011c1c:	f7f9 fae5 	bl	800b1ea <HAL_SPI_TransmitReceive>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d101      	bne.n	8011c2a <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8011c26:	2301      	movs	r3, #1
 8011c28:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8011c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3718      	adds	r7, #24
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b086      	sub	sp, #24
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	60f8      	str	r0, [r7, #12]
 8011c3c:	60b9      	str	r1, [r7, #8]
 8011c3e:	607a      	str	r2, [r7, #4]
 8011c40:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8011c42:	2300      	movs	r3, #0
 8011c44:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	6818      	ldr	r0, [r3, #0]
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	b29a      	uxth	r2, r3
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	68b9      	ldr	r1, [r7, #8]
 8011c52:	f7f9 f81e 	bl	800ac92 <HAL_SPI_Transmit>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d101      	bne.n	8011c60 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8011c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3718      	adds	r7, #24
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}

08011c6a <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b086      	sub	sp, #24
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	60f8      	str	r0, [r7, #12]
 8011c72:	60b9      	str	r1, [r7, #8]
 8011c74:	607a      	str	r2, [r7, #4]
 8011c76:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	6818      	ldr	r0, [r3, #0]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	b29a      	uxth	r2, r3
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	68b9      	ldr	r1, [r7, #8]
 8011c88:	f7f9 f978 	bl	800af7c <HAL_SPI_Receive>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d101      	bne.n	8011c96 <SPIF_Receive+0x2c>
  {
    retVal = true;
 8011c92:	2301      	movs	r3, #1
 8011c94:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8011c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3718      	adds	r7, #24
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8011cac:	2306      	movs	r3, #6
 8011cae:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8011cb0:	2100      	movs	r1, #0
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f7ff ff83 	bl	8011bbe <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8011cb8:	f107 010c 	add.w	r1, r7, #12
 8011cbc:	2364      	movs	r3, #100	; 0x64
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f7ff ffb7 	bl	8011c34 <SPIF_Transmit>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	f083 0301 	eor.w	r3, r3, #1
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d001      	beq.n	8011cd6 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8011cd6:	2101      	movs	r1, #1
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff ff70 	bl	8011bbe <SPIF_CsPin>
  return retVal;
 8011cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3710      	adds	r7, #16
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b084      	sub	sp, #16
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8011cf4:	2304      	movs	r3, #4
 8011cf6:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7ff ff5f 	bl	8011bbe <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8011d00:	f107 010c 	add.w	r1, r7, #12
 8011d04:	2364      	movs	r3, #100	; 0x64
 8011d06:	2201      	movs	r2, #1
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f7ff ff93 	bl	8011c34 <SPIF_Transmit>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	f083 0301 	eor.w	r3, r3, #1
 8011d14:	b2db      	uxtb	r3, r3
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d001      	beq.n	8011d1e <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8011d1e:	2101      	movs	r1, #1
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7ff ff4c 	bl	8011bbe <SPIF_CsPin>
  return retVal;
 8011d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3710      	adds	r7, #16
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}

08011d30 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b086      	sub	sp, #24
 8011d34:	af02      	add	r7, sp, #8
 8011d36:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8011d3c:	f24a 5305 	movw	r3, #42245	; 0xa505
 8011d40:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8011d42:	2100      	movs	r1, #0
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f7ff ff3a 	bl	8011bbe <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8011d4a:	f107 0208 	add.w	r2, r7, #8
 8011d4e:	f107 010c 	add.w	r1, r7, #12
 8011d52:	2364      	movs	r3, #100	; 0x64
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	2302      	movs	r3, #2
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f7ff ff4d 	bl	8011bf8 <SPIF_TransmitReceive>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d001      	beq.n	8011d68 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8011d64:	7a7b      	ldrb	r3, [r7, #9]
 8011d66:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8011d68:	2101      	movs	r1, #1
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f7ff ff27 	bl	8011bbe <SPIF_CsPin>
  return retVal;
 8011d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}

08011d7a <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8011d7a:	b580      	push	{r7, lr}
 8011d7c:	b084      	sub	sp, #16
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	6078      	str	r0, [r7, #4]
 8011d82:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8011d84:	2300      	movs	r3, #0
 8011d86:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8011d88:	f7f3 fb04 	bl	8005394 <HAL_GetTick>
 8011d8c:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8011d8e:	2001      	movs	r0, #1
 8011d90:	f7ff feea 	bl	8011b68 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8011d94:	f7f3 fafe 	bl	8005394 <HAL_GetTick>
 8011d98:	4602      	mov	r2, r0
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	1ad3      	subs	r3, r2, r3
 8011d9e:	683a      	ldr	r2, [r7, #0]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d90a      	bls.n	8011dba <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f7ff ffc3 	bl	8011d30 <SPIF_ReadReg1>
 8011daa:	4603      	mov	r3, r0
 8011dac:	f003 0301 	and.w	r3, r3, #1
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d1ec      	bne.n	8011d8e <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8011db4:	2301      	movs	r3, #1
 8011db6:	73fb      	strb	r3, [r7, #15]
      break;
 8011db8:	e000      	b.n	8011dbc <SPIF_WaitForWriting+0x42>
      break;
 8011dba:	bf00      	nop
    }
  }
  return retVal;
 8011dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3710      	adds	r7, #16
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
	...

08011dc8 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b088      	sub	sp, #32
 8011dcc:	af02      	add	r7, sp, #8
 8011dce:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8011dd0:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8011dd4:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8011dda:	2100      	movs	r1, #0
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f7ff feee 	bl	8011bbe <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8011de2:	f107 020c 	add.w	r2, r7, #12
 8011de6:	f107 0110 	add.w	r1, r7, #16
 8011dea:	2364      	movs	r3, #100	; 0x64
 8011dec:	9300      	str	r3, [sp, #0]
 8011dee:	2304      	movs	r3, #4
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7ff ff01 	bl	8011bf8 <SPIF_TransmitReceive>
 8011df6:	4603      	mov	r3, r0
 8011df8:	f083 0301 	eor.w	r3, r3, #1
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d004      	beq.n	8011e0c <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8011e02:	2101      	movs	r1, #1
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7ff feda 	bl	8011bbe <SPIF_CsPin>
      break;
 8011e0a:	e16f      	b.n	80120ec <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8011e0c:	2101      	movs	r1, #1
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f7ff fed5 	bl	8011bbe <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8011e14:	7b7a      	ldrb	r2, [r7, #13]
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8011e1a:	7bba      	ldrb	r2, [r7, #14]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8011e20:	7bfa      	ldrb	r2, [r7, #15]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	7a1b      	ldrb	r3, [r3, #8]
 8011e2a:	2bef      	cmp	r3, #239	; 0xef
 8011e2c:	f000 80f0 	beq.w	8012010 <SPIF_FindChip+0x248>
 8011e30:	2bef      	cmp	r3, #239	; 0xef
 8011e32:	f300 80e9 	bgt.w	8012008 <SPIF_FindChip+0x240>
 8011e36:	2bc8      	cmp	r3, #200	; 0xc8
 8011e38:	f300 80e6 	bgt.w	8012008 <SPIF_FindChip+0x240>
 8011e3c:	2b85      	cmp	r3, #133	; 0x85
 8011e3e:	da0c      	bge.n	8011e5a <SPIF_FindChip+0x92>
 8011e40:	2b62      	cmp	r3, #98	; 0x62
 8011e42:	f000 80e7 	beq.w	8012014 <SPIF_FindChip+0x24c>
 8011e46:	2b62      	cmp	r3, #98	; 0x62
 8011e48:	f300 80de 	bgt.w	8012008 <SPIF_FindChip+0x240>
 8011e4c:	2b20      	cmp	r3, #32
 8011e4e:	f300 80d9 	bgt.w	8012004 <SPIF_FindChip+0x23c>
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	f300 8090 	bgt.w	8011f78 <SPIF_FindChip+0x1b0>
 8011e58:	e0d6      	b.n	8012008 <SPIF_FindChip+0x240>
 8011e5a:	3b85      	subs	r3, #133	; 0x85
 8011e5c:	2b43      	cmp	r3, #67	; 0x43
 8011e5e:	f200 80d3 	bhi.w	8012008 <SPIF_FindChip+0x240>
 8011e62:	a201      	add	r2, pc, #4	; (adr r2, 8011e68 <SPIF_FindChip+0xa0>)
 8011e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e68:	08012019 	.word	0x08012019
 8011e6c:	08012009 	.word	0x08012009
 8011e70:	08012009 	.word	0x08012009
 8011e74:	08012009 	.word	0x08012009
 8011e78:	08012019 	.word	0x08012019
 8011e7c:	08012009 	.word	0x08012009
 8011e80:	08012009 	.word	0x08012009
 8011e84:	08012019 	.word	0x08012019
 8011e88:	08012009 	.word	0x08012009
 8011e8c:	08012009 	.word	0x08012009
 8011e90:	08012009 	.word	0x08012009
 8011e94:	08012009 	.word	0x08012009
 8011e98:	08012009 	.word	0x08012009
 8011e9c:	08012009 	.word	0x08012009
 8011ea0:	08012009 	.word	0x08012009
 8011ea4:	08012009 	.word	0x08012009
 8011ea8:	08012009 	.word	0x08012009
 8011eac:	08012009 	.word	0x08012009
 8011eb0:	08012009 	.word	0x08012009
 8011eb4:	08012009 	.word	0x08012009
 8011eb8:	08012009 	.word	0x08012009
 8011ebc:	08012009 	.word	0x08012009
 8011ec0:	08012009 	.word	0x08012009
 8011ec4:	08012009 	.word	0x08012009
 8011ec8:	08012019 	.word	0x08012019
 8011ecc:	08012009 	.word	0x08012009
 8011ed0:	08012009 	.word	0x08012009
 8011ed4:	08012009 	.word	0x08012009
 8011ed8:	08012019 	.word	0x08012019
 8011edc:	08012009 	.word	0x08012009
 8011ee0:	08012009 	.word	0x08012009
 8011ee4:	08012009 	.word	0x08012009
 8011ee8:	08012009 	.word	0x08012009
 8011eec:	08012009 	.word	0x08012009
 8011ef0:	08012009 	.word	0x08012009
 8011ef4:	08012009 	.word	0x08012009
 8011ef8:	08012009 	.word	0x08012009
 8011efc:	08012009 	.word	0x08012009
 8011f00:	08012009 	.word	0x08012009
 8011f04:	08012009 	.word	0x08012009
 8011f08:	08012019 	.word	0x08012019
 8011f0c:	08012009 	.word	0x08012009
 8011f10:	08012009 	.word	0x08012009
 8011f14:	08012009 	.word	0x08012009
 8011f18:	08012009 	.word	0x08012009
 8011f1c:	08012009 	.word	0x08012009
 8011f20:	08012009 	.word	0x08012009
 8011f24:	08012009 	.word	0x08012009
 8011f28:	08012009 	.word	0x08012009
 8011f2c:	08012009 	.word	0x08012009
 8011f30:	08012009 	.word	0x08012009
 8011f34:	08012009 	.word	0x08012009
 8011f38:	08012009 	.word	0x08012009
 8011f3c:	08012009 	.word	0x08012009
 8011f40:	08012009 	.word	0x08012009
 8011f44:	08012009 	.word	0x08012009
 8011f48:	08012009 	.word	0x08012009
 8011f4c:	08012009 	.word	0x08012009
 8011f50:	08012019 	.word	0x08012019
 8011f54:	08012009 	.word	0x08012009
 8011f58:	08012009 	.word	0x08012009
 8011f5c:	08012019 	.word	0x08012019
 8011f60:	08012009 	.word	0x08012009
 8011f64:	08012009 	.word	0x08012009
 8011f68:	08012009 	.word	0x08012009
 8011f6c:	08012009 	.word	0x08012009
 8011f70:	08012009 	.word	0x08012009
 8011f74:	08012019 	.word	0x08012019
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	2b1f      	cmp	r3, #31
 8011f7c:	d844      	bhi.n	8012008 <SPIF_FindChip+0x240>
 8011f7e:	a201      	add	r2, pc, #4	; (adr r2, 8011f84 <SPIF_FindChip+0x1bc>)
 8011f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f84:	0801201d 	.word	0x0801201d
 8011f88:	08012009 	.word	0x08012009
 8011f8c:	08012009 	.word	0x08012009
 8011f90:	0801201d 	.word	0x0801201d
 8011f94:	08012009 	.word	0x08012009
 8011f98:	08012009 	.word	0x08012009
 8011f9c:	08012009 	.word	0x08012009
 8011fa0:	08012009 	.word	0x08012009
 8011fa4:	08012009 	.word	0x08012009
 8011fa8:	08012009 	.word	0x08012009
 8011fac:	08012009 	.word	0x08012009
 8011fb0:	08012009 	.word	0x08012009
 8011fb4:	08012009 	.word	0x08012009
 8011fb8:	08012009 	.word	0x08012009
 8011fbc:	08012009 	.word	0x08012009
 8011fc0:	08012009 	.word	0x08012009
 8011fc4:	08012009 	.word	0x08012009
 8011fc8:	08012009 	.word	0x08012009
 8011fcc:	08012009 	.word	0x08012009
 8011fd0:	08012009 	.word	0x08012009
 8011fd4:	08012009 	.word	0x08012009
 8011fd8:	08012009 	.word	0x08012009
 8011fdc:	08012009 	.word	0x08012009
 8011fe0:	08012009 	.word	0x08012009
 8011fe4:	08012009 	.word	0x08012009
 8011fe8:	08012009 	.word	0x08012009
 8011fec:	08012009 	.word	0x08012009
 8011ff0:	0801201d 	.word	0x0801201d
 8011ff4:	08012009 	.word	0x08012009
 8011ff8:	08012009 	.word	0x08012009
 8011ffc:	08012009 	.word	0x08012009
 8012000:	0801201d 	.word	0x0801201d
 8012004:	2b37      	cmp	r3, #55	; 0x37
 8012006:	d00b      	beq.n	8012020 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2200      	movs	r2, #0
 801200c:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 801200e:	e008      	b.n	8012022 <SPIF_FindChip+0x25a>
      break;
 8012010:	bf00      	nop
 8012012:	e006      	b.n	8012022 <SPIF_FindChip+0x25a>
      break;
 8012014:	bf00      	nop
 8012016:	e004      	b.n	8012022 <SPIF_FindChip+0x25a>
      break;
 8012018:	bf00      	nop
 801201a:	e002      	b.n	8012022 <SPIF_FindChip+0x25a>
      break;
 801201c:	bf00      	nop
 801201e:	e000      	b.n	8012022 <SPIF_FindChip+0x25a>
      break;
 8012020:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	7a5b      	ldrb	r3, [r3, #9]
 8012026:	3b11      	subs	r3, #17
 8012028:	2b0f      	cmp	r3, #15
 801202a:	d84e      	bhi.n	80120ca <SPIF_FindChip+0x302>
 801202c:	a201      	add	r2, pc, #4	; (adr r2, 8012034 <SPIF_FindChip+0x26c>)
 801202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012032:	bf00      	nop
 8012034:	08012075 	.word	0x08012075
 8012038:	0801207d 	.word	0x0801207d
 801203c:	08012085 	.word	0x08012085
 8012040:	0801208d 	.word	0x0801208d
 8012044:	08012095 	.word	0x08012095
 8012048:	0801209d 	.word	0x0801209d
 801204c:	080120a5 	.word	0x080120a5
 8012050:	080120ad 	.word	0x080120ad
 8012054:	080120b7 	.word	0x080120b7
 8012058:	080120cb 	.word	0x080120cb
 801205c:	080120cb 	.word	0x080120cb
 8012060:	080120cb 	.word	0x080120cb
 8012064:	080120cb 	.word	0x080120cb
 8012068:	080120cb 	.word	0x080120cb
 801206c:	080120cb 	.word	0x080120cb
 8012070:	080120c1 	.word	0x080120c1
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2202      	movs	r2, #2
 8012078:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 801207a:	e02a      	b.n	80120d2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2204      	movs	r2, #4
 8012080:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 8012082:	e026      	b.n	80120d2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2208      	movs	r2, #8
 8012088:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 801208a:	e022      	b.n	80120d2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2210      	movs	r2, #16
 8012090:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 8012092:	e01e      	b.n	80120d2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2220      	movs	r2, #32
 8012098:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 801209a:	e01a      	b.n	80120d2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2240      	movs	r2, #64	; 0x40
 80120a0:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 80120a2:	e016      	b.n	80120d2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2280      	movs	r2, #128	; 0x80
 80120a8:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80120aa:	e012      	b.n	80120d2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80120b2:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 80120b4:	e00d      	b.n	80120d2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120bc:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 80120be:	e008      	b.n	80120d2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80120c6:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 80120c8:	e003      	b.n	80120d2 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2200      	movs	r2, #0
 80120ce:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 80120d0:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	69db      	ldr	r3, [r3, #28]
 80120d6:	011a      	lsls	r2, r3, #4
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	699b      	ldr	r3, [r3, #24]
 80120e0:	031b      	lsls	r3, r3, #12
 80120e2:	0a1a      	lsrs	r2, r3, #8
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 80120e8:	2301      	movs	r3, #1
 80120ea:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80120ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3718      	adds	r7, #24
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop

080120f8 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b08a      	sub	sp, #40	; 0x28
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	60f8      	str	r0, [r7, #12]
 8012100:	60b9      	str	r1, [r7, #8]
 8012102:	607a      	str	r2, [r7, #4]
 8012104:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8012106:	2300      	movs	r3, #0
 8012108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 801210c:	2300      	movs	r3, #0
 801210e:	623b      	str	r3, [r7, #32]
 8012110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012112:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8012116:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	695b      	ldr	r3, [r3, #20]
 801211c:	68ba      	ldr	r2, [r7, #8]
 801211e:	429a      	cmp	r2, r3
 8012120:	f080 8084 	bcs.w	801222c <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8012124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012126:	2bff      	cmp	r3, #255	; 0xff
 8012128:	f200 8082 	bhi.w	8012230 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 801212c:	683a      	ldr	r2, [r7, #0]
 801212e:	69fb      	ldr	r3, [r7, #28]
 8012130:	429a      	cmp	r2, r3
 8012132:	d901      	bls.n	8012138 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8012134:	69fb      	ldr	r3, [r7, #28]
 8012136:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	021b      	lsls	r3, r3, #8
 801213c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801213e:	4413      	add	r3, r2
 8012140:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8012142:	68f8      	ldr	r0, [r7, #12]
 8012144:	f7ff fdac 	bl	8011ca0 <SPIF_WriteEnable>
 8012148:	4603      	mov	r3, r0
 801214a:	f083 0301 	eor.w	r3, r3, #1
 801214e:	b2db      	uxtb	r3, r3
 8012150:	2b00      	cmp	r3, #0
 8012152:	d16f      	bne.n	8012234 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8012154:	2100      	movs	r1, #0
 8012156:	68f8      	ldr	r0, [r7, #12]
 8012158:	f7ff fd31 	bl	8011bbe <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	69db      	ldr	r3, [r3, #28]
 8012160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012164:	d322      	bcc.n	80121ac <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 8012166:	2312      	movs	r3, #18
 8012168:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 801216a:	6a3b      	ldr	r3, [r7, #32]
 801216c:	0e1b      	lsrs	r3, r3, #24
 801216e:	b2db      	uxtb	r3, r3
 8012170:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 8012172:	6a3b      	ldr	r3, [r7, #32]
 8012174:	0c1b      	lsrs	r3, r3, #16
 8012176:	b2db      	uxtb	r3, r3
 8012178:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 801217a:	6a3b      	ldr	r3, [r7, #32]
 801217c:	0a1b      	lsrs	r3, r3, #8
 801217e:	b2db      	uxtb	r3, r3
 8012180:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 8012182:	6a3b      	ldr	r3, [r7, #32]
 8012184:	b2db      	uxtb	r3, r3
 8012186:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8012188:	f107 0114 	add.w	r1, r7, #20
 801218c:	2364      	movs	r3, #100	; 0x64
 801218e:	2205      	movs	r2, #5
 8012190:	68f8      	ldr	r0, [r7, #12]
 8012192:	f7ff fd4f 	bl	8011c34 <SPIF_Transmit>
 8012196:	4603      	mov	r3, r0
 8012198:	f083 0301 	eor.w	r3, r3, #1
 801219c:	b2db      	uxtb	r3, r3
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d023      	beq.n	80121ea <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80121a2:	2101      	movs	r1, #1
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	f7ff fd0a 	bl	8011bbe <SPIF_CsPin>
        break;
 80121aa:	e044      	b.n	8012236 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 80121ac:	2302      	movs	r3, #2
 80121ae:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 80121b0:	6a3b      	ldr	r3, [r7, #32]
 80121b2:	0c1b      	lsrs	r3, r3, #16
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 80121b8:	6a3b      	ldr	r3, [r7, #32]
 80121ba:	0a1b      	lsrs	r3, r3, #8
 80121bc:	b2db      	uxtb	r3, r3
 80121be:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 80121c0:	6a3b      	ldr	r3, [r7, #32]
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80121c6:	f107 0114 	add.w	r1, r7, #20
 80121ca:	2364      	movs	r3, #100	; 0x64
 80121cc:	2204      	movs	r2, #4
 80121ce:	68f8      	ldr	r0, [r7, #12]
 80121d0:	f7ff fd30 	bl	8011c34 <SPIF_Transmit>
 80121d4:	4603      	mov	r3, r0
 80121d6:	f083 0301 	eor.w	r3, r3, #1
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d004      	beq.n	80121ea <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80121e0:	2101      	movs	r1, #1
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f7ff fceb 	bl	8011bbe <SPIF_CsPin>
        break;
 80121e8:	e025      	b.n	8012236 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 80121ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80121ee:	683a      	ldr	r2, [r7, #0]
 80121f0:	6879      	ldr	r1, [r7, #4]
 80121f2:	68f8      	ldr	r0, [r7, #12]
 80121f4:	f7ff fd1e 	bl	8011c34 <SPIF_Transmit>
 80121f8:	4603      	mov	r3, r0
 80121fa:	f083 0301 	eor.w	r3, r3, #1
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	2b00      	cmp	r3, #0
 8012202:	d004      	beq.n	801220e <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8012204:	2101      	movs	r1, #1
 8012206:	68f8      	ldr	r0, [r7, #12]
 8012208:	f7ff fcd9 	bl	8011bbe <SPIF_CsPin>
      break;
 801220c:	e013      	b.n	8012236 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 801220e:	2101      	movs	r1, #1
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f7ff fcd4 	bl	8011bbe <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8012216:	2164      	movs	r1, #100	; 0x64
 8012218:	68f8      	ldr	r0, [r7, #12]
 801221a:	f7ff fdae 	bl	8011d7a <SPIF_WaitForWriting>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d008      	beq.n	8012236 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8012224:	2301      	movs	r3, #1
 8012226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801222a:	e004      	b.n	8012236 <SPIF_WriteFn+0x13e>
      break;
 801222c:	bf00      	nop
 801222e:	e002      	b.n	8012236 <SPIF_WriteFn+0x13e>
      break;
 8012230:	bf00      	nop
 8012232:	e000      	b.n	8012236 <SPIF_WriteFn+0x13e>
      break;
 8012234:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f7ff fd56 	bl	8011ce8 <SPIF_WriteDisable>
  return retVal;
 801223c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012240:	4618      	mov	r0, r3
 8012242:	3728      	adds	r7, #40	; 0x28
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b086      	sub	sp, #24
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	607a      	str	r2, [r7, #4]
 8012254:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8012256:	2300      	movs	r3, #0
 8012258:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 801225a:	2100      	movs	r1, #0
 801225c:	68f8      	ldr	r0, [r7, #12]
 801225e:	f7ff fcae 	bl	8011bbe <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	69db      	ldr	r3, [r3, #28]
 8012266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801226a:	d322      	bcc.n	80122b2 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 801226c:	2313      	movs	r3, #19
 801226e:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	0e1b      	lsrs	r3, r3, #24
 8012274:	b2db      	uxtb	r3, r3
 8012276:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	0c1b      	lsrs	r3, r3, #16
 801227c:	b2db      	uxtb	r3, r3
 801227e:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	0a1b      	lsrs	r3, r3, #8
 8012284:	b2db      	uxtb	r3, r3
 8012286:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	b2db      	uxtb	r3, r3
 801228c:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 801228e:	f107 0110 	add.w	r1, r7, #16
 8012292:	2364      	movs	r3, #100	; 0x64
 8012294:	2205      	movs	r2, #5
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f7ff fccc 	bl	8011c34 <SPIF_Transmit>
 801229c:	4603      	mov	r3, r0
 801229e:	f083 0301 	eor.w	r3, r3, #1
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d023      	beq.n	80122f0 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80122a8:	2101      	movs	r1, #1
 80122aa:	68f8      	ldr	r0, [r7, #12]
 80122ac:	f7ff fc87 	bl	8011bbe <SPIF_CsPin>
        break;
 80122b0:	e036      	b.n	8012320 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 80122b2:	2303      	movs	r3, #3
 80122b4:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	0c1b      	lsrs	r3, r3, #16
 80122ba:	b2db      	uxtb	r3, r3
 80122bc:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	0a1b      	lsrs	r3, r3, #8
 80122c2:	b2db      	uxtb	r3, r3
 80122c4:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80122cc:	f107 0110 	add.w	r1, r7, #16
 80122d0:	2364      	movs	r3, #100	; 0x64
 80122d2:	2204      	movs	r2, #4
 80122d4:	68f8      	ldr	r0, [r7, #12]
 80122d6:	f7ff fcad 	bl	8011c34 <SPIF_Transmit>
 80122da:	4603      	mov	r3, r0
 80122dc:	f083 0301 	eor.w	r3, r3, #1
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d004      	beq.n	80122f0 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 80122e6:	2101      	movs	r1, #1
 80122e8:	68f8      	ldr	r0, [r7, #12]
 80122ea:	f7ff fc68 	bl	8011bbe <SPIF_CsPin>
        break;
 80122ee:	e017      	b.n	8012320 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 80122f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80122f4:	683a      	ldr	r2, [r7, #0]
 80122f6:	6879      	ldr	r1, [r7, #4]
 80122f8:	68f8      	ldr	r0, [r7, #12]
 80122fa:	f7ff fcb6 	bl	8011c6a <SPIF_Receive>
 80122fe:	4603      	mov	r3, r0
 8012300:	f083 0301 	eor.w	r3, r3, #1
 8012304:	b2db      	uxtb	r3, r3
 8012306:	2b00      	cmp	r3, #0
 8012308:	d004      	beq.n	8012314 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 801230a:	2101      	movs	r1, #1
 801230c:	68f8      	ldr	r0, [r7, #12]
 801230e:	f7ff fc56 	bl	8011bbe <SPIF_CsPin>
      break;
 8012312:	e005      	b.n	8012320 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8012314:	2101      	movs	r1, #1
 8012316:	68f8      	ldr	r0, [r7, #12]
 8012318:	f7ff fc51 	bl	8011bbe <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 801231c:	2301      	movs	r3, #1
 801231e:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8012320:	7dfb      	ldrb	r3, [r7, #23]
}
 8012322:	4618      	mov	r0, r3
 8012324:	3718      	adds	r7, #24
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}

0801232a <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 801232a:	b580      	push	{r7, lr}
 801232c:	b086      	sub	sp, #24
 801232e:	af00      	add	r7, sp, #0
 8012330:	60f8      	str	r0, [r7, #12]
 8012332:	60b9      	str	r1, [r7, #8]
 8012334:	607a      	str	r2, [r7, #4]
 8012336:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8012338:	2300      	movs	r3, #0
 801233a:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d03a      	beq.n	80123b8 <SPIF_Init+0x8e>
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d037      	beq.n	80123b8 <SPIF_Init+0x8e>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d034      	beq.n	80123b8 <SPIF_Init+0x8e>
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	7a9b      	ldrb	r3, [r3, #10]
 8012352:	2b01      	cmp	r3, #1
 8012354:	d030      	beq.n	80123b8 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8012356:	2220      	movs	r2, #32
 8012358:	2100      	movs	r1, #0
 801235a:	68f8      	ldr	r0, [r7, #12]
 801235c:	f002 fe75 	bl	801504a <memset>
    Handle->HSpi = HSpi;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	68ba      	ldr	r2, [r7, #8]
 8012364:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	687a      	ldr	r2, [r7, #4]
 801236a:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 801236c:	887a      	ldrh	r2, [r7, #2]
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8012372:	2101      	movs	r1, #1
 8012374:	68f8      	ldr	r0, [r7, #12]
 8012376:	f7ff fc22 	bl	8011bbe <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 801237a:	e002      	b.n	8012382 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 801237c:	2001      	movs	r0, #1
 801237e:	f7ff fbf3 	bl	8011b68 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8012382:	f7f3 f807 	bl	8005394 <HAL_GetTick>
 8012386:	4603      	mov	r3, r0
 8012388:	2b13      	cmp	r3, #19
 801238a:	d9f7      	bls.n	801237c <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 801238c:	68f8      	ldr	r0, [r7, #12]
 801238e:	f7ff fcab 	bl	8011ce8 <SPIF_WriteDisable>
 8012392:	4603      	mov	r3, r0
 8012394:	f083 0301 	eor.w	r3, r3, #1
 8012398:	b2db      	uxtb	r3, r3
 801239a:	2b00      	cmp	r3, #0
 801239c:	d10b      	bne.n	80123b6 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 801239e:	68f8      	ldr	r0, [r7, #12]
 80123a0:	f7ff fd12 	bl	8011dc8 <SPIF_FindChip>
 80123a4:	4603      	mov	r3, r0
 80123a6:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 80123a8:	7dfb      	ldrb	r3, [r7, #23]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d004      	beq.n	80123b8 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	2201      	movs	r2, #1
 80123b2:	729a      	strb	r2, [r3, #10]
 80123b4:	e000      	b.n	80123b8 <SPIF_Init+0x8e>
      break;
 80123b6:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 80123b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3718      	adds	r7, #24
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <SPIF_EraseChip>:
  * @param  *Handle: Pointer to SPIF_HandleTypeDef structure
  *
  * @retval bool: true or false
  */
bool SPIF_EraseChip(SPIF_HandleTypeDef *Handle)
{
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b084      	sub	sp, #16
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
  SPIF_Lock(Handle);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f7ff fbd7 	bl	8011b7e <SPIF_Lock>
  bool retVal = false;
 80123d0:	2300      	movs	r3, #0
 80123d2:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_CHIPERASE1};
 80123d4:	2360      	movs	r3, #96	; 0x60
 80123d6:	733b      	strb	r3, [r7, #12]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseChip() START\r\n");
    if (SPIF_WriteEnable(Handle) == false)
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f7ff fc61 	bl	8011ca0 <SPIF_WriteEnable>
 80123de:	4603      	mov	r3, r0
 80123e0:	f083 0301 	eor.w	r3, r3, #1
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d129      	bne.n	801243e <SPIF_EraseChip+0x7c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80123ea:	2100      	movs	r1, #0
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f7ff fbe6 	bl	8011bbe <SPIF_CsPin>
    if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80123f2:	f107 010c 	add.w	r1, r7, #12
 80123f6:	2364      	movs	r3, #100	; 0x64
 80123f8:	2201      	movs	r2, #1
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7ff fc1a 	bl	8011c34 <SPIF_Transmit>
 8012400:	4603      	mov	r3, r0
 8012402:	f083 0301 	eor.w	r3, r3, #1
 8012406:	b2db      	uxtb	r3, r3
 8012408:	2b00      	cmp	r3, #0
 801240a:	d004      	beq.n	8012416 <SPIF_EraseChip+0x54>
    {
      SPIF_CsPin(Handle, 1);
 801240c:	2101      	movs	r1, #1
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7ff fbd5 	bl	8011bbe <SPIF_CsPin>
      break;
 8012414:	e014      	b.n	8012440 <SPIF_EraseChip+0x7e>
    }
    SPIF_CsPin(Handle, 1);
 8012416:	2101      	movs	r1, #1
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f7ff fbd0 	bl	8011bbe <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, Handle->BlockCnt * 1000))
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	69db      	ldr	r3, [r3, #28]
 8012422:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012426:	fb02 f303 	mul.w	r3, r2, r3
 801242a:	4619      	mov	r1, r3
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f7ff fca4 	bl	8011d7a <SPIF_WaitForWriting>
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d003      	beq.n	8012440 <SPIF_EraseChip+0x7e>
    {
      dprintf("SPIF_EraseChip() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8012438:	2301      	movs	r3, #1
 801243a:	73fb      	strb	r3, [r7, #15]
 801243c:	e000      	b.n	8012440 <SPIF_EraseChip+0x7e>
      break;
 801243e:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f7ff fc51 	bl	8011ce8 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f7ff fbac 	bl	8011ba4 <SPIF_UnLock>
  return retVal;
 801244c:	7bfb      	ldrb	r3, [r7, #15]
}
 801244e:	4618      	mov	r0, r3
 8012450:	3710      	adds	r7, #16
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8012456:	b580      	push	{r7, lr}
 8012458:	b086      	sub	sp, #24
 801245a:	af00      	add	r7, sp, #0
 801245c:	6078      	str	r0, [r7, #4]
 801245e:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f7ff fb8c 	bl	8011b7e <SPIF_Lock>
  bool retVal = false;
 8012466:	2300      	movs	r3, #0
 8012468:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	031b      	lsls	r3, r3, #12
 801246e:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	699b      	ldr	r3, [r3, #24]
 8012474:	683a      	ldr	r2, [r7, #0]
 8012476:	429a      	cmp	r2, r3
 8012478:	d262      	bcs.n	8012540 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f7ff fc10 	bl	8011ca0 <SPIF_WriteEnable>
 8012480:	4603      	mov	r3, r0
 8012482:	f083 0301 	eor.w	r3, r3, #1
 8012486:	b2db      	uxtb	r3, r3
 8012488:	2b00      	cmp	r3, #0
 801248a:	d15b      	bne.n	8012544 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 801248c:	2100      	movs	r1, #0
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f7ff fb95 	bl	8011bbe <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	69db      	ldr	r3, [r3, #28]
 8012498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801249c:	d322      	bcc.n	80124e4 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 801249e:	2321      	movs	r3, #33	; 0x21
 80124a0:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	0e1b      	lsrs	r3, r3, #24
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	0c1b      	lsrs	r3, r3, #16
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	0a1b      	lsrs	r3, r3, #8
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80124c0:	f107 0108 	add.w	r1, r7, #8
 80124c4:	2364      	movs	r3, #100	; 0x64
 80124c6:	2205      	movs	r2, #5
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f7ff fbb3 	bl	8011c34 <SPIF_Transmit>
 80124ce:	4603      	mov	r3, r0
 80124d0:	f083 0301 	eor.w	r3, r3, #1
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d023      	beq.n	8012522 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80124da:	2101      	movs	r1, #1
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f7ff fb6e 	bl	8011bbe <SPIF_CsPin>
        break;
 80124e2:	e030      	b.n	8012546 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 80124e4:	2320      	movs	r3, #32
 80124e6:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	0c1b      	lsrs	r3, r3, #16
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	0a1b      	lsrs	r3, r3, #8
 80124f4:	b2db      	uxtb	r3, r3
 80124f6:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	b2db      	uxtb	r3, r3
 80124fc:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80124fe:	f107 0108 	add.w	r1, r7, #8
 8012502:	2364      	movs	r3, #100	; 0x64
 8012504:	2204      	movs	r2, #4
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7ff fb94 	bl	8011c34 <SPIF_Transmit>
 801250c:	4603      	mov	r3, r0
 801250e:	f083 0301 	eor.w	r3, r3, #1
 8012512:	b2db      	uxtb	r3, r3
 8012514:	2b00      	cmp	r3, #0
 8012516:	d004      	beq.n	8012522 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8012518:	2101      	movs	r1, #1
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7ff fb4f 	bl	8011bbe <SPIF_CsPin>
        break;
 8012520:	e011      	b.n	8012546 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8012522:	2101      	movs	r1, #1
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7ff fb4a 	bl	8011bbe <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 801252a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f7ff fc23 	bl	8011d7a <SPIF_WaitForWriting>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d005      	beq.n	8012546 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 801253a:	2301      	movs	r3, #1
 801253c:	75fb      	strb	r3, [r7, #23]
 801253e:	e002      	b.n	8012546 <SPIF_EraseSector+0xf0>
      break;
 8012540:	bf00      	nop
 8012542:	e000      	b.n	8012546 <SPIF_EraseSector+0xf0>
      break;
 8012544:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f7ff fbce 	bl	8011ce8 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f7ff fb29 	bl	8011ba4 <SPIF_UnLock>
  return retVal;
 8012552:	7dfb      	ldrb	r3, [r7, #23]
}
 8012554:	4618      	mov	r0, r3
 8012556:	3718      	adds	r7, #24
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b088      	sub	sp, #32
 8012560:	af02      	add	r7, sp, #8
 8012562:	60f8      	str	r0, [r7, #12]
 8012564:	60b9      	str	r1, [r7, #8]
 8012566:	607a      	str	r2, [r7, #4]
 8012568:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 801256a:	68f8      	ldr	r0, [r7, #12]
 801256c:	f7ff fb07 	bl	8011b7e <SPIF_Lock>
  bool retVal = false;
 8012570:	2300      	movs	r3, #0
 8012572:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8012574:	6a3b      	ldr	r3, [r7, #32]
 8012576:	9300      	str	r3, [sp, #0]
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	687a      	ldr	r2, [r7, #4]
 801257c:	68b9      	ldr	r1, [r7, #8]
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	f7ff fdba 	bl	80120f8 <SPIF_WriteFn>
 8012584:	4603      	mov	r3, r0
 8012586:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8012588:	68f8      	ldr	r0, [r7, #12]
 801258a:	f7ff fb0b 	bl	8011ba4 <SPIF_UnLock>
  return retVal;
 801258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3718      	adds	r7, #24
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b088      	sub	sp, #32
 801259c:	af00      	add	r7, sp, #0
 801259e:	60f8      	str	r0, [r7, #12]
 80125a0:	60b9      	str	r1, [r7, #8]
 80125a2:	607a      	str	r2, [r7, #4]
 80125a4:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80125a6:	68f8      	ldr	r0, [r7, #12]
 80125a8:	f7ff fae9 	bl	8011b7e <SPIF_Lock>
  bool retVal = false;
 80125ac:	2300      	movs	r3, #0
 80125ae:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	021b      	lsls	r3, r3, #8
 80125b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125b6:	4413      	add	r3, r2
 80125b8:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 80125ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125bc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80125c0:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 80125c2:	683a      	ldr	r2, [r7, #0]
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d901      	bls.n	80125ce <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	69b9      	ldr	r1, [r7, #24]
 80125d4:	68f8      	ldr	r0, [r7, #12]
 80125d6:	f7ff fe37 	bl	8012248 <SPIF_ReadFn>
 80125da:	4603      	mov	r3, r0
 80125dc:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 80125de:	68f8      	ldr	r0, [r7, #12]
 80125e0:	f7ff fae0 	bl	8011ba4 <SPIF_UnLock>
  return retVal;
 80125e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3720      	adds	r7, #32
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
	...

080125f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80125f4:	2200      	movs	r2, #0
 80125f6:	4912      	ldr	r1, [pc, #72]	; (8012640 <MX_USB_DEVICE_Init+0x50>)
 80125f8:	4812      	ldr	r0, [pc, #72]	; (8012644 <MX_USB_DEVICE_Init+0x54>)
 80125fa:	f7fe f825 	bl	8010648 <USBD_Init>
 80125fe:	4603      	mov	r3, r0
 8012600:	2b00      	cmp	r3, #0
 8012602:	d001      	beq.n	8012608 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012604:	f7ef f9f5 	bl	80019f2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012608:	490f      	ldr	r1, [pc, #60]	; (8012648 <MX_USB_DEVICE_Init+0x58>)
 801260a:	480e      	ldr	r0, [pc, #56]	; (8012644 <MX_USB_DEVICE_Init+0x54>)
 801260c:	f7fe f84c 	bl	80106a8 <USBD_RegisterClass>
 8012610:	4603      	mov	r3, r0
 8012612:	2b00      	cmp	r3, #0
 8012614:	d001      	beq.n	801261a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012616:	f7ef f9ec 	bl	80019f2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801261a:	490c      	ldr	r1, [pc, #48]	; (801264c <MX_USB_DEVICE_Init+0x5c>)
 801261c:	4809      	ldr	r0, [pc, #36]	; (8012644 <MX_USB_DEVICE_Init+0x54>)
 801261e:	f7fd ff43 	bl	80104a8 <USBD_CDC_RegisterInterface>
 8012622:	4603      	mov	r3, r0
 8012624:	2b00      	cmp	r3, #0
 8012626:	d001      	beq.n	801262c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012628:	f7ef f9e3 	bl	80019f2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801262c:	4805      	ldr	r0, [pc, #20]	; (8012644 <MX_USB_DEVICE_Init+0x54>)
 801262e:	f7fe f871 	bl	8010714 <USBD_Start>
 8012632:	4603      	mov	r3, r0
 8012634:	2b00      	cmp	r3, #0
 8012636:	d001      	beq.n	801263c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012638:	f7ef f9db 	bl	80019f2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801263c:	bf00      	nop
 801263e:	bd80      	pop	{r7, pc}
 8012640:	200000cc 	.word	0x200000cc
 8012644:	20001054 	.word	0x20001054
 8012648:	20000038 	.word	0x20000038
 801264c:	200000b8 	.word	0x200000b8

08012650 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012654:	2200      	movs	r2, #0
 8012656:	4905      	ldr	r1, [pc, #20]	; (801266c <CDC_Init_FS+0x1c>)
 8012658:	4805      	ldr	r0, [pc, #20]	; (8012670 <CDC_Init_FS+0x20>)
 801265a:	f7fd ff3f 	bl	80104dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801265e:	4905      	ldr	r1, [pc, #20]	; (8012674 <CDC_Init_FS+0x24>)
 8012660:	4803      	ldr	r0, [pc, #12]	; (8012670 <CDC_Init_FS+0x20>)
 8012662:	f7fd ff5d 	bl	8010520 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012666:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012668:	4618      	mov	r0, r3
 801266a:	bd80      	pop	{r7, pc}
 801266c:	20001730 	.word	0x20001730
 8012670:	20001054 	.word	0x20001054
 8012674:	20001330 	.word	0x20001330

08012678 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012678:	b480      	push	{r7}
 801267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801267c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801267e:	4618      	mov	r0, r3
 8012680:	46bd      	mov	sp, r7
 8012682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012686:	4770      	bx	lr

08012688 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	4603      	mov	r3, r0
 8012690:	6039      	str	r1, [r7, #0]
 8012692:	71fb      	strb	r3, [r7, #7]
 8012694:	4613      	mov	r3, r2
 8012696:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012698:	79fb      	ldrb	r3, [r7, #7]
 801269a:	2b23      	cmp	r3, #35	; 0x23
 801269c:	d84a      	bhi.n	8012734 <CDC_Control_FS+0xac>
 801269e:	a201      	add	r2, pc, #4	; (adr r2, 80126a4 <CDC_Control_FS+0x1c>)
 80126a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126a4:	08012735 	.word	0x08012735
 80126a8:	08012735 	.word	0x08012735
 80126ac:	08012735 	.word	0x08012735
 80126b0:	08012735 	.word	0x08012735
 80126b4:	08012735 	.word	0x08012735
 80126b8:	08012735 	.word	0x08012735
 80126bc:	08012735 	.word	0x08012735
 80126c0:	08012735 	.word	0x08012735
 80126c4:	08012735 	.word	0x08012735
 80126c8:	08012735 	.word	0x08012735
 80126cc:	08012735 	.word	0x08012735
 80126d0:	08012735 	.word	0x08012735
 80126d4:	08012735 	.word	0x08012735
 80126d8:	08012735 	.word	0x08012735
 80126dc:	08012735 	.word	0x08012735
 80126e0:	08012735 	.word	0x08012735
 80126e4:	08012735 	.word	0x08012735
 80126e8:	08012735 	.word	0x08012735
 80126ec:	08012735 	.word	0x08012735
 80126f0:	08012735 	.word	0x08012735
 80126f4:	08012735 	.word	0x08012735
 80126f8:	08012735 	.word	0x08012735
 80126fc:	08012735 	.word	0x08012735
 8012700:	08012735 	.word	0x08012735
 8012704:	08012735 	.word	0x08012735
 8012708:	08012735 	.word	0x08012735
 801270c:	08012735 	.word	0x08012735
 8012710:	08012735 	.word	0x08012735
 8012714:	08012735 	.word	0x08012735
 8012718:	08012735 	.word	0x08012735
 801271c:	08012735 	.word	0x08012735
 8012720:	08012735 	.word	0x08012735
 8012724:	08012735 	.word	0x08012735
 8012728:	08012735 	.word	0x08012735
 801272c:	08012735 	.word	0x08012735
 8012730:	08012735 	.word	0x08012735
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012734:	bf00      	nop
  }

  return (USBD_OK);
 8012736:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012738:	4618      	mov	r0, r3
 801273a:	370c      	adds	r7, #12
 801273c:	46bd      	mov	sp, r7
 801273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012742:	4770      	bx	lr

08012744 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801274e:	6879      	ldr	r1, [r7, #4]
 8012750:	4805      	ldr	r0, [pc, #20]	; (8012768 <CDC_Receive_FS+0x24>)
 8012752:	f7fd fee5 	bl	8010520 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012756:	4804      	ldr	r0, [pc, #16]	; (8012768 <CDC_Receive_FS+0x24>)
 8012758:	f7fd ff40 	bl	80105dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801275c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801275e:	4618      	mov	r0, r3
 8012760:	3708      	adds	r7, #8
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}
 8012766:	bf00      	nop
 8012768:	20001054 	.word	0x20001054

0801276c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b084      	sub	sp, #16
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	460b      	mov	r3, r1
 8012776:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012778:	2300      	movs	r3, #0
 801277a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801277c:	4b0d      	ldr	r3, [pc, #52]	; (80127b4 <CDC_Transmit_FS+0x48>)
 801277e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012782:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801278a:	2b00      	cmp	r3, #0
 801278c:	d001      	beq.n	8012792 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801278e:	2301      	movs	r3, #1
 8012790:	e00b      	b.n	80127aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012792:	887b      	ldrh	r3, [r7, #2]
 8012794:	461a      	mov	r2, r3
 8012796:	6879      	ldr	r1, [r7, #4]
 8012798:	4806      	ldr	r0, [pc, #24]	; (80127b4 <CDC_Transmit_FS+0x48>)
 801279a:	f7fd fe9f 	bl	80104dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801279e:	4805      	ldr	r0, [pc, #20]	; (80127b4 <CDC_Transmit_FS+0x48>)
 80127a0:	f7fd fedc 	bl	801055c <USBD_CDC_TransmitPacket>
 80127a4:	4603      	mov	r3, r0
 80127a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80127a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3710      	adds	r7, #16
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}
 80127b2:	bf00      	nop
 80127b4:	20001054 	.word	0x20001054

080127b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80127b8:	b480      	push	{r7}
 80127ba:	b087      	sub	sp, #28
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60f8      	str	r0, [r7, #12]
 80127c0:	60b9      	str	r1, [r7, #8]
 80127c2:	4613      	mov	r3, r2
 80127c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80127c6:	2300      	movs	r3, #0
 80127c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80127ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	371c      	adds	r7, #28
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr
	...

080127dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80127dc:	b480      	push	{r7}
 80127de:	b083      	sub	sp, #12
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	4603      	mov	r3, r0
 80127e4:	6039      	str	r1, [r7, #0]
 80127e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	2212      	movs	r2, #18
 80127ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80127ee:	4b03      	ldr	r3, [pc, #12]	; (80127fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr
 80127fc:	200000ec 	.word	0x200000ec

08012800 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	4603      	mov	r3, r0
 8012808:	6039      	str	r1, [r7, #0]
 801280a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	2204      	movs	r2, #4
 8012810:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012812:	4b03      	ldr	r3, [pc, #12]	; (8012820 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012814:	4618      	mov	r0, r3
 8012816:	370c      	adds	r7, #12
 8012818:	46bd      	mov	sp, r7
 801281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281e:	4770      	bx	lr
 8012820:	2000010c 	.word	0x2000010c

08012824 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	4603      	mov	r3, r0
 801282c:	6039      	str	r1, [r7, #0]
 801282e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012830:	79fb      	ldrb	r3, [r7, #7]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d105      	bne.n	8012842 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012836:	683a      	ldr	r2, [r7, #0]
 8012838:	4907      	ldr	r1, [pc, #28]	; (8012858 <USBD_FS_ProductStrDescriptor+0x34>)
 801283a:	4808      	ldr	r0, [pc, #32]	; (801285c <USBD_FS_ProductStrDescriptor+0x38>)
 801283c:	f7ff f8b4 	bl	80119a8 <USBD_GetString>
 8012840:	e004      	b.n	801284c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012842:	683a      	ldr	r2, [r7, #0]
 8012844:	4904      	ldr	r1, [pc, #16]	; (8012858 <USBD_FS_ProductStrDescriptor+0x34>)
 8012846:	4805      	ldr	r0, [pc, #20]	; (801285c <USBD_FS_ProductStrDescriptor+0x38>)
 8012848:	f7ff f8ae 	bl	80119a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801284c:	4b02      	ldr	r3, [pc, #8]	; (8012858 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801284e:	4618      	mov	r0, r3
 8012850:	3708      	adds	r7, #8
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
 8012856:	bf00      	nop
 8012858:	20001b30 	.word	0x20001b30
 801285c:	08019110 	.word	0x08019110

08012860 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	4603      	mov	r3, r0
 8012868:	6039      	str	r1, [r7, #0]
 801286a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801286c:	683a      	ldr	r2, [r7, #0]
 801286e:	4904      	ldr	r1, [pc, #16]	; (8012880 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012870:	4804      	ldr	r0, [pc, #16]	; (8012884 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012872:	f7ff f899 	bl	80119a8 <USBD_GetString>
  return USBD_StrDesc;
 8012876:	4b02      	ldr	r3, [pc, #8]	; (8012880 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012878:	4618      	mov	r0, r3
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	20001b30 	.word	0x20001b30
 8012884:	0801911c 	.word	0x0801911c

08012888 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	4603      	mov	r3, r0
 8012890:	6039      	str	r1, [r7, #0]
 8012892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	221a      	movs	r2, #26
 8012898:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801289a:	f000 f855 	bl	8012948 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801289e:	4b02      	ldr	r3, [pc, #8]	; (80128a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3708      	adds	r7, #8
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	20000110 	.word	0x20000110

080128ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b082      	sub	sp, #8
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	4603      	mov	r3, r0
 80128b4:	6039      	str	r1, [r7, #0]
 80128b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80128b8:	79fb      	ldrb	r3, [r7, #7]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d105      	bne.n	80128ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80128be:	683a      	ldr	r2, [r7, #0]
 80128c0:	4907      	ldr	r1, [pc, #28]	; (80128e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80128c2:	4808      	ldr	r0, [pc, #32]	; (80128e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80128c4:	f7ff f870 	bl	80119a8 <USBD_GetString>
 80128c8:	e004      	b.n	80128d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80128ca:	683a      	ldr	r2, [r7, #0]
 80128cc:	4904      	ldr	r1, [pc, #16]	; (80128e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80128ce:	4805      	ldr	r0, [pc, #20]	; (80128e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80128d0:	f7ff f86a 	bl	80119a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80128d4:	4b02      	ldr	r3, [pc, #8]	; (80128e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3708      	adds	r7, #8
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	20001b30 	.word	0x20001b30
 80128e4:	08019130 	.word	0x08019130

080128e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	4603      	mov	r3, r0
 80128f0:	6039      	str	r1, [r7, #0]
 80128f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80128f4:	79fb      	ldrb	r3, [r7, #7]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d105      	bne.n	8012906 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80128fa:	683a      	ldr	r2, [r7, #0]
 80128fc:	4907      	ldr	r1, [pc, #28]	; (801291c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80128fe:	4808      	ldr	r0, [pc, #32]	; (8012920 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012900:	f7ff f852 	bl	80119a8 <USBD_GetString>
 8012904:	e004      	b.n	8012910 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012906:	683a      	ldr	r2, [r7, #0]
 8012908:	4904      	ldr	r1, [pc, #16]	; (801291c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801290a:	4805      	ldr	r0, [pc, #20]	; (8012920 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801290c:	f7ff f84c 	bl	80119a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012910:	4b02      	ldr	r3, [pc, #8]	; (801291c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012912:	4618      	mov	r0, r3
 8012914:	3708      	adds	r7, #8
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	20001b30 	.word	0x20001b30
 8012920:	0801913c 	.word	0x0801913c

08012924 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	4603      	mov	r3, r0
 801292c:	6039      	str	r1, [r7, #0]
 801292e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	220c      	movs	r2, #12
 8012934:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012936:	4b03      	ldr	r3, [pc, #12]	; (8012944 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012938:	4618      	mov	r0, r3
 801293a:	370c      	adds	r7, #12
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr
 8012944:	20000100 	.word	0x20000100

08012948 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b084      	sub	sp, #16
 801294c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801294e:	4b0f      	ldr	r3, [pc, #60]	; (801298c <Get_SerialNum+0x44>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012954:	4b0e      	ldr	r3, [pc, #56]	; (8012990 <Get_SerialNum+0x48>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801295a:	4b0e      	ldr	r3, [pc, #56]	; (8012994 <Get_SerialNum+0x4c>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012960:	68fa      	ldr	r2, [r7, #12]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	4413      	add	r3, r2
 8012966:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d009      	beq.n	8012982 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801296e:	2208      	movs	r2, #8
 8012970:	4909      	ldr	r1, [pc, #36]	; (8012998 <Get_SerialNum+0x50>)
 8012972:	68f8      	ldr	r0, [r7, #12]
 8012974:	f000 f814 	bl	80129a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012978:	2204      	movs	r2, #4
 801297a:	4908      	ldr	r1, [pc, #32]	; (801299c <Get_SerialNum+0x54>)
 801297c:	68b8      	ldr	r0, [r7, #8]
 801297e:	f000 f80f 	bl	80129a0 <IntToUnicode>
  }
}
 8012982:	bf00      	nop
 8012984:	3710      	adds	r7, #16
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
 801298a:	bf00      	nop
 801298c:	1fff7590 	.word	0x1fff7590
 8012990:	1fff7594 	.word	0x1fff7594
 8012994:	1fff7598 	.word	0x1fff7598
 8012998:	20000112 	.word	0x20000112
 801299c:	20000122 	.word	0x20000122

080129a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80129a0:	b480      	push	{r7}
 80129a2:	b087      	sub	sp, #28
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60f8      	str	r0, [r7, #12]
 80129a8:	60b9      	str	r1, [r7, #8]
 80129aa:	4613      	mov	r3, r2
 80129ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80129ae:	2300      	movs	r3, #0
 80129b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80129b2:	2300      	movs	r3, #0
 80129b4:	75fb      	strb	r3, [r7, #23]
 80129b6:	e027      	b.n	8012a08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	0f1b      	lsrs	r3, r3, #28
 80129bc:	2b09      	cmp	r3, #9
 80129be:	d80b      	bhi.n	80129d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	0f1b      	lsrs	r3, r3, #28
 80129c4:	b2da      	uxtb	r2, r3
 80129c6:	7dfb      	ldrb	r3, [r7, #23]
 80129c8:	005b      	lsls	r3, r3, #1
 80129ca:	4619      	mov	r1, r3
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	440b      	add	r3, r1
 80129d0:	3230      	adds	r2, #48	; 0x30
 80129d2:	b2d2      	uxtb	r2, r2
 80129d4:	701a      	strb	r2, [r3, #0]
 80129d6:	e00a      	b.n	80129ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	0f1b      	lsrs	r3, r3, #28
 80129dc:	b2da      	uxtb	r2, r3
 80129de:	7dfb      	ldrb	r3, [r7, #23]
 80129e0:	005b      	lsls	r3, r3, #1
 80129e2:	4619      	mov	r1, r3
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	440b      	add	r3, r1
 80129e8:	3237      	adds	r2, #55	; 0x37
 80129ea:	b2d2      	uxtb	r2, r2
 80129ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	011b      	lsls	r3, r3, #4
 80129f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80129f4:	7dfb      	ldrb	r3, [r7, #23]
 80129f6:	005b      	lsls	r3, r3, #1
 80129f8:	3301      	adds	r3, #1
 80129fa:	68ba      	ldr	r2, [r7, #8]
 80129fc:	4413      	add	r3, r2
 80129fe:	2200      	movs	r2, #0
 8012a00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012a02:	7dfb      	ldrb	r3, [r7, #23]
 8012a04:	3301      	adds	r3, #1
 8012a06:	75fb      	strb	r3, [r7, #23]
 8012a08:	7dfa      	ldrb	r2, [r7, #23]
 8012a0a:	79fb      	ldrb	r3, [r7, #7]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d3d3      	bcc.n	80129b8 <IntToUnicode+0x18>
  }
}
 8012a10:	bf00      	nop
 8012a12:	bf00      	nop
 8012a14:	371c      	adds	r7, #28
 8012a16:	46bd      	mov	sp, r7
 8012a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1c:	4770      	bx	lr
	...

08012a20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b084      	sub	sp, #16
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	4a0d      	ldr	r2, [pc, #52]	; (8012a64 <HAL_PCD_MspInit+0x44>)
 8012a2e:	4293      	cmp	r3, r2
 8012a30:	d113      	bne.n	8012a5a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012a32:	4b0d      	ldr	r3, [pc, #52]	; (8012a68 <HAL_PCD_MspInit+0x48>)
 8012a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a36:	4a0c      	ldr	r2, [pc, #48]	; (8012a68 <HAL_PCD_MspInit+0x48>)
 8012a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8012a3e:	4b0a      	ldr	r3, [pc, #40]	; (8012a68 <HAL_PCD_MspInit+0x48>)
 8012a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012a46:	60fb      	str	r3, [r7, #12]
 8012a48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	2043      	movs	r0, #67	; 0x43
 8012a50:	f7f4 f84b 	bl	8006aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8012a54:	2043      	movs	r0, #67	; 0x43
 8012a56:	f7f4 f864 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012a5a:	bf00      	nop
 8012a5c:	3710      	adds	r7, #16
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	40006800 	.word	0x40006800
 8012a68:	40021000 	.word	0x40021000

08012a6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012a80:	4619      	mov	r1, r3
 8012a82:	4610      	mov	r0, r2
 8012a84:	f7fd fe93 	bl	80107ae <USBD_LL_SetupStage>
}
 8012a88:	bf00      	nop
 8012a8a:	3708      	adds	r7, #8
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	460b      	mov	r3, r1
 8012a9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8012aa2:	78fa      	ldrb	r2, [r7, #3]
 8012aa4:	6879      	ldr	r1, [r7, #4]
 8012aa6:	4613      	mov	r3, r2
 8012aa8:	009b      	lsls	r3, r3, #2
 8012aaa:	4413      	add	r3, r2
 8012aac:	00db      	lsls	r3, r3, #3
 8012aae:	440b      	add	r3, r1
 8012ab0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	78fb      	ldrb	r3, [r7, #3]
 8012ab8:	4619      	mov	r1, r3
 8012aba:	f7fd fecd 	bl	8010858 <USBD_LL_DataOutStage>
}
 8012abe:	bf00      	nop
 8012ac0:	3708      	adds	r7, #8
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b082      	sub	sp, #8
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
 8012ace:	460b      	mov	r3, r1
 8012ad0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8012ad8:	78fa      	ldrb	r2, [r7, #3]
 8012ada:	6879      	ldr	r1, [r7, #4]
 8012adc:	4613      	mov	r3, r2
 8012ade:	009b      	lsls	r3, r3, #2
 8012ae0:	4413      	add	r3, r2
 8012ae2:	00db      	lsls	r3, r3, #3
 8012ae4:	440b      	add	r3, r1
 8012ae6:	333c      	adds	r3, #60	; 0x3c
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	78fb      	ldrb	r3, [r7, #3]
 8012aec:	4619      	mov	r1, r3
 8012aee:	f7fd ff66 	bl	80109be <USBD_LL_DataInStage>
}
 8012af2:	bf00      	nop
 8012af4:	3708      	adds	r7, #8
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}

08012afa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012afa:	b580      	push	{r7, lr}
 8012afc:	b082      	sub	sp, #8
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7fe f8a0 	bl	8010c4e <USBD_LL_SOF>
}
 8012b0e:	bf00      	nop
 8012b10:	3708      	adds	r7, #8
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}

08012b16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b16:	b580      	push	{r7, lr}
 8012b18:	b084      	sub	sp, #16
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012b1e:	2301      	movs	r3, #1
 8012b20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	689b      	ldr	r3, [r3, #8]
 8012b26:	2b02      	cmp	r3, #2
 8012b28:	d001      	beq.n	8012b2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012b2a:	f7ee ff62 	bl	80019f2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012b34:	7bfa      	ldrb	r2, [r7, #15]
 8012b36:	4611      	mov	r1, r2
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7fe f844 	bl	8010bc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7fd ffec 	bl	8010b22 <USBD_LL_Reset>
}
 8012b4a:	bf00      	nop
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}
	...

08012b54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b082      	sub	sp, #8
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7fe f83f 	bl	8010be6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	699b      	ldr	r3, [r3, #24]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d005      	beq.n	8012b7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012b70:	4b04      	ldr	r3, [pc, #16]	; (8012b84 <HAL_PCD_SuspendCallback+0x30>)
 8012b72:	691b      	ldr	r3, [r3, #16]
 8012b74:	4a03      	ldr	r2, [pc, #12]	; (8012b84 <HAL_PCD_SuspendCallback+0x30>)
 8012b76:	f043 0306 	orr.w	r3, r3, #6
 8012b7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012b7c:	bf00      	nop
 8012b7e:	3708      	adds	r7, #8
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	e000ed00 	.word	0xe000ed00

08012b88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	699b      	ldr	r3, [r3, #24]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d007      	beq.n	8012ba8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012b98:	4b08      	ldr	r3, [pc, #32]	; (8012bbc <HAL_PCD_ResumeCallback+0x34>)
 8012b9a:	691b      	ldr	r3, [r3, #16]
 8012b9c:	4a07      	ldr	r2, [pc, #28]	; (8012bbc <HAL_PCD_ResumeCallback+0x34>)
 8012b9e:	f023 0306 	bic.w	r3, r3, #6
 8012ba2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012ba4:	f000 fab6 	bl	8013114 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7fe f835 	bl	8010c1e <USBD_LL_Resume>
}
 8012bb4:	bf00      	nop
 8012bb6:	3708      	adds	r7, #8
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}
 8012bbc:	e000ed00 	.word	0xe000ed00

08012bc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8012bc8:	f7f6 fe90 	bl	80098ec <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012bcc:	4a2b      	ldr	r2, [pc, #172]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	4a29      	ldr	r2, [pc, #164]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012bd8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8012bdc:	4b27      	ldr	r3, [pc, #156]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012bde:	4a28      	ldr	r2, [pc, #160]	; (8012c80 <USBD_LL_Init+0xc0>)
 8012be0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012be2:	4b26      	ldr	r3, [pc, #152]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012be4:	2208      	movs	r2, #8
 8012be6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012be8:	4b24      	ldr	r3, [pc, #144]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012bea:	2202      	movs	r2, #2
 8012bec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012bee:	4b23      	ldr	r3, [pc, #140]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012bf0:	2202      	movs	r2, #2
 8012bf2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012bf4:	4b21      	ldr	r3, [pc, #132]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012bfa:	4b20      	ldr	r3, [pc, #128]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012c00:	4b1e      	ldr	r3, [pc, #120]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012c02:	2200      	movs	r2, #0
 8012c04:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012c06:	4b1d      	ldr	r3, [pc, #116]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012c08:	2200      	movs	r2, #0
 8012c0a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012c0c:	481b      	ldr	r0, [pc, #108]	; (8012c7c <USBD_LL_Init+0xbc>)
 8012c0e:	f7f5 f88b 	bl	8007d28 <HAL_PCD_Init>
 8012c12:	4603      	mov	r3, r0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d001      	beq.n	8012c1c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012c18:	f7ee feeb 	bl	80019f2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012c22:	2318      	movs	r3, #24
 8012c24:	2200      	movs	r2, #0
 8012c26:	2100      	movs	r1, #0
 8012c28:	f7f6 fd8f 	bl	800974a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012c32:	2358      	movs	r3, #88	; 0x58
 8012c34:	2200      	movs	r2, #0
 8012c36:	2180      	movs	r1, #128	; 0x80
 8012c38:	f7f6 fd87 	bl	800974a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012c42:	23c0      	movs	r3, #192	; 0xc0
 8012c44:	2200      	movs	r2, #0
 8012c46:	2181      	movs	r1, #129	; 0x81
 8012c48:	f7f6 fd7f 	bl	800974a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012c52:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012c56:	2200      	movs	r2, #0
 8012c58:	2101      	movs	r1, #1
 8012c5a:	f7f6 fd76 	bl	800974a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c68:	2200      	movs	r2, #0
 8012c6a:	2182      	movs	r1, #130	; 0x82
 8012c6c:	f7f6 fd6d 	bl	800974a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012c70:	2300      	movs	r3, #0
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	20001d30 	.word	0x20001d30
 8012c80:	40006800 	.word	0x40006800

08012c84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c90:	2300      	movs	r3, #0
 8012c92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7f5 f94a 	bl	8007f34 <HAL_PCD_Start>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012ca4:	7bbb      	ldrb	r3, [r7, #14]
 8012ca6:	2b03      	cmp	r3, #3
 8012ca8:	d816      	bhi.n	8012cd8 <USBD_LL_Start+0x54>
 8012caa:	a201      	add	r2, pc, #4	; (adr r2, 8012cb0 <USBD_LL_Start+0x2c>)
 8012cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cb0:	08012cc1 	.word	0x08012cc1
 8012cb4:	08012cc7 	.word	0x08012cc7
 8012cb8:	08012ccd 	.word	0x08012ccd
 8012cbc:	08012cd3 	.word	0x08012cd3
    case HAL_OK :
      usb_status = USBD_OK;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8012cc4:	e00b      	b.n	8012cde <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012cc6:	2303      	movs	r3, #3
 8012cc8:	73fb      	strb	r3, [r7, #15]
    break;
 8012cca:	e008      	b.n	8012cde <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012ccc:	2301      	movs	r3, #1
 8012cce:	73fb      	strb	r3, [r7, #15]
    break;
 8012cd0:	e005      	b.n	8012cde <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012cd2:	2303      	movs	r3, #3
 8012cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8012cd6:	e002      	b.n	8012cde <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8012cd8:	2303      	movs	r3, #3
 8012cda:	73fb      	strb	r3, [r7, #15]
    break;
 8012cdc:	bf00      	nop
  }
  return usb_status;
 8012cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3710      	adds	r7, #16
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b084      	sub	sp, #16
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	4608      	mov	r0, r1
 8012cf2:	4611      	mov	r1, r2
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	70fb      	strb	r3, [r7, #3]
 8012cfa:	460b      	mov	r3, r1
 8012cfc:	70bb      	strb	r3, [r7, #2]
 8012cfe:	4613      	mov	r3, r2
 8012d00:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d02:	2300      	movs	r3, #0
 8012d04:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d06:	2300      	movs	r3, #0
 8012d08:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012d10:	78bb      	ldrb	r3, [r7, #2]
 8012d12:	883a      	ldrh	r2, [r7, #0]
 8012d14:	78f9      	ldrb	r1, [r7, #3]
 8012d16:	f7f5 fa7b 	bl	8008210 <HAL_PCD_EP_Open>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012d1e:	7bbb      	ldrb	r3, [r7, #14]
 8012d20:	2b03      	cmp	r3, #3
 8012d22:	d817      	bhi.n	8012d54 <USBD_LL_OpenEP+0x6c>
 8012d24:	a201      	add	r2, pc, #4	; (adr r2, 8012d2c <USBD_LL_OpenEP+0x44>)
 8012d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d2a:	bf00      	nop
 8012d2c:	08012d3d 	.word	0x08012d3d
 8012d30:	08012d43 	.word	0x08012d43
 8012d34:	08012d49 	.word	0x08012d49
 8012d38:	08012d4f 	.word	0x08012d4f
    case HAL_OK :
      usb_status = USBD_OK;
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8012d40:	e00b      	b.n	8012d5a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012d42:	2303      	movs	r3, #3
 8012d44:	73fb      	strb	r3, [r7, #15]
    break;
 8012d46:	e008      	b.n	8012d5a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8012d4c:	e005      	b.n	8012d5a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012d4e:	2303      	movs	r3, #3
 8012d50:	73fb      	strb	r3, [r7, #15]
    break;
 8012d52:	e002      	b.n	8012d5a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8012d54:	2303      	movs	r3, #3
 8012d56:	73fb      	strb	r3, [r7, #15]
    break;
 8012d58:	bf00      	nop
  }
  return usb_status;
 8012d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3710      	adds	r7, #16
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d70:	2300      	movs	r3, #0
 8012d72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d74:	2300      	movs	r3, #0
 8012d76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012d7e:	78fa      	ldrb	r2, [r7, #3]
 8012d80:	4611      	mov	r1, r2
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7f5 faa1 	bl	80082ca <HAL_PCD_EP_Close>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012d8c:	7bbb      	ldrb	r3, [r7, #14]
 8012d8e:	2b03      	cmp	r3, #3
 8012d90:	d816      	bhi.n	8012dc0 <USBD_LL_CloseEP+0x5c>
 8012d92:	a201      	add	r2, pc, #4	; (adr r2, 8012d98 <USBD_LL_CloseEP+0x34>)
 8012d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d98:	08012da9 	.word	0x08012da9
 8012d9c:	08012daf 	.word	0x08012daf
 8012da0:	08012db5 	.word	0x08012db5
 8012da4:	08012dbb 	.word	0x08012dbb
    case HAL_OK :
      usb_status = USBD_OK;
 8012da8:	2300      	movs	r3, #0
 8012daa:	73fb      	strb	r3, [r7, #15]
    break;
 8012dac:	e00b      	b.n	8012dc6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012dae:	2303      	movs	r3, #3
 8012db0:	73fb      	strb	r3, [r7, #15]
    break;
 8012db2:	e008      	b.n	8012dc6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012db4:	2301      	movs	r3, #1
 8012db6:	73fb      	strb	r3, [r7, #15]
    break;
 8012db8:	e005      	b.n	8012dc6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012dba:	2303      	movs	r3, #3
 8012dbc:	73fb      	strb	r3, [r7, #15]
    break;
 8012dbe:	e002      	b.n	8012dc6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012dc0:	2303      	movs	r3, #3
 8012dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8012dc4:	bf00      	nop
  }
  return usb_status;
 8012dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3710      	adds	r7, #16
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b084      	sub	sp, #16
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	460b      	mov	r3, r1
 8012dda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012de0:	2300      	movs	r3, #0
 8012de2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012dea:	78fa      	ldrb	r2, [r7, #3]
 8012dec:	4611      	mov	r1, r2
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7f5 fb33 	bl	800845a <HAL_PCD_EP_SetStall>
 8012df4:	4603      	mov	r3, r0
 8012df6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012df8:	7bbb      	ldrb	r3, [r7, #14]
 8012dfa:	2b03      	cmp	r3, #3
 8012dfc:	d816      	bhi.n	8012e2c <USBD_LL_StallEP+0x5c>
 8012dfe:	a201      	add	r2, pc, #4	; (adr r2, 8012e04 <USBD_LL_StallEP+0x34>)
 8012e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e04:	08012e15 	.word	0x08012e15
 8012e08:	08012e1b 	.word	0x08012e1b
 8012e0c:	08012e21 	.word	0x08012e21
 8012e10:	08012e27 	.word	0x08012e27
    case HAL_OK :
      usb_status = USBD_OK;
 8012e14:	2300      	movs	r3, #0
 8012e16:	73fb      	strb	r3, [r7, #15]
    break;
 8012e18:	e00b      	b.n	8012e32 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012e1a:	2303      	movs	r3, #3
 8012e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8012e1e:	e008      	b.n	8012e32 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012e20:	2301      	movs	r3, #1
 8012e22:	73fb      	strb	r3, [r7, #15]
    break;
 8012e24:	e005      	b.n	8012e32 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012e26:	2303      	movs	r3, #3
 8012e28:	73fb      	strb	r3, [r7, #15]
    break;
 8012e2a:	e002      	b.n	8012e32 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012e2c:	2303      	movs	r3, #3
 8012e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8012e30:	bf00      	nop
  }
  return usb_status;
 8012e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3710      	adds	r7, #16
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}

08012e3c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b084      	sub	sp, #16
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	460b      	mov	r3, r1
 8012e46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012e56:	78fa      	ldrb	r2, [r7, #3]
 8012e58:	4611      	mov	r1, r2
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7f5 fb5d 	bl	800851a <HAL_PCD_EP_ClrStall>
 8012e60:	4603      	mov	r3, r0
 8012e62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012e64:	7bbb      	ldrb	r3, [r7, #14]
 8012e66:	2b03      	cmp	r3, #3
 8012e68:	d816      	bhi.n	8012e98 <USBD_LL_ClearStallEP+0x5c>
 8012e6a:	a201      	add	r2, pc, #4	; (adr r2, 8012e70 <USBD_LL_ClearStallEP+0x34>)
 8012e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e70:	08012e81 	.word	0x08012e81
 8012e74:	08012e87 	.word	0x08012e87
 8012e78:	08012e8d 	.word	0x08012e8d
 8012e7c:	08012e93 	.word	0x08012e93
    case HAL_OK :
      usb_status = USBD_OK;
 8012e80:	2300      	movs	r3, #0
 8012e82:	73fb      	strb	r3, [r7, #15]
    break;
 8012e84:	e00b      	b.n	8012e9e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012e86:	2303      	movs	r3, #3
 8012e88:	73fb      	strb	r3, [r7, #15]
    break;
 8012e8a:	e008      	b.n	8012e9e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8012e90:	e005      	b.n	8012e9e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012e92:	2303      	movs	r3, #3
 8012e94:	73fb      	strb	r3, [r7, #15]
    break;
 8012e96:	e002      	b.n	8012e9e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012e98:	2303      	movs	r3, #3
 8012e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8012e9c:	bf00      	nop
  }
  return usb_status;
 8012e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3710      	adds	r7, #16
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}

08012ea8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b085      	sub	sp, #20
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012eba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	da0c      	bge.n	8012ede <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012ec4:	78fb      	ldrb	r3, [r7, #3]
 8012ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012eca:	68f9      	ldr	r1, [r7, #12]
 8012ecc:	1c5a      	adds	r2, r3, #1
 8012ece:	4613      	mov	r3, r2
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	4413      	add	r3, r2
 8012ed4:	00db      	lsls	r3, r3, #3
 8012ed6:	440b      	add	r3, r1
 8012ed8:	3302      	adds	r3, #2
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	e00b      	b.n	8012ef6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012ede:	78fb      	ldrb	r3, [r7, #3]
 8012ee0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012ee4:	68f9      	ldr	r1, [r7, #12]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	4413      	add	r3, r2
 8012eec:	00db      	lsls	r3, r3, #3
 8012eee:	440b      	add	r3, r1
 8012ef0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8012ef4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	3714      	adds	r7, #20
 8012efa:	46bd      	mov	sp, r7
 8012efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f00:	4770      	bx	lr
	...

08012f04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	460b      	mov	r3, r1
 8012f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f10:	2300      	movs	r3, #0
 8012f12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f14:	2300      	movs	r3, #0
 8012f16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f1e:	78fa      	ldrb	r2, [r7, #3]
 8012f20:	4611      	mov	r1, r2
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7f5 f94f 	bl	80081c6 <HAL_PCD_SetAddress>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012f2c:	7bbb      	ldrb	r3, [r7, #14]
 8012f2e:	2b03      	cmp	r3, #3
 8012f30:	d816      	bhi.n	8012f60 <USBD_LL_SetUSBAddress+0x5c>
 8012f32:	a201      	add	r2, pc, #4	; (adr r2, 8012f38 <USBD_LL_SetUSBAddress+0x34>)
 8012f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f38:	08012f49 	.word	0x08012f49
 8012f3c:	08012f4f 	.word	0x08012f4f
 8012f40:	08012f55 	.word	0x08012f55
 8012f44:	08012f5b 	.word	0x08012f5b
    case HAL_OK :
      usb_status = USBD_OK;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8012f4c:	e00b      	b.n	8012f66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012f4e:	2303      	movs	r3, #3
 8012f50:	73fb      	strb	r3, [r7, #15]
    break;
 8012f52:	e008      	b.n	8012f66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012f54:	2301      	movs	r3, #1
 8012f56:	73fb      	strb	r3, [r7, #15]
    break;
 8012f58:	e005      	b.n	8012f66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012f5a:	2303      	movs	r3, #3
 8012f5c:	73fb      	strb	r3, [r7, #15]
    break;
 8012f5e:	e002      	b.n	8012f66 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8012f60:	2303      	movs	r3, #3
 8012f62:	73fb      	strb	r3, [r7, #15]
    break;
 8012f64:	bf00      	nop
  }
  return usb_status;
 8012f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3710      	adds	r7, #16
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b086      	sub	sp, #24
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	60f8      	str	r0, [r7, #12]
 8012f78:	607a      	str	r2, [r7, #4]
 8012f7a:	603b      	str	r3, [r7, #0]
 8012f7c:	460b      	mov	r3, r1
 8012f7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f80:	2300      	movs	r3, #0
 8012f82:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f84:	2300      	movs	r3, #0
 8012f86:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012f8e:	7af9      	ldrb	r1, [r7, #11]
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	f7f5 fa2a 	bl	80083ec <HAL_PCD_EP_Transmit>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8012f9c:	7dbb      	ldrb	r3, [r7, #22]
 8012f9e:	2b03      	cmp	r3, #3
 8012fa0:	d816      	bhi.n	8012fd0 <USBD_LL_Transmit+0x60>
 8012fa2:	a201      	add	r2, pc, #4	; (adr r2, 8012fa8 <USBD_LL_Transmit+0x38>)
 8012fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fa8:	08012fb9 	.word	0x08012fb9
 8012fac:	08012fbf 	.word	0x08012fbf
 8012fb0:	08012fc5 	.word	0x08012fc5
 8012fb4:	08012fcb 	.word	0x08012fcb
    case HAL_OK :
      usb_status = USBD_OK;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	75fb      	strb	r3, [r7, #23]
    break;
 8012fbc:	e00b      	b.n	8012fd6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012fbe:	2303      	movs	r3, #3
 8012fc0:	75fb      	strb	r3, [r7, #23]
    break;
 8012fc2:	e008      	b.n	8012fd6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	75fb      	strb	r3, [r7, #23]
    break;
 8012fc8:	e005      	b.n	8012fd6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012fca:	2303      	movs	r3, #3
 8012fcc:	75fb      	strb	r3, [r7, #23]
    break;
 8012fce:	e002      	b.n	8012fd6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8012fd0:	2303      	movs	r3, #3
 8012fd2:	75fb      	strb	r3, [r7, #23]
    break;
 8012fd4:	bf00      	nop
  }
  return usb_status;
 8012fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3718      	adds	r7, #24
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	60f8      	str	r0, [r7, #12]
 8012fe8:	607a      	str	r2, [r7, #4]
 8012fea:	603b      	str	r3, [r7, #0]
 8012fec:	460b      	mov	r3, r1
 8012fee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012ffe:	7af9      	ldrb	r1, [r7, #11]
 8013000:	683b      	ldr	r3, [r7, #0]
 8013002:	687a      	ldr	r2, [r7, #4]
 8013004:	f7f5 f9a9 	bl	800835a <HAL_PCD_EP_Receive>
 8013008:	4603      	mov	r3, r0
 801300a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801300c:	7dbb      	ldrb	r3, [r7, #22]
 801300e:	2b03      	cmp	r3, #3
 8013010:	d816      	bhi.n	8013040 <USBD_LL_PrepareReceive+0x60>
 8013012:	a201      	add	r2, pc, #4	; (adr r2, 8013018 <USBD_LL_PrepareReceive+0x38>)
 8013014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013018:	08013029 	.word	0x08013029
 801301c:	0801302f 	.word	0x0801302f
 8013020:	08013035 	.word	0x08013035
 8013024:	0801303b 	.word	0x0801303b
    case HAL_OK :
      usb_status = USBD_OK;
 8013028:	2300      	movs	r3, #0
 801302a:	75fb      	strb	r3, [r7, #23]
    break;
 801302c:	e00b      	b.n	8013046 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801302e:	2303      	movs	r3, #3
 8013030:	75fb      	strb	r3, [r7, #23]
    break;
 8013032:	e008      	b.n	8013046 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013034:	2301      	movs	r3, #1
 8013036:	75fb      	strb	r3, [r7, #23]
    break;
 8013038:	e005      	b.n	8013046 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801303a:	2303      	movs	r3, #3
 801303c:	75fb      	strb	r3, [r7, #23]
    break;
 801303e:	e002      	b.n	8013046 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8013040:	2303      	movs	r3, #3
 8013042:	75fb      	strb	r3, [r7, #23]
    break;
 8013044:	bf00      	nop
  }
  return usb_status;
 8013046:	7dfb      	ldrb	r3, [r7, #23]
}
 8013048:	4618      	mov	r0, r3
 801304a:	3718      	adds	r7, #24
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}

08013050 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	460b      	mov	r3, r1
 801305a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013062:	78fa      	ldrb	r2, [r7, #3]
 8013064:	4611      	mov	r1, r2
 8013066:	4618      	mov	r0, r3
 8013068:	f7f5 f9a8 	bl	80083bc <HAL_PCD_EP_GetRxCount>
 801306c:	4603      	mov	r3, r0
}
 801306e:	4618      	mov	r0, r3
 8013070:	3708      	adds	r7, #8
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}
	...

08013078 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b082      	sub	sp, #8
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	460b      	mov	r3, r1
 8013082:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013084:	78fb      	ldrb	r3, [r7, #3]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d002      	beq.n	8013090 <HAL_PCDEx_LPM_Callback+0x18>
 801308a:	2b01      	cmp	r3, #1
 801308c:	d013      	beq.n	80130b6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801308e:	e023      	b.n	80130d8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	699b      	ldr	r3, [r3, #24]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d007      	beq.n	80130a8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013098:	f000 f83c 	bl	8013114 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801309c:	4b10      	ldr	r3, [pc, #64]	; (80130e0 <HAL_PCDEx_LPM_Callback+0x68>)
 801309e:	691b      	ldr	r3, [r3, #16]
 80130a0:	4a0f      	ldr	r2, [pc, #60]	; (80130e0 <HAL_PCDEx_LPM_Callback+0x68>)
 80130a2:	f023 0306 	bic.w	r3, r3, #6
 80130a6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7fd fdb5 	bl	8010c1e <USBD_LL_Resume>
    break;
 80130b4:	e010      	b.n	80130d8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80130bc:	4618      	mov	r0, r3
 80130be:	f7fd fd92 	bl	8010be6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	699b      	ldr	r3, [r3, #24]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d005      	beq.n	80130d6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130ca:	4b05      	ldr	r3, [pc, #20]	; (80130e0 <HAL_PCDEx_LPM_Callback+0x68>)
 80130cc:	691b      	ldr	r3, [r3, #16]
 80130ce:	4a04      	ldr	r2, [pc, #16]	; (80130e0 <HAL_PCDEx_LPM_Callback+0x68>)
 80130d0:	f043 0306 	orr.w	r3, r3, #6
 80130d4:	6113      	str	r3, [r2, #16]
    break;
 80130d6:	bf00      	nop
}
 80130d8:	bf00      	nop
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	e000ed00 	.word	0xe000ed00

080130e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80130e4:	b480      	push	{r7}
 80130e6:	b083      	sub	sp, #12
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80130ec:	4b03      	ldr	r3, [pc, #12]	; (80130fc <USBD_static_malloc+0x18>)
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	370c      	adds	r7, #12
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	20002028 	.word	0x20002028

08013100 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013100:	b480      	push	{r7}
 8013102:	b083      	sub	sp, #12
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]

}
 8013108:	bf00      	nop
 801310a:	370c      	adds	r7, #12
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr

08013114 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013118:	f7ee fbea 	bl	80018f0 <SystemClock_Config>
}
 801311c:	bf00      	nop
 801311e:	bd80      	pop	{r7, pc}

08013120 <atoi>:
 8013120:	220a      	movs	r2, #10
 8013122:	2100      	movs	r1, #0
 8013124:	f000 bfb8 	b.w	8014098 <strtol>

08013128 <malloc>:
 8013128:	4b02      	ldr	r3, [pc, #8]	; (8013134 <malloc+0xc>)
 801312a:	4601      	mov	r1, r0
 801312c:	6818      	ldr	r0, [r3, #0]
 801312e:	f000 b82b 	b.w	8013188 <_malloc_r>
 8013132:	bf00      	nop
 8013134:	200002f0 	.word	0x200002f0

08013138 <free>:
 8013138:	4b02      	ldr	r3, [pc, #8]	; (8013144 <free+0xc>)
 801313a:	4601      	mov	r1, r0
 801313c:	6818      	ldr	r0, [r3, #0]
 801313e:	f002 bf55 	b.w	8015fec <_free_r>
 8013142:	bf00      	nop
 8013144:	200002f0 	.word	0x200002f0

08013148 <sbrk_aligned>:
 8013148:	b570      	push	{r4, r5, r6, lr}
 801314a:	4e0e      	ldr	r6, [pc, #56]	; (8013184 <sbrk_aligned+0x3c>)
 801314c:	460c      	mov	r4, r1
 801314e:	6831      	ldr	r1, [r6, #0]
 8013150:	4605      	mov	r5, r0
 8013152:	b911      	cbnz	r1, 801315a <sbrk_aligned+0x12>
 8013154:	f002 f83e 	bl	80151d4 <_sbrk_r>
 8013158:	6030      	str	r0, [r6, #0]
 801315a:	4621      	mov	r1, r4
 801315c:	4628      	mov	r0, r5
 801315e:	f002 f839 	bl	80151d4 <_sbrk_r>
 8013162:	1c43      	adds	r3, r0, #1
 8013164:	d00a      	beq.n	801317c <sbrk_aligned+0x34>
 8013166:	1cc4      	adds	r4, r0, #3
 8013168:	f024 0403 	bic.w	r4, r4, #3
 801316c:	42a0      	cmp	r0, r4
 801316e:	d007      	beq.n	8013180 <sbrk_aligned+0x38>
 8013170:	1a21      	subs	r1, r4, r0
 8013172:	4628      	mov	r0, r5
 8013174:	f002 f82e 	bl	80151d4 <_sbrk_r>
 8013178:	3001      	adds	r0, #1
 801317a:	d101      	bne.n	8013180 <sbrk_aligned+0x38>
 801317c:	f04f 34ff 	mov.w	r4, #4294967295
 8013180:	4620      	mov	r0, r4
 8013182:	bd70      	pop	{r4, r5, r6, pc}
 8013184:	2000224c 	.word	0x2000224c

08013188 <_malloc_r>:
 8013188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801318c:	1ccd      	adds	r5, r1, #3
 801318e:	f025 0503 	bic.w	r5, r5, #3
 8013192:	3508      	adds	r5, #8
 8013194:	2d0c      	cmp	r5, #12
 8013196:	bf38      	it	cc
 8013198:	250c      	movcc	r5, #12
 801319a:	2d00      	cmp	r5, #0
 801319c:	4607      	mov	r7, r0
 801319e:	db01      	blt.n	80131a4 <_malloc_r+0x1c>
 80131a0:	42a9      	cmp	r1, r5
 80131a2:	d905      	bls.n	80131b0 <_malloc_r+0x28>
 80131a4:	230c      	movs	r3, #12
 80131a6:	603b      	str	r3, [r7, #0]
 80131a8:	2600      	movs	r6, #0
 80131aa:	4630      	mov	r0, r6
 80131ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013284 <_malloc_r+0xfc>
 80131b4:	f000 f868 	bl	8013288 <__malloc_lock>
 80131b8:	f8d8 3000 	ldr.w	r3, [r8]
 80131bc:	461c      	mov	r4, r3
 80131be:	bb5c      	cbnz	r4, 8013218 <_malloc_r+0x90>
 80131c0:	4629      	mov	r1, r5
 80131c2:	4638      	mov	r0, r7
 80131c4:	f7ff ffc0 	bl	8013148 <sbrk_aligned>
 80131c8:	1c43      	adds	r3, r0, #1
 80131ca:	4604      	mov	r4, r0
 80131cc:	d155      	bne.n	801327a <_malloc_r+0xf2>
 80131ce:	f8d8 4000 	ldr.w	r4, [r8]
 80131d2:	4626      	mov	r6, r4
 80131d4:	2e00      	cmp	r6, #0
 80131d6:	d145      	bne.n	8013264 <_malloc_r+0xdc>
 80131d8:	2c00      	cmp	r4, #0
 80131da:	d048      	beq.n	801326e <_malloc_r+0xe6>
 80131dc:	6823      	ldr	r3, [r4, #0]
 80131de:	4631      	mov	r1, r6
 80131e0:	4638      	mov	r0, r7
 80131e2:	eb04 0903 	add.w	r9, r4, r3
 80131e6:	f001 fff5 	bl	80151d4 <_sbrk_r>
 80131ea:	4581      	cmp	r9, r0
 80131ec:	d13f      	bne.n	801326e <_malloc_r+0xe6>
 80131ee:	6821      	ldr	r1, [r4, #0]
 80131f0:	1a6d      	subs	r5, r5, r1
 80131f2:	4629      	mov	r1, r5
 80131f4:	4638      	mov	r0, r7
 80131f6:	f7ff ffa7 	bl	8013148 <sbrk_aligned>
 80131fa:	3001      	adds	r0, #1
 80131fc:	d037      	beq.n	801326e <_malloc_r+0xe6>
 80131fe:	6823      	ldr	r3, [r4, #0]
 8013200:	442b      	add	r3, r5
 8013202:	6023      	str	r3, [r4, #0]
 8013204:	f8d8 3000 	ldr.w	r3, [r8]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d038      	beq.n	801327e <_malloc_r+0xf6>
 801320c:	685a      	ldr	r2, [r3, #4]
 801320e:	42a2      	cmp	r2, r4
 8013210:	d12b      	bne.n	801326a <_malloc_r+0xe2>
 8013212:	2200      	movs	r2, #0
 8013214:	605a      	str	r2, [r3, #4]
 8013216:	e00f      	b.n	8013238 <_malloc_r+0xb0>
 8013218:	6822      	ldr	r2, [r4, #0]
 801321a:	1b52      	subs	r2, r2, r5
 801321c:	d41f      	bmi.n	801325e <_malloc_r+0xd6>
 801321e:	2a0b      	cmp	r2, #11
 8013220:	d917      	bls.n	8013252 <_malloc_r+0xca>
 8013222:	1961      	adds	r1, r4, r5
 8013224:	42a3      	cmp	r3, r4
 8013226:	6025      	str	r5, [r4, #0]
 8013228:	bf18      	it	ne
 801322a:	6059      	strne	r1, [r3, #4]
 801322c:	6863      	ldr	r3, [r4, #4]
 801322e:	bf08      	it	eq
 8013230:	f8c8 1000 	streq.w	r1, [r8]
 8013234:	5162      	str	r2, [r4, r5]
 8013236:	604b      	str	r3, [r1, #4]
 8013238:	4638      	mov	r0, r7
 801323a:	f104 060b 	add.w	r6, r4, #11
 801323e:	f000 f829 	bl	8013294 <__malloc_unlock>
 8013242:	f026 0607 	bic.w	r6, r6, #7
 8013246:	1d23      	adds	r3, r4, #4
 8013248:	1af2      	subs	r2, r6, r3
 801324a:	d0ae      	beq.n	80131aa <_malloc_r+0x22>
 801324c:	1b9b      	subs	r3, r3, r6
 801324e:	50a3      	str	r3, [r4, r2]
 8013250:	e7ab      	b.n	80131aa <_malloc_r+0x22>
 8013252:	42a3      	cmp	r3, r4
 8013254:	6862      	ldr	r2, [r4, #4]
 8013256:	d1dd      	bne.n	8013214 <_malloc_r+0x8c>
 8013258:	f8c8 2000 	str.w	r2, [r8]
 801325c:	e7ec      	b.n	8013238 <_malloc_r+0xb0>
 801325e:	4623      	mov	r3, r4
 8013260:	6864      	ldr	r4, [r4, #4]
 8013262:	e7ac      	b.n	80131be <_malloc_r+0x36>
 8013264:	4634      	mov	r4, r6
 8013266:	6876      	ldr	r6, [r6, #4]
 8013268:	e7b4      	b.n	80131d4 <_malloc_r+0x4c>
 801326a:	4613      	mov	r3, r2
 801326c:	e7cc      	b.n	8013208 <_malloc_r+0x80>
 801326e:	230c      	movs	r3, #12
 8013270:	603b      	str	r3, [r7, #0]
 8013272:	4638      	mov	r0, r7
 8013274:	f000 f80e 	bl	8013294 <__malloc_unlock>
 8013278:	e797      	b.n	80131aa <_malloc_r+0x22>
 801327a:	6025      	str	r5, [r4, #0]
 801327c:	e7dc      	b.n	8013238 <_malloc_r+0xb0>
 801327e:	605b      	str	r3, [r3, #4]
 8013280:	deff      	udf	#255	; 0xff
 8013282:	bf00      	nop
 8013284:	20002248 	.word	0x20002248

08013288 <__malloc_lock>:
 8013288:	4801      	ldr	r0, [pc, #4]	; (8013290 <__malloc_lock+0x8>)
 801328a:	f001 bff0 	b.w	801526e <__retarget_lock_acquire_recursive>
 801328e:	bf00      	nop
 8013290:	20002390 	.word	0x20002390

08013294 <__malloc_unlock>:
 8013294:	4801      	ldr	r0, [pc, #4]	; (801329c <__malloc_unlock+0x8>)
 8013296:	f001 bfeb 	b.w	8015270 <__retarget_lock_release_recursive>
 801329a:	bf00      	nop
 801329c:	20002390 	.word	0x20002390

080132a0 <sulp>:
 80132a0:	b570      	push	{r4, r5, r6, lr}
 80132a2:	4604      	mov	r4, r0
 80132a4:	460d      	mov	r5, r1
 80132a6:	ec45 4b10 	vmov	d0, r4, r5
 80132aa:	4616      	mov	r6, r2
 80132ac:	f003 fdc0 	bl	8016e30 <__ulp>
 80132b0:	ec51 0b10 	vmov	r0, r1, d0
 80132b4:	b17e      	cbz	r6, 80132d6 <sulp+0x36>
 80132b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80132ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80132be:	2b00      	cmp	r3, #0
 80132c0:	dd09      	ble.n	80132d6 <sulp+0x36>
 80132c2:	051b      	lsls	r3, r3, #20
 80132c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80132c8:	2400      	movs	r4, #0
 80132ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80132ce:	4622      	mov	r2, r4
 80132d0:	462b      	mov	r3, r5
 80132d2:	f7ed f991 	bl	80005f8 <__aeabi_dmul>
 80132d6:	bd70      	pop	{r4, r5, r6, pc}

080132d8 <_strtod_l>:
 80132d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132dc:	ed2d 8b02 	vpush	{d8}
 80132e0:	b09b      	sub	sp, #108	; 0x6c
 80132e2:	4604      	mov	r4, r0
 80132e4:	9213      	str	r2, [sp, #76]	; 0x4c
 80132e6:	2200      	movs	r2, #0
 80132e8:	9216      	str	r2, [sp, #88]	; 0x58
 80132ea:	460d      	mov	r5, r1
 80132ec:	f04f 0800 	mov.w	r8, #0
 80132f0:	f04f 0900 	mov.w	r9, #0
 80132f4:	460a      	mov	r2, r1
 80132f6:	9215      	str	r2, [sp, #84]	; 0x54
 80132f8:	7811      	ldrb	r1, [r2, #0]
 80132fa:	292b      	cmp	r1, #43	; 0x2b
 80132fc:	d04c      	beq.n	8013398 <_strtod_l+0xc0>
 80132fe:	d83a      	bhi.n	8013376 <_strtod_l+0x9e>
 8013300:	290d      	cmp	r1, #13
 8013302:	d834      	bhi.n	801336e <_strtod_l+0x96>
 8013304:	2908      	cmp	r1, #8
 8013306:	d834      	bhi.n	8013372 <_strtod_l+0x9a>
 8013308:	2900      	cmp	r1, #0
 801330a:	d03d      	beq.n	8013388 <_strtod_l+0xb0>
 801330c:	2200      	movs	r2, #0
 801330e:	920a      	str	r2, [sp, #40]	; 0x28
 8013310:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8013312:	7832      	ldrb	r2, [r6, #0]
 8013314:	2a30      	cmp	r2, #48	; 0x30
 8013316:	f040 80b4 	bne.w	8013482 <_strtod_l+0x1aa>
 801331a:	7872      	ldrb	r2, [r6, #1]
 801331c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013320:	2a58      	cmp	r2, #88	; 0x58
 8013322:	d170      	bne.n	8013406 <_strtod_l+0x12e>
 8013324:	9302      	str	r3, [sp, #8]
 8013326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013328:	9301      	str	r3, [sp, #4]
 801332a:	ab16      	add	r3, sp, #88	; 0x58
 801332c:	9300      	str	r3, [sp, #0]
 801332e:	4a8e      	ldr	r2, [pc, #568]	; (8013568 <_strtod_l+0x290>)
 8013330:	ab17      	add	r3, sp, #92	; 0x5c
 8013332:	a915      	add	r1, sp, #84	; 0x54
 8013334:	4620      	mov	r0, r4
 8013336:	f002 ff0d 	bl	8016154 <__gethex>
 801333a:	f010 070f 	ands.w	r7, r0, #15
 801333e:	4605      	mov	r5, r0
 8013340:	d005      	beq.n	801334e <_strtod_l+0x76>
 8013342:	2f06      	cmp	r7, #6
 8013344:	d12a      	bne.n	801339c <_strtod_l+0xc4>
 8013346:	3601      	adds	r6, #1
 8013348:	2300      	movs	r3, #0
 801334a:	9615      	str	r6, [sp, #84]	; 0x54
 801334c:	930a      	str	r3, [sp, #40]	; 0x28
 801334e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013350:	2b00      	cmp	r3, #0
 8013352:	f040 857f 	bne.w	8013e54 <_strtod_l+0xb7c>
 8013356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013358:	b1db      	cbz	r3, 8013392 <_strtod_l+0xba>
 801335a:	4642      	mov	r2, r8
 801335c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013360:	ec43 2b10 	vmov	d0, r2, r3
 8013364:	b01b      	add	sp, #108	; 0x6c
 8013366:	ecbd 8b02 	vpop	{d8}
 801336a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801336e:	2920      	cmp	r1, #32
 8013370:	d1cc      	bne.n	801330c <_strtod_l+0x34>
 8013372:	3201      	adds	r2, #1
 8013374:	e7bf      	b.n	80132f6 <_strtod_l+0x1e>
 8013376:	292d      	cmp	r1, #45	; 0x2d
 8013378:	d1c8      	bne.n	801330c <_strtod_l+0x34>
 801337a:	2101      	movs	r1, #1
 801337c:	910a      	str	r1, [sp, #40]	; 0x28
 801337e:	1c51      	adds	r1, r2, #1
 8013380:	9115      	str	r1, [sp, #84]	; 0x54
 8013382:	7852      	ldrb	r2, [r2, #1]
 8013384:	2a00      	cmp	r2, #0
 8013386:	d1c3      	bne.n	8013310 <_strtod_l+0x38>
 8013388:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801338a:	9515      	str	r5, [sp, #84]	; 0x54
 801338c:	2b00      	cmp	r3, #0
 801338e:	f040 855f 	bne.w	8013e50 <_strtod_l+0xb78>
 8013392:	4642      	mov	r2, r8
 8013394:	464b      	mov	r3, r9
 8013396:	e7e3      	b.n	8013360 <_strtod_l+0x88>
 8013398:	2100      	movs	r1, #0
 801339a:	e7ef      	b.n	801337c <_strtod_l+0xa4>
 801339c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801339e:	b13a      	cbz	r2, 80133b0 <_strtod_l+0xd8>
 80133a0:	2135      	movs	r1, #53	; 0x35
 80133a2:	a818      	add	r0, sp, #96	; 0x60
 80133a4:	f003 fe41 	bl	801702a <__copybits>
 80133a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80133aa:	4620      	mov	r0, r4
 80133ac:	f003 fa14 	bl	80167d8 <_Bfree>
 80133b0:	3f01      	subs	r7, #1
 80133b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80133b4:	2f04      	cmp	r7, #4
 80133b6:	d806      	bhi.n	80133c6 <_strtod_l+0xee>
 80133b8:	e8df f007 	tbb	[pc, r7]
 80133bc:	201d0314 	.word	0x201d0314
 80133c0:	14          	.byte	0x14
 80133c1:	00          	.byte	0x00
 80133c2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80133c6:	05e9      	lsls	r1, r5, #23
 80133c8:	bf48      	it	mi
 80133ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80133ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80133d2:	0d1b      	lsrs	r3, r3, #20
 80133d4:	051b      	lsls	r3, r3, #20
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d1b9      	bne.n	801334e <_strtod_l+0x76>
 80133da:	f001 ff1d 	bl	8015218 <__errno>
 80133de:	2322      	movs	r3, #34	; 0x22
 80133e0:	6003      	str	r3, [r0, #0]
 80133e2:	e7b4      	b.n	801334e <_strtod_l+0x76>
 80133e4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80133e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80133ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80133f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80133f4:	e7e7      	b.n	80133c6 <_strtod_l+0xee>
 80133f6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013570 <_strtod_l+0x298>
 80133fa:	e7e4      	b.n	80133c6 <_strtod_l+0xee>
 80133fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013400:	f04f 38ff 	mov.w	r8, #4294967295
 8013404:	e7df      	b.n	80133c6 <_strtod_l+0xee>
 8013406:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013408:	1c5a      	adds	r2, r3, #1
 801340a:	9215      	str	r2, [sp, #84]	; 0x54
 801340c:	785b      	ldrb	r3, [r3, #1]
 801340e:	2b30      	cmp	r3, #48	; 0x30
 8013410:	d0f9      	beq.n	8013406 <_strtod_l+0x12e>
 8013412:	2b00      	cmp	r3, #0
 8013414:	d09b      	beq.n	801334e <_strtod_l+0x76>
 8013416:	2301      	movs	r3, #1
 8013418:	f04f 0a00 	mov.w	sl, #0
 801341c:	9304      	str	r3, [sp, #16]
 801341e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013420:	930b      	str	r3, [sp, #44]	; 0x2c
 8013422:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013426:	46d3      	mov	fp, sl
 8013428:	220a      	movs	r2, #10
 801342a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801342c:	7806      	ldrb	r6, [r0, #0]
 801342e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013432:	b2d9      	uxtb	r1, r3
 8013434:	2909      	cmp	r1, #9
 8013436:	d926      	bls.n	8013486 <_strtod_l+0x1ae>
 8013438:	494c      	ldr	r1, [pc, #304]	; (801356c <_strtod_l+0x294>)
 801343a:	2201      	movs	r2, #1
 801343c:	f001 fe0d 	bl	801505a <strncmp>
 8013440:	2800      	cmp	r0, #0
 8013442:	d030      	beq.n	80134a6 <_strtod_l+0x1ce>
 8013444:	2000      	movs	r0, #0
 8013446:	4632      	mov	r2, r6
 8013448:	9005      	str	r0, [sp, #20]
 801344a:	465e      	mov	r6, fp
 801344c:	4603      	mov	r3, r0
 801344e:	2a65      	cmp	r2, #101	; 0x65
 8013450:	d001      	beq.n	8013456 <_strtod_l+0x17e>
 8013452:	2a45      	cmp	r2, #69	; 0x45
 8013454:	d113      	bne.n	801347e <_strtod_l+0x1a6>
 8013456:	b91e      	cbnz	r6, 8013460 <_strtod_l+0x188>
 8013458:	9a04      	ldr	r2, [sp, #16]
 801345a:	4302      	orrs	r2, r0
 801345c:	d094      	beq.n	8013388 <_strtod_l+0xb0>
 801345e:	2600      	movs	r6, #0
 8013460:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013462:	1c6a      	adds	r2, r5, #1
 8013464:	9215      	str	r2, [sp, #84]	; 0x54
 8013466:	786a      	ldrb	r2, [r5, #1]
 8013468:	2a2b      	cmp	r2, #43	; 0x2b
 801346a:	d074      	beq.n	8013556 <_strtod_l+0x27e>
 801346c:	2a2d      	cmp	r2, #45	; 0x2d
 801346e:	d078      	beq.n	8013562 <_strtod_l+0x28a>
 8013470:	f04f 0c00 	mov.w	ip, #0
 8013474:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013478:	2909      	cmp	r1, #9
 801347a:	d97f      	bls.n	801357c <_strtod_l+0x2a4>
 801347c:	9515      	str	r5, [sp, #84]	; 0x54
 801347e:	2700      	movs	r7, #0
 8013480:	e09e      	b.n	80135c0 <_strtod_l+0x2e8>
 8013482:	2300      	movs	r3, #0
 8013484:	e7c8      	b.n	8013418 <_strtod_l+0x140>
 8013486:	f1bb 0f08 	cmp.w	fp, #8
 801348a:	bfd8      	it	le
 801348c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801348e:	f100 0001 	add.w	r0, r0, #1
 8013492:	bfda      	itte	le
 8013494:	fb02 3301 	mlale	r3, r2, r1, r3
 8013498:	9309      	strle	r3, [sp, #36]	; 0x24
 801349a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801349e:	f10b 0b01 	add.w	fp, fp, #1
 80134a2:	9015      	str	r0, [sp, #84]	; 0x54
 80134a4:	e7c1      	b.n	801342a <_strtod_l+0x152>
 80134a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134a8:	1c5a      	adds	r2, r3, #1
 80134aa:	9215      	str	r2, [sp, #84]	; 0x54
 80134ac:	785a      	ldrb	r2, [r3, #1]
 80134ae:	f1bb 0f00 	cmp.w	fp, #0
 80134b2:	d037      	beq.n	8013524 <_strtod_l+0x24c>
 80134b4:	9005      	str	r0, [sp, #20]
 80134b6:	465e      	mov	r6, fp
 80134b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80134bc:	2b09      	cmp	r3, #9
 80134be:	d912      	bls.n	80134e6 <_strtod_l+0x20e>
 80134c0:	2301      	movs	r3, #1
 80134c2:	e7c4      	b.n	801344e <_strtod_l+0x176>
 80134c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134c6:	1c5a      	adds	r2, r3, #1
 80134c8:	9215      	str	r2, [sp, #84]	; 0x54
 80134ca:	785a      	ldrb	r2, [r3, #1]
 80134cc:	3001      	adds	r0, #1
 80134ce:	2a30      	cmp	r2, #48	; 0x30
 80134d0:	d0f8      	beq.n	80134c4 <_strtod_l+0x1ec>
 80134d2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80134d6:	2b08      	cmp	r3, #8
 80134d8:	f200 84c1 	bhi.w	8013e5e <_strtod_l+0xb86>
 80134dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134de:	9005      	str	r0, [sp, #20]
 80134e0:	2000      	movs	r0, #0
 80134e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80134e4:	4606      	mov	r6, r0
 80134e6:	3a30      	subs	r2, #48	; 0x30
 80134e8:	f100 0301 	add.w	r3, r0, #1
 80134ec:	d014      	beq.n	8013518 <_strtod_l+0x240>
 80134ee:	9905      	ldr	r1, [sp, #20]
 80134f0:	4419      	add	r1, r3
 80134f2:	9105      	str	r1, [sp, #20]
 80134f4:	4633      	mov	r3, r6
 80134f6:	eb00 0c06 	add.w	ip, r0, r6
 80134fa:	210a      	movs	r1, #10
 80134fc:	4563      	cmp	r3, ip
 80134fe:	d113      	bne.n	8013528 <_strtod_l+0x250>
 8013500:	1833      	adds	r3, r6, r0
 8013502:	2b08      	cmp	r3, #8
 8013504:	f106 0601 	add.w	r6, r6, #1
 8013508:	4406      	add	r6, r0
 801350a:	dc1a      	bgt.n	8013542 <_strtod_l+0x26a>
 801350c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801350e:	230a      	movs	r3, #10
 8013510:	fb03 2301 	mla	r3, r3, r1, r2
 8013514:	9309      	str	r3, [sp, #36]	; 0x24
 8013516:	2300      	movs	r3, #0
 8013518:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801351a:	1c51      	adds	r1, r2, #1
 801351c:	9115      	str	r1, [sp, #84]	; 0x54
 801351e:	7852      	ldrb	r2, [r2, #1]
 8013520:	4618      	mov	r0, r3
 8013522:	e7c9      	b.n	80134b8 <_strtod_l+0x1e0>
 8013524:	4658      	mov	r0, fp
 8013526:	e7d2      	b.n	80134ce <_strtod_l+0x1f6>
 8013528:	2b08      	cmp	r3, #8
 801352a:	f103 0301 	add.w	r3, r3, #1
 801352e:	dc03      	bgt.n	8013538 <_strtod_l+0x260>
 8013530:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013532:	434f      	muls	r7, r1
 8013534:	9709      	str	r7, [sp, #36]	; 0x24
 8013536:	e7e1      	b.n	80134fc <_strtod_l+0x224>
 8013538:	2b10      	cmp	r3, #16
 801353a:	bfd8      	it	le
 801353c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013540:	e7dc      	b.n	80134fc <_strtod_l+0x224>
 8013542:	2e10      	cmp	r6, #16
 8013544:	bfdc      	itt	le
 8013546:	230a      	movle	r3, #10
 8013548:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801354c:	e7e3      	b.n	8013516 <_strtod_l+0x23e>
 801354e:	2300      	movs	r3, #0
 8013550:	9305      	str	r3, [sp, #20]
 8013552:	2301      	movs	r3, #1
 8013554:	e780      	b.n	8013458 <_strtod_l+0x180>
 8013556:	f04f 0c00 	mov.w	ip, #0
 801355a:	1caa      	adds	r2, r5, #2
 801355c:	9215      	str	r2, [sp, #84]	; 0x54
 801355e:	78aa      	ldrb	r2, [r5, #2]
 8013560:	e788      	b.n	8013474 <_strtod_l+0x19c>
 8013562:	f04f 0c01 	mov.w	ip, #1
 8013566:	e7f8      	b.n	801355a <_strtod_l+0x282>
 8013568:	0801ad50 	.word	0x0801ad50
 801356c:	0801ad4c 	.word	0x0801ad4c
 8013570:	7ff00000 	.word	0x7ff00000
 8013574:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013576:	1c51      	adds	r1, r2, #1
 8013578:	9115      	str	r1, [sp, #84]	; 0x54
 801357a:	7852      	ldrb	r2, [r2, #1]
 801357c:	2a30      	cmp	r2, #48	; 0x30
 801357e:	d0f9      	beq.n	8013574 <_strtod_l+0x29c>
 8013580:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013584:	2908      	cmp	r1, #8
 8013586:	f63f af7a 	bhi.w	801347e <_strtod_l+0x1a6>
 801358a:	3a30      	subs	r2, #48	; 0x30
 801358c:	9208      	str	r2, [sp, #32]
 801358e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013590:	920c      	str	r2, [sp, #48]	; 0x30
 8013592:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013594:	1c57      	adds	r7, r2, #1
 8013596:	9715      	str	r7, [sp, #84]	; 0x54
 8013598:	7852      	ldrb	r2, [r2, #1]
 801359a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801359e:	f1be 0f09 	cmp.w	lr, #9
 80135a2:	d938      	bls.n	8013616 <_strtod_l+0x33e>
 80135a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80135a6:	1a7f      	subs	r7, r7, r1
 80135a8:	2f08      	cmp	r7, #8
 80135aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80135ae:	dc03      	bgt.n	80135b8 <_strtod_l+0x2e0>
 80135b0:	9908      	ldr	r1, [sp, #32]
 80135b2:	428f      	cmp	r7, r1
 80135b4:	bfa8      	it	ge
 80135b6:	460f      	movge	r7, r1
 80135b8:	f1bc 0f00 	cmp.w	ip, #0
 80135bc:	d000      	beq.n	80135c0 <_strtod_l+0x2e8>
 80135be:	427f      	negs	r7, r7
 80135c0:	2e00      	cmp	r6, #0
 80135c2:	d14f      	bne.n	8013664 <_strtod_l+0x38c>
 80135c4:	9904      	ldr	r1, [sp, #16]
 80135c6:	4301      	orrs	r1, r0
 80135c8:	f47f aec1 	bne.w	801334e <_strtod_l+0x76>
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	f47f aedb 	bne.w	8013388 <_strtod_l+0xb0>
 80135d2:	2a69      	cmp	r2, #105	; 0x69
 80135d4:	d029      	beq.n	801362a <_strtod_l+0x352>
 80135d6:	dc26      	bgt.n	8013626 <_strtod_l+0x34e>
 80135d8:	2a49      	cmp	r2, #73	; 0x49
 80135da:	d026      	beq.n	801362a <_strtod_l+0x352>
 80135dc:	2a4e      	cmp	r2, #78	; 0x4e
 80135de:	f47f aed3 	bne.w	8013388 <_strtod_l+0xb0>
 80135e2:	499b      	ldr	r1, [pc, #620]	; (8013850 <_strtod_l+0x578>)
 80135e4:	a815      	add	r0, sp, #84	; 0x54
 80135e6:	f002 fff5 	bl	80165d4 <__match>
 80135ea:	2800      	cmp	r0, #0
 80135ec:	f43f aecc 	beq.w	8013388 <_strtod_l+0xb0>
 80135f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	2b28      	cmp	r3, #40	; 0x28
 80135f6:	d12f      	bne.n	8013658 <_strtod_l+0x380>
 80135f8:	4996      	ldr	r1, [pc, #600]	; (8013854 <_strtod_l+0x57c>)
 80135fa:	aa18      	add	r2, sp, #96	; 0x60
 80135fc:	a815      	add	r0, sp, #84	; 0x54
 80135fe:	f002 fffd 	bl	80165fc <__hexnan>
 8013602:	2805      	cmp	r0, #5
 8013604:	d128      	bne.n	8013658 <_strtod_l+0x380>
 8013606:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013608:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801360c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013610:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013614:	e69b      	b.n	801334e <_strtod_l+0x76>
 8013616:	9f08      	ldr	r7, [sp, #32]
 8013618:	210a      	movs	r1, #10
 801361a:	fb01 2107 	mla	r1, r1, r7, r2
 801361e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013622:	9208      	str	r2, [sp, #32]
 8013624:	e7b5      	b.n	8013592 <_strtod_l+0x2ba>
 8013626:	2a6e      	cmp	r2, #110	; 0x6e
 8013628:	e7d9      	b.n	80135de <_strtod_l+0x306>
 801362a:	498b      	ldr	r1, [pc, #556]	; (8013858 <_strtod_l+0x580>)
 801362c:	a815      	add	r0, sp, #84	; 0x54
 801362e:	f002 ffd1 	bl	80165d4 <__match>
 8013632:	2800      	cmp	r0, #0
 8013634:	f43f aea8 	beq.w	8013388 <_strtod_l+0xb0>
 8013638:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801363a:	4988      	ldr	r1, [pc, #544]	; (801385c <_strtod_l+0x584>)
 801363c:	3b01      	subs	r3, #1
 801363e:	a815      	add	r0, sp, #84	; 0x54
 8013640:	9315      	str	r3, [sp, #84]	; 0x54
 8013642:	f002 ffc7 	bl	80165d4 <__match>
 8013646:	b910      	cbnz	r0, 801364e <_strtod_l+0x376>
 8013648:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801364a:	3301      	adds	r3, #1
 801364c:	9315      	str	r3, [sp, #84]	; 0x54
 801364e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801386c <_strtod_l+0x594>
 8013652:	f04f 0800 	mov.w	r8, #0
 8013656:	e67a      	b.n	801334e <_strtod_l+0x76>
 8013658:	4881      	ldr	r0, [pc, #516]	; (8013860 <_strtod_l+0x588>)
 801365a:	f001 fe21 	bl	80152a0 <nan>
 801365e:	ec59 8b10 	vmov	r8, r9, d0
 8013662:	e674      	b.n	801334e <_strtod_l+0x76>
 8013664:	9b05      	ldr	r3, [sp, #20]
 8013666:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013668:	1afb      	subs	r3, r7, r3
 801366a:	f1bb 0f00 	cmp.w	fp, #0
 801366e:	bf08      	it	eq
 8013670:	46b3      	moveq	fp, r6
 8013672:	2e10      	cmp	r6, #16
 8013674:	9308      	str	r3, [sp, #32]
 8013676:	4635      	mov	r5, r6
 8013678:	bfa8      	it	ge
 801367a:	2510      	movge	r5, #16
 801367c:	f7ec ff42 	bl	8000504 <__aeabi_ui2d>
 8013680:	2e09      	cmp	r6, #9
 8013682:	4680      	mov	r8, r0
 8013684:	4689      	mov	r9, r1
 8013686:	dd13      	ble.n	80136b0 <_strtod_l+0x3d8>
 8013688:	4b76      	ldr	r3, [pc, #472]	; (8013864 <_strtod_l+0x58c>)
 801368a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801368e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013692:	f7ec ffb1 	bl	80005f8 <__aeabi_dmul>
 8013696:	4680      	mov	r8, r0
 8013698:	4650      	mov	r0, sl
 801369a:	4689      	mov	r9, r1
 801369c:	f7ec ff32 	bl	8000504 <__aeabi_ui2d>
 80136a0:	4602      	mov	r2, r0
 80136a2:	460b      	mov	r3, r1
 80136a4:	4640      	mov	r0, r8
 80136a6:	4649      	mov	r1, r9
 80136a8:	f7ec fdf0 	bl	800028c <__adddf3>
 80136ac:	4680      	mov	r8, r0
 80136ae:	4689      	mov	r9, r1
 80136b0:	2e0f      	cmp	r6, #15
 80136b2:	dc38      	bgt.n	8013726 <_strtod_l+0x44e>
 80136b4:	9b08      	ldr	r3, [sp, #32]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	f43f ae49 	beq.w	801334e <_strtod_l+0x76>
 80136bc:	dd24      	ble.n	8013708 <_strtod_l+0x430>
 80136be:	2b16      	cmp	r3, #22
 80136c0:	dc0b      	bgt.n	80136da <_strtod_l+0x402>
 80136c2:	4968      	ldr	r1, [pc, #416]	; (8013864 <_strtod_l+0x58c>)
 80136c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80136c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136cc:	4642      	mov	r2, r8
 80136ce:	464b      	mov	r3, r9
 80136d0:	f7ec ff92 	bl	80005f8 <__aeabi_dmul>
 80136d4:	4680      	mov	r8, r0
 80136d6:	4689      	mov	r9, r1
 80136d8:	e639      	b.n	801334e <_strtod_l+0x76>
 80136da:	9a08      	ldr	r2, [sp, #32]
 80136dc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80136e0:	4293      	cmp	r3, r2
 80136e2:	db20      	blt.n	8013726 <_strtod_l+0x44e>
 80136e4:	4c5f      	ldr	r4, [pc, #380]	; (8013864 <_strtod_l+0x58c>)
 80136e6:	f1c6 060f 	rsb	r6, r6, #15
 80136ea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80136ee:	4642      	mov	r2, r8
 80136f0:	464b      	mov	r3, r9
 80136f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136f6:	f7ec ff7f 	bl	80005f8 <__aeabi_dmul>
 80136fa:	9b08      	ldr	r3, [sp, #32]
 80136fc:	1b9e      	subs	r6, r3, r6
 80136fe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013702:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013706:	e7e3      	b.n	80136d0 <_strtod_l+0x3f8>
 8013708:	9b08      	ldr	r3, [sp, #32]
 801370a:	3316      	adds	r3, #22
 801370c:	db0b      	blt.n	8013726 <_strtod_l+0x44e>
 801370e:	9b05      	ldr	r3, [sp, #20]
 8013710:	1bdf      	subs	r7, r3, r7
 8013712:	4b54      	ldr	r3, [pc, #336]	; (8013864 <_strtod_l+0x58c>)
 8013714:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013718:	e9d7 2300 	ldrd	r2, r3, [r7]
 801371c:	4640      	mov	r0, r8
 801371e:	4649      	mov	r1, r9
 8013720:	f7ed f894 	bl	800084c <__aeabi_ddiv>
 8013724:	e7d6      	b.n	80136d4 <_strtod_l+0x3fc>
 8013726:	9b08      	ldr	r3, [sp, #32]
 8013728:	1b75      	subs	r5, r6, r5
 801372a:	441d      	add	r5, r3
 801372c:	2d00      	cmp	r5, #0
 801372e:	dd70      	ble.n	8013812 <_strtod_l+0x53a>
 8013730:	f015 030f 	ands.w	r3, r5, #15
 8013734:	d00a      	beq.n	801374c <_strtod_l+0x474>
 8013736:	494b      	ldr	r1, [pc, #300]	; (8013864 <_strtod_l+0x58c>)
 8013738:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801373c:	4642      	mov	r2, r8
 801373e:	464b      	mov	r3, r9
 8013740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013744:	f7ec ff58 	bl	80005f8 <__aeabi_dmul>
 8013748:	4680      	mov	r8, r0
 801374a:	4689      	mov	r9, r1
 801374c:	f035 050f 	bics.w	r5, r5, #15
 8013750:	d04d      	beq.n	80137ee <_strtod_l+0x516>
 8013752:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013756:	dd22      	ble.n	801379e <_strtod_l+0x4c6>
 8013758:	2500      	movs	r5, #0
 801375a:	46ab      	mov	fp, r5
 801375c:	9509      	str	r5, [sp, #36]	; 0x24
 801375e:	9505      	str	r5, [sp, #20]
 8013760:	2322      	movs	r3, #34	; 0x22
 8013762:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801386c <_strtod_l+0x594>
 8013766:	6023      	str	r3, [r4, #0]
 8013768:	f04f 0800 	mov.w	r8, #0
 801376c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801376e:	2b00      	cmp	r3, #0
 8013770:	f43f aded 	beq.w	801334e <_strtod_l+0x76>
 8013774:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013776:	4620      	mov	r0, r4
 8013778:	f003 f82e 	bl	80167d8 <_Bfree>
 801377c:	9905      	ldr	r1, [sp, #20]
 801377e:	4620      	mov	r0, r4
 8013780:	f003 f82a 	bl	80167d8 <_Bfree>
 8013784:	4659      	mov	r1, fp
 8013786:	4620      	mov	r0, r4
 8013788:	f003 f826 	bl	80167d8 <_Bfree>
 801378c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801378e:	4620      	mov	r0, r4
 8013790:	f003 f822 	bl	80167d8 <_Bfree>
 8013794:	4629      	mov	r1, r5
 8013796:	4620      	mov	r0, r4
 8013798:	f003 f81e 	bl	80167d8 <_Bfree>
 801379c:	e5d7      	b.n	801334e <_strtod_l+0x76>
 801379e:	4b32      	ldr	r3, [pc, #200]	; (8013868 <_strtod_l+0x590>)
 80137a0:	9304      	str	r3, [sp, #16]
 80137a2:	2300      	movs	r3, #0
 80137a4:	112d      	asrs	r5, r5, #4
 80137a6:	4640      	mov	r0, r8
 80137a8:	4649      	mov	r1, r9
 80137aa:	469a      	mov	sl, r3
 80137ac:	2d01      	cmp	r5, #1
 80137ae:	dc21      	bgt.n	80137f4 <_strtod_l+0x51c>
 80137b0:	b10b      	cbz	r3, 80137b6 <_strtod_l+0x4de>
 80137b2:	4680      	mov	r8, r0
 80137b4:	4689      	mov	r9, r1
 80137b6:	492c      	ldr	r1, [pc, #176]	; (8013868 <_strtod_l+0x590>)
 80137b8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80137bc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80137c0:	4642      	mov	r2, r8
 80137c2:	464b      	mov	r3, r9
 80137c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137c8:	f7ec ff16 	bl	80005f8 <__aeabi_dmul>
 80137cc:	4b27      	ldr	r3, [pc, #156]	; (801386c <_strtod_l+0x594>)
 80137ce:	460a      	mov	r2, r1
 80137d0:	400b      	ands	r3, r1
 80137d2:	4927      	ldr	r1, [pc, #156]	; (8013870 <_strtod_l+0x598>)
 80137d4:	428b      	cmp	r3, r1
 80137d6:	4680      	mov	r8, r0
 80137d8:	d8be      	bhi.n	8013758 <_strtod_l+0x480>
 80137da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80137de:	428b      	cmp	r3, r1
 80137e0:	bf86      	itte	hi
 80137e2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013874 <_strtod_l+0x59c>
 80137e6:	f04f 38ff 	movhi.w	r8, #4294967295
 80137ea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80137ee:	2300      	movs	r3, #0
 80137f0:	9304      	str	r3, [sp, #16]
 80137f2:	e07b      	b.n	80138ec <_strtod_l+0x614>
 80137f4:	07ea      	lsls	r2, r5, #31
 80137f6:	d505      	bpl.n	8013804 <_strtod_l+0x52c>
 80137f8:	9b04      	ldr	r3, [sp, #16]
 80137fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137fe:	f7ec fefb 	bl	80005f8 <__aeabi_dmul>
 8013802:	2301      	movs	r3, #1
 8013804:	9a04      	ldr	r2, [sp, #16]
 8013806:	3208      	adds	r2, #8
 8013808:	f10a 0a01 	add.w	sl, sl, #1
 801380c:	106d      	asrs	r5, r5, #1
 801380e:	9204      	str	r2, [sp, #16]
 8013810:	e7cc      	b.n	80137ac <_strtod_l+0x4d4>
 8013812:	d0ec      	beq.n	80137ee <_strtod_l+0x516>
 8013814:	426d      	negs	r5, r5
 8013816:	f015 020f 	ands.w	r2, r5, #15
 801381a:	d00a      	beq.n	8013832 <_strtod_l+0x55a>
 801381c:	4b11      	ldr	r3, [pc, #68]	; (8013864 <_strtod_l+0x58c>)
 801381e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013822:	4640      	mov	r0, r8
 8013824:	4649      	mov	r1, r9
 8013826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801382a:	f7ed f80f 	bl	800084c <__aeabi_ddiv>
 801382e:	4680      	mov	r8, r0
 8013830:	4689      	mov	r9, r1
 8013832:	112d      	asrs	r5, r5, #4
 8013834:	d0db      	beq.n	80137ee <_strtod_l+0x516>
 8013836:	2d1f      	cmp	r5, #31
 8013838:	dd1e      	ble.n	8013878 <_strtod_l+0x5a0>
 801383a:	2500      	movs	r5, #0
 801383c:	46ab      	mov	fp, r5
 801383e:	9509      	str	r5, [sp, #36]	; 0x24
 8013840:	9505      	str	r5, [sp, #20]
 8013842:	2322      	movs	r3, #34	; 0x22
 8013844:	f04f 0800 	mov.w	r8, #0
 8013848:	f04f 0900 	mov.w	r9, #0
 801384c:	6023      	str	r3, [r4, #0]
 801384e:	e78d      	b.n	801376c <_strtod_l+0x494>
 8013850:	0801aeae 	.word	0x0801aeae
 8013854:	0801ad64 	.word	0x0801ad64
 8013858:	0801aea6 	.word	0x0801aea6
 801385c:	0801af92 	.word	0x0801af92
 8013860:	0801af8e 	.word	0x0801af8e
 8013864:	0801b0e8 	.word	0x0801b0e8
 8013868:	0801b0c0 	.word	0x0801b0c0
 801386c:	7ff00000 	.word	0x7ff00000
 8013870:	7ca00000 	.word	0x7ca00000
 8013874:	7fefffff 	.word	0x7fefffff
 8013878:	f015 0310 	ands.w	r3, r5, #16
 801387c:	bf18      	it	ne
 801387e:	236a      	movne	r3, #106	; 0x6a
 8013880:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013c24 <_strtod_l+0x94c>
 8013884:	9304      	str	r3, [sp, #16]
 8013886:	4640      	mov	r0, r8
 8013888:	4649      	mov	r1, r9
 801388a:	2300      	movs	r3, #0
 801388c:	07ea      	lsls	r2, r5, #31
 801388e:	d504      	bpl.n	801389a <_strtod_l+0x5c2>
 8013890:	e9da 2300 	ldrd	r2, r3, [sl]
 8013894:	f7ec feb0 	bl	80005f8 <__aeabi_dmul>
 8013898:	2301      	movs	r3, #1
 801389a:	106d      	asrs	r5, r5, #1
 801389c:	f10a 0a08 	add.w	sl, sl, #8
 80138a0:	d1f4      	bne.n	801388c <_strtod_l+0x5b4>
 80138a2:	b10b      	cbz	r3, 80138a8 <_strtod_l+0x5d0>
 80138a4:	4680      	mov	r8, r0
 80138a6:	4689      	mov	r9, r1
 80138a8:	9b04      	ldr	r3, [sp, #16]
 80138aa:	b1bb      	cbz	r3, 80138dc <_strtod_l+0x604>
 80138ac:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80138b0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	4649      	mov	r1, r9
 80138b8:	dd10      	ble.n	80138dc <_strtod_l+0x604>
 80138ba:	2b1f      	cmp	r3, #31
 80138bc:	f340 811e 	ble.w	8013afc <_strtod_l+0x824>
 80138c0:	2b34      	cmp	r3, #52	; 0x34
 80138c2:	bfde      	ittt	le
 80138c4:	f04f 33ff 	movle.w	r3, #4294967295
 80138c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80138cc:	4093      	lslle	r3, r2
 80138ce:	f04f 0800 	mov.w	r8, #0
 80138d2:	bfcc      	ite	gt
 80138d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80138d8:	ea03 0901 	andle.w	r9, r3, r1
 80138dc:	2200      	movs	r2, #0
 80138de:	2300      	movs	r3, #0
 80138e0:	4640      	mov	r0, r8
 80138e2:	4649      	mov	r1, r9
 80138e4:	f7ed f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80138e8:	2800      	cmp	r0, #0
 80138ea:	d1a6      	bne.n	801383a <_strtod_l+0x562>
 80138ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138ee:	9300      	str	r3, [sp, #0]
 80138f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80138f2:	4633      	mov	r3, r6
 80138f4:	465a      	mov	r2, fp
 80138f6:	4620      	mov	r0, r4
 80138f8:	f002 ffd6 	bl	80168a8 <__s2b>
 80138fc:	9009      	str	r0, [sp, #36]	; 0x24
 80138fe:	2800      	cmp	r0, #0
 8013900:	f43f af2a 	beq.w	8013758 <_strtod_l+0x480>
 8013904:	9a08      	ldr	r2, [sp, #32]
 8013906:	9b05      	ldr	r3, [sp, #20]
 8013908:	2a00      	cmp	r2, #0
 801390a:	eba3 0307 	sub.w	r3, r3, r7
 801390e:	bfa8      	it	ge
 8013910:	2300      	movge	r3, #0
 8013912:	930c      	str	r3, [sp, #48]	; 0x30
 8013914:	2500      	movs	r5, #0
 8013916:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801391a:	9312      	str	r3, [sp, #72]	; 0x48
 801391c:	46ab      	mov	fp, r5
 801391e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013920:	4620      	mov	r0, r4
 8013922:	6859      	ldr	r1, [r3, #4]
 8013924:	f002 ff18 	bl	8016758 <_Balloc>
 8013928:	9005      	str	r0, [sp, #20]
 801392a:	2800      	cmp	r0, #0
 801392c:	f43f af18 	beq.w	8013760 <_strtod_l+0x488>
 8013930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013932:	691a      	ldr	r2, [r3, #16]
 8013934:	3202      	adds	r2, #2
 8013936:	f103 010c 	add.w	r1, r3, #12
 801393a:	0092      	lsls	r2, r2, #2
 801393c:	300c      	adds	r0, #12
 801393e:	f001 fca0 	bl	8015282 <memcpy>
 8013942:	ec49 8b10 	vmov	d0, r8, r9
 8013946:	aa18      	add	r2, sp, #96	; 0x60
 8013948:	a917      	add	r1, sp, #92	; 0x5c
 801394a:	4620      	mov	r0, r4
 801394c:	f003 fae0 	bl	8016f10 <__d2b>
 8013950:	ec49 8b18 	vmov	d8, r8, r9
 8013954:	9016      	str	r0, [sp, #88]	; 0x58
 8013956:	2800      	cmp	r0, #0
 8013958:	f43f af02 	beq.w	8013760 <_strtod_l+0x488>
 801395c:	2101      	movs	r1, #1
 801395e:	4620      	mov	r0, r4
 8013960:	f003 f83a 	bl	80169d8 <__i2b>
 8013964:	4683      	mov	fp, r0
 8013966:	2800      	cmp	r0, #0
 8013968:	f43f aefa 	beq.w	8013760 <_strtod_l+0x488>
 801396c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801396e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013970:	2e00      	cmp	r6, #0
 8013972:	bfab      	itete	ge
 8013974:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013976:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013978:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801397a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801397e:	bfac      	ite	ge
 8013980:	eb06 0a03 	addge.w	sl, r6, r3
 8013984:	1b9f      	sublt	r7, r3, r6
 8013986:	9b04      	ldr	r3, [sp, #16]
 8013988:	1af6      	subs	r6, r6, r3
 801398a:	4416      	add	r6, r2
 801398c:	4ba0      	ldr	r3, [pc, #640]	; (8013c10 <_strtod_l+0x938>)
 801398e:	3e01      	subs	r6, #1
 8013990:	429e      	cmp	r6, r3
 8013992:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013996:	f280 80c4 	bge.w	8013b22 <_strtod_l+0x84a>
 801399a:	1b9b      	subs	r3, r3, r6
 801399c:	2b1f      	cmp	r3, #31
 801399e:	eba2 0203 	sub.w	r2, r2, r3
 80139a2:	f04f 0101 	mov.w	r1, #1
 80139a6:	f300 80b0 	bgt.w	8013b0a <_strtod_l+0x832>
 80139aa:	fa01 f303 	lsl.w	r3, r1, r3
 80139ae:	930e      	str	r3, [sp, #56]	; 0x38
 80139b0:	2300      	movs	r3, #0
 80139b2:	930d      	str	r3, [sp, #52]	; 0x34
 80139b4:	eb0a 0602 	add.w	r6, sl, r2
 80139b8:	9b04      	ldr	r3, [sp, #16]
 80139ba:	45b2      	cmp	sl, r6
 80139bc:	4417      	add	r7, r2
 80139be:	441f      	add	r7, r3
 80139c0:	4653      	mov	r3, sl
 80139c2:	bfa8      	it	ge
 80139c4:	4633      	movge	r3, r6
 80139c6:	42bb      	cmp	r3, r7
 80139c8:	bfa8      	it	ge
 80139ca:	463b      	movge	r3, r7
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	bfc2      	ittt	gt
 80139d0:	1af6      	subgt	r6, r6, r3
 80139d2:	1aff      	subgt	r7, r7, r3
 80139d4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80139d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139da:	2b00      	cmp	r3, #0
 80139dc:	dd17      	ble.n	8013a0e <_strtod_l+0x736>
 80139de:	4659      	mov	r1, fp
 80139e0:	461a      	mov	r2, r3
 80139e2:	4620      	mov	r0, r4
 80139e4:	f003 f8b8 	bl	8016b58 <__pow5mult>
 80139e8:	4683      	mov	fp, r0
 80139ea:	2800      	cmp	r0, #0
 80139ec:	f43f aeb8 	beq.w	8013760 <_strtod_l+0x488>
 80139f0:	4601      	mov	r1, r0
 80139f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80139f4:	4620      	mov	r0, r4
 80139f6:	f003 f805 	bl	8016a04 <__multiply>
 80139fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80139fc:	2800      	cmp	r0, #0
 80139fe:	f43f aeaf 	beq.w	8013760 <_strtod_l+0x488>
 8013a02:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013a04:	4620      	mov	r0, r4
 8013a06:	f002 fee7 	bl	80167d8 <_Bfree>
 8013a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a0c:	9316      	str	r3, [sp, #88]	; 0x58
 8013a0e:	2e00      	cmp	r6, #0
 8013a10:	f300 808c 	bgt.w	8013b2c <_strtod_l+0x854>
 8013a14:	9b08      	ldr	r3, [sp, #32]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	dd08      	ble.n	8013a2c <_strtod_l+0x754>
 8013a1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a1c:	9905      	ldr	r1, [sp, #20]
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f003 f89a 	bl	8016b58 <__pow5mult>
 8013a24:	9005      	str	r0, [sp, #20]
 8013a26:	2800      	cmp	r0, #0
 8013a28:	f43f ae9a 	beq.w	8013760 <_strtod_l+0x488>
 8013a2c:	2f00      	cmp	r7, #0
 8013a2e:	dd08      	ble.n	8013a42 <_strtod_l+0x76a>
 8013a30:	9905      	ldr	r1, [sp, #20]
 8013a32:	463a      	mov	r2, r7
 8013a34:	4620      	mov	r0, r4
 8013a36:	f003 f8e9 	bl	8016c0c <__lshift>
 8013a3a:	9005      	str	r0, [sp, #20]
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	f43f ae8f 	beq.w	8013760 <_strtod_l+0x488>
 8013a42:	f1ba 0f00 	cmp.w	sl, #0
 8013a46:	dd08      	ble.n	8013a5a <_strtod_l+0x782>
 8013a48:	4659      	mov	r1, fp
 8013a4a:	4652      	mov	r2, sl
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f003 f8dd 	bl	8016c0c <__lshift>
 8013a52:	4683      	mov	fp, r0
 8013a54:	2800      	cmp	r0, #0
 8013a56:	f43f ae83 	beq.w	8013760 <_strtod_l+0x488>
 8013a5a:	9a05      	ldr	r2, [sp, #20]
 8013a5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013a5e:	4620      	mov	r0, r4
 8013a60:	f003 f95c 	bl	8016d1c <__mdiff>
 8013a64:	4605      	mov	r5, r0
 8013a66:	2800      	cmp	r0, #0
 8013a68:	f43f ae7a 	beq.w	8013760 <_strtod_l+0x488>
 8013a6c:	68c3      	ldr	r3, [r0, #12]
 8013a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a70:	2300      	movs	r3, #0
 8013a72:	60c3      	str	r3, [r0, #12]
 8013a74:	4659      	mov	r1, fp
 8013a76:	f003 f935 	bl	8016ce4 <__mcmp>
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	da60      	bge.n	8013b40 <_strtod_l+0x868>
 8013a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a80:	ea53 0308 	orrs.w	r3, r3, r8
 8013a84:	f040 8084 	bne.w	8013b90 <_strtod_l+0x8b8>
 8013a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d17f      	bne.n	8013b90 <_strtod_l+0x8b8>
 8013a90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013a94:	0d1b      	lsrs	r3, r3, #20
 8013a96:	051b      	lsls	r3, r3, #20
 8013a98:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013a9c:	d978      	bls.n	8013b90 <_strtod_l+0x8b8>
 8013a9e:	696b      	ldr	r3, [r5, #20]
 8013aa0:	b913      	cbnz	r3, 8013aa8 <_strtod_l+0x7d0>
 8013aa2:	692b      	ldr	r3, [r5, #16]
 8013aa4:	2b01      	cmp	r3, #1
 8013aa6:	dd73      	ble.n	8013b90 <_strtod_l+0x8b8>
 8013aa8:	4629      	mov	r1, r5
 8013aaa:	2201      	movs	r2, #1
 8013aac:	4620      	mov	r0, r4
 8013aae:	f003 f8ad 	bl	8016c0c <__lshift>
 8013ab2:	4659      	mov	r1, fp
 8013ab4:	4605      	mov	r5, r0
 8013ab6:	f003 f915 	bl	8016ce4 <__mcmp>
 8013aba:	2800      	cmp	r0, #0
 8013abc:	dd68      	ble.n	8013b90 <_strtod_l+0x8b8>
 8013abe:	9904      	ldr	r1, [sp, #16]
 8013ac0:	4a54      	ldr	r2, [pc, #336]	; (8013c14 <_strtod_l+0x93c>)
 8013ac2:	464b      	mov	r3, r9
 8013ac4:	2900      	cmp	r1, #0
 8013ac6:	f000 8084 	beq.w	8013bd2 <_strtod_l+0x8fa>
 8013aca:	ea02 0109 	and.w	r1, r2, r9
 8013ace:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013ad2:	dc7e      	bgt.n	8013bd2 <_strtod_l+0x8fa>
 8013ad4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013ad8:	f77f aeb3 	ble.w	8013842 <_strtod_l+0x56a>
 8013adc:	4b4e      	ldr	r3, [pc, #312]	; (8013c18 <_strtod_l+0x940>)
 8013ade:	4640      	mov	r0, r8
 8013ae0:	4649      	mov	r1, r9
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	f7ec fd88 	bl	80005f8 <__aeabi_dmul>
 8013ae8:	4b4a      	ldr	r3, [pc, #296]	; (8013c14 <_strtod_l+0x93c>)
 8013aea:	400b      	ands	r3, r1
 8013aec:	4680      	mov	r8, r0
 8013aee:	4689      	mov	r9, r1
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	f47f ae3f 	bne.w	8013774 <_strtod_l+0x49c>
 8013af6:	2322      	movs	r3, #34	; 0x22
 8013af8:	6023      	str	r3, [r4, #0]
 8013afa:	e63b      	b.n	8013774 <_strtod_l+0x49c>
 8013afc:	f04f 32ff 	mov.w	r2, #4294967295
 8013b00:	fa02 f303 	lsl.w	r3, r2, r3
 8013b04:	ea03 0808 	and.w	r8, r3, r8
 8013b08:	e6e8      	b.n	80138dc <_strtod_l+0x604>
 8013b0a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013b0e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013b12:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013b16:	36e2      	adds	r6, #226	; 0xe2
 8013b18:	fa01 f306 	lsl.w	r3, r1, r6
 8013b1c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013b20:	e748      	b.n	80139b4 <_strtod_l+0x6dc>
 8013b22:	2100      	movs	r1, #0
 8013b24:	2301      	movs	r3, #1
 8013b26:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013b2a:	e743      	b.n	80139b4 <_strtod_l+0x6dc>
 8013b2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013b2e:	4632      	mov	r2, r6
 8013b30:	4620      	mov	r0, r4
 8013b32:	f003 f86b 	bl	8016c0c <__lshift>
 8013b36:	9016      	str	r0, [sp, #88]	; 0x58
 8013b38:	2800      	cmp	r0, #0
 8013b3a:	f47f af6b 	bne.w	8013a14 <_strtod_l+0x73c>
 8013b3e:	e60f      	b.n	8013760 <_strtod_l+0x488>
 8013b40:	46ca      	mov	sl, r9
 8013b42:	d171      	bne.n	8013c28 <_strtod_l+0x950>
 8013b44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013b4a:	b352      	cbz	r2, 8013ba2 <_strtod_l+0x8ca>
 8013b4c:	4a33      	ldr	r2, [pc, #204]	; (8013c1c <_strtod_l+0x944>)
 8013b4e:	4293      	cmp	r3, r2
 8013b50:	d12a      	bne.n	8013ba8 <_strtod_l+0x8d0>
 8013b52:	9b04      	ldr	r3, [sp, #16]
 8013b54:	4641      	mov	r1, r8
 8013b56:	b1fb      	cbz	r3, 8013b98 <_strtod_l+0x8c0>
 8013b58:	4b2e      	ldr	r3, [pc, #184]	; (8013c14 <_strtod_l+0x93c>)
 8013b5a:	ea09 0303 	and.w	r3, r9, r3
 8013b5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013b62:	f04f 32ff 	mov.w	r2, #4294967295
 8013b66:	d81a      	bhi.n	8013b9e <_strtod_l+0x8c6>
 8013b68:	0d1b      	lsrs	r3, r3, #20
 8013b6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8013b72:	4299      	cmp	r1, r3
 8013b74:	d118      	bne.n	8013ba8 <_strtod_l+0x8d0>
 8013b76:	4b2a      	ldr	r3, [pc, #168]	; (8013c20 <_strtod_l+0x948>)
 8013b78:	459a      	cmp	sl, r3
 8013b7a:	d102      	bne.n	8013b82 <_strtod_l+0x8aa>
 8013b7c:	3101      	adds	r1, #1
 8013b7e:	f43f adef 	beq.w	8013760 <_strtod_l+0x488>
 8013b82:	4b24      	ldr	r3, [pc, #144]	; (8013c14 <_strtod_l+0x93c>)
 8013b84:	ea0a 0303 	and.w	r3, sl, r3
 8013b88:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013b8c:	f04f 0800 	mov.w	r8, #0
 8013b90:	9b04      	ldr	r3, [sp, #16]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d1a2      	bne.n	8013adc <_strtod_l+0x804>
 8013b96:	e5ed      	b.n	8013774 <_strtod_l+0x49c>
 8013b98:	f04f 33ff 	mov.w	r3, #4294967295
 8013b9c:	e7e9      	b.n	8013b72 <_strtod_l+0x89a>
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	e7e7      	b.n	8013b72 <_strtod_l+0x89a>
 8013ba2:	ea53 0308 	orrs.w	r3, r3, r8
 8013ba6:	d08a      	beq.n	8013abe <_strtod_l+0x7e6>
 8013ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013baa:	b1e3      	cbz	r3, 8013be6 <_strtod_l+0x90e>
 8013bac:	ea13 0f0a 	tst.w	r3, sl
 8013bb0:	d0ee      	beq.n	8013b90 <_strtod_l+0x8b8>
 8013bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bb4:	9a04      	ldr	r2, [sp, #16]
 8013bb6:	4640      	mov	r0, r8
 8013bb8:	4649      	mov	r1, r9
 8013bba:	b1c3      	cbz	r3, 8013bee <_strtod_l+0x916>
 8013bbc:	f7ff fb70 	bl	80132a0 <sulp>
 8013bc0:	4602      	mov	r2, r0
 8013bc2:	460b      	mov	r3, r1
 8013bc4:	ec51 0b18 	vmov	r0, r1, d8
 8013bc8:	f7ec fb60 	bl	800028c <__adddf3>
 8013bcc:	4680      	mov	r8, r0
 8013bce:	4689      	mov	r9, r1
 8013bd0:	e7de      	b.n	8013b90 <_strtod_l+0x8b8>
 8013bd2:	4013      	ands	r3, r2
 8013bd4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013bd8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013bdc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013be0:	f04f 38ff 	mov.w	r8, #4294967295
 8013be4:	e7d4      	b.n	8013b90 <_strtod_l+0x8b8>
 8013be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013be8:	ea13 0f08 	tst.w	r3, r8
 8013bec:	e7e0      	b.n	8013bb0 <_strtod_l+0x8d8>
 8013bee:	f7ff fb57 	bl	80132a0 <sulp>
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	460b      	mov	r3, r1
 8013bf6:	ec51 0b18 	vmov	r0, r1, d8
 8013bfa:	f7ec fb45 	bl	8000288 <__aeabi_dsub>
 8013bfe:	2200      	movs	r2, #0
 8013c00:	2300      	movs	r3, #0
 8013c02:	4680      	mov	r8, r0
 8013c04:	4689      	mov	r9, r1
 8013c06:	f7ec ff5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d0c0      	beq.n	8013b90 <_strtod_l+0x8b8>
 8013c0e:	e618      	b.n	8013842 <_strtod_l+0x56a>
 8013c10:	fffffc02 	.word	0xfffffc02
 8013c14:	7ff00000 	.word	0x7ff00000
 8013c18:	39500000 	.word	0x39500000
 8013c1c:	000fffff 	.word	0x000fffff
 8013c20:	7fefffff 	.word	0x7fefffff
 8013c24:	0801ad78 	.word	0x0801ad78
 8013c28:	4659      	mov	r1, fp
 8013c2a:	4628      	mov	r0, r5
 8013c2c:	f003 f9ca 	bl	8016fc4 <__ratio>
 8013c30:	ec57 6b10 	vmov	r6, r7, d0
 8013c34:	ee10 0a10 	vmov	r0, s0
 8013c38:	2200      	movs	r2, #0
 8013c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c3e:	4639      	mov	r1, r7
 8013c40:	f7ec ff56 	bl	8000af0 <__aeabi_dcmple>
 8013c44:	2800      	cmp	r0, #0
 8013c46:	d071      	beq.n	8013d2c <_strtod_l+0xa54>
 8013c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d17c      	bne.n	8013d48 <_strtod_l+0xa70>
 8013c4e:	f1b8 0f00 	cmp.w	r8, #0
 8013c52:	d15a      	bne.n	8013d0a <_strtod_l+0xa32>
 8013c54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d15d      	bne.n	8013d18 <_strtod_l+0xa40>
 8013c5c:	4b90      	ldr	r3, [pc, #576]	; (8013ea0 <_strtod_l+0xbc8>)
 8013c5e:	2200      	movs	r2, #0
 8013c60:	4630      	mov	r0, r6
 8013c62:	4639      	mov	r1, r7
 8013c64:	f7ec ff3a 	bl	8000adc <__aeabi_dcmplt>
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	d15c      	bne.n	8013d26 <_strtod_l+0xa4e>
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	4639      	mov	r1, r7
 8013c70:	4b8c      	ldr	r3, [pc, #560]	; (8013ea4 <_strtod_l+0xbcc>)
 8013c72:	2200      	movs	r2, #0
 8013c74:	f7ec fcc0 	bl	80005f8 <__aeabi_dmul>
 8013c78:	4606      	mov	r6, r0
 8013c7a:	460f      	mov	r7, r1
 8013c7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013c80:	9606      	str	r6, [sp, #24]
 8013c82:	9307      	str	r3, [sp, #28]
 8013c84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013c8c:	4b86      	ldr	r3, [pc, #536]	; (8013ea8 <_strtod_l+0xbd0>)
 8013c8e:	ea0a 0303 	and.w	r3, sl, r3
 8013c92:	930d      	str	r3, [sp, #52]	; 0x34
 8013c94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c96:	4b85      	ldr	r3, [pc, #532]	; (8013eac <_strtod_l+0xbd4>)
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	f040 8090 	bne.w	8013dbe <_strtod_l+0xae6>
 8013c9e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013ca2:	ec49 8b10 	vmov	d0, r8, r9
 8013ca6:	f003 f8c3 	bl	8016e30 <__ulp>
 8013caa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cae:	ec51 0b10 	vmov	r0, r1, d0
 8013cb2:	f7ec fca1 	bl	80005f8 <__aeabi_dmul>
 8013cb6:	4642      	mov	r2, r8
 8013cb8:	464b      	mov	r3, r9
 8013cba:	f7ec fae7 	bl	800028c <__adddf3>
 8013cbe:	460b      	mov	r3, r1
 8013cc0:	4979      	ldr	r1, [pc, #484]	; (8013ea8 <_strtod_l+0xbd0>)
 8013cc2:	4a7b      	ldr	r2, [pc, #492]	; (8013eb0 <_strtod_l+0xbd8>)
 8013cc4:	4019      	ands	r1, r3
 8013cc6:	4291      	cmp	r1, r2
 8013cc8:	4680      	mov	r8, r0
 8013cca:	d944      	bls.n	8013d56 <_strtod_l+0xa7e>
 8013ccc:	ee18 2a90 	vmov	r2, s17
 8013cd0:	4b78      	ldr	r3, [pc, #480]	; (8013eb4 <_strtod_l+0xbdc>)
 8013cd2:	429a      	cmp	r2, r3
 8013cd4:	d104      	bne.n	8013ce0 <_strtod_l+0xa08>
 8013cd6:	ee18 3a10 	vmov	r3, s16
 8013cda:	3301      	adds	r3, #1
 8013cdc:	f43f ad40 	beq.w	8013760 <_strtod_l+0x488>
 8013ce0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8013eb4 <_strtod_l+0xbdc>
 8013ce4:	f04f 38ff 	mov.w	r8, #4294967295
 8013ce8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013cea:	4620      	mov	r0, r4
 8013cec:	f002 fd74 	bl	80167d8 <_Bfree>
 8013cf0:	9905      	ldr	r1, [sp, #20]
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	f002 fd70 	bl	80167d8 <_Bfree>
 8013cf8:	4659      	mov	r1, fp
 8013cfa:	4620      	mov	r0, r4
 8013cfc:	f002 fd6c 	bl	80167d8 <_Bfree>
 8013d00:	4629      	mov	r1, r5
 8013d02:	4620      	mov	r0, r4
 8013d04:	f002 fd68 	bl	80167d8 <_Bfree>
 8013d08:	e609      	b.n	801391e <_strtod_l+0x646>
 8013d0a:	f1b8 0f01 	cmp.w	r8, #1
 8013d0e:	d103      	bne.n	8013d18 <_strtod_l+0xa40>
 8013d10:	f1b9 0f00 	cmp.w	r9, #0
 8013d14:	f43f ad95 	beq.w	8013842 <_strtod_l+0x56a>
 8013d18:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8013e70 <_strtod_l+0xb98>
 8013d1c:	4f60      	ldr	r7, [pc, #384]	; (8013ea0 <_strtod_l+0xbc8>)
 8013d1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013d22:	2600      	movs	r6, #0
 8013d24:	e7ae      	b.n	8013c84 <_strtod_l+0x9ac>
 8013d26:	4f5f      	ldr	r7, [pc, #380]	; (8013ea4 <_strtod_l+0xbcc>)
 8013d28:	2600      	movs	r6, #0
 8013d2a:	e7a7      	b.n	8013c7c <_strtod_l+0x9a4>
 8013d2c:	4b5d      	ldr	r3, [pc, #372]	; (8013ea4 <_strtod_l+0xbcc>)
 8013d2e:	4630      	mov	r0, r6
 8013d30:	4639      	mov	r1, r7
 8013d32:	2200      	movs	r2, #0
 8013d34:	f7ec fc60 	bl	80005f8 <__aeabi_dmul>
 8013d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d3a:	4606      	mov	r6, r0
 8013d3c:	460f      	mov	r7, r1
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d09c      	beq.n	8013c7c <_strtod_l+0x9a4>
 8013d42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013d46:	e79d      	b.n	8013c84 <_strtod_l+0x9ac>
 8013d48:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8013e78 <_strtod_l+0xba0>
 8013d4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013d50:	ec57 6b17 	vmov	r6, r7, d7
 8013d54:	e796      	b.n	8013c84 <_strtod_l+0x9ac>
 8013d56:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013d5a:	9b04      	ldr	r3, [sp, #16]
 8013d5c:	46ca      	mov	sl, r9
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d1c2      	bne.n	8013ce8 <_strtod_l+0xa10>
 8013d62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013d66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013d68:	0d1b      	lsrs	r3, r3, #20
 8013d6a:	051b      	lsls	r3, r3, #20
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d1bb      	bne.n	8013ce8 <_strtod_l+0xa10>
 8013d70:	4630      	mov	r0, r6
 8013d72:	4639      	mov	r1, r7
 8013d74:	f7ec ffa0 	bl	8000cb8 <__aeabi_d2lz>
 8013d78:	f7ec fc10 	bl	800059c <__aeabi_l2d>
 8013d7c:	4602      	mov	r2, r0
 8013d7e:	460b      	mov	r3, r1
 8013d80:	4630      	mov	r0, r6
 8013d82:	4639      	mov	r1, r7
 8013d84:	f7ec fa80 	bl	8000288 <__aeabi_dsub>
 8013d88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d8e:	ea43 0308 	orr.w	r3, r3, r8
 8013d92:	4313      	orrs	r3, r2
 8013d94:	4606      	mov	r6, r0
 8013d96:	460f      	mov	r7, r1
 8013d98:	d054      	beq.n	8013e44 <_strtod_l+0xb6c>
 8013d9a:	a339      	add	r3, pc, #228	; (adr r3, 8013e80 <_strtod_l+0xba8>)
 8013d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da0:	f7ec fe9c 	bl	8000adc <__aeabi_dcmplt>
 8013da4:	2800      	cmp	r0, #0
 8013da6:	f47f ace5 	bne.w	8013774 <_strtod_l+0x49c>
 8013daa:	a337      	add	r3, pc, #220	; (adr r3, 8013e88 <_strtod_l+0xbb0>)
 8013dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db0:	4630      	mov	r0, r6
 8013db2:	4639      	mov	r1, r7
 8013db4:	f7ec feb0 	bl	8000b18 <__aeabi_dcmpgt>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	d095      	beq.n	8013ce8 <_strtod_l+0xa10>
 8013dbc:	e4da      	b.n	8013774 <_strtod_l+0x49c>
 8013dbe:	9b04      	ldr	r3, [sp, #16]
 8013dc0:	b333      	cbz	r3, 8013e10 <_strtod_l+0xb38>
 8013dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dc4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013dc8:	d822      	bhi.n	8013e10 <_strtod_l+0xb38>
 8013dca:	a331      	add	r3, pc, #196	; (adr r3, 8013e90 <_strtod_l+0xbb8>)
 8013dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	4639      	mov	r1, r7
 8013dd4:	f7ec fe8c 	bl	8000af0 <__aeabi_dcmple>
 8013dd8:	b1a0      	cbz	r0, 8013e04 <_strtod_l+0xb2c>
 8013dda:	4639      	mov	r1, r7
 8013ddc:	4630      	mov	r0, r6
 8013dde:	f7ec fee3 	bl	8000ba8 <__aeabi_d2uiz>
 8013de2:	2801      	cmp	r0, #1
 8013de4:	bf38      	it	cc
 8013de6:	2001      	movcc	r0, #1
 8013de8:	f7ec fb8c 	bl	8000504 <__aeabi_ui2d>
 8013dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dee:	4606      	mov	r6, r0
 8013df0:	460f      	mov	r7, r1
 8013df2:	bb23      	cbnz	r3, 8013e3e <_strtod_l+0xb66>
 8013df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013df8:	9010      	str	r0, [sp, #64]	; 0x40
 8013dfa:	9311      	str	r3, [sp, #68]	; 0x44
 8013dfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e00:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e08:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013e0c:	1a9b      	subs	r3, r3, r2
 8013e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e10:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013e14:	eeb0 0a48 	vmov.f32	s0, s16
 8013e18:	eef0 0a68 	vmov.f32	s1, s17
 8013e1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013e20:	f003 f806 	bl	8016e30 <__ulp>
 8013e24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013e28:	ec53 2b10 	vmov	r2, r3, d0
 8013e2c:	f7ec fbe4 	bl	80005f8 <__aeabi_dmul>
 8013e30:	ec53 2b18 	vmov	r2, r3, d8
 8013e34:	f7ec fa2a 	bl	800028c <__adddf3>
 8013e38:	4680      	mov	r8, r0
 8013e3a:	4689      	mov	r9, r1
 8013e3c:	e78d      	b.n	8013d5a <_strtod_l+0xa82>
 8013e3e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013e42:	e7db      	b.n	8013dfc <_strtod_l+0xb24>
 8013e44:	a314      	add	r3, pc, #80	; (adr r3, 8013e98 <_strtod_l+0xbc0>)
 8013e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e4a:	f7ec fe47 	bl	8000adc <__aeabi_dcmplt>
 8013e4e:	e7b3      	b.n	8013db8 <_strtod_l+0xae0>
 8013e50:	2300      	movs	r3, #0
 8013e52:	930a      	str	r3, [sp, #40]	; 0x28
 8013e54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013e56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e58:	6013      	str	r3, [r2, #0]
 8013e5a:	f7ff ba7c 	b.w	8013356 <_strtod_l+0x7e>
 8013e5e:	2a65      	cmp	r2, #101	; 0x65
 8013e60:	f43f ab75 	beq.w	801354e <_strtod_l+0x276>
 8013e64:	2a45      	cmp	r2, #69	; 0x45
 8013e66:	f43f ab72 	beq.w	801354e <_strtod_l+0x276>
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	f7ff bbaa 	b.w	80135c4 <_strtod_l+0x2ec>
 8013e70:	00000000 	.word	0x00000000
 8013e74:	bff00000 	.word	0xbff00000
 8013e78:	00000000 	.word	0x00000000
 8013e7c:	3ff00000 	.word	0x3ff00000
 8013e80:	94a03595 	.word	0x94a03595
 8013e84:	3fdfffff 	.word	0x3fdfffff
 8013e88:	35afe535 	.word	0x35afe535
 8013e8c:	3fe00000 	.word	0x3fe00000
 8013e90:	ffc00000 	.word	0xffc00000
 8013e94:	41dfffff 	.word	0x41dfffff
 8013e98:	94a03595 	.word	0x94a03595
 8013e9c:	3fcfffff 	.word	0x3fcfffff
 8013ea0:	3ff00000 	.word	0x3ff00000
 8013ea4:	3fe00000 	.word	0x3fe00000
 8013ea8:	7ff00000 	.word	0x7ff00000
 8013eac:	7fe00000 	.word	0x7fe00000
 8013eb0:	7c9fffff 	.word	0x7c9fffff
 8013eb4:	7fefffff 	.word	0x7fefffff

08013eb8 <_strtod_r>:
 8013eb8:	4b01      	ldr	r3, [pc, #4]	; (8013ec0 <_strtod_r+0x8>)
 8013eba:	f7ff ba0d 	b.w	80132d8 <_strtod_l>
 8013ebe:	bf00      	nop
 8013ec0:	20000138 	.word	0x20000138

08013ec4 <strtof>:
 8013ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ec8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8013f8c <strtof+0xc8>
 8013ecc:	4b2a      	ldr	r3, [pc, #168]	; (8013f78 <strtof+0xb4>)
 8013ece:	460a      	mov	r2, r1
 8013ed0:	ed2d 8b02 	vpush	{d8}
 8013ed4:	4601      	mov	r1, r0
 8013ed6:	f8d8 0000 	ldr.w	r0, [r8]
 8013eda:	f7ff f9fd 	bl	80132d8 <_strtod_l>
 8013ede:	ec55 4b10 	vmov	r4, r5, d0
 8013ee2:	ee10 2a10 	vmov	r2, s0
 8013ee6:	ee10 0a10 	vmov	r0, s0
 8013eea:	462b      	mov	r3, r5
 8013eec:	4629      	mov	r1, r5
 8013eee:	f7ec fe1d 	bl	8000b2c <__aeabi_dcmpun>
 8013ef2:	b190      	cbz	r0, 8013f1a <strtof+0x56>
 8013ef4:	2d00      	cmp	r5, #0
 8013ef6:	4821      	ldr	r0, [pc, #132]	; (8013f7c <strtof+0xb8>)
 8013ef8:	da09      	bge.n	8013f0e <strtof+0x4a>
 8013efa:	f001 f9d9 	bl	80152b0 <nanf>
 8013efe:	eeb1 8a40 	vneg.f32	s16, s0
 8013f02:	eeb0 0a48 	vmov.f32	s0, s16
 8013f06:	ecbd 8b02 	vpop	{d8}
 8013f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f0e:	ecbd 8b02 	vpop	{d8}
 8013f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f16:	f001 b9cb 	b.w	80152b0 <nanf>
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	4629      	mov	r1, r5
 8013f1e:	f7ec fe63 	bl	8000be8 <__aeabi_d2f>
 8013f22:	ee08 0a10 	vmov	s16, r0
 8013f26:	eddf 7a16 	vldr	s15, [pc, #88]	; 8013f80 <strtof+0xbc>
 8013f2a:	eeb0 7ac8 	vabs.f32	s14, s16
 8013f2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8013f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f36:	dd11      	ble.n	8013f5c <strtof+0x98>
 8013f38:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8013f3c:	4b11      	ldr	r3, [pc, #68]	; (8013f84 <strtof+0xc0>)
 8013f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f42:	4620      	mov	r0, r4
 8013f44:	4639      	mov	r1, r7
 8013f46:	f7ec fdf1 	bl	8000b2c <__aeabi_dcmpun>
 8013f4a:	b980      	cbnz	r0, 8013f6e <strtof+0xaa>
 8013f4c:	4b0d      	ldr	r3, [pc, #52]	; (8013f84 <strtof+0xc0>)
 8013f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f52:	4620      	mov	r0, r4
 8013f54:	4639      	mov	r1, r7
 8013f56:	f7ec fdcb 	bl	8000af0 <__aeabi_dcmple>
 8013f5a:	b940      	cbnz	r0, 8013f6e <strtof+0xaa>
 8013f5c:	ee18 3a10 	vmov	r3, s16
 8013f60:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013f64:	d1cd      	bne.n	8013f02 <strtof+0x3e>
 8013f66:	4b08      	ldr	r3, [pc, #32]	; (8013f88 <strtof+0xc4>)
 8013f68:	402b      	ands	r3, r5
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d0c9      	beq.n	8013f02 <strtof+0x3e>
 8013f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8013f72:	2222      	movs	r2, #34	; 0x22
 8013f74:	601a      	str	r2, [r3, #0]
 8013f76:	e7c4      	b.n	8013f02 <strtof+0x3e>
 8013f78:	20000138 	.word	0x20000138
 8013f7c:	0801af8e 	.word	0x0801af8e
 8013f80:	7f7fffff 	.word	0x7f7fffff
 8013f84:	7fefffff 	.word	0x7fefffff
 8013f88:	7ff00000 	.word	0x7ff00000
 8013f8c:	200002f0 	.word	0x200002f0

08013f90 <_strtol_l.constprop.0>:
 8013f90:	2b01      	cmp	r3, #1
 8013f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f96:	d001      	beq.n	8013f9c <_strtol_l.constprop.0+0xc>
 8013f98:	2b24      	cmp	r3, #36	; 0x24
 8013f9a:	d906      	bls.n	8013faa <_strtol_l.constprop.0+0x1a>
 8013f9c:	f001 f93c 	bl	8015218 <__errno>
 8013fa0:	2316      	movs	r3, #22
 8013fa2:	6003      	str	r3, [r0, #0]
 8013fa4:	2000      	movs	r0, #0
 8013fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013faa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014090 <_strtol_l.constprop.0+0x100>
 8013fae:	460d      	mov	r5, r1
 8013fb0:	462e      	mov	r6, r5
 8013fb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013fb6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8013fba:	f017 0708 	ands.w	r7, r7, #8
 8013fbe:	d1f7      	bne.n	8013fb0 <_strtol_l.constprop.0+0x20>
 8013fc0:	2c2d      	cmp	r4, #45	; 0x2d
 8013fc2:	d132      	bne.n	801402a <_strtol_l.constprop.0+0x9a>
 8013fc4:	782c      	ldrb	r4, [r5, #0]
 8013fc6:	2701      	movs	r7, #1
 8013fc8:	1cb5      	adds	r5, r6, #2
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d05b      	beq.n	8014086 <_strtol_l.constprop.0+0xf6>
 8013fce:	2b10      	cmp	r3, #16
 8013fd0:	d109      	bne.n	8013fe6 <_strtol_l.constprop.0+0x56>
 8013fd2:	2c30      	cmp	r4, #48	; 0x30
 8013fd4:	d107      	bne.n	8013fe6 <_strtol_l.constprop.0+0x56>
 8013fd6:	782c      	ldrb	r4, [r5, #0]
 8013fd8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013fdc:	2c58      	cmp	r4, #88	; 0x58
 8013fde:	d14d      	bne.n	801407c <_strtol_l.constprop.0+0xec>
 8013fe0:	786c      	ldrb	r4, [r5, #1]
 8013fe2:	2310      	movs	r3, #16
 8013fe4:	3502      	adds	r5, #2
 8013fe6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013fea:	f108 38ff 	add.w	r8, r8, #4294967295
 8013fee:	f04f 0e00 	mov.w	lr, #0
 8013ff2:	fbb8 f9f3 	udiv	r9, r8, r3
 8013ff6:	4676      	mov	r6, lr
 8013ff8:	fb03 8a19 	mls	sl, r3, r9, r8
 8013ffc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014000:	f1bc 0f09 	cmp.w	ip, #9
 8014004:	d816      	bhi.n	8014034 <_strtol_l.constprop.0+0xa4>
 8014006:	4664      	mov	r4, ip
 8014008:	42a3      	cmp	r3, r4
 801400a:	dd24      	ble.n	8014056 <_strtol_l.constprop.0+0xc6>
 801400c:	f1be 3fff 	cmp.w	lr, #4294967295
 8014010:	d008      	beq.n	8014024 <_strtol_l.constprop.0+0x94>
 8014012:	45b1      	cmp	r9, r6
 8014014:	d31c      	bcc.n	8014050 <_strtol_l.constprop.0+0xc0>
 8014016:	d101      	bne.n	801401c <_strtol_l.constprop.0+0x8c>
 8014018:	45a2      	cmp	sl, r4
 801401a:	db19      	blt.n	8014050 <_strtol_l.constprop.0+0xc0>
 801401c:	fb06 4603 	mla	r6, r6, r3, r4
 8014020:	f04f 0e01 	mov.w	lr, #1
 8014024:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014028:	e7e8      	b.n	8013ffc <_strtol_l.constprop.0+0x6c>
 801402a:	2c2b      	cmp	r4, #43	; 0x2b
 801402c:	bf04      	itt	eq
 801402e:	782c      	ldrbeq	r4, [r5, #0]
 8014030:	1cb5      	addeq	r5, r6, #2
 8014032:	e7ca      	b.n	8013fca <_strtol_l.constprop.0+0x3a>
 8014034:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014038:	f1bc 0f19 	cmp.w	ip, #25
 801403c:	d801      	bhi.n	8014042 <_strtol_l.constprop.0+0xb2>
 801403e:	3c37      	subs	r4, #55	; 0x37
 8014040:	e7e2      	b.n	8014008 <_strtol_l.constprop.0+0x78>
 8014042:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014046:	f1bc 0f19 	cmp.w	ip, #25
 801404a:	d804      	bhi.n	8014056 <_strtol_l.constprop.0+0xc6>
 801404c:	3c57      	subs	r4, #87	; 0x57
 801404e:	e7db      	b.n	8014008 <_strtol_l.constprop.0+0x78>
 8014050:	f04f 3eff 	mov.w	lr, #4294967295
 8014054:	e7e6      	b.n	8014024 <_strtol_l.constprop.0+0x94>
 8014056:	f1be 3fff 	cmp.w	lr, #4294967295
 801405a:	d105      	bne.n	8014068 <_strtol_l.constprop.0+0xd8>
 801405c:	2322      	movs	r3, #34	; 0x22
 801405e:	6003      	str	r3, [r0, #0]
 8014060:	4646      	mov	r6, r8
 8014062:	b942      	cbnz	r2, 8014076 <_strtol_l.constprop.0+0xe6>
 8014064:	4630      	mov	r0, r6
 8014066:	e79e      	b.n	8013fa6 <_strtol_l.constprop.0+0x16>
 8014068:	b107      	cbz	r7, 801406c <_strtol_l.constprop.0+0xdc>
 801406a:	4276      	negs	r6, r6
 801406c:	2a00      	cmp	r2, #0
 801406e:	d0f9      	beq.n	8014064 <_strtol_l.constprop.0+0xd4>
 8014070:	f1be 0f00 	cmp.w	lr, #0
 8014074:	d000      	beq.n	8014078 <_strtol_l.constprop.0+0xe8>
 8014076:	1e69      	subs	r1, r5, #1
 8014078:	6011      	str	r1, [r2, #0]
 801407a:	e7f3      	b.n	8014064 <_strtol_l.constprop.0+0xd4>
 801407c:	2430      	movs	r4, #48	; 0x30
 801407e:	2b00      	cmp	r3, #0
 8014080:	d1b1      	bne.n	8013fe6 <_strtol_l.constprop.0+0x56>
 8014082:	2308      	movs	r3, #8
 8014084:	e7af      	b.n	8013fe6 <_strtol_l.constprop.0+0x56>
 8014086:	2c30      	cmp	r4, #48	; 0x30
 8014088:	d0a5      	beq.n	8013fd6 <_strtol_l.constprop.0+0x46>
 801408a:	230a      	movs	r3, #10
 801408c:	e7ab      	b.n	8013fe6 <_strtol_l.constprop.0+0x56>
 801408e:	bf00      	nop
 8014090:	0801ada1 	.word	0x0801ada1

08014094 <_strtol_r>:
 8014094:	f7ff bf7c 	b.w	8013f90 <_strtol_l.constprop.0>

08014098 <strtol>:
 8014098:	4613      	mov	r3, r2
 801409a:	460a      	mov	r2, r1
 801409c:	4601      	mov	r1, r0
 801409e:	4802      	ldr	r0, [pc, #8]	; (80140a8 <strtol+0x10>)
 80140a0:	6800      	ldr	r0, [r0, #0]
 80140a2:	f7ff bf75 	b.w	8013f90 <_strtol_l.constprop.0>
 80140a6:	bf00      	nop
 80140a8:	200002f0 	.word	0x200002f0

080140ac <__cvt>:
 80140ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80140b0:	ec55 4b10 	vmov	r4, r5, d0
 80140b4:	2d00      	cmp	r5, #0
 80140b6:	460e      	mov	r6, r1
 80140b8:	4619      	mov	r1, r3
 80140ba:	462b      	mov	r3, r5
 80140bc:	bfbb      	ittet	lt
 80140be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80140c2:	461d      	movlt	r5, r3
 80140c4:	2300      	movge	r3, #0
 80140c6:	232d      	movlt	r3, #45	; 0x2d
 80140c8:	700b      	strb	r3, [r1, #0]
 80140ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80140d0:	4691      	mov	r9, r2
 80140d2:	f023 0820 	bic.w	r8, r3, #32
 80140d6:	bfbc      	itt	lt
 80140d8:	4622      	movlt	r2, r4
 80140da:	4614      	movlt	r4, r2
 80140dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80140e0:	d005      	beq.n	80140ee <__cvt+0x42>
 80140e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80140e6:	d100      	bne.n	80140ea <__cvt+0x3e>
 80140e8:	3601      	adds	r6, #1
 80140ea:	2102      	movs	r1, #2
 80140ec:	e000      	b.n	80140f0 <__cvt+0x44>
 80140ee:	2103      	movs	r1, #3
 80140f0:	ab03      	add	r3, sp, #12
 80140f2:	9301      	str	r3, [sp, #4]
 80140f4:	ab02      	add	r3, sp, #8
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	ec45 4b10 	vmov	d0, r4, r5
 80140fc:	4653      	mov	r3, sl
 80140fe:	4632      	mov	r2, r6
 8014100:	f001 f982 	bl	8015408 <_dtoa_r>
 8014104:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014108:	4607      	mov	r7, r0
 801410a:	d102      	bne.n	8014112 <__cvt+0x66>
 801410c:	f019 0f01 	tst.w	r9, #1
 8014110:	d022      	beq.n	8014158 <__cvt+0xac>
 8014112:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014116:	eb07 0906 	add.w	r9, r7, r6
 801411a:	d110      	bne.n	801413e <__cvt+0x92>
 801411c:	783b      	ldrb	r3, [r7, #0]
 801411e:	2b30      	cmp	r3, #48	; 0x30
 8014120:	d10a      	bne.n	8014138 <__cvt+0x8c>
 8014122:	2200      	movs	r2, #0
 8014124:	2300      	movs	r3, #0
 8014126:	4620      	mov	r0, r4
 8014128:	4629      	mov	r1, r5
 801412a:	f7ec fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 801412e:	b918      	cbnz	r0, 8014138 <__cvt+0x8c>
 8014130:	f1c6 0601 	rsb	r6, r6, #1
 8014134:	f8ca 6000 	str.w	r6, [sl]
 8014138:	f8da 3000 	ldr.w	r3, [sl]
 801413c:	4499      	add	r9, r3
 801413e:	2200      	movs	r2, #0
 8014140:	2300      	movs	r3, #0
 8014142:	4620      	mov	r0, r4
 8014144:	4629      	mov	r1, r5
 8014146:	f7ec fcbf 	bl	8000ac8 <__aeabi_dcmpeq>
 801414a:	b108      	cbz	r0, 8014150 <__cvt+0xa4>
 801414c:	f8cd 900c 	str.w	r9, [sp, #12]
 8014150:	2230      	movs	r2, #48	; 0x30
 8014152:	9b03      	ldr	r3, [sp, #12]
 8014154:	454b      	cmp	r3, r9
 8014156:	d307      	bcc.n	8014168 <__cvt+0xbc>
 8014158:	9b03      	ldr	r3, [sp, #12]
 801415a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801415c:	1bdb      	subs	r3, r3, r7
 801415e:	4638      	mov	r0, r7
 8014160:	6013      	str	r3, [r2, #0]
 8014162:	b004      	add	sp, #16
 8014164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014168:	1c59      	adds	r1, r3, #1
 801416a:	9103      	str	r1, [sp, #12]
 801416c:	701a      	strb	r2, [r3, #0]
 801416e:	e7f0      	b.n	8014152 <__cvt+0xa6>

08014170 <__exponent>:
 8014170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014172:	4603      	mov	r3, r0
 8014174:	2900      	cmp	r1, #0
 8014176:	bfb8      	it	lt
 8014178:	4249      	neglt	r1, r1
 801417a:	f803 2b02 	strb.w	r2, [r3], #2
 801417e:	bfb4      	ite	lt
 8014180:	222d      	movlt	r2, #45	; 0x2d
 8014182:	222b      	movge	r2, #43	; 0x2b
 8014184:	2909      	cmp	r1, #9
 8014186:	7042      	strb	r2, [r0, #1]
 8014188:	dd2a      	ble.n	80141e0 <__exponent+0x70>
 801418a:	f10d 0207 	add.w	r2, sp, #7
 801418e:	4617      	mov	r7, r2
 8014190:	260a      	movs	r6, #10
 8014192:	4694      	mov	ip, r2
 8014194:	fb91 f5f6 	sdiv	r5, r1, r6
 8014198:	fb06 1415 	mls	r4, r6, r5, r1
 801419c:	3430      	adds	r4, #48	; 0x30
 801419e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80141a2:	460c      	mov	r4, r1
 80141a4:	2c63      	cmp	r4, #99	; 0x63
 80141a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80141aa:	4629      	mov	r1, r5
 80141ac:	dcf1      	bgt.n	8014192 <__exponent+0x22>
 80141ae:	3130      	adds	r1, #48	; 0x30
 80141b0:	f1ac 0402 	sub.w	r4, ip, #2
 80141b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80141b8:	1c41      	adds	r1, r0, #1
 80141ba:	4622      	mov	r2, r4
 80141bc:	42ba      	cmp	r2, r7
 80141be:	d30a      	bcc.n	80141d6 <__exponent+0x66>
 80141c0:	f10d 0209 	add.w	r2, sp, #9
 80141c4:	eba2 020c 	sub.w	r2, r2, ip
 80141c8:	42bc      	cmp	r4, r7
 80141ca:	bf88      	it	hi
 80141cc:	2200      	movhi	r2, #0
 80141ce:	4413      	add	r3, r2
 80141d0:	1a18      	subs	r0, r3, r0
 80141d2:	b003      	add	sp, #12
 80141d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80141da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80141de:	e7ed      	b.n	80141bc <__exponent+0x4c>
 80141e0:	2330      	movs	r3, #48	; 0x30
 80141e2:	3130      	adds	r1, #48	; 0x30
 80141e4:	7083      	strb	r3, [r0, #2]
 80141e6:	70c1      	strb	r1, [r0, #3]
 80141e8:	1d03      	adds	r3, r0, #4
 80141ea:	e7f1      	b.n	80141d0 <__exponent+0x60>

080141ec <_printf_float>:
 80141ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f0:	ed2d 8b02 	vpush	{d8}
 80141f4:	b08d      	sub	sp, #52	; 0x34
 80141f6:	460c      	mov	r4, r1
 80141f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80141fc:	4616      	mov	r6, r2
 80141fe:	461f      	mov	r7, r3
 8014200:	4605      	mov	r5, r0
 8014202:	f000 ffaf 	bl	8015164 <_localeconv_r>
 8014206:	f8d0 a000 	ldr.w	sl, [r0]
 801420a:	4650      	mov	r0, sl
 801420c:	f7ec f830 	bl	8000270 <strlen>
 8014210:	2300      	movs	r3, #0
 8014212:	930a      	str	r3, [sp, #40]	; 0x28
 8014214:	6823      	ldr	r3, [r4, #0]
 8014216:	9305      	str	r3, [sp, #20]
 8014218:	f8d8 3000 	ldr.w	r3, [r8]
 801421c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014220:	3307      	adds	r3, #7
 8014222:	f023 0307 	bic.w	r3, r3, #7
 8014226:	f103 0208 	add.w	r2, r3, #8
 801422a:	f8c8 2000 	str.w	r2, [r8]
 801422e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014232:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014236:	9307      	str	r3, [sp, #28]
 8014238:	f8cd 8018 	str.w	r8, [sp, #24]
 801423c:	ee08 0a10 	vmov	s16, r0
 8014240:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8014244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014248:	4b9e      	ldr	r3, [pc, #632]	; (80144c4 <_printf_float+0x2d8>)
 801424a:	f04f 32ff 	mov.w	r2, #4294967295
 801424e:	f7ec fc6d 	bl	8000b2c <__aeabi_dcmpun>
 8014252:	bb88      	cbnz	r0, 80142b8 <_printf_float+0xcc>
 8014254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014258:	4b9a      	ldr	r3, [pc, #616]	; (80144c4 <_printf_float+0x2d8>)
 801425a:	f04f 32ff 	mov.w	r2, #4294967295
 801425e:	f7ec fc47 	bl	8000af0 <__aeabi_dcmple>
 8014262:	bb48      	cbnz	r0, 80142b8 <_printf_float+0xcc>
 8014264:	2200      	movs	r2, #0
 8014266:	2300      	movs	r3, #0
 8014268:	4640      	mov	r0, r8
 801426a:	4649      	mov	r1, r9
 801426c:	f7ec fc36 	bl	8000adc <__aeabi_dcmplt>
 8014270:	b110      	cbz	r0, 8014278 <_printf_float+0x8c>
 8014272:	232d      	movs	r3, #45	; 0x2d
 8014274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014278:	4a93      	ldr	r2, [pc, #588]	; (80144c8 <_printf_float+0x2dc>)
 801427a:	4b94      	ldr	r3, [pc, #592]	; (80144cc <_printf_float+0x2e0>)
 801427c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014280:	bf94      	ite	ls
 8014282:	4690      	movls	r8, r2
 8014284:	4698      	movhi	r8, r3
 8014286:	2303      	movs	r3, #3
 8014288:	6123      	str	r3, [r4, #16]
 801428a:	9b05      	ldr	r3, [sp, #20]
 801428c:	f023 0304 	bic.w	r3, r3, #4
 8014290:	6023      	str	r3, [r4, #0]
 8014292:	f04f 0900 	mov.w	r9, #0
 8014296:	9700      	str	r7, [sp, #0]
 8014298:	4633      	mov	r3, r6
 801429a:	aa0b      	add	r2, sp, #44	; 0x2c
 801429c:	4621      	mov	r1, r4
 801429e:	4628      	mov	r0, r5
 80142a0:	f000 f9da 	bl	8014658 <_printf_common>
 80142a4:	3001      	adds	r0, #1
 80142a6:	f040 8090 	bne.w	80143ca <_printf_float+0x1de>
 80142aa:	f04f 30ff 	mov.w	r0, #4294967295
 80142ae:	b00d      	add	sp, #52	; 0x34
 80142b0:	ecbd 8b02 	vpop	{d8}
 80142b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142b8:	4642      	mov	r2, r8
 80142ba:	464b      	mov	r3, r9
 80142bc:	4640      	mov	r0, r8
 80142be:	4649      	mov	r1, r9
 80142c0:	f7ec fc34 	bl	8000b2c <__aeabi_dcmpun>
 80142c4:	b140      	cbz	r0, 80142d8 <_printf_float+0xec>
 80142c6:	464b      	mov	r3, r9
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	bfbc      	itt	lt
 80142cc:	232d      	movlt	r3, #45	; 0x2d
 80142ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80142d2:	4a7f      	ldr	r2, [pc, #508]	; (80144d0 <_printf_float+0x2e4>)
 80142d4:	4b7f      	ldr	r3, [pc, #508]	; (80144d4 <_printf_float+0x2e8>)
 80142d6:	e7d1      	b.n	801427c <_printf_float+0x90>
 80142d8:	6863      	ldr	r3, [r4, #4]
 80142da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80142de:	9206      	str	r2, [sp, #24]
 80142e0:	1c5a      	adds	r2, r3, #1
 80142e2:	d13f      	bne.n	8014364 <_printf_float+0x178>
 80142e4:	2306      	movs	r3, #6
 80142e6:	6063      	str	r3, [r4, #4]
 80142e8:	9b05      	ldr	r3, [sp, #20]
 80142ea:	6861      	ldr	r1, [r4, #4]
 80142ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80142f0:	2300      	movs	r3, #0
 80142f2:	9303      	str	r3, [sp, #12]
 80142f4:	ab0a      	add	r3, sp, #40	; 0x28
 80142f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80142fa:	ab09      	add	r3, sp, #36	; 0x24
 80142fc:	ec49 8b10 	vmov	d0, r8, r9
 8014300:	9300      	str	r3, [sp, #0]
 8014302:	6022      	str	r2, [r4, #0]
 8014304:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014308:	4628      	mov	r0, r5
 801430a:	f7ff fecf 	bl	80140ac <__cvt>
 801430e:	9b06      	ldr	r3, [sp, #24]
 8014310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014312:	2b47      	cmp	r3, #71	; 0x47
 8014314:	4680      	mov	r8, r0
 8014316:	d108      	bne.n	801432a <_printf_float+0x13e>
 8014318:	1cc8      	adds	r0, r1, #3
 801431a:	db02      	blt.n	8014322 <_printf_float+0x136>
 801431c:	6863      	ldr	r3, [r4, #4]
 801431e:	4299      	cmp	r1, r3
 8014320:	dd41      	ble.n	80143a6 <_printf_float+0x1ba>
 8014322:	f1ab 0302 	sub.w	r3, fp, #2
 8014326:	fa5f fb83 	uxtb.w	fp, r3
 801432a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801432e:	d820      	bhi.n	8014372 <_printf_float+0x186>
 8014330:	3901      	subs	r1, #1
 8014332:	465a      	mov	r2, fp
 8014334:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014338:	9109      	str	r1, [sp, #36]	; 0x24
 801433a:	f7ff ff19 	bl	8014170 <__exponent>
 801433e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014340:	1813      	adds	r3, r2, r0
 8014342:	2a01      	cmp	r2, #1
 8014344:	4681      	mov	r9, r0
 8014346:	6123      	str	r3, [r4, #16]
 8014348:	dc02      	bgt.n	8014350 <_printf_float+0x164>
 801434a:	6822      	ldr	r2, [r4, #0]
 801434c:	07d2      	lsls	r2, r2, #31
 801434e:	d501      	bpl.n	8014354 <_printf_float+0x168>
 8014350:	3301      	adds	r3, #1
 8014352:	6123      	str	r3, [r4, #16]
 8014354:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014358:	2b00      	cmp	r3, #0
 801435a:	d09c      	beq.n	8014296 <_printf_float+0xaa>
 801435c:	232d      	movs	r3, #45	; 0x2d
 801435e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014362:	e798      	b.n	8014296 <_printf_float+0xaa>
 8014364:	9a06      	ldr	r2, [sp, #24]
 8014366:	2a47      	cmp	r2, #71	; 0x47
 8014368:	d1be      	bne.n	80142e8 <_printf_float+0xfc>
 801436a:	2b00      	cmp	r3, #0
 801436c:	d1bc      	bne.n	80142e8 <_printf_float+0xfc>
 801436e:	2301      	movs	r3, #1
 8014370:	e7b9      	b.n	80142e6 <_printf_float+0xfa>
 8014372:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014376:	d118      	bne.n	80143aa <_printf_float+0x1be>
 8014378:	2900      	cmp	r1, #0
 801437a:	6863      	ldr	r3, [r4, #4]
 801437c:	dd0b      	ble.n	8014396 <_printf_float+0x1aa>
 801437e:	6121      	str	r1, [r4, #16]
 8014380:	b913      	cbnz	r3, 8014388 <_printf_float+0x19c>
 8014382:	6822      	ldr	r2, [r4, #0]
 8014384:	07d0      	lsls	r0, r2, #31
 8014386:	d502      	bpl.n	801438e <_printf_float+0x1a2>
 8014388:	3301      	adds	r3, #1
 801438a:	440b      	add	r3, r1
 801438c:	6123      	str	r3, [r4, #16]
 801438e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014390:	f04f 0900 	mov.w	r9, #0
 8014394:	e7de      	b.n	8014354 <_printf_float+0x168>
 8014396:	b913      	cbnz	r3, 801439e <_printf_float+0x1b2>
 8014398:	6822      	ldr	r2, [r4, #0]
 801439a:	07d2      	lsls	r2, r2, #31
 801439c:	d501      	bpl.n	80143a2 <_printf_float+0x1b6>
 801439e:	3302      	adds	r3, #2
 80143a0:	e7f4      	b.n	801438c <_printf_float+0x1a0>
 80143a2:	2301      	movs	r3, #1
 80143a4:	e7f2      	b.n	801438c <_printf_float+0x1a0>
 80143a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80143aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143ac:	4299      	cmp	r1, r3
 80143ae:	db05      	blt.n	80143bc <_printf_float+0x1d0>
 80143b0:	6823      	ldr	r3, [r4, #0]
 80143b2:	6121      	str	r1, [r4, #16]
 80143b4:	07d8      	lsls	r0, r3, #31
 80143b6:	d5ea      	bpl.n	801438e <_printf_float+0x1a2>
 80143b8:	1c4b      	adds	r3, r1, #1
 80143ba:	e7e7      	b.n	801438c <_printf_float+0x1a0>
 80143bc:	2900      	cmp	r1, #0
 80143be:	bfd4      	ite	le
 80143c0:	f1c1 0202 	rsble	r2, r1, #2
 80143c4:	2201      	movgt	r2, #1
 80143c6:	4413      	add	r3, r2
 80143c8:	e7e0      	b.n	801438c <_printf_float+0x1a0>
 80143ca:	6823      	ldr	r3, [r4, #0]
 80143cc:	055a      	lsls	r2, r3, #21
 80143ce:	d407      	bmi.n	80143e0 <_printf_float+0x1f4>
 80143d0:	6923      	ldr	r3, [r4, #16]
 80143d2:	4642      	mov	r2, r8
 80143d4:	4631      	mov	r1, r6
 80143d6:	4628      	mov	r0, r5
 80143d8:	47b8      	blx	r7
 80143da:	3001      	adds	r0, #1
 80143dc:	d12c      	bne.n	8014438 <_printf_float+0x24c>
 80143de:	e764      	b.n	80142aa <_printf_float+0xbe>
 80143e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80143e4:	f240 80e0 	bls.w	80145a8 <_printf_float+0x3bc>
 80143e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80143ec:	2200      	movs	r2, #0
 80143ee:	2300      	movs	r3, #0
 80143f0:	f7ec fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80143f4:	2800      	cmp	r0, #0
 80143f6:	d034      	beq.n	8014462 <_printf_float+0x276>
 80143f8:	4a37      	ldr	r2, [pc, #220]	; (80144d8 <_printf_float+0x2ec>)
 80143fa:	2301      	movs	r3, #1
 80143fc:	4631      	mov	r1, r6
 80143fe:	4628      	mov	r0, r5
 8014400:	47b8      	blx	r7
 8014402:	3001      	adds	r0, #1
 8014404:	f43f af51 	beq.w	80142aa <_printf_float+0xbe>
 8014408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801440c:	429a      	cmp	r2, r3
 801440e:	db02      	blt.n	8014416 <_printf_float+0x22a>
 8014410:	6823      	ldr	r3, [r4, #0]
 8014412:	07d8      	lsls	r0, r3, #31
 8014414:	d510      	bpl.n	8014438 <_printf_float+0x24c>
 8014416:	ee18 3a10 	vmov	r3, s16
 801441a:	4652      	mov	r2, sl
 801441c:	4631      	mov	r1, r6
 801441e:	4628      	mov	r0, r5
 8014420:	47b8      	blx	r7
 8014422:	3001      	adds	r0, #1
 8014424:	f43f af41 	beq.w	80142aa <_printf_float+0xbe>
 8014428:	f04f 0800 	mov.w	r8, #0
 801442c:	f104 091a 	add.w	r9, r4, #26
 8014430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014432:	3b01      	subs	r3, #1
 8014434:	4543      	cmp	r3, r8
 8014436:	dc09      	bgt.n	801444c <_printf_float+0x260>
 8014438:	6823      	ldr	r3, [r4, #0]
 801443a:	079b      	lsls	r3, r3, #30
 801443c:	f100 8107 	bmi.w	801464e <_printf_float+0x462>
 8014440:	68e0      	ldr	r0, [r4, #12]
 8014442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014444:	4298      	cmp	r0, r3
 8014446:	bfb8      	it	lt
 8014448:	4618      	movlt	r0, r3
 801444a:	e730      	b.n	80142ae <_printf_float+0xc2>
 801444c:	2301      	movs	r3, #1
 801444e:	464a      	mov	r2, r9
 8014450:	4631      	mov	r1, r6
 8014452:	4628      	mov	r0, r5
 8014454:	47b8      	blx	r7
 8014456:	3001      	adds	r0, #1
 8014458:	f43f af27 	beq.w	80142aa <_printf_float+0xbe>
 801445c:	f108 0801 	add.w	r8, r8, #1
 8014460:	e7e6      	b.n	8014430 <_printf_float+0x244>
 8014462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014464:	2b00      	cmp	r3, #0
 8014466:	dc39      	bgt.n	80144dc <_printf_float+0x2f0>
 8014468:	4a1b      	ldr	r2, [pc, #108]	; (80144d8 <_printf_float+0x2ec>)
 801446a:	2301      	movs	r3, #1
 801446c:	4631      	mov	r1, r6
 801446e:	4628      	mov	r0, r5
 8014470:	47b8      	blx	r7
 8014472:	3001      	adds	r0, #1
 8014474:	f43f af19 	beq.w	80142aa <_printf_float+0xbe>
 8014478:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801447c:	4313      	orrs	r3, r2
 801447e:	d102      	bne.n	8014486 <_printf_float+0x29a>
 8014480:	6823      	ldr	r3, [r4, #0]
 8014482:	07d9      	lsls	r1, r3, #31
 8014484:	d5d8      	bpl.n	8014438 <_printf_float+0x24c>
 8014486:	ee18 3a10 	vmov	r3, s16
 801448a:	4652      	mov	r2, sl
 801448c:	4631      	mov	r1, r6
 801448e:	4628      	mov	r0, r5
 8014490:	47b8      	blx	r7
 8014492:	3001      	adds	r0, #1
 8014494:	f43f af09 	beq.w	80142aa <_printf_float+0xbe>
 8014498:	f04f 0900 	mov.w	r9, #0
 801449c:	f104 0a1a 	add.w	sl, r4, #26
 80144a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144a2:	425b      	negs	r3, r3
 80144a4:	454b      	cmp	r3, r9
 80144a6:	dc01      	bgt.n	80144ac <_printf_float+0x2c0>
 80144a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144aa:	e792      	b.n	80143d2 <_printf_float+0x1e6>
 80144ac:	2301      	movs	r3, #1
 80144ae:	4652      	mov	r2, sl
 80144b0:	4631      	mov	r1, r6
 80144b2:	4628      	mov	r0, r5
 80144b4:	47b8      	blx	r7
 80144b6:	3001      	adds	r0, #1
 80144b8:	f43f aef7 	beq.w	80142aa <_printf_float+0xbe>
 80144bc:	f109 0901 	add.w	r9, r9, #1
 80144c0:	e7ee      	b.n	80144a0 <_printf_float+0x2b4>
 80144c2:	bf00      	nop
 80144c4:	7fefffff 	.word	0x7fefffff
 80144c8:	0801aea1 	.word	0x0801aea1
 80144cc:	0801aea5 	.word	0x0801aea5
 80144d0:	0801aea9 	.word	0x0801aea9
 80144d4:	0801aead 	.word	0x0801aead
 80144d8:	0801aeb1 	.word	0x0801aeb1
 80144dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80144e0:	429a      	cmp	r2, r3
 80144e2:	bfa8      	it	ge
 80144e4:	461a      	movge	r2, r3
 80144e6:	2a00      	cmp	r2, #0
 80144e8:	4691      	mov	r9, r2
 80144ea:	dc37      	bgt.n	801455c <_printf_float+0x370>
 80144ec:	f04f 0b00 	mov.w	fp, #0
 80144f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80144f4:	f104 021a 	add.w	r2, r4, #26
 80144f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80144fa:	9305      	str	r3, [sp, #20]
 80144fc:	eba3 0309 	sub.w	r3, r3, r9
 8014500:	455b      	cmp	r3, fp
 8014502:	dc33      	bgt.n	801456c <_printf_float+0x380>
 8014504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014508:	429a      	cmp	r2, r3
 801450a:	db3b      	blt.n	8014584 <_printf_float+0x398>
 801450c:	6823      	ldr	r3, [r4, #0]
 801450e:	07da      	lsls	r2, r3, #31
 8014510:	d438      	bmi.n	8014584 <_printf_float+0x398>
 8014512:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014516:	eba2 0903 	sub.w	r9, r2, r3
 801451a:	9b05      	ldr	r3, [sp, #20]
 801451c:	1ad2      	subs	r2, r2, r3
 801451e:	4591      	cmp	r9, r2
 8014520:	bfa8      	it	ge
 8014522:	4691      	movge	r9, r2
 8014524:	f1b9 0f00 	cmp.w	r9, #0
 8014528:	dc35      	bgt.n	8014596 <_printf_float+0x3aa>
 801452a:	f04f 0800 	mov.w	r8, #0
 801452e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014532:	f104 0a1a 	add.w	sl, r4, #26
 8014536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801453a:	1a9b      	subs	r3, r3, r2
 801453c:	eba3 0309 	sub.w	r3, r3, r9
 8014540:	4543      	cmp	r3, r8
 8014542:	f77f af79 	ble.w	8014438 <_printf_float+0x24c>
 8014546:	2301      	movs	r3, #1
 8014548:	4652      	mov	r2, sl
 801454a:	4631      	mov	r1, r6
 801454c:	4628      	mov	r0, r5
 801454e:	47b8      	blx	r7
 8014550:	3001      	adds	r0, #1
 8014552:	f43f aeaa 	beq.w	80142aa <_printf_float+0xbe>
 8014556:	f108 0801 	add.w	r8, r8, #1
 801455a:	e7ec      	b.n	8014536 <_printf_float+0x34a>
 801455c:	4613      	mov	r3, r2
 801455e:	4631      	mov	r1, r6
 8014560:	4642      	mov	r2, r8
 8014562:	4628      	mov	r0, r5
 8014564:	47b8      	blx	r7
 8014566:	3001      	adds	r0, #1
 8014568:	d1c0      	bne.n	80144ec <_printf_float+0x300>
 801456a:	e69e      	b.n	80142aa <_printf_float+0xbe>
 801456c:	2301      	movs	r3, #1
 801456e:	4631      	mov	r1, r6
 8014570:	4628      	mov	r0, r5
 8014572:	9205      	str	r2, [sp, #20]
 8014574:	47b8      	blx	r7
 8014576:	3001      	adds	r0, #1
 8014578:	f43f ae97 	beq.w	80142aa <_printf_float+0xbe>
 801457c:	9a05      	ldr	r2, [sp, #20]
 801457e:	f10b 0b01 	add.w	fp, fp, #1
 8014582:	e7b9      	b.n	80144f8 <_printf_float+0x30c>
 8014584:	ee18 3a10 	vmov	r3, s16
 8014588:	4652      	mov	r2, sl
 801458a:	4631      	mov	r1, r6
 801458c:	4628      	mov	r0, r5
 801458e:	47b8      	blx	r7
 8014590:	3001      	adds	r0, #1
 8014592:	d1be      	bne.n	8014512 <_printf_float+0x326>
 8014594:	e689      	b.n	80142aa <_printf_float+0xbe>
 8014596:	9a05      	ldr	r2, [sp, #20]
 8014598:	464b      	mov	r3, r9
 801459a:	4442      	add	r2, r8
 801459c:	4631      	mov	r1, r6
 801459e:	4628      	mov	r0, r5
 80145a0:	47b8      	blx	r7
 80145a2:	3001      	adds	r0, #1
 80145a4:	d1c1      	bne.n	801452a <_printf_float+0x33e>
 80145a6:	e680      	b.n	80142aa <_printf_float+0xbe>
 80145a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145aa:	2a01      	cmp	r2, #1
 80145ac:	dc01      	bgt.n	80145b2 <_printf_float+0x3c6>
 80145ae:	07db      	lsls	r3, r3, #31
 80145b0:	d53a      	bpl.n	8014628 <_printf_float+0x43c>
 80145b2:	2301      	movs	r3, #1
 80145b4:	4642      	mov	r2, r8
 80145b6:	4631      	mov	r1, r6
 80145b8:	4628      	mov	r0, r5
 80145ba:	47b8      	blx	r7
 80145bc:	3001      	adds	r0, #1
 80145be:	f43f ae74 	beq.w	80142aa <_printf_float+0xbe>
 80145c2:	ee18 3a10 	vmov	r3, s16
 80145c6:	4652      	mov	r2, sl
 80145c8:	4631      	mov	r1, r6
 80145ca:	4628      	mov	r0, r5
 80145cc:	47b8      	blx	r7
 80145ce:	3001      	adds	r0, #1
 80145d0:	f43f ae6b 	beq.w	80142aa <_printf_float+0xbe>
 80145d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80145d8:	2200      	movs	r2, #0
 80145da:	2300      	movs	r3, #0
 80145dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80145e0:	f7ec fa72 	bl	8000ac8 <__aeabi_dcmpeq>
 80145e4:	b9d8      	cbnz	r0, 801461e <_printf_float+0x432>
 80145e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80145ea:	f108 0201 	add.w	r2, r8, #1
 80145ee:	4631      	mov	r1, r6
 80145f0:	4628      	mov	r0, r5
 80145f2:	47b8      	blx	r7
 80145f4:	3001      	adds	r0, #1
 80145f6:	d10e      	bne.n	8014616 <_printf_float+0x42a>
 80145f8:	e657      	b.n	80142aa <_printf_float+0xbe>
 80145fa:	2301      	movs	r3, #1
 80145fc:	4652      	mov	r2, sl
 80145fe:	4631      	mov	r1, r6
 8014600:	4628      	mov	r0, r5
 8014602:	47b8      	blx	r7
 8014604:	3001      	adds	r0, #1
 8014606:	f43f ae50 	beq.w	80142aa <_printf_float+0xbe>
 801460a:	f108 0801 	add.w	r8, r8, #1
 801460e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014610:	3b01      	subs	r3, #1
 8014612:	4543      	cmp	r3, r8
 8014614:	dcf1      	bgt.n	80145fa <_printf_float+0x40e>
 8014616:	464b      	mov	r3, r9
 8014618:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801461c:	e6da      	b.n	80143d4 <_printf_float+0x1e8>
 801461e:	f04f 0800 	mov.w	r8, #0
 8014622:	f104 0a1a 	add.w	sl, r4, #26
 8014626:	e7f2      	b.n	801460e <_printf_float+0x422>
 8014628:	2301      	movs	r3, #1
 801462a:	4642      	mov	r2, r8
 801462c:	e7df      	b.n	80145ee <_printf_float+0x402>
 801462e:	2301      	movs	r3, #1
 8014630:	464a      	mov	r2, r9
 8014632:	4631      	mov	r1, r6
 8014634:	4628      	mov	r0, r5
 8014636:	47b8      	blx	r7
 8014638:	3001      	adds	r0, #1
 801463a:	f43f ae36 	beq.w	80142aa <_printf_float+0xbe>
 801463e:	f108 0801 	add.w	r8, r8, #1
 8014642:	68e3      	ldr	r3, [r4, #12]
 8014644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014646:	1a5b      	subs	r3, r3, r1
 8014648:	4543      	cmp	r3, r8
 801464a:	dcf0      	bgt.n	801462e <_printf_float+0x442>
 801464c:	e6f8      	b.n	8014440 <_printf_float+0x254>
 801464e:	f04f 0800 	mov.w	r8, #0
 8014652:	f104 0919 	add.w	r9, r4, #25
 8014656:	e7f4      	b.n	8014642 <_printf_float+0x456>

08014658 <_printf_common>:
 8014658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801465c:	4616      	mov	r6, r2
 801465e:	4699      	mov	r9, r3
 8014660:	688a      	ldr	r2, [r1, #8]
 8014662:	690b      	ldr	r3, [r1, #16]
 8014664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014668:	4293      	cmp	r3, r2
 801466a:	bfb8      	it	lt
 801466c:	4613      	movlt	r3, r2
 801466e:	6033      	str	r3, [r6, #0]
 8014670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014674:	4607      	mov	r7, r0
 8014676:	460c      	mov	r4, r1
 8014678:	b10a      	cbz	r2, 801467e <_printf_common+0x26>
 801467a:	3301      	adds	r3, #1
 801467c:	6033      	str	r3, [r6, #0]
 801467e:	6823      	ldr	r3, [r4, #0]
 8014680:	0699      	lsls	r1, r3, #26
 8014682:	bf42      	ittt	mi
 8014684:	6833      	ldrmi	r3, [r6, #0]
 8014686:	3302      	addmi	r3, #2
 8014688:	6033      	strmi	r3, [r6, #0]
 801468a:	6825      	ldr	r5, [r4, #0]
 801468c:	f015 0506 	ands.w	r5, r5, #6
 8014690:	d106      	bne.n	80146a0 <_printf_common+0x48>
 8014692:	f104 0a19 	add.w	sl, r4, #25
 8014696:	68e3      	ldr	r3, [r4, #12]
 8014698:	6832      	ldr	r2, [r6, #0]
 801469a:	1a9b      	subs	r3, r3, r2
 801469c:	42ab      	cmp	r3, r5
 801469e:	dc26      	bgt.n	80146ee <_printf_common+0x96>
 80146a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80146a4:	1e13      	subs	r3, r2, #0
 80146a6:	6822      	ldr	r2, [r4, #0]
 80146a8:	bf18      	it	ne
 80146aa:	2301      	movne	r3, #1
 80146ac:	0692      	lsls	r2, r2, #26
 80146ae:	d42b      	bmi.n	8014708 <_printf_common+0xb0>
 80146b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80146b4:	4649      	mov	r1, r9
 80146b6:	4638      	mov	r0, r7
 80146b8:	47c0      	blx	r8
 80146ba:	3001      	adds	r0, #1
 80146bc:	d01e      	beq.n	80146fc <_printf_common+0xa4>
 80146be:	6823      	ldr	r3, [r4, #0]
 80146c0:	6922      	ldr	r2, [r4, #16]
 80146c2:	f003 0306 	and.w	r3, r3, #6
 80146c6:	2b04      	cmp	r3, #4
 80146c8:	bf02      	ittt	eq
 80146ca:	68e5      	ldreq	r5, [r4, #12]
 80146cc:	6833      	ldreq	r3, [r6, #0]
 80146ce:	1aed      	subeq	r5, r5, r3
 80146d0:	68a3      	ldr	r3, [r4, #8]
 80146d2:	bf0c      	ite	eq
 80146d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80146d8:	2500      	movne	r5, #0
 80146da:	4293      	cmp	r3, r2
 80146dc:	bfc4      	itt	gt
 80146de:	1a9b      	subgt	r3, r3, r2
 80146e0:	18ed      	addgt	r5, r5, r3
 80146e2:	2600      	movs	r6, #0
 80146e4:	341a      	adds	r4, #26
 80146e6:	42b5      	cmp	r5, r6
 80146e8:	d11a      	bne.n	8014720 <_printf_common+0xc8>
 80146ea:	2000      	movs	r0, #0
 80146ec:	e008      	b.n	8014700 <_printf_common+0xa8>
 80146ee:	2301      	movs	r3, #1
 80146f0:	4652      	mov	r2, sl
 80146f2:	4649      	mov	r1, r9
 80146f4:	4638      	mov	r0, r7
 80146f6:	47c0      	blx	r8
 80146f8:	3001      	adds	r0, #1
 80146fa:	d103      	bne.n	8014704 <_printf_common+0xac>
 80146fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014704:	3501      	adds	r5, #1
 8014706:	e7c6      	b.n	8014696 <_printf_common+0x3e>
 8014708:	18e1      	adds	r1, r4, r3
 801470a:	1c5a      	adds	r2, r3, #1
 801470c:	2030      	movs	r0, #48	; 0x30
 801470e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014712:	4422      	add	r2, r4
 8014714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801471c:	3302      	adds	r3, #2
 801471e:	e7c7      	b.n	80146b0 <_printf_common+0x58>
 8014720:	2301      	movs	r3, #1
 8014722:	4622      	mov	r2, r4
 8014724:	4649      	mov	r1, r9
 8014726:	4638      	mov	r0, r7
 8014728:	47c0      	blx	r8
 801472a:	3001      	adds	r0, #1
 801472c:	d0e6      	beq.n	80146fc <_printf_common+0xa4>
 801472e:	3601      	adds	r6, #1
 8014730:	e7d9      	b.n	80146e6 <_printf_common+0x8e>
	...

08014734 <_printf_i>:
 8014734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014738:	7e0f      	ldrb	r7, [r1, #24]
 801473a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801473c:	2f78      	cmp	r7, #120	; 0x78
 801473e:	4691      	mov	r9, r2
 8014740:	4680      	mov	r8, r0
 8014742:	460c      	mov	r4, r1
 8014744:	469a      	mov	sl, r3
 8014746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801474a:	d807      	bhi.n	801475c <_printf_i+0x28>
 801474c:	2f62      	cmp	r7, #98	; 0x62
 801474e:	d80a      	bhi.n	8014766 <_printf_i+0x32>
 8014750:	2f00      	cmp	r7, #0
 8014752:	f000 80d4 	beq.w	80148fe <_printf_i+0x1ca>
 8014756:	2f58      	cmp	r7, #88	; 0x58
 8014758:	f000 80c0 	beq.w	80148dc <_printf_i+0x1a8>
 801475c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014764:	e03a      	b.n	80147dc <_printf_i+0xa8>
 8014766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801476a:	2b15      	cmp	r3, #21
 801476c:	d8f6      	bhi.n	801475c <_printf_i+0x28>
 801476e:	a101      	add	r1, pc, #4	; (adr r1, 8014774 <_printf_i+0x40>)
 8014770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014774:	080147cd 	.word	0x080147cd
 8014778:	080147e1 	.word	0x080147e1
 801477c:	0801475d 	.word	0x0801475d
 8014780:	0801475d 	.word	0x0801475d
 8014784:	0801475d 	.word	0x0801475d
 8014788:	0801475d 	.word	0x0801475d
 801478c:	080147e1 	.word	0x080147e1
 8014790:	0801475d 	.word	0x0801475d
 8014794:	0801475d 	.word	0x0801475d
 8014798:	0801475d 	.word	0x0801475d
 801479c:	0801475d 	.word	0x0801475d
 80147a0:	080148e5 	.word	0x080148e5
 80147a4:	0801480d 	.word	0x0801480d
 80147a8:	0801489f 	.word	0x0801489f
 80147ac:	0801475d 	.word	0x0801475d
 80147b0:	0801475d 	.word	0x0801475d
 80147b4:	08014907 	.word	0x08014907
 80147b8:	0801475d 	.word	0x0801475d
 80147bc:	0801480d 	.word	0x0801480d
 80147c0:	0801475d 	.word	0x0801475d
 80147c4:	0801475d 	.word	0x0801475d
 80147c8:	080148a7 	.word	0x080148a7
 80147cc:	682b      	ldr	r3, [r5, #0]
 80147ce:	1d1a      	adds	r2, r3, #4
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	602a      	str	r2, [r5, #0]
 80147d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80147d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80147dc:	2301      	movs	r3, #1
 80147de:	e09f      	b.n	8014920 <_printf_i+0x1ec>
 80147e0:	6820      	ldr	r0, [r4, #0]
 80147e2:	682b      	ldr	r3, [r5, #0]
 80147e4:	0607      	lsls	r7, r0, #24
 80147e6:	f103 0104 	add.w	r1, r3, #4
 80147ea:	6029      	str	r1, [r5, #0]
 80147ec:	d501      	bpl.n	80147f2 <_printf_i+0xbe>
 80147ee:	681e      	ldr	r6, [r3, #0]
 80147f0:	e003      	b.n	80147fa <_printf_i+0xc6>
 80147f2:	0646      	lsls	r6, r0, #25
 80147f4:	d5fb      	bpl.n	80147ee <_printf_i+0xba>
 80147f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80147fa:	2e00      	cmp	r6, #0
 80147fc:	da03      	bge.n	8014806 <_printf_i+0xd2>
 80147fe:	232d      	movs	r3, #45	; 0x2d
 8014800:	4276      	negs	r6, r6
 8014802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014806:	485a      	ldr	r0, [pc, #360]	; (8014970 <_printf_i+0x23c>)
 8014808:	230a      	movs	r3, #10
 801480a:	e012      	b.n	8014832 <_printf_i+0xfe>
 801480c:	682b      	ldr	r3, [r5, #0]
 801480e:	6820      	ldr	r0, [r4, #0]
 8014810:	1d19      	adds	r1, r3, #4
 8014812:	6029      	str	r1, [r5, #0]
 8014814:	0605      	lsls	r5, r0, #24
 8014816:	d501      	bpl.n	801481c <_printf_i+0xe8>
 8014818:	681e      	ldr	r6, [r3, #0]
 801481a:	e002      	b.n	8014822 <_printf_i+0xee>
 801481c:	0641      	lsls	r1, r0, #25
 801481e:	d5fb      	bpl.n	8014818 <_printf_i+0xe4>
 8014820:	881e      	ldrh	r6, [r3, #0]
 8014822:	4853      	ldr	r0, [pc, #332]	; (8014970 <_printf_i+0x23c>)
 8014824:	2f6f      	cmp	r7, #111	; 0x6f
 8014826:	bf0c      	ite	eq
 8014828:	2308      	moveq	r3, #8
 801482a:	230a      	movne	r3, #10
 801482c:	2100      	movs	r1, #0
 801482e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014832:	6865      	ldr	r5, [r4, #4]
 8014834:	60a5      	str	r5, [r4, #8]
 8014836:	2d00      	cmp	r5, #0
 8014838:	bfa2      	ittt	ge
 801483a:	6821      	ldrge	r1, [r4, #0]
 801483c:	f021 0104 	bicge.w	r1, r1, #4
 8014840:	6021      	strge	r1, [r4, #0]
 8014842:	b90e      	cbnz	r6, 8014848 <_printf_i+0x114>
 8014844:	2d00      	cmp	r5, #0
 8014846:	d04b      	beq.n	80148e0 <_printf_i+0x1ac>
 8014848:	4615      	mov	r5, r2
 801484a:	fbb6 f1f3 	udiv	r1, r6, r3
 801484e:	fb03 6711 	mls	r7, r3, r1, r6
 8014852:	5dc7      	ldrb	r7, [r0, r7]
 8014854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014858:	4637      	mov	r7, r6
 801485a:	42bb      	cmp	r3, r7
 801485c:	460e      	mov	r6, r1
 801485e:	d9f4      	bls.n	801484a <_printf_i+0x116>
 8014860:	2b08      	cmp	r3, #8
 8014862:	d10b      	bne.n	801487c <_printf_i+0x148>
 8014864:	6823      	ldr	r3, [r4, #0]
 8014866:	07de      	lsls	r6, r3, #31
 8014868:	d508      	bpl.n	801487c <_printf_i+0x148>
 801486a:	6923      	ldr	r3, [r4, #16]
 801486c:	6861      	ldr	r1, [r4, #4]
 801486e:	4299      	cmp	r1, r3
 8014870:	bfde      	ittt	le
 8014872:	2330      	movle	r3, #48	; 0x30
 8014874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014878:	f105 35ff 	addle.w	r5, r5, #4294967295
 801487c:	1b52      	subs	r2, r2, r5
 801487e:	6122      	str	r2, [r4, #16]
 8014880:	f8cd a000 	str.w	sl, [sp]
 8014884:	464b      	mov	r3, r9
 8014886:	aa03      	add	r2, sp, #12
 8014888:	4621      	mov	r1, r4
 801488a:	4640      	mov	r0, r8
 801488c:	f7ff fee4 	bl	8014658 <_printf_common>
 8014890:	3001      	adds	r0, #1
 8014892:	d14a      	bne.n	801492a <_printf_i+0x1f6>
 8014894:	f04f 30ff 	mov.w	r0, #4294967295
 8014898:	b004      	add	sp, #16
 801489a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801489e:	6823      	ldr	r3, [r4, #0]
 80148a0:	f043 0320 	orr.w	r3, r3, #32
 80148a4:	6023      	str	r3, [r4, #0]
 80148a6:	4833      	ldr	r0, [pc, #204]	; (8014974 <_printf_i+0x240>)
 80148a8:	2778      	movs	r7, #120	; 0x78
 80148aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80148ae:	6823      	ldr	r3, [r4, #0]
 80148b0:	6829      	ldr	r1, [r5, #0]
 80148b2:	061f      	lsls	r7, r3, #24
 80148b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80148b8:	d402      	bmi.n	80148c0 <_printf_i+0x18c>
 80148ba:	065f      	lsls	r7, r3, #25
 80148bc:	bf48      	it	mi
 80148be:	b2b6      	uxthmi	r6, r6
 80148c0:	07df      	lsls	r7, r3, #31
 80148c2:	bf48      	it	mi
 80148c4:	f043 0320 	orrmi.w	r3, r3, #32
 80148c8:	6029      	str	r1, [r5, #0]
 80148ca:	bf48      	it	mi
 80148cc:	6023      	strmi	r3, [r4, #0]
 80148ce:	b91e      	cbnz	r6, 80148d8 <_printf_i+0x1a4>
 80148d0:	6823      	ldr	r3, [r4, #0]
 80148d2:	f023 0320 	bic.w	r3, r3, #32
 80148d6:	6023      	str	r3, [r4, #0]
 80148d8:	2310      	movs	r3, #16
 80148da:	e7a7      	b.n	801482c <_printf_i+0xf8>
 80148dc:	4824      	ldr	r0, [pc, #144]	; (8014970 <_printf_i+0x23c>)
 80148de:	e7e4      	b.n	80148aa <_printf_i+0x176>
 80148e0:	4615      	mov	r5, r2
 80148e2:	e7bd      	b.n	8014860 <_printf_i+0x12c>
 80148e4:	682b      	ldr	r3, [r5, #0]
 80148e6:	6826      	ldr	r6, [r4, #0]
 80148e8:	6961      	ldr	r1, [r4, #20]
 80148ea:	1d18      	adds	r0, r3, #4
 80148ec:	6028      	str	r0, [r5, #0]
 80148ee:	0635      	lsls	r5, r6, #24
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	d501      	bpl.n	80148f8 <_printf_i+0x1c4>
 80148f4:	6019      	str	r1, [r3, #0]
 80148f6:	e002      	b.n	80148fe <_printf_i+0x1ca>
 80148f8:	0670      	lsls	r0, r6, #25
 80148fa:	d5fb      	bpl.n	80148f4 <_printf_i+0x1c0>
 80148fc:	8019      	strh	r1, [r3, #0]
 80148fe:	2300      	movs	r3, #0
 8014900:	6123      	str	r3, [r4, #16]
 8014902:	4615      	mov	r5, r2
 8014904:	e7bc      	b.n	8014880 <_printf_i+0x14c>
 8014906:	682b      	ldr	r3, [r5, #0]
 8014908:	1d1a      	adds	r2, r3, #4
 801490a:	602a      	str	r2, [r5, #0]
 801490c:	681d      	ldr	r5, [r3, #0]
 801490e:	6862      	ldr	r2, [r4, #4]
 8014910:	2100      	movs	r1, #0
 8014912:	4628      	mov	r0, r5
 8014914:	f7eb fc5c 	bl	80001d0 <memchr>
 8014918:	b108      	cbz	r0, 801491e <_printf_i+0x1ea>
 801491a:	1b40      	subs	r0, r0, r5
 801491c:	6060      	str	r0, [r4, #4]
 801491e:	6863      	ldr	r3, [r4, #4]
 8014920:	6123      	str	r3, [r4, #16]
 8014922:	2300      	movs	r3, #0
 8014924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014928:	e7aa      	b.n	8014880 <_printf_i+0x14c>
 801492a:	6923      	ldr	r3, [r4, #16]
 801492c:	462a      	mov	r2, r5
 801492e:	4649      	mov	r1, r9
 8014930:	4640      	mov	r0, r8
 8014932:	47d0      	blx	sl
 8014934:	3001      	adds	r0, #1
 8014936:	d0ad      	beq.n	8014894 <_printf_i+0x160>
 8014938:	6823      	ldr	r3, [r4, #0]
 801493a:	079b      	lsls	r3, r3, #30
 801493c:	d413      	bmi.n	8014966 <_printf_i+0x232>
 801493e:	68e0      	ldr	r0, [r4, #12]
 8014940:	9b03      	ldr	r3, [sp, #12]
 8014942:	4298      	cmp	r0, r3
 8014944:	bfb8      	it	lt
 8014946:	4618      	movlt	r0, r3
 8014948:	e7a6      	b.n	8014898 <_printf_i+0x164>
 801494a:	2301      	movs	r3, #1
 801494c:	4632      	mov	r2, r6
 801494e:	4649      	mov	r1, r9
 8014950:	4640      	mov	r0, r8
 8014952:	47d0      	blx	sl
 8014954:	3001      	adds	r0, #1
 8014956:	d09d      	beq.n	8014894 <_printf_i+0x160>
 8014958:	3501      	adds	r5, #1
 801495a:	68e3      	ldr	r3, [r4, #12]
 801495c:	9903      	ldr	r1, [sp, #12]
 801495e:	1a5b      	subs	r3, r3, r1
 8014960:	42ab      	cmp	r3, r5
 8014962:	dcf2      	bgt.n	801494a <_printf_i+0x216>
 8014964:	e7eb      	b.n	801493e <_printf_i+0x20a>
 8014966:	2500      	movs	r5, #0
 8014968:	f104 0619 	add.w	r6, r4, #25
 801496c:	e7f5      	b.n	801495a <_printf_i+0x226>
 801496e:	bf00      	nop
 8014970:	0801aeb3 	.word	0x0801aeb3
 8014974:	0801aec4 	.word	0x0801aec4

08014978 <_scanf_float>:
 8014978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801497c:	b087      	sub	sp, #28
 801497e:	4617      	mov	r7, r2
 8014980:	9303      	str	r3, [sp, #12]
 8014982:	688b      	ldr	r3, [r1, #8]
 8014984:	1e5a      	subs	r2, r3, #1
 8014986:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801498a:	bf83      	ittte	hi
 801498c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014990:	195b      	addhi	r3, r3, r5
 8014992:	9302      	strhi	r3, [sp, #8]
 8014994:	2300      	movls	r3, #0
 8014996:	bf86      	itte	hi
 8014998:	f240 135d 	movwhi	r3, #349	; 0x15d
 801499c:	608b      	strhi	r3, [r1, #8]
 801499e:	9302      	strls	r3, [sp, #8]
 80149a0:	680b      	ldr	r3, [r1, #0]
 80149a2:	468b      	mov	fp, r1
 80149a4:	2500      	movs	r5, #0
 80149a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80149aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80149ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80149b2:	4680      	mov	r8, r0
 80149b4:	460c      	mov	r4, r1
 80149b6:	465e      	mov	r6, fp
 80149b8:	46aa      	mov	sl, r5
 80149ba:	46a9      	mov	r9, r5
 80149bc:	9501      	str	r5, [sp, #4]
 80149be:	68a2      	ldr	r2, [r4, #8]
 80149c0:	b152      	cbz	r2, 80149d8 <_scanf_float+0x60>
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	2b4e      	cmp	r3, #78	; 0x4e
 80149c8:	d864      	bhi.n	8014a94 <_scanf_float+0x11c>
 80149ca:	2b40      	cmp	r3, #64	; 0x40
 80149cc:	d83c      	bhi.n	8014a48 <_scanf_float+0xd0>
 80149ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80149d2:	b2c8      	uxtb	r0, r1
 80149d4:	280e      	cmp	r0, #14
 80149d6:	d93a      	bls.n	8014a4e <_scanf_float+0xd6>
 80149d8:	f1b9 0f00 	cmp.w	r9, #0
 80149dc:	d003      	beq.n	80149e6 <_scanf_float+0x6e>
 80149de:	6823      	ldr	r3, [r4, #0]
 80149e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80149e4:	6023      	str	r3, [r4, #0]
 80149e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80149ea:	f1ba 0f01 	cmp.w	sl, #1
 80149ee:	f200 8113 	bhi.w	8014c18 <_scanf_float+0x2a0>
 80149f2:	455e      	cmp	r6, fp
 80149f4:	f200 8105 	bhi.w	8014c02 <_scanf_float+0x28a>
 80149f8:	2501      	movs	r5, #1
 80149fa:	4628      	mov	r0, r5
 80149fc:	b007      	add	sp, #28
 80149fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014a06:	2a0d      	cmp	r2, #13
 8014a08:	d8e6      	bhi.n	80149d8 <_scanf_float+0x60>
 8014a0a:	a101      	add	r1, pc, #4	; (adr r1, 8014a10 <_scanf_float+0x98>)
 8014a0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014a10:	08014b4f 	.word	0x08014b4f
 8014a14:	080149d9 	.word	0x080149d9
 8014a18:	080149d9 	.word	0x080149d9
 8014a1c:	080149d9 	.word	0x080149d9
 8014a20:	08014baf 	.word	0x08014baf
 8014a24:	08014b87 	.word	0x08014b87
 8014a28:	080149d9 	.word	0x080149d9
 8014a2c:	080149d9 	.word	0x080149d9
 8014a30:	08014b5d 	.word	0x08014b5d
 8014a34:	080149d9 	.word	0x080149d9
 8014a38:	080149d9 	.word	0x080149d9
 8014a3c:	080149d9 	.word	0x080149d9
 8014a40:	080149d9 	.word	0x080149d9
 8014a44:	08014b15 	.word	0x08014b15
 8014a48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014a4c:	e7db      	b.n	8014a06 <_scanf_float+0x8e>
 8014a4e:	290e      	cmp	r1, #14
 8014a50:	d8c2      	bhi.n	80149d8 <_scanf_float+0x60>
 8014a52:	a001      	add	r0, pc, #4	; (adr r0, 8014a58 <_scanf_float+0xe0>)
 8014a54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014a58:	08014b07 	.word	0x08014b07
 8014a5c:	080149d9 	.word	0x080149d9
 8014a60:	08014b07 	.word	0x08014b07
 8014a64:	08014b9b 	.word	0x08014b9b
 8014a68:	080149d9 	.word	0x080149d9
 8014a6c:	08014ab5 	.word	0x08014ab5
 8014a70:	08014af1 	.word	0x08014af1
 8014a74:	08014af1 	.word	0x08014af1
 8014a78:	08014af1 	.word	0x08014af1
 8014a7c:	08014af1 	.word	0x08014af1
 8014a80:	08014af1 	.word	0x08014af1
 8014a84:	08014af1 	.word	0x08014af1
 8014a88:	08014af1 	.word	0x08014af1
 8014a8c:	08014af1 	.word	0x08014af1
 8014a90:	08014af1 	.word	0x08014af1
 8014a94:	2b6e      	cmp	r3, #110	; 0x6e
 8014a96:	d809      	bhi.n	8014aac <_scanf_float+0x134>
 8014a98:	2b60      	cmp	r3, #96	; 0x60
 8014a9a:	d8b2      	bhi.n	8014a02 <_scanf_float+0x8a>
 8014a9c:	2b54      	cmp	r3, #84	; 0x54
 8014a9e:	d077      	beq.n	8014b90 <_scanf_float+0x218>
 8014aa0:	2b59      	cmp	r3, #89	; 0x59
 8014aa2:	d199      	bne.n	80149d8 <_scanf_float+0x60>
 8014aa4:	2d07      	cmp	r5, #7
 8014aa6:	d197      	bne.n	80149d8 <_scanf_float+0x60>
 8014aa8:	2508      	movs	r5, #8
 8014aaa:	e029      	b.n	8014b00 <_scanf_float+0x188>
 8014aac:	2b74      	cmp	r3, #116	; 0x74
 8014aae:	d06f      	beq.n	8014b90 <_scanf_float+0x218>
 8014ab0:	2b79      	cmp	r3, #121	; 0x79
 8014ab2:	e7f6      	b.n	8014aa2 <_scanf_float+0x12a>
 8014ab4:	6821      	ldr	r1, [r4, #0]
 8014ab6:	05c8      	lsls	r0, r1, #23
 8014ab8:	d51a      	bpl.n	8014af0 <_scanf_float+0x178>
 8014aba:	9b02      	ldr	r3, [sp, #8]
 8014abc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014ac0:	6021      	str	r1, [r4, #0]
 8014ac2:	f109 0901 	add.w	r9, r9, #1
 8014ac6:	b11b      	cbz	r3, 8014ad0 <_scanf_float+0x158>
 8014ac8:	3b01      	subs	r3, #1
 8014aca:	3201      	adds	r2, #1
 8014acc:	9302      	str	r3, [sp, #8]
 8014ace:	60a2      	str	r2, [r4, #8]
 8014ad0:	68a3      	ldr	r3, [r4, #8]
 8014ad2:	3b01      	subs	r3, #1
 8014ad4:	60a3      	str	r3, [r4, #8]
 8014ad6:	6923      	ldr	r3, [r4, #16]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	6123      	str	r3, [r4, #16]
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	3b01      	subs	r3, #1
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	607b      	str	r3, [r7, #4]
 8014ae4:	f340 8084 	ble.w	8014bf0 <_scanf_float+0x278>
 8014ae8:	683b      	ldr	r3, [r7, #0]
 8014aea:	3301      	adds	r3, #1
 8014aec:	603b      	str	r3, [r7, #0]
 8014aee:	e766      	b.n	80149be <_scanf_float+0x46>
 8014af0:	eb1a 0f05 	cmn.w	sl, r5
 8014af4:	f47f af70 	bne.w	80149d8 <_scanf_float+0x60>
 8014af8:	6822      	ldr	r2, [r4, #0]
 8014afa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014afe:	6022      	str	r2, [r4, #0]
 8014b00:	f806 3b01 	strb.w	r3, [r6], #1
 8014b04:	e7e4      	b.n	8014ad0 <_scanf_float+0x158>
 8014b06:	6822      	ldr	r2, [r4, #0]
 8014b08:	0610      	lsls	r0, r2, #24
 8014b0a:	f57f af65 	bpl.w	80149d8 <_scanf_float+0x60>
 8014b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014b12:	e7f4      	b.n	8014afe <_scanf_float+0x186>
 8014b14:	f1ba 0f00 	cmp.w	sl, #0
 8014b18:	d10e      	bne.n	8014b38 <_scanf_float+0x1c0>
 8014b1a:	f1b9 0f00 	cmp.w	r9, #0
 8014b1e:	d10e      	bne.n	8014b3e <_scanf_float+0x1c6>
 8014b20:	6822      	ldr	r2, [r4, #0]
 8014b22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014b26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014b2a:	d108      	bne.n	8014b3e <_scanf_float+0x1c6>
 8014b2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014b30:	6022      	str	r2, [r4, #0]
 8014b32:	f04f 0a01 	mov.w	sl, #1
 8014b36:	e7e3      	b.n	8014b00 <_scanf_float+0x188>
 8014b38:	f1ba 0f02 	cmp.w	sl, #2
 8014b3c:	d055      	beq.n	8014bea <_scanf_float+0x272>
 8014b3e:	2d01      	cmp	r5, #1
 8014b40:	d002      	beq.n	8014b48 <_scanf_float+0x1d0>
 8014b42:	2d04      	cmp	r5, #4
 8014b44:	f47f af48 	bne.w	80149d8 <_scanf_float+0x60>
 8014b48:	3501      	adds	r5, #1
 8014b4a:	b2ed      	uxtb	r5, r5
 8014b4c:	e7d8      	b.n	8014b00 <_scanf_float+0x188>
 8014b4e:	f1ba 0f01 	cmp.w	sl, #1
 8014b52:	f47f af41 	bne.w	80149d8 <_scanf_float+0x60>
 8014b56:	f04f 0a02 	mov.w	sl, #2
 8014b5a:	e7d1      	b.n	8014b00 <_scanf_float+0x188>
 8014b5c:	b97d      	cbnz	r5, 8014b7e <_scanf_float+0x206>
 8014b5e:	f1b9 0f00 	cmp.w	r9, #0
 8014b62:	f47f af3c 	bne.w	80149de <_scanf_float+0x66>
 8014b66:	6822      	ldr	r2, [r4, #0]
 8014b68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014b6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014b70:	f47f af39 	bne.w	80149e6 <_scanf_float+0x6e>
 8014b74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014b78:	6022      	str	r2, [r4, #0]
 8014b7a:	2501      	movs	r5, #1
 8014b7c:	e7c0      	b.n	8014b00 <_scanf_float+0x188>
 8014b7e:	2d03      	cmp	r5, #3
 8014b80:	d0e2      	beq.n	8014b48 <_scanf_float+0x1d0>
 8014b82:	2d05      	cmp	r5, #5
 8014b84:	e7de      	b.n	8014b44 <_scanf_float+0x1cc>
 8014b86:	2d02      	cmp	r5, #2
 8014b88:	f47f af26 	bne.w	80149d8 <_scanf_float+0x60>
 8014b8c:	2503      	movs	r5, #3
 8014b8e:	e7b7      	b.n	8014b00 <_scanf_float+0x188>
 8014b90:	2d06      	cmp	r5, #6
 8014b92:	f47f af21 	bne.w	80149d8 <_scanf_float+0x60>
 8014b96:	2507      	movs	r5, #7
 8014b98:	e7b2      	b.n	8014b00 <_scanf_float+0x188>
 8014b9a:	6822      	ldr	r2, [r4, #0]
 8014b9c:	0591      	lsls	r1, r2, #22
 8014b9e:	f57f af1b 	bpl.w	80149d8 <_scanf_float+0x60>
 8014ba2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014ba6:	6022      	str	r2, [r4, #0]
 8014ba8:	f8cd 9004 	str.w	r9, [sp, #4]
 8014bac:	e7a8      	b.n	8014b00 <_scanf_float+0x188>
 8014bae:	6822      	ldr	r2, [r4, #0]
 8014bb0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014bb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014bb8:	d006      	beq.n	8014bc8 <_scanf_float+0x250>
 8014bba:	0550      	lsls	r0, r2, #21
 8014bbc:	f57f af0c 	bpl.w	80149d8 <_scanf_float+0x60>
 8014bc0:	f1b9 0f00 	cmp.w	r9, #0
 8014bc4:	f43f af0f 	beq.w	80149e6 <_scanf_float+0x6e>
 8014bc8:	0591      	lsls	r1, r2, #22
 8014bca:	bf58      	it	pl
 8014bcc:	9901      	ldrpl	r1, [sp, #4]
 8014bce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014bd2:	bf58      	it	pl
 8014bd4:	eba9 0101 	subpl.w	r1, r9, r1
 8014bd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014bdc:	bf58      	it	pl
 8014bde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014be2:	6022      	str	r2, [r4, #0]
 8014be4:	f04f 0900 	mov.w	r9, #0
 8014be8:	e78a      	b.n	8014b00 <_scanf_float+0x188>
 8014bea:	f04f 0a03 	mov.w	sl, #3
 8014bee:	e787      	b.n	8014b00 <_scanf_float+0x188>
 8014bf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014bf4:	4639      	mov	r1, r7
 8014bf6:	4640      	mov	r0, r8
 8014bf8:	4798      	blx	r3
 8014bfa:	2800      	cmp	r0, #0
 8014bfc:	f43f aedf 	beq.w	80149be <_scanf_float+0x46>
 8014c00:	e6ea      	b.n	80149d8 <_scanf_float+0x60>
 8014c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014c06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014c0a:	463a      	mov	r2, r7
 8014c0c:	4640      	mov	r0, r8
 8014c0e:	4798      	blx	r3
 8014c10:	6923      	ldr	r3, [r4, #16]
 8014c12:	3b01      	subs	r3, #1
 8014c14:	6123      	str	r3, [r4, #16]
 8014c16:	e6ec      	b.n	80149f2 <_scanf_float+0x7a>
 8014c18:	1e6b      	subs	r3, r5, #1
 8014c1a:	2b06      	cmp	r3, #6
 8014c1c:	d825      	bhi.n	8014c6a <_scanf_float+0x2f2>
 8014c1e:	2d02      	cmp	r5, #2
 8014c20:	d836      	bhi.n	8014c90 <_scanf_float+0x318>
 8014c22:	455e      	cmp	r6, fp
 8014c24:	f67f aee8 	bls.w	80149f8 <_scanf_float+0x80>
 8014c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014c2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014c30:	463a      	mov	r2, r7
 8014c32:	4640      	mov	r0, r8
 8014c34:	4798      	blx	r3
 8014c36:	6923      	ldr	r3, [r4, #16]
 8014c38:	3b01      	subs	r3, #1
 8014c3a:	6123      	str	r3, [r4, #16]
 8014c3c:	e7f1      	b.n	8014c22 <_scanf_float+0x2aa>
 8014c3e:	9802      	ldr	r0, [sp, #8]
 8014c40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014c44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014c48:	9002      	str	r0, [sp, #8]
 8014c4a:	463a      	mov	r2, r7
 8014c4c:	4640      	mov	r0, r8
 8014c4e:	4798      	blx	r3
 8014c50:	6923      	ldr	r3, [r4, #16]
 8014c52:	3b01      	subs	r3, #1
 8014c54:	6123      	str	r3, [r4, #16]
 8014c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c5a:	fa5f fa8a 	uxtb.w	sl, sl
 8014c5e:	f1ba 0f02 	cmp.w	sl, #2
 8014c62:	d1ec      	bne.n	8014c3e <_scanf_float+0x2c6>
 8014c64:	3d03      	subs	r5, #3
 8014c66:	b2ed      	uxtb	r5, r5
 8014c68:	1b76      	subs	r6, r6, r5
 8014c6a:	6823      	ldr	r3, [r4, #0]
 8014c6c:	05da      	lsls	r2, r3, #23
 8014c6e:	d52f      	bpl.n	8014cd0 <_scanf_float+0x358>
 8014c70:	055b      	lsls	r3, r3, #21
 8014c72:	d510      	bpl.n	8014c96 <_scanf_float+0x31e>
 8014c74:	455e      	cmp	r6, fp
 8014c76:	f67f aebf 	bls.w	80149f8 <_scanf_float+0x80>
 8014c7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014c7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014c82:	463a      	mov	r2, r7
 8014c84:	4640      	mov	r0, r8
 8014c86:	4798      	blx	r3
 8014c88:	6923      	ldr	r3, [r4, #16]
 8014c8a:	3b01      	subs	r3, #1
 8014c8c:	6123      	str	r3, [r4, #16]
 8014c8e:	e7f1      	b.n	8014c74 <_scanf_float+0x2fc>
 8014c90:	46aa      	mov	sl, r5
 8014c92:	9602      	str	r6, [sp, #8]
 8014c94:	e7df      	b.n	8014c56 <_scanf_float+0x2de>
 8014c96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014c9a:	6923      	ldr	r3, [r4, #16]
 8014c9c:	2965      	cmp	r1, #101	; 0x65
 8014c9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8014ca2:	f106 35ff 	add.w	r5, r6, #4294967295
 8014ca6:	6123      	str	r3, [r4, #16]
 8014ca8:	d00c      	beq.n	8014cc4 <_scanf_float+0x34c>
 8014caa:	2945      	cmp	r1, #69	; 0x45
 8014cac:	d00a      	beq.n	8014cc4 <_scanf_float+0x34c>
 8014cae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014cb2:	463a      	mov	r2, r7
 8014cb4:	4640      	mov	r0, r8
 8014cb6:	4798      	blx	r3
 8014cb8:	6923      	ldr	r3, [r4, #16]
 8014cba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014cbe:	3b01      	subs	r3, #1
 8014cc0:	1eb5      	subs	r5, r6, #2
 8014cc2:	6123      	str	r3, [r4, #16]
 8014cc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014cc8:	463a      	mov	r2, r7
 8014cca:	4640      	mov	r0, r8
 8014ccc:	4798      	blx	r3
 8014cce:	462e      	mov	r6, r5
 8014cd0:	6825      	ldr	r5, [r4, #0]
 8014cd2:	f015 0510 	ands.w	r5, r5, #16
 8014cd6:	d158      	bne.n	8014d8a <_scanf_float+0x412>
 8014cd8:	7035      	strb	r5, [r6, #0]
 8014cda:	6823      	ldr	r3, [r4, #0]
 8014cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ce4:	d11c      	bne.n	8014d20 <_scanf_float+0x3a8>
 8014ce6:	9b01      	ldr	r3, [sp, #4]
 8014ce8:	454b      	cmp	r3, r9
 8014cea:	eba3 0209 	sub.w	r2, r3, r9
 8014cee:	d124      	bne.n	8014d3a <_scanf_float+0x3c2>
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	4659      	mov	r1, fp
 8014cf4:	4640      	mov	r0, r8
 8014cf6:	f7ff f8df 	bl	8013eb8 <_strtod_r>
 8014cfa:	9b03      	ldr	r3, [sp, #12]
 8014cfc:	6821      	ldr	r1, [r4, #0]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	f011 0f02 	tst.w	r1, #2
 8014d04:	ec57 6b10 	vmov	r6, r7, d0
 8014d08:	f103 0204 	add.w	r2, r3, #4
 8014d0c:	d020      	beq.n	8014d50 <_scanf_float+0x3d8>
 8014d0e:	9903      	ldr	r1, [sp, #12]
 8014d10:	600a      	str	r2, [r1, #0]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	e9c3 6700 	strd	r6, r7, [r3]
 8014d18:	68e3      	ldr	r3, [r4, #12]
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	60e3      	str	r3, [r4, #12]
 8014d1e:	e66c      	b.n	80149fa <_scanf_float+0x82>
 8014d20:	9b04      	ldr	r3, [sp, #16]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d0e4      	beq.n	8014cf0 <_scanf_float+0x378>
 8014d26:	9905      	ldr	r1, [sp, #20]
 8014d28:	230a      	movs	r3, #10
 8014d2a:	462a      	mov	r2, r5
 8014d2c:	3101      	adds	r1, #1
 8014d2e:	4640      	mov	r0, r8
 8014d30:	f7ff f9b0 	bl	8014094 <_strtol_r>
 8014d34:	9b04      	ldr	r3, [sp, #16]
 8014d36:	9e05      	ldr	r6, [sp, #20]
 8014d38:	1ac2      	subs	r2, r0, r3
 8014d3a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014d3e:	429e      	cmp	r6, r3
 8014d40:	bf28      	it	cs
 8014d42:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014d46:	4912      	ldr	r1, [pc, #72]	; (8014d90 <_scanf_float+0x418>)
 8014d48:	4630      	mov	r0, r6
 8014d4a:	f000 f91b 	bl	8014f84 <siprintf>
 8014d4e:	e7cf      	b.n	8014cf0 <_scanf_float+0x378>
 8014d50:	f011 0f04 	tst.w	r1, #4
 8014d54:	9903      	ldr	r1, [sp, #12]
 8014d56:	600a      	str	r2, [r1, #0]
 8014d58:	d1db      	bne.n	8014d12 <_scanf_float+0x39a>
 8014d5a:	f8d3 8000 	ldr.w	r8, [r3]
 8014d5e:	ee10 2a10 	vmov	r2, s0
 8014d62:	ee10 0a10 	vmov	r0, s0
 8014d66:	463b      	mov	r3, r7
 8014d68:	4639      	mov	r1, r7
 8014d6a:	f7eb fedf 	bl	8000b2c <__aeabi_dcmpun>
 8014d6e:	b128      	cbz	r0, 8014d7c <_scanf_float+0x404>
 8014d70:	4808      	ldr	r0, [pc, #32]	; (8014d94 <_scanf_float+0x41c>)
 8014d72:	f000 fa9d 	bl	80152b0 <nanf>
 8014d76:	ed88 0a00 	vstr	s0, [r8]
 8014d7a:	e7cd      	b.n	8014d18 <_scanf_float+0x3a0>
 8014d7c:	4630      	mov	r0, r6
 8014d7e:	4639      	mov	r1, r7
 8014d80:	f7eb ff32 	bl	8000be8 <__aeabi_d2f>
 8014d84:	f8c8 0000 	str.w	r0, [r8]
 8014d88:	e7c6      	b.n	8014d18 <_scanf_float+0x3a0>
 8014d8a:	2500      	movs	r5, #0
 8014d8c:	e635      	b.n	80149fa <_scanf_float+0x82>
 8014d8e:	bf00      	nop
 8014d90:	0801aed5 	.word	0x0801aed5
 8014d94:	0801af8e 	.word	0x0801af8e

08014d98 <std>:
 8014d98:	2300      	movs	r3, #0
 8014d9a:	b510      	push	{r4, lr}
 8014d9c:	4604      	mov	r4, r0
 8014d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8014da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014da6:	6083      	str	r3, [r0, #8]
 8014da8:	8181      	strh	r1, [r0, #12]
 8014daa:	6643      	str	r3, [r0, #100]	; 0x64
 8014dac:	81c2      	strh	r2, [r0, #14]
 8014dae:	6183      	str	r3, [r0, #24]
 8014db0:	4619      	mov	r1, r3
 8014db2:	2208      	movs	r2, #8
 8014db4:	305c      	adds	r0, #92	; 0x5c
 8014db6:	f000 f948 	bl	801504a <memset>
 8014dba:	4b0d      	ldr	r3, [pc, #52]	; (8014df0 <std+0x58>)
 8014dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8014dbe:	4b0d      	ldr	r3, [pc, #52]	; (8014df4 <std+0x5c>)
 8014dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8014dc2:	4b0d      	ldr	r3, [pc, #52]	; (8014df8 <std+0x60>)
 8014dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014dc6:	4b0d      	ldr	r3, [pc, #52]	; (8014dfc <std+0x64>)
 8014dc8:	6323      	str	r3, [r4, #48]	; 0x30
 8014dca:	4b0d      	ldr	r3, [pc, #52]	; (8014e00 <std+0x68>)
 8014dcc:	6224      	str	r4, [r4, #32]
 8014dce:	429c      	cmp	r4, r3
 8014dd0:	d006      	beq.n	8014de0 <std+0x48>
 8014dd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014dd6:	4294      	cmp	r4, r2
 8014dd8:	d002      	beq.n	8014de0 <std+0x48>
 8014dda:	33d0      	adds	r3, #208	; 0xd0
 8014ddc:	429c      	cmp	r4, r3
 8014dde:	d105      	bne.n	8014dec <std+0x54>
 8014de0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014de8:	f000 ba40 	b.w	801526c <__retarget_lock_init_recursive>
 8014dec:	bd10      	pop	{r4, pc}
 8014dee:	bf00      	nop
 8014df0:	08014fc5 	.word	0x08014fc5
 8014df4:	08014fe7 	.word	0x08014fe7
 8014df8:	0801501f 	.word	0x0801501f
 8014dfc:	08015043 	.word	0x08015043
 8014e00:	20002250 	.word	0x20002250

08014e04 <stdio_exit_handler>:
 8014e04:	4a02      	ldr	r2, [pc, #8]	; (8014e10 <stdio_exit_handler+0xc>)
 8014e06:	4903      	ldr	r1, [pc, #12]	; (8014e14 <stdio_exit_handler+0x10>)
 8014e08:	4803      	ldr	r0, [pc, #12]	; (8014e18 <stdio_exit_handler+0x14>)
 8014e0a:	f000 b869 	b.w	8014ee0 <_fwalk_sglue>
 8014e0e:	bf00      	nop
 8014e10:	2000012c 	.word	0x2000012c
 8014e14:	08017489 	.word	0x08017489
 8014e18:	200002a4 	.word	0x200002a4

08014e1c <cleanup_stdio>:
 8014e1c:	6841      	ldr	r1, [r0, #4]
 8014e1e:	4b0c      	ldr	r3, [pc, #48]	; (8014e50 <cleanup_stdio+0x34>)
 8014e20:	4299      	cmp	r1, r3
 8014e22:	b510      	push	{r4, lr}
 8014e24:	4604      	mov	r4, r0
 8014e26:	d001      	beq.n	8014e2c <cleanup_stdio+0x10>
 8014e28:	f002 fb2e 	bl	8017488 <_fflush_r>
 8014e2c:	68a1      	ldr	r1, [r4, #8]
 8014e2e:	4b09      	ldr	r3, [pc, #36]	; (8014e54 <cleanup_stdio+0x38>)
 8014e30:	4299      	cmp	r1, r3
 8014e32:	d002      	beq.n	8014e3a <cleanup_stdio+0x1e>
 8014e34:	4620      	mov	r0, r4
 8014e36:	f002 fb27 	bl	8017488 <_fflush_r>
 8014e3a:	68e1      	ldr	r1, [r4, #12]
 8014e3c:	4b06      	ldr	r3, [pc, #24]	; (8014e58 <cleanup_stdio+0x3c>)
 8014e3e:	4299      	cmp	r1, r3
 8014e40:	d004      	beq.n	8014e4c <cleanup_stdio+0x30>
 8014e42:	4620      	mov	r0, r4
 8014e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e48:	f002 bb1e 	b.w	8017488 <_fflush_r>
 8014e4c:	bd10      	pop	{r4, pc}
 8014e4e:	bf00      	nop
 8014e50:	20002250 	.word	0x20002250
 8014e54:	200022b8 	.word	0x200022b8
 8014e58:	20002320 	.word	0x20002320

08014e5c <global_stdio_init.part.0>:
 8014e5c:	b510      	push	{r4, lr}
 8014e5e:	4b0b      	ldr	r3, [pc, #44]	; (8014e8c <global_stdio_init.part.0+0x30>)
 8014e60:	4c0b      	ldr	r4, [pc, #44]	; (8014e90 <global_stdio_init.part.0+0x34>)
 8014e62:	4a0c      	ldr	r2, [pc, #48]	; (8014e94 <global_stdio_init.part.0+0x38>)
 8014e64:	601a      	str	r2, [r3, #0]
 8014e66:	4620      	mov	r0, r4
 8014e68:	2200      	movs	r2, #0
 8014e6a:	2104      	movs	r1, #4
 8014e6c:	f7ff ff94 	bl	8014d98 <std>
 8014e70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014e74:	2201      	movs	r2, #1
 8014e76:	2109      	movs	r1, #9
 8014e78:	f7ff ff8e 	bl	8014d98 <std>
 8014e7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014e80:	2202      	movs	r2, #2
 8014e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e86:	2112      	movs	r1, #18
 8014e88:	f7ff bf86 	b.w	8014d98 <std>
 8014e8c:	20002388 	.word	0x20002388
 8014e90:	20002250 	.word	0x20002250
 8014e94:	08014e05 	.word	0x08014e05

08014e98 <__sfp_lock_acquire>:
 8014e98:	4801      	ldr	r0, [pc, #4]	; (8014ea0 <__sfp_lock_acquire+0x8>)
 8014e9a:	f000 b9e8 	b.w	801526e <__retarget_lock_acquire_recursive>
 8014e9e:	bf00      	nop
 8014ea0:	20002391 	.word	0x20002391

08014ea4 <__sfp_lock_release>:
 8014ea4:	4801      	ldr	r0, [pc, #4]	; (8014eac <__sfp_lock_release+0x8>)
 8014ea6:	f000 b9e3 	b.w	8015270 <__retarget_lock_release_recursive>
 8014eaa:	bf00      	nop
 8014eac:	20002391 	.word	0x20002391

08014eb0 <__sinit>:
 8014eb0:	b510      	push	{r4, lr}
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	f7ff fff0 	bl	8014e98 <__sfp_lock_acquire>
 8014eb8:	6a23      	ldr	r3, [r4, #32]
 8014eba:	b11b      	cbz	r3, 8014ec4 <__sinit+0x14>
 8014ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ec0:	f7ff bff0 	b.w	8014ea4 <__sfp_lock_release>
 8014ec4:	4b04      	ldr	r3, [pc, #16]	; (8014ed8 <__sinit+0x28>)
 8014ec6:	6223      	str	r3, [r4, #32]
 8014ec8:	4b04      	ldr	r3, [pc, #16]	; (8014edc <__sinit+0x2c>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d1f5      	bne.n	8014ebc <__sinit+0xc>
 8014ed0:	f7ff ffc4 	bl	8014e5c <global_stdio_init.part.0>
 8014ed4:	e7f2      	b.n	8014ebc <__sinit+0xc>
 8014ed6:	bf00      	nop
 8014ed8:	08014e1d 	.word	0x08014e1d
 8014edc:	20002388 	.word	0x20002388

08014ee0 <_fwalk_sglue>:
 8014ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ee4:	4607      	mov	r7, r0
 8014ee6:	4688      	mov	r8, r1
 8014ee8:	4614      	mov	r4, r2
 8014eea:	2600      	movs	r6, #0
 8014eec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014ef0:	f1b9 0901 	subs.w	r9, r9, #1
 8014ef4:	d505      	bpl.n	8014f02 <_fwalk_sglue+0x22>
 8014ef6:	6824      	ldr	r4, [r4, #0]
 8014ef8:	2c00      	cmp	r4, #0
 8014efa:	d1f7      	bne.n	8014eec <_fwalk_sglue+0xc>
 8014efc:	4630      	mov	r0, r6
 8014efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f02:	89ab      	ldrh	r3, [r5, #12]
 8014f04:	2b01      	cmp	r3, #1
 8014f06:	d907      	bls.n	8014f18 <_fwalk_sglue+0x38>
 8014f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	d003      	beq.n	8014f18 <_fwalk_sglue+0x38>
 8014f10:	4629      	mov	r1, r5
 8014f12:	4638      	mov	r0, r7
 8014f14:	47c0      	blx	r8
 8014f16:	4306      	orrs	r6, r0
 8014f18:	3568      	adds	r5, #104	; 0x68
 8014f1a:	e7e9      	b.n	8014ef0 <_fwalk_sglue+0x10>

08014f1c <sniprintf>:
 8014f1c:	b40c      	push	{r2, r3}
 8014f1e:	b530      	push	{r4, r5, lr}
 8014f20:	4b17      	ldr	r3, [pc, #92]	; (8014f80 <sniprintf+0x64>)
 8014f22:	1e0c      	subs	r4, r1, #0
 8014f24:	681d      	ldr	r5, [r3, #0]
 8014f26:	b09d      	sub	sp, #116	; 0x74
 8014f28:	da08      	bge.n	8014f3c <sniprintf+0x20>
 8014f2a:	238b      	movs	r3, #139	; 0x8b
 8014f2c:	602b      	str	r3, [r5, #0]
 8014f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8014f32:	b01d      	add	sp, #116	; 0x74
 8014f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014f38:	b002      	add	sp, #8
 8014f3a:	4770      	bx	lr
 8014f3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014f40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014f44:	bf14      	ite	ne
 8014f46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014f4a:	4623      	moveq	r3, r4
 8014f4c:	9304      	str	r3, [sp, #16]
 8014f4e:	9307      	str	r3, [sp, #28]
 8014f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f54:	9002      	str	r0, [sp, #8]
 8014f56:	9006      	str	r0, [sp, #24]
 8014f58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014f5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014f5e:	ab21      	add	r3, sp, #132	; 0x84
 8014f60:	a902      	add	r1, sp, #8
 8014f62:	4628      	mov	r0, r5
 8014f64:	9301      	str	r3, [sp, #4]
 8014f66:	f002 f90b 	bl	8017180 <_svfiprintf_r>
 8014f6a:	1c43      	adds	r3, r0, #1
 8014f6c:	bfbc      	itt	lt
 8014f6e:	238b      	movlt	r3, #139	; 0x8b
 8014f70:	602b      	strlt	r3, [r5, #0]
 8014f72:	2c00      	cmp	r4, #0
 8014f74:	d0dd      	beq.n	8014f32 <sniprintf+0x16>
 8014f76:	9b02      	ldr	r3, [sp, #8]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	701a      	strb	r2, [r3, #0]
 8014f7c:	e7d9      	b.n	8014f32 <sniprintf+0x16>
 8014f7e:	bf00      	nop
 8014f80:	200002f0 	.word	0x200002f0

08014f84 <siprintf>:
 8014f84:	b40e      	push	{r1, r2, r3}
 8014f86:	b500      	push	{lr}
 8014f88:	b09c      	sub	sp, #112	; 0x70
 8014f8a:	ab1d      	add	r3, sp, #116	; 0x74
 8014f8c:	9002      	str	r0, [sp, #8]
 8014f8e:	9006      	str	r0, [sp, #24]
 8014f90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014f94:	4809      	ldr	r0, [pc, #36]	; (8014fbc <siprintf+0x38>)
 8014f96:	9107      	str	r1, [sp, #28]
 8014f98:	9104      	str	r1, [sp, #16]
 8014f9a:	4909      	ldr	r1, [pc, #36]	; (8014fc0 <siprintf+0x3c>)
 8014f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fa0:	9105      	str	r1, [sp, #20]
 8014fa2:	6800      	ldr	r0, [r0, #0]
 8014fa4:	9301      	str	r3, [sp, #4]
 8014fa6:	a902      	add	r1, sp, #8
 8014fa8:	f002 f8ea 	bl	8017180 <_svfiprintf_r>
 8014fac:	9b02      	ldr	r3, [sp, #8]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	701a      	strb	r2, [r3, #0]
 8014fb2:	b01c      	add	sp, #112	; 0x70
 8014fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fb8:	b003      	add	sp, #12
 8014fba:	4770      	bx	lr
 8014fbc:	200002f0 	.word	0x200002f0
 8014fc0:	ffff0208 	.word	0xffff0208

08014fc4 <__sread>:
 8014fc4:	b510      	push	{r4, lr}
 8014fc6:	460c      	mov	r4, r1
 8014fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fcc:	f000 f8f0 	bl	80151b0 <_read_r>
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	bfab      	itete	ge
 8014fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8014fd8:	181b      	addge	r3, r3, r0
 8014fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014fde:	bfac      	ite	ge
 8014fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8014fe2:	81a3      	strhlt	r3, [r4, #12]
 8014fe4:	bd10      	pop	{r4, pc}

08014fe6 <__swrite>:
 8014fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fea:	461f      	mov	r7, r3
 8014fec:	898b      	ldrh	r3, [r1, #12]
 8014fee:	05db      	lsls	r3, r3, #23
 8014ff0:	4605      	mov	r5, r0
 8014ff2:	460c      	mov	r4, r1
 8014ff4:	4616      	mov	r6, r2
 8014ff6:	d505      	bpl.n	8015004 <__swrite+0x1e>
 8014ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ffc:	2302      	movs	r3, #2
 8014ffe:	2200      	movs	r2, #0
 8015000:	f000 f8c4 	bl	801518c <_lseek_r>
 8015004:	89a3      	ldrh	r3, [r4, #12]
 8015006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801500a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801500e:	81a3      	strh	r3, [r4, #12]
 8015010:	4632      	mov	r2, r6
 8015012:	463b      	mov	r3, r7
 8015014:	4628      	mov	r0, r5
 8015016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801501a:	f000 b8eb 	b.w	80151f4 <_write_r>

0801501e <__sseek>:
 801501e:	b510      	push	{r4, lr}
 8015020:	460c      	mov	r4, r1
 8015022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015026:	f000 f8b1 	bl	801518c <_lseek_r>
 801502a:	1c43      	adds	r3, r0, #1
 801502c:	89a3      	ldrh	r3, [r4, #12]
 801502e:	bf15      	itete	ne
 8015030:	6560      	strne	r0, [r4, #84]	; 0x54
 8015032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801503a:	81a3      	strheq	r3, [r4, #12]
 801503c:	bf18      	it	ne
 801503e:	81a3      	strhne	r3, [r4, #12]
 8015040:	bd10      	pop	{r4, pc}

08015042 <__sclose>:
 8015042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015046:	f000 b891 	b.w	801516c <_close_r>

0801504a <memset>:
 801504a:	4402      	add	r2, r0
 801504c:	4603      	mov	r3, r0
 801504e:	4293      	cmp	r3, r2
 8015050:	d100      	bne.n	8015054 <memset+0xa>
 8015052:	4770      	bx	lr
 8015054:	f803 1b01 	strb.w	r1, [r3], #1
 8015058:	e7f9      	b.n	801504e <memset+0x4>

0801505a <strncmp>:
 801505a:	b510      	push	{r4, lr}
 801505c:	b16a      	cbz	r2, 801507a <strncmp+0x20>
 801505e:	3901      	subs	r1, #1
 8015060:	1884      	adds	r4, r0, r2
 8015062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015066:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801506a:	429a      	cmp	r2, r3
 801506c:	d103      	bne.n	8015076 <strncmp+0x1c>
 801506e:	42a0      	cmp	r0, r4
 8015070:	d001      	beq.n	8015076 <strncmp+0x1c>
 8015072:	2a00      	cmp	r2, #0
 8015074:	d1f5      	bne.n	8015062 <strncmp+0x8>
 8015076:	1ad0      	subs	r0, r2, r3
 8015078:	bd10      	pop	{r4, pc}
 801507a:	4610      	mov	r0, r2
 801507c:	e7fc      	b.n	8015078 <strncmp+0x1e>
	...

08015080 <strtok>:
 8015080:	4b16      	ldr	r3, [pc, #88]	; (80150dc <strtok+0x5c>)
 8015082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015084:	681e      	ldr	r6, [r3, #0]
 8015086:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8015088:	4605      	mov	r5, r0
 801508a:	b9fc      	cbnz	r4, 80150cc <strtok+0x4c>
 801508c:	2050      	movs	r0, #80	; 0x50
 801508e:	9101      	str	r1, [sp, #4]
 8015090:	f7fe f84a 	bl	8013128 <malloc>
 8015094:	9901      	ldr	r1, [sp, #4]
 8015096:	6470      	str	r0, [r6, #68]	; 0x44
 8015098:	4602      	mov	r2, r0
 801509a:	b920      	cbnz	r0, 80150a6 <strtok+0x26>
 801509c:	4b10      	ldr	r3, [pc, #64]	; (80150e0 <strtok+0x60>)
 801509e:	4811      	ldr	r0, [pc, #68]	; (80150e4 <strtok+0x64>)
 80150a0:	215b      	movs	r1, #91	; 0x5b
 80150a2:	f000 f90b 	bl	80152bc <__assert_func>
 80150a6:	e9c0 4400 	strd	r4, r4, [r0]
 80150aa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80150ae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80150b2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80150b6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80150ba:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80150be:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80150c2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80150c6:	6184      	str	r4, [r0, #24]
 80150c8:	7704      	strb	r4, [r0, #28]
 80150ca:	6244      	str	r4, [r0, #36]	; 0x24
 80150cc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80150ce:	2301      	movs	r3, #1
 80150d0:	4628      	mov	r0, r5
 80150d2:	b002      	add	sp, #8
 80150d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150d8:	f000 b806 	b.w	80150e8 <__strtok_r>
 80150dc:	200002f0 	.word	0x200002f0
 80150e0:	0801aeda 	.word	0x0801aeda
 80150e4:	0801aef1 	.word	0x0801aef1

080150e8 <__strtok_r>:
 80150e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ea:	b908      	cbnz	r0, 80150f0 <__strtok_r+0x8>
 80150ec:	6810      	ldr	r0, [r2, #0]
 80150ee:	b188      	cbz	r0, 8015114 <__strtok_r+0x2c>
 80150f0:	4604      	mov	r4, r0
 80150f2:	4620      	mov	r0, r4
 80150f4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80150f8:	460f      	mov	r7, r1
 80150fa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80150fe:	b91e      	cbnz	r6, 8015108 <__strtok_r+0x20>
 8015100:	b965      	cbnz	r5, 801511c <__strtok_r+0x34>
 8015102:	6015      	str	r5, [r2, #0]
 8015104:	4628      	mov	r0, r5
 8015106:	e005      	b.n	8015114 <__strtok_r+0x2c>
 8015108:	42b5      	cmp	r5, r6
 801510a:	d1f6      	bne.n	80150fa <__strtok_r+0x12>
 801510c:	2b00      	cmp	r3, #0
 801510e:	d1f0      	bne.n	80150f2 <__strtok_r+0xa>
 8015110:	6014      	str	r4, [r2, #0]
 8015112:	7003      	strb	r3, [r0, #0]
 8015114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015116:	461c      	mov	r4, r3
 8015118:	e00c      	b.n	8015134 <__strtok_r+0x4c>
 801511a:	b915      	cbnz	r5, 8015122 <__strtok_r+0x3a>
 801511c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015120:	460e      	mov	r6, r1
 8015122:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015126:	42ab      	cmp	r3, r5
 8015128:	d1f7      	bne.n	801511a <__strtok_r+0x32>
 801512a:	2b00      	cmp	r3, #0
 801512c:	d0f3      	beq.n	8015116 <__strtok_r+0x2e>
 801512e:	2300      	movs	r3, #0
 8015130:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015134:	6014      	str	r4, [r2, #0]
 8015136:	e7ed      	b.n	8015114 <__strtok_r+0x2c>

08015138 <strstr>:
 8015138:	780a      	ldrb	r2, [r1, #0]
 801513a:	b570      	push	{r4, r5, r6, lr}
 801513c:	b96a      	cbnz	r2, 801515a <strstr+0x22>
 801513e:	bd70      	pop	{r4, r5, r6, pc}
 8015140:	429a      	cmp	r2, r3
 8015142:	d109      	bne.n	8015158 <strstr+0x20>
 8015144:	460c      	mov	r4, r1
 8015146:	4605      	mov	r5, r0
 8015148:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801514c:	2b00      	cmp	r3, #0
 801514e:	d0f6      	beq.n	801513e <strstr+0x6>
 8015150:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015154:	429e      	cmp	r6, r3
 8015156:	d0f7      	beq.n	8015148 <strstr+0x10>
 8015158:	3001      	adds	r0, #1
 801515a:	7803      	ldrb	r3, [r0, #0]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d1ef      	bne.n	8015140 <strstr+0x8>
 8015160:	4618      	mov	r0, r3
 8015162:	e7ec      	b.n	801513e <strstr+0x6>

08015164 <_localeconv_r>:
 8015164:	4800      	ldr	r0, [pc, #0]	; (8015168 <_localeconv_r+0x4>)
 8015166:	4770      	bx	lr
 8015168:	20000228 	.word	0x20000228

0801516c <_close_r>:
 801516c:	b538      	push	{r3, r4, r5, lr}
 801516e:	4d06      	ldr	r5, [pc, #24]	; (8015188 <_close_r+0x1c>)
 8015170:	2300      	movs	r3, #0
 8015172:	4604      	mov	r4, r0
 8015174:	4608      	mov	r0, r1
 8015176:	602b      	str	r3, [r5, #0]
 8015178:	f7ef fdf7 	bl	8004d6a <_close>
 801517c:	1c43      	adds	r3, r0, #1
 801517e:	d102      	bne.n	8015186 <_close_r+0x1a>
 8015180:	682b      	ldr	r3, [r5, #0]
 8015182:	b103      	cbz	r3, 8015186 <_close_r+0x1a>
 8015184:	6023      	str	r3, [r4, #0]
 8015186:	bd38      	pop	{r3, r4, r5, pc}
 8015188:	2000238c 	.word	0x2000238c

0801518c <_lseek_r>:
 801518c:	b538      	push	{r3, r4, r5, lr}
 801518e:	4d07      	ldr	r5, [pc, #28]	; (80151ac <_lseek_r+0x20>)
 8015190:	4604      	mov	r4, r0
 8015192:	4608      	mov	r0, r1
 8015194:	4611      	mov	r1, r2
 8015196:	2200      	movs	r2, #0
 8015198:	602a      	str	r2, [r5, #0]
 801519a:	461a      	mov	r2, r3
 801519c:	f7ef fe0c 	bl	8004db8 <_lseek>
 80151a0:	1c43      	adds	r3, r0, #1
 80151a2:	d102      	bne.n	80151aa <_lseek_r+0x1e>
 80151a4:	682b      	ldr	r3, [r5, #0]
 80151a6:	b103      	cbz	r3, 80151aa <_lseek_r+0x1e>
 80151a8:	6023      	str	r3, [r4, #0]
 80151aa:	bd38      	pop	{r3, r4, r5, pc}
 80151ac:	2000238c 	.word	0x2000238c

080151b0 <_read_r>:
 80151b0:	b538      	push	{r3, r4, r5, lr}
 80151b2:	4d07      	ldr	r5, [pc, #28]	; (80151d0 <_read_r+0x20>)
 80151b4:	4604      	mov	r4, r0
 80151b6:	4608      	mov	r0, r1
 80151b8:	4611      	mov	r1, r2
 80151ba:	2200      	movs	r2, #0
 80151bc:	602a      	str	r2, [r5, #0]
 80151be:	461a      	mov	r2, r3
 80151c0:	f7ef fd9a 	bl	8004cf8 <_read>
 80151c4:	1c43      	adds	r3, r0, #1
 80151c6:	d102      	bne.n	80151ce <_read_r+0x1e>
 80151c8:	682b      	ldr	r3, [r5, #0]
 80151ca:	b103      	cbz	r3, 80151ce <_read_r+0x1e>
 80151cc:	6023      	str	r3, [r4, #0]
 80151ce:	bd38      	pop	{r3, r4, r5, pc}
 80151d0:	2000238c 	.word	0x2000238c

080151d4 <_sbrk_r>:
 80151d4:	b538      	push	{r3, r4, r5, lr}
 80151d6:	4d06      	ldr	r5, [pc, #24]	; (80151f0 <_sbrk_r+0x1c>)
 80151d8:	2300      	movs	r3, #0
 80151da:	4604      	mov	r4, r0
 80151dc:	4608      	mov	r0, r1
 80151de:	602b      	str	r3, [r5, #0]
 80151e0:	f7ef fdf8 	bl	8004dd4 <_sbrk>
 80151e4:	1c43      	adds	r3, r0, #1
 80151e6:	d102      	bne.n	80151ee <_sbrk_r+0x1a>
 80151e8:	682b      	ldr	r3, [r5, #0]
 80151ea:	b103      	cbz	r3, 80151ee <_sbrk_r+0x1a>
 80151ec:	6023      	str	r3, [r4, #0]
 80151ee:	bd38      	pop	{r3, r4, r5, pc}
 80151f0:	2000238c 	.word	0x2000238c

080151f4 <_write_r>:
 80151f4:	b538      	push	{r3, r4, r5, lr}
 80151f6:	4d07      	ldr	r5, [pc, #28]	; (8015214 <_write_r+0x20>)
 80151f8:	4604      	mov	r4, r0
 80151fa:	4608      	mov	r0, r1
 80151fc:	4611      	mov	r1, r2
 80151fe:	2200      	movs	r2, #0
 8015200:	602a      	str	r2, [r5, #0]
 8015202:	461a      	mov	r2, r3
 8015204:	f7ef fd95 	bl	8004d32 <_write>
 8015208:	1c43      	adds	r3, r0, #1
 801520a:	d102      	bne.n	8015212 <_write_r+0x1e>
 801520c:	682b      	ldr	r3, [r5, #0]
 801520e:	b103      	cbz	r3, 8015212 <_write_r+0x1e>
 8015210:	6023      	str	r3, [r4, #0]
 8015212:	bd38      	pop	{r3, r4, r5, pc}
 8015214:	2000238c 	.word	0x2000238c

08015218 <__errno>:
 8015218:	4b01      	ldr	r3, [pc, #4]	; (8015220 <__errno+0x8>)
 801521a:	6818      	ldr	r0, [r3, #0]
 801521c:	4770      	bx	lr
 801521e:	bf00      	nop
 8015220:	200002f0 	.word	0x200002f0

08015224 <__libc_init_array>:
 8015224:	b570      	push	{r4, r5, r6, lr}
 8015226:	4d0d      	ldr	r5, [pc, #52]	; (801525c <__libc_init_array+0x38>)
 8015228:	4c0d      	ldr	r4, [pc, #52]	; (8015260 <__libc_init_array+0x3c>)
 801522a:	1b64      	subs	r4, r4, r5
 801522c:	10a4      	asrs	r4, r4, #2
 801522e:	2600      	movs	r6, #0
 8015230:	42a6      	cmp	r6, r4
 8015232:	d109      	bne.n	8015248 <__libc_init_array+0x24>
 8015234:	4d0b      	ldr	r5, [pc, #44]	; (8015264 <__libc_init_array+0x40>)
 8015236:	4c0c      	ldr	r4, [pc, #48]	; (8015268 <__libc_init_array+0x44>)
 8015238:	f003 fe38 	bl	8018eac <_init>
 801523c:	1b64      	subs	r4, r4, r5
 801523e:	10a4      	asrs	r4, r4, #2
 8015240:	2600      	movs	r6, #0
 8015242:	42a6      	cmp	r6, r4
 8015244:	d105      	bne.n	8015252 <__libc_init_array+0x2e>
 8015246:	bd70      	pop	{r4, r5, r6, pc}
 8015248:	f855 3b04 	ldr.w	r3, [r5], #4
 801524c:	4798      	blx	r3
 801524e:	3601      	adds	r6, #1
 8015250:	e7ee      	b.n	8015230 <__libc_init_array+0xc>
 8015252:	f855 3b04 	ldr.w	r3, [r5], #4
 8015256:	4798      	blx	r3
 8015258:	3601      	adds	r6, #1
 801525a:	e7f2      	b.n	8015242 <__libc_init_array+0x1e>
 801525c:	0801b3c8 	.word	0x0801b3c8
 8015260:	0801b3c8 	.word	0x0801b3c8
 8015264:	0801b3c8 	.word	0x0801b3c8
 8015268:	0801b3cc 	.word	0x0801b3cc

0801526c <__retarget_lock_init_recursive>:
 801526c:	4770      	bx	lr

0801526e <__retarget_lock_acquire_recursive>:
 801526e:	4770      	bx	lr

08015270 <__retarget_lock_release_recursive>:
 8015270:	4770      	bx	lr

08015272 <strcpy>:
 8015272:	4603      	mov	r3, r0
 8015274:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015278:	f803 2b01 	strb.w	r2, [r3], #1
 801527c:	2a00      	cmp	r2, #0
 801527e:	d1f9      	bne.n	8015274 <strcpy+0x2>
 8015280:	4770      	bx	lr

08015282 <memcpy>:
 8015282:	440a      	add	r2, r1
 8015284:	4291      	cmp	r1, r2
 8015286:	f100 33ff 	add.w	r3, r0, #4294967295
 801528a:	d100      	bne.n	801528e <memcpy+0xc>
 801528c:	4770      	bx	lr
 801528e:	b510      	push	{r4, lr}
 8015290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015298:	4291      	cmp	r1, r2
 801529a:	d1f9      	bne.n	8015290 <memcpy+0xe>
 801529c:	bd10      	pop	{r4, pc}
	...

080152a0 <nan>:
 80152a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80152a8 <nan+0x8>
 80152a4:	4770      	bx	lr
 80152a6:	bf00      	nop
 80152a8:	00000000 	.word	0x00000000
 80152ac:	7ff80000 	.word	0x7ff80000

080152b0 <nanf>:
 80152b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80152b8 <nanf+0x8>
 80152b4:	4770      	bx	lr
 80152b6:	bf00      	nop
 80152b8:	7fc00000 	.word	0x7fc00000

080152bc <__assert_func>:
 80152bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80152be:	4614      	mov	r4, r2
 80152c0:	461a      	mov	r2, r3
 80152c2:	4b09      	ldr	r3, [pc, #36]	; (80152e8 <__assert_func+0x2c>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	4605      	mov	r5, r0
 80152c8:	68d8      	ldr	r0, [r3, #12]
 80152ca:	b14c      	cbz	r4, 80152e0 <__assert_func+0x24>
 80152cc:	4b07      	ldr	r3, [pc, #28]	; (80152ec <__assert_func+0x30>)
 80152ce:	9100      	str	r1, [sp, #0]
 80152d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80152d4:	4906      	ldr	r1, [pc, #24]	; (80152f0 <__assert_func+0x34>)
 80152d6:	462b      	mov	r3, r5
 80152d8:	f002 f8fe 	bl	80174d8 <fiprintf>
 80152dc:	f002 f928 	bl	8017530 <abort>
 80152e0:	4b04      	ldr	r3, [pc, #16]	; (80152f4 <__assert_func+0x38>)
 80152e2:	461c      	mov	r4, r3
 80152e4:	e7f3      	b.n	80152ce <__assert_func+0x12>
 80152e6:	bf00      	nop
 80152e8:	200002f0 	.word	0x200002f0
 80152ec:	0801af53 	.word	0x0801af53
 80152f0:	0801af60 	.word	0x0801af60
 80152f4:	0801af8e 	.word	0x0801af8e

080152f8 <quorem>:
 80152f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152fc:	6903      	ldr	r3, [r0, #16]
 80152fe:	690c      	ldr	r4, [r1, #16]
 8015300:	42a3      	cmp	r3, r4
 8015302:	4607      	mov	r7, r0
 8015304:	db7e      	blt.n	8015404 <quorem+0x10c>
 8015306:	3c01      	subs	r4, #1
 8015308:	f101 0814 	add.w	r8, r1, #20
 801530c:	f100 0514 	add.w	r5, r0, #20
 8015310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015314:	9301      	str	r3, [sp, #4]
 8015316:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801531a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801531e:	3301      	adds	r3, #1
 8015320:	429a      	cmp	r2, r3
 8015322:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015326:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801532a:	fbb2 f6f3 	udiv	r6, r2, r3
 801532e:	d331      	bcc.n	8015394 <quorem+0x9c>
 8015330:	f04f 0e00 	mov.w	lr, #0
 8015334:	4640      	mov	r0, r8
 8015336:	46ac      	mov	ip, r5
 8015338:	46f2      	mov	sl, lr
 801533a:	f850 2b04 	ldr.w	r2, [r0], #4
 801533e:	b293      	uxth	r3, r2
 8015340:	fb06 e303 	mla	r3, r6, r3, lr
 8015344:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015348:	0c1a      	lsrs	r2, r3, #16
 801534a:	b29b      	uxth	r3, r3
 801534c:	ebaa 0303 	sub.w	r3, sl, r3
 8015350:	f8dc a000 	ldr.w	sl, [ip]
 8015354:	fa13 f38a 	uxtah	r3, r3, sl
 8015358:	fb06 220e 	mla	r2, r6, lr, r2
 801535c:	9300      	str	r3, [sp, #0]
 801535e:	9b00      	ldr	r3, [sp, #0]
 8015360:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015364:	b292      	uxth	r2, r2
 8015366:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801536a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801536e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015372:	4581      	cmp	r9, r0
 8015374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015378:	f84c 3b04 	str.w	r3, [ip], #4
 801537c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015380:	d2db      	bcs.n	801533a <quorem+0x42>
 8015382:	f855 300b 	ldr.w	r3, [r5, fp]
 8015386:	b92b      	cbnz	r3, 8015394 <quorem+0x9c>
 8015388:	9b01      	ldr	r3, [sp, #4]
 801538a:	3b04      	subs	r3, #4
 801538c:	429d      	cmp	r5, r3
 801538e:	461a      	mov	r2, r3
 8015390:	d32c      	bcc.n	80153ec <quorem+0xf4>
 8015392:	613c      	str	r4, [r7, #16]
 8015394:	4638      	mov	r0, r7
 8015396:	f001 fca5 	bl	8016ce4 <__mcmp>
 801539a:	2800      	cmp	r0, #0
 801539c:	db22      	blt.n	80153e4 <quorem+0xec>
 801539e:	3601      	adds	r6, #1
 80153a0:	4629      	mov	r1, r5
 80153a2:	2000      	movs	r0, #0
 80153a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80153a8:	f8d1 c000 	ldr.w	ip, [r1]
 80153ac:	b293      	uxth	r3, r2
 80153ae:	1ac3      	subs	r3, r0, r3
 80153b0:	0c12      	lsrs	r2, r2, #16
 80153b2:	fa13 f38c 	uxtah	r3, r3, ip
 80153b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80153ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80153be:	b29b      	uxth	r3, r3
 80153c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80153c4:	45c1      	cmp	r9, r8
 80153c6:	f841 3b04 	str.w	r3, [r1], #4
 80153ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80153ce:	d2e9      	bcs.n	80153a4 <quorem+0xac>
 80153d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80153d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80153d8:	b922      	cbnz	r2, 80153e4 <quorem+0xec>
 80153da:	3b04      	subs	r3, #4
 80153dc:	429d      	cmp	r5, r3
 80153de:	461a      	mov	r2, r3
 80153e0:	d30a      	bcc.n	80153f8 <quorem+0x100>
 80153e2:	613c      	str	r4, [r7, #16]
 80153e4:	4630      	mov	r0, r6
 80153e6:	b003      	add	sp, #12
 80153e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ec:	6812      	ldr	r2, [r2, #0]
 80153ee:	3b04      	subs	r3, #4
 80153f0:	2a00      	cmp	r2, #0
 80153f2:	d1ce      	bne.n	8015392 <quorem+0x9a>
 80153f4:	3c01      	subs	r4, #1
 80153f6:	e7c9      	b.n	801538c <quorem+0x94>
 80153f8:	6812      	ldr	r2, [r2, #0]
 80153fa:	3b04      	subs	r3, #4
 80153fc:	2a00      	cmp	r2, #0
 80153fe:	d1f0      	bne.n	80153e2 <quorem+0xea>
 8015400:	3c01      	subs	r4, #1
 8015402:	e7eb      	b.n	80153dc <quorem+0xe4>
 8015404:	2000      	movs	r0, #0
 8015406:	e7ee      	b.n	80153e6 <quorem+0xee>

08015408 <_dtoa_r>:
 8015408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801540c:	ed2d 8b04 	vpush	{d8-d9}
 8015410:	69c5      	ldr	r5, [r0, #28]
 8015412:	b093      	sub	sp, #76	; 0x4c
 8015414:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015418:	ec57 6b10 	vmov	r6, r7, d0
 801541c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015420:	9107      	str	r1, [sp, #28]
 8015422:	4604      	mov	r4, r0
 8015424:	920a      	str	r2, [sp, #40]	; 0x28
 8015426:	930d      	str	r3, [sp, #52]	; 0x34
 8015428:	b975      	cbnz	r5, 8015448 <_dtoa_r+0x40>
 801542a:	2010      	movs	r0, #16
 801542c:	f7fd fe7c 	bl	8013128 <malloc>
 8015430:	4602      	mov	r2, r0
 8015432:	61e0      	str	r0, [r4, #28]
 8015434:	b920      	cbnz	r0, 8015440 <_dtoa_r+0x38>
 8015436:	4bae      	ldr	r3, [pc, #696]	; (80156f0 <_dtoa_r+0x2e8>)
 8015438:	21ef      	movs	r1, #239	; 0xef
 801543a:	48ae      	ldr	r0, [pc, #696]	; (80156f4 <_dtoa_r+0x2ec>)
 801543c:	f7ff ff3e 	bl	80152bc <__assert_func>
 8015440:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015444:	6005      	str	r5, [r0, #0]
 8015446:	60c5      	str	r5, [r0, #12]
 8015448:	69e3      	ldr	r3, [r4, #28]
 801544a:	6819      	ldr	r1, [r3, #0]
 801544c:	b151      	cbz	r1, 8015464 <_dtoa_r+0x5c>
 801544e:	685a      	ldr	r2, [r3, #4]
 8015450:	604a      	str	r2, [r1, #4]
 8015452:	2301      	movs	r3, #1
 8015454:	4093      	lsls	r3, r2
 8015456:	608b      	str	r3, [r1, #8]
 8015458:	4620      	mov	r0, r4
 801545a:	f001 f9bd 	bl	80167d8 <_Bfree>
 801545e:	69e3      	ldr	r3, [r4, #28]
 8015460:	2200      	movs	r2, #0
 8015462:	601a      	str	r2, [r3, #0]
 8015464:	1e3b      	subs	r3, r7, #0
 8015466:	bfbb      	ittet	lt
 8015468:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801546c:	9303      	strlt	r3, [sp, #12]
 801546e:	2300      	movge	r3, #0
 8015470:	2201      	movlt	r2, #1
 8015472:	bfac      	ite	ge
 8015474:	f8c8 3000 	strge.w	r3, [r8]
 8015478:	f8c8 2000 	strlt.w	r2, [r8]
 801547c:	4b9e      	ldr	r3, [pc, #632]	; (80156f8 <_dtoa_r+0x2f0>)
 801547e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8015482:	ea33 0308 	bics.w	r3, r3, r8
 8015486:	d11b      	bne.n	80154c0 <_dtoa_r+0xb8>
 8015488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801548a:	f242 730f 	movw	r3, #9999	; 0x270f
 801548e:	6013      	str	r3, [r2, #0]
 8015490:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8015494:	4333      	orrs	r3, r6
 8015496:	f000 8593 	beq.w	8015fc0 <_dtoa_r+0xbb8>
 801549a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801549c:	b963      	cbnz	r3, 80154b8 <_dtoa_r+0xb0>
 801549e:	4b97      	ldr	r3, [pc, #604]	; (80156fc <_dtoa_r+0x2f4>)
 80154a0:	e027      	b.n	80154f2 <_dtoa_r+0xea>
 80154a2:	4b97      	ldr	r3, [pc, #604]	; (8015700 <_dtoa_r+0x2f8>)
 80154a4:	9300      	str	r3, [sp, #0]
 80154a6:	3308      	adds	r3, #8
 80154a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80154aa:	6013      	str	r3, [r2, #0]
 80154ac:	9800      	ldr	r0, [sp, #0]
 80154ae:	b013      	add	sp, #76	; 0x4c
 80154b0:	ecbd 8b04 	vpop	{d8-d9}
 80154b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154b8:	4b90      	ldr	r3, [pc, #576]	; (80156fc <_dtoa_r+0x2f4>)
 80154ba:	9300      	str	r3, [sp, #0]
 80154bc:	3303      	adds	r3, #3
 80154be:	e7f3      	b.n	80154a8 <_dtoa_r+0xa0>
 80154c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80154c4:	2200      	movs	r2, #0
 80154c6:	ec51 0b17 	vmov	r0, r1, d7
 80154ca:	eeb0 8a47 	vmov.f32	s16, s14
 80154ce:	eef0 8a67 	vmov.f32	s17, s15
 80154d2:	2300      	movs	r3, #0
 80154d4:	f7eb faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80154d8:	4681      	mov	r9, r0
 80154da:	b160      	cbz	r0, 80154f6 <_dtoa_r+0xee>
 80154dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154de:	2301      	movs	r3, #1
 80154e0:	6013      	str	r3, [r2, #0]
 80154e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	f000 8568 	beq.w	8015fba <_dtoa_r+0xbb2>
 80154ea:	4b86      	ldr	r3, [pc, #536]	; (8015704 <_dtoa_r+0x2fc>)
 80154ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80154ee:	6013      	str	r3, [r2, #0]
 80154f0:	3b01      	subs	r3, #1
 80154f2:	9300      	str	r3, [sp, #0]
 80154f4:	e7da      	b.n	80154ac <_dtoa_r+0xa4>
 80154f6:	aa10      	add	r2, sp, #64	; 0x40
 80154f8:	a911      	add	r1, sp, #68	; 0x44
 80154fa:	4620      	mov	r0, r4
 80154fc:	eeb0 0a48 	vmov.f32	s0, s16
 8015500:	eef0 0a68 	vmov.f32	s1, s17
 8015504:	f001 fd04 	bl	8016f10 <__d2b>
 8015508:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801550c:	4682      	mov	sl, r0
 801550e:	2d00      	cmp	r5, #0
 8015510:	d07f      	beq.n	8015612 <_dtoa_r+0x20a>
 8015512:	ee18 3a90 	vmov	r3, s17
 8015516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801551a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801551e:	ec51 0b18 	vmov	r0, r1, d8
 8015522:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015526:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801552a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801552e:	4619      	mov	r1, r3
 8015530:	2200      	movs	r2, #0
 8015532:	4b75      	ldr	r3, [pc, #468]	; (8015708 <_dtoa_r+0x300>)
 8015534:	f7ea fea8 	bl	8000288 <__aeabi_dsub>
 8015538:	a367      	add	r3, pc, #412	; (adr r3, 80156d8 <_dtoa_r+0x2d0>)
 801553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801553e:	f7eb f85b 	bl	80005f8 <__aeabi_dmul>
 8015542:	a367      	add	r3, pc, #412	; (adr r3, 80156e0 <_dtoa_r+0x2d8>)
 8015544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015548:	f7ea fea0 	bl	800028c <__adddf3>
 801554c:	4606      	mov	r6, r0
 801554e:	4628      	mov	r0, r5
 8015550:	460f      	mov	r7, r1
 8015552:	f7ea ffe7 	bl	8000524 <__aeabi_i2d>
 8015556:	a364      	add	r3, pc, #400	; (adr r3, 80156e8 <_dtoa_r+0x2e0>)
 8015558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801555c:	f7eb f84c 	bl	80005f8 <__aeabi_dmul>
 8015560:	4602      	mov	r2, r0
 8015562:	460b      	mov	r3, r1
 8015564:	4630      	mov	r0, r6
 8015566:	4639      	mov	r1, r7
 8015568:	f7ea fe90 	bl	800028c <__adddf3>
 801556c:	4606      	mov	r6, r0
 801556e:	460f      	mov	r7, r1
 8015570:	f7eb faf2 	bl	8000b58 <__aeabi_d2iz>
 8015574:	2200      	movs	r2, #0
 8015576:	4683      	mov	fp, r0
 8015578:	2300      	movs	r3, #0
 801557a:	4630      	mov	r0, r6
 801557c:	4639      	mov	r1, r7
 801557e:	f7eb faad 	bl	8000adc <__aeabi_dcmplt>
 8015582:	b148      	cbz	r0, 8015598 <_dtoa_r+0x190>
 8015584:	4658      	mov	r0, fp
 8015586:	f7ea ffcd 	bl	8000524 <__aeabi_i2d>
 801558a:	4632      	mov	r2, r6
 801558c:	463b      	mov	r3, r7
 801558e:	f7eb fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8015592:	b908      	cbnz	r0, 8015598 <_dtoa_r+0x190>
 8015594:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015598:	f1bb 0f16 	cmp.w	fp, #22
 801559c:	d857      	bhi.n	801564e <_dtoa_r+0x246>
 801559e:	4b5b      	ldr	r3, [pc, #364]	; (801570c <_dtoa_r+0x304>)
 80155a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80155a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a8:	ec51 0b18 	vmov	r0, r1, d8
 80155ac:	f7eb fa96 	bl	8000adc <__aeabi_dcmplt>
 80155b0:	2800      	cmp	r0, #0
 80155b2:	d04e      	beq.n	8015652 <_dtoa_r+0x24a>
 80155b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80155b8:	2300      	movs	r3, #0
 80155ba:	930c      	str	r3, [sp, #48]	; 0x30
 80155bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155be:	1b5b      	subs	r3, r3, r5
 80155c0:	1e5a      	subs	r2, r3, #1
 80155c2:	bf45      	ittet	mi
 80155c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80155c8:	9305      	strmi	r3, [sp, #20]
 80155ca:	2300      	movpl	r3, #0
 80155cc:	2300      	movmi	r3, #0
 80155ce:	9206      	str	r2, [sp, #24]
 80155d0:	bf54      	ite	pl
 80155d2:	9305      	strpl	r3, [sp, #20]
 80155d4:	9306      	strmi	r3, [sp, #24]
 80155d6:	f1bb 0f00 	cmp.w	fp, #0
 80155da:	db3c      	blt.n	8015656 <_dtoa_r+0x24e>
 80155dc:	9b06      	ldr	r3, [sp, #24]
 80155de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80155e2:	445b      	add	r3, fp
 80155e4:	9306      	str	r3, [sp, #24]
 80155e6:	2300      	movs	r3, #0
 80155e8:	9308      	str	r3, [sp, #32]
 80155ea:	9b07      	ldr	r3, [sp, #28]
 80155ec:	2b09      	cmp	r3, #9
 80155ee:	d868      	bhi.n	80156c2 <_dtoa_r+0x2ba>
 80155f0:	2b05      	cmp	r3, #5
 80155f2:	bfc4      	itt	gt
 80155f4:	3b04      	subgt	r3, #4
 80155f6:	9307      	strgt	r3, [sp, #28]
 80155f8:	9b07      	ldr	r3, [sp, #28]
 80155fa:	f1a3 0302 	sub.w	r3, r3, #2
 80155fe:	bfcc      	ite	gt
 8015600:	2500      	movgt	r5, #0
 8015602:	2501      	movle	r5, #1
 8015604:	2b03      	cmp	r3, #3
 8015606:	f200 8085 	bhi.w	8015714 <_dtoa_r+0x30c>
 801560a:	e8df f003 	tbb	[pc, r3]
 801560e:	3b2e      	.short	0x3b2e
 8015610:	5839      	.short	0x5839
 8015612:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015616:	441d      	add	r5, r3
 8015618:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801561c:	2b20      	cmp	r3, #32
 801561e:	bfc1      	itttt	gt
 8015620:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015624:	fa08 f803 	lslgt.w	r8, r8, r3
 8015628:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801562c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015630:	bfd6      	itet	le
 8015632:	f1c3 0320 	rsble	r3, r3, #32
 8015636:	ea48 0003 	orrgt.w	r0, r8, r3
 801563a:	fa06 f003 	lslle.w	r0, r6, r3
 801563e:	f7ea ff61 	bl	8000504 <__aeabi_ui2d>
 8015642:	2201      	movs	r2, #1
 8015644:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015648:	3d01      	subs	r5, #1
 801564a:	920e      	str	r2, [sp, #56]	; 0x38
 801564c:	e76f      	b.n	801552e <_dtoa_r+0x126>
 801564e:	2301      	movs	r3, #1
 8015650:	e7b3      	b.n	80155ba <_dtoa_r+0x1b2>
 8015652:	900c      	str	r0, [sp, #48]	; 0x30
 8015654:	e7b2      	b.n	80155bc <_dtoa_r+0x1b4>
 8015656:	9b05      	ldr	r3, [sp, #20]
 8015658:	eba3 030b 	sub.w	r3, r3, fp
 801565c:	9305      	str	r3, [sp, #20]
 801565e:	f1cb 0300 	rsb	r3, fp, #0
 8015662:	9308      	str	r3, [sp, #32]
 8015664:	2300      	movs	r3, #0
 8015666:	930b      	str	r3, [sp, #44]	; 0x2c
 8015668:	e7bf      	b.n	80155ea <_dtoa_r+0x1e2>
 801566a:	2300      	movs	r3, #0
 801566c:	9309      	str	r3, [sp, #36]	; 0x24
 801566e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015670:	2b00      	cmp	r3, #0
 8015672:	dc52      	bgt.n	801571a <_dtoa_r+0x312>
 8015674:	2301      	movs	r3, #1
 8015676:	9301      	str	r3, [sp, #4]
 8015678:	9304      	str	r3, [sp, #16]
 801567a:	461a      	mov	r2, r3
 801567c:	920a      	str	r2, [sp, #40]	; 0x28
 801567e:	e00b      	b.n	8015698 <_dtoa_r+0x290>
 8015680:	2301      	movs	r3, #1
 8015682:	e7f3      	b.n	801566c <_dtoa_r+0x264>
 8015684:	2300      	movs	r3, #0
 8015686:	9309      	str	r3, [sp, #36]	; 0x24
 8015688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801568a:	445b      	add	r3, fp
 801568c:	9301      	str	r3, [sp, #4]
 801568e:	3301      	adds	r3, #1
 8015690:	2b01      	cmp	r3, #1
 8015692:	9304      	str	r3, [sp, #16]
 8015694:	bfb8      	it	lt
 8015696:	2301      	movlt	r3, #1
 8015698:	69e0      	ldr	r0, [r4, #28]
 801569a:	2100      	movs	r1, #0
 801569c:	2204      	movs	r2, #4
 801569e:	f102 0614 	add.w	r6, r2, #20
 80156a2:	429e      	cmp	r6, r3
 80156a4:	d93d      	bls.n	8015722 <_dtoa_r+0x31a>
 80156a6:	6041      	str	r1, [r0, #4]
 80156a8:	4620      	mov	r0, r4
 80156aa:	f001 f855 	bl	8016758 <_Balloc>
 80156ae:	9000      	str	r0, [sp, #0]
 80156b0:	2800      	cmp	r0, #0
 80156b2:	d139      	bne.n	8015728 <_dtoa_r+0x320>
 80156b4:	4b16      	ldr	r3, [pc, #88]	; (8015710 <_dtoa_r+0x308>)
 80156b6:	4602      	mov	r2, r0
 80156b8:	f240 11af 	movw	r1, #431	; 0x1af
 80156bc:	e6bd      	b.n	801543a <_dtoa_r+0x32>
 80156be:	2301      	movs	r3, #1
 80156c0:	e7e1      	b.n	8015686 <_dtoa_r+0x27e>
 80156c2:	2501      	movs	r5, #1
 80156c4:	2300      	movs	r3, #0
 80156c6:	9307      	str	r3, [sp, #28]
 80156c8:	9509      	str	r5, [sp, #36]	; 0x24
 80156ca:	f04f 33ff 	mov.w	r3, #4294967295
 80156ce:	9301      	str	r3, [sp, #4]
 80156d0:	9304      	str	r3, [sp, #16]
 80156d2:	2200      	movs	r2, #0
 80156d4:	2312      	movs	r3, #18
 80156d6:	e7d1      	b.n	801567c <_dtoa_r+0x274>
 80156d8:	636f4361 	.word	0x636f4361
 80156dc:	3fd287a7 	.word	0x3fd287a7
 80156e0:	8b60c8b3 	.word	0x8b60c8b3
 80156e4:	3fc68a28 	.word	0x3fc68a28
 80156e8:	509f79fb 	.word	0x509f79fb
 80156ec:	3fd34413 	.word	0x3fd34413
 80156f0:	0801aeda 	.word	0x0801aeda
 80156f4:	0801af9c 	.word	0x0801af9c
 80156f8:	7ff00000 	.word	0x7ff00000
 80156fc:	0801af98 	.word	0x0801af98
 8015700:	0801af8f 	.word	0x0801af8f
 8015704:	0801aeb2 	.word	0x0801aeb2
 8015708:	3ff80000 	.word	0x3ff80000
 801570c:	0801b0e8 	.word	0x0801b0e8
 8015710:	0801aff4 	.word	0x0801aff4
 8015714:	2301      	movs	r3, #1
 8015716:	9309      	str	r3, [sp, #36]	; 0x24
 8015718:	e7d7      	b.n	80156ca <_dtoa_r+0x2c2>
 801571a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801571c:	9301      	str	r3, [sp, #4]
 801571e:	9304      	str	r3, [sp, #16]
 8015720:	e7ba      	b.n	8015698 <_dtoa_r+0x290>
 8015722:	3101      	adds	r1, #1
 8015724:	0052      	lsls	r2, r2, #1
 8015726:	e7ba      	b.n	801569e <_dtoa_r+0x296>
 8015728:	69e3      	ldr	r3, [r4, #28]
 801572a:	9a00      	ldr	r2, [sp, #0]
 801572c:	601a      	str	r2, [r3, #0]
 801572e:	9b04      	ldr	r3, [sp, #16]
 8015730:	2b0e      	cmp	r3, #14
 8015732:	f200 80a8 	bhi.w	8015886 <_dtoa_r+0x47e>
 8015736:	2d00      	cmp	r5, #0
 8015738:	f000 80a5 	beq.w	8015886 <_dtoa_r+0x47e>
 801573c:	f1bb 0f00 	cmp.w	fp, #0
 8015740:	dd38      	ble.n	80157b4 <_dtoa_r+0x3ac>
 8015742:	4bc0      	ldr	r3, [pc, #768]	; (8015a44 <_dtoa_r+0x63c>)
 8015744:	f00b 020f 	and.w	r2, fp, #15
 8015748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801574c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015750:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015754:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015758:	d019      	beq.n	801578e <_dtoa_r+0x386>
 801575a:	4bbb      	ldr	r3, [pc, #748]	; (8015a48 <_dtoa_r+0x640>)
 801575c:	ec51 0b18 	vmov	r0, r1, d8
 8015760:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015764:	f7eb f872 	bl	800084c <__aeabi_ddiv>
 8015768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801576c:	f008 080f 	and.w	r8, r8, #15
 8015770:	2503      	movs	r5, #3
 8015772:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015a48 <_dtoa_r+0x640>
 8015776:	f1b8 0f00 	cmp.w	r8, #0
 801577a:	d10a      	bne.n	8015792 <_dtoa_r+0x38a>
 801577c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015780:	4632      	mov	r2, r6
 8015782:	463b      	mov	r3, r7
 8015784:	f7eb f862 	bl	800084c <__aeabi_ddiv>
 8015788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801578c:	e02b      	b.n	80157e6 <_dtoa_r+0x3de>
 801578e:	2502      	movs	r5, #2
 8015790:	e7ef      	b.n	8015772 <_dtoa_r+0x36a>
 8015792:	f018 0f01 	tst.w	r8, #1
 8015796:	d008      	beq.n	80157aa <_dtoa_r+0x3a2>
 8015798:	4630      	mov	r0, r6
 801579a:	4639      	mov	r1, r7
 801579c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80157a0:	f7ea ff2a 	bl	80005f8 <__aeabi_dmul>
 80157a4:	3501      	adds	r5, #1
 80157a6:	4606      	mov	r6, r0
 80157a8:	460f      	mov	r7, r1
 80157aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80157ae:	f109 0908 	add.w	r9, r9, #8
 80157b2:	e7e0      	b.n	8015776 <_dtoa_r+0x36e>
 80157b4:	f000 809f 	beq.w	80158f6 <_dtoa_r+0x4ee>
 80157b8:	f1cb 0600 	rsb	r6, fp, #0
 80157bc:	4ba1      	ldr	r3, [pc, #644]	; (8015a44 <_dtoa_r+0x63c>)
 80157be:	4fa2      	ldr	r7, [pc, #648]	; (8015a48 <_dtoa_r+0x640>)
 80157c0:	f006 020f 	and.w	r2, r6, #15
 80157c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80157c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157cc:	ec51 0b18 	vmov	r0, r1, d8
 80157d0:	f7ea ff12 	bl	80005f8 <__aeabi_dmul>
 80157d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80157d8:	1136      	asrs	r6, r6, #4
 80157da:	2300      	movs	r3, #0
 80157dc:	2502      	movs	r5, #2
 80157de:	2e00      	cmp	r6, #0
 80157e0:	d17e      	bne.n	80158e0 <_dtoa_r+0x4d8>
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d1d0      	bne.n	8015788 <_dtoa_r+0x380>
 80157e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	f000 8084 	beq.w	80158fa <_dtoa_r+0x4f2>
 80157f2:	4b96      	ldr	r3, [pc, #600]	; (8015a4c <_dtoa_r+0x644>)
 80157f4:	2200      	movs	r2, #0
 80157f6:	4640      	mov	r0, r8
 80157f8:	4649      	mov	r1, r9
 80157fa:	f7eb f96f 	bl	8000adc <__aeabi_dcmplt>
 80157fe:	2800      	cmp	r0, #0
 8015800:	d07b      	beq.n	80158fa <_dtoa_r+0x4f2>
 8015802:	9b04      	ldr	r3, [sp, #16]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d078      	beq.n	80158fa <_dtoa_r+0x4f2>
 8015808:	9b01      	ldr	r3, [sp, #4]
 801580a:	2b00      	cmp	r3, #0
 801580c:	dd39      	ble.n	8015882 <_dtoa_r+0x47a>
 801580e:	4b90      	ldr	r3, [pc, #576]	; (8015a50 <_dtoa_r+0x648>)
 8015810:	2200      	movs	r2, #0
 8015812:	4640      	mov	r0, r8
 8015814:	4649      	mov	r1, r9
 8015816:	f7ea feef 	bl	80005f8 <__aeabi_dmul>
 801581a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801581e:	9e01      	ldr	r6, [sp, #4]
 8015820:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015824:	3501      	adds	r5, #1
 8015826:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801582a:	4628      	mov	r0, r5
 801582c:	f7ea fe7a 	bl	8000524 <__aeabi_i2d>
 8015830:	4642      	mov	r2, r8
 8015832:	464b      	mov	r3, r9
 8015834:	f7ea fee0 	bl	80005f8 <__aeabi_dmul>
 8015838:	4b86      	ldr	r3, [pc, #536]	; (8015a54 <_dtoa_r+0x64c>)
 801583a:	2200      	movs	r2, #0
 801583c:	f7ea fd26 	bl	800028c <__adddf3>
 8015840:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015848:	9303      	str	r3, [sp, #12]
 801584a:	2e00      	cmp	r6, #0
 801584c:	d158      	bne.n	8015900 <_dtoa_r+0x4f8>
 801584e:	4b82      	ldr	r3, [pc, #520]	; (8015a58 <_dtoa_r+0x650>)
 8015850:	2200      	movs	r2, #0
 8015852:	4640      	mov	r0, r8
 8015854:	4649      	mov	r1, r9
 8015856:	f7ea fd17 	bl	8000288 <__aeabi_dsub>
 801585a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801585e:	4680      	mov	r8, r0
 8015860:	4689      	mov	r9, r1
 8015862:	f7eb f959 	bl	8000b18 <__aeabi_dcmpgt>
 8015866:	2800      	cmp	r0, #0
 8015868:	f040 8296 	bne.w	8015d98 <_dtoa_r+0x990>
 801586c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015870:	4640      	mov	r0, r8
 8015872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015876:	4649      	mov	r1, r9
 8015878:	f7eb f930 	bl	8000adc <__aeabi_dcmplt>
 801587c:	2800      	cmp	r0, #0
 801587e:	f040 8289 	bne.w	8015d94 <_dtoa_r+0x98c>
 8015882:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015886:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015888:	2b00      	cmp	r3, #0
 801588a:	f2c0 814e 	blt.w	8015b2a <_dtoa_r+0x722>
 801588e:	f1bb 0f0e 	cmp.w	fp, #14
 8015892:	f300 814a 	bgt.w	8015b2a <_dtoa_r+0x722>
 8015896:	4b6b      	ldr	r3, [pc, #428]	; (8015a44 <_dtoa_r+0x63c>)
 8015898:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801589c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80158a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	f280 80dc 	bge.w	8015a60 <_dtoa_r+0x658>
 80158a8:	9b04      	ldr	r3, [sp, #16]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	f300 80d8 	bgt.w	8015a60 <_dtoa_r+0x658>
 80158b0:	f040 826f 	bne.w	8015d92 <_dtoa_r+0x98a>
 80158b4:	4b68      	ldr	r3, [pc, #416]	; (8015a58 <_dtoa_r+0x650>)
 80158b6:	2200      	movs	r2, #0
 80158b8:	4640      	mov	r0, r8
 80158ba:	4649      	mov	r1, r9
 80158bc:	f7ea fe9c 	bl	80005f8 <__aeabi_dmul>
 80158c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80158c4:	f7eb f91e 	bl	8000b04 <__aeabi_dcmpge>
 80158c8:	9e04      	ldr	r6, [sp, #16]
 80158ca:	4637      	mov	r7, r6
 80158cc:	2800      	cmp	r0, #0
 80158ce:	f040 8245 	bne.w	8015d5c <_dtoa_r+0x954>
 80158d2:	9d00      	ldr	r5, [sp, #0]
 80158d4:	2331      	movs	r3, #49	; 0x31
 80158d6:	f805 3b01 	strb.w	r3, [r5], #1
 80158da:	f10b 0b01 	add.w	fp, fp, #1
 80158de:	e241      	b.n	8015d64 <_dtoa_r+0x95c>
 80158e0:	07f2      	lsls	r2, r6, #31
 80158e2:	d505      	bpl.n	80158f0 <_dtoa_r+0x4e8>
 80158e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80158e8:	f7ea fe86 	bl	80005f8 <__aeabi_dmul>
 80158ec:	3501      	adds	r5, #1
 80158ee:	2301      	movs	r3, #1
 80158f0:	1076      	asrs	r6, r6, #1
 80158f2:	3708      	adds	r7, #8
 80158f4:	e773      	b.n	80157de <_dtoa_r+0x3d6>
 80158f6:	2502      	movs	r5, #2
 80158f8:	e775      	b.n	80157e6 <_dtoa_r+0x3de>
 80158fa:	9e04      	ldr	r6, [sp, #16]
 80158fc:	465f      	mov	r7, fp
 80158fe:	e792      	b.n	8015826 <_dtoa_r+0x41e>
 8015900:	9900      	ldr	r1, [sp, #0]
 8015902:	4b50      	ldr	r3, [pc, #320]	; (8015a44 <_dtoa_r+0x63c>)
 8015904:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015908:	4431      	add	r1, r6
 801590a:	9102      	str	r1, [sp, #8]
 801590c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801590e:	eeb0 9a47 	vmov.f32	s18, s14
 8015912:	eef0 9a67 	vmov.f32	s19, s15
 8015916:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801591a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801591e:	2900      	cmp	r1, #0
 8015920:	d044      	beq.n	80159ac <_dtoa_r+0x5a4>
 8015922:	494e      	ldr	r1, [pc, #312]	; (8015a5c <_dtoa_r+0x654>)
 8015924:	2000      	movs	r0, #0
 8015926:	f7ea ff91 	bl	800084c <__aeabi_ddiv>
 801592a:	ec53 2b19 	vmov	r2, r3, d9
 801592e:	f7ea fcab 	bl	8000288 <__aeabi_dsub>
 8015932:	9d00      	ldr	r5, [sp, #0]
 8015934:	ec41 0b19 	vmov	d9, r0, r1
 8015938:	4649      	mov	r1, r9
 801593a:	4640      	mov	r0, r8
 801593c:	f7eb f90c 	bl	8000b58 <__aeabi_d2iz>
 8015940:	4606      	mov	r6, r0
 8015942:	f7ea fdef 	bl	8000524 <__aeabi_i2d>
 8015946:	4602      	mov	r2, r0
 8015948:	460b      	mov	r3, r1
 801594a:	4640      	mov	r0, r8
 801594c:	4649      	mov	r1, r9
 801594e:	f7ea fc9b 	bl	8000288 <__aeabi_dsub>
 8015952:	3630      	adds	r6, #48	; 0x30
 8015954:	f805 6b01 	strb.w	r6, [r5], #1
 8015958:	ec53 2b19 	vmov	r2, r3, d9
 801595c:	4680      	mov	r8, r0
 801595e:	4689      	mov	r9, r1
 8015960:	f7eb f8bc 	bl	8000adc <__aeabi_dcmplt>
 8015964:	2800      	cmp	r0, #0
 8015966:	d164      	bne.n	8015a32 <_dtoa_r+0x62a>
 8015968:	4642      	mov	r2, r8
 801596a:	464b      	mov	r3, r9
 801596c:	4937      	ldr	r1, [pc, #220]	; (8015a4c <_dtoa_r+0x644>)
 801596e:	2000      	movs	r0, #0
 8015970:	f7ea fc8a 	bl	8000288 <__aeabi_dsub>
 8015974:	ec53 2b19 	vmov	r2, r3, d9
 8015978:	f7eb f8b0 	bl	8000adc <__aeabi_dcmplt>
 801597c:	2800      	cmp	r0, #0
 801597e:	f040 80b6 	bne.w	8015aee <_dtoa_r+0x6e6>
 8015982:	9b02      	ldr	r3, [sp, #8]
 8015984:	429d      	cmp	r5, r3
 8015986:	f43f af7c 	beq.w	8015882 <_dtoa_r+0x47a>
 801598a:	4b31      	ldr	r3, [pc, #196]	; (8015a50 <_dtoa_r+0x648>)
 801598c:	ec51 0b19 	vmov	r0, r1, d9
 8015990:	2200      	movs	r2, #0
 8015992:	f7ea fe31 	bl	80005f8 <__aeabi_dmul>
 8015996:	4b2e      	ldr	r3, [pc, #184]	; (8015a50 <_dtoa_r+0x648>)
 8015998:	ec41 0b19 	vmov	d9, r0, r1
 801599c:	2200      	movs	r2, #0
 801599e:	4640      	mov	r0, r8
 80159a0:	4649      	mov	r1, r9
 80159a2:	f7ea fe29 	bl	80005f8 <__aeabi_dmul>
 80159a6:	4680      	mov	r8, r0
 80159a8:	4689      	mov	r9, r1
 80159aa:	e7c5      	b.n	8015938 <_dtoa_r+0x530>
 80159ac:	ec51 0b17 	vmov	r0, r1, d7
 80159b0:	f7ea fe22 	bl	80005f8 <__aeabi_dmul>
 80159b4:	9b02      	ldr	r3, [sp, #8]
 80159b6:	9d00      	ldr	r5, [sp, #0]
 80159b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80159ba:	ec41 0b19 	vmov	d9, r0, r1
 80159be:	4649      	mov	r1, r9
 80159c0:	4640      	mov	r0, r8
 80159c2:	f7eb f8c9 	bl	8000b58 <__aeabi_d2iz>
 80159c6:	4606      	mov	r6, r0
 80159c8:	f7ea fdac 	bl	8000524 <__aeabi_i2d>
 80159cc:	3630      	adds	r6, #48	; 0x30
 80159ce:	4602      	mov	r2, r0
 80159d0:	460b      	mov	r3, r1
 80159d2:	4640      	mov	r0, r8
 80159d4:	4649      	mov	r1, r9
 80159d6:	f7ea fc57 	bl	8000288 <__aeabi_dsub>
 80159da:	f805 6b01 	strb.w	r6, [r5], #1
 80159de:	9b02      	ldr	r3, [sp, #8]
 80159e0:	429d      	cmp	r5, r3
 80159e2:	4680      	mov	r8, r0
 80159e4:	4689      	mov	r9, r1
 80159e6:	f04f 0200 	mov.w	r2, #0
 80159ea:	d124      	bne.n	8015a36 <_dtoa_r+0x62e>
 80159ec:	4b1b      	ldr	r3, [pc, #108]	; (8015a5c <_dtoa_r+0x654>)
 80159ee:	ec51 0b19 	vmov	r0, r1, d9
 80159f2:	f7ea fc4b 	bl	800028c <__adddf3>
 80159f6:	4602      	mov	r2, r0
 80159f8:	460b      	mov	r3, r1
 80159fa:	4640      	mov	r0, r8
 80159fc:	4649      	mov	r1, r9
 80159fe:	f7eb f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8015a02:	2800      	cmp	r0, #0
 8015a04:	d173      	bne.n	8015aee <_dtoa_r+0x6e6>
 8015a06:	ec53 2b19 	vmov	r2, r3, d9
 8015a0a:	4914      	ldr	r1, [pc, #80]	; (8015a5c <_dtoa_r+0x654>)
 8015a0c:	2000      	movs	r0, #0
 8015a0e:	f7ea fc3b 	bl	8000288 <__aeabi_dsub>
 8015a12:	4602      	mov	r2, r0
 8015a14:	460b      	mov	r3, r1
 8015a16:	4640      	mov	r0, r8
 8015a18:	4649      	mov	r1, r9
 8015a1a:	f7eb f85f 	bl	8000adc <__aeabi_dcmplt>
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	f43f af2f 	beq.w	8015882 <_dtoa_r+0x47a>
 8015a24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015a26:	1e6b      	subs	r3, r5, #1
 8015a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015a2e:	2b30      	cmp	r3, #48	; 0x30
 8015a30:	d0f8      	beq.n	8015a24 <_dtoa_r+0x61c>
 8015a32:	46bb      	mov	fp, r7
 8015a34:	e04a      	b.n	8015acc <_dtoa_r+0x6c4>
 8015a36:	4b06      	ldr	r3, [pc, #24]	; (8015a50 <_dtoa_r+0x648>)
 8015a38:	f7ea fdde 	bl	80005f8 <__aeabi_dmul>
 8015a3c:	4680      	mov	r8, r0
 8015a3e:	4689      	mov	r9, r1
 8015a40:	e7bd      	b.n	80159be <_dtoa_r+0x5b6>
 8015a42:	bf00      	nop
 8015a44:	0801b0e8 	.word	0x0801b0e8
 8015a48:	0801b0c0 	.word	0x0801b0c0
 8015a4c:	3ff00000 	.word	0x3ff00000
 8015a50:	40240000 	.word	0x40240000
 8015a54:	401c0000 	.word	0x401c0000
 8015a58:	40140000 	.word	0x40140000
 8015a5c:	3fe00000 	.word	0x3fe00000
 8015a60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015a64:	9d00      	ldr	r5, [sp, #0]
 8015a66:	4642      	mov	r2, r8
 8015a68:	464b      	mov	r3, r9
 8015a6a:	4630      	mov	r0, r6
 8015a6c:	4639      	mov	r1, r7
 8015a6e:	f7ea feed 	bl	800084c <__aeabi_ddiv>
 8015a72:	f7eb f871 	bl	8000b58 <__aeabi_d2iz>
 8015a76:	9001      	str	r0, [sp, #4]
 8015a78:	f7ea fd54 	bl	8000524 <__aeabi_i2d>
 8015a7c:	4642      	mov	r2, r8
 8015a7e:	464b      	mov	r3, r9
 8015a80:	f7ea fdba 	bl	80005f8 <__aeabi_dmul>
 8015a84:	4602      	mov	r2, r0
 8015a86:	460b      	mov	r3, r1
 8015a88:	4630      	mov	r0, r6
 8015a8a:	4639      	mov	r1, r7
 8015a8c:	f7ea fbfc 	bl	8000288 <__aeabi_dsub>
 8015a90:	9e01      	ldr	r6, [sp, #4]
 8015a92:	9f04      	ldr	r7, [sp, #16]
 8015a94:	3630      	adds	r6, #48	; 0x30
 8015a96:	f805 6b01 	strb.w	r6, [r5], #1
 8015a9a:	9e00      	ldr	r6, [sp, #0]
 8015a9c:	1bae      	subs	r6, r5, r6
 8015a9e:	42b7      	cmp	r7, r6
 8015aa0:	4602      	mov	r2, r0
 8015aa2:	460b      	mov	r3, r1
 8015aa4:	d134      	bne.n	8015b10 <_dtoa_r+0x708>
 8015aa6:	f7ea fbf1 	bl	800028c <__adddf3>
 8015aaa:	4642      	mov	r2, r8
 8015aac:	464b      	mov	r3, r9
 8015aae:	4606      	mov	r6, r0
 8015ab0:	460f      	mov	r7, r1
 8015ab2:	f7eb f831 	bl	8000b18 <__aeabi_dcmpgt>
 8015ab6:	b9c8      	cbnz	r0, 8015aec <_dtoa_r+0x6e4>
 8015ab8:	4642      	mov	r2, r8
 8015aba:	464b      	mov	r3, r9
 8015abc:	4630      	mov	r0, r6
 8015abe:	4639      	mov	r1, r7
 8015ac0:	f7eb f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8015ac4:	b110      	cbz	r0, 8015acc <_dtoa_r+0x6c4>
 8015ac6:	9b01      	ldr	r3, [sp, #4]
 8015ac8:	07db      	lsls	r3, r3, #31
 8015aca:	d40f      	bmi.n	8015aec <_dtoa_r+0x6e4>
 8015acc:	4651      	mov	r1, sl
 8015ace:	4620      	mov	r0, r4
 8015ad0:	f000 fe82 	bl	80167d8 <_Bfree>
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ad8:	702b      	strb	r3, [r5, #0]
 8015ada:	f10b 0301 	add.w	r3, fp, #1
 8015ade:	6013      	str	r3, [r2, #0]
 8015ae0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f43f ace2 	beq.w	80154ac <_dtoa_r+0xa4>
 8015ae8:	601d      	str	r5, [r3, #0]
 8015aea:	e4df      	b.n	80154ac <_dtoa_r+0xa4>
 8015aec:	465f      	mov	r7, fp
 8015aee:	462b      	mov	r3, r5
 8015af0:	461d      	mov	r5, r3
 8015af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015af6:	2a39      	cmp	r2, #57	; 0x39
 8015af8:	d106      	bne.n	8015b08 <_dtoa_r+0x700>
 8015afa:	9a00      	ldr	r2, [sp, #0]
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d1f7      	bne.n	8015af0 <_dtoa_r+0x6e8>
 8015b00:	9900      	ldr	r1, [sp, #0]
 8015b02:	2230      	movs	r2, #48	; 0x30
 8015b04:	3701      	adds	r7, #1
 8015b06:	700a      	strb	r2, [r1, #0]
 8015b08:	781a      	ldrb	r2, [r3, #0]
 8015b0a:	3201      	adds	r2, #1
 8015b0c:	701a      	strb	r2, [r3, #0]
 8015b0e:	e790      	b.n	8015a32 <_dtoa_r+0x62a>
 8015b10:	4ba3      	ldr	r3, [pc, #652]	; (8015da0 <_dtoa_r+0x998>)
 8015b12:	2200      	movs	r2, #0
 8015b14:	f7ea fd70 	bl	80005f8 <__aeabi_dmul>
 8015b18:	2200      	movs	r2, #0
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	4606      	mov	r6, r0
 8015b1e:	460f      	mov	r7, r1
 8015b20:	f7ea ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8015b24:	2800      	cmp	r0, #0
 8015b26:	d09e      	beq.n	8015a66 <_dtoa_r+0x65e>
 8015b28:	e7d0      	b.n	8015acc <_dtoa_r+0x6c4>
 8015b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b2c:	2a00      	cmp	r2, #0
 8015b2e:	f000 80ca 	beq.w	8015cc6 <_dtoa_r+0x8be>
 8015b32:	9a07      	ldr	r2, [sp, #28]
 8015b34:	2a01      	cmp	r2, #1
 8015b36:	f300 80ad 	bgt.w	8015c94 <_dtoa_r+0x88c>
 8015b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b3c:	2a00      	cmp	r2, #0
 8015b3e:	f000 80a5 	beq.w	8015c8c <_dtoa_r+0x884>
 8015b42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015b46:	9e08      	ldr	r6, [sp, #32]
 8015b48:	9d05      	ldr	r5, [sp, #20]
 8015b4a:	9a05      	ldr	r2, [sp, #20]
 8015b4c:	441a      	add	r2, r3
 8015b4e:	9205      	str	r2, [sp, #20]
 8015b50:	9a06      	ldr	r2, [sp, #24]
 8015b52:	2101      	movs	r1, #1
 8015b54:	441a      	add	r2, r3
 8015b56:	4620      	mov	r0, r4
 8015b58:	9206      	str	r2, [sp, #24]
 8015b5a:	f000 ff3d 	bl	80169d8 <__i2b>
 8015b5e:	4607      	mov	r7, r0
 8015b60:	b165      	cbz	r5, 8015b7c <_dtoa_r+0x774>
 8015b62:	9b06      	ldr	r3, [sp, #24]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	dd09      	ble.n	8015b7c <_dtoa_r+0x774>
 8015b68:	42ab      	cmp	r3, r5
 8015b6a:	9a05      	ldr	r2, [sp, #20]
 8015b6c:	bfa8      	it	ge
 8015b6e:	462b      	movge	r3, r5
 8015b70:	1ad2      	subs	r2, r2, r3
 8015b72:	9205      	str	r2, [sp, #20]
 8015b74:	9a06      	ldr	r2, [sp, #24]
 8015b76:	1aed      	subs	r5, r5, r3
 8015b78:	1ad3      	subs	r3, r2, r3
 8015b7a:	9306      	str	r3, [sp, #24]
 8015b7c:	9b08      	ldr	r3, [sp, #32]
 8015b7e:	b1f3      	cbz	r3, 8015bbe <_dtoa_r+0x7b6>
 8015b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	f000 80a3 	beq.w	8015cce <_dtoa_r+0x8c6>
 8015b88:	2e00      	cmp	r6, #0
 8015b8a:	dd10      	ble.n	8015bae <_dtoa_r+0x7a6>
 8015b8c:	4639      	mov	r1, r7
 8015b8e:	4632      	mov	r2, r6
 8015b90:	4620      	mov	r0, r4
 8015b92:	f000 ffe1 	bl	8016b58 <__pow5mult>
 8015b96:	4652      	mov	r2, sl
 8015b98:	4601      	mov	r1, r0
 8015b9a:	4607      	mov	r7, r0
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	f000 ff31 	bl	8016a04 <__multiply>
 8015ba2:	4651      	mov	r1, sl
 8015ba4:	4680      	mov	r8, r0
 8015ba6:	4620      	mov	r0, r4
 8015ba8:	f000 fe16 	bl	80167d8 <_Bfree>
 8015bac:	46c2      	mov	sl, r8
 8015bae:	9b08      	ldr	r3, [sp, #32]
 8015bb0:	1b9a      	subs	r2, r3, r6
 8015bb2:	d004      	beq.n	8015bbe <_dtoa_r+0x7b6>
 8015bb4:	4651      	mov	r1, sl
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	f000 ffce 	bl	8016b58 <__pow5mult>
 8015bbc:	4682      	mov	sl, r0
 8015bbe:	2101      	movs	r1, #1
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	f000 ff09 	bl	80169d8 <__i2b>
 8015bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	4606      	mov	r6, r0
 8015bcc:	f340 8081 	ble.w	8015cd2 <_dtoa_r+0x8ca>
 8015bd0:	461a      	mov	r2, r3
 8015bd2:	4601      	mov	r1, r0
 8015bd4:	4620      	mov	r0, r4
 8015bd6:	f000 ffbf 	bl	8016b58 <__pow5mult>
 8015bda:	9b07      	ldr	r3, [sp, #28]
 8015bdc:	2b01      	cmp	r3, #1
 8015bde:	4606      	mov	r6, r0
 8015be0:	dd7a      	ble.n	8015cd8 <_dtoa_r+0x8d0>
 8015be2:	f04f 0800 	mov.w	r8, #0
 8015be6:	6933      	ldr	r3, [r6, #16]
 8015be8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015bec:	6918      	ldr	r0, [r3, #16]
 8015bee:	f000 fea5 	bl	801693c <__hi0bits>
 8015bf2:	f1c0 0020 	rsb	r0, r0, #32
 8015bf6:	9b06      	ldr	r3, [sp, #24]
 8015bf8:	4418      	add	r0, r3
 8015bfa:	f010 001f 	ands.w	r0, r0, #31
 8015bfe:	f000 8094 	beq.w	8015d2a <_dtoa_r+0x922>
 8015c02:	f1c0 0320 	rsb	r3, r0, #32
 8015c06:	2b04      	cmp	r3, #4
 8015c08:	f340 8085 	ble.w	8015d16 <_dtoa_r+0x90e>
 8015c0c:	9b05      	ldr	r3, [sp, #20]
 8015c0e:	f1c0 001c 	rsb	r0, r0, #28
 8015c12:	4403      	add	r3, r0
 8015c14:	9305      	str	r3, [sp, #20]
 8015c16:	9b06      	ldr	r3, [sp, #24]
 8015c18:	4403      	add	r3, r0
 8015c1a:	4405      	add	r5, r0
 8015c1c:	9306      	str	r3, [sp, #24]
 8015c1e:	9b05      	ldr	r3, [sp, #20]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	dd05      	ble.n	8015c30 <_dtoa_r+0x828>
 8015c24:	4651      	mov	r1, sl
 8015c26:	461a      	mov	r2, r3
 8015c28:	4620      	mov	r0, r4
 8015c2a:	f000 ffef 	bl	8016c0c <__lshift>
 8015c2e:	4682      	mov	sl, r0
 8015c30:	9b06      	ldr	r3, [sp, #24]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	dd05      	ble.n	8015c42 <_dtoa_r+0x83a>
 8015c36:	4631      	mov	r1, r6
 8015c38:	461a      	mov	r2, r3
 8015c3a:	4620      	mov	r0, r4
 8015c3c:	f000 ffe6 	bl	8016c0c <__lshift>
 8015c40:	4606      	mov	r6, r0
 8015c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d072      	beq.n	8015d2e <_dtoa_r+0x926>
 8015c48:	4631      	mov	r1, r6
 8015c4a:	4650      	mov	r0, sl
 8015c4c:	f001 f84a 	bl	8016ce4 <__mcmp>
 8015c50:	2800      	cmp	r0, #0
 8015c52:	da6c      	bge.n	8015d2e <_dtoa_r+0x926>
 8015c54:	2300      	movs	r3, #0
 8015c56:	4651      	mov	r1, sl
 8015c58:	220a      	movs	r2, #10
 8015c5a:	4620      	mov	r0, r4
 8015c5c:	f000 fdde 	bl	801681c <__multadd>
 8015c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015c66:	4682      	mov	sl, r0
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	f000 81b0 	beq.w	8015fce <_dtoa_r+0xbc6>
 8015c6e:	2300      	movs	r3, #0
 8015c70:	4639      	mov	r1, r7
 8015c72:	220a      	movs	r2, #10
 8015c74:	4620      	mov	r0, r4
 8015c76:	f000 fdd1 	bl	801681c <__multadd>
 8015c7a:	9b01      	ldr	r3, [sp, #4]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	4607      	mov	r7, r0
 8015c80:	f300 8096 	bgt.w	8015db0 <_dtoa_r+0x9a8>
 8015c84:	9b07      	ldr	r3, [sp, #28]
 8015c86:	2b02      	cmp	r3, #2
 8015c88:	dc59      	bgt.n	8015d3e <_dtoa_r+0x936>
 8015c8a:	e091      	b.n	8015db0 <_dtoa_r+0x9a8>
 8015c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015c92:	e758      	b.n	8015b46 <_dtoa_r+0x73e>
 8015c94:	9b04      	ldr	r3, [sp, #16]
 8015c96:	1e5e      	subs	r6, r3, #1
 8015c98:	9b08      	ldr	r3, [sp, #32]
 8015c9a:	42b3      	cmp	r3, r6
 8015c9c:	bfbf      	itttt	lt
 8015c9e:	9b08      	ldrlt	r3, [sp, #32]
 8015ca0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8015ca2:	9608      	strlt	r6, [sp, #32]
 8015ca4:	1af3      	sublt	r3, r6, r3
 8015ca6:	bfb4      	ite	lt
 8015ca8:	18d2      	addlt	r2, r2, r3
 8015caa:	1b9e      	subge	r6, r3, r6
 8015cac:	9b04      	ldr	r3, [sp, #16]
 8015cae:	bfbc      	itt	lt
 8015cb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015cb2:	2600      	movlt	r6, #0
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	bfb7      	itett	lt
 8015cb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015cbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015cc0:	1a9d      	sublt	r5, r3, r2
 8015cc2:	2300      	movlt	r3, #0
 8015cc4:	e741      	b.n	8015b4a <_dtoa_r+0x742>
 8015cc6:	9e08      	ldr	r6, [sp, #32]
 8015cc8:	9d05      	ldr	r5, [sp, #20]
 8015cca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015ccc:	e748      	b.n	8015b60 <_dtoa_r+0x758>
 8015cce:	9a08      	ldr	r2, [sp, #32]
 8015cd0:	e770      	b.n	8015bb4 <_dtoa_r+0x7ac>
 8015cd2:	9b07      	ldr	r3, [sp, #28]
 8015cd4:	2b01      	cmp	r3, #1
 8015cd6:	dc19      	bgt.n	8015d0c <_dtoa_r+0x904>
 8015cd8:	9b02      	ldr	r3, [sp, #8]
 8015cda:	b9bb      	cbnz	r3, 8015d0c <_dtoa_r+0x904>
 8015cdc:	9b03      	ldr	r3, [sp, #12]
 8015cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ce2:	b99b      	cbnz	r3, 8015d0c <_dtoa_r+0x904>
 8015ce4:	9b03      	ldr	r3, [sp, #12]
 8015ce6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015cea:	0d1b      	lsrs	r3, r3, #20
 8015cec:	051b      	lsls	r3, r3, #20
 8015cee:	b183      	cbz	r3, 8015d12 <_dtoa_r+0x90a>
 8015cf0:	9b05      	ldr	r3, [sp, #20]
 8015cf2:	3301      	adds	r3, #1
 8015cf4:	9305      	str	r3, [sp, #20]
 8015cf6:	9b06      	ldr	r3, [sp, #24]
 8015cf8:	3301      	adds	r3, #1
 8015cfa:	9306      	str	r3, [sp, #24]
 8015cfc:	f04f 0801 	mov.w	r8, #1
 8015d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	f47f af6f 	bne.w	8015be6 <_dtoa_r+0x7de>
 8015d08:	2001      	movs	r0, #1
 8015d0a:	e774      	b.n	8015bf6 <_dtoa_r+0x7ee>
 8015d0c:	f04f 0800 	mov.w	r8, #0
 8015d10:	e7f6      	b.n	8015d00 <_dtoa_r+0x8f8>
 8015d12:	4698      	mov	r8, r3
 8015d14:	e7f4      	b.n	8015d00 <_dtoa_r+0x8f8>
 8015d16:	d082      	beq.n	8015c1e <_dtoa_r+0x816>
 8015d18:	9a05      	ldr	r2, [sp, #20]
 8015d1a:	331c      	adds	r3, #28
 8015d1c:	441a      	add	r2, r3
 8015d1e:	9205      	str	r2, [sp, #20]
 8015d20:	9a06      	ldr	r2, [sp, #24]
 8015d22:	441a      	add	r2, r3
 8015d24:	441d      	add	r5, r3
 8015d26:	9206      	str	r2, [sp, #24]
 8015d28:	e779      	b.n	8015c1e <_dtoa_r+0x816>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	e7f4      	b.n	8015d18 <_dtoa_r+0x910>
 8015d2e:	9b04      	ldr	r3, [sp, #16]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	dc37      	bgt.n	8015da4 <_dtoa_r+0x99c>
 8015d34:	9b07      	ldr	r3, [sp, #28]
 8015d36:	2b02      	cmp	r3, #2
 8015d38:	dd34      	ble.n	8015da4 <_dtoa_r+0x99c>
 8015d3a:	9b04      	ldr	r3, [sp, #16]
 8015d3c:	9301      	str	r3, [sp, #4]
 8015d3e:	9b01      	ldr	r3, [sp, #4]
 8015d40:	b963      	cbnz	r3, 8015d5c <_dtoa_r+0x954>
 8015d42:	4631      	mov	r1, r6
 8015d44:	2205      	movs	r2, #5
 8015d46:	4620      	mov	r0, r4
 8015d48:	f000 fd68 	bl	801681c <__multadd>
 8015d4c:	4601      	mov	r1, r0
 8015d4e:	4606      	mov	r6, r0
 8015d50:	4650      	mov	r0, sl
 8015d52:	f000 ffc7 	bl	8016ce4 <__mcmp>
 8015d56:	2800      	cmp	r0, #0
 8015d58:	f73f adbb 	bgt.w	80158d2 <_dtoa_r+0x4ca>
 8015d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d5e:	9d00      	ldr	r5, [sp, #0]
 8015d60:	ea6f 0b03 	mvn.w	fp, r3
 8015d64:	f04f 0800 	mov.w	r8, #0
 8015d68:	4631      	mov	r1, r6
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	f000 fd34 	bl	80167d8 <_Bfree>
 8015d70:	2f00      	cmp	r7, #0
 8015d72:	f43f aeab 	beq.w	8015acc <_dtoa_r+0x6c4>
 8015d76:	f1b8 0f00 	cmp.w	r8, #0
 8015d7a:	d005      	beq.n	8015d88 <_dtoa_r+0x980>
 8015d7c:	45b8      	cmp	r8, r7
 8015d7e:	d003      	beq.n	8015d88 <_dtoa_r+0x980>
 8015d80:	4641      	mov	r1, r8
 8015d82:	4620      	mov	r0, r4
 8015d84:	f000 fd28 	bl	80167d8 <_Bfree>
 8015d88:	4639      	mov	r1, r7
 8015d8a:	4620      	mov	r0, r4
 8015d8c:	f000 fd24 	bl	80167d8 <_Bfree>
 8015d90:	e69c      	b.n	8015acc <_dtoa_r+0x6c4>
 8015d92:	2600      	movs	r6, #0
 8015d94:	4637      	mov	r7, r6
 8015d96:	e7e1      	b.n	8015d5c <_dtoa_r+0x954>
 8015d98:	46bb      	mov	fp, r7
 8015d9a:	4637      	mov	r7, r6
 8015d9c:	e599      	b.n	80158d2 <_dtoa_r+0x4ca>
 8015d9e:	bf00      	nop
 8015da0:	40240000 	.word	0x40240000
 8015da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	f000 80c8 	beq.w	8015f3c <_dtoa_r+0xb34>
 8015dac:	9b04      	ldr	r3, [sp, #16]
 8015dae:	9301      	str	r3, [sp, #4]
 8015db0:	2d00      	cmp	r5, #0
 8015db2:	dd05      	ble.n	8015dc0 <_dtoa_r+0x9b8>
 8015db4:	4639      	mov	r1, r7
 8015db6:	462a      	mov	r2, r5
 8015db8:	4620      	mov	r0, r4
 8015dba:	f000 ff27 	bl	8016c0c <__lshift>
 8015dbe:	4607      	mov	r7, r0
 8015dc0:	f1b8 0f00 	cmp.w	r8, #0
 8015dc4:	d05b      	beq.n	8015e7e <_dtoa_r+0xa76>
 8015dc6:	6879      	ldr	r1, [r7, #4]
 8015dc8:	4620      	mov	r0, r4
 8015dca:	f000 fcc5 	bl	8016758 <_Balloc>
 8015dce:	4605      	mov	r5, r0
 8015dd0:	b928      	cbnz	r0, 8015dde <_dtoa_r+0x9d6>
 8015dd2:	4b83      	ldr	r3, [pc, #524]	; (8015fe0 <_dtoa_r+0xbd8>)
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015dda:	f7ff bb2e 	b.w	801543a <_dtoa_r+0x32>
 8015dde:	693a      	ldr	r2, [r7, #16]
 8015de0:	3202      	adds	r2, #2
 8015de2:	0092      	lsls	r2, r2, #2
 8015de4:	f107 010c 	add.w	r1, r7, #12
 8015de8:	300c      	adds	r0, #12
 8015dea:	f7ff fa4a 	bl	8015282 <memcpy>
 8015dee:	2201      	movs	r2, #1
 8015df0:	4629      	mov	r1, r5
 8015df2:	4620      	mov	r0, r4
 8015df4:	f000 ff0a 	bl	8016c0c <__lshift>
 8015df8:	9b00      	ldr	r3, [sp, #0]
 8015dfa:	3301      	adds	r3, #1
 8015dfc:	9304      	str	r3, [sp, #16]
 8015dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e02:	4413      	add	r3, r2
 8015e04:	9308      	str	r3, [sp, #32]
 8015e06:	9b02      	ldr	r3, [sp, #8]
 8015e08:	f003 0301 	and.w	r3, r3, #1
 8015e0c:	46b8      	mov	r8, r7
 8015e0e:	9306      	str	r3, [sp, #24]
 8015e10:	4607      	mov	r7, r0
 8015e12:	9b04      	ldr	r3, [sp, #16]
 8015e14:	4631      	mov	r1, r6
 8015e16:	3b01      	subs	r3, #1
 8015e18:	4650      	mov	r0, sl
 8015e1a:	9301      	str	r3, [sp, #4]
 8015e1c:	f7ff fa6c 	bl	80152f8 <quorem>
 8015e20:	4641      	mov	r1, r8
 8015e22:	9002      	str	r0, [sp, #8]
 8015e24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015e28:	4650      	mov	r0, sl
 8015e2a:	f000 ff5b 	bl	8016ce4 <__mcmp>
 8015e2e:	463a      	mov	r2, r7
 8015e30:	9005      	str	r0, [sp, #20]
 8015e32:	4631      	mov	r1, r6
 8015e34:	4620      	mov	r0, r4
 8015e36:	f000 ff71 	bl	8016d1c <__mdiff>
 8015e3a:	68c2      	ldr	r2, [r0, #12]
 8015e3c:	4605      	mov	r5, r0
 8015e3e:	bb02      	cbnz	r2, 8015e82 <_dtoa_r+0xa7a>
 8015e40:	4601      	mov	r1, r0
 8015e42:	4650      	mov	r0, sl
 8015e44:	f000 ff4e 	bl	8016ce4 <__mcmp>
 8015e48:	4602      	mov	r2, r0
 8015e4a:	4629      	mov	r1, r5
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8015e50:	f000 fcc2 	bl	80167d8 <_Bfree>
 8015e54:	9b07      	ldr	r3, [sp, #28]
 8015e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e58:	9d04      	ldr	r5, [sp, #16]
 8015e5a:	ea43 0102 	orr.w	r1, r3, r2
 8015e5e:	9b06      	ldr	r3, [sp, #24]
 8015e60:	4319      	orrs	r1, r3
 8015e62:	d110      	bne.n	8015e86 <_dtoa_r+0xa7e>
 8015e64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015e68:	d029      	beq.n	8015ebe <_dtoa_r+0xab6>
 8015e6a:	9b05      	ldr	r3, [sp, #20]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	dd02      	ble.n	8015e76 <_dtoa_r+0xa6e>
 8015e70:	9b02      	ldr	r3, [sp, #8]
 8015e72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8015e76:	9b01      	ldr	r3, [sp, #4]
 8015e78:	f883 9000 	strb.w	r9, [r3]
 8015e7c:	e774      	b.n	8015d68 <_dtoa_r+0x960>
 8015e7e:	4638      	mov	r0, r7
 8015e80:	e7ba      	b.n	8015df8 <_dtoa_r+0x9f0>
 8015e82:	2201      	movs	r2, #1
 8015e84:	e7e1      	b.n	8015e4a <_dtoa_r+0xa42>
 8015e86:	9b05      	ldr	r3, [sp, #20]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	db04      	blt.n	8015e96 <_dtoa_r+0xa8e>
 8015e8c:	9907      	ldr	r1, [sp, #28]
 8015e8e:	430b      	orrs	r3, r1
 8015e90:	9906      	ldr	r1, [sp, #24]
 8015e92:	430b      	orrs	r3, r1
 8015e94:	d120      	bne.n	8015ed8 <_dtoa_r+0xad0>
 8015e96:	2a00      	cmp	r2, #0
 8015e98:	dded      	ble.n	8015e76 <_dtoa_r+0xa6e>
 8015e9a:	4651      	mov	r1, sl
 8015e9c:	2201      	movs	r2, #1
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	f000 feb4 	bl	8016c0c <__lshift>
 8015ea4:	4631      	mov	r1, r6
 8015ea6:	4682      	mov	sl, r0
 8015ea8:	f000 ff1c 	bl	8016ce4 <__mcmp>
 8015eac:	2800      	cmp	r0, #0
 8015eae:	dc03      	bgt.n	8015eb8 <_dtoa_r+0xab0>
 8015eb0:	d1e1      	bne.n	8015e76 <_dtoa_r+0xa6e>
 8015eb2:	f019 0f01 	tst.w	r9, #1
 8015eb6:	d0de      	beq.n	8015e76 <_dtoa_r+0xa6e>
 8015eb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015ebc:	d1d8      	bne.n	8015e70 <_dtoa_r+0xa68>
 8015ebe:	9a01      	ldr	r2, [sp, #4]
 8015ec0:	2339      	movs	r3, #57	; 0x39
 8015ec2:	7013      	strb	r3, [r2, #0]
 8015ec4:	462b      	mov	r3, r5
 8015ec6:	461d      	mov	r5, r3
 8015ec8:	3b01      	subs	r3, #1
 8015eca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015ece:	2a39      	cmp	r2, #57	; 0x39
 8015ed0:	d06c      	beq.n	8015fac <_dtoa_r+0xba4>
 8015ed2:	3201      	adds	r2, #1
 8015ed4:	701a      	strb	r2, [r3, #0]
 8015ed6:	e747      	b.n	8015d68 <_dtoa_r+0x960>
 8015ed8:	2a00      	cmp	r2, #0
 8015eda:	dd07      	ble.n	8015eec <_dtoa_r+0xae4>
 8015edc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015ee0:	d0ed      	beq.n	8015ebe <_dtoa_r+0xab6>
 8015ee2:	9a01      	ldr	r2, [sp, #4]
 8015ee4:	f109 0301 	add.w	r3, r9, #1
 8015ee8:	7013      	strb	r3, [r2, #0]
 8015eea:	e73d      	b.n	8015d68 <_dtoa_r+0x960>
 8015eec:	9b04      	ldr	r3, [sp, #16]
 8015eee:	9a08      	ldr	r2, [sp, #32]
 8015ef0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015ef4:	4293      	cmp	r3, r2
 8015ef6:	d043      	beq.n	8015f80 <_dtoa_r+0xb78>
 8015ef8:	4651      	mov	r1, sl
 8015efa:	2300      	movs	r3, #0
 8015efc:	220a      	movs	r2, #10
 8015efe:	4620      	mov	r0, r4
 8015f00:	f000 fc8c 	bl	801681c <__multadd>
 8015f04:	45b8      	cmp	r8, r7
 8015f06:	4682      	mov	sl, r0
 8015f08:	f04f 0300 	mov.w	r3, #0
 8015f0c:	f04f 020a 	mov.w	r2, #10
 8015f10:	4641      	mov	r1, r8
 8015f12:	4620      	mov	r0, r4
 8015f14:	d107      	bne.n	8015f26 <_dtoa_r+0xb1e>
 8015f16:	f000 fc81 	bl	801681c <__multadd>
 8015f1a:	4680      	mov	r8, r0
 8015f1c:	4607      	mov	r7, r0
 8015f1e:	9b04      	ldr	r3, [sp, #16]
 8015f20:	3301      	adds	r3, #1
 8015f22:	9304      	str	r3, [sp, #16]
 8015f24:	e775      	b.n	8015e12 <_dtoa_r+0xa0a>
 8015f26:	f000 fc79 	bl	801681c <__multadd>
 8015f2a:	4639      	mov	r1, r7
 8015f2c:	4680      	mov	r8, r0
 8015f2e:	2300      	movs	r3, #0
 8015f30:	220a      	movs	r2, #10
 8015f32:	4620      	mov	r0, r4
 8015f34:	f000 fc72 	bl	801681c <__multadd>
 8015f38:	4607      	mov	r7, r0
 8015f3a:	e7f0      	b.n	8015f1e <_dtoa_r+0xb16>
 8015f3c:	9b04      	ldr	r3, [sp, #16]
 8015f3e:	9301      	str	r3, [sp, #4]
 8015f40:	9d00      	ldr	r5, [sp, #0]
 8015f42:	4631      	mov	r1, r6
 8015f44:	4650      	mov	r0, sl
 8015f46:	f7ff f9d7 	bl	80152f8 <quorem>
 8015f4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015f4e:	9b00      	ldr	r3, [sp, #0]
 8015f50:	f805 9b01 	strb.w	r9, [r5], #1
 8015f54:	1aea      	subs	r2, r5, r3
 8015f56:	9b01      	ldr	r3, [sp, #4]
 8015f58:	4293      	cmp	r3, r2
 8015f5a:	dd07      	ble.n	8015f6c <_dtoa_r+0xb64>
 8015f5c:	4651      	mov	r1, sl
 8015f5e:	2300      	movs	r3, #0
 8015f60:	220a      	movs	r2, #10
 8015f62:	4620      	mov	r0, r4
 8015f64:	f000 fc5a 	bl	801681c <__multadd>
 8015f68:	4682      	mov	sl, r0
 8015f6a:	e7ea      	b.n	8015f42 <_dtoa_r+0xb3a>
 8015f6c:	9b01      	ldr	r3, [sp, #4]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	bfc8      	it	gt
 8015f72:	461d      	movgt	r5, r3
 8015f74:	9b00      	ldr	r3, [sp, #0]
 8015f76:	bfd8      	it	le
 8015f78:	2501      	movle	r5, #1
 8015f7a:	441d      	add	r5, r3
 8015f7c:	f04f 0800 	mov.w	r8, #0
 8015f80:	4651      	mov	r1, sl
 8015f82:	2201      	movs	r2, #1
 8015f84:	4620      	mov	r0, r4
 8015f86:	f000 fe41 	bl	8016c0c <__lshift>
 8015f8a:	4631      	mov	r1, r6
 8015f8c:	4682      	mov	sl, r0
 8015f8e:	f000 fea9 	bl	8016ce4 <__mcmp>
 8015f92:	2800      	cmp	r0, #0
 8015f94:	dc96      	bgt.n	8015ec4 <_dtoa_r+0xabc>
 8015f96:	d102      	bne.n	8015f9e <_dtoa_r+0xb96>
 8015f98:	f019 0f01 	tst.w	r9, #1
 8015f9c:	d192      	bne.n	8015ec4 <_dtoa_r+0xabc>
 8015f9e:	462b      	mov	r3, r5
 8015fa0:	461d      	mov	r5, r3
 8015fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015fa6:	2a30      	cmp	r2, #48	; 0x30
 8015fa8:	d0fa      	beq.n	8015fa0 <_dtoa_r+0xb98>
 8015faa:	e6dd      	b.n	8015d68 <_dtoa_r+0x960>
 8015fac:	9a00      	ldr	r2, [sp, #0]
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	d189      	bne.n	8015ec6 <_dtoa_r+0xabe>
 8015fb2:	f10b 0b01 	add.w	fp, fp, #1
 8015fb6:	2331      	movs	r3, #49	; 0x31
 8015fb8:	e796      	b.n	8015ee8 <_dtoa_r+0xae0>
 8015fba:	4b0a      	ldr	r3, [pc, #40]	; (8015fe4 <_dtoa_r+0xbdc>)
 8015fbc:	f7ff ba99 	b.w	80154f2 <_dtoa_r+0xea>
 8015fc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	f47f aa6d 	bne.w	80154a2 <_dtoa_r+0x9a>
 8015fc8:	4b07      	ldr	r3, [pc, #28]	; (8015fe8 <_dtoa_r+0xbe0>)
 8015fca:	f7ff ba92 	b.w	80154f2 <_dtoa_r+0xea>
 8015fce:	9b01      	ldr	r3, [sp, #4]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	dcb5      	bgt.n	8015f40 <_dtoa_r+0xb38>
 8015fd4:	9b07      	ldr	r3, [sp, #28]
 8015fd6:	2b02      	cmp	r3, #2
 8015fd8:	f73f aeb1 	bgt.w	8015d3e <_dtoa_r+0x936>
 8015fdc:	e7b0      	b.n	8015f40 <_dtoa_r+0xb38>
 8015fde:	bf00      	nop
 8015fe0:	0801aff4 	.word	0x0801aff4
 8015fe4:	0801aeb1 	.word	0x0801aeb1
 8015fe8:	0801af8f 	.word	0x0801af8f

08015fec <_free_r>:
 8015fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015fee:	2900      	cmp	r1, #0
 8015ff0:	d044      	beq.n	801607c <_free_r+0x90>
 8015ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ff6:	9001      	str	r0, [sp, #4]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8015ffe:	bfb8      	it	lt
 8016000:	18e4      	addlt	r4, r4, r3
 8016002:	f7fd f941 	bl	8013288 <__malloc_lock>
 8016006:	4a1e      	ldr	r2, [pc, #120]	; (8016080 <_free_r+0x94>)
 8016008:	9801      	ldr	r0, [sp, #4]
 801600a:	6813      	ldr	r3, [r2, #0]
 801600c:	b933      	cbnz	r3, 801601c <_free_r+0x30>
 801600e:	6063      	str	r3, [r4, #4]
 8016010:	6014      	str	r4, [r2, #0]
 8016012:	b003      	add	sp, #12
 8016014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016018:	f7fd b93c 	b.w	8013294 <__malloc_unlock>
 801601c:	42a3      	cmp	r3, r4
 801601e:	d908      	bls.n	8016032 <_free_r+0x46>
 8016020:	6825      	ldr	r5, [r4, #0]
 8016022:	1961      	adds	r1, r4, r5
 8016024:	428b      	cmp	r3, r1
 8016026:	bf01      	itttt	eq
 8016028:	6819      	ldreq	r1, [r3, #0]
 801602a:	685b      	ldreq	r3, [r3, #4]
 801602c:	1949      	addeq	r1, r1, r5
 801602e:	6021      	streq	r1, [r4, #0]
 8016030:	e7ed      	b.n	801600e <_free_r+0x22>
 8016032:	461a      	mov	r2, r3
 8016034:	685b      	ldr	r3, [r3, #4]
 8016036:	b10b      	cbz	r3, 801603c <_free_r+0x50>
 8016038:	42a3      	cmp	r3, r4
 801603a:	d9fa      	bls.n	8016032 <_free_r+0x46>
 801603c:	6811      	ldr	r1, [r2, #0]
 801603e:	1855      	adds	r5, r2, r1
 8016040:	42a5      	cmp	r5, r4
 8016042:	d10b      	bne.n	801605c <_free_r+0x70>
 8016044:	6824      	ldr	r4, [r4, #0]
 8016046:	4421      	add	r1, r4
 8016048:	1854      	adds	r4, r2, r1
 801604a:	42a3      	cmp	r3, r4
 801604c:	6011      	str	r1, [r2, #0]
 801604e:	d1e0      	bne.n	8016012 <_free_r+0x26>
 8016050:	681c      	ldr	r4, [r3, #0]
 8016052:	685b      	ldr	r3, [r3, #4]
 8016054:	6053      	str	r3, [r2, #4]
 8016056:	440c      	add	r4, r1
 8016058:	6014      	str	r4, [r2, #0]
 801605a:	e7da      	b.n	8016012 <_free_r+0x26>
 801605c:	d902      	bls.n	8016064 <_free_r+0x78>
 801605e:	230c      	movs	r3, #12
 8016060:	6003      	str	r3, [r0, #0]
 8016062:	e7d6      	b.n	8016012 <_free_r+0x26>
 8016064:	6825      	ldr	r5, [r4, #0]
 8016066:	1961      	adds	r1, r4, r5
 8016068:	428b      	cmp	r3, r1
 801606a:	bf04      	itt	eq
 801606c:	6819      	ldreq	r1, [r3, #0]
 801606e:	685b      	ldreq	r3, [r3, #4]
 8016070:	6063      	str	r3, [r4, #4]
 8016072:	bf04      	itt	eq
 8016074:	1949      	addeq	r1, r1, r5
 8016076:	6021      	streq	r1, [r4, #0]
 8016078:	6054      	str	r4, [r2, #4]
 801607a:	e7ca      	b.n	8016012 <_free_r+0x26>
 801607c:	b003      	add	sp, #12
 801607e:	bd30      	pop	{r4, r5, pc}
 8016080:	20002248 	.word	0x20002248

08016084 <rshift>:
 8016084:	6903      	ldr	r3, [r0, #16]
 8016086:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801608a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801608e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016092:	f100 0414 	add.w	r4, r0, #20
 8016096:	dd45      	ble.n	8016124 <rshift+0xa0>
 8016098:	f011 011f 	ands.w	r1, r1, #31
 801609c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80160a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80160a4:	d10c      	bne.n	80160c0 <rshift+0x3c>
 80160a6:	f100 0710 	add.w	r7, r0, #16
 80160aa:	4629      	mov	r1, r5
 80160ac:	42b1      	cmp	r1, r6
 80160ae:	d334      	bcc.n	801611a <rshift+0x96>
 80160b0:	1a9b      	subs	r3, r3, r2
 80160b2:	009b      	lsls	r3, r3, #2
 80160b4:	1eea      	subs	r2, r5, #3
 80160b6:	4296      	cmp	r6, r2
 80160b8:	bf38      	it	cc
 80160ba:	2300      	movcc	r3, #0
 80160bc:	4423      	add	r3, r4
 80160be:	e015      	b.n	80160ec <rshift+0x68>
 80160c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80160c4:	f1c1 0820 	rsb	r8, r1, #32
 80160c8:	40cf      	lsrs	r7, r1
 80160ca:	f105 0e04 	add.w	lr, r5, #4
 80160ce:	46a1      	mov	r9, r4
 80160d0:	4576      	cmp	r6, lr
 80160d2:	46f4      	mov	ip, lr
 80160d4:	d815      	bhi.n	8016102 <rshift+0x7e>
 80160d6:	1a9a      	subs	r2, r3, r2
 80160d8:	0092      	lsls	r2, r2, #2
 80160da:	3a04      	subs	r2, #4
 80160dc:	3501      	adds	r5, #1
 80160de:	42ae      	cmp	r6, r5
 80160e0:	bf38      	it	cc
 80160e2:	2200      	movcc	r2, #0
 80160e4:	18a3      	adds	r3, r4, r2
 80160e6:	50a7      	str	r7, [r4, r2]
 80160e8:	b107      	cbz	r7, 80160ec <rshift+0x68>
 80160ea:	3304      	adds	r3, #4
 80160ec:	1b1a      	subs	r2, r3, r4
 80160ee:	42a3      	cmp	r3, r4
 80160f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80160f4:	bf08      	it	eq
 80160f6:	2300      	moveq	r3, #0
 80160f8:	6102      	str	r2, [r0, #16]
 80160fa:	bf08      	it	eq
 80160fc:	6143      	streq	r3, [r0, #20]
 80160fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016102:	f8dc c000 	ldr.w	ip, [ip]
 8016106:	fa0c fc08 	lsl.w	ip, ip, r8
 801610a:	ea4c 0707 	orr.w	r7, ip, r7
 801610e:	f849 7b04 	str.w	r7, [r9], #4
 8016112:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016116:	40cf      	lsrs	r7, r1
 8016118:	e7da      	b.n	80160d0 <rshift+0x4c>
 801611a:	f851 cb04 	ldr.w	ip, [r1], #4
 801611e:	f847 cf04 	str.w	ip, [r7, #4]!
 8016122:	e7c3      	b.n	80160ac <rshift+0x28>
 8016124:	4623      	mov	r3, r4
 8016126:	e7e1      	b.n	80160ec <rshift+0x68>

08016128 <__hexdig_fun>:
 8016128:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801612c:	2b09      	cmp	r3, #9
 801612e:	d802      	bhi.n	8016136 <__hexdig_fun+0xe>
 8016130:	3820      	subs	r0, #32
 8016132:	b2c0      	uxtb	r0, r0
 8016134:	4770      	bx	lr
 8016136:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801613a:	2b05      	cmp	r3, #5
 801613c:	d801      	bhi.n	8016142 <__hexdig_fun+0x1a>
 801613e:	3847      	subs	r0, #71	; 0x47
 8016140:	e7f7      	b.n	8016132 <__hexdig_fun+0xa>
 8016142:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016146:	2b05      	cmp	r3, #5
 8016148:	d801      	bhi.n	801614e <__hexdig_fun+0x26>
 801614a:	3827      	subs	r0, #39	; 0x27
 801614c:	e7f1      	b.n	8016132 <__hexdig_fun+0xa>
 801614e:	2000      	movs	r0, #0
 8016150:	4770      	bx	lr
	...

08016154 <__gethex>:
 8016154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016158:	4617      	mov	r7, r2
 801615a:	680a      	ldr	r2, [r1, #0]
 801615c:	b085      	sub	sp, #20
 801615e:	f102 0b02 	add.w	fp, r2, #2
 8016162:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016166:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801616a:	4681      	mov	r9, r0
 801616c:	468a      	mov	sl, r1
 801616e:	9302      	str	r3, [sp, #8]
 8016170:	32fe      	adds	r2, #254	; 0xfe
 8016172:	eb02 030b 	add.w	r3, r2, fp
 8016176:	46d8      	mov	r8, fp
 8016178:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801617c:	9301      	str	r3, [sp, #4]
 801617e:	2830      	cmp	r0, #48	; 0x30
 8016180:	d0f7      	beq.n	8016172 <__gethex+0x1e>
 8016182:	f7ff ffd1 	bl	8016128 <__hexdig_fun>
 8016186:	4604      	mov	r4, r0
 8016188:	2800      	cmp	r0, #0
 801618a:	d138      	bne.n	80161fe <__gethex+0xaa>
 801618c:	49a7      	ldr	r1, [pc, #668]	; (801642c <__gethex+0x2d8>)
 801618e:	2201      	movs	r2, #1
 8016190:	4640      	mov	r0, r8
 8016192:	f7fe ff62 	bl	801505a <strncmp>
 8016196:	4606      	mov	r6, r0
 8016198:	2800      	cmp	r0, #0
 801619a:	d169      	bne.n	8016270 <__gethex+0x11c>
 801619c:	f898 0001 	ldrb.w	r0, [r8, #1]
 80161a0:	465d      	mov	r5, fp
 80161a2:	f7ff ffc1 	bl	8016128 <__hexdig_fun>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	d064      	beq.n	8016274 <__gethex+0x120>
 80161aa:	465a      	mov	r2, fp
 80161ac:	7810      	ldrb	r0, [r2, #0]
 80161ae:	2830      	cmp	r0, #48	; 0x30
 80161b0:	4690      	mov	r8, r2
 80161b2:	f102 0201 	add.w	r2, r2, #1
 80161b6:	d0f9      	beq.n	80161ac <__gethex+0x58>
 80161b8:	f7ff ffb6 	bl	8016128 <__hexdig_fun>
 80161bc:	2301      	movs	r3, #1
 80161be:	fab0 f480 	clz	r4, r0
 80161c2:	0964      	lsrs	r4, r4, #5
 80161c4:	465e      	mov	r6, fp
 80161c6:	9301      	str	r3, [sp, #4]
 80161c8:	4642      	mov	r2, r8
 80161ca:	4615      	mov	r5, r2
 80161cc:	3201      	adds	r2, #1
 80161ce:	7828      	ldrb	r0, [r5, #0]
 80161d0:	f7ff ffaa 	bl	8016128 <__hexdig_fun>
 80161d4:	2800      	cmp	r0, #0
 80161d6:	d1f8      	bne.n	80161ca <__gethex+0x76>
 80161d8:	4994      	ldr	r1, [pc, #592]	; (801642c <__gethex+0x2d8>)
 80161da:	2201      	movs	r2, #1
 80161dc:	4628      	mov	r0, r5
 80161de:	f7fe ff3c 	bl	801505a <strncmp>
 80161e2:	b978      	cbnz	r0, 8016204 <__gethex+0xb0>
 80161e4:	b946      	cbnz	r6, 80161f8 <__gethex+0xa4>
 80161e6:	1c6e      	adds	r6, r5, #1
 80161e8:	4632      	mov	r2, r6
 80161ea:	4615      	mov	r5, r2
 80161ec:	3201      	adds	r2, #1
 80161ee:	7828      	ldrb	r0, [r5, #0]
 80161f0:	f7ff ff9a 	bl	8016128 <__hexdig_fun>
 80161f4:	2800      	cmp	r0, #0
 80161f6:	d1f8      	bne.n	80161ea <__gethex+0x96>
 80161f8:	1b73      	subs	r3, r6, r5
 80161fa:	009e      	lsls	r6, r3, #2
 80161fc:	e004      	b.n	8016208 <__gethex+0xb4>
 80161fe:	2400      	movs	r4, #0
 8016200:	4626      	mov	r6, r4
 8016202:	e7e1      	b.n	80161c8 <__gethex+0x74>
 8016204:	2e00      	cmp	r6, #0
 8016206:	d1f7      	bne.n	80161f8 <__gethex+0xa4>
 8016208:	782b      	ldrb	r3, [r5, #0]
 801620a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801620e:	2b50      	cmp	r3, #80	; 0x50
 8016210:	d13d      	bne.n	801628e <__gethex+0x13a>
 8016212:	786b      	ldrb	r3, [r5, #1]
 8016214:	2b2b      	cmp	r3, #43	; 0x2b
 8016216:	d02f      	beq.n	8016278 <__gethex+0x124>
 8016218:	2b2d      	cmp	r3, #45	; 0x2d
 801621a:	d031      	beq.n	8016280 <__gethex+0x12c>
 801621c:	1c69      	adds	r1, r5, #1
 801621e:	f04f 0b00 	mov.w	fp, #0
 8016222:	7808      	ldrb	r0, [r1, #0]
 8016224:	f7ff ff80 	bl	8016128 <__hexdig_fun>
 8016228:	1e42      	subs	r2, r0, #1
 801622a:	b2d2      	uxtb	r2, r2
 801622c:	2a18      	cmp	r2, #24
 801622e:	d82e      	bhi.n	801628e <__gethex+0x13a>
 8016230:	f1a0 0210 	sub.w	r2, r0, #16
 8016234:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016238:	f7ff ff76 	bl	8016128 <__hexdig_fun>
 801623c:	f100 3cff 	add.w	ip, r0, #4294967295
 8016240:	fa5f fc8c 	uxtb.w	ip, ip
 8016244:	f1bc 0f18 	cmp.w	ip, #24
 8016248:	d91d      	bls.n	8016286 <__gethex+0x132>
 801624a:	f1bb 0f00 	cmp.w	fp, #0
 801624e:	d000      	beq.n	8016252 <__gethex+0xfe>
 8016250:	4252      	negs	r2, r2
 8016252:	4416      	add	r6, r2
 8016254:	f8ca 1000 	str.w	r1, [sl]
 8016258:	b1dc      	cbz	r4, 8016292 <__gethex+0x13e>
 801625a:	9b01      	ldr	r3, [sp, #4]
 801625c:	2b00      	cmp	r3, #0
 801625e:	bf14      	ite	ne
 8016260:	f04f 0800 	movne.w	r8, #0
 8016264:	f04f 0806 	moveq.w	r8, #6
 8016268:	4640      	mov	r0, r8
 801626a:	b005      	add	sp, #20
 801626c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016270:	4645      	mov	r5, r8
 8016272:	4626      	mov	r6, r4
 8016274:	2401      	movs	r4, #1
 8016276:	e7c7      	b.n	8016208 <__gethex+0xb4>
 8016278:	f04f 0b00 	mov.w	fp, #0
 801627c:	1ca9      	adds	r1, r5, #2
 801627e:	e7d0      	b.n	8016222 <__gethex+0xce>
 8016280:	f04f 0b01 	mov.w	fp, #1
 8016284:	e7fa      	b.n	801627c <__gethex+0x128>
 8016286:	230a      	movs	r3, #10
 8016288:	fb03 0002 	mla	r0, r3, r2, r0
 801628c:	e7d0      	b.n	8016230 <__gethex+0xdc>
 801628e:	4629      	mov	r1, r5
 8016290:	e7e0      	b.n	8016254 <__gethex+0x100>
 8016292:	eba5 0308 	sub.w	r3, r5, r8
 8016296:	3b01      	subs	r3, #1
 8016298:	4621      	mov	r1, r4
 801629a:	2b07      	cmp	r3, #7
 801629c:	dc0a      	bgt.n	80162b4 <__gethex+0x160>
 801629e:	4648      	mov	r0, r9
 80162a0:	f000 fa5a 	bl	8016758 <_Balloc>
 80162a4:	4604      	mov	r4, r0
 80162a6:	b940      	cbnz	r0, 80162ba <__gethex+0x166>
 80162a8:	4b61      	ldr	r3, [pc, #388]	; (8016430 <__gethex+0x2dc>)
 80162aa:	4602      	mov	r2, r0
 80162ac:	21e4      	movs	r1, #228	; 0xe4
 80162ae:	4861      	ldr	r0, [pc, #388]	; (8016434 <__gethex+0x2e0>)
 80162b0:	f7ff f804 	bl	80152bc <__assert_func>
 80162b4:	3101      	adds	r1, #1
 80162b6:	105b      	asrs	r3, r3, #1
 80162b8:	e7ef      	b.n	801629a <__gethex+0x146>
 80162ba:	f100 0a14 	add.w	sl, r0, #20
 80162be:	2300      	movs	r3, #0
 80162c0:	495a      	ldr	r1, [pc, #360]	; (801642c <__gethex+0x2d8>)
 80162c2:	f8cd a004 	str.w	sl, [sp, #4]
 80162c6:	469b      	mov	fp, r3
 80162c8:	45a8      	cmp	r8, r5
 80162ca:	d342      	bcc.n	8016352 <__gethex+0x1fe>
 80162cc:	9801      	ldr	r0, [sp, #4]
 80162ce:	f840 bb04 	str.w	fp, [r0], #4
 80162d2:	eba0 000a 	sub.w	r0, r0, sl
 80162d6:	1080      	asrs	r0, r0, #2
 80162d8:	6120      	str	r0, [r4, #16]
 80162da:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80162de:	4658      	mov	r0, fp
 80162e0:	f000 fb2c 	bl	801693c <__hi0bits>
 80162e4:	683d      	ldr	r5, [r7, #0]
 80162e6:	eba8 0000 	sub.w	r0, r8, r0
 80162ea:	42a8      	cmp	r0, r5
 80162ec:	dd59      	ble.n	80163a2 <__gethex+0x24e>
 80162ee:	eba0 0805 	sub.w	r8, r0, r5
 80162f2:	4641      	mov	r1, r8
 80162f4:	4620      	mov	r0, r4
 80162f6:	f000 febb 	bl	8017070 <__any_on>
 80162fa:	4683      	mov	fp, r0
 80162fc:	b1b8      	cbz	r0, 801632e <__gethex+0x1da>
 80162fe:	f108 33ff 	add.w	r3, r8, #4294967295
 8016302:	1159      	asrs	r1, r3, #5
 8016304:	f003 021f 	and.w	r2, r3, #31
 8016308:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801630c:	f04f 0b01 	mov.w	fp, #1
 8016310:	fa0b f202 	lsl.w	r2, fp, r2
 8016314:	420a      	tst	r2, r1
 8016316:	d00a      	beq.n	801632e <__gethex+0x1da>
 8016318:	455b      	cmp	r3, fp
 801631a:	dd06      	ble.n	801632a <__gethex+0x1d6>
 801631c:	f1a8 0102 	sub.w	r1, r8, #2
 8016320:	4620      	mov	r0, r4
 8016322:	f000 fea5 	bl	8017070 <__any_on>
 8016326:	2800      	cmp	r0, #0
 8016328:	d138      	bne.n	801639c <__gethex+0x248>
 801632a:	f04f 0b02 	mov.w	fp, #2
 801632e:	4641      	mov	r1, r8
 8016330:	4620      	mov	r0, r4
 8016332:	f7ff fea7 	bl	8016084 <rshift>
 8016336:	4446      	add	r6, r8
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	42b3      	cmp	r3, r6
 801633c:	da41      	bge.n	80163c2 <__gethex+0x26e>
 801633e:	4621      	mov	r1, r4
 8016340:	4648      	mov	r0, r9
 8016342:	f000 fa49 	bl	80167d8 <_Bfree>
 8016346:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016348:	2300      	movs	r3, #0
 801634a:	6013      	str	r3, [r2, #0]
 801634c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8016350:	e78a      	b.n	8016268 <__gethex+0x114>
 8016352:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8016356:	2a2e      	cmp	r2, #46	; 0x2e
 8016358:	d014      	beq.n	8016384 <__gethex+0x230>
 801635a:	2b20      	cmp	r3, #32
 801635c:	d106      	bne.n	801636c <__gethex+0x218>
 801635e:	9b01      	ldr	r3, [sp, #4]
 8016360:	f843 bb04 	str.w	fp, [r3], #4
 8016364:	f04f 0b00 	mov.w	fp, #0
 8016368:	9301      	str	r3, [sp, #4]
 801636a:	465b      	mov	r3, fp
 801636c:	7828      	ldrb	r0, [r5, #0]
 801636e:	9303      	str	r3, [sp, #12]
 8016370:	f7ff feda 	bl	8016128 <__hexdig_fun>
 8016374:	9b03      	ldr	r3, [sp, #12]
 8016376:	f000 000f 	and.w	r0, r0, #15
 801637a:	4098      	lsls	r0, r3
 801637c:	ea4b 0b00 	orr.w	fp, fp, r0
 8016380:	3304      	adds	r3, #4
 8016382:	e7a1      	b.n	80162c8 <__gethex+0x174>
 8016384:	45a8      	cmp	r8, r5
 8016386:	d8e8      	bhi.n	801635a <__gethex+0x206>
 8016388:	2201      	movs	r2, #1
 801638a:	4628      	mov	r0, r5
 801638c:	9303      	str	r3, [sp, #12]
 801638e:	f7fe fe64 	bl	801505a <strncmp>
 8016392:	4926      	ldr	r1, [pc, #152]	; (801642c <__gethex+0x2d8>)
 8016394:	9b03      	ldr	r3, [sp, #12]
 8016396:	2800      	cmp	r0, #0
 8016398:	d1df      	bne.n	801635a <__gethex+0x206>
 801639a:	e795      	b.n	80162c8 <__gethex+0x174>
 801639c:	f04f 0b03 	mov.w	fp, #3
 80163a0:	e7c5      	b.n	801632e <__gethex+0x1da>
 80163a2:	da0b      	bge.n	80163bc <__gethex+0x268>
 80163a4:	eba5 0800 	sub.w	r8, r5, r0
 80163a8:	4621      	mov	r1, r4
 80163aa:	4642      	mov	r2, r8
 80163ac:	4648      	mov	r0, r9
 80163ae:	f000 fc2d 	bl	8016c0c <__lshift>
 80163b2:	eba6 0608 	sub.w	r6, r6, r8
 80163b6:	4604      	mov	r4, r0
 80163b8:	f100 0a14 	add.w	sl, r0, #20
 80163bc:	f04f 0b00 	mov.w	fp, #0
 80163c0:	e7ba      	b.n	8016338 <__gethex+0x1e4>
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	42b3      	cmp	r3, r6
 80163c6:	dd73      	ble.n	80164b0 <__gethex+0x35c>
 80163c8:	1b9e      	subs	r6, r3, r6
 80163ca:	42b5      	cmp	r5, r6
 80163cc:	dc34      	bgt.n	8016438 <__gethex+0x2e4>
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	2b02      	cmp	r3, #2
 80163d2:	d023      	beq.n	801641c <__gethex+0x2c8>
 80163d4:	2b03      	cmp	r3, #3
 80163d6:	d025      	beq.n	8016424 <__gethex+0x2d0>
 80163d8:	2b01      	cmp	r3, #1
 80163da:	d115      	bne.n	8016408 <__gethex+0x2b4>
 80163dc:	42b5      	cmp	r5, r6
 80163de:	d113      	bne.n	8016408 <__gethex+0x2b4>
 80163e0:	2d01      	cmp	r5, #1
 80163e2:	d10b      	bne.n	80163fc <__gethex+0x2a8>
 80163e4:	9a02      	ldr	r2, [sp, #8]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	6013      	str	r3, [r2, #0]
 80163ea:	2301      	movs	r3, #1
 80163ec:	6123      	str	r3, [r4, #16]
 80163ee:	f8ca 3000 	str.w	r3, [sl]
 80163f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163f4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80163f8:	601c      	str	r4, [r3, #0]
 80163fa:	e735      	b.n	8016268 <__gethex+0x114>
 80163fc:	1e69      	subs	r1, r5, #1
 80163fe:	4620      	mov	r0, r4
 8016400:	f000 fe36 	bl	8017070 <__any_on>
 8016404:	2800      	cmp	r0, #0
 8016406:	d1ed      	bne.n	80163e4 <__gethex+0x290>
 8016408:	4621      	mov	r1, r4
 801640a:	4648      	mov	r0, r9
 801640c:	f000 f9e4 	bl	80167d8 <_Bfree>
 8016410:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016412:	2300      	movs	r3, #0
 8016414:	6013      	str	r3, [r2, #0]
 8016416:	f04f 0850 	mov.w	r8, #80	; 0x50
 801641a:	e725      	b.n	8016268 <__gethex+0x114>
 801641c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801641e:	2b00      	cmp	r3, #0
 8016420:	d1f2      	bne.n	8016408 <__gethex+0x2b4>
 8016422:	e7df      	b.n	80163e4 <__gethex+0x290>
 8016424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016426:	2b00      	cmp	r3, #0
 8016428:	d1dc      	bne.n	80163e4 <__gethex+0x290>
 801642a:	e7ed      	b.n	8016408 <__gethex+0x2b4>
 801642c:	0801ad4c 	.word	0x0801ad4c
 8016430:	0801aff4 	.word	0x0801aff4
 8016434:	0801b005 	.word	0x0801b005
 8016438:	f106 38ff 	add.w	r8, r6, #4294967295
 801643c:	f1bb 0f00 	cmp.w	fp, #0
 8016440:	d133      	bne.n	80164aa <__gethex+0x356>
 8016442:	f1b8 0f00 	cmp.w	r8, #0
 8016446:	d004      	beq.n	8016452 <__gethex+0x2fe>
 8016448:	4641      	mov	r1, r8
 801644a:	4620      	mov	r0, r4
 801644c:	f000 fe10 	bl	8017070 <__any_on>
 8016450:	4683      	mov	fp, r0
 8016452:	ea4f 1268 	mov.w	r2, r8, asr #5
 8016456:	2301      	movs	r3, #1
 8016458:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801645c:	f008 081f 	and.w	r8, r8, #31
 8016460:	fa03 f308 	lsl.w	r3, r3, r8
 8016464:	4213      	tst	r3, r2
 8016466:	4631      	mov	r1, r6
 8016468:	4620      	mov	r0, r4
 801646a:	bf18      	it	ne
 801646c:	f04b 0b02 	orrne.w	fp, fp, #2
 8016470:	1bad      	subs	r5, r5, r6
 8016472:	f7ff fe07 	bl	8016084 <rshift>
 8016476:	687e      	ldr	r6, [r7, #4]
 8016478:	f04f 0802 	mov.w	r8, #2
 801647c:	f1bb 0f00 	cmp.w	fp, #0
 8016480:	d04a      	beq.n	8016518 <__gethex+0x3c4>
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	2b02      	cmp	r3, #2
 8016486:	d016      	beq.n	80164b6 <__gethex+0x362>
 8016488:	2b03      	cmp	r3, #3
 801648a:	d018      	beq.n	80164be <__gethex+0x36a>
 801648c:	2b01      	cmp	r3, #1
 801648e:	d109      	bne.n	80164a4 <__gethex+0x350>
 8016490:	f01b 0f02 	tst.w	fp, #2
 8016494:	d006      	beq.n	80164a4 <__gethex+0x350>
 8016496:	f8da 3000 	ldr.w	r3, [sl]
 801649a:	ea4b 0b03 	orr.w	fp, fp, r3
 801649e:	f01b 0f01 	tst.w	fp, #1
 80164a2:	d10f      	bne.n	80164c4 <__gethex+0x370>
 80164a4:	f048 0810 	orr.w	r8, r8, #16
 80164a8:	e036      	b.n	8016518 <__gethex+0x3c4>
 80164aa:	f04f 0b01 	mov.w	fp, #1
 80164ae:	e7d0      	b.n	8016452 <__gethex+0x2fe>
 80164b0:	f04f 0801 	mov.w	r8, #1
 80164b4:	e7e2      	b.n	801647c <__gethex+0x328>
 80164b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164b8:	f1c3 0301 	rsb	r3, r3, #1
 80164bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80164be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d0ef      	beq.n	80164a4 <__gethex+0x350>
 80164c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80164c8:	f104 0214 	add.w	r2, r4, #20
 80164cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80164d0:	9301      	str	r3, [sp, #4]
 80164d2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80164d6:	2300      	movs	r3, #0
 80164d8:	4694      	mov	ip, r2
 80164da:	f852 1b04 	ldr.w	r1, [r2], #4
 80164de:	f1b1 3fff 	cmp.w	r1, #4294967295
 80164e2:	d01e      	beq.n	8016522 <__gethex+0x3ce>
 80164e4:	3101      	adds	r1, #1
 80164e6:	f8cc 1000 	str.w	r1, [ip]
 80164ea:	f1b8 0f02 	cmp.w	r8, #2
 80164ee:	f104 0214 	add.w	r2, r4, #20
 80164f2:	d13d      	bne.n	8016570 <__gethex+0x41c>
 80164f4:	683b      	ldr	r3, [r7, #0]
 80164f6:	3b01      	subs	r3, #1
 80164f8:	42ab      	cmp	r3, r5
 80164fa:	d10b      	bne.n	8016514 <__gethex+0x3c0>
 80164fc:	1169      	asrs	r1, r5, #5
 80164fe:	2301      	movs	r3, #1
 8016500:	f005 051f 	and.w	r5, r5, #31
 8016504:	fa03 f505 	lsl.w	r5, r3, r5
 8016508:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801650c:	421d      	tst	r5, r3
 801650e:	bf18      	it	ne
 8016510:	f04f 0801 	movne.w	r8, #1
 8016514:	f048 0820 	orr.w	r8, r8, #32
 8016518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801651a:	601c      	str	r4, [r3, #0]
 801651c:	9b02      	ldr	r3, [sp, #8]
 801651e:	601e      	str	r6, [r3, #0]
 8016520:	e6a2      	b.n	8016268 <__gethex+0x114>
 8016522:	4290      	cmp	r0, r2
 8016524:	f842 3c04 	str.w	r3, [r2, #-4]
 8016528:	d8d6      	bhi.n	80164d8 <__gethex+0x384>
 801652a:	68a2      	ldr	r2, [r4, #8]
 801652c:	4593      	cmp	fp, r2
 801652e:	db17      	blt.n	8016560 <__gethex+0x40c>
 8016530:	6861      	ldr	r1, [r4, #4]
 8016532:	4648      	mov	r0, r9
 8016534:	3101      	adds	r1, #1
 8016536:	f000 f90f 	bl	8016758 <_Balloc>
 801653a:	4682      	mov	sl, r0
 801653c:	b918      	cbnz	r0, 8016546 <__gethex+0x3f2>
 801653e:	4b1b      	ldr	r3, [pc, #108]	; (80165ac <__gethex+0x458>)
 8016540:	4602      	mov	r2, r0
 8016542:	2184      	movs	r1, #132	; 0x84
 8016544:	e6b3      	b.n	80162ae <__gethex+0x15a>
 8016546:	6922      	ldr	r2, [r4, #16]
 8016548:	3202      	adds	r2, #2
 801654a:	f104 010c 	add.w	r1, r4, #12
 801654e:	0092      	lsls	r2, r2, #2
 8016550:	300c      	adds	r0, #12
 8016552:	f7fe fe96 	bl	8015282 <memcpy>
 8016556:	4621      	mov	r1, r4
 8016558:	4648      	mov	r0, r9
 801655a:	f000 f93d 	bl	80167d8 <_Bfree>
 801655e:	4654      	mov	r4, sl
 8016560:	6922      	ldr	r2, [r4, #16]
 8016562:	1c51      	adds	r1, r2, #1
 8016564:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016568:	6121      	str	r1, [r4, #16]
 801656a:	2101      	movs	r1, #1
 801656c:	6151      	str	r1, [r2, #20]
 801656e:	e7bc      	b.n	80164ea <__gethex+0x396>
 8016570:	6921      	ldr	r1, [r4, #16]
 8016572:	4559      	cmp	r1, fp
 8016574:	dd0b      	ble.n	801658e <__gethex+0x43a>
 8016576:	2101      	movs	r1, #1
 8016578:	4620      	mov	r0, r4
 801657a:	f7ff fd83 	bl	8016084 <rshift>
 801657e:	68bb      	ldr	r3, [r7, #8]
 8016580:	3601      	adds	r6, #1
 8016582:	42b3      	cmp	r3, r6
 8016584:	f6ff aedb 	blt.w	801633e <__gethex+0x1ea>
 8016588:	f04f 0801 	mov.w	r8, #1
 801658c:	e7c2      	b.n	8016514 <__gethex+0x3c0>
 801658e:	f015 051f 	ands.w	r5, r5, #31
 8016592:	d0f9      	beq.n	8016588 <__gethex+0x434>
 8016594:	9b01      	ldr	r3, [sp, #4]
 8016596:	441a      	add	r2, r3
 8016598:	f1c5 0520 	rsb	r5, r5, #32
 801659c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80165a0:	f000 f9cc 	bl	801693c <__hi0bits>
 80165a4:	42a8      	cmp	r0, r5
 80165a6:	dbe6      	blt.n	8016576 <__gethex+0x422>
 80165a8:	e7ee      	b.n	8016588 <__gethex+0x434>
 80165aa:	bf00      	nop
 80165ac:	0801aff4 	.word	0x0801aff4

080165b0 <L_shift>:
 80165b0:	f1c2 0208 	rsb	r2, r2, #8
 80165b4:	0092      	lsls	r2, r2, #2
 80165b6:	b570      	push	{r4, r5, r6, lr}
 80165b8:	f1c2 0620 	rsb	r6, r2, #32
 80165bc:	6843      	ldr	r3, [r0, #4]
 80165be:	6804      	ldr	r4, [r0, #0]
 80165c0:	fa03 f506 	lsl.w	r5, r3, r6
 80165c4:	432c      	orrs	r4, r5
 80165c6:	40d3      	lsrs	r3, r2
 80165c8:	6004      	str	r4, [r0, #0]
 80165ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80165ce:	4288      	cmp	r0, r1
 80165d0:	d3f4      	bcc.n	80165bc <L_shift+0xc>
 80165d2:	bd70      	pop	{r4, r5, r6, pc}

080165d4 <__match>:
 80165d4:	b530      	push	{r4, r5, lr}
 80165d6:	6803      	ldr	r3, [r0, #0]
 80165d8:	3301      	adds	r3, #1
 80165da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165de:	b914      	cbnz	r4, 80165e6 <__match+0x12>
 80165e0:	6003      	str	r3, [r0, #0]
 80165e2:	2001      	movs	r0, #1
 80165e4:	bd30      	pop	{r4, r5, pc}
 80165e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80165ee:	2d19      	cmp	r5, #25
 80165f0:	bf98      	it	ls
 80165f2:	3220      	addls	r2, #32
 80165f4:	42a2      	cmp	r2, r4
 80165f6:	d0f0      	beq.n	80165da <__match+0x6>
 80165f8:	2000      	movs	r0, #0
 80165fa:	e7f3      	b.n	80165e4 <__match+0x10>

080165fc <__hexnan>:
 80165fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016600:	680b      	ldr	r3, [r1, #0]
 8016602:	6801      	ldr	r1, [r0, #0]
 8016604:	115e      	asrs	r6, r3, #5
 8016606:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801660a:	f013 031f 	ands.w	r3, r3, #31
 801660e:	b087      	sub	sp, #28
 8016610:	bf18      	it	ne
 8016612:	3604      	addne	r6, #4
 8016614:	2500      	movs	r5, #0
 8016616:	1f37      	subs	r7, r6, #4
 8016618:	4682      	mov	sl, r0
 801661a:	4690      	mov	r8, r2
 801661c:	9301      	str	r3, [sp, #4]
 801661e:	f846 5c04 	str.w	r5, [r6, #-4]
 8016622:	46b9      	mov	r9, r7
 8016624:	463c      	mov	r4, r7
 8016626:	9502      	str	r5, [sp, #8]
 8016628:	46ab      	mov	fp, r5
 801662a:	784a      	ldrb	r2, [r1, #1]
 801662c:	1c4b      	adds	r3, r1, #1
 801662e:	9303      	str	r3, [sp, #12]
 8016630:	b342      	cbz	r2, 8016684 <__hexnan+0x88>
 8016632:	4610      	mov	r0, r2
 8016634:	9105      	str	r1, [sp, #20]
 8016636:	9204      	str	r2, [sp, #16]
 8016638:	f7ff fd76 	bl	8016128 <__hexdig_fun>
 801663c:	2800      	cmp	r0, #0
 801663e:	d14f      	bne.n	80166e0 <__hexnan+0xe4>
 8016640:	9a04      	ldr	r2, [sp, #16]
 8016642:	9905      	ldr	r1, [sp, #20]
 8016644:	2a20      	cmp	r2, #32
 8016646:	d818      	bhi.n	801667a <__hexnan+0x7e>
 8016648:	9b02      	ldr	r3, [sp, #8]
 801664a:	459b      	cmp	fp, r3
 801664c:	dd13      	ble.n	8016676 <__hexnan+0x7a>
 801664e:	454c      	cmp	r4, r9
 8016650:	d206      	bcs.n	8016660 <__hexnan+0x64>
 8016652:	2d07      	cmp	r5, #7
 8016654:	dc04      	bgt.n	8016660 <__hexnan+0x64>
 8016656:	462a      	mov	r2, r5
 8016658:	4649      	mov	r1, r9
 801665a:	4620      	mov	r0, r4
 801665c:	f7ff ffa8 	bl	80165b0 <L_shift>
 8016660:	4544      	cmp	r4, r8
 8016662:	d950      	bls.n	8016706 <__hexnan+0x10a>
 8016664:	2300      	movs	r3, #0
 8016666:	f1a4 0904 	sub.w	r9, r4, #4
 801666a:	f844 3c04 	str.w	r3, [r4, #-4]
 801666e:	f8cd b008 	str.w	fp, [sp, #8]
 8016672:	464c      	mov	r4, r9
 8016674:	461d      	mov	r5, r3
 8016676:	9903      	ldr	r1, [sp, #12]
 8016678:	e7d7      	b.n	801662a <__hexnan+0x2e>
 801667a:	2a29      	cmp	r2, #41	; 0x29
 801667c:	d155      	bne.n	801672a <__hexnan+0x12e>
 801667e:	3102      	adds	r1, #2
 8016680:	f8ca 1000 	str.w	r1, [sl]
 8016684:	f1bb 0f00 	cmp.w	fp, #0
 8016688:	d04f      	beq.n	801672a <__hexnan+0x12e>
 801668a:	454c      	cmp	r4, r9
 801668c:	d206      	bcs.n	801669c <__hexnan+0xa0>
 801668e:	2d07      	cmp	r5, #7
 8016690:	dc04      	bgt.n	801669c <__hexnan+0xa0>
 8016692:	462a      	mov	r2, r5
 8016694:	4649      	mov	r1, r9
 8016696:	4620      	mov	r0, r4
 8016698:	f7ff ff8a 	bl	80165b0 <L_shift>
 801669c:	4544      	cmp	r4, r8
 801669e:	d934      	bls.n	801670a <__hexnan+0x10e>
 80166a0:	f1a8 0204 	sub.w	r2, r8, #4
 80166a4:	4623      	mov	r3, r4
 80166a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80166aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80166ae:	429f      	cmp	r7, r3
 80166b0:	d2f9      	bcs.n	80166a6 <__hexnan+0xaa>
 80166b2:	1b3b      	subs	r3, r7, r4
 80166b4:	f023 0303 	bic.w	r3, r3, #3
 80166b8:	3304      	adds	r3, #4
 80166ba:	3e03      	subs	r6, #3
 80166bc:	3401      	adds	r4, #1
 80166be:	42a6      	cmp	r6, r4
 80166c0:	bf38      	it	cc
 80166c2:	2304      	movcc	r3, #4
 80166c4:	4443      	add	r3, r8
 80166c6:	2200      	movs	r2, #0
 80166c8:	f843 2b04 	str.w	r2, [r3], #4
 80166cc:	429f      	cmp	r7, r3
 80166ce:	d2fb      	bcs.n	80166c8 <__hexnan+0xcc>
 80166d0:	683b      	ldr	r3, [r7, #0]
 80166d2:	b91b      	cbnz	r3, 80166dc <__hexnan+0xe0>
 80166d4:	4547      	cmp	r7, r8
 80166d6:	d126      	bne.n	8016726 <__hexnan+0x12a>
 80166d8:	2301      	movs	r3, #1
 80166da:	603b      	str	r3, [r7, #0]
 80166dc:	2005      	movs	r0, #5
 80166de:	e025      	b.n	801672c <__hexnan+0x130>
 80166e0:	3501      	adds	r5, #1
 80166e2:	2d08      	cmp	r5, #8
 80166e4:	f10b 0b01 	add.w	fp, fp, #1
 80166e8:	dd06      	ble.n	80166f8 <__hexnan+0xfc>
 80166ea:	4544      	cmp	r4, r8
 80166ec:	d9c3      	bls.n	8016676 <__hexnan+0x7a>
 80166ee:	2300      	movs	r3, #0
 80166f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80166f4:	2501      	movs	r5, #1
 80166f6:	3c04      	subs	r4, #4
 80166f8:	6822      	ldr	r2, [r4, #0]
 80166fa:	f000 000f 	and.w	r0, r0, #15
 80166fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016702:	6020      	str	r0, [r4, #0]
 8016704:	e7b7      	b.n	8016676 <__hexnan+0x7a>
 8016706:	2508      	movs	r5, #8
 8016708:	e7b5      	b.n	8016676 <__hexnan+0x7a>
 801670a:	9b01      	ldr	r3, [sp, #4]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d0df      	beq.n	80166d0 <__hexnan+0xd4>
 8016710:	f1c3 0320 	rsb	r3, r3, #32
 8016714:	f04f 32ff 	mov.w	r2, #4294967295
 8016718:	40da      	lsrs	r2, r3
 801671a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801671e:	4013      	ands	r3, r2
 8016720:	f846 3c04 	str.w	r3, [r6, #-4]
 8016724:	e7d4      	b.n	80166d0 <__hexnan+0xd4>
 8016726:	3f04      	subs	r7, #4
 8016728:	e7d2      	b.n	80166d0 <__hexnan+0xd4>
 801672a:	2004      	movs	r0, #4
 801672c:	b007      	add	sp, #28
 801672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016732 <__ascii_mbtowc>:
 8016732:	b082      	sub	sp, #8
 8016734:	b901      	cbnz	r1, 8016738 <__ascii_mbtowc+0x6>
 8016736:	a901      	add	r1, sp, #4
 8016738:	b142      	cbz	r2, 801674c <__ascii_mbtowc+0x1a>
 801673a:	b14b      	cbz	r3, 8016750 <__ascii_mbtowc+0x1e>
 801673c:	7813      	ldrb	r3, [r2, #0]
 801673e:	600b      	str	r3, [r1, #0]
 8016740:	7812      	ldrb	r2, [r2, #0]
 8016742:	1e10      	subs	r0, r2, #0
 8016744:	bf18      	it	ne
 8016746:	2001      	movne	r0, #1
 8016748:	b002      	add	sp, #8
 801674a:	4770      	bx	lr
 801674c:	4610      	mov	r0, r2
 801674e:	e7fb      	b.n	8016748 <__ascii_mbtowc+0x16>
 8016750:	f06f 0001 	mvn.w	r0, #1
 8016754:	e7f8      	b.n	8016748 <__ascii_mbtowc+0x16>
	...

08016758 <_Balloc>:
 8016758:	b570      	push	{r4, r5, r6, lr}
 801675a:	69c6      	ldr	r6, [r0, #28]
 801675c:	4604      	mov	r4, r0
 801675e:	460d      	mov	r5, r1
 8016760:	b976      	cbnz	r6, 8016780 <_Balloc+0x28>
 8016762:	2010      	movs	r0, #16
 8016764:	f7fc fce0 	bl	8013128 <malloc>
 8016768:	4602      	mov	r2, r0
 801676a:	61e0      	str	r0, [r4, #28]
 801676c:	b920      	cbnz	r0, 8016778 <_Balloc+0x20>
 801676e:	4b18      	ldr	r3, [pc, #96]	; (80167d0 <_Balloc+0x78>)
 8016770:	4818      	ldr	r0, [pc, #96]	; (80167d4 <_Balloc+0x7c>)
 8016772:	216b      	movs	r1, #107	; 0x6b
 8016774:	f7fe fda2 	bl	80152bc <__assert_func>
 8016778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801677c:	6006      	str	r6, [r0, #0]
 801677e:	60c6      	str	r6, [r0, #12]
 8016780:	69e6      	ldr	r6, [r4, #28]
 8016782:	68f3      	ldr	r3, [r6, #12]
 8016784:	b183      	cbz	r3, 80167a8 <_Balloc+0x50>
 8016786:	69e3      	ldr	r3, [r4, #28]
 8016788:	68db      	ldr	r3, [r3, #12]
 801678a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801678e:	b9b8      	cbnz	r0, 80167c0 <_Balloc+0x68>
 8016790:	2101      	movs	r1, #1
 8016792:	fa01 f605 	lsl.w	r6, r1, r5
 8016796:	1d72      	adds	r2, r6, #5
 8016798:	0092      	lsls	r2, r2, #2
 801679a:	4620      	mov	r0, r4
 801679c:	f000 fecf 	bl	801753e <_calloc_r>
 80167a0:	b160      	cbz	r0, 80167bc <_Balloc+0x64>
 80167a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80167a6:	e00e      	b.n	80167c6 <_Balloc+0x6e>
 80167a8:	2221      	movs	r2, #33	; 0x21
 80167aa:	2104      	movs	r1, #4
 80167ac:	4620      	mov	r0, r4
 80167ae:	f000 fec6 	bl	801753e <_calloc_r>
 80167b2:	69e3      	ldr	r3, [r4, #28]
 80167b4:	60f0      	str	r0, [r6, #12]
 80167b6:	68db      	ldr	r3, [r3, #12]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d1e4      	bne.n	8016786 <_Balloc+0x2e>
 80167bc:	2000      	movs	r0, #0
 80167be:	bd70      	pop	{r4, r5, r6, pc}
 80167c0:	6802      	ldr	r2, [r0, #0]
 80167c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80167c6:	2300      	movs	r3, #0
 80167c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80167cc:	e7f7      	b.n	80167be <_Balloc+0x66>
 80167ce:	bf00      	nop
 80167d0:	0801aeda 	.word	0x0801aeda
 80167d4:	0801b065 	.word	0x0801b065

080167d8 <_Bfree>:
 80167d8:	b570      	push	{r4, r5, r6, lr}
 80167da:	69c6      	ldr	r6, [r0, #28]
 80167dc:	4605      	mov	r5, r0
 80167de:	460c      	mov	r4, r1
 80167e0:	b976      	cbnz	r6, 8016800 <_Bfree+0x28>
 80167e2:	2010      	movs	r0, #16
 80167e4:	f7fc fca0 	bl	8013128 <malloc>
 80167e8:	4602      	mov	r2, r0
 80167ea:	61e8      	str	r0, [r5, #28]
 80167ec:	b920      	cbnz	r0, 80167f8 <_Bfree+0x20>
 80167ee:	4b09      	ldr	r3, [pc, #36]	; (8016814 <_Bfree+0x3c>)
 80167f0:	4809      	ldr	r0, [pc, #36]	; (8016818 <_Bfree+0x40>)
 80167f2:	218f      	movs	r1, #143	; 0x8f
 80167f4:	f7fe fd62 	bl	80152bc <__assert_func>
 80167f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80167fc:	6006      	str	r6, [r0, #0]
 80167fe:	60c6      	str	r6, [r0, #12]
 8016800:	b13c      	cbz	r4, 8016812 <_Bfree+0x3a>
 8016802:	69eb      	ldr	r3, [r5, #28]
 8016804:	6862      	ldr	r2, [r4, #4]
 8016806:	68db      	ldr	r3, [r3, #12]
 8016808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801680c:	6021      	str	r1, [r4, #0]
 801680e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016812:	bd70      	pop	{r4, r5, r6, pc}
 8016814:	0801aeda 	.word	0x0801aeda
 8016818:	0801b065 	.word	0x0801b065

0801681c <__multadd>:
 801681c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016820:	690d      	ldr	r5, [r1, #16]
 8016822:	4607      	mov	r7, r0
 8016824:	460c      	mov	r4, r1
 8016826:	461e      	mov	r6, r3
 8016828:	f101 0c14 	add.w	ip, r1, #20
 801682c:	2000      	movs	r0, #0
 801682e:	f8dc 3000 	ldr.w	r3, [ip]
 8016832:	b299      	uxth	r1, r3
 8016834:	fb02 6101 	mla	r1, r2, r1, r6
 8016838:	0c1e      	lsrs	r6, r3, #16
 801683a:	0c0b      	lsrs	r3, r1, #16
 801683c:	fb02 3306 	mla	r3, r2, r6, r3
 8016840:	b289      	uxth	r1, r1
 8016842:	3001      	adds	r0, #1
 8016844:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016848:	4285      	cmp	r5, r0
 801684a:	f84c 1b04 	str.w	r1, [ip], #4
 801684e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016852:	dcec      	bgt.n	801682e <__multadd+0x12>
 8016854:	b30e      	cbz	r6, 801689a <__multadd+0x7e>
 8016856:	68a3      	ldr	r3, [r4, #8]
 8016858:	42ab      	cmp	r3, r5
 801685a:	dc19      	bgt.n	8016890 <__multadd+0x74>
 801685c:	6861      	ldr	r1, [r4, #4]
 801685e:	4638      	mov	r0, r7
 8016860:	3101      	adds	r1, #1
 8016862:	f7ff ff79 	bl	8016758 <_Balloc>
 8016866:	4680      	mov	r8, r0
 8016868:	b928      	cbnz	r0, 8016876 <__multadd+0x5a>
 801686a:	4602      	mov	r2, r0
 801686c:	4b0c      	ldr	r3, [pc, #48]	; (80168a0 <__multadd+0x84>)
 801686e:	480d      	ldr	r0, [pc, #52]	; (80168a4 <__multadd+0x88>)
 8016870:	21ba      	movs	r1, #186	; 0xba
 8016872:	f7fe fd23 	bl	80152bc <__assert_func>
 8016876:	6922      	ldr	r2, [r4, #16]
 8016878:	3202      	adds	r2, #2
 801687a:	f104 010c 	add.w	r1, r4, #12
 801687e:	0092      	lsls	r2, r2, #2
 8016880:	300c      	adds	r0, #12
 8016882:	f7fe fcfe 	bl	8015282 <memcpy>
 8016886:	4621      	mov	r1, r4
 8016888:	4638      	mov	r0, r7
 801688a:	f7ff ffa5 	bl	80167d8 <_Bfree>
 801688e:	4644      	mov	r4, r8
 8016890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016894:	3501      	adds	r5, #1
 8016896:	615e      	str	r6, [r3, #20]
 8016898:	6125      	str	r5, [r4, #16]
 801689a:	4620      	mov	r0, r4
 801689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168a0:	0801aff4 	.word	0x0801aff4
 80168a4:	0801b065 	.word	0x0801b065

080168a8 <__s2b>:
 80168a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168ac:	460c      	mov	r4, r1
 80168ae:	4615      	mov	r5, r2
 80168b0:	461f      	mov	r7, r3
 80168b2:	2209      	movs	r2, #9
 80168b4:	3308      	adds	r3, #8
 80168b6:	4606      	mov	r6, r0
 80168b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80168bc:	2100      	movs	r1, #0
 80168be:	2201      	movs	r2, #1
 80168c0:	429a      	cmp	r2, r3
 80168c2:	db09      	blt.n	80168d8 <__s2b+0x30>
 80168c4:	4630      	mov	r0, r6
 80168c6:	f7ff ff47 	bl	8016758 <_Balloc>
 80168ca:	b940      	cbnz	r0, 80168de <__s2b+0x36>
 80168cc:	4602      	mov	r2, r0
 80168ce:	4b19      	ldr	r3, [pc, #100]	; (8016934 <__s2b+0x8c>)
 80168d0:	4819      	ldr	r0, [pc, #100]	; (8016938 <__s2b+0x90>)
 80168d2:	21d3      	movs	r1, #211	; 0xd3
 80168d4:	f7fe fcf2 	bl	80152bc <__assert_func>
 80168d8:	0052      	lsls	r2, r2, #1
 80168da:	3101      	adds	r1, #1
 80168dc:	e7f0      	b.n	80168c0 <__s2b+0x18>
 80168de:	9b08      	ldr	r3, [sp, #32]
 80168e0:	6143      	str	r3, [r0, #20]
 80168e2:	2d09      	cmp	r5, #9
 80168e4:	f04f 0301 	mov.w	r3, #1
 80168e8:	6103      	str	r3, [r0, #16]
 80168ea:	dd16      	ble.n	801691a <__s2b+0x72>
 80168ec:	f104 0909 	add.w	r9, r4, #9
 80168f0:	46c8      	mov	r8, r9
 80168f2:	442c      	add	r4, r5
 80168f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80168f8:	4601      	mov	r1, r0
 80168fa:	3b30      	subs	r3, #48	; 0x30
 80168fc:	220a      	movs	r2, #10
 80168fe:	4630      	mov	r0, r6
 8016900:	f7ff ff8c 	bl	801681c <__multadd>
 8016904:	45a0      	cmp	r8, r4
 8016906:	d1f5      	bne.n	80168f4 <__s2b+0x4c>
 8016908:	f1a5 0408 	sub.w	r4, r5, #8
 801690c:	444c      	add	r4, r9
 801690e:	1b2d      	subs	r5, r5, r4
 8016910:	1963      	adds	r3, r4, r5
 8016912:	42bb      	cmp	r3, r7
 8016914:	db04      	blt.n	8016920 <__s2b+0x78>
 8016916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801691a:	340a      	adds	r4, #10
 801691c:	2509      	movs	r5, #9
 801691e:	e7f6      	b.n	801690e <__s2b+0x66>
 8016920:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016924:	4601      	mov	r1, r0
 8016926:	3b30      	subs	r3, #48	; 0x30
 8016928:	220a      	movs	r2, #10
 801692a:	4630      	mov	r0, r6
 801692c:	f7ff ff76 	bl	801681c <__multadd>
 8016930:	e7ee      	b.n	8016910 <__s2b+0x68>
 8016932:	bf00      	nop
 8016934:	0801aff4 	.word	0x0801aff4
 8016938:	0801b065 	.word	0x0801b065

0801693c <__hi0bits>:
 801693c:	0c03      	lsrs	r3, r0, #16
 801693e:	041b      	lsls	r3, r3, #16
 8016940:	b9d3      	cbnz	r3, 8016978 <__hi0bits+0x3c>
 8016942:	0400      	lsls	r0, r0, #16
 8016944:	2310      	movs	r3, #16
 8016946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801694a:	bf04      	itt	eq
 801694c:	0200      	lsleq	r0, r0, #8
 801694e:	3308      	addeq	r3, #8
 8016950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016954:	bf04      	itt	eq
 8016956:	0100      	lsleq	r0, r0, #4
 8016958:	3304      	addeq	r3, #4
 801695a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801695e:	bf04      	itt	eq
 8016960:	0080      	lsleq	r0, r0, #2
 8016962:	3302      	addeq	r3, #2
 8016964:	2800      	cmp	r0, #0
 8016966:	db05      	blt.n	8016974 <__hi0bits+0x38>
 8016968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801696c:	f103 0301 	add.w	r3, r3, #1
 8016970:	bf08      	it	eq
 8016972:	2320      	moveq	r3, #32
 8016974:	4618      	mov	r0, r3
 8016976:	4770      	bx	lr
 8016978:	2300      	movs	r3, #0
 801697a:	e7e4      	b.n	8016946 <__hi0bits+0xa>

0801697c <__lo0bits>:
 801697c:	6803      	ldr	r3, [r0, #0]
 801697e:	f013 0207 	ands.w	r2, r3, #7
 8016982:	d00c      	beq.n	801699e <__lo0bits+0x22>
 8016984:	07d9      	lsls	r1, r3, #31
 8016986:	d422      	bmi.n	80169ce <__lo0bits+0x52>
 8016988:	079a      	lsls	r2, r3, #30
 801698a:	bf49      	itett	mi
 801698c:	085b      	lsrmi	r3, r3, #1
 801698e:	089b      	lsrpl	r3, r3, #2
 8016990:	6003      	strmi	r3, [r0, #0]
 8016992:	2201      	movmi	r2, #1
 8016994:	bf5c      	itt	pl
 8016996:	6003      	strpl	r3, [r0, #0]
 8016998:	2202      	movpl	r2, #2
 801699a:	4610      	mov	r0, r2
 801699c:	4770      	bx	lr
 801699e:	b299      	uxth	r1, r3
 80169a0:	b909      	cbnz	r1, 80169a6 <__lo0bits+0x2a>
 80169a2:	0c1b      	lsrs	r3, r3, #16
 80169a4:	2210      	movs	r2, #16
 80169a6:	b2d9      	uxtb	r1, r3
 80169a8:	b909      	cbnz	r1, 80169ae <__lo0bits+0x32>
 80169aa:	3208      	adds	r2, #8
 80169ac:	0a1b      	lsrs	r3, r3, #8
 80169ae:	0719      	lsls	r1, r3, #28
 80169b0:	bf04      	itt	eq
 80169b2:	091b      	lsreq	r3, r3, #4
 80169b4:	3204      	addeq	r2, #4
 80169b6:	0799      	lsls	r1, r3, #30
 80169b8:	bf04      	itt	eq
 80169ba:	089b      	lsreq	r3, r3, #2
 80169bc:	3202      	addeq	r2, #2
 80169be:	07d9      	lsls	r1, r3, #31
 80169c0:	d403      	bmi.n	80169ca <__lo0bits+0x4e>
 80169c2:	085b      	lsrs	r3, r3, #1
 80169c4:	f102 0201 	add.w	r2, r2, #1
 80169c8:	d003      	beq.n	80169d2 <__lo0bits+0x56>
 80169ca:	6003      	str	r3, [r0, #0]
 80169cc:	e7e5      	b.n	801699a <__lo0bits+0x1e>
 80169ce:	2200      	movs	r2, #0
 80169d0:	e7e3      	b.n	801699a <__lo0bits+0x1e>
 80169d2:	2220      	movs	r2, #32
 80169d4:	e7e1      	b.n	801699a <__lo0bits+0x1e>
	...

080169d8 <__i2b>:
 80169d8:	b510      	push	{r4, lr}
 80169da:	460c      	mov	r4, r1
 80169dc:	2101      	movs	r1, #1
 80169de:	f7ff febb 	bl	8016758 <_Balloc>
 80169e2:	4602      	mov	r2, r0
 80169e4:	b928      	cbnz	r0, 80169f2 <__i2b+0x1a>
 80169e6:	4b05      	ldr	r3, [pc, #20]	; (80169fc <__i2b+0x24>)
 80169e8:	4805      	ldr	r0, [pc, #20]	; (8016a00 <__i2b+0x28>)
 80169ea:	f240 1145 	movw	r1, #325	; 0x145
 80169ee:	f7fe fc65 	bl	80152bc <__assert_func>
 80169f2:	2301      	movs	r3, #1
 80169f4:	6144      	str	r4, [r0, #20]
 80169f6:	6103      	str	r3, [r0, #16]
 80169f8:	bd10      	pop	{r4, pc}
 80169fa:	bf00      	nop
 80169fc:	0801aff4 	.word	0x0801aff4
 8016a00:	0801b065 	.word	0x0801b065

08016a04 <__multiply>:
 8016a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a08:	4691      	mov	r9, r2
 8016a0a:	690a      	ldr	r2, [r1, #16]
 8016a0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016a10:	429a      	cmp	r2, r3
 8016a12:	bfb8      	it	lt
 8016a14:	460b      	movlt	r3, r1
 8016a16:	460c      	mov	r4, r1
 8016a18:	bfbc      	itt	lt
 8016a1a:	464c      	movlt	r4, r9
 8016a1c:	4699      	movlt	r9, r3
 8016a1e:	6927      	ldr	r7, [r4, #16]
 8016a20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016a24:	68a3      	ldr	r3, [r4, #8]
 8016a26:	6861      	ldr	r1, [r4, #4]
 8016a28:	eb07 060a 	add.w	r6, r7, sl
 8016a2c:	42b3      	cmp	r3, r6
 8016a2e:	b085      	sub	sp, #20
 8016a30:	bfb8      	it	lt
 8016a32:	3101      	addlt	r1, #1
 8016a34:	f7ff fe90 	bl	8016758 <_Balloc>
 8016a38:	b930      	cbnz	r0, 8016a48 <__multiply+0x44>
 8016a3a:	4602      	mov	r2, r0
 8016a3c:	4b44      	ldr	r3, [pc, #272]	; (8016b50 <__multiply+0x14c>)
 8016a3e:	4845      	ldr	r0, [pc, #276]	; (8016b54 <__multiply+0x150>)
 8016a40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016a44:	f7fe fc3a 	bl	80152bc <__assert_func>
 8016a48:	f100 0514 	add.w	r5, r0, #20
 8016a4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016a50:	462b      	mov	r3, r5
 8016a52:	2200      	movs	r2, #0
 8016a54:	4543      	cmp	r3, r8
 8016a56:	d321      	bcc.n	8016a9c <__multiply+0x98>
 8016a58:	f104 0314 	add.w	r3, r4, #20
 8016a5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016a60:	f109 0314 	add.w	r3, r9, #20
 8016a64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016a68:	9202      	str	r2, [sp, #8]
 8016a6a:	1b3a      	subs	r2, r7, r4
 8016a6c:	3a15      	subs	r2, #21
 8016a6e:	f022 0203 	bic.w	r2, r2, #3
 8016a72:	3204      	adds	r2, #4
 8016a74:	f104 0115 	add.w	r1, r4, #21
 8016a78:	428f      	cmp	r7, r1
 8016a7a:	bf38      	it	cc
 8016a7c:	2204      	movcc	r2, #4
 8016a7e:	9201      	str	r2, [sp, #4]
 8016a80:	9a02      	ldr	r2, [sp, #8]
 8016a82:	9303      	str	r3, [sp, #12]
 8016a84:	429a      	cmp	r2, r3
 8016a86:	d80c      	bhi.n	8016aa2 <__multiply+0x9e>
 8016a88:	2e00      	cmp	r6, #0
 8016a8a:	dd03      	ble.n	8016a94 <__multiply+0x90>
 8016a8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d05b      	beq.n	8016b4c <__multiply+0x148>
 8016a94:	6106      	str	r6, [r0, #16]
 8016a96:	b005      	add	sp, #20
 8016a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a9c:	f843 2b04 	str.w	r2, [r3], #4
 8016aa0:	e7d8      	b.n	8016a54 <__multiply+0x50>
 8016aa2:	f8b3 a000 	ldrh.w	sl, [r3]
 8016aa6:	f1ba 0f00 	cmp.w	sl, #0
 8016aaa:	d024      	beq.n	8016af6 <__multiply+0xf2>
 8016aac:	f104 0e14 	add.w	lr, r4, #20
 8016ab0:	46a9      	mov	r9, r5
 8016ab2:	f04f 0c00 	mov.w	ip, #0
 8016ab6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016aba:	f8d9 1000 	ldr.w	r1, [r9]
 8016abe:	fa1f fb82 	uxth.w	fp, r2
 8016ac2:	b289      	uxth	r1, r1
 8016ac4:	fb0a 110b 	mla	r1, sl, fp, r1
 8016ac8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016acc:	f8d9 2000 	ldr.w	r2, [r9]
 8016ad0:	4461      	add	r1, ip
 8016ad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016ad6:	fb0a c20b 	mla	r2, sl, fp, ip
 8016ada:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016ade:	b289      	uxth	r1, r1
 8016ae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016ae4:	4577      	cmp	r7, lr
 8016ae6:	f849 1b04 	str.w	r1, [r9], #4
 8016aea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016aee:	d8e2      	bhi.n	8016ab6 <__multiply+0xb2>
 8016af0:	9a01      	ldr	r2, [sp, #4]
 8016af2:	f845 c002 	str.w	ip, [r5, r2]
 8016af6:	9a03      	ldr	r2, [sp, #12]
 8016af8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016afc:	3304      	adds	r3, #4
 8016afe:	f1b9 0f00 	cmp.w	r9, #0
 8016b02:	d021      	beq.n	8016b48 <__multiply+0x144>
 8016b04:	6829      	ldr	r1, [r5, #0]
 8016b06:	f104 0c14 	add.w	ip, r4, #20
 8016b0a:	46ae      	mov	lr, r5
 8016b0c:	f04f 0a00 	mov.w	sl, #0
 8016b10:	f8bc b000 	ldrh.w	fp, [ip]
 8016b14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016b18:	fb09 220b 	mla	r2, r9, fp, r2
 8016b1c:	4452      	add	r2, sl
 8016b1e:	b289      	uxth	r1, r1
 8016b20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016b24:	f84e 1b04 	str.w	r1, [lr], #4
 8016b28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016b2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016b30:	f8be 1000 	ldrh.w	r1, [lr]
 8016b34:	fb09 110a 	mla	r1, r9, sl, r1
 8016b38:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016b3c:	4567      	cmp	r7, ip
 8016b3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016b42:	d8e5      	bhi.n	8016b10 <__multiply+0x10c>
 8016b44:	9a01      	ldr	r2, [sp, #4]
 8016b46:	50a9      	str	r1, [r5, r2]
 8016b48:	3504      	adds	r5, #4
 8016b4a:	e799      	b.n	8016a80 <__multiply+0x7c>
 8016b4c:	3e01      	subs	r6, #1
 8016b4e:	e79b      	b.n	8016a88 <__multiply+0x84>
 8016b50:	0801aff4 	.word	0x0801aff4
 8016b54:	0801b065 	.word	0x0801b065

08016b58 <__pow5mult>:
 8016b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b5c:	4615      	mov	r5, r2
 8016b5e:	f012 0203 	ands.w	r2, r2, #3
 8016b62:	4606      	mov	r6, r0
 8016b64:	460f      	mov	r7, r1
 8016b66:	d007      	beq.n	8016b78 <__pow5mult+0x20>
 8016b68:	4c25      	ldr	r4, [pc, #148]	; (8016c00 <__pow5mult+0xa8>)
 8016b6a:	3a01      	subs	r2, #1
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016b72:	f7ff fe53 	bl	801681c <__multadd>
 8016b76:	4607      	mov	r7, r0
 8016b78:	10ad      	asrs	r5, r5, #2
 8016b7a:	d03d      	beq.n	8016bf8 <__pow5mult+0xa0>
 8016b7c:	69f4      	ldr	r4, [r6, #28]
 8016b7e:	b97c      	cbnz	r4, 8016ba0 <__pow5mult+0x48>
 8016b80:	2010      	movs	r0, #16
 8016b82:	f7fc fad1 	bl	8013128 <malloc>
 8016b86:	4602      	mov	r2, r0
 8016b88:	61f0      	str	r0, [r6, #28]
 8016b8a:	b928      	cbnz	r0, 8016b98 <__pow5mult+0x40>
 8016b8c:	4b1d      	ldr	r3, [pc, #116]	; (8016c04 <__pow5mult+0xac>)
 8016b8e:	481e      	ldr	r0, [pc, #120]	; (8016c08 <__pow5mult+0xb0>)
 8016b90:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016b94:	f7fe fb92 	bl	80152bc <__assert_func>
 8016b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016b9c:	6004      	str	r4, [r0, #0]
 8016b9e:	60c4      	str	r4, [r0, #12]
 8016ba0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016ba8:	b94c      	cbnz	r4, 8016bbe <__pow5mult+0x66>
 8016baa:	f240 2171 	movw	r1, #625	; 0x271
 8016bae:	4630      	mov	r0, r6
 8016bb0:	f7ff ff12 	bl	80169d8 <__i2b>
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8016bba:	4604      	mov	r4, r0
 8016bbc:	6003      	str	r3, [r0, #0]
 8016bbe:	f04f 0900 	mov.w	r9, #0
 8016bc2:	07eb      	lsls	r3, r5, #31
 8016bc4:	d50a      	bpl.n	8016bdc <__pow5mult+0x84>
 8016bc6:	4639      	mov	r1, r7
 8016bc8:	4622      	mov	r2, r4
 8016bca:	4630      	mov	r0, r6
 8016bcc:	f7ff ff1a 	bl	8016a04 <__multiply>
 8016bd0:	4639      	mov	r1, r7
 8016bd2:	4680      	mov	r8, r0
 8016bd4:	4630      	mov	r0, r6
 8016bd6:	f7ff fdff 	bl	80167d8 <_Bfree>
 8016bda:	4647      	mov	r7, r8
 8016bdc:	106d      	asrs	r5, r5, #1
 8016bde:	d00b      	beq.n	8016bf8 <__pow5mult+0xa0>
 8016be0:	6820      	ldr	r0, [r4, #0]
 8016be2:	b938      	cbnz	r0, 8016bf4 <__pow5mult+0x9c>
 8016be4:	4622      	mov	r2, r4
 8016be6:	4621      	mov	r1, r4
 8016be8:	4630      	mov	r0, r6
 8016bea:	f7ff ff0b 	bl	8016a04 <__multiply>
 8016bee:	6020      	str	r0, [r4, #0]
 8016bf0:	f8c0 9000 	str.w	r9, [r0]
 8016bf4:	4604      	mov	r4, r0
 8016bf6:	e7e4      	b.n	8016bc2 <__pow5mult+0x6a>
 8016bf8:	4638      	mov	r0, r7
 8016bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bfe:	bf00      	nop
 8016c00:	0801b1b0 	.word	0x0801b1b0
 8016c04:	0801aeda 	.word	0x0801aeda
 8016c08:	0801b065 	.word	0x0801b065

08016c0c <__lshift>:
 8016c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c10:	460c      	mov	r4, r1
 8016c12:	6849      	ldr	r1, [r1, #4]
 8016c14:	6923      	ldr	r3, [r4, #16]
 8016c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016c1a:	68a3      	ldr	r3, [r4, #8]
 8016c1c:	4607      	mov	r7, r0
 8016c1e:	4691      	mov	r9, r2
 8016c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016c24:	f108 0601 	add.w	r6, r8, #1
 8016c28:	42b3      	cmp	r3, r6
 8016c2a:	db0b      	blt.n	8016c44 <__lshift+0x38>
 8016c2c:	4638      	mov	r0, r7
 8016c2e:	f7ff fd93 	bl	8016758 <_Balloc>
 8016c32:	4605      	mov	r5, r0
 8016c34:	b948      	cbnz	r0, 8016c4a <__lshift+0x3e>
 8016c36:	4602      	mov	r2, r0
 8016c38:	4b28      	ldr	r3, [pc, #160]	; (8016cdc <__lshift+0xd0>)
 8016c3a:	4829      	ldr	r0, [pc, #164]	; (8016ce0 <__lshift+0xd4>)
 8016c3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016c40:	f7fe fb3c 	bl	80152bc <__assert_func>
 8016c44:	3101      	adds	r1, #1
 8016c46:	005b      	lsls	r3, r3, #1
 8016c48:	e7ee      	b.n	8016c28 <__lshift+0x1c>
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	f100 0114 	add.w	r1, r0, #20
 8016c50:	f100 0210 	add.w	r2, r0, #16
 8016c54:	4618      	mov	r0, r3
 8016c56:	4553      	cmp	r3, sl
 8016c58:	db33      	blt.n	8016cc2 <__lshift+0xb6>
 8016c5a:	6920      	ldr	r0, [r4, #16]
 8016c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016c60:	f104 0314 	add.w	r3, r4, #20
 8016c64:	f019 091f 	ands.w	r9, r9, #31
 8016c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016c6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016c70:	d02b      	beq.n	8016cca <__lshift+0xbe>
 8016c72:	f1c9 0e20 	rsb	lr, r9, #32
 8016c76:	468a      	mov	sl, r1
 8016c78:	2200      	movs	r2, #0
 8016c7a:	6818      	ldr	r0, [r3, #0]
 8016c7c:	fa00 f009 	lsl.w	r0, r0, r9
 8016c80:	4310      	orrs	r0, r2
 8016c82:	f84a 0b04 	str.w	r0, [sl], #4
 8016c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c8a:	459c      	cmp	ip, r3
 8016c8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016c90:	d8f3      	bhi.n	8016c7a <__lshift+0x6e>
 8016c92:	ebac 0304 	sub.w	r3, ip, r4
 8016c96:	3b15      	subs	r3, #21
 8016c98:	f023 0303 	bic.w	r3, r3, #3
 8016c9c:	3304      	adds	r3, #4
 8016c9e:	f104 0015 	add.w	r0, r4, #21
 8016ca2:	4584      	cmp	ip, r0
 8016ca4:	bf38      	it	cc
 8016ca6:	2304      	movcc	r3, #4
 8016ca8:	50ca      	str	r2, [r1, r3]
 8016caa:	b10a      	cbz	r2, 8016cb0 <__lshift+0xa4>
 8016cac:	f108 0602 	add.w	r6, r8, #2
 8016cb0:	3e01      	subs	r6, #1
 8016cb2:	4638      	mov	r0, r7
 8016cb4:	612e      	str	r6, [r5, #16]
 8016cb6:	4621      	mov	r1, r4
 8016cb8:	f7ff fd8e 	bl	80167d8 <_Bfree>
 8016cbc:	4628      	mov	r0, r5
 8016cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8016cc6:	3301      	adds	r3, #1
 8016cc8:	e7c5      	b.n	8016c56 <__lshift+0x4a>
 8016cca:	3904      	subs	r1, #4
 8016ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8016cd4:	459c      	cmp	ip, r3
 8016cd6:	d8f9      	bhi.n	8016ccc <__lshift+0xc0>
 8016cd8:	e7ea      	b.n	8016cb0 <__lshift+0xa4>
 8016cda:	bf00      	nop
 8016cdc:	0801aff4 	.word	0x0801aff4
 8016ce0:	0801b065 	.word	0x0801b065

08016ce4 <__mcmp>:
 8016ce4:	b530      	push	{r4, r5, lr}
 8016ce6:	6902      	ldr	r2, [r0, #16]
 8016ce8:	690c      	ldr	r4, [r1, #16]
 8016cea:	1b12      	subs	r2, r2, r4
 8016cec:	d10e      	bne.n	8016d0c <__mcmp+0x28>
 8016cee:	f100 0314 	add.w	r3, r0, #20
 8016cf2:	3114      	adds	r1, #20
 8016cf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016cf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016cfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016d00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016d04:	42a5      	cmp	r5, r4
 8016d06:	d003      	beq.n	8016d10 <__mcmp+0x2c>
 8016d08:	d305      	bcc.n	8016d16 <__mcmp+0x32>
 8016d0a:	2201      	movs	r2, #1
 8016d0c:	4610      	mov	r0, r2
 8016d0e:	bd30      	pop	{r4, r5, pc}
 8016d10:	4283      	cmp	r3, r0
 8016d12:	d3f3      	bcc.n	8016cfc <__mcmp+0x18>
 8016d14:	e7fa      	b.n	8016d0c <__mcmp+0x28>
 8016d16:	f04f 32ff 	mov.w	r2, #4294967295
 8016d1a:	e7f7      	b.n	8016d0c <__mcmp+0x28>

08016d1c <__mdiff>:
 8016d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d20:	460c      	mov	r4, r1
 8016d22:	4606      	mov	r6, r0
 8016d24:	4611      	mov	r1, r2
 8016d26:	4620      	mov	r0, r4
 8016d28:	4690      	mov	r8, r2
 8016d2a:	f7ff ffdb 	bl	8016ce4 <__mcmp>
 8016d2e:	1e05      	subs	r5, r0, #0
 8016d30:	d110      	bne.n	8016d54 <__mdiff+0x38>
 8016d32:	4629      	mov	r1, r5
 8016d34:	4630      	mov	r0, r6
 8016d36:	f7ff fd0f 	bl	8016758 <_Balloc>
 8016d3a:	b930      	cbnz	r0, 8016d4a <__mdiff+0x2e>
 8016d3c:	4b3a      	ldr	r3, [pc, #232]	; (8016e28 <__mdiff+0x10c>)
 8016d3e:	4602      	mov	r2, r0
 8016d40:	f240 2137 	movw	r1, #567	; 0x237
 8016d44:	4839      	ldr	r0, [pc, #228]	; (8016e2c <__mdiff+0x110>)
 8016d46:	f7fe fab9 	bl	80152bc <__assert_func>
 8016d4a:	2301      	movs	r3, #1
 8016d4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016d50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d54:	bfa4      	itt	ge
 8016d56:	4643      	movge	r3, r8
 8016d58:	46a0      	movge	r8, r4
 8016d5a:	4630      	mov	r0, r6
 8016d5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016d60:	bfa6      	itte	ge
 8016d62:	461c      	movge	r4, r3
 8016d64:	2500      	movge	r5, #0
 8016d66:	2501      	movlt	r5, #1
 8016d68:	f7ff fcf6 	bl	8016758 <_Balloc>
 8016d6c:	b920      	cbnz	r0, 8016d78 <__mdiff+0x5c>
 8016d6e:	4b2e      	ldr	r3, [pc, #184]	; (8016e28 <__mdiff+0x10c>)
 8016d70:	4602      	mov	r2, r0
 8016d72:	f240 2145 	movw	r1, #581	; 0x245
 8016d76:	e7e5      	b.n	8016d44 <__mdiff+0x28>
 8016d78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016d7c:	6926      	ldr	r6, [r4, #16]
 8016d7e:	60c5      	str	r5, [r0, #12]
 8016d80:	f104 0914 	add.w	r9, r4, #20
 8016d84:	f108 0514 	add.w	r5, r8, #20
 8016d88:	f100 0e14 	add.w	lr, r0, #20
 8016d8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016d90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016d94:	f108 0210 	add.w	r2, r8, #16
 8016d98:	46f2      	mov	sl, lr
 8016d9a:	2100      	movs	r1, #0
 8016d9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8016da0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016da4:	fa11 f88b 	uxtah	r8, r1, fp
 8016da8:	b299      	uxth	r1, r3
 8016daa:	0c1b      	lsrs	r3, r3, #16
 8016dac:	eba8 0801 	sub.w	r8, r8, r1
 8016db0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016db4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016db8:	fa1f f888 	uxth.w	r8, r8
 8016dbc:	1419      	asrs	r1, r3, #16
 8016dbe:	454e      	cmp	r6, r9
 8016dc0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016dc4:	f84a 3b04 	str.w	r3, [sl], #4
 8016dc8:	d8e8      	bhi.n	8016d9c <__mdiff+0x80>
 8016dca:	1b33      	subs	r3, r6, r4
 8016dcc:	3b15      	subs	r3, #21
 8016dce:	f023 0303 	bic.w	r3, r3, #3
 8016dd2:	3304      	adds	r3, #4
 8016dd4:	3415      	adds	r4, #21
 8016dd6:	42a6      	cmp	r6, r4
 8016dd8:	bf38      	it	cc
 8016dda:	2304      	movcc	r3, #4
 8016ddc:	441d      	add	r5, r3
 8016dde:	4473      	add	r3, lr
 8016de0:	469e      	mov	lr, r3
 8016de2:	462e      	mov	r6, r5
 8016de4:	4566      	cmp	r6, ip
 8016de6:	d30e      	bcc.n	8016e06 <__mdiff+0xea>
 8016de8:	f10c 0203 	add.w	r2, ip, #3
 8016dec:	1b52      	subs	r2, r2, r5
 8016dee:	f022 0203 	bic.w	r2, r2, #3
 8016df2:	3d03      	subs	r5, #3
 8016df4:	45ac      	cmp	ip, r5
 8016df6:	bf38      	it	cc
 8016df8:	2200      	movcc	r2, #0
 8016dfa:	4413      	add	r3, r2
 8016dfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016e00:	b17a      	cbz	r2, 8016e22 <__mdiff+0x106>
 8016e02:	6107      	str	r7, [r0, #16]
 8016e04:	e7a4      	b.n	8016d50 <__mdiff+0x34>
 8016e06:	f856 8b04 	ldr.w	r8, [r6], #4
 8016e0a:	fa11 f288 	uxtah	r2, r1, r8
 8016e0e:	1414      	asrs	r4, r2, #16
 8016e10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016e14:	b292      	uxth	r2, r2
 8016e16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016e1a:	f84e 2b04 	str.w	r2, [lr], #4
 8016e1e:	1421      	asrs	r1, r4, #16
 8016e20:	e7e0      	b.n	8016de4 <__mdiff+0xc8>
 8016e22:	3f01      	subs	r7, #1
 8016e24:	e7ea      	b.n	8016dfc <__mdiff+0xe0>
 8016e26:	bf00      	nop
 8016e28:	0801aff4 	.word	0x0801aff4
 8016e2c:	0801b065 	.word	0x0801b065

08016e30 <__ulp>:
 8016e30:	b082      	sub	sp, #8
 8016e32:	ed8d 0b00 	vstr	d0, [sp]
 8016e36:	9a01      	ldr	r2, [sp, #4]
 8016e38:	4b0f      	ldr	r3, [pc, #60]	; (8016e78 <__ulp+0x48>)
 8016e3a:	4013      	ands	r3, r2
 8016e3c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	dc08      	bgt.n	8016e56 <__ulp+0x26>
 8016e44:	425b      	negs	r3, r3
 8016e46:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8016e4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016e4e:	da04      	bge.n	8016e5a <__ulp+0x2a>
 8016e50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016e54:	4113      	asrs	r3, r2
 8016e56:	2200      	movs	r2, #0
 8016e58:	e008      	b.n	8016e6c <__ulp+0x3c>
 8016e5a:	f1a2 0314 	sub.w	r3, r2, #20
 8016e5e:	2b1e      	cmp	r3, #30
 8016e60:	bfda      	itte	le
 8016e62:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8016e66:	40da      	lsrle	r2, r3
 8016e68:	2201      	movgt	r2, #1
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	4619      	mov	r1, r3
 8016e6e:	4610      	mov	r0, r2
 8016e70:	ec41 0b10 	vmov	d0, r0, r1
 8016e74:	b002      	add	sp, #8
 8016e76:	4770      	bx	lr
 8016e78:	7ff00000 	.word	0x7ff00000

08016e7c <__b2d>:
 8016e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e80:	6906      	ldr	r6, [r0, #16]
 8016e82:	f100 0814 	add.w	r8, r0, #20
 8016e86:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016e8a:	1f37      	subs	r7, r6, #4
 8016e8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016e90:	4610      	mov	r0, r2
 8016e92:	f7ff fd53 	bl	801693c <__hi0bits>
 8016e96:	f1c0 0320 	rsb	r3, r0, #32
 8016e9a:	280a      	cmp	r0, #10
 8016e9c:	600b      	str	r3, [r1, #0]
 8016e9e:	491b      	ldr	r1, [pc, #108]	; (8016f0c <__b2d+0x90>)
 8016ea0:	dc15      	bgt.n	8016ece <__b2d+0x52>
 8016ea2:	f1c0 0c0b 	rsb	ip, r0, #11
 8016ea6:	fa22 f30c 	lsr.w	r3, r2, ip
 8016eaa:	45b8      	cmp	r8, r7
 8016eac:	ea43 0501 	orr.w	r5, r3, r1
 8016eb0:	bf34      	ite	cc
 8016eb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016eb6:	2300      	movcs	r3, #0
 8016eb8:	3015      	adds	r0, #21
 8016eba:	fa02 f000 	lsl.w	r0, r2, r0
 8016ebe:	fa23 f30c 	lsr.w	r3, r3, ip
 8016ec2:	4303      	orrs	r3, r0
 8016ec4:	461c      	mov	r4, r3
 8016ec6:	ec45 4b10 	vmov	d0, r4, r5
 8016eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ece:	45b8      	cmp	r8, r7
 8016ed0:	bf3a      	itte	cc
 8016ed2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016ed6:	f1a6 0708 	subcc.w	r7, r6, #8
 8016eda:	2300      	movcs	r3, #0
 8016edc:	380b      	subs	r0, #11
 8016ede:	d012      	beq.n	8016f06 <__b2d+0x8a>
 8016ee0:	f1c0 0120 	rsb	r1, r0, #32
 8016ee4:	fa23 f401 	lsr.w	r4, r3, r1
 8016ee8:	4082      	lsls	r2, r0
 8016eea:	4322      	orrs	r2, r4
 8016eec:	4547      	cmp	r7, r8
 8016eee:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8016ef2:	bf8c      	ite	hi
 8016ef4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016ef8:	2200      	movls	r2, #0
 8016efa:	4083      	lsls	r3, r0
 8016efc:	40ca      	lsrs	r2, r1
 8016efe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016f02:	4313      	orrs	r3, r2
 8016f04:	e7de      	b.n	8016ec4 <__b2d+0x48>
 8016f06:	ea42 0501 	orr.w	r5, r2, r1
 8016f0a:	e7db      	b.n	8016ec4 <__b2d+0x48>
 8016f0c:	3ff00000 	.word	0x3ff00000

08016f10 <__d2b>:
 8016f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016f14:	460f      	mov	r7, r1
 8016f16:	2101      	movs	r1, #1
 8016f18:	ec59 8b10 	vmov	r8, r9, d0
 8016f1c:	4616      	mov	r6, r2
 8016f1e:	f7ff fc1b 	bl	8016758 <_Balloc>
 8016f22:	4604      	mov	r4, r0
 8016f24:	b930      	cbnz	r0, 8016f34 <__d2b+0x24>
 8016f26:	4602      	mov	r2, r0
 8016f28:	4b24      	ldr	r3, [pc, #144]	; (8016fbc <__d2b+0xac>)
 8016f2a:	4825      	ldr	r0, [pc, #148]	; (8016fc0 <__d2b+0xb0>)
 8016f2c:	f240 310f 	movw	r1, #783	; 0x30f
 8016f30:	f7fe f9c4 	bl	80152bc <__assert_func>
 8016f34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f3c:	bb2d      	cbnz	r5, 8016f8a <__d2b+0x7a>
 8016f3e:	9301      	str	r3, [sp, #4]
 8016f40:	f1b8 0300 	subs.w	r3, r8, #0
 8016f44:	d026      	beq.n	8016f94 <__d2b+0x84>
 8016f46:	4668      	mov	r0, sp
 8016f48:	9300      	str	r3, [sp, #0]
 8016f4a:	f7ff fd17 	bl	801697c <__lo0bits>
 8016f4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016f52:	b1e8      	cbz	r0, 8016f90 <__d2b+0x80>
 8016f54:	f1c0 0320 	rsb	r3, r0, #32
 8016f58:	fa02 f303 	lsl.w	r3, r2, r3
 8016f5c:	430b      	orrs	r3, r1
 8016f5e:	40c2      	lsrs	r2, r0
 8016f60:	6163      	str	r3, [r4, #20]
 8016f62:	9201      	str	r2, [sp, #4]
 8016f64:	9b01      	ldr	r3, [sp, #4]
 8016f66:	61a3      	str	r3, [r4, #24]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	bf14      	ite	ne
 8016f6c:	2202      	movne	r2, #2
 8016f6e:	2201      	moveq	r2, #1
 8016f70:	6122      	str	r2, [r4, #16]
 8016f72:	b1bd      	cbz	r5, 8016fa4 <__d2b+0x94>
 8016f74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016f78:	4405      	add	r5, r0
 8016f7a:	603d      	str	r5, [r7, #0]
 8016f7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016f80:	6030      	str	r0, [r6, #0]
 8016f82:	4620      	mov	r0, r4
 8016f84:	b003      	add	sp, #12
 8016f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016f8e:	e7d6      	b.n	8016f3e <__d2b+0x2e>
 8016f90:	6161      	str	r1, [r4, #20]
 8016f92:	e7e7      	b.n	8016f64 <__d2b+0x54>
 8016f94:	a801      	add	r0, sp, #4
 8016f96:	f7ff fcf1 	bl	801697c <__lo0bits>
 8016f9a:	9b01      	ldr	r3, [sp, #4]
 8016f9c:	6163      	str	r3, [r4, #20]
 8016f9e:	3020      	adds	r0, #32
 8016fa0:	2201      	movs	r2, #1
 8016fa2:	e7e5      	b.n	8016f70 <__d2b+0x60>
 8016fa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016fa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016fac:	6038      	str	r0, [r7, #0]
 8016fae:	6918      	ldr	r0, [r3, #16]
 8016fb0:	f7ff fcc4 	bl	801693c <__hi0bits>
 8016fb4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016fb8:	e7e2      	b.n	8016f80 <__d2b+0x70>
 8016fba:	bf00      	nop
 8016fbc:	0801aff4 	.word	0x0801aff4
 8016fc0:	0801b065 	.word	0x0801b065

08016fc4 <__ratio>:
 8016fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc8:	4688      	mov	r8, r1
 8016fca:	4669      	mov	r1, sp
 8016fcc:	4681      	mov	r9, r0
 8016fce:	f7ff ff55 	bl	8016e7c <__b2d>
 8016fd2:	a901      	add	r1, sp, #4
 8016fd4:	4640      	mov	r0, r8
 8016fd6:	ec55 4b10 	vmov	r4, r5, d0
 8016fda:	f7ff ff4f 	bl	8016e7c <__b2d>
 8016fde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016fe2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016fe6:	eba3 0c02 	sub.w	ip, r3, r2
 8016fea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016fee:	1a9b      	subs	r3, r3, r2
 8016ff0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016ff4:	ec51 0b10 	vmov	r0, r1, d0
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	bfd6      	itet	le
 8016ffc:	460a      	movle	r2, r1
 8016ffe:	462a      	movgt	r2, r5
 8017000:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017004:	468b      	mov	fp, r1
 8017006:	462f      	mov	r7, r5
 8017008:	bfd4      	ite	le
 801700a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801700e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017012:	4620      	mov	r0, r4
 8017014:	ee10 2a10 	vmov	r2, s0
 8017018:	465b      	mov	r3, fp
 801701a:	4639      	mov	r1, r7
 801701c:	f7e9 fc16 	bl	800084c <__aeabi_ddiv>
 8017020:	ec41 0b10 	vmov	d0, r0, r1
 8017024:	b003      	add	sp, #12
 8017026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801702a <__copybits>:
 801702a:	3901      	subs	r1, #1
 801702c:	b570      	push	{r4, r5, r6, lr}
 801702e:	1149      	asrs	r1, r1, #5
 8017030:	6914      	ldr	r4, [r2, #16]
 8017032:	3101      	adds	r1, #1
 8017034:	f102 0314 	add.w	r3, r2, #20
 8017038:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801703c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017040:	1f05      	subs	r5, r0, #4
 8017042:	42a3      	cmp	r3, r4
 8017044:	d30c      	bcc.n	8017060 <__copybits+0x36>
 8017046:	1aa3      	subs	r3, r4, r2
 8017048:	3b11      	subs	r3, #17
 801704a:	f023 0303 	bic.w	r3, r3, #3
 801704e:	3211      	adds	r2, #17
 8017050:	42a2      	cmp	r2, r4
 8017052:	bf88      	it	hi
 8017054:	2300      	movhi	r3, #0
 8017056:	4418      	add	r0, r3
 8017058:	2300      	movs	r3, #0
 801705a:	4288      	cmp	r0, r1
 801705c:	d305      	bcc.n	801706a <__copybits+0x40>
 801705e:	bd70      	pop	{r4, r5, r6, pc}
 8017060:	f853 6b04 	ldr.w	r6, [r3], #4
 8017064:	f845 6f04 	str.w	r6, [r5, #4]!
 8017068:	e7eb      	b.n	8017042 <__copybits+0x18>
 801706a:	f840 3b04 	str.w	r3, [r0], #4
 801706e:	e7f4      	b.n	801705a <__copybits+0x30>

08017070 <__any_on>:
 8017070:	f100 0214 	add.w	r2, r0, #20
 8017074:	6900      	ldr	r0, [r0, #16]
 8017076:	114b      	asrs	r3, r1, #5
 8017078:	4298      	cmp	r0, r3
 801707a:	b510      	push	{r4, lr}
 801707c:	db11      	blt.n	80170a2 <__any_on+0x32>
 801707e:	dd0a      	ble.n	8017096 <__any_on+0x26>
 8017080:	f011 011f 	ands.w	r1, r1, #31
 8017084:	d007      	beq.n	8017096 <__any_on+0x26>
 8017086:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801708a:	fa24 f001 	lsr.w	r0, r4, r1
 801708e:	fa00 f101 	lsl.w	r1, r0, r1
 8017092:	428c      	cmp	r4, r1
 8017094:	d10b      	bne.n	80170ae <__any_on+0x3e>
 8017096:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801709a:	4293      	cmp	r3, r2
 801709c:	d803      	bhi.n	80170a6 <__any_on+0x36>
 801709e:	2000      	movs	r0, #0
 80170a0:	bd10      	pop	{r4, pc}
 80170a2:	4603      	mov	r3, r0
 80170a4:	e7f7      	b.n	8017096 <__any_on+0x26>
 80170a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80170aa:	2900      	cmp	r1, #0
 80170ac:	d0f5      	beq.n	801709a <__any_on+0x2a>
 80170ae:	2001      	movs	r0, #1
 80170b0:	e7f6      	b.n	80170a0 <__any_on+0x30>

080170b2 <__ascii_wctomb>:
 80170b2:	b149      	cbz	r1, 80170c8 <__ascii_wctomb+0x16>
 80170b4:	2aff      	cmp	r2, #255	; 0xff
 80170b6:	bf85      	ittet	hi
 80170b8:	238a      	movhi	r3, #138	; 0x8a
 80170ba:	6003      	strhi	r3, [r0, #0]
 80170bc:	700a      	strbls	r2, [r1, #0]
 80170be:	f04f 30ff 	movhi.w	r0, #4294967295
 80170c2:	bf98      	it	ls
 80170c4:	2001      	movls	r0, #1
 80170c6:	4770      	bx	lr
 80170c8:	4608      	mov	r0, r1
 80170ca:	4770      	bx	lr

080170cc <__ssputs_r>:
 80170cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170d0:	688e      	ldr	r6, [r1, #8]
 80170d2:	461f      	mov	r7, r3
 80170d4:	42be      	cmp	r6, r7
 80170d6:	680b      	ldr	r3, [r1, #0]
 80170d8:	4682      	mov	sl, r0
 80170da:	460c      	mov	r4, r1
 80170dc:	4690      	mov	r8, r2
 80170de:	d82c      	bhi.n	801713a <__ssputs_r+0x6e>
 80170e0:	898a      	ldrh	r2, [r1, #12]
 80170e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80170e6:	d026      	beq.n	8017136 <__ssputs_r+0x6a>
 80170e8:	6965      	ldr	r5, [r4, #20]
 80170ea:	6909      	ldr	r1, [r1, #16]
 80170ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80170f0:	eba3 0901 	sub.w	r9, r3, r1
 80170f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80170f8:	1c7b      	adds	r3, r7, #1
 80170fa:	444b      	add	r3, r9
 80170fc:	106d      	asrs	r5, r5, #1
 80170fe:	429d      	cmp	r5, r3
 8017100:	bf38      	it	cc
 8017102:	461d      	movcc	r5, r3
 8017104:	0553      	lsls	r3, r2, #21
 8017106:	d527      	bpl.n	8017158 <__ssputs_r+0x8c>
 8017108:	4629      	mov	r1, r5
 801710a:	f7fc f83d 	bl	8013188 <_malloc_r>
 801710e:	4606      	mov	r6, r0
 8017110:	b360      	cbz	r0, 801716c <__ssputs_r+0xa0>
 8017112:	6921      	ldr	r1, [r4, #16]
 8017114:	464a      	mov	r2, r9
 8017116:	f7fe f8b4 	bl	8015282 <memcpy>
 801711a:	89a3      	ldrh	r3, [r4, #12]
 801711c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017124:	81a3      	strh	r3, [r4, #12]
 8017126:	6126      	str	r6, [r4, #16]
 8017128:	6165      	str	r5, [r4, #20]
 801712a:	444e      	add	r6, r9
 801712c:	eba5 0509 	sub.w	r5, r5, r9
 8017130:	6026      	str	r6, [r4, #0]
 8017132:	60a5      	str	r5, [r4, #8]
 8017134:	463e      	mov	r6, r7
 8017136:	42be      	cmp	r6, r7
 8017138:	d900      	bls.n	801713c <__ssputs_r+0x70>
 801713a:	463e      	mov	r6, r7
 801713c:	6820      	ldr	r0, [r4, #0]
 801713e:	4632      	mov	r2, r6
 8017140:	4641      	mov	r1, r8
 8017142:	f000 f9db 	bl	80174fc <memmove>
 8017146:	68a3      	ldr	r3, [r4, #8]
 8017148:	1b9b      	subs	r3, r3, r6
 801714a:	60a3      	str	r3, [r4, #8]
 801714c:	6823      	ldr	r3, [r4, #0]
 801714e:	4433      	add	r3, r6
 8017150:	6023      	str	r3, [r4, #0]
 8017152:	2000      	movs	r0, #0
 8017154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017158:	462a      	mov	r2, r5
 801715a:	f000 fa06 	bl	801756a <_realloc_r>
 801715e:	4606      	mov	r6, r0
 8017160:	2800      	cmp	r0, #0
 8017162:	d1e0      	bne.n	8017126 <__ssputs_r+0x5a>
 8017164:	6921      	ldr	r1, [r4, #16]
 8017166:	4650      	mov	r0, sl
 8017168:	f7fe ff40 	bl	8015fec <_free_r>
 801716c:	230c      	movs	r3, #12
 801716e:	f8ca 3000 	str.w	r3, [sl]
 8017172:	89a3      	ldrh	r3, [r4, #12]
 8017174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017178:	81a3      	strh	r3, [r4, #12]
 801717a:	f04f 30ff 	mov.w	r0, #4294967295
 801717e:	e7e9      	b.n	8017154 <__ssputs_r+0x88>

08017180 <_svfiprintf_r>:
 8017180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017184:	4698      	mov	r8, r3
 8017186:	898b      	ldrh	r3, [r1, #12]
 8017188:	061b      	lsls	r3, r3, #24
 801718a:	b09d      	sub	sp, #116	; 0x74
 801718c:	4607      	mov	r7, r0
 801718e:	460d      	mov	r5, r1
 8017190:	4614      	mov	r4, r2
 8017192:	d50e      	bpl.n	80171b2 <_svfiprintf_r+0x32>
 8017194:	690b      	ldr	r3, [r1, #16]
 8017196:	b963      	cbnz	r3, 80171b2 <_svfiprintf_r+0x32>
 8017198:	2140      	movs	r1, #64	; 0x40
 801719a:	f7fb fff5 	bl	8013188 <_malloc_r>
 801719e:	6028      	str	r0, [r5, #0]
 80171a0:	6128      	str	r0, [r5, #16]
 80171a2:	b920      	cbnz	r0, 80171ae <_svfiprintf_r+0x2e>
 80171a4:	230c      	movs	r3, #12
 80171a6:	603b      	str	r3, [r7, #0]
 80171a8:	f04f 30ff 	mov.w	r0, #4294967295
 80171ac:	e0d0      	b.n	8017350 <_svfiprintf_r+0x1d0>
 80171ae:	2340      	movs	r3, #64	; 0x40
 80171b0:	616b      	str	r3, [r5, #20]
 80171b2:	2300      	movs	r3, #0
 80171b4:	9309      	str	r3, [sp, #36]	; 0x24
 80171b6:	2320      	movs	r3, #32
 80171b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80171bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80171c0:	2330      	movs	r3, #48	; 0x30
 80171c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017368 <_svfiprintf_r+0x1e8>
 80171c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80171ca:	f04f 0901 	mov.w	r9, #1
 80171ce:	4623      	mov	r3, r4
 80171d0:	469a      	mov	sl, r3
 80171d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171d6:	b10a      	cbz	r2, 80171dc <_svfiprintf_r+0x5c>
 80171d8:	2a25      	cmp	r2, #37	; 0x25
 80171da:	d1f9      	bne.n	80171d0 <_svfiprintf_r+0x50>
 80171dc:	ebba 0b04 	subs.w	fp, sl, r4
 80171e0:	d00b      	beq.n	80171fa <_svfiprintf_r+0x7a>
 80171e2:	465b      	mov	r3, fp
 80171e4:	4622      	mov	r2, r4
 80171e6:	4629      	mov	r1, r5
 80171e8:	4638      	mov	r0, r7
 80171ea:	f7ff ff6f 	bl	80170cc <__ssputs_r>
 80171ee:	3001      	adds	r0, #1
 80171f0:	f000 80a9 	beq.w	8017346 <_svfiprintf_r+0x1c6>
 80171f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171f6:	445a      	add	r2, fp
 80171f8:	9209      	str	r2, [sp, #36]	; 0x24
 80171fa:	f89a 3000 	ldrb.w	r3, [sl]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	f000 80a1 	beq.w	8017346 <_svfiprintf_r+0x1c6>
 8017204:	2300      	movs	r3, #0
 8017206:	f04f 32ff 	mov.w	r2, #4294967295
 801720a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801720e:	f10a 0a01 	add.w	sl, sl, #1
 8017212:	9304      	str	r3, [sp, #16]
 8017214:	9307      	str	r3, [sp, #28]
 8017216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801721a:	931a      	str	r3, [sp, #104]	; 0x68
 801721c:	4654      	mov	r4, sl
 801721e:	2205      	movs	r2, #5
 8017220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017224:	4850      	ldr	r0, [pc, #320]	; (8017368 <_svfiprintf_r+0x1e8>)
 8017226:	f7e8 ffd3 	bl	80001d0 <memchr>
 801722a:	9a04      	ldr	r2, [sp, #16]
 801722c:	b9d8      	cbnz	r0, 8017266 <_svfiprintf_r+0xe6>
 801722e:	06d0      	lsls	r0, r2, #27
 8017230:	bf44      	itt	mi
 8017232:	2320      	movmi	r3, #32
 8017234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017238:	0711      	lsls	r1, r2, #28
 801723a:	bf44      	itt	mi
 801723c:	232b      	movmi	r3, #43	; 0x2b
 801723e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017242:	f89a 3000 	ldrb.w	r3, [sl]
 8017246:	2b2a      	cmp	r3, #42	; 0x2a
 8017248:	d015      	beq.n	8017276 <_svfiprintf_r+0xf6>
 801724a:	9a07      	ldr	r2, [sp, #28]
 801724c:	4654      	mov	r4, sl
 801724e:	2000      	movs	r0, #0
 8017250:	f04f 0c0a 	mov.w	ip, #10
 8017254:	4621      	mov	r1, r4
 8017256:	f811 3b01 	ldrb.w	r3, [r1], #1
 801725a:	3b30      	subs	r3, #48	; 0x30
 801725c:	2b09      	cmp	r3, #9
 801725e:	d94d      	bls.n	80172fc <_svfiprintf_r+0x17c>
 8017260:	b1b0      	cbz	r0, 8017290 <_svfiprintf_r+0x110>
 8017262:	9207      	str	r2, [sp, #28]
 8017264:	e014      	b.n	8017290 <_svfiprintf_r+0x110>
 8017266:	eba0 0308 	sub.w	r3, r0, r8
 801726a:	fa09 f303 	lsl.w	r3, r9, r3
 801726e:	4313      	orrs	r3, r2
 8017270:	9304      	str	r3, [sp, #16]
 8017272:	46a2      	mov	sl, r4
 8017274:	e7d2      	b.n	801721c <_svfiprintf_r+0x9c>
 8017276:	9b03      	ldr	r3, [sp, #12]
 8017278:	1d19      	adds	r1, r3, #4
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	9103      	str	r1, [sp, #12]
 801727e:	2b00      	cmp	r3, #0
 8017280:	bfbb      	ittet	lt
 8017282:	425b      	neglt	r3, r3
 8017284:	f042 0202 	orrlt.w	r2, r2, #2
 8017288:	9307      	strge	r3, [sp, #28]
 801728a:	9307      	strlt	r3, [sp, #28]
 801728c:	bfb8      	it	lt
 801728e:	9204      	strlt	r2, [sp, #16]
 8017290:	7823      	ldrb	r3, [r4, #0]
 8017292:	2b2e      	cmp	r3, #46	; 0x2e
 8017294:	d10c      	bne.n	80172b0 <_svfiprintf_r+0x130>
 8017296:	7863      	ldrb	r3, [r4, #1]
 8017298:	2b2a      	cmp	r3, #42	; 0x2a
 801729a:	d134      	bne.n	8017306 <_svfiprintf_r+0x186>
 801729c:	9b03      	ldr	r3, [sp, #12]
 801729e:	1d1a      	adds	r2, r3, #4
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	9203      	str	r2, [sp, #12]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	bfb8      	it	lt
 80172a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80172ac:	3402      	adds	r4, #2
 80172ae:	9305      	str	r3, [sp, #20]
 80172b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017378 <_svfiprintf_r+0x1f8>
 80172b4:	7821      	ldrb	r1, [r4, #0]
 80172b6:	2203      	movs	r2, #3
 80172b8:	4650      	mov	r0, sl
 80172ba:	f7e8 ff89 	bl	80001d0 <memchr>
 80172be:	b138      	cbz	r0, 80172d0 <_svfiprintf_r+0x150>
 80172c0:	9b04      	ldr	r3, [sp, #16]
 80172c2:	eba0 000a 	sub.w	r0, r0, sl
 80172c6:	2240      	movs	r2, #64	; 0x40
 80172c8:	4082      	lsls	r2, r0
 80172ca:	4313      	orrs	r3, r2
 80172cc:	3401      	adds	r4, #1
 80172ce:	9304      	str	r3, [sp, #16]
 80172d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172d4:	4825      	ldr	r0, [pc, #148]	; (801736c <_svfiprintf_r+0x1ec>)
 80172d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80172da:	2206      	movs	r2, #6
 80172dc:	f7e8 ff78 	bl	80001d0 <memchr>
 80172e0:	2800      	cmp	r0, #0
 80172e2:	d038      	beq.n	8017356 <_svfiprintf_r+0x1d6>
 80172e4:	4b22      	ldr	r3, [pc, #136]	; (8017370 <_svfiprintf_r+0x1f0>)
 80172e6:	bb1b      	cbnz	r3, 8017330 <_svfiprintf_r+0x1b0>
 80172e8:	9b03      	ldr	r3, [sp, #12]
 80172ea:	3307      	adds	r3, #7
 80172ec:	f023 0307 	bic.w	r3, r3, #7
 80172f0:	3308      	adds	r3, #8
 80172f2:	9303      	str	r3, [sp, #12]
 80172f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172f6:	4433      	add	r3, r6
 80172f8:	9309      	str	r3, [sp, #36]	; 0x24
 80172fa:	e768      	b.n	80171ce <_svfiprintf_r+0x4e>
 80172fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8017300:	460c      	mov	r4, r1
 8017302:	2001      	movs	r0, #1
 8017304:	e7a6      	b.n	8017254 <_svfiprintf_r+0xd4>
 8017306:	2300      	movs	r3, #0
 8017308:	3401      	adds	r4, #1
 801730a:	9305      	str	r3, [sp, #20]
 801730c:	4619      	mov	r1, r3
 801730e:	f04f 0c0a 	mov.w	ip, #10
 8017312:	4620      	mov	r0, r4
 8017314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017318:	3a30      	subs	r2, #48	; 0x30
 801731a:	2a09      	cmp	r2, #9
 801731c:	d903      	bls.n	8017326 <_svfiprintf_r+0x1a6>
 801731e:	2b00      	cmp	r3, #0
 8017320:	d0c6      	beq.n	80172b0 <_svfiprintf_r+0x130>
 8017322:	9105      	str	r1, [sp, #20]
 8017324:	e7c4      	b.n	80172b0 <_svfiprintf_r+0x130>
 8017326:	fb0c 2101 	mla	r1, ip, r1, r2
 801732a:	4604      	mov	r4, r0
 801732c:	2301      	movs	r3, #1
 801732e:	e7f0      	b.n	8017312 <_svfiprintf_r+0x192>
 8017330:	ab03      	add	r3, sp, #12
 8017332:	9300      	str	r3, [sp, #0]
 8017334:	462a      	mov	r2, r5
 8017336:	4b0f      	ldr	r3, [pc, #60]	; (8017374 <_svfiprintf_r+0x1f4>)
 8017338:	a904      	add	r1, sp, #16
 801733a:	4638      	mov	r0, r7
 801733c:	f7fc ff56 	bl	80141ec <_printf_float>
 8017340:	1c42      	adds	r2, r0, #1
 8017342:	4606      	mov	r6, r0
 8017344:	d1d6      	bne.n	80172f4 <_svfiprintf_r+0x174>
 8017346:	89ab      	ldrh	r3, [r5, #12]
 8017348:	065b      	lsls	r3, r3, #25
 801734a:	f53f af2d 	bmi.w	80171a8 <_svfiprintf_r+0x28>
 801734e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017350:	b01d      	add	sp, #116	; 0x74
 8017352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017356:	ab03      	add	r3, sp, #12
 8017358:	9300      	str	r3, [sp, #0]
 801735a:	462a      	mov	r2, r5
 801735c:	4b05      	ldr	r3, [pc, #20]	; (8017374 <_svfiprintf_r+0x1f4>)
 801735e:	a904      	add	r1, sp, #16
 8017360:	4638      	mov	r0, r7
 8017362:	f7fd f9e7 	bl	8014734 <_printf_i>
 8017366:	e7eb      	b.n	8017340 <_svfiprintf_r+0x1c0>
 8017368:	0801b1bc 	.word	0x0801b1bc
 801736c:	0801b1c6 	.word	0x0801b1c6
 8017370:	080141ed 	.word	0x080141ed
 8017374:	080170cd 	.word	0x080170cd
 8017378:	0801b1c2 	.word	0x0801b1c2

0801737c <__sflush_r>:
 801737c:	898a      	ldrh	r2, [r1, #12]
 801737e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017382:	4605      	mov	r5, r0
 8017384:	0710      	lsls	r0, r2, #28
 8017386:	460c      	mov	r4, r1
 8017388:	d458      	bmi.n	801743c <__sflush_r+0xc0>
 801738a:	684b      	ldr	r3, [r1, #4]
 801738c:	2b00      	cmp	r3, #0
 801738e:	dc05      	bgt.n	801739c <__sflush_r+0x20>
 8017390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017392:	2b00      	cmp	r3, #0
 8017394:	dc02      	bgt.n	801739c <__sflush_r+0x20>
 8017396:	2000      	movs	r0, #0
 8017398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801739c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801739e:	2e00      	cmp	r6, #0
 80173a0:	d0f9      	beq.n	8017396 <__sflush_r+0x1a>
 80173a2:	2300      	movs	r3, #0
 80173a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80173a8:	682f      	ldr	r7, [r5, #0]
 80173aa:	6a21      	ldr	r1, [r4, #32]
 80173ac:	602b      	str	r3, [r5, #0]
 80173ae:	d032      	beq.n	8017416 <__sflush_r+0x9a>
 80173b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80173b2:	89a3      	ldrh	r3, [r4, #12]
 80173b4:	075a      	lsls	r2, r3, #29
 80173b6:	d505      	bpl.n	80173c4 <__sflush_r+0x48>
 80173b8:	6863      	ldr	r3, [r4, #4]
 80173ba:	1ac0      	subs	r0, r0, r3
 80173bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80173be:	b10b      	cbz	r3, 80173c4 <__sflush_r+0x48>
 80173c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80173c2:	1ac0      	subs	r0, r0, r3
 80173c4:	2300      	movs	r3, #0
 80173c6:	4602      	mov	r2, r0
 80173c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80173ca:	6a21      	ldr	r1, [r4, #32]
 80173cc:	4628      	mov	r0, r5
 80173ce:	47b0      	blx	r6
 80173d0:	1c43      	adds	r3, r0, #1
 80173d2:	89a3      	ldrh	r3, [r4, #12]
 80173d4:	d106      	bne.n	80173e4 <__sflush_r+0x68>
 80173d6:	6829      	ldr	r1, [r5, #0]
 80173d8:	291d      	cmp	r1, #29
 80173da:	d82b      	bhi.n	8017434 <__sflush_r+0xb8>
 80173dc:	4a29      	ldr	r2, [pc, #164]	; (8017484 <__sflush_r+0x108>)
 80173de:	410a      	asrs	r2, r1
 80173e0:	07d6      	lsls	r6, r2, #31
 80173e2:	d427      	bmi.n	8017434 <__sflush_r+0xb8>
 80173e4:	2200      	movs	r2, #0
 80173e6:	6062      	str	r2, [r4, #4]
 80173e8:	04d9      	lsls	r1, r3, #19
 80173ea:	6922      	ldr	r2, [r4, #16]
 80173ec:	6022      	str	r2, [r4, #0]
 80173ee:	d504      	bpl.n	80173fa <__sflush_r+0x7e>
 80173f0:	1c42      	adds	r2, r0, #1
 80173f2:	d101      	bne.n	80173f8 <__sflush_r+0x7c>
 80173f4:	682b      	ldr	r3, [r5, #0]
 80173f6:	b903      	cbnz	r3, 80173fa <__sflush_r+0x7e>
 80173f8:	6560      	str	r0, [r4, #84]	; 0x54
 80173fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80173fc:	602f      	str	r7, [r5, #0]
 80173fe:	2900      	cmp	r1, #0
 8017400:	d0c9      	beq.n	8017396 <__sflush_r+0x1a>
 8017402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017406:	4299      	cmp	r1, r3
 8017408:	d002      	beq.n	8017410 <__sflush_r+0x94>
 801740a:	4628      	mov	r0, r5
 801740c:	f7fe fdee 	bl	8015fec <_free_r>
 8017410:	2000      	movs	r0, #0
 8017412:	6360      	str	r0, [r4, #52]	; 0x34
 8017414:	e7c0      	b.n	8017398 <__sflush_r+0x1c>
 8017416:	2301      	movs	r3, #1
 8017418:	4628      	mov	r0, r5
 801741a:	47b0      	blx	r6
 801741c:	1c41      	adds	r1, r0, #1
 801741e:	d1c8      	bne.n	80173b2 <__sflush_r+0x36>
 8017420:	682b      	ldr	r3, [r5, #0]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d0c5      	beq.n	80173b2 <__sflush_r+0x36>
 8017426:	2b1d      	cmp	r3, #29
 8017428:	d001      	beq.n	801742e <__sflush_r+0xb2>
 801742a:	2b16      	cmp	r3, #22
 801742c:	d101      	bne.n	8017432 <__sflush_r+0xb6>
 801742e:	602f      	str	r7, [r5, #0]
 8017430:	e7b1      	b.n	8017396 <__sflush_r+0x1a>
 8017432:	89a3      	ldrh	r3, [r4, #12]
 8017434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017438:	81a3      	strh	r3, [r4, #12]
 801743a:	e7ad      	b.n	8017398 <__sflush_r+0x1c>
 801743c:	690f      	ldr	r7, [r1, #16]
 801743e:	2f00      	cmp	r7, #0
 8017440:	d0a9      	beq.n	8017396 <__sflush_r+0x1a>
 8017442:	0793      	lsls	r3, r2, #30
 8017444:	680e      	ldr	r6, [r1, #0]
 8017446:	bf08      	it	eq
 8017448:	694b      	ldreq	r3, [r1, #20]
 801744a:	600f      	str	r7, [r1, #0]
 801744c:	bf18      	it	ne
 801744e:	2300      	movne	r3, #0
 8017450:	eba6 0807 	sub.w	r8, r6, r7
 8017454:	608b      	str	r3, [r1, #8]
 8017456:	f1b8 0f00 	cmp.w	r8, #0
 801745a:	dd9c      	ble.n	8017396 <__sflush_r+0x1a>
 801745c:	6a21      	ldr	r1, [r4, #32]
 801745e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017460:	4643      	mov	r3, r8
 8017462:	463a      	mov	r2, r7
 8017464:	4628      	mov	r0, r5
 8017466:	47b0      	blx	r6
 8017468:	2800      	cmp	r0, #0
 801746a:	dc06      	bgt.n	801747a <__sflush_r+0xfe>
 801746c:	89a3      	ldrh	r3, [r4, #12]
 801746e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017472:	81a3      	strh	r3, [r4, #12]
 8017474:	f04f 30ff 	mov.w	r0, #4294967295
 8017478:	e78e      	b.n	8017398 <__sflush_r+0x1c>
 801747a:	4407      	add	r7, r0
 801747c:	eba8 0800 	sub.w	r8, r8, r0
 8017480:	e7e9      	b.n	8017456 <__sflush_r+0xda>
 8017482:	bf00      	nop
 8017484:	dfbffffe 	.word	0xdfbffffe

08017488 <_fflush_r>:
 8017488:	b538      	push	{r3, r4, r5, lr}
 801748a:	690b      	ldr	r3, [r1, #16]
 801748c:	4605      	mov	r5, r0
 801748e:	460c      	mov	r4, r1
 8017490:	b913      	cbnz	r3, 8017498 <_fflush_r+0x10>
 8017492:	2500      	movs	r5, #0
 8017494:	4628      	mov	r0, r5
 8017496:	bd38      	pop	{r3, r4, r5, pc}
 8017498:	b118      	cbz	r0, 80174a2 <_fflush_r+0x1a>
 801749a:	6a03      	ldr	r3, [r0, #32]
 801749c:	b90b      	cbnz	r3, 80174a2 <_fflush_r+0x1a>
 801749e:	f7fd fd07 	bl	8014eb0 <__sinit>
 80174a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d0f3      	beq.n	8017492 <_fflush_r+0xa>
 80174aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80174ac:	07d0      	lsls	r0, r2, #31
 80174ae:	d404      	bmi.n	80174ba <_fflush_r+0x32>
 80174b0:	0599      	lsls	r1, r3, #22
 80174b2:	d402      	bmi.n	80174ba <_fflush_r+0x32>
 80174b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174b6:	f7fd feda 	bl	801526e <__retarget_lock_acquire_recursive>
 80174ba:	4628      	mov	r0, r5
 80174bc:	4621      	mov	r1, r4
 80174be:	f7ff ff5d 	bl	801737c <__sflush_r>
 80174c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80174c4:	07da      	lsls	r2, r3, #31
 80174c6:	4605      	mov	r5, r0
 80174c8:	d4e4      	bmi.n	8017494 <_fflush_r+0xc>
 80174ca:	89a3      	ldrh	r3, [r4, #12]
 80174cc:	059b      	lsls	r3, r3, #22
 80174ce:	d4e1      	bmi.n	8017494 <_fflush_r+0xc>
 80174d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174d2:	f7fd fecd 	bl	8015270 <__retarget_lock_release_recursive>
 80174d6:	e7dd      	b.n	8017494 <_fflush_r+0xc>

080174d8 <fiprintf>:
 80174d8:	b40e      	push	{r1, r2, r3}
 80174da:	b503      	push	{r0, r1, lr}
 80174dc:	4601      	mov	r1, r0
 80174de:	ab03      	add	r3, sp, #12
 80174e0:	4805      	ldr	r0, [pc, #20]	; (80174f8 <fiprintf+0x20>)
 80174e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80174e6:	6800      	ldr	r0, [r0, #0]
 80174e8:	9301      	str	r3, [sp, #4]
 80174ea:	f000 f897 	bl	801761c <_vfiprintf_r>
 80174ee:	b002      	add	sp, #8
 80174f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80174f4:	b003      	add	sp, #12
 80174f6:	4770      	bx	lr
 80174f8:	200002f0 	.word	0x200002f0

080174fc <memmove>:
 80174fc:	4288      	cmp	r0, r1
 80174fe:	b510      	push	{r4, lr}
 8017500:	eb01 0402 	add.w	r4, r1, r2
 8017504:	d902      	bls.n	801750c <memmove+0x10>
 8017506:	4284      	cmp	r4, r0
 8017508:	4623      	mov	r3, r4
 801750a:	d807      	bhi.n	801751c <memmove+0x20>
 801750c:	1e43      	subs	r3, r0, #1
 801750e:	42a1      	cmp	r1, r4
 8017510:	d008      	beq.n	8017524 <memmove+0x28>
 8017512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017516:	f803 2f01 	strb.w	r2, [r3, #1]!
 801751a:	e7f8      	b.n	801750e <memmove+0x12>
 801751c:	4402      	add	r2, r0
 801751e:	4601      	mov	r1, r0
 8017520:	428a      	cmp	r2, r1
 8017522:	d100      	bne.n	8017526 <memmove+0x2a>
 8017524:	bd10      	pop	{r4, pc}
 8017526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801752a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801752e:	e7f7      	b.n	8017520 <memmove+0x24>

08017530 <abort>:
 8017530:	b508      	push	{r3, lr}
 8017532:	2006      	movs	r0, #6
 8017534:	f000 fa4a 	bl	80179cc <raise>
 8017538:	2001      	movs	r0, #1
 801753a:	f7ed fbd3 	bl	8004ce4 <_exit>

0801753e <_calloc_r>:
 801753e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017540:	fba1 2402 	umull	r2, r4, r1, r2
 8017544:	b94c      	cbnz	r4, 801755a <_calloc_r+0x1c>
 8017546:	4611      	mov	r1, r2
 8017548:	9201      	str	r2, [sp, #4]
 801754a:	f7fb fe1d 	bl	8013188 <_malloc_r>
 801754e:	9a01      	ldr	r2, [sp, #4]
 8017550:	4605      	mov	r5, r0
 8017552:	b930      	cbnz	r0, 8017562 <_calloc_r+0x24>
 8017554:	4628      	mov	r0, r5
 8017556:	b003      	add	sp, #12
 8017558:	bd30      	pop	{r4, r5, pc}
 801755a:	220c      	movs	r2, #12
 801755c:	6002      	str	r2, [r0, #0]
 801755e:	2500      	movs	r5, #0
 8017560:	e7f8      	b.n	8017554 <_calloc_r+0x16>
 8017562:	4621      	mov	r1, r4
 8017564:	f7fd fd71 	bl	801504a <memset>
 8017568:	e7f4      	b.n	8017554 <_calloc_r+0x16>

0801756a <_realloc_r>:
 801756a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801756e:	4680      	mov	r8, r0
 8017570:	4614      	mov	r4, r2
 8017572:	460e      	mov	r6, r1
 8017574:	b921      	cbnz	r1, 8017580 <_realloc_r+0x16>
 8017576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801757a:	4611      	mov	r1, r2
 801757c:	f7fb be04 	b.w	8013188 <_malloc_r>
 8017580:	b92a      	cbnz	r2, 801758e <_realloc_r+0x24>
 8017582:	f7fe fd33 	bl	8015fec <_free_r>
 8017586:	4625      	mov	r5, r4
 8017588:	4628      	mov	r0, r5
 801758a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801758e:	f000 fa39 	bl	8017a04 <_malloc_usable_size_r>
 8017592:	4284      	cmp	r4, r0
 8017594:	4607      	mov	r7, r0
 8017596:	d802      	bhi.n	801759e <_realloc_r+0x34>
 8017598:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801759c:	d812      	bhi.n	80175c4 <_realloc_r+0x5a>
 801759e:	4621      	mov	r1, r4
 80175a0:	4640      	mov	r0, r8
 80175a2:	f7fb fdf1 	bl	8013188 <_malloc_r>
 80175a6:	4605      	mov	r5, r0
 80175a8:	2800      	cmp	r0, #0
 80175aa:	d0ed      	beq.n	8017588 <_realloc_r+0x1e>
 80175ac:	42bc      	cmp	r4, r7
 80175ae:	4622      	mov	r2, r4
 80175b0:	4631      	mov	r1, r6
 80175b2:	bf28      	it	cs
 80175b4:	463a      	movcs	r2, r7
 80175b6:	f7fd fe64 	bl	8015282 <memcpy>
 80175ba:	4631      	mov	r1, r6
 80175bc:	4640      	mov	r0, r8
 80175be:	f7fe fd15 	bl	8015fec <_free_r>
 80175c2:	e7e1      	b.n	8017588 <_realloc_r+0x1e>
 80175c4:	4635      	mov	r5, r6
 80175c6:	e7df      	b.n	8017588 <_realloc_r+0x1e>

080175c8 <__sfputc_r>:
 80175c8:	6893      	ldr	r3, [r2, #8]
 80175ca:	3b01      	subs	r3, #1
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	b410      	push	{r4}
 80175d0:	6093      	str	r3, [r2, #8]
 80175d2:	da08      	bge.n	80175e6 <__sfputc_r+0x1e>
 80175d4:	6994      	ldr	r4, [r2, #24]
 80175d6:	42a3      	cmp	r3, r4
 80175d8:	db01      	blt.n	80175de <__sfputc_r+0x16>
 80175da:	290a      	cmp	r1, #10
 80175dc:	d103      	bne.n	80175e6 <__sfputc_r+0x1e>
 80175de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175e2:	f000 b935 	b.w	8017850 <__swbuf_r>
 80175e6:	6813      	ldr	r3, [r2, #0]
 80175e8:	1c58      	adds	r0, r3, #1
 80175ea:	6010      	str	r0, [r2, #0]
 80175ec:	7019      	strb	r1, [r3, #0]
 80175ee:	4608      	mov	r0, r1
 80175f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175f4:	4770      	bx	lr

080175f6 <__sfputs_r>:
 80175f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175f8:	4606      	mov	r6, r0
 80175fa:	460f      	mov	r7, r1
 80175fc:	4614      	mov	r4, r2
 80175fe:	18d5      	adds	r5, r2, r3
 8017600:	42ac      	cmp	r4, r5
 8017602:	d101      	bne.n	8017608 <__sfputs_r+0x12>
 8017604:	2000      	movs	r0, #0
 8017606:	e007      	b.n	8017618 <__sfputs_r+0x22>
 8017608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801760c:	463a      	mov	r2, r7
 801760e:	4630      	mov	r0, r6
 8017610:	f7ff ffda 	bl	80175c8 <__sfputc_r>
 8017614:	1c43      	adds	r3, r0, #1
 8017616:	d1f3      	bne.n	8017600 <__sfputs_r+0xa>
 8017618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801761c <_vfiprintf_r>:
 801761c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017620:	460d      	mov	r5, r1
 8017622:	b09d      	sub	sp, #116	; 0x74
 8017624:	4614      	mov	r4, r2
 8017626:	4698      	mov	r8, r3
 8017628:	4606      	mov	r6, r0
 801762a:	b118      	cbz	r0, 8017634 <_vfiprintf_r+0x18>
 801762c:	6a03      	ldr	r3, [r0, #32]
 801762e:	b90b      	cbnz	r3, 8017634 <_vfiprintf_r+0x18>
 8017630:	f7fd fc3e 	bl	8014eb0 <__sinit>
 8017634:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017636:	07d9      	lsls	r1, r3, #31
 8017638:	d405      	bmi.n	8017646 <_vfiprintf_r+0x2a>
 801763a:	89ab      	ldrh	r3, [r5, #12]
 801763c:	059a      	lsls	r2, r3, #22
 801763e:	d402      	bmi.n	8017646 <_vfiprintf_r+0x2a>
 8017640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017642:	f7fd fe14 	bl	801526e <__retarget_lock_acquire_recursive>
 8017646:	89ab      	ldrh	r3, [r5, #12]
 8017648:	071b      	lsls	r3, r3, #28
 801764a:	d501      	bpl.n	8017650 <_vfiprintf_r+0x34>
 801764c:	692b      	ldr	r3, [r5, #16]
 801764e:	b99b      	cbnz	r3, 8017678 <_vfiprintf_r+0x5c>
 8017650:	4629      	mov	r1, r5
 8017652:	4630      	mov	r0, r6
 8017654:	f000 f93a 	bl	80178cc <__swsetup_r>
 8017658:	b170      	cbz	r0, 8017678 <_vfiprintf_r+0x5c>
 801765a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801765c:	07dc      	lsls	r4, r3, #31
 801765e:	d504      	bpl.n	801766a <_vfiprintf_r+0x4e>
 8017660:	f04f 30ff 	mov.w	r0, #4294967295
 8017664:	b01d      	add	sp, #116	; 0x74
 8017666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801766a:	89ab      	ldrh	r3, [r5, #12]
 801766c:	0598      	lsls	r0, r3, #22
 801766e:	d4f7      	bmi.n	8017660 <_vfiprintf_r+0x44>
 8017670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017672:	f7fd fdfd 	bl	8015270 <__retarget_lock_release_recursive>
 8017676:	e7f3      	b.n	8017660 <_vfiprintf_r+0x44>
 8017678:	2300      	movs	r3, #0
 801767a:	9309      	str	r3, [sp, #36]	; 0x24
 801767c:	2320      	movs	r3, #32
 801767e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017682:	f8cd 800c 	str.w	r8, [sp, #12]
 8017686:	2330      	movs	r3, #48	; 0x30
 8017688:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801783c <_vfiprintf_r+0x220>
 801768c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017690:	f04f 0901 	mov.w	r9, #1
 8017694:	4623      	mov	r3, r4
 8017696:	469a      	mov	sl, r3
 8017698:	f813 2b01 	ldrb.w	r2, [r3], #1
 801769c:	b10a      	cbz	r2, 80176a2 <_vfiprintf_r+0x86>
 801769e:	2a25      	cmp	r2, #37	; 0x25
 80176a0:	d1f9      	bne.n	8017696 <_vfiprintf_r+0x7a>
 80176a2:	ebba 0b04 	subs.w	fp, sl, r4
 80176a6:	d00b      	beq.n	80176c0 <_vfiprintf_r+0xa4>
 80176a8:	465b      	mov	r3, fp
 80176aa:	4622      	mov	r2, r4
 80176ac:	4629      	mov	r1, r5
 80176ae:	4630      	mov	r0, r6
 80176b0:	f7ff ffa1 	bl	80175f6 <__sfputs_r>
 80176b4:	3001      	adds	r0, #1
 80176b6:	f000 80a9 	beq.w	801780c <_vfiprintf_r+0x1f0>
 80176ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176bc:	445a      	add	r2, fp
 80176be:	9209      	str	r2, [sp, #36]	; 0x24
 80176c0:	f89a 3000 	ldrb.w	r3, [sl]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	f000 80a1 	beq.w	801780c <_vfiprintf_r+0x1f0>
 80176ca:	2300      	movs	r3, #0
 80176cc:	f04f 32ff 	mov.w	r2, #4294967295
 80176d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176d4:	f10a 0a01 	add.w	sl, sl, #1
 80176d8:	9304      	str	r3, [sp, #16]
 80176da:	9307      	str	r3, [sp, #28]
 80176dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80176e0:	931a      	str	r3, [sp, #104]	; 0x68
 80176e2:	4654      	mov	r4, sl
 80176e4:	2205      	movs	r2, #5
 80176e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176ea:	4854      	ldr	r0, [pc, #336]	; (801783c <_vfiprintf_r+0x220>)
 80176ec:	f7e8 fd70 	bl	80001d0 <memchr>
 80176f0:	9a04      	ldr	r2, [sp, #16]
 80176f2:	b9d8      	cbnz	r0, 801772c <_vfiprintf_r+0x110>
 80176f4:	06d1      	lsls	r1, r2, #27
 80176f6:	bf44      	itt	mi
 80176f8:	2320      	movmi	r3, #32
 80176fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176fe:	0713      	lsls	r3, r2, #28
 8017700:	bf44      	itt	mi
 8017702:	232b      	movmi	r3, #43	; 0x2b
 8017704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017708:	f89a 3000 	ldrb.w	r3, [sl]
 801770c:	2b2a      	cmp	r3, #42	; 0x2a
 801770e:	d015      	beq.n	801773c <_vfiprintf_r+0x120>
 8017710:	9a07      	ldr	r2, [sp, #28]
 8017712:	4654      	mov	r4, sl
 8017714:	2000      	movs	r0, #0
 8017716:	f04f 0c0a 	mov.w	ip, #10
 801771a:	4621      	mov	r1, r4
 801771c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017720:	3b30      	subs	r3, #48	; 0x30
 8017722:	2b09      	cmp	r3, #9
 8017724:	d94d      	bls.n	80177c2 <_vfiprintf_r+0x1a6>
 8017726:	b1b0      	cbz	r0, 8017756 <_vfiprintf_r+0x13a>
 8017728:	9207      	str	r2, [sp, #28]
 801772a:	e014      	b.n	8017756 <_vfiprintf_r+0x13a>
 801772c:	eba0 0308 	sub.w	r3, r0, r8
 8017730:	fa09 f303 	lsl.w	r3, r9, r3
 8017734:	4313      	orrs	r3, r2
 8017736:	9304      	str	r3, [sp, #16]
 8017738:	46a2      	mov	sl, r4
 801773a:	e7d2      	b.n	80176e2 <_vfiprintf_r+0xc6>
 801773c:	9b03      	ldr	r3, [sp, #12]
 801773e:	1d19      	adds	r1, r3, #4
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	9103      	str	r1, [sp, #12]
 8017744:	2b00      	cmp	r3, #0
 8017746:	bfbb      	ittet	lt
 8017748:	425b      	neglt	r3, r3
 801774a:	f042 0202 	orrlt.w	r2, r2, #2
 801774e:	9307      	strge	r3, [sp, #28]
 8017750:	9307      	strlt	r3, [sp, #28]
 8017752:	bfb8      	it	lt
 8017754:	9204      	strlt	r2, [sp, #16]
 8017756:	7823      	ldrb	r3, [r4, #0]
 8017758:	2b2e      	cmp	r3, #46	; 0x2e
 801775a:	d10c      	bne.n	8017776 <_vfiprintf_r+0x15a>
 801775c:	7863      	ldrb	r3, [r4, #1]
 801775e:	2b2a      	cmp	r3, #42	; 0x2a
 8017760:	d134      	bne.n	80177cc <_vfiprintf_r+0x1b0>
 8017762:	9b03      	ldr	r3, [sp, #12]
 8017764:	1d1a      	adds	r2, r3, #4
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	9203      	str	r2, [sp, #12]
 801776a:	2b00      	cmp	r3, #0
 801776c:	bfb8      	it	lt
 801776e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017772:	3402      	adds	r4, #2
 8017774:	9305      	str	r3, [sp, #20]
 8017776:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801784c <_vfiprintf_r+0x230>
 801777a:	7821      	ldrb	r1, [r4, #0]
 801777c:	2203      	movs	r2, #3
 801777e:	4650      	mov	r0, sl
 8017780:	f7e8 fd26 	bl	80001d0 <memchr>
 8017784:	b138      	cbz	r0, 8017796 <_vfiprintf_r+0x17a>
 8017786:	9b04      	ldr	r3, [sp, #16]
 8017788:	eba0 000a 	sub.w	r0, r0, sl
 801778c:	2240      	movs	r2, #64	; 0x40
 801778e:	4082      	lsls	r2, r0
 8017790:	4313      	orrs	r3, r2
 8017792:	3401      	adds	r4, #1
 8017794:	9304      	str	r3, [sp, #16]
 8017796:	f814 1b01 	ldrb.w	r1, [r4], #1
 801779a:	4829      	ldr	r0, [pc, #164]	; (8017840 <_vfiprintf_r+0x224>)
 801779c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80177a0:	2206      	movs	r2, #6
 80177a2:	f7e8 fd15 	bl	80001d0 <memchr>
 80177a6:	2800      	cmp	r0, #0
 80177a8:	d03f      	beq.n	801782a <_vfiprintf_r+0x20e>
 80177aa:	4b26      	ldr	r3, [pc, #152]	; (8017844 <_vfiprintf_r+0x228>)
 80177ac:	bb1b      	cbnz	r3, 80177f6 <_vfiprintf_r+0x1da>
 80177ae:	9b03      	ldr	r3, [sp, #12]
 80177b0:	3307      	adds	r3, #7
 80177b2:	f023 0307 	bic.w	r3, r3, #7
 80177b6:	3308      	adds	r3, #8
 80177b8:	9303      	str	r3, [sp, #12]
 80177ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177bc:	443b      	add	r3, r7
 80177be:	9309      	str	r3, [sp, #36]	; 0x24
 80177c0:	e768      	b.n	8017694 <_vfiprintf_r+0x78>
 80177c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80177c6:	460c      	mov	r4, r1
 80177c8:	2001      	movs	r0, #1
 80177ca:	e7a6      	b.n	801771a <_vfiprintf_r+0xfe>
 80177cc:	2300      	movs	r3, #0
 80177ce:	3401      	adds	r4, #1
 80177d0:	9305      	str	r3, [sp, #20]
 80177d2:	4619      	mov	r1, r3
 80177d4:	f04f 0c0a 	mov.w	ip, #10
 80177d8:	4620      	mov	r0, r4
 80177da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177de:	3a30      	subs	r2, #48	; 0x30
 80177e0:	2a09      	cmp	r2, #9
 80177e2:	d903      	bls.n	80177ec <_vfiprintf_r+0x1d0>
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d0c6      	beq.n	8017776 <_vfiprintf_r+0x15a>
 80177e8:	9105      	str	r1, [sp, #20]
 80177ea:	e7c4      	b.n	8017776 <_vfiprintf_r+0x15a>
 80177ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80177f0:	4604      	mov	r4, r0
 80177f2:	2301      	movs	r3, #1
 80177f4:	e7f0      	b.n	80177d8 <_vfiprintf_r+0x1bc>
 80177f6:	ab03      	add	r3, sp, #12
 80177f8:	9300      	str	r3, [sp, #0]
 80177fa:	462a      	mov	r2, r5
 80177fc:	4b12      	ldr	r3, [pc, #72]	; (8017848 <_vfiprintf_r+0x22c>)
 80177fe:	a904      	add	r1, sp, #16
 8017800:	4630      	mov	r0, r6
 8017802:	f7fc fcf3 	bl	80141ec <_printf_float>
 8017806:	4607      	mov	r7, r0
 8017808:	1c78      	adds	r0, r7, #1
 801780a:	d1d6      	bne.n	80177ba <_vfiprintf_r+0x19e>
 801780c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801780e:	07d9      	lsls	r1, r3, #31
 8017810:	d405      	bmi.n	801781e <_vfiprintf_r+0x202>
 8017812:	89ab      	ldrh	r3, [r5, #12]
 8017814:	059a      	lsls	r2, r3, #22
 8017816:	d402      	bmi.n	801781e <_vfiprintf_r+0x202>
 8017818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801781a:	f7fd fd29 	bl	8015270 <__retarget_lock_release_recursive>
 801781e:	89ab      	ldrh	r3, [r5, #12]
 8017820:	065b      	lsls	r3, r3, #25
 8017822:	f53f af1d 	bmi.w	8017660 <_vfiprintf_r+0x44>
 8017826:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017828:	e71c      	b.n	8017664 <_vfiprintf_r+0x48>
 801782a:	ab03      	add	r3, sp, #12
 801782c:	9300      	str	r3, [sp, #0]
 801782e:	462a      	mov	r2, r5
 8017830:	4b05      	ldr	r3, [pc, #20]	; (8017848 <_vfiprintf_r+0x22c>)
 8017832:	a904      	add	r1, sp, #16
 8017834:	4630      	mov	r0, r6
 8017836:	f7fc ff7d 	bl	8014734 <_printf_i>
 801783a:	e7e4      	b.n	8017806 <_vfiprintf_r+0x1ea>
 801783c:	0801b1bc 	.word	0x0801b1bc
 8017840:	0801b1c6 	.word	0x0801b1c6
 8017844:	080141ed 	.word	0x080141ed
 8017848:	080175f7 	.word	0x080175f7
 801784c:	0801b1c2 	.word	0x0801b1c2

08017850 <__swbuf_r>:
 8017850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017852:	460e      	mov	r6, r1
 8017854:	4614      	mov	r4, r2
 8017856:	4605      	mov	r5, r0
 8017858:	b118      	cbz	r0, 8017862 <__swbuf_r+0x12>
 801785a:	6a03      	ldr	r3, [r0, #32]
 801785c:	b90b      	cbnz	r3, 8017862 <__swbuf_r+0x12>
 801785e:	f7fd fb27 	bl	8014eb0 <__sinit>
 8017862:	69a3      	ldr	r3, [r4, #24]
 8017864:	60a3      	str	r3, [r4, #8]
 8017866:	89a3      	ldrh	r3, [r4, #12]
 8017868:	071a      	lsls	r2, r3, #28
 801786a:	d525      	bpl.n	80178b8 <__swbuf_r+0x68>
 801786c:	6923      	ldr	r3, [r4, #16]
 801786e:	b31b      	cbz	r3, 80178b8 <__swbuf_r+0x68>
 8017870:	6823      	ldr	r3, [r4, #0]
 8017872:	6922      	ldr	r2, [r4, #16]
 8017874:	1a98      	subs	r0, r3, r2
 8017876:	6963      	ldr	r3, [r4, #20]
 8017878:	b2f6      	uxtb	r6, r6
 801787a:	4283      	cmp	r3, r0
 801787c:	4637      	mov	r7, r6
 801787e:	dc04      	bgt.n	801788a <__swbuf_r+0x3a>
 8017880:	4621      	mov	r1, r4
 8017882:	4628      	mov	r0, r5
 8017884:	f7ff fe00 	bl	8017488 <_fflush_r>
 8017888:	b9e0      	cbnz	r0, 80178c4 <__swbuf_r+0x74>
 801788a:	68a3      	ldr	r3, [r4, #8]
 801788c:	3b01      	subs	r3, #1
 801788e:	60a3      	str	r3, [r4, #8]
 8017890:	6823      	ldr	r3, [r4, #0]
 8017892:	1c5a      	adds	r2, r3, #1
 8017894:	6022      	str	r2, [r4, #0]
 8017896:	701e      	strb	r6, [r3, #0]
 8017898:	6962      	ldr	r2, [r4, #20]
 801789a:	1c43      	adds	r3, r0, #1
 801789c:	429a      	cmp	r2, r3
 801789e:	d004      	beq.n	80178aa <__swbuf_r+0x5a>
 80178a0:	89a3      	ldrh	r3, [r4, #12]
 80178a2:	07db      	lsls	r3, r3, #31
 80178a4:	d506      	bpl.n	80178b4 <__swbuf_r+0x64>
 80178a6:	2e0a      	cmp	r6, #10
 80178a8:	d104      	bne.n	80178b4 <__swbuf_r+0x64>
 80178aa:	4621      	mov	r1, r4
 80178ac:	4628      	mov	r0, r5
 80178ae:	f7ff fdeb 	bl	8017488 <_fflush_r>
 80178b2:	b938      	cbnz	r0, 80178c4 <__swbuf_r+0x74>
 80178b4:	4638      	mov	r0, r7
 80178b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178b8:	4621      	mov	r1, r4
 80178ba:	4628      	mov	r0, r5
 80178bc:	f000 f806 	bl	80178cc <__swsetup_r>
 80178c0:	2800      	cmp	r0, #0
 80178c2:	d0d5      	beq.n	8017870 <__swbuf_r+0x20>
 80178c4:	f04f 37ff 	mov.w	r7, #4294967295
 80178c8:	e7f4      	b.n	80178b4 <__swbuf_r+0x64>
	...

080178cc <__swsetup_r>:
 80178cc:	b538      	push	{r3, r4, r5, lr}
 80178ce:	4b2a      	ldr	r3, [pc, #168]	; (8017978 <__swsetup_r+0xac>)
 80178d0:	4605      	mov	r5, r0
 80178d2:	6818      	ldr	r0, [r3, #0]
 80178d4:	460c      	mov	r4, r1
 80178d6:	b118      	cbz	r0, 80178e0 <__swsetup_r+0x14>
 80178d8:	6a03      	ldr	r3, [r0, #32]
 80178da:	b90b      	cbnz	r3, 80178e0 <__swsetup_r+0x14>
 80178dc:	f7fd fae8 	bl	8014eb0 <__sinit>
 80178e0:	89a3      	ldrh	r3, [r4, #12]
 80178e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80178e6:	0718      	lsls	r0, r3, #28
 80178e8:	d422      	bmi.n	8017930 <__swsetup_r+0x64>
 80178ea:	06d9      	lsls	r1, r3, #27
 80178ec:	d407      	bmi.n	80178fe <__swsetup_r+0x32>
 80178ee:	2309      	movs	r3, #9
 80178f0:	602b      	str	r3, [r5, #0]
 80178f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80178f6:	81a3      	strh	r3, [r4, #12]
 80178f8:	f04f 30ff 	mov.w	r0, #4294967295
 80178fc:	e034      	b.n	8017968 <__swsetup_r+0x9c>
 80178fe:	0758      	lsls	r0, r3, #29
 8017900:	d512      	bpl.n	8017928 <__swsetup_r+0x5c>
 8017902:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017904:	b141      	cbz	r1, 8017918 <__swsetup_r+0x4c>
 8017906:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801790a:	4299      	cmp	r1, r3
 801790c:	d002      	beq.n	8017914 <__swsetup_r+0x48>
 801790e:	4628      	mov	r0, r5
 8017910:	f7fe fb6c 	bl	8015fec <_free_r>
 8017914:	2300      	movs	r3, #0
 8017916:	6363      	str	r3, [r4, #52]	; 0x34
 8017918:	89a3      	ldrh	r3, [r4, #12]
 801791a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801791e:	81a3      	strh	r3, [r4, #12]
 8017920:	2300      	movs	r3, #0
 8017922:	6063      	str	r3, [r4, #4]
 8017924:	6923      	ldr	r3, [r4, #16]
 8017926:	6023      	str	r3, [r4, #0]
 8017928:	89a3      	ldrh	r3, [r4, #12]
 801792a:	f043 0308 	orr.w	r3, r3, #8
 801792e:	81a3      	strh	r3, [r4, #12]
 8017930:	6923      	ldr	r3, [r4, #16]
 8017932:	b94b      	cbnz	r3, 8017948 <__swsetup_r+0x7c>
 8017934:	89a3      	ldrh	r3, [r4, #12]
 8017936:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801793a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801793e:	d003      	beq.n	8017948 <__swsetup_r+0x7c>
 8017940:	4621      	mov	r1, r4
 8017942:	4628      	mov	r0, r5
 8017944:	f000 f88c 	bl	8017a60 <__smakebuf_r>
 8017948:	89a0      	ldrh	r0, [r4, #12]
 801794a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801794e:	f010 0301 	ands.w	r3, r0, #1
 8017952:	d00a      	beq.n	801796a <__swsetup_r+0x9e>
 8017954:	2300      	movs	r3, #0
 8017956:	60a3      	str	r3, [r4, #8]
 8017958:	6963      	ldr	r3, [r4, #20]
 801795a:	425b      	negs	r3, r3
 801795c:	61a3      	str	r3, [r4, #24]
 801795e:	6923      	ldr	r3, [r4, #16]
 8017960:	b943      	cbnz	r3, 8017974 <__swsetup_r+0xa8>
 8017962:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017966:	d1c4      	bne.n	80178f2 <__swsetup_r+0x26>
 8017968:	bd38      	pop	{r3, r4, r5, pc}
 801796a:	0781      	lsls	r1, r0, #30
 801796c:	bf58      	it	pl
 801796e:	6963      	ldrpl	r3, [r4, #20]
 8017970:	60a3      	str	r3, [r4, #8]
 8017972:	e7f4      	b.n	801795e <__swsetup_r+0x92>
 8017974:	2000      	movs	r0, #0
 8017976:	e7f7      	b.n	8017968 <__swsetup_r+0x9c>
 8017978:	200002f0 	.word	0x200002f0

0801797c <_raise_r>:
 801797c:	291f      	cmp	r1, #31
 801797e:	b538      	push	{r3, r4, r5, lr}
 8017980:	4604      	mov	r4, r0
 8017982:	460d      	mov	r5, r1
 8017984:	d904      	bls.n	8017990 <_raise_r+0x14>
 8017986:	2316      	movs	r3, #22
 8017988:	6003      	str	r3, [r0, #0]
 801798a:	f04f 30ff 	mov.w	r0, #4294967295
 801798e:	bd38      	pop	{r3, r4, r5, pc}
 8017990:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017992:	b112      	cbz	r2, 801799a <_raise_r+0x1e>
 8017994:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017998:	b94b      	cbnz	r3, 80179ae <_raise_r+0x32>
 801799a:	4620      	mov	r0, r4
 801799c:	f000 f830 	bl	8017a00 <_getpid_r>
 80179a0:	462a      	mov	r2, r5
 80179a2:	4601      	mov	r1, r0
 80179a4:	4620      	mov	r0, r4
 80179a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179aa:	f000 b817 	b.w	80179dc <_kill_r>
 80179ae:	2b01      	cmp	r3, #1
 80179b0:	d00a      	beq.n	80179c8 <_raise_r+0x4c>
 80179b2:	1c59      	adds	r1, r3, #1
 80179b4:	d103      	bne.n	80179be <_raise_r+0x42>
 80179b6:	2316      	movs	r3, #22
 80179b8:	6003      	str	r3, [r0, #0]
 80179ba:	2001      	movs	r0, #1
 80179bc:	e7e7      	b.n	801798e <_raise_r+0x12>
 80179be:	2400      	movs	r4, #0
 80179c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80179c4:	4628      	mov	r0, r5
 80179c6:	4798      	blx	r3
 80179c8:	2000      	movs	r0, #0
 80179ca:	e7e0      	b.n	801798e <_raise_r+0x12>

080179cc <raise>:
 80179cc:	4b02      	ldr	r3, [pc, #8]	; (80179d8 <raise+0xc>)
 80179ce:	4601      	mov	r1, r0
 80179d0:	6818      	ldr	r0, [r3, #0]
 80179d2:	f7ff bfd3 	b.w	801797c <_raise_r>
 80179d6:	bf00      	nop
 80179d8:	200002f0 	.word	0x200002f0

080179dc <_kill_r>:
 80179dc:	b538      	push	{r3, r4, r5, lr}
 80179de:	4d07      	ldr	r5, [pc, #28]	; (80179fc <_kill_r+0x20>)
 80179e0:	2300      	movs	r3, #0
 80179e2:	4604      	mov	r4, r0
 80179e4:	4608      	mov	r0, r1
 80179e6:	4611      	mov	r1, r2
 80179e8:	602b      	str	r3, [r5, #0]
 80179ea:	f7ed f96b 	bl	8004cc4 <_kill>
 80179ee:	1c43      	adds	r3, r0, #1
 80179f0:	d102      	bne.n	80179f8 <_kill_r+0x1c>
 80179f2:	682b      	ldr	r3, [r5, #0]
 80179f4:	b103      	cbz	r3, 80179f8 <_kill_r+0x1c>
 80179f6:	6023      	str	r3, [r4, #0]
 80179f8:	bd38      	pop	{r3, r4, r5, pc}
 80179fa:	bf00      	nop
 80179fc:	2000238c 	.word	0x2000238c

08017a00 <_getpid_r>:
 8017a00:	f7ed b958 	b.w	8004cb4 <_getpid>

08017a04 <_malloc_usable_size_r>:
 8017a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a08:	1f18      	subs	r0, r3, #4
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	bfbc      	itt	lt
 8017a0e:	580b      	ldrlt	r3, [r1, r0]
 8017a10:	18c0      	addlt	r0, r0, r3
 8017a12:	4770      	bx	lr

08017a14 <__swhatbuf_r>:
 8017a14:	b570      	push	{r4, r5, r6, lr}
 8017a16:	460c      	mov	r4, r1
 8017a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a1c:	2900      	cmp	r1, #0
 8017a1e:	b096      	sub	sp, #88	; 0x58
 8017a20:	4615      	mov	r5, r2
 8017a22:	461e      	mov	r6, r3
 8017a24:	da0d      	bge.n	8017a42 <__swhatbuf_r+0x2e>
 8017a26:	89a3      	ldrh	r3, [r4, #12]
 8017a28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017a2c:	f04f 0100 	mov.w	r1, #0
 8017a30:	bf0c      	ite	eq
 8017a32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017a36:	2340      	movne	r3, #64	; 0x40
 8017a38:	2000      	movs	r0, #0
 8017a3a:	6031      	str	r1, [r6, #0]
 8017a3c:	602b      	str	r3, [r5, #0]
 8017a3e:	b016      	add	sp, #88	; 0x58
 8017a40:	bd70      	pop	{r4, r5, r6, pc}
 8017a42:	466a      	mov	r2, sp
 8017a44:	f000 f848 	bl	8017ad8 <_fstat_r>
 8017a48:	2800      	cmp	r0, #0
 8017a4a:	dbec      	blt.n	8017a26 <__swhatbuf_r+0x12>
 8017a4c:	9901      	ldr	r1, [sp, #4]
 8017a4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017a52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017a56:	4259      	negs	r1, r3
 8017a58:	4159      	adcs	r1, r3
 8017a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a5e:	e7eb      	b.n	8017a38 <__swhatbuf_r+0x24>

08017a60 <__smakebuf_r>:
 8017a60:	898b      	ldrh	r3, [r1, #12]
 8017a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a64:	079d      	lsls	r5, r3, #30
 8017a66:	4606      	mov	r6, r0
 8017a68:	460c      	mov	r4, r1
 8017a6a:	d507      	bpl.n	8017a7c <__smakebuf_r+0x1c>
 8017a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017a70:	6023      	str	r3, [r4, #0]
 8017a72:	6123      	str	r3, [r4, #16]
 8017a74:	2301      	movs	r3, #1
 8017a76:	6163      	str	r3, [r4, #20]
 8017a78:	b002      	add	sp, #8
 8017a7a:	bd70      	pop	{r4, r5, r6, pc}
 8017a7c:	ab01      	add	r3, sp, #4
 8017a7e:	466a      	mov	r2, sp
 8017a80:	f7ff ffc8 	bl	8017a14 <__swhatbuf_r>
 8017a84:	9900      	ldr	r1, [sp, #0]
 8017a86:	4605      	mov	r5, r0
 8017a88:	4630      	mov	r0, r6
 8017a8a:	f7fb fb7d 	bl	8013188 <_malloc_r>
 8017a8e:	b948      	cbnz	r0, 8017aa4 <__smakebuf_r+0x44>
 8017a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a94:	059a      	lsls	r2, r3, #22
 8017a96:	d4ef      	bmi.n	8017a78 <__smakebuf_r+0x18>
 8017a98:	f023 0303 	bic.w	r3, r3, #3
 8017a9c:	f043 0302 	orr.w	r3, r3, #2
 8017aa0:	81a3      	strh	r3, [r4, #12]
 8017aa2:	e7e3      	b.n	8017a6c <__smakebuf_r+0xc>
 8017aa4:	89a3      	ldrh	r3, [r4, #12]
 8017aa6:	6020      	str	r0, [r4, #0]
 8017aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017aac:	81a3      	strh	r3, [r4, #12]
 8017aae:	9b00      	ldr	r3, [sp, #0]
 8017ab0:	6163      	str	r3, [r4, #20]
 8017ab2:	9b01      	ldr	r3, [sp, #4]
 8017ab4:	6120      	str	r0, [r4, #16]
 8017ab6:	b15b      	cbz	r3, 8017ad0 <__smakebuf_r+0x70>
 8017ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017abc:	4630      	mov	r0, r6
 8017abe:	f000 f81d 	bl	8017afc <_isatty_r>
 8017ac2:	b128      	cbz	r0, 8017ad0 <__smakebuf_r+0x70>
 8017ac4:	89a3      	ldrh	r3, [r4, #12]
 8017ac6:	f023 0303 	bic.w	r3, r3, #3
 8017aca:	f043 0301 	orr.w	r3, r3, #1
 8017ace:	81a3      	strh	r3, [r4, #12]
 8017ad0:	89a3      	ldrh	r3, [r4, #12]
 8017ad2:	431d      	orrs	r5, r3
 8017ad4:	81a5      	strh	r5, [r4, #12]
 8017ad6:	e7cf      	b.n	8017a78 <__smakebuf_r+0x18>

08017ad8 <_fstat_r>:
 8017ad8:	b538      	push	{r3, r4, r5, lr}
 8017ada:	4d07      	ldr	r5, [pc, #28]	; (8017af8 <_fstat_r+0x20>)
 8017adc:	2300      	movs	r3, #0
 8017ade:	4604      	mov	r4, r0
 8017ae0:	4608      	mov	r0, r1
 8017ae2:	4611      	mov	r1, r2
 8017ae4:	602b      	str	r3, [r5, #0]
 8017ae6:	f7ed f94c 	bl	8004d82 <_fstat>
 8017aea:	1c43      	adds	r3, r0, #1
 8017aec:	d102      	bne.n	8017af4 <_fstat_r+0x1c>
 8017aee:	682b      	ldr	r3, [r5, #0]
 8017af0:	b103      	cbz	r3, 8017af4 <_fstat_r+0x1c>
 8017af2:	6023      	str	r3, [r4, #0]
 8017af4:	bd38      	pop	{r3, r4, r5, pc}
 8017af6:	bf00      	nop
 8017af8:	2000238c 	.word	0x2000238c

08017afc <_isatty_r>:
 8017afc:	b538      	push	{r3, r4, r5, lr}
 8017afe:	4d06      	ldr	r5, [pc, #24]	; (8017b18 <_isatty_r+0x1c>)
 8017b00:	2300      	movs	r3, #0
 8017b02:	4604      	mov	r4, r0
 8017b04:	4608      	mov	r0, r1
 8017b06:	602b      	str	r3, [r5, #0]
 8017b08:	f7ed f94b 	bl	8004da2 <_isatty>
 8017b0c:	1c43      	adds	r3, r0, #1
 8017b0e:	d102      	bne.n	8017b16 <_isatty_r+0x1a>
 8017b10:	682b      	ldr	r3, [r5, #0]
 8017b12:	b103      	cbz	r3, 8017b16 <_isatty_r+0x1a>
 8017b14:	6023      	str	r3, [r4, #0]
 8017b16:	bd38      	pop	{r3, r4, r5, pc}
 8017b18:	2000238c 	.word	0x2000238c
 8017b1c:	00000000 	.word	0x00000000

08017b20 <cos>:
 8017b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b22:	ec53 2b10 	vmov	r2, r3, d0
 8017b26:	4826      	ldr	r0, [pc, #152]	; (8017bc0 <cos+0xa0>)
 8017b28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017b2c:	4281      	cmp	r1, r0
 8017b2e:	dc06      	bgt.n	8017b3e <cos+0x1e>
 8017b30:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8017bb8 <cos+0x98>
 8017b34:	b005      	add	sp, #20
 8017b36:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b3a:	f000 b961 	b.w	8017e00 <__kernel_cos>
 8017b3e:	4821      	ldr	r0, [pc, #132]	; (8017bc4 <cos+0xa4>)
 8017b40:	4281      	cmp	r1, r0
 8017b42:	dd09      	ble.n	8017b58 <cos+0x38>
 8017b44:	ee10 0a10 	vmov	r0, s0
 8017b48:	4619      	mov	r1, r3
 8017b4a:	f7e8 fb9d 	bl	8000288 <__aeabi_dsub>
 8017b4e:	ec41 0b10 	vmov	d0, r0, r1
 8017b52:	b005      	add	sp, #20
 8017b54:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b58:	4668      	mov	r0, sp
 8017b5a:	f000 fad9 	bl	8018110 <__ieee754_rem_pio2>
 8017b5e:	f000 0003 	and.w	r0, r0, #3
 8017b62:	2801      	cmp	r0, #1
 8017b64:	d00b      	beq.n	8017b7e <cos+0x5e>
 8017b66:	2802      	cmp	r0, #2
 8017b68:	d016      	beq.n	8017b98 <cos+0x78>
 8017b6a:	b9e0      	cbnz	r0, 8017ba6 <cos+0x86>
 8017b6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017b70:	ed9d 0b00 	vldr	d0, [sp]
 8017b74:	f000 f944 	bl	8017e00 <__kernel_cos>
 8017b78:	ec51 0b10 	vmov	r0, r1, d0
 8017b7c:	e7e7      	b.n	8017b4e <cos+0x2e>
 8017b7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017b82:	ed9d 0b00 	vldr	d0, [sp]
 8017b86:	f000 fa03 	bl	8017f90 <__kernel_sin>
 8017b8a:	ec53 2b10 	vmov	r2, r3, d0
 8017b8e:	ee10 0a10 	vmov	r0, s0
 8017b92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017b96:	e7da      	b.n	8017b4e <cos+0x2e>
 8017b98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017b9c:	ed9d 0b00 	vldr	d0, [sp]
 8017ba0:	f000 f92e 	bl	8017e00 <__kernel_cos>
 8017ba4:	e7f1      	b.n	8017b8a <cos+0x6a>
 8017ba6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017baa:	ed9d 0b00 	vldr	d0, [sp]
 8017bae:	2001      	movs	r0, #1
 8017bb0:	f000 f9ee 	bl	8017f90 <__kernel_sin>
 8017bb4:	e7e0      	b.n	8017b78 <cos+0x58>
 8017bb6:	bf00      	nop
	...
 8017bc0:	3fe921fb 	.word	0x3fe921fb
 8017bc4:	7fefffff 	.word	0x7fefffff

08017bc8 <sin>:
 8017bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bca:	ec53 2b10 	vmov	r2, r3, d0
 8017bce:	4828      	ldr	r0, [pc, #160]	; (8017c70 <sin+0xa8>)
 8017bd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017bd4:	4281      	cmp	r1, r0
 8017bd6:	dc07      	bgt.n	8017be8 <sin+0x20>
 8017bd8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8017c68 <sin+0xa0>
 8017bdc:	2000      	movs	r0, #0
 8017bde:	b005      	add	sp, #20
 8017be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017be4:	f000 b9d4 	b.w	8017f90 <__kernel_sin>
 8017be8:	4822      	ldr	r0, [pc, #136]	; (8017c74 <sin+0xac>)
 8017bea:	4281      	cmp	r1, r0
 8017bec:	dd09      	ble.n	8017c02 <sin+0x3a>
 8017bee:	ee10 0a10 	vmov	r0, s0
 8017bf2:	4619      	mov	r1, r3
 8017bf4:	f7e8 fb48 	bl	8000288 <__aeabi_dsub>
 8017bf8:	ec41 0b10 	vmov	d0, r0, r1
 8017bfc:	b005      	add	sp, #20
 8017bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c02:	4668      	mov	r0, sp
 8017c04:	f000 fa84 	bl	8018110 <__ieee754_rem_pio2>
 8017c08:	f000 0003 	and.w	r0, r0, #3
 8017c0c:	2801      	cmp	r0, #1
 8017c0e:	d00c      	beq.n	8017c2a <sin+0x62>
 8017c10:	2802      	cmp	r0, #2
 8017c12:	d011      	beq.n	8017c38 <sin+0x70>
 8017c14:	b9f0      	cbnz	r0, 8017c54 <sin+0x8c>
 8017c16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c1a:	ed9d 0b00 	vldr	d0, [sp]
 8017c1e:	2001      	movs	r0, #1
 8017c20:	f000 f9b6 	bl	8017f90 <__kernel_sin>
 8017c24:	ec51 0b10 	vmov	r0, r1, d0
 8017c28:	e7e6      	b.n	8017bf8 <sin+0x30>
 8017c2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c2e:	ed9d 0b00 	vldr	d0, [sp]
 8017c32:	f000 f8e5 	bl	8017e00 <__kernel_cos>
 8017c36:	e7f5      	b.n	8017c24 <sin+0x5c>
 8017c38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c3c:	ed9d 0b00 	vldr	d0, [sp]
 8017c40:	2001      	movs	r0, #1
 8017c42:	f000 f9a5 	bl	8017f90 <__kernel_sin>
 8017c46:	ec53 2b10 	vmov	r2, r3, d0
 8017c4a:	ee10 0a10 	vmov	r0, s0
 8017c4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017c52:	e7d1      	b.n	8017bf8 <sin+0x30>
 8017c54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c58:	ed9d 0b00 	vldr	d0, [sp]
 8017c5c:	f000 f8d0 	bl	8017e00 <__kernel_cos>
 8017c60:	e7f1      	b.n	8017c46 <sin+0x7e>
 8017c62:	bf00      	nop
 8017c64:	f3af 8000 	nop.w
	...
 8017c70:	3fe921fb 	.word	0x3fe921fb
 8017c74:	7fefffff 	.word	0x7fefffff

08017c78 <expf>:
 8017c78:	b508      	push	{r3, lr}
 8017c7a:	ed2d 8b02 	vpush	{d8}
 8017c7e:	eef0 8a40 	vmov.f32	s17, s0
 8017c82:	f000 fc55 	bl	8018530 <__ieee754_expf>
 8017c86:	eeb0 8a40 	vmov.f32	s16, s0
 8017c8a:	eeb0 0a68 	vmov.f32	s0, s17
 8017c8e:	f000 f829 	bl	8017ce4 <finitef>
 8017c92:	b160      	cbz	r0, 8017cae <expf+0x36>
 8017c94:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8017cd4 <expf+0x5c>
 8017c98:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ca0:	dd0a      	ble.n	8017cb8 <expf+0x40>
 8017ca2:	f7fd fab9 	bl	8015218 <__errno>
 8017ca6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8017cd8 <expf+0x60>
 8017caa:	2322      	movs	r3, #34	; 0x22
 8017cac:	6003      	str	r3, [r0, #0]
 8017cae:	eeb0 0a48 	vmov.f32	s0, s16
 8017cb2:	ecbd 8b02 	vpop	{d8}
 8017cb6:	bd08      	pop	{r3, pc}
 8017cb8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017cdc <expf+0x64>
 8017cbc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc4:	d5f3      	bpl.n	8017cae <expf+0x36>
 8017cc6:	f7fd faa7 	bl	8015218 <__errno>
 8017cca:	2322      	movs	r3, #34	; 0x22
 8017ccc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8017ce0 <expf+0x68>
 8017cd0:	6003      	str	r3, [r0, #0]
 8017cd2:	e7ec      	b.n	8017cae <expf+0x36>
 8017cd4:	42b17217 	.word	0x42b17217
 8017cd8:	7f800000 	.word	0x7f800000
 8017cdc:	c2cff1b5 	.word	0xc2cff1b5
 8017ce0:	00000000 	.word	0x00000000

08017ce4 <finitef>:
 8017ce4:	b082      	sub	sp, #8
 8017ce6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017cea:	9801      	ldr	r0, [sp, #4]
 8017cec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017cf0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8017cf4:	bfac      	ite	ge
 8017cf6:	2000      	movge	r0, #0
 8017cf8:	2001      	movlt	r0, #1
 8017cfa:	b002      	add	sp, #8
 8017cfc:	4770      	bx	lr
	...

08017d00 <floor>:
 8017d00:	ec51 0b10 	vmov	r0, r1, d0
 8017d04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d0c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8017d10:	2e13      	cmp	r6, #19
 8017d12:	ee10 5a10 	vmov	r5, s0
 8017d16:	ee10 8a10 	vmov	r8, s0
 8017d1a:	460c      	mov	r4, r1
 8017d1c:	dc31      	bgt.n	8017d82 <floor+0x82>
 8017d1e:	2e00      	cmp	r6, #0
 8017d20:	da14      	bge.n	8017d4c <floor+0x4c>
 8017d22:	a333      	add	r3, pc, #204	; (adr r3, 8017df0 <floor+0xf0>)
 8017d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d28:	f7e8 fab0 	bl	800028c <__adddf3>
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	2300      	movs	r3, #0
 8017d30:	f7e8 fef2 	bl	8000b18 <__aeabi_dcmpgt>
 8017d34:	b138      	cbz	r0, 8017d46 <floor+0x46>
 8017d36:	2c00      	cmp	r4, #0
 8017d38:	da53      	bge.n	8017de2 <floor+0xe2>
 8017d3a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8017d3e:	4325      	orrs	r5, r4
 8017d40:	d052      	beq.n	8017de8 <floor+0xe8>
 8017d42:	4c2d      	ldr	r4, [pc, #180]	; (8017df8 <floor+0xf8>)
 8017d44:	2500      	movs	r5, #0
 8017d46:	4621      	mov	r1, r4
 8017d48:	4628      	mov	r0, r5
 8017d4a:	e024      	b.n	8017d96 <floor+0x96>
 8017d4c:	4f2b      	ldr	r7, [pc, #172]	; (8017dfc <floor+0xfc>)
 8017d4e:	4137      	asrs	r7, r6
 8017d50:	ea01 0307 	and.w	r3, r1, r7
 8017d54:	4303      	orrs	r3, r0
 8017d56:	d01e      	beq.n	8017d96 <floor+0x96>
 8017d58:	a325      	add	r3, pc, #148	; (adr r3, 8017df0 <floor+0xf0>)
 8017d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d5e:	f7e8 fa95 	bl	800028c <__adddf3>
 8017d62:	2200      	movs	r2, #0
 8017d64:	2300      	movs	r3, #0
 8017d66:	f7e8 fed7 	bl	8000b18 <__aeabi_dcmpgt>
 8017d6a:	2800      	cmp	r0, #0
 8017d6c:	d0eb      	beq.n	8017d46 <floor+0x46>
 8017d6e:	2c00      	cmp	r4, #0
 8017d70:	bfbe      	ittt	lt
 8017d72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017d76:	4133      	asrlt	r3, r6
 8017d78:	18e4      	addlt	r4, r4, r3
 8017d7a:	ea24 0407 	bic.w	r4, r4, r7
 8017d7e:	2500      	movs	r5, #0
 8017d80:	e7e1      	b.n	8017d46 <floor+0x46>
 8017d82:	2e33      	cmp	r6, #51	; 0x33
 8017d84:	dd0b      	ble.n	8017d9e <floor+0x9e>
 8017d86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017d8a:	d104      	bne.n	8017d96 <floor+0x96>
 8017d8c:	ee10 2a10 	vmov	r2, s0
 8017d90:	460b      	mov	r3, r1
 8017d92:	f7e8 fa7b 	bl	800028c <__adddf3>
 8017d96:	ec41 0b10 	vmov	d0, r0, r1
 8017d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d9e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8017da2:	f04f 37ff 	mov.w	r7, #4294967295
 8017da6:	40df      	lsrs	r7, r3
 8017da8:	4238      	tst	r0, r7
 8017daa:	d0f4      	beq.n	8017d96 <floor+0x96>
 8017dac:	a310      	add	r3, pc, #64	; (adr r3, 8017df0 <floor+0xf0>)
 8017dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db2:	f7e8 fa6b 	bl	800028c <__adddf3>
 8017db6:	2200      	movs	r2, #0
 8017db8:	2300      	movs	r3, #0
 8017dba:	f7e8 fead 	bl	8000b18 <__aeabi_dcmpgt>
 8017dbe:	2800      	cmp	r0, #0
 8017dc0:	d0c1      	beq.n	8017d46 <floor+0x46>
 8017dc2:	2c00      	cmp	r4, #0
 8017dc4:	da0a      	bge.n	8017ddc <floor+0xdc>
 8017dc6:	2e14      	cmp	r6, #20
 8017dc8:	d101      	bne.n	8017dce <floor+0xce>
 8017dca:	3401      	adds	r4, #1
 8017dcc:	e006      	b.n	8017ddc <floor+0xdc>
 8017dce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017dd2:	2301      	movs	r3, #1
 8017dd4:	40b3      	lsls	r3, r6
 8017dd6:	441d      	add	r5, r3
 8017dd8:	45a8      	cmp	r8, r5
 8017dda:	d8f6      	bhi.n	8017dca <floor+0xca>
 8017ddc:	ea25 0507 	bic.w	r5, r5, r7
 8017de0:	e7b1      	b.n	8017d46 <floor+0x46>
 8017de2:	2500      	movs	r5, #0
 8017de4:	462c      	mov	r4, r5
 8017de6:	e7ae      	b.n	8017d46 <floor+0x46>
 8017de8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8017dec:	e7ab      	b.n	8017d46 <floor+0x46>
 8017dee:	bf00      	nop
 8017df0:	8800759c 	.word	0x8800759c
 8017df4:	7e37e43c 	.word	0x7e37e43c
 8017df8:	bff00000 	.word	0xbff00000
 8017dfc:	000fffff 	.word	0x000fffff

08017e00 <__kernel_cos>:
 8017e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e04:	ec57 6b10 	vmov	r6, r7, d0
 8017e08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8017e0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8017e10:	ed8d 1b00 	vstr	d1, [sp]
 8017e14:	da07      	bge.n	8017e26 <__kernel_cos+0x26>
 8017e16:	ee10 0a10 	vmov	r0, s0
 8017e1a:	4639      	mov	r1, r7
 8017e1c:	f7e8 fe9c 	bl	8000b58 <__aeabi_d2iz>
 8017e20:	2800      	cmp	r0, #0
 8017e22:	f000 8088 	beq.w	8017f36 <__kernel_cos+0x136>
 8017e26:	4632      	mov	r2, r6
 8017e28:	463b      	mov	r3, r7
 8017e2a:	4630      	mov	r0, r6
 8017e2c:	4639      	mov	r1, r7
 8017e2e:	f7e8 fbe3 	bl	80005f8 <__aeabi_dmul>
 8017e32:	4b51      	ldr	r3, [pc, #324]	; (8017f78 <__kernel_cos+0x178>)
 8017e34:	2200      	movs	r2, #0
 8017e36:	4604      	mov	r4, r0
 8017e38:	460d      	mov	r5, r1
 8017e3a:	f7e8 fbdd 	bl	80005f8 <__aeabi_dmul>
 8017e3e:	a340      	add	r3, pc, #256	; (adr r3, 8017f40 <__kernel_cos+0x140>)
 8017e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e44:	4682      	mov	sl, r0
 8017e46:	468b      	mov	fp, r1
 8017e48:	4620      	mov	r0, r4
 8017e4a:	4629      	mov	r1, r5
 8017e4c:	f7e8 fbd4 	bl	80005f8 <__aeabi_dmul>
 8017e50:	a33d      	add	r3, pc, #244	; (adr r3, 8017f48 <__kernel_cos+0x148>)
 8017e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e56:	f7e8 fa19 	bl	800028c <__adddf3>
 8017e5a:	4622      	mov	r2, r4
 8017e5c:	462b      	mov	r3, r5
 8017e5e:	f7e8 fbcb 	bl	80005f8 <__aeabi_dmul>
 8017e62:	a33b      	add	r3, pc, #236	; (adr r3, 8017f50 <__kernel_cos+0x150>)
 8017e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e68:	f7e8 fa0e 	bl	8000288 <__aeabi_dsub>
 8017e6c:	4622      	mov	r2, r4
 8017e6e:	462b      	mov	r3, r5
 8017e70:	f7e8 fbc2 	bl	80005f8 <__aeabi_dmul>
 8017e74:	a338      	add	r3, pc, #224	; (adr r3, 8017f58 <__kernel_cos+0x158>)
 8017e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e7a:	f7e8 fa07 	bl	800028c <__adddf3>
 8017e7e:	4622      	mov	r2, r4
 8017e80:	462b      	mov	r3, r5
 8017e82:	f7e8 fbb9 	bl	80005f8 <__aeabi_dmul>
 8017e86:	a336      	add	r3, pc, #216	; (adr r3, 8017f60 <__kernel_cos+0x160>)
 8017e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e8c:	f7e8 f9fc 	bl	8000288 <__aeabi_dsub>
 8017e90:	4622      	mov	r2, r4
 8017e92:	462b      	mov	r3, r5
 8017e94:	f7e8 fbb0 	bl	80005f8 <__aeabi_dmul>
 8017e98:	a333      	add	r3, pc, #204	; (adr r3, 8017f68 <__kernel_cos+0x168>)
 8017e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e9e:	f7e8 f9f5 	bl	800028c <__adddf3>
 8017ea2:	4622      	mov	r2, r4
 8017ea4:	462b      	mov	r3, r5
 8017ea6:	f7e8 fba7 	bl	80005f8 <__aeabi_dmul>
 8017eaa:	4622      	mov	r2, r4
 8017eac:	462b      	mov	r3, r5
 8017eae:	f7e8 fba3 	bl	80005f8 <__aeabi_dmul>
 8017eb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017eb6:	4604      	mov	r4, r0
 8017eb8:	460d      	mov	r5, r1
 8017eba:	4630      	mov	r0, r6
 8017ebc:	4639      	mov	r1, r7
 8017ebe:	f7e8 fb9b 	bl	80005f8 <__aeabi_dmul>
 8017ec2:	460b      	mov	r3, r1
 8017ec4:	4602      	mov	r2, r0
 8017ec6:	4629      	mov	r1, r5
 8017ec8:	4620      	mov	r0, r4
 8017eca:	f7e8 f9dd 	bl	8000288 <__aeabi_dsub>
 8017ece:	4b2b      	ldr	r3, [pc, #172]	; (8017f7c <__kernel_cos+0x17c>)
 8017ed0:	4598      	cmp	r8, r3
 8017ed2:	4606      	mov	r6, r0
 8017ed4:	460f      	mov	r7, r1
 8017ed6:	dc10      	bgt.n	8017efa <__kernel_cos+0xfa>
 8017ed8:	4602      	mov	r2, r0
 8017eda:	460b      	mov	r3, r1
 8017edc:	4650      	mov	r0, sl
 8017ede:	4659      	mov	r1, fp
 8017ee0:	f7e8 f9d2 	bl	8000288 <__aeabi_dsub>
 8017ee4:	460b      	mov	r3, r1
 8017ee6:	4926      	ldr	r1, [pc, #152]	; (8017f80 <__kernel_cos+0x180>)
 8017ee8:	4602      	mov	r2, r0
 8017eea:	2000      	movs	r0, #0
 8017eec:	f7e8 f9cc 	bl	8000288 <__aeabi_dsub>
 8017ef0:	ec41 0b10 	vmov	d0, r0, r1
 8017ef4:	b003      	add	sp, #12
 8017ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017efa:	4b22      	ldr	r3, [pc, #136]	; (8017f84 <__kernel_cos+0x184>)
 8017efc:	4920      	ldr	r1, [pc, #128]	; (8017f80 <__kernel_cos+0x180>)
 8017efe:	4598      	cmp	r8, r3
 8017f00:	bfcc      	ite	gt
 8017f02:	4d21      	ldrgt	r5, [pc, #132]	; (8017f88 <__kernel_cos+0x188>)
 8017f04:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8017f08:	2400      	movs	r4, #0
 8017f0a:	4622      	mov	r2, r4
 8017f0c:	462b      	mov	r3, r5
 8017f0e:	2000      	movs	r0, #0
 8017f10:	f7e8 f9ba 	bl	8000288 <__aeabi_dsub>
 8017f14:	4622      	mov	r2, r4
 8017f16:	4680      	mov	r8, r0
 8017f18:	4689      	mov	r9, r1
 8017f1a:	462b      	mov	r3, r5
 8017f1c:	4650      	mov	r0, sl
 8017f1e:	4659      	mov	r1, fp
 8017f20:	f7e8 f9b2 	bl	8000288 <__aeabi_dsub>
 8017f24:	4632      	mov	r2, r6
 8017f26:	463b      	mov	r3, r7
 8017f28:	f7e8 f9ae 	bl	8000288 <__aeabi_dsub>
 8017f2c:	4602      	mov	r2, r0
 8017f2e:	460b      	mov	r3, r1
 8017f30:	4640      	mov	r0, r8
 8017f32:	4649      	mov	r1, r9
 8017f34:	e7da      	b.n	8017eec <__kernel_cos+0xec>
 8017f36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8017f70 <__kernel_cos+0x170>
 8017f3a:	e7db      	b.n	8017ef4 <__kernel_cos+0xf4>
 8017f3c:	f3af 8000 	nop.w
 8017f40:	be8838d4 	.word	0xbe8838d4
 8017f44:	bda8fae9 	.word	0xbda8fae9
 8017f48:	bdb4b1c4 	.word	0xbdb4b1c4
 8017f4c:	3e21ee9e 	.word	0x3e21ee9e
 8017f50:	809c52ad 	.word	0x809c52ad
 8017f54:	3e927e4f 	.word	0x3e927e4f
 8017f58:	19cb1590 	.word	0x19cb1590
 8017f5c:	3efa01a0 	.word	0x3efa01a0
 8017f60:	16c15177 	.word	0x16c15177
 8017f64:	3f56c16c 	.word	0x3f56c16c
 8017f68:	5555554c 	.word	0x5555554c
 8017f6c:	3fa55555 	.word	0x3fa55555
 8017f70:	00000000 	.word	0x00000000
 8017f74:	3ff00000 	.word	0x3ff00000
 8017f78:	3fe00000 	.word	0x3fe00000
 8017f7c:	3fd33332 	.word	0x3fd33332
 8017f80:	3ff00000 	.word	0x3ff00000
 8017f84:	3fe90000 	.word	0x3fe90000
 8017f88:	3fd20000 	.word	0x3fd20000
 8017f8c:	00000000 	.word	0x00000000

08017f90 <__kernel_sin>:
 8017f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f94:	ed2d 8b04 	vpush	{d8-d9}
 8017f98:	eeb0 8a41 	vmov.f32	s16, s2
 8017f9c:	eef0 8a61 	vmov.f32	s17, s3
 8017fa0:	ec55 4b10 	vmov	r4, r5, d0
 8017fa4:	b083      	sub	sp, #12
 8017fa6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017faa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8017fae:	9001      	str	r0, [sp, #4]
 8017fb0:	da06      	bge.n	8017fc0 <__kernel_sin+0x30>
 8017fb2:	ee10 0a10 	vmov	r0, s0
 8017fb6:	4629      	mov	r1, r5
 8017fb8:	f7e8 fdce 	bl	8000b58 <__aeabi_d2iz>
 8017fbc:	2800      	cmp	r0, #0
 8017fbe:	d051      	beq.n	8018064 <__kernel_sin+0xd4>
 8017fc0:	4622      	mov	r2, r4
 8017fc2:	462b      	mov	r3, r5
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	4629      	mov	r1, r5
 8017fc8:	f7e8 fb16 	bl	80005f8 <__aeabi_dmul>
 8017fcc:	4682      	mov	sl, r0
 8017fce:	468b      	mov	fp, r1
 8017fd0:	4602      	mov	r2, r0
 8017fd2:	460b      	mov	r3, r1
 8017fd4:	4620      	mov	r0, r4
 8017fd6:	4629      	mov	r1, r5
 8017fd8:	f7e8 fb0e 	bl	80005f8 <__aeabi_dmul>
 8017fdc:	a341      	add	r3, pc, #260	; (adr r3, 80180e4 <__kernel_sin+0x154>)
 8017fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe2:	4680      	mov	r8, r0
 8017fe4:	4689      	mov	r9, r1
 8017fe6:	4650      	mov	r0, sl
 8017fe8:	4659      	mov	r1, fp
 8017fea:	f7e8 fb05 	bl	80005f8 <__aeabi_dmul>
 8017fee:	a33f      	add	r3, pc, #252	; (adr r3, 80180ec <__kernel_sin+0x15c>)
 8017ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff4:	f7e8 f948 	bl	8000288 <__aeabi_dsub>
 8017ff8:	4652      	mov	r2, sl
 8017ffa:	465b      	mov	r3, fp
 8017ffc:	f7e8 fafc 	bl	80005f8 <__aeabi_dmul>
 8018000:	a33c      	add	r3, pc, #240	; (adr r3, 80180f4 <__kernel_sin+0x164>)
 8018002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018006:	f7e8 f941 	bl	800028c <__adddf3>
 801800a:	4652      	mov	r2, sl
 801800c:	465b      	mov	r3, fp
 801800e:	f7e8 faf3 	bl	80005f8 <__aeabi_dmul>
 8018012:	a33a      	add	r3, pc, #232	; (adr r3, 80180fc <__kernel_sin+0x16c>)
 8018014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018018:	f7e8 f936 	bl	8000288 <__aeabi_dsub>
 801801c:	4652      	mov	r2, sl
 801801e:	465b      	mov	r3, fp
 8018020:	f7e8 faea 	bl	80005f8 <__aeabi_dmul>
 8018024:	a337      	add	r3, pc, #220	; (adr r3, 8018104 <__kernel_sin+0x174>)
 8018026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801802a:	f7e8 f92f 	bl	800028c <__adddf3>
 801802e:	9b01      	ldr	r3, [sp, #4]
 8018030:	4606      	mov	r6, r0
 8018032:	460f      	mov	r7, r1
 8018034:	b9eb      	cbnz	r3, 8018072 <__kernel_sin+0xe2>
 8018036:	4602      	mov	r2, r0
 8018038:	460b      	mov	r3, r1
 801803a:	4650      	mov	r0, sl
 801803c:	4659      	mov	r1, fp
 801803e:	f7e8 fadb 	bl	80005f8 <__aeabi_dmul>
 8018042:	a325      	add	r3, pc, #148	; (adr r3, 80180d8 <__kernel_sin+0x148>)
 8018044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018048:	f7e8 f91e 	bl	8000288 <__aeabi_dsub>
 801804c:	4642      	mov	r2, r8
 801804e:	464b      	mov	r3, r9
 8018050:	f7e8 fad2 	bl	80005f8 <__aeabi_dmul>
 8018054:	4602      	mov	r2, r0
 8018056:	460b      	mov	r3, r1
 8018058:	4620      	mov	r0, r4
 801805a:	4629      	mov	r1, r5
 801805c:	f7e8 f916 	bl	800028c <__adddf3>
 8018060:	4604      	mov	r4, r0
 8018062:	460d      	mov	r5, r1
 8018064:	ec45 4b10 	vmov	d0, r4, r5
 8018068:	b003      	add	sp, #12
 801806a:	ecbd 8b04 	vpop	{d8-d9}
 801806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018072:	4b1b      	ldr	r3, [pc, #108]	; (80180e0 <__kernel_sin+0x150>)
 8018074:	ec51 0b18 	vmov	r0, r1, d8
 8018078:	2200      	movs	r2, #0
 801807a:	f7e8 fabd 	bl	80005f8 <__aeabi_dmul>
 801807e:	4632      	mov	r2, r6
 8018080:	ec41 0b19 	vmov	d9, r0, r1
 8018084:	463b      	mov	r3, r7
 8018086:	4640      	mov	r0, r8
 8018088:	4649      	mov	r1, r9
 801808a:	f7e8 fab5 	bl	80005f8 <__aeabi_dmul>
 801808e:	4602      	mov	r2, r0
 8018090:	460b      	mov	r3, r1
 8018092:	ec51 0b19 	vmov	r0, r1, d9
 8018096:	f7e8 f8f7 	bl	8000288 <__aeabi_dsub>
 801809a:	4652      	mov	r2, sl
 801809c:	465b      	mov	r3, fp
 801809e:	f7e8 faab 	bl	80005f8 <__aeabi_dmul>
 80180a2:	ec53 2b18 	vmov	r2, r3, d8
 80180a6:	f7e8 f8ef 	bl	8000288 <__aeabi_dsub>
 80180aa:	a30b      	add	r3, pc, #44	; (adr r3, 80180d8 <__kernel_sin+0x148>)
 80180ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b0:	4606      	mov	r6, r0
 80180b2:	460f      	mov	r7, r1
 80180b4:	4640      	mov	r0, r8
 80180b6:	4649      	mov	r1, r9
 80180b8:	f7e8 fa9e 	bl	80005f8 <__aeabi_dmul>
 80180bc:	4602      	mov	r2, r0
 80180be:	460b      	mov	r3, r1
 80180c0:	4630      	mov	r0, r6
 80180c2:	4639      	mov	r1, r7
 80180c4:	f7e8 f8e2 	bl	800028c <__adddf3>
 80180c8:	4602      	mov	r2, r0
 80180ca:	460b      	mov	r3, r1
 80180cc:	4620      	mov	r0, r4
 80180ce:	4629      	mov	r1, r5
 80180d0:	f7e8 f8da 	bl	8000288 <__aeabi_dsub>
 80180d4:	e7c4      	b.n	8018060 <__kernel_sin+0xd0>
 80180d6:	bf00      	nop
 80180d8:	55555549 	.word	0x55555549
 80180dc:	3fc55555 	.word	0x3fc55555
 80180e0:	3fe00000 	.word	0x3fe00000
 80180e4:	5acfd57c 	.word	0x5acfd57c
 80180e8:	3de5d93a 	.word	0x3de5d93a
 80180ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80180f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80180f4:	57b1fe7d 	.word	0x57b1fe7d
 80180f8:	3ec71de3 	.word	0x3ec71de3
 80180fc:	19c161d5 	.word	0x19c161d5
 8018100:	3f2a01a0 	.word	0x3f2a01a0
 8018104:	1110f8a6 	.word	0x1110f8a6
 8018108:	3f811111 	.word	0x3f811111
 801810c:	00000000 	.word	0x00000000

08018110 <__ieee754_rem_pio2>:
 8018110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018114:	ed2d 8b02 	vpush	{d8}
 8018118:	ec55 4b10 	vmov	r4, r5, d0
 801811c:	4bca      	ldr	r3, [pc, #808]	; (8018448 <__ieee754_rem_pio2+0x338>)
 801811e:	b08b      	sub	sp, #44	; 0x2c
 8018120:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8018124:	4598      	cmp	r8, r3
 8018126:	4682      	mov	sl, r0
 8018128:	9502      	str	r5, [sp, #8]
 801812a:	dc08      	bgt.n	801813e <__ieee754_rem_pio2+0x2e>
 801812c:	2200      	movs	r2, #0
 801812e:	2300      	movs	r3, #0
 8018130:	ed80 0b00 	vstr	d0, [r0]
 8018134:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018138:	f04f 0b00 	mov.w	fp, #0
 801813c:	e028      	b.n	8018190 <__ieee754_rem_pio2+0x80>
 801813e:	4bc3      	ldr	r3, [pc, #780]	; (801844c <__ieee754_rem_pio2+0x33c>)
 8018140:	4598      	cmp	r8, r3
 8018142:	dc78      	bgt.n	8018236 <__ieee754_rem_pio2+0x126>
 8018144:	9b02      	ldr	r3, [sp, #8]
 8018146:	4ec2      	ldr	r6, [pc, #776]	; (8018450 <__ieee754_rem_pio2+0x340>)
 8018148:	2b00      	cmp	r3, #0
 801814a:	ee10 0a10 	vmov	r0, s0
 801814e:	a3b0      	add	r3, pc, #704	; (adr r3, 8018410 <__ieee754_rem_pio2+0x300>)
 8018150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018154:	4629      	mov	r1, r5
 8018156:	dd39      	ble.n	80181cc <__ieee754_rem_pio2+0xbc>
 8018158:	f7e8 f896 	bl	8000288 <__aeabi_dsub>
 801815c:	45b0      	cmp	r8, r6
 801815e:	4604      	mov	r4, r0
 8018160:	460d      	mov	r5, r1
 8018162:	d01b      	beq.n	801819c <__ieee754_rem_pio2+0x8c>
 8018164:	a3ac      	add	r3, pc, #688	; (adr r3, 8018418 <__ieee754_rem_pio2+0x308>)
 8018166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801816a:	f7e8 f88d 	bl	8000288 <__aeabi_dsub>
 801816e:	4602      	mov	r2, r0
 8018170:	460b      	mov	r3, r1
 8018172:	e9ca 2300 	strd	r2, r3, [sl]
 8018176:	4620      	mov	r0, r4
 8018178:	4629      	mov	r1, r5
 801817a:	f7e8 f885 	bl	8000288 <__aeabi_dsub>
 801817e:	a3a6      	add	r3, pc, #664	; (adr r3, 8018418 <__ieee754_rem_pio2+0x308>)
 8018180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018184:	f7e8 f880 	bl	8000288 <__aeabi_dsub>
 8018188:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801818c:	f04f 0b01 	mov.w	fp, #1
 8018190:	4658      	mov	r0, fp
 8018192:	b00b      	add	sp, #44	; 0x2c
 8018194:	ecbd 8b02 	vpop	{d8}
 8018198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801819c:	a3a0      	add	r3, pc, #640	; (adr r3, 8018420 <__ieee754_rem_pio2+0x310>)
 801819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181a2:	f7e8 f871 	bl	8000288 <__aeabi_dsub>
 80181a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8018428 <__ieee754_rem_pio2+0x318>)
 80181a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ac:	4604      	mov	r4, r0
 80181ae:	460d      	mov	r5, r1
 80181b0:	f7e8 f86a 	bl	8000288 <__aeabi_dsub>
 80181b4:	4602      	mov	r2, r0
 80181b6:	460b      	mov	r3, r1
 80181b8:	e9ca 2300 	strd	r2, r3, [sl]
 80181bc:	4620      	mov	r0, r4
 80181be:	4629      	mov	r1, r5
 80181c0:	f7e8 f862 	bl	8000288 <__aeabi_dsub>
 80181c4:	a398      	add	r3, pc, #608	; (adr r3, 8018428 <__ieee754_rem_pio2+0x318>)
 80181c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ca:	e7db      	b.n	8018184 <__ieee754_rem_pio2+0x74>
 80181cc:	f7e8 f85e 	bl	800028c <__adddf3>
 80181d0:	45b0      	cmp	r8, r6
 80181d2:	4604      	mov	r4, r0
 80181d4:	460d      	mov	r5, r1
 80181d6:	d016      	beq.n	8018206 <__ieee754_rem_pio2+0xf6>
 80181d8:	a38f      	add	r3, pc, #572	; (adr r3, 8018418 <__ieee754_rem_pio2+0x308>)
 80181da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181de:	f7e8 f855 	bl	800028c <__adddf3>
 80181e2:	4602      	mov	r2, r0
 80181e4:	460b      	mov	r3, r1
 80181e6:	e9ca 2300 	strd	r2, r3, [sl]
 80181ea:	4620      	mov	r0, r4
 80181ec:	4629      	mov	r1, r5
 80181ee:	f7e8 f84b 	bl	8000288 <__aeabi_dsub>
 80181f2:	a389      	add	r3, pc, #548	; (adr r3, 8018418 <__ieee754_rem_pio2+0x308>)
 80181f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181f8:	f7e8 f848 	bl	800028c <__adddf3>
 80181fc:	f04f 3bff 	mov.w	fp, #4294967295
 8018200:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018204:	e7c4      	b.n	8018190 <__ieee754_rem_pio2+0x80>
 8018206:	a386      	add	r3, pc, #536	; (adr r3, 8018420 <__ieee754_rem_pio2+0x310>)
 8018208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801820c:	f7e8 f83e 	bl	800028c <__adddf3>
 8018210:	a385      	add	r3, pc, #532	; (adr r3, 8018428 <__ieee754_rem_pio2+0x318>)
 8018212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018216:	4604      	mov	r4, r0
 8018218:	460d      	mov	r5, r1
 801821a:	f7e8 f837 	bl	800028c <__adddf3>
 801821e:	4602      	mov	r2, r0
 8018220:	460b      	mov	r3, r1
 8018222:	e9ca 2300 	strd	r2, r3, [sl]
 8018226:	4620      	mov	r0, r4
 8018228:	4629      	mov	r1, r5
 801822a:	f7e8 f82d 	bl	8000288 <__aeabi_dsub>
 801822e:	a37e      	add	r3, pc, #504	; (adr r3, 8018428 <__ieee754_rem_pio2+0x318>)
 8018230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018234:	e7e0      	b.n	80181f8 <__ieee754_rem_pio2+0xe8>
 8018236:	4b87      	ldr	r3, [pc, #540]	; (8018454 <__ieee754_rem_pio2+0x344>)
 8018238:	4598      	cmp	r8, r3
 801823a:	f300 80d8 	bgt.w	80183ee <__ieee754_rem_pio2+0x2de>
 801823e:	f000 f96d 	bl	801851c <fabs>
 8018242:	ec55 4b10 	vmov	r4, r5, d0
 8018246:	ee10 0a10 	vmov	r0, s0
 801824a:	a379      	add	r3, pc, #484	; (adr r3, 8018430 <__ieee754_rem_pio2+0x320>)
 801824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018250:	4629      	mov	r1, r5
 8018252:	f7e8 f9d1 	bl	80005f8 <__aeabi_dmul>
 8018256:	4b80      	ldr	r3, [pc, #512]	; (8018458 <__ieee754_rem_pio2+0x348>)
 8018258:	2200      	movs	r2, #0
 801825a:	f7e8 f817 	bl	800028c <__adddf3>
 801825e:	f7e8 fc7b 	bl	8000b58 <__aeabi_d2iz>
 8018262:	4683      	mov	fp, r0
 8018264:	f7e8 f95e 	bl	8000524 <__aeabi_i2d>
 8018268:	4602      	mov	r2, r0
 801826a:	460b      	mov	r3, r1
 801826c:	ec43 2b18 	vmov	d8, r2, r3
 8018270:	a367      	add	r3, pc, #412	; (adr r3, 8018410 <__ieee754_rem_pio2+0x300>)
 8018272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018276:	f7e8 f9bf 	bl	80005f8 <__aeabi_dmul>
 801827a:	4602      	mov	r2, r0
 801827c:	460b      	mov	r3, r1
 801827e:	4620      	mov	r0, r4
 8018280:	4629      	mov	r1, r5
 8018282:	f7e8 f801 	bl	8000288 <__aeabi_dsub>
 8018286:	a364      	add	r3, pc, #400	; (adr r3, 8018418 <__ieee754_rem_pio2+0x308>)
 8018288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801828c:	4606      	mov	r6, r0
 801828e:	460f      	mov	r7, r1
 8018290:	ec51 0b18 	vmov	r0, r1, d8
 8018294:	f7e8 f9b0 	bl	80005f8 <__aeabi_dmul>
 8018298:	f1bb 0f1f 	cmp.w	fp, #31
 801829c:	4604      	mov	r4, r0
 801829e:	460d      	mov	r5, r1
 80182a0:	dc0d      	bgt.n	80182be <__ieee754_rem_pio2+0x1ae>
 80182a2:	4b6e      	ldr	r3, [pc, #440]	; (801845c <__ieee754_rem_pio2+0x34c>)
 80182a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80182a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182ac:	4543      	cmp	r3, r8
 80182ae:	d006      	beq.n	80182be <__ieee754_rem_pio2+0x1ae>
 80182b0:	4622      	mov	r2, r4
 80182b2:	462b      	mov	r3, r5
 80182b4:	4630      	mov	r0, r6
 80182b6:	4639      	mov	r1, r7
 80182b8:	f7e7 ffe6 	bl	8000288 <__aeabi_dsub>
 80182bc:	e00e      	b.n	80182dc <__ieee754_rem_pio2+0x1cc>
 80182be:	462b      	mov	r3, r5
 80182c0:	4622      	mov	r2, r4
 80182c2:	4630      	mov	r0, r6
 80182c4:	4639      	mov	r1, r7
 80182c6:	f7e7 ffdf 	bl	8000288 <__aeabi_dsub>
 80182ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80182ce:	9303      	str	r3, [sp, #12]
 80182d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80182d4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80182d8:	2b10      	cmp	r3, #16
 80182da:	dc02      	bgt.n	80182e2 <__ieee754_rem_pio2+0x1d2>
 80182dc:	e9ca 0100 	strd	r0, r1, [sl]
 80182e0:	e039      	b.n	8018356 <__ieee754_rem_pio2+0x246>
 80182e2:	a34f      	add	r3, pc, #316	; (adr r3, 8018420 <__ieee754_rem_pio2+0x310>)
 80182e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182e8:	ec51 0b18 	vmov	r0, r1, d8
 80182ec:	f7e8 f984 	bl	80005f8 <__aeabi_dmul>
 80182f0:	4604      	mov	r4, r0
 80182f2:	460d      	mov	r5, r1
 80182f4:	4602      	mov	r2, r0
 80182f6:	460b      	mov	r3, r1
 80182f8:	4630      	mov	r0, r6
 80182fa:	4639      	mov	r1, r7
 80182fc:	f7e7 ffc4 	bl	8000288 <__aeabi_dsub>
 8018300:	4602      	mov	r2, r0
 8018302:	460b      	mov	r3, r1
 8018304:	4680      	mov	r8, r0
 8018306:	4689      	mov	r9, r1
 8018308:	4630      	mov	r0, r6
 801830a:	4639      	mov	r1, r7
 801830c:	f7e7 ffbc 	bl	8000288 <__aeabi_dsub>
 8018310:	4622      	mov	r2, r4
 8018312:	462b      	mov	r3, r5
 8018314:	f7e7 ffb8 	bl	8000288 <__aeabi_dsub>
 8018318:	a343      	add	r3, pc, #268	; (adr r3, 8018428 <__ieee754_rem_pio2+0x318>)
 801831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801831e:	4604      	mov	r4, r0
 8018320:	460d      	mov	r5, r1
 8018322:	ec51 0b18 	vmov	r0, r1, d8
 8018326:	f7e8 f967 	bl	80005f8 <__aeabi_dmul>
 801832a:	4622      	mov	r2, r4
 801832c:	462b      	mov	r3, r5
 801832e:	f7e7 ffab 	bl	8000288 <__aeabi_dsub>
 8018332:	4602      	mov	r2, r0
 8018334:	460b      	mov	r3, r1
 8018336:	4604      	mov	r4, r0
 8018338:	460d      	mov	r5, r1
 801833a:	4640      	mov	r0, r8
 801833c:	4649      	mov	r1, r9
 801833e:	f7e7 ffa3 	bl	8000288 <__aeabi_dsub>
 8018342:	9a03      	ldr	r2, [sp, #12]
 8018344:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018348:	1ad3      	subs	r3, r2, r3
 801834a:	2b31      	cmp	r3, #49	; 0x31
 801834c:	dc24      	bgt.n	8018398 <__ieee754_rem_pio2+0x288>
 801834e:	e9ca 0100 	strd	r0, r1, [sl]
 8018352:	4646      	mov	r6, r8
 8018354:	464f      	mov	r7, r9
 8018356:	e9da 8900 	ldrd	r8, r9, [sl]
 801835a:	4630      	mov	r0, r6
 801835c:	4642      	mov	r2, r8
 801835e:	464b      	mov	r3, r9
 8018360:	4639      	mov	r1, r7
 8018362:	f7e7 ff91 	bl	8000288 <__aeabi_dsub>
 8018366:	462b      	mov	r3, r5
 8018368:	4622      	mov	r2, r4
 801836a:	f7e7 ff8d 	bl	8000288 <__aeabi_dsub>
 801836e:	9b02      	ldr	r3, [sp, #8]
 8018370:	2b00      	cmp	r3, #0
 8018372:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018376:	f6bf af0b 	bge.w	8018190 <__ieee754_rem_pio2+0x80>
 801837a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801837e:	f8ca 3004 	str.w	r3, [sl, #4]
 8018382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018386:	f8ca 8000 	str.w	r8, [sl]
 801838a:	f8ca 0008 	str.w	r0, [sl, #8]
 801838e:	f8ca 300c 	str.w	r3, [sl, #12]
 8018392:	f1cb 0b00 	rsb	fp, fp, #0
 8018396:	e6fb      	b.n	8018190 <__ieee754_rem_pio2+0x80>
 8018398:	a327      	add	r3, pc, #156	; (adr r3, 8018438 <__ieee754_rem_pio2+0x328>)
 801839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801839e:	ec51 0b18 	vmov	r0, r1, d8
 80183a2:	f7e8 f929 	bl	80005f8 <__aeabi_dmul>
 80183a6:	4604      	mov	r4, r0
 80183a8:	460d      	mov	r5, r1
 80183aa:	4602      	mov	r2, r0
 80183ac:	460b      	mov	r3, r1
 80183ae:	4640      	mov	r0, r8
 80183b0:	4649      	mov	r1, r9
 80183b2:	f7e7 ff69 	bl	8000288 <__aeabi_dsub>
 80183b6:	4602      	mov	r2, r0
 80183b8:	460b      	mov	r3, r1
 80183ba:	4606      	mov	r6, r0
 80183bc:	460f      	mov	r7, r1
 80183be:	4640      	mov	r0, r8
 80183c0:	4649      	mov	r1, r9
 80183c2:	f7e7 ff61 	bl	8000288 <__aeabi_dsub>
 80183c6:	4622      	mov	r2, r4
 80183c8:	462b      	mov	r3, r5
 80183ca:	f7e7 ff5d 	bl	8000288 <__aeabi_dsub>
 80183ce:	a31c      	add	r3, pc, #112	; (adr r3, 8018440 <__ieee754_rem_pio2+0x330>)
 80183d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d4:	4604      	mov	r4, r0
 80183d6:	460d      	mov	r5, r1
 80183d8:	ec51 0b18 	vmov	r0, r1, d8
 80183dc:	f7e8 f90c 	bl	80005f8 <__aeabi_dmul>
 80183e0:	4622      	mov	r2, r4
 80183e2:	462b      	mov	r3, r5
 80183e4:	f7e7 ff50 	bl	8000288 <__aeabi_dsub>
 80183e8:	4604      	mov	r4, r0
 80183ea:	460d      	mov	r5, r1
 80183ec:	e760      	b.n	80182b0 <__ieee754_rem_pio2+0x1a0>
 80183ee:	4b1c      	ldr	r3, [pc, #112]	; (8018460 <__ieee754_rem_pio2+0x350>)
 80183f0:	4598      	cmp	r8, r3
 80183f2:	dd37      	ble.n	8018464 <__ieee754_rem_pio2+0x354>
 80183f4:	ee10 2a10 	vmov	r2, s0
 80183f8:	462b      	mov	r3, r5
 80183fa:	4620      	mov	r0, r4
 80183fc:	4629      	mov	r1, r5
 80183fe:	f7e7 ff43 	bl	8000288 <__aeabi_dsub>
 8018402:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018406:	e9ca 0100 	strd	r0, r1, [sl]
 801840a:	e695      	b.n	8018138 <__ieee754_rem_pio2+0x28>
 801840c:	f3af 8000 	nop.w
 8018410:	54400000 	.word	0x54400000
 8018414:	3ff921fb 	.word	0x3ff921fb
 8018418:	1a626331 	.word	0x1a626331
 801841c:	3dd0b461 	.word	0x3dd0b461
 8018420:	1a600000 	.word	0x1a600000
 8018424:	3dd0b461 	.word	0x3dd0b461
 8018428:	2e037073 	.word	0x2e037073
 801842c:	3ba3198a 	.word	0x3ba3198a
 8018430:	6dc9c883 	.word	0x6dc9c883
 8018434:	3fe45f30 	.word	0x3fe45f30
 8018438:	2e000000 	.word	0x2e000000
 801843c:	3ba3198a 	.word	0x3ba3198a
 8018440:	252049c1 	.word	0x252049c1
 8018444:	397b839a 	.word	0x397b839a
 8018448:	3fe921fb 	.word	0x3fe921fb
 801844c:	4002d97b 	.word	0x4002d97b
 8018450:	3ff921fb 	.word	0x3ff921fb
 8018454:	413921fb 	.word	0x413921fb
 8018458:	3fe00000 	.word	0x3fe00000
 801845c:	0801b1d0 	.word	0x0801b1d0
 8018460:	7fefffff 	.word	0x7fefffff
 8018464:	ea4f 5628 	mov.w	r6, r8, asr #20
 8018468:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801846c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8018470:	4620      	mov	r0, r4
 8018472:	460d      	mov	r5, r1
 8018474:	f7e8 fb70 	bl	8000b58 <__aeabi_d2iz>
 8018478:	f7e8 f854 	bl	8000524 <__aeabi_i2d>
 801847c:	4602      	mov	r2, r0
 801847e:	460b      	mov	r3, r1
 8018480:	4620      	mov	r0, r4
 8018482:	4629      	mov	r1, r5
 8018484:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018488:	f7e7 fefe 	bl	8000288 <__aeabi_dsub>
 801848c:	4b21      	ldr	r3, [pc, #132]	; (8018514 <__ieee754_rem_pio2+0x404>)
 801848e:	2200      	movs	r2, #0
 8018490:	f7e8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8018494:	460d      	mov	r5, r1
 8018496:	4604      	mov	r4, r0
 8018498:	f7e8 fb5e 	bl	8000b58 <__aeabi_d2iz>
 801849c:	f7e8 f842 	bl	8000524 <__aeabi_i2d>
 80184a0:	4602      	mov	r2, r0
 80184a2:	460b      	mov	r3, r1
 80184a4:	4620      	mov	r0, r4
 80184a6:	4629      	mov	r1, r5
 80184a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80184ac:	f7e7 feec 	bl	8000288 <__aeabi_dsub>
 80184b0:	4b18      	ldr	r3, [pc, #96]	; (8018514 <__ieee754_rem_pio2+0x404>)
 80184b2:	2200      	movs	r2, #0
 80184b4:	f7e8 f8a0 	bl	80005f8 <__aeabi_dmul>
 80184b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80184bc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80184c0:	2703      	movs	r7, #3
 80184c2:	2400      	movs	r4, #0
 80184c4:	2500      	movs	r5, #0
 80184c6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80184ca:	4622      	mov	r2, r4
 80184cc:	462b      	mov	r3, r5
 80184ce:	46b9      	mov	r9, r7
 80184d0:	3f01      	subs	r7, #1
 80184d2:	f7e8 faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80184d6:	2800      	cmp	r0, #0
 80184d8:	d1f5      	bne.n	80184c6 <__ieee754_rem_pio2+0x3b6>
 80184da:	4b0f      	ldr	r3, [pc, #60]	; (8018518 <__ieee754_rem_pio2+0x408>)
 80184dc:	9301      	str	r3, [sp, #4]
 80184de:	2302      	movs	r3, #2
 80184e0:	9300      	str	r3, [sp, #0]
 80184e2:	4632      	mov	r2, r6
 80184e4:	464b      	mov	r3, r9
 80184e6:	4651      	mov	r1, sl
 80184e8:	a804      	add	r0, sp, #16
 80184ea:	f000 f911 	bl	8018710 <__kernel_rem_pio2>
 80184ee:	9b02      	ldr	r3, [sp, #8]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	4683      	mov	fp, r0
 80184f4:	f6bf ae4c 	bge.w	8018190 <__ieee754_rem_pio2+0x80>
 80184f8:	e9da 2100 	ldrd	r2, r1, [sl]
 80184fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018500:	e9ca 2300 	strd	r2, r3, [sl]
 8018504:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8018508:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801850c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8018510:	e73f      	b.n	8018392 <__ieee754_rem_pio2+0x282>
 8018512:	bf00      	nop
 8018514:	41700000 	.word	0x41700000
 8018518:	0801b250 	.word	0x0801b250

0801851c <fabs>:
 801851c:	ec51 0b10 	vmov	r0, r1, d0
 8018520:	ee10 2a10 	vmov	r2, s0
 8018524:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018528:	ec43 2b10 	vmov	d0, r2, r3
 801852c:	4770      	bx	lr
	...

08018530 <__ieee754_expf>:
 8018530:	ee10 2a10 	vmov	r2, s0
 8018534:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8018538:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801853c:	d902      	bls.n	8018544 <__ieee754_expf+0x14>
 801853e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018542:	4770      	bx	lr
 8018544:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8018548:	d106      	bne.n	8018558 <__ieee754_expf+0x28>
 801854a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8018684 <__ieee754_expf+0x154>
 801854e:	2900      	cmp	r1, #0
 8018550:	bf18      	it	ne
 8018552:	eeb0 0a67 	vmovne.f32	s0, s15
 8018556:	4770      	bx	lr
 8018558:	484b      	ldr	r0, [pc, #300]	; (8018688 <__ieee754_expf+0x158>)
 801855a:	4282      	cmp	r2, r0
 801855c:	dd02      	ble.n	8018564 <__ieee754_expf+0x34>
 801855e:	2000      	movs	r0, #0
 8018560:	f000 b8d0 	b.w	8018704 <__math_oflowf>
 8018564:	2a00      	cmp	r2, #0
 8018566:	da05      	bge.n	8018574 <__ieee754_expf+0x44>
 8018568:	4a48      	ldr	r2, [pc, #288]	; (801868c <__ieee754_expf+0x15c>)
 801856a:	4293      	cmp	r3, r2
 801856c:	d902      	bls.n	8018574 <__ieee754_expf+0x44>
 801856e:	2000      	movs	r0, #0
 8018570:	f000 b8c2 	b.w	80186f8 <__math_uflowf>
 8018574:	4a46      	ldr	r2, [pc, #280]	; (8018690 <__ieee754_expf+0x160>)
 8018576:	4293      	cmp	r3, r2
 8018578:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801857c:	d952      	bls.n	8018624 <__ieee754_expf+0xf4>
 801857e:	4a45      	ldr	r2, [pc, #276]	; (8018694 <__ieee754_expf+0x164>)
 8018580:	4293      	cmp	r3, r2
 8018582:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8018586:	d834      	bhi.n	80185f2 <__ieee754_expf+0xc2>
 8018588:	4b43      	ldr	r3, [pc, #268]	; (8018698 <__ieee754_expf+0x168>)
 801858a:	4413      	add	r3, r2
 801858c:	ed93 7a00 	vldr	s14, [r3]
 8018590:	4b42      	ldr	r3, [pc, #264]	; (801869c <__ieee754_expf+0x16c>)
 8018592:	4413      	add	r3, r2
 8018594:	ee30 7a47 	vsub.f32	s14, s0, s14
 8018598:	f1c1 0201 	rsb	r2, r1, #1
 801859c:	edd3 7a00 	vldr	s15, [r3]
 80185a0:	1a52      	subs	r2, r2, r1
 80185a2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80185a6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80185aa:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80186a0 <__ieee754_expf+0x170>
 80185ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80186a4 <__ieee754_expf+0x174>
 80185b2:	eee6 6a05 	vfma.f32	s13, s12, s10
 80185b6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80186a8 <__ieee754_expf+0x178>
 80185ba:	eea6 5a86 	vfma.f32	s10, s13, s12
 80185be:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80186ac <__ieee754_expf+0x17c>
 80185c2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80185c6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80186b0 <__ieee754_expf+0x180>
 80185ca:	eea6 5a86 	vfma.f32	s10, s13, s12
 80185ce:	eef0 6a40 	vmov.f32	s13, s0
 80185d2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80185d6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80185da:	ee20 5a26 	vmul.f32	s10, s0, s13
 80185de:	bb92      	cbnz	r2, 8018646 <__ieee754_expf+0x116>
 80185e0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80185e4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80185e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80185ec:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80185f0:	4770      	bx	lr
 80185f2:	4b30      	ldr	r3, [pc, #192]	; (80186b4 <__ieee754_expf+0x184>)
 80185f4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80186b8 <__ieee754_expf+0x188>
 80185f8:	eddf 6a30 	vldr	s13, [pc, #192]	; 80186bc <__ieee754_expf+0x18c>
 80185fc:	4413      	add	r3, r2
 80185fe:	edd3 7a00 	vldr	s15, [r3]
 8018602:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018606:	eeb0 7a40 	vmov.f32	s14, s0
 801860a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801860e:	ee17 2a90 	vmov	r2, s15
 8018612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018616:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801861a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80186c0 <__ieee754_expf+0x190>
 801861e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018622:	e7be      	b.n	80185a2 <__ieee754_expf+0x72>
 8018624:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8018628:	d20b      	bcs.n	8018642 <__ieee754_expf+0x112>
 801862a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80186c4 <__ieee754_expf+0x194>
 801862e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8018632:	eef4 6ae5 	vcmpe.f32	s13, s11
 8018636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801863a:	dd02      	ble.n	8018642 <__ieee754_expf+0x112>
 801863c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8018640:	4770      	bx	lr
 8018642:	2200      	movs	r2, #0
 8018644:	e7af      	b.n	80185a6 <__ieee754_expf+0x76>
 8018646:	ee36 6a66 	vsub.f32	s12, s12, s13
 801864a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801864e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8018652:	bfb8      	it	lt
 8018654:	3264      	addlt	r2, #100	; 0x64
 8018656:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801865a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801865e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018662:	ee17 3a90 	vmov	r3, s15
 8018666:	bfab      	itete	ge
 8018668:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801866c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8018670:	ee00 3a10 	vmovge	s0, r3
 8018674:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80186c8 <__ieee754_expf+0x198>
 8018678:	bfbc      	itt	lt
 801867a:	ee00 3a10 	vmovlt	s0, r3
 801867e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8018682:	4770      	bx	lr
 8018684:	00000000 	.word	0x00000000
 8018688:	42b17217 	.word	0x42b17217
 801868c:	42cff1b5 	.word	0x42cff1b5
 8018690:	3eb17218 	.word	0x3eb17218
 8018694:	3f851591 	.word	0x3f851591
 8018698:	0801b360 	.word	0x0801b360
 801869c:	0801b368 	.word	0x0801b368
 80186a0:	3331bb4c 	.word	0x3331bb4c
 80186a4:	b5ddea0e 	.word	0xb5ddea0e
 80186a8:	388ab355 	.word	0x388ab355
 80186ac:	bb360b61 	.word	0xbb360b61
 80186b0:	3e2aaaab 	.word	0x3e2aaaab
 80186b4:	0801b358 	.word	0x0801b358
 80186b8:	3fb8aa3b 	.word	0x3fb8aa3b
 80186bc:	3f317180 	.word	0x3f317180
 80186c0:	3717f7d1 	.word	0x3717f7d1
 80186c4:	7149f2ca 	.word	0x7149f2ca
 80186c8:	0d800000 	.word	0x0d800000

080186cc <with_errnof>:
 80186cc:	b513      	push	{r0, r1, r4, lr}
 80186ce:	4604      	mov	r4, r0
 80186d0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80186d4:	f7fc fda0 	bl	8015218 <__errno>
 80186d8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80186dc:	6004      	str	r4, [r0, #0]
 80186de:	b002      	add	sp, #8
 80186e0:	bd10      	pop	{r4, pc}

080186e2 <xflowf>:
 80186e2:	b130      	cbz	r0, 80186f2 <xflowf+0x10>
 80186e4:	eef1 7a40 	vneg.f32	s15, s0
 80186e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80186ec:	2022      	movs	r0, #34	; 0x22
 80186ee:	f7ff bfed 	b.w	80186cc <with_errnof>
 80186f2:	eef0 7a40 	vmov.f32	s15, s0
 80186f6:	e7f7      	b.n	80186e8 <xflowf+0x6>

080186f8 <__math_uflowf>:
 80186f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018700 <__math_uflowf+0x8>
 80186fc:	f7ff bff1 	b.w	80186e2 <xflowf>
 8018700:	10000000 	.word	0x10000000

08018704 <__math_oflowf>:
 8018704:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801870c <__math_oflowf+0x8>
 8018708:	f7ff bfeb 	b.w	80186e2 <xflowf>
 801870c:	70000000 	.word	0x70000000

08018710 <__kernel_rem_pio2>:
 8018710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018714:	ed2d 8b02 	vpush	{d8}
 8018718:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801871c:	f112 0f14 	cmn.w	r2, #20
 8018720:	9306      	str	r3, [sp, #24]
 8018722:	9104      	str	r1, [sp, #16]
 8018724:	4bc2      	ldr	r3, [pc, #776]	; (8018a30 <__kernel_rem_pio2+0x320>)
 8018726:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8018728:	9009      	str	r0, [sp, #36]	; 0x24
 801872a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801872e:	9300      	str	r3, [sp, #0]
 8018730:	9b06      	ldr	r3, [sp, #24]
 8018732:	f103 33ff 	add.w	r3, r3, #4294967295
 8018736:	bfa8      	it	ge
 8018738:	1ed4      	subge	r4, r2, #3
 801873a:	9305      	str	r3, [sp, #20]
 801873c:	bfb2      	itee	lt
 801873e:	2400      	movlt	r4, #0
 8018740:	2318      	movge	r3, #24
 8018742:	fb94 f4f3 	sdivge	r4, r4, r3
 8018746:	f06f 0317 	mvn.w	r3, #23
 801874a:	fb04 3303 	mla	r3, r4, r3, r3
 801874e:	eb03 0a02 	add.w	sl, r3, r2
 8018752:	9b00      	ldr	r3, [sp, #0]
 8018754:	9a05      	ldr	r2, [sp, #20]
 8018756:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8018a20 <__kernel_rem_pio2+0x310>
 801875a:	eb03 0802 	add.w	r8, r3, r2
 801875e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8018760:	1aa7      	subs	r7, r4, r2
 8018762:	ae20      	add	r6, sp, #128	; 0x80
 8018764:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018768:	2500      	movs	r5, #0
 801876a:	4545      	cmp	r5, r8
 801876c:	dd13      	ble.n	8018796 <__kernel_rem_pio2+0x86>
 801876e:	9b06      	ldr	r3, [sp, #24]
 8018770:	aa20      	add	r2, sp, #128	; 0x80
 8018772:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8018776:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801877a:	f04f 0800 	mov.w	r8, #0
 801877e:	9b00      	ldr	r3, [sp, #0]
 8018780:	4598      	cmp	r8, r3
 8018782:	dc31      	bgt.n	80187e8 <__kernel_rem_pio2+0xd8>
 8018784:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8018a20 <__kernel_rem_pio2+0x310>
 8018788:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801878c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018790:	462f      	mov	r7, r5
 8018792:	2600      	movs	r6, #0
 8018794:	e01b      	b.n	80187ce <__kernel_rem_pio2+0xbe>
 8018796:	42ef      	cmn	r7, r5
 8018798:	d407      	bmi.n	80187aa <__kernel_rem_pio2+0x9a>
 801879a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801879e:	f7e7 fec1 	bl	8000524 <__aeabi_i2d>
 80187a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80187a6:	3501      	adds	r5, #1
 80187a8:	e7df      	b.n	801876a <__kernel_rem_pio2+0x5a>
 80187aa:	ec51 0b18 	vmov	r0, r1, d8
 80187ae:	e7f8      	b.n	80187a2 <__kernel_rem_pio2+0x92>
 80187b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80187b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80187b8:	f7e7 ff1e 	bl	80005f8 <__aeabi_dmul>
 80187bc:	4602      	mov	r2, r0
 80187be:	460b      	mov	r3, r1
 80187c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80187c4:	f7e7 fd62 	bl	800028c <__adddf3>
 80187c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80187cc:	3601      	adds	r6, #1
 80187ce:	9b05      	ldr	r3, [sp, #20]
 80187d0:	429e      	cmp	r6, r3
 80187d2:	f1a7 0708 	sub.w	r7, r7, #8
 80187d6:	ddeb      	ble.n	80187b0 <__kernel_rem_pio2+0xa0>
 80187d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80187dc:	f108 0801 	add.w	r8, r8, #1
 80187e0:	ecab 7b02 	vstmia	fp!, {d7}
 80187e4:	3508      	adds	r5, #8
 80187e6:	e7ca      	b.n	801877e <__kernel_rem_pio2+0x6e>
 80187e8:	9b00      	ldr	r3, [sp, #0]
 80187ea:	aa0c      	add	r2, sp, #48	; 0x30
 80187ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80187f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80187f2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80187f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80187f8:	9c00      	ldr	r4, [sp, #0]
 80187fa:	930a      	str	r3, [sp, #40]	; 0x28
 80187fc:	00e3      	lsls	r3, r4, #3
 80187fe:	9308      	str	r3, [sp, #32]
 8018800:	ab98      	add	r3, sp, #608	; 0x260
 8018802:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018806:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801880a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801880e:	ab70      	add	r3, sp, #448	; 0x1c0
 8018810:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8018814:	46c3      	mov	fp, r8
 8018816:	46a1      	mov	r9, r4
 8018818:	f1b9 0f00 	cmp.w	r9, #0
 801881c:	f1a5 0508 	sub.w	r5, r5, #8
 8018820:	dc77      	bgt.n	8018912 <__kernel_rem_pio2+0x202>
 8018822:	ec47 6b10 	vmov	d0, r6, r7
 8018826:	4650      	mov	r0, sl
 8018828:	f000 fac2 	bl	8018db0 <scalbn>
 801882c:	ec57 6b10 	vmov	r6, r7, d0
 8018830:	2200      	movs	r2, #0
 8018832:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8018836:	ee10 0a10 	vmov	r0, s0
 801883a:	4639      	mov	r1, r7
 801883c:	f7e7 fedc 	bl	80005f8 <__aeabi_dmul>
 8018840:	ec41 0b10 	vmov	d0, r0, r1
 8018844:	f7ff fa5c 	bl	8017d00 <floor>
 8018848:	4b7a      	ldr	r3, [pc, #488]	; (8018a34 <__kernel_rem_pio2+0x324>)
 801884a:	ec51 0b10 	vmov	r0, r1, d0
 801884e:	2200      	movs	r2, #0
 8018850:	f7e7 fed2 	bl	80005f8 <__aeabi_dmul>
 8018854:	4602      	mov	r2, r0
 8018856:	460b      	mov	r3, r1
 8018858:	4630      	mov	r0, r6
 801885a:	4639      	mov	r1, r7
 801885c:	f7e7 fd14 	bl	8000288 <__aeabi_dsub>
 8018860:	460f      	mov	r7, r1
 8018862:	4606      	mov	r6, r0
 8018864:	f7e8 f978 	bl	8000b58 <__aeabi_d2iz>
 8018868:	9002      	str	r0, [sp, #8]
 801886a:	f7e7 fe5b 	bl	8000524 <__aeabi_i2d>
 801886e:	4602      	mov	r2, r0
 8018870:	460b      	mov	r3, r1
 8018872:	4630      	mov	r0, r6
 8018874:	4639      	mov	r1, r7
 8018876:	f7e7 fd07 	bl	8000288 <__aeabi_dsub>
 801887a:	f1ba 0f00 	cmp.w	sl, #0
 801887e:	4606      	mov	r6, r0
 8018880:	460f      	mov	r7, r1
 8018882:	dd6d      	ble.n	8018960 <__kernel_rem_pio2+0x250>
 8018884:	1e61      	subs	r1, r4, #1
 8018886:	ab0c      	add	r3, sp, #48	; 0x30
 8018888:	9d02      	ldr	r5, [sp, #8]
 801888a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801888e:	f1ca 0018 	rsb	r0, sl, #24
 8018892:	fa43 f200 	asr.w	r2, r3, r0
 8018896:	4415      	add	r5, r2
 8018898:	4082      	lsls	r2, r0
 801889a:	1a9b      	subs	r3, r3, r2
 801889c:	aa0c      	add	r2, sp, #48	; 0x30
 801889e:	9502      	str	r5, [sp, #8]
 80188a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80188a4:	f1ca 0217 	rsb	r2, sl, #23
 80188a8:	fa43 fb02 	asr.w	fp, r3, r2
 80188ac:	f1bb 0f00 	cmp.w	fp, #0
 80188b0:	dd65      	ble.n	801897e <__kernel_rem_pio2+0x26e>
 80188b2:	9b02      	ldr	r3, [sp, #8]
 80188b4:	2200      	movs	r2, #0
 80188b6:	3301      	adds	r3, #1
 80188b8:	9302      	str	r3, [sp, #8]
 80188ba:	4615      	mov	r5, r2
 80188bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80188c0:	4294      	cmp	r4, r2
 80188c2:	f300 809f 	bgt.w	8018a04 <__kernel_rem_pio2+0x2f4>
 80188c6:	f1ba 0f00 	cmp.w	sl, #0
 80188ca:	dd07      	ble.n	80188dc <__kernel_rem_pio2+0x1cc>
 80188cc:	f1ba 0f01 	cmp.w	sl, #1
 80188d0:	f000 80c1 	beq.w	8018a56 <__kernel_rem_pio2+0x346>
 80188d4:	f1ba 0f02 	cmp.w	sl, #2
 80188d8:	f000 80c7 	beq.w	8018a6a <__kernel_rem_pio2+0x35a>
 80188dc:	f1bb 0f02 	cmp.w	fp, #2
 80188e0:	d14d      	bne.n	801897e <__kernel_rem_pio2+0x26e>
 80188e2:	4632      	mov	r2, r6
 80188e4:	463b      	mov	r3, r7
 80188e6:	4954      	ldr	r1, [pc, #336]	; (8018a38 <__kernel_rem_pio2+0x328>)
 80188e8:	2000      	movs	r0, #0
 80188ea:	f7e7 fccd 	bl	8000288 <__aeabi_dsub>
 80188ee:	4606      	mov	r6, r0
 80188f0:	460f      	mov	r7, r1
 80188f2:	2d00      	cmp	r5, #0
 80188f4:	d043      	beq.n	801897e <__kernel_rem_pio2+0x26e>
 80188f6:	4650      	mov	r0, sl
 80188f8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8018a28 <__kernel_rem_pio2+0x318>
 80188fc:	f000 fa58 	bl	8018db0 <scalbn>
 8018900:	4630      	mov	r0, r6
 8018902:	4639      	mov	r1, r7
 8018904:	ec53 2b10 	vmov	r2, r3, d0
 8018908:	f7e7 fcbe 	bl	8000288 <__aeabi_dsub>
 801890c:	4606      	mov	r6, r0
 801890e:	460f      	mov	r7, r1
 8018910:	e035      	b.n	801897e <__kernel_rem_pio2+0x26e>
 8018912:	4b4a      	ldr	r3, [pc, #296]	; (8018a3c <__kernel_rem_pio2+0x32c>)
 8018914:	2200      	movs	r2, #0
 8018916:	4630      	mov	r0, r6
 8018918:	4639      	mov	r1, r7
 801891a:	f7e7 fe6d 	bl	80005f8 <__aeabi_dmul>
 801891e:	f7e8 f91b 	bl	8000b58 <__aeabi_d2iz>
 8018922:	f7e7 fdff 	bl	8000524 <__aeabi_i2d>
 8018926:	4602      	mov	r2, r0
 8018928:	460b      	mov	r3, r1
 801892a:	ec43 2b18 	vmov	d8, r2, r3
 801892e:	4b44      	ldr	r3, [pc, #272]	; (8018a40 <__kernel_rem_pio2+0x330>)
 8018930:	2200      	movs	r2, #0
 8018932:	f7e7 fe61 	bl	80005f8 <__aeabi_dmul>
 8018936:	4602      	mov	r2, r0
 8018938:	460b      	mov	r3, r1
 801893a:	4630      	mov	r0, r6
 801893c:	4639      	mov	r1, r7
 801893e:	f7e7 fca3 	bl	8000288 <__aeabi_dsub>
 8018942:	f7e8 f909 	bl	8000b58 <__aeabi_d2iz>
 8018946:	e9d5 2300 	ldrd	r2, r3, [r5]
 801894a:	f84b 0b04 	str.w	r0, [fp], #4
 801894e:	ec51 0b18 	vmov	r0, r1, d8
 8018952:	f7e7 fc9b 	bl	800028c <__adddf3>
 8018956:	f109 39ff 	add.w	r9, r9, #4294967295
 801895a:	4606      	mov	r6, r0
 801895c:	460f      	mov	r7, r1
 801895e:	e75b      	b.n	8018818 <__kernel_rem_pio2+0x108>
 8018960:	d106      	bne.n	8018970 <__kernel_rem_pio2+0x260>
 8018962:	1e63      	subs	r3, r4, #1
 8018964:	aa0c      	add	r2, sp, #48	; 0x30
 8018966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801896a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801896e:	e79d      	b.n	80188ac <__kernel_rem_pio2+0x19c>
 8018970:	4b34      	ldr	r3, [pc, #208]	; (8018a44 <__kernel_rem_pio2+0x334>)
 8018972:	2200      	movs	r2, #0
 8018974:	f7e8 f8c6 	bl	8000b04 <__aeabi_dcmpge>
 8018978:	2800      	cmp	r0, #0
 801897a:	d140      	bne.n	80189fe <__kernel_rem_pio2+0x2ee>
 801897c:	4683      	mov	fp, r0
 801897e:	2200      	movs	r2, #0
 8018980:	2300      	movs	r3, #0
 8018982:	4630      	mov	r0, r6
 8018984:	4639      	mov	r1, r7
 8018986:	f7e8 f89f 	bl	8000ac8 <__aeabi_dcmpeq>
 801898a:	2800      	cmp	r0, #0
 801898c:	f000 80c1 	beq.w	8018b12 <__kernel_rem_pio2+0x402>
 8018990:	1e65      	subs	r5, r4, #1
 8018992:	462b      	mov	r3, r5
 8018994:	2200      	movs	r2, #0
 8018996:	9900      	ldr	r1, [sp, #0]
 8018998:	428b      	cmp	r3, r1
 801899a:	da6d      	bge.n	8018a78 <__kernel_rem_pio2+0x368>
 801899c:	2a00      	cmp	r2, #0
 801899e:	f000 808a 	beq.w	8018ab6 <__kernel_rem_pio2+0x3a6>
 80189a2:	ab0c      	add	r3, sp, #48	; 0x30
 80189a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80189a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	f000 80ae 	beq.w	8018b0e <__kernel_rem_pio2+0x3fe>
 80189b2:	4650      	mov	r0, sl
 80189b4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8018a28 <__kernel_rem_pio2+0x318>
 80189b8:	f000 f9fa 	bl	8018db0 <scalbn>
 80189bc:	1c6b      	adds	r3, r5, #1
 80189be:	00da      	lsls	r2, r3, #3
 80189c0:	9205      	str	r2, [sp, #20]
 80189c2:	ec57 6b10 	vmov	r6, r7, d0
 80189c6:	aa70      	add	r2, sp, #448	; 0x1c0
 80189c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8018a3c <__kernel_rem_pio2+0x32c>
 80189cc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80189d0:	462c      	mov	r4, r5
 80189d2:	f04f 0800 	mov.w	r8, #0
 80189d6:	2c00      	cmp	r4, #0
 80189d8:	f280 80d4 	bge.w	8018b84 <__kernel_rem_pio2+0x474>
 80189dc:	462c      	mov	r4, r5
 80189de:	2c00      	cmp	r4, #0
 80189e0:	f2c0 8102 	blt.w	8018be8 <__kernel_rem_pio2+0x4d8>
 80189e4:	4b18      	ldr	r3, [pc, #96]	; (8018a48 <__kernel_rem_pio2+0x338>)
 80189e6:	461e      	mov	r6, r3
 80189e8:	ab70      	add	r3, sp, #448	; 0x1c0
 80189ea:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80189ee:	1b2b      	subs	r3, r5, r4
 80189f0:	f04f 0900 	mov.w	r9, #0
 80189f4:	f04f 0a00 	mov.w	sl, #0
 80189f8:	2700      	movs	r7, #0
 80189fa:	9306      	str	r3, [sp, #24]
 80189fc:	e0e6      	b.n	8018bcc <__kernel_rem_pio2+0x4bc>
 80189fe:	f04f 0b02 	mov.w	fp, #2
 8018a02:	e756      	b.n	80188b2 <__kernel_rem_pio2+0x1a2>
 8018a04:	f8d8 3000 	ldr.w	r3, [r8]
 8018a08:	bb05      	cbnz	r5, 8018a4c <__kernel_rem_pio2+0x33c>
 8018a0a:	b123      	cbz	r3, 8018a16 <__kernel_rem_pio2+0x306>
 8018a0c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8018a10:	f8c8 3000 	str.w	r3, [r8]
 8018a14:	2301      	movs	r3, #1
 8018a16:	3201      	adds	r2, #1
 8018a18:	f108 0804 	add.w	r8, r8, #4
 8018a1c:	461d      	mov	r5, r3
 8018a1e:	e74f      	b.n	80188c0 <__kernel_rem_pio2+0x1b0>
	...
 8018a2c:	3ff00000 	.word	0x3ff00000
 8018a30:	0801b3b0 	.word	0x0801b3b0
 8018a34:	40200000 	.word	0x40200000
 8018a38:	3ff00000 	.word	0x3ff00000
 8018a3c:	3e700000 	.word	0x3e700000
 8018a40:	41700000 	.word	0x41700000
 8018a44:	3fe00000 	.word	0x3fe00000
 8018a48:	0801b370 	.word	0x0801b370
 8018a4c:	1acb      	subs	r3, r1, r3
 8018a4e:	f8c8 3000 	str.w	r3, [r8]
 8018a52:	462b      	mov	r3, r5
 8018a54:	e7df      	b.n	8018a16 <__kernel_rem_pio2+0x306>
 8018a56:	1e62      	subs	r2, r4, #1
 8018a58:	ab0c      	add	r3, sp, #48	; 0x30
 8018a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a5e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018a62:	a90c      	add	r1, sp, #48	; 0x30
 8018a64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018a68:	e738      	b.n	80188dc <__kernel_rem_pio2+0x1cc>
 8018a6a:	1e62      	subs	r2, r4, #1
 8018a6c:	ab0c      	add	r3, sp, #48	; 0x30
 8018a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a72:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018a76:	e7f4      	b.n	8018a62 <__kernel_rem_pio2+0x352>
 8018a78:	a90c      	add	r1, sp, #48	; 0x30
 8018a7a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018a7e:	3b01      	subs	r3, #1
 8018a80:	430a      	orrs	r2, r1
 8018a82:	e788      	b.n	8018996 <__kernel_rem_pio2+0x286>
 8018a84:	3301      	adds	r3, #1
 8018a86:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8018a8a:	2900      	cmp	r1, #0
 8018a8c:	d0fa      	beq.n	8018a84 <__kernel_rem_pio2+0x374>
 8018a8e:	9a08      	ldr	r2, [sp, #32]
 8018a90:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8018a94:	446a      	add	r2, sp
 8018a96:	3a98      	subs	r2, #152	; 0x98
 8018a98:	9208      	str	r2, [sp, #32]
 8018a9a:	9a06      	ldr	r2, [sp, #24]
 8018a9c:	a920      	add	r1, sp, #128	; 0x80
 8018a9e:	18a2      	adds	r2, r4, r2
 8018aa0:	18e3      	adds	r3, r4, r3
 8018aa2:	f104 0801 	add.w	r8, r4, #1
 8018aa6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8018aaa:	9302      	str	r3, [sp, #8]
 8018aac:	9b02      	ldr	r3, [sp, #8]
 8018aae:	4543      	cmp	r3, r8
 8018ab0:	da04      	bge.n	8018abc <__kernel_rem_pio2+0x3ac>
 8018ab2:	461c      	mov	r4, r3
 8018ab4:	e6a2      	b.n	80187fc <__kernel_rem_pio2+0xec>
 8018ab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ab8:	2301      	movs	r3, #1
 8018aba:	e7e4      	b.n	8018a86 <__kernel_rem_pio2+0x376>
 8018abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018abe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018ac2:	f7e7 fd2f 	bl	8000524 <__aeabi_i2d>
 8018ac6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8018aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018acc:	46ab      	mov	fp, r5
 8018ace:	461c      	mov	r4, r3
 8018ad0:	f04f 0900 	mov.w	r9, #0
 8018ad4:	2600      	movs	r6, #0
 8018ad6:	2700      	movs	r7, #0
 8018ad8:	9b05      	ldr	r3, [sp, #20]
 8018ada:	4599      	cmp	r9, r3
 8018adc:	dd06      	ble.n	8018aec <__kernel_rem_pio2+0x3dc>
 8018ade:	9b08      	ldr	r3, [sp, #32]
 8018ae0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8018ae4:	f108 0801 	add.w	r8, r8, #1
 8018ae8:	9308      	str	r3, [sp, #32]
 8018aea:	e7df      	b.n	8018aac <__kernel_rem_pio2+0x39c>
 8018aec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8018af0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8018af4:	f7e7 fd80 	bl	80005f8 <__aeabi_dmul>
 8018af8:	4602      	mov	r2, r0
 8018afa:	460b      	mov	r3, r1
 8018afc:	4630      	mov	r0, r6
 8018afe:	4639      	mov	r1, r7
 8018b00:	f7e7 fbc4 	bl	800028c <__adddf3>
 8018b04:	f109 0901 	add.w	r9, r9, #1
 8018b08:	4606      	mov	r6, r0
 8018b0a:	460f      	mov	r7, r1
 8018b0c:	e7e4      	b.n	8018ad8 <__kernel_rem_pio2+0x3c8>
 8018b0e:	3d01      	subs	r5, #1
 8018b10:	e747      	b.n	80189a2 <__kernel_rem_pio2+0x292>
 8018b12:	ec47 6b10 	vmov	d0, r6, r7
 8018b16:	f1ca 0000 	rsb	r0, sl, #0
 8018b1a:	f000 f949 	bl	8018db0 <scalbn>
 8018b1e:	ec57 6b10 	vmov	r6, r7, d0
 8018b22:	4ba0      	ldr	r3, [pc, #640]	; (8018da4 <__kernel_rem_pio2+0x694>)
 8018b24:	ee10 0a10 	vmov	r0, s0
 8018b28:	2200      	movs	r2, #0
 8018b2a:	4639      	mov	r1, r7
 8018b2c:	f7e7 ffea 	bl	8000b04 <__aeabi_dcmpge>
 8018b30:	b1f8      	cbz	r0, 8018b72 <__kernel_rem_pio2+0x462>
 8018b32:	4b9d      	ldr	r3, [pc, #628]	; (8018da8 <__kernel_rem_pio2+0x698>)
 8018b34:	2200      	movs	r2, #0
 8018b36:	4630      	mov	r0, r6
 8018b38:	4639      	mov	r1, r7
 8018b3a:	f7e7 fd5d 	bl	80005f8 <__aeabi_dmul>
 8018b3e:	f7e8 f80b 	bl	8000b58 <__aeabi_d2iz>
 8018b42:	4680      	mov	r8, r0
 8018b44:	f7e7 fcee 	bl	8000524 <__aeabi_i2d>
 8018b48:	4b96      	ldr	r3, [pc, #600]	; (8018da4 <__kernel_rem_pio2+0x694>)
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	f7e7 fd54 	bl	80005f8 <__aeabi_dmul>
 8018b50:	460b      	mov	r3, r1
 8018b52:	4602      	mov	r2, r0
 8018b54:	4639      	mov	r1, r7
 8018b56:	4630      	mov	r0, r6
 8018b58:	f7e7 fb96 	bl	8000288 <__aeabi_dsub>
 8018b5c:	f7e7 fffc 	bl	8000b58 <__aeabi_d2iz>
 8018b60:	1c65      	adds	r5, r4, #1
 8018b62:	ab0c      	add	r3, sp, #48	; 0x30
 8018b64:	f10a 0a18 	add.w	sl, sl, #24
 8018b68:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018b6c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8018b70:	e71f      	b.n	80189b2 <__kernel_rem_pio2+0x2a2>
 8018b72:	4630      	mov	r0, r6
 8018b74:	4639      	mov	r1, r7
 8018b76:	f7e7 ffef 	bl	8000b58 <__aeabi_d2iz>
 8018b7a:	ab0c      	add	r3, sp, #48	; 0x30
 8018b7c:	4625      	mov	r5, r4
 8018b7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018b82:	e716      	b.n	80189b2 <__kernel_rem_pio2+0x2a2>
 8018b84:	ab0c      	add	r3, sp, #48	; 0x30
 8018b86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018b8a:	f7e7 fccb 	bl	8000524 <__aeabi_i2d>
 8018b8e:	4632      	mov	r2, r6
 8018b90:	463b      	mov	r3, r7
 8018b92:	f7e7 fd31 	bl	80005f8 <__aeabi_dmul>
 8018b96:	4642      	mov	r2, r8
 8018b98:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8018b9c:	464b      	mov	r3, r9
 8018b9e:	4630      	mov	r0, r6
 8018ba0:	4639      	mov	r1, r7
 8018ba2:	f7e7 fd29 	bl	80005f8 <__aeabi_dmul>
 8018ba6:	3c01      	subs	r4, #1
 8018ba8:	4606      	mov	r6, r0
 8018baa:	460f      	mov	r7, r1
 8018bac:	e713      	b.n	80189d6 <__kernel_rem_pio2+0x2c6>
 8018bae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8018bb2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8018bb6:	f7e7 fd1f 	bl	80005f8 <__aeabi_dmul>
 8018bba:	4602      	mov	r2, r0
 8018bbc:	460b      	mov	r3, r1
 8018bbe:	4648      	mov	r0, r9
 8018bc0:	4651      	mov	r1, sl
 8018bc2:	f7e7 fb63 	bl	800028c <__adddf3>
 8018bc6:	3701      	adds	r7, #1
 8018bc8:	4681      	mov	r9, r0
 8018bca:	468a      	mov	sl, r1
 8018bcc:	9b00      	ldr	r3, [sp, #0]
 8018bce:	429f      	cmp	r7, r3
 8018bd0:	dc02      	bgt.n	8018bd8 <__kernel_rem_pio2+0x4c8>
 8018bd2:	9b06      	ldr	r3, [sp, #24]
 8018bd4:	429f      	cmp	r7, r3
 8018bd6:	ddea      	ble.n	8018bae <__kernel_rem_pio2+0x49e>
 8018bd8:	9a06      	ldr	r2, [sp, #24]
 8018bda:	ab48      	add	r3, sp, #288	; 0x120
 8018bdc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8018be0:	e9c6 9a00 	strd	r9, sl, [r6]
 8018be4:	3c01      	subs	r4, #1
 8018be6:	e6fa      	b.n	80189de <__kernel_rem_pio2+0x2ce>
 8018be8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8018bea:	2b02      	cmp	r3, #2
 8018bec:	dc0b      	bgt.n	8018c06 <__kernel_rem_pio2+0x4f6>
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	dc39      	bgt.n	8018c66 <__kernel_rem_pio2+0x556>
 8018bf2:	d05d      	beq.n	8018cb0 <__kernel_rem_pio2+0x5a0>
 8018bf4:	9b02      	ldr	r3, [sp, #8]
 8018bf6:	f003 0007 	and.w	r0, r3, #7
 8018bfa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8018bfe:	ecbd 8b02 	vpop	{d8}
 8018c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c06:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8018c08:	2b03      	cmp	r3, #3
 8018c0a:	d1f3      	bne.n	8018bf4 <__kernel_rem_pio2+0x4e4>
 8018c0c:	9b05      	ldr	r3, [sp, #20]
 8018c0e:	9500      	str	r5, [sp, #0]
 8018c10:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8018c14:	eb0d 0403 	add.w	r4, sp, r3
 8018c18:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8018c1c:	46a2      	mov	sl, r4
 8018c1e:	9b00      	ldr	r3, [sp, #0]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	f1aa 0a08 	sub.w	sl, sl, #8
 8018c26:	dc69      	bgt.n	8018cfc <__kernel_rem_pio2+0x5ec>
 8018c28:	46aa      	mov	sl, r5
 8018c2a:	f1ba 0f01 	cmp.w	sl, #1
 8018c2e:	f1a4 0408 	sub.w	r4, r4, #8
 8018c32:	f300 8083 	bgt.w	8018d3c <__kernel_rem_pio2+0x62c>
 8018c36:	9c05      	ldr	r4, [sp, #20]
 8018c38:	ab48      	add	r3, sp, #288	; 0x120
 8018c3a:	441c      	add	r4, r3
 8018c3c:	2000      	movs	r0, #0
 8018c3e:	2100      	movs	r1, #0
 8018c40:	2d01      	cmp	r5, #1
 8018c42:	f300 809a 	bgt.w	8018d7a <__kernel_rem_pio2+0x66a>
 8018c46:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8018c4a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8018c4e:	f1bb 0f00 	cmp.w	fp, #0
 8018c52:	f040 8098 	bne.w	8018d86 <__kernel_rem_pio2+0x676>
 8018c56:	9b04      	ldr	r3, [sp, #16]
 8018c58:	e9c3 7800 	strd	r7, r8, [r3]
 8018c5c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8018c60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8018c64:	e7c6      	b.n	8018bf4 <__kernel_rem_pio2+0x4e4>
 8018c66:	9e05      	ldr	r6, [sp, #20]
 8018c68:	ab48      	add	r3, sp, #288	; 0x120
 8018c6a:	441e      	add	r6, r3
 8018c6c:	462c      	mov	r4, r5
 8018c6e:	2000      	movs	r0, #0
 8018c70:	2100      	movs	r1, #0
 8018c72:	2c00      	cmp	r4, #0
 8018c74:	da33      	bge.n	8018cde <__kernel_rem_pio2+0x5ce>
 8018c76:	f1bb 0f00 	cmp.w	fp, #0
 8018c7a:	d036      	beq.n	8018cea <__kernel_rem_pio2+0x5da>
 8018c7c:	4602      	mov	r2, r0
 8018c7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018c82:	9c04      	ldr	r4, [sp, #16]
 8018c84:	e9c4 2300 	strd	r2, r3, [r4]
 8018c88:	4602      	mov	r2, r0
 8018c8a:	460b      	mov	r3, r1
 8018c8c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8018c90:	f7e7 fafa 	bl	8000288 <__aeabi_dsub>
 8018c94:	ae4a      	add	r6, sp, #296	; 0x128
 8018c96:	2401      	movs	r4, #1
 8018c98:	42a5      	cmp	r5, r4
 8018c9a:	da29      	bge.n	8018cf0 <__kernel_rem_pio2+0x5e0>
 8018c9c:	f1bb 0f00 	cmp.w	fp, #0
 8018ca0:	d002      	beq.n	8018ca8 <__kernel_rem_pio2+0x598>
 8018ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ca6:	4619      	mov	r1, r3
 8018ca8:	9b04      	ldr	r3, [sp, #16]
 8018caa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8018cae:	e7a1      	b.n	8018bf4 <__kernel_rem_pio2+0x4e4>
 8018cb0:	9c05      	ldr	r4, [sp, #20]
 8018cb2:	ab48      	add	r3, sp, #288	; 0x120
 8018cb4:	441c      	add	r4, r3
 8018cb6:	2000      	movs	r0, #0
 8018cb8:	2100      	movs	r1, #0
 8018cba:	2d00      	cmp	r5, #0
 8018cbc:	da09      	bge.n	8018cd2 <__kernel_rem_pio2+0x5c2>
 8018cbe:	f1bb 0f00 	cmp.w	fp, #0
 8018cc2:	d002      	beq.n	8018cca <__kernel_rem_pio2+0x5ba>
 8018cc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018cc8:	4619      	mov	r1, r3
 8018cca:	9b04      	ldr	r3, [sp, #16]
 8018ccc:	e9c3 0100 	strd	r0, r1, [r3]
 8018cd0:	e790      	b.n	8018bf4 <__kernel_rem_pio2+0x4e4>
 8018cd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018cd6:	f7e7 fad9 	bl	800028c <__adddf3>
 8018cda:	3d01      	subs	r5, #1
 8018cdc:	e7ed      	b.n	8018cba <__kernel_rem_pio2+0x5aa>
 8018cde:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8018ce2:	f7e7 fad3 	bl	800028c <__adddf3>
 8018ce6:	3c01      	subs	r4, #1
 8018ce8:	e7c3      	b.n	8018c72 <__kernel_rem_pio2+0x562>
 8018cea:	4602      	mov	r2, r0
 8018cec:	460b      	mov	r3, r1
 8018cee:	e7c8      	b.n	8018c82 <__kernel_rem_pio2+0x572>
 8018cf0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8018cf4:	f7e7 faca 	bl	800028c <__adddf3>
 8018cf8:	3401      	adds	r4, #1
 8018cfa:	e7cd      	b.n	8018c98 <__kernel_rem_pio2+0x588>
 8018cfc:	e9da 8900 	ldrd	r8, r9, [sl]
 8018d00:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8018d04:	9b00      	ldr	r3, [sp, #0]
 8018d06:	3b01      	subs	r3, #1
 8018d08:	9300      	str	r3, [sp, #0]
 8018d0a:	4632      	mov	r2, r6
 8018d0c:	463b      	mov	r3, r7
 8018d0e:	4640      	mov	r0, r8
 8018d10:	4649      	mov	r1, r9
 8018d12:	f7e7 fabb 	bl	800028c <__adddf3>
 8018d16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018d1a:	4602      	mov	r2, r0
 8018d1c:	460b      	mov	r3, r1
 8018d1e:	4640      	mov	r0, r8
 8018d20:	4649      	mov	r1, r9
 8018d22:	f7e7 fab1 	bl	8000288 <__aeabi_dsub>
 8018d26:	4632      	mov	r2, r6
 8018d28:	463b      	mov	r3, r7
 8018d2a:	f7e7 faaf 	bl	800028c <__adddf3>
 8018d2e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8018d32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018d36:	ed8a 7b00 	vstr	d7, [sl]
 8018d3a:	e770      	b.n	8018c1e <__kernel_rem_pio2+0x50e>
 8018d3c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8018d40:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8018d44:	4640      	mov	r0, r8
 8018d46:	4632      	mov	r2, r6
 8018d48:	463b      	mov	r3, r7
 8018d4a:	4649      	mov	r1, r9
 8018d4c:	f7e7 fa9e 	bl	800028c <__adddf3>
 8018d50:	e9cd 0100 	strd	r0, r1, [sp]
 8018d54:	4602      	mov	r2, r0
 8018d56:	460b      	mov	r3, r1
 8018d58:	4640      	mov	r0, r8
 8018d5a:	4649      	mov	r1, r9
 8018d5c:	f7e7 fa94 	bl	8000288 <__aeabi_dsub>
 8018d60:	4632      	mov	r2, r6
 8018d62:	463b      	mov	r3, r7
 8018d64:	f7e7 fa92 	bl	800028c <__adddf3>
 8018d68:	ed9d 7b00 	vldr	d7, [sp]
 8018d6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018d70:	ed84 7b00 	vstr	d7, [r4]
 8018d74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018d78:	e757      	b.n	8018c2a <__kernel_rem_pio2+0x51a>
 8018d7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018d7e:	f7e7 fa85 	bl	800028c <__adddf3>
 8018d82:	3d01      	subs	r5, #1
 8018d84:	e75c      	b.n	8018c40 <__kernel_rem_pio2+0x530>
 8018d86:	9b04      	ldr	r3, [sp, #16]
 8018d88:	9a04      	ldr	r2, [sp, #16]
 8018d8a:	601f      	str	r7, [r3, #0]
 8018d8c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8018d90:	605c      	str	r4, [r3, #4]
 8018d92:	609d      	str	r5, [r3, #8]
 8018d94:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018d98:	60d3      	str	r3, [r2, #12]
 8018d9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d9e:	6110      	str	r0, [r2, #16]
 8018da0:	6153      	str	r3, [r2, #20]
 8018da2:	e727      	b.n	8018bf4 <__kernel_rem_pio2+0x4e4>
 8018da4:	41700000 	.word	0x41700000
 8018da8:	3e700000 	.word	0x3e700000
 8018dac:	00000000 	.word	0x00000000

08018db0 <scalbn>:
 8018db0:	b570      	push	{r4, r5, r6, lr}
 8018db2:	ec55 4b10 	vmov	r4, r5, d0
 8018db6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8018dba:	4606      	mov	r6, r0
 8018dbc:	462b      	mov	r3, r5
 8018dbe:	b999      	cbnz	r1, 8018de8 <scalbn+0x38>
 8018dc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018dc4:	4323      	orrs	r3, r4
 8018dc6:	d03f      	beq.n	8018e48 <scalbn+0x98>
 8018dc8:	4b35      	ldr	r3, [pc, #212]	; (8018ea0 <scalbn+0xf0>)
 8018dca:	4629      	mov	r1, r5
 8018dcc:	ee10 0a10 	vmov	r0, s0
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	f7e7 fc11 	bl	80005f8 <__aeabi_dmul>
 8018dd6:	4b33      	ldr	r3, [pc, #204]	; (8018ea4 <scalbn+0xf4>)
 8018dd8:	429e      	cmp	r6, r3
 8018dda:	4604      	mov	r4, r0
 8018ddc:	460d      	mov	r5, r1
 8018dde:	da10      	bge.n	8018e02 <scalbn+0x52>
 8018de0:	a327      	add	r3, pc, #156	; (adr r3, 8018e80 <scalbn+0xd0>)
 8018de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de6:	e01f      	b.n	8018e28 <scalbn+0x78>
 8018de8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8018dec:	4291      	cmp	r1, r2
 8018dee:	d10c      	bne.n	8018e0a <scalbn+0x5a>
 8018df0:	ee10 2a10 	vmov	r2, s0
 8018df4:	4620      	mov	r0, r4
 8018df6:	4629      	mov	r1, r5
 8018df8:	f7e7 fa48 	bl	800028c <__adddf3>
 8018dfc:	4604      	mov	r4, r0
 8018dfe:	460d      	mov	r5, r1
 8018e00:	e022      	b.n	8018e48 <scalbn+0x98>
 8018e02:	460b      	mov	r3, r1
 8018e04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8018e08:	3936      	subs	r1, #54	; 0x36
 8018e0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8018e0e:	4296      	cmp	r6, r2
 8018e10:	dd0d      	ble.n	8018e2e <scalbn+0x7e>
 8018e12:	2d00      	cmp	r5, #0
 8018e14:	a11c      	add	r1, pc, #112	; (adr r1, 8018e88 <scalbn+0xd8>)
 8018e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e1a:	da02      	bge.n	8018e22 <scalbn+0x72>
 8018e1c:	a11c      	add	r1, pc, #112	; (adr r1, 8018e90 <scalbn+0xe0>)
 8018e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e22:	a319      	add	r3, pc, #100	; (adr r3, 8018e88 <scalbn+0xd8>)
 8018e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e28:	f7e7 fbe6 	bl	80005f8 <__aeabi_dmul>
 8018e2c:	e7e6      	b.n	8018dfc <scalbn+0x4c>
 8018e2e:	1872      	adds	r2, r6, r1
 8018e30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018e34:	428a      	cmp	r2, r1
 8018e36:	dcec      	bgt.n	8018e12 <scalbn+0x62>
 8018e38:	2a00      	cmp	r2, #0
 8018e3a:	dd08      	ble.n	8018e4e <scalbn+0x9e>
 8018e3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018e40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018e44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018e48:	ec45 4b10 	vmov	d0, r4, r5
 8018e4c:	bd70      	pop	{r4, r5, r6, pc}
 8018e4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018e52:	da08      	bge.n	8018e66 <scalbn+0xb6>
 8018e54:	2d00      	cmp	r5, #0
 8018e56:	a10a      	add	r1, pc, #40	; (adr r1, 8018e80 <scalbn+0xd0>)
 8018e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e5c:	dac0      	bge.n	8018de0 <scalbn+0x30>
 8018e5e:	a10e      	add	r1, pc, #56	; (adr r1, 8018e98 <scalbn+0xe8>)
 8018e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e64:	e7bc      	b.n	8018de0 <scalbn+0x30>
 8018e66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018e6a:	3236      	adds	r2, #54	; 0x36
 8018e6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018e70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018e74:	4620      	mov	r0, r4
 8018e76:	4b0c      	ldr	r3, [pc, #48]	; (8018ea8 <scalbn+0xf8>)
 8018e78:	2200      	movs	r2, #0
 8018e7a:	e7d5      	b.n	8018e28 <scalbn+0x78>
 8018e7c:	f3af 8000 	nop.w
 8018e80:	c2f8f359 	.word	0xc2f8f359
 8018e84:	01a56e1f 	.word	0x01a56e1f
 8018e88:	8800759c 	.word	0x8800759c
 8018e8c:	7e37e43c 	.word	0x7e37e43c
 8018e90:	8800759c 	.word	0x8800759c
 8018e94:	fe37e43c 	.word	0xfe37e43c
 8018e98:	c2f8f359 	.word	0xc2f8f359
 8018e9c:	81a56e1f 	.word	0x81a56e1f
 8018ea0:	43500000 	.word	0x43500000
 8018ea4:	ffff3cb0 	.word	0xffff3cb0
 8018ea8:	3c900000 	.word	0x3c900000

08018eac <_init>:
 8018eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eae:	bf00      	nop
 8018eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eb2:	bc08      	pop	{r3}
 8018eb4:	469e      	mov	lr, r3
 8018eb6:	4770      	bx	lr

08018eb8 <_fini>:
 8018eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eba:	bf00      	nop
 8018ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ebe:	bc08      	pop	{r3}
 8018ec0:	469e      	mov	lr, r3
 8018ec2:	4770      	bx	lr
