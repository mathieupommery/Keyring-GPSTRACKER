
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002408  08010000  08010000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012408  08012408  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012408  08012408  00022408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012410  08012410  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012410  08012410  00022410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012414  08012414  00022414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08012418  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  200001f8  0801260c  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d24  0801260c  00030d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d44e  00000000  00000000  00030267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c86  00000000  00000000  0004d6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  00051340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001428  00000000  00000000  00052d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025623  00000000  00000000  00054138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fccf  00000000  00000000  0007975b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2861  00000000  00000000  0009942a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000087fc  00000000  00000000  0017bc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00184488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ffe4 	.word	0x0800ffe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800ffe4 	.word	0x0800ffe4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <QMC_init>:
//code recuperer et fonctionnel, il utilise une fonction init, permettant d'initialiser le capteur correctement en ecrivant dans ces registres selon le datasheet,
//puis d'une fonction read, qui lit le capteur puis met à jour la structurede donnée

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2211      	movs	r2, #17
 8001008:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 800100a:	2301      	movs	r3, #1
 800100c:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2bc8      	cmp	r3, #200	; 0xc8
 8001018:	d107      	bne.n	800102a <QMC_init+0x3a>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	f043 030c 	orr.w	r3, r3, #12
 8001022:	b2da      	uxtb	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	711a      	strb	r2, [r3, #4]
 8001028:	e024      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d107      	bne.n	8001040 <QMC_init+0x50>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	b2da      	uxtb	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	711a      	strb	r2, [r3, #4]
 800103e:	e019      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b32      	cmp	r3, #50	; 0x32
 8001044:	d107      	bne.n	8001056 <QMC_init+0x66>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	711a      	strb	r2, [r3, #4]
 8001054:	e00e      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b0a      	cmp	r3, #10
 800105a:	d104      	bne.n	8001066 <QMC_init+0x76>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	791a      	ldrb	r2, [r3, #4]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	711a      	strb	r2, [r3, #4]
 8001064:	e006      	b.n	8001074 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	f043 030c 	orr.w	r3, r3, #12
 800106e:	b2da      	uxtb	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	220b      	movs	r2, #11
 800108a:	211a      	movs	r1, #26
 800108c:	f005 fc0c 	bl	80068a8 <HAL_I2C_Mem_Write>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <QMC_init+0xaa>
 8001096:	2301      	movs	r3, #1
 8001098:	e014      	b.n	80010c4 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2364      	movs	r3, #100	; 0x64
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	3301      	adds	r3, #1
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	2209      	movs	r2, #9
 80010b2:	211a      	movs	r1, #26
 80010b4:	f005 fbf8 	bl	80068a8 <HAL_I2C_Mem_Write>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <QMC_init+0xd2>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <QMC_init+0xd4>

	return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010dc:	d104      	bne.n	80010e8 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e6:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_15){
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ee:	d104      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x2e>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010f8:	6013      	str	r3, [r2, #0]

	}
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000740 	.word	0x20000740
 800110c:	20000744 	.word	0x20000744

08001110 <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800111e:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001128:	d922      	bls.n	8001170 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001132:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 800113c:	4413      	add	r3, r2
 800113e:	89fa      	ldrh	r2, [r7, #14]
 8001140:	4927      	ldr	r1, [pc, #156]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001142:	4618      	mov	r0, r3
 8001144:	f00b f939 	bl	800c3ba <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800114a:	2200      	movs	r2, #0
 800114c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001152:	1899      	adds	r1, r3, r2
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800115a:	461a      	mov	r2, r3
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 800115e:	f00b f92c 	bl	800c3ba <memcpy>
				newPos = (64-datatocopy);  // update the position
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 800116c:	801a      	strh	r2, [r3, #0]
 800116e:	e01b      	b.n	80011a8 <HAL_UART_RxCpltCallback+0x98>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 8001178:	4413      	add	r3, r2
 800117a:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 800117c:	4614      	mov	r4, r2
 800117e:	469c      	mov	ip, r3
 8001180:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001184:	4665      	mov	r5, ip
 8001186:	4626      	mov	r6, r4
 8001188:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800118a:	6028      	str	r0, [r5, #0]
 800118c:	6069      	str	r1, [r5, #4]
 800118e:	60aa      	str	r2, [r5, #8]
 8001190:	60eb      	str	r3, [r5, #12]
 8001192:	3410      	adds	r4, #16
 8001194:	f10c 0c10 	add.w	ip, ip, #16
 8001198:	4574      	cmp	r4, lr
 800119a:	d1f3      	bne.n	8001184 <HAL_UART_RxCpltCallback+0x74>
				newPos = 64+oldPos; //update buffer position
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3340      	adds	r3, #64	; 0x40
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 80011a6:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_UART_RxCpltCallback+0xd4>)
 80011ae:	f007 fdb3 	bl	8008d18 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_UART_RxCpltCallback+0xd8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_UART_RxCpltCallback+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0204 	bic.w	r2, r2, #4
 80011c0:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80011c2:	2240      	movs	r2, #64	; 0x40
 80011c4:	4906      	ldr	r1, [pc, #24]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <HAL_UART_RxCpltCallback+0xd4>)
 80011c8:	f007 fda6 	bl	8008d18 <HAL_UART_Receive_DMA>
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d4:	200004be 	.word	0x200004be
 80011d8:	200004bc 	.word	0x200004bc
 80011dc:	20000500 	.word	0x20000500
 80011e0:	200004c0 	.word	0x200004c0
 80011e4:	200003a0 	.word	0x200003a0
 80011e8:	20000428 	.word	0x20000428
 80011ec:	00000000 	.word	0x00000000

080011f0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a3c      	ldr	r2, [pc, #240]	; (80012f0 <HAL_ADC_ConvCpltCallback+0x100>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d166      	bne.n	80012d2 <HAL_ADC_ConvCpltCallback+0xe2>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 8001204:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_ADC_ConvCpltCallback+0x104>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f98b 	bl	8000524 <__aeabi_i2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	a135      	add	r1, pc, #212	; (adr r1, 80012e8 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001218:	f7ff fb18 	bl	800084c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fce0 	bl	8000be8 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	4a33      	ldr	r2, [pc, #204]	; (80012f8 <HAL_ADC_ConvCpltCallback+0x108>)
 800122c:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_ADC_ConvCpltCallback+0x10c>)
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <HAL_ADC_ConvCpltCallback+0x110>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123e:	ee17 0a90 	vmov	r0, s15
 8001242:	f7ff f981 	bl	8000548 <__aeabi_f2d>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	f04f 0000 	mov.w	r0, #0
 800124e:	492d      	ldr	r1, [pc, #180]	; (8001304 <HAL_ADC_ConvCpltCallback+0x114>)
 8001250:	f7ff fafc 	bl	800084c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4690      	mov	r8, r2
 800125a:	4699      	mov	r9, r3
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <HAL_ADC_ConvCpltCallback+0x104>)
 800125e:	885b      	ldrh	r3, [r3, #2]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f95f 	bl	8000524 <__aeabi_i2d>
 8001266:	4604      	mov	r4, r0
 8001268:	460d      	mov	r5, r1
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <HAL_ADC_ConvCpltCallback+0x108>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f96a 	bl	8000548 <__aeabi_f2d>
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_ADC_ConvCpltCallback+0x118>)
 800127a:	f7ff fae7 	bl	800084c <__aeabi_ddiv>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7ff f9b7 	bl	80005f8 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4614      	mov	r4, r2
 8001290:	461d      	mov	r5, r3
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_ADC_ConvCpltCallback+0x110>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f956 	bl	8000548 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4620      	mov	r0, r4
 80012a2:	4629      	mov	r1, r5
 80012a4:	f7fe fff0 	bl	8000288 <__aeabi_dsub>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4640      	mov	r0, r8
 80012ae:	4649      	mov	r1, r9
 80012b0:	f7ff f9a2 	bl	80005f8 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc94 	bl	8000be8 <__aeabi_d2f>
 80012c0:	ee07 0a10 	vmov	s14, r0
 80012c4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80012c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_ADC_ConvCpltCallback+0x11c>)
 80012ce:	edc3 7a00 	vstr	s15, [r3]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 2);
 80012d2:	2202      	movs	r2, #2
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <HAL_ADC_ConvCpltCallback+0x104>)
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <HAL_ADC_ConvCpltCallback+0x120>)
 80012d8:	f003 fd98 	bl	8004e0c <HAL_ADC_Start_DMA>



}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012e6:	bf00      	nop
 80012e8:	d70a3d70 	.word	0xd70a3d70
 80012ec:	40b36323 	.word	0x40b36323
 80012f0:	50040000 	.word	0x50040000
 80012f4:	20000750 	.word	0x20000750
 80012f8:	20000758 	.word	0x20000758
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004
 8001304:	40590000 	.word	0x40590000
 8001308:	40080000 	.word	0x40080000
 800130c:	20000754 	.word	0x20000754
 8001310:	20000214 	.word	0x20000214

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f003 f9c2 	bl	80046a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f85d 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 fa81 	bl	8001828 <MX_GPIO_Init>
  MX_DMA_Init();
 8001326:	f000 fa4d 	bl	80017c4 <MX_DMA_Init>
  MX_I2C1_Init();
 800132a:	f000 f923 	bl	8001574 <MX_I2C1_Init>
  MX_I2C3_Init();
 800132e:	f000 f961 	bl	80015f4 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001332:	f000 f9cd 	bl	80016d0 <MX_LPUART1_UART_Init>
  MX_LPTIM1_Init();
 8001336:	f000 f99d 	bl	8001674 <MX_LPTIM1_Init>
  MX_ADC1_Init();
 800133a:	f000 f8a5 	bl	8001488 <MX_ADC1_Init>
  MX_TIM2_Init();
 800133e:	f000 f9f3 	bl	8001728 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 8001342:	f000 ff93 	bl	800226c <ssd1306_Init>
	HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	; 0x64
 8001348:	f003 fa20 	bl	800478c <HAL_Delay>
	ssd1306_Fill(Black);
 800134c:	2000      	movs	r0, #0
 800134e:	f000 fff7 	bl	8002340 <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);//start screen
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	2340      	movs	r3, #64	; 0x40
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2340      	movs	r3, #64	; 0x40
 800135c:	4a17      	ldr	r2, [pc, #92]	; (80013bc <main+0xa8>)
 800135e:	2120      	movs	r1, #32
 8001360:	2020      	movs	r0, #32
 8001362:	f001 fabf 	bl	80028e4 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();//demarrage des différents périphériques en i2c, qui ont besoin detre configuré
 8001366:	f001 f803 	bl	8002370 <ssd1306_UpdateScreen>
	QMC_init(&compasdata,&hi2c1,10);
 800136a:	220a      	movs	r2, #10
 800136c:	4914      	ldr	r1, [pc, #80]	; (80013c0 <main+0xac>)
 800136e:	4815      	ldr	r0, [pc, #84]	; (80013c4 <main+0xb0>)
 8001370:	f7ff fe3e 	bl	8000ff0 <QMC_init>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);//pour l'instant le gps est toujours alimenté
 8001374:	2201      	movs	r2, #1
 8001376:	2102      	movs	r1, #2
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f005 f9c8 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001384:	f003 fa02 	bl	800478c <HAL_Delay>
//		}
//
//	}


	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 2);
 8001388:	2202      	movs	r2, #2
 800138a:	490f      	ldr	r1, [pc, #60]	; (80013c8 <main+0xb4>)
 800138c:	480f      	ldr	r0, [pc, #60]	; (80013cc <main+0xb8>)
 800138e:	f003 fd3d 	bl	8004e0c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001392:	480f      	ldr	r0, [pc, #60]	; (80013d0 <main+0xbc>)
 8001394:	f007 f9f8 	bl	8008788 <HAL_TIM_Base_Start>

	HAL_UART_Abort(&hlpuart1);
 8001398:	480e      	ldr	r0, [pc, #56]	; (80013d4 <main+0xc0>)
 800139a:	f007 fd09 	bl	8008db0 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//lancement du dma pour le gps
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	490d      	ldr	r1, [pc, #52]	; (80013d8 <main+0xc4>)
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <main+0xc0>)
 80013a4:	f007 fcb8 	bl	8008d18 <HAL_UART_Receive_DMA>

	ssd1306_Fill(Black);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f000 ffc9 	bl	8002340 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80013ae:	f000 ffdf 	bl	8002370 <ssd1306_UpdateScreen>

    /* USER CODE BEGIN 3 */



		statemachine();//on execute la machine à etat
 80013b2:	f001 fb25 	bl	8002a00 <statemachine>
		ssd1306_UpdateScreen();//la machine a état ce sera occupe de mettre les choses necessaire dans le buffer du processeur necessaire a envoyer a l'ecran, il reste plus qu'a l'envoyer en i2c
 80013b6:	f000 ffdb 	bl	8002370 <ssd1306_UpdateScreen>
		statemachine();//on execute la machine à etat
 80013ba:	e7fa      	b.n	80013b2 <main+0x9e>
 80013bc:	08010194 	.word	0x08010194
 80013c0:	200002c0 	.word	0x200002c0
 80013c4:	20000bb4 	.word	0x20000bb4
 80013c8:	20000750 	.word	0x20000750
 80013cc:	20000214 	.word	0x20000214
 80013d0:	20000470 	.word	0x20000470
 80013d4:	200003a0 	.word	0x200003a0
 80013d8:	200004c0 	.word	0x200004c0

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b096      	sub	sp, #88	; 0x58
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	2244      	movs	r2, #68	; 0x44
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00a fec9 	bl	800c182 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001402:	f005 fff3 	bl	80073ec <HAL_PWREx_ControlVoltageScaling>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800140c:	f000 fa90 	bl	8001930 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001410:	2318      	movs	r3, #24
 8001412:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001418:	2301      	movs	r3, #1
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001420:	2360      	movs	r3, #96	; 0x60
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001424:	2302      	movs	r3, #2
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001428:	2301      	movs	r3, #1
 800142a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001430:	2314      	movs	r3, #20
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001434:	2307      	movs	r3, #7
 8001436:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001438:	2302      	movs	r3, #2
 800143a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800143c:	2302      	movs	r3, #2
 800143e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4618      	mov	r0, r3
 8001446:	f006 f827 	bl	8007498 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001450:	f000 fa6e 	bl	8001930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	230f      	movs	r3, #15
 8001456:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001458:	2303      	movs	r3, #3
 800145a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001460:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001464:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	2102      	movs	r1, #2
 800146e:	4618      	mov	r0, r3
 8001470:	f006 fc26 	bl	8007cc0 <HAL_RCC_ClockConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800147a:	f000 fa59 	bl	8001930 <Error_Handler>
  }
}
 800147e:	bf00      	nop
 8001480:	3758      	adds	r7, #88	; 0x58
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148e:	463b      	mov	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014a0:	4a31      	ldr	r2, [pc, #196]	; (8001568 <MX_ADC1_Init+0xe0>)
 80014a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b0:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014be:	2204      	movs	r2, #4
 80014c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014de:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_ADC1_Init+0xdc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001502:	4818      	ldr	r0, [pc, #96]	; (8001564 <MX_ADC1_Init+0xdc>)
 8001504:	f003 fb40 	bl	8004b88 <HAL_ADC_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800150e:	f000 fa0f 	bl	8001930 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_ADC1_Init+0xe4>)
 8001514:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001516:	2306      	movs	r3, #6
 8001518:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800151a:	2307      	movs	r3, #7
 800151c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800151e:	237f      	movs	r3, #127	; 0x7f
 8001520:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001522:	2304      	movs	r3, #4
 8001524:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_ADC1_Init+0xdc>)
 8001530:	f003 fec2 	bl	80052b8 <HAL_ADC_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800153a:	f000 f9f9 	bl	8001930 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_ADC1_Init+0xe8>)
 8001540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001542:	230c      	movs	r3, #12
 8001544:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_ADC1_Init+0xdc>)
 800154c:	f003 feb4 	bl	80052b8 <HAL_ADC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001556:	f000 f9eb 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000214 	.word	0x20000214
 8001568:	50040000 	.word	0x50040000
 800156c:	80000001 	.word	0x80000001
 8001570:	c7520000 	.word	0xc7520000

08001574 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_I2C1_Init+0x74>)
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <MX_I2C1_Init+0x78>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_I2C1_Init+0x74>)
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <MX_I2C1_Init+0x7c>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_I2C1_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_I2C1_Init+0x74>)
 800158c:	2201      	movs	r2, #1
 800158e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_I2C1_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_I2C1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_I2C1_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_I2C1_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_I2C1_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ae:	480e      	ldr	r0, [pc, #56]	; (80015e8 <MX_I2C1_Init+0x74>)
 80015b0:	f005 f8de 	bl	8006770 <HAL_I2C_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015ba:	f000 f9b9 	bl	8001930 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015be:	2100      	movs	r1, #0
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <MX_I2C1_Init+0x74>)
 80015c2:	f005 fce9 	bl	8006f98 <HAL_I2CEx_ConfigAnalogFilter>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015cc:	f000 f9b0 	bl	8001930 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_I2C1_Init+0x74>)
 80015d4:	f005 fd2b 	bl	800702e <HAL_I2CEx_ConfigDigitalFilter>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015de:	f000 f9a7 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200002c0 	.word	0x200002c0
 80015ec:	40005400 	.word	0x40005400
 80015f0:	00202538 	.word	0x00202538

080015f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_I2C3_Init+0x74>)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <MX_I2C3_Init+0x78>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00202538;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_I2C3_Init+0x74>)
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <MX_I2C3_Init+0x7c>)
 8001602:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_I2C3_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_I2C3_Init+0x74>)
 800160c:	2201      	movs	r2, #1
 800160e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MX_I2C3_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_I2C3_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_I2C3_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_I2C3_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_I2C3_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800162e:	480e      	ldr	r0, [pc, #56]	; (8001668 <MX_I2C3_Init+0x74>)
 8001630:	f005 f89e 	bl	8006770 <HAL_I2C_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800163a:	f000 f979 	bl	8001930 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4809      	ldr	r0, [pc, #36]	; (8001668 <MX_I2C3_Init+0x74>)
 8001642:	f005 fca9 	bl	8006f98 <HAL_I2CEx_ConfigAnalogFilter>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800164c:	f000 f970 	bl	8001930 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001650:	2100      	movs	r1, #0
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_I2C3_Init+0x74>)
 8001654:	f005 fceb 	bl	800702e <HAL_I2CEx_ConfigDigitalFilter>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800165e:	f000 f967 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000314 	.word	0x20000314
 800166c:	40005c00 	.word	0x40005c00
 8001670:	00202538 	.word	0x00202538

08001674 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <MX_LPTIM1_Init+0x54>)
 800167a:	4a14      	ldr	r2, [pc, #80]	; (80016cc <MX_LPTIM1_Init+0x58>)
 800167c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_LPTIM1_Init+0x54>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <MX_LPTIM1_Init+0x54>)
 8001686:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800168a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_LPTIM1_Init+0x54>)
 800168e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001692:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_LPTIM1_Init+0x54>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_LPTIM1_Init+0x54>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_LPTIM1_Init+0x54>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_LPTIM1_Init+0x54>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_LPTIM1_Init+0x54>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_LPTIM1_Init+0x54>)
 80016b4:	f005 fd08 	bl	80070c8 <HAL_LPTIM_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80016be:	f000 f937 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000368 	.word	0x20000368
 80016cc:	40007c00 	.word	0x40007c00

080016d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_LPUART1_UART_Init+0x50>)
 80016d6:	4a13      	ldr	r2, [pc, #76]	; (8001724 <MX_LPUART1_UART_Init+0x54>)
 80016d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_LPUART1_UART_Init+0x50>)
 80016dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_LPUART1_UART_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <MX_LPUART1_UART_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_LPUART1_UART_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <MX_LPUART1_UART_Init+0x50>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_LPUART1_UART_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <MX_LPUART1_UART_Init+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_LPUART1_UART_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_LPUART1_UART_Init+0x50>)
 800170e:	f007 fab5 	bl	8008c7c <HAL_UART_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001718:	f000 f90a 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200003a0 	.word	0x200003a0
 8001724:	40008000 	.word	0x40008000

08001728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_TIM2_Init+0x98>)
 8001748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_TIM2_Init+0x98>)
 8001750:	f240 128f 	movw	r2, #399	; 0x18f
 8001754:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_TIM2_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_TIM2_Init+0x98>)
 800175e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001762:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_TIM2_Init+0x98>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_TIM2_Init+0x98>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <MX_TIM2_Init+0x98>)
 8001772:	f006 ffb1 	bl	80086d8 <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800177c:	f000 f8d8 	bl	8001930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_TIM2_Init+0x98>)
 800178e:	f007 f847 	bl	8008820 <HAL_TIM_ConfigClockSource>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001798:	f000 f8ca 	bl	8001930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800179c:	2320      	movs	r3, #32
 800179e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_TIM2_Init+0x98>)
 80017aa:	f007 fa01 	bl	8008bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80017b4:	f000 f8bc 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000470 	.word	0x20000470

080017c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_DMA_Init+0x60>)
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	4a15      	ldr	r2, [pc, #84]	; (8001824 <MX_DMA_Init+0x60>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6493      	str	r3, [r2, #72]	; 0x48
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_DMA_Init+0x60>)
 80017d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_DMA_Init+0x60>)
 80017e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e6:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <MX_DMA_Init+0x60>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6493      	str	r3, [r2, #72]	; 0x48
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <MX_DMA_Init+0x60>)
 80017f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	200b      	movs	r0, #11
 8001800:	f004 fb63 	bl	8005eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001804:	200b      	movs	r0, #11
 8001806:	f004 fb7c 	bl	8005f02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 1, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2101      	movs	r1, #1
 800180e:	2045      	movs	r0, #69	; 0x45
 8001810:	f004 fb5b 	bl	8005eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001814:	2045      	movs	r0, #69	; 0x45
 8001816:	f004 fb74 	bl	8005f02 <HAL_NVIC_EnableIRQ>

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	4b39      	ldr	r3, [pc, #228]	; (8001924 <MX_GPIO_Init+0xfc>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a38      	ldr	r2, [pc, #224]	; (8001924 <MX_GPIO_Init+0xfc>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b36      	ldr	r3, [pc, #216]	; (8001924 <MX_GPIO_Init+0xfc>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b33      	ldr	r3, [pc, #204]	; (8001924 <MX_GPIO_Init+0xfc>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a32      	ldr	r2, [pc, #200]	; (8001924 <MX_GPIO_Init+0xfc>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b30      	ldr	r3, [pc, #192]	; (8001924 <MX_GPIO_Init+0xfc>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <MX_GPIO_Init+0xfc>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <MX_GPIO_Init+0xfc>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <MX_GPIO_Init+0xfc>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2102      	movs	r1, #2
 800188a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188e:	f004 ff3f 	bl	8006710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2101      	movs	r1, #1
 8001896:	4824      	ldr	r0, [pc, #144]	; (8001928 <MX_GPIO_Init+0x100>)
 8001898:	f004 ff3a 	bl	8006710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800189c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018a8:	2302      	movs	r3, #2
 80018aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4619      	mov	r1, r3
 80018b2:	481e      	ldr	r0, [pc, #120]	; (800192c <MX_GPIO_Init+0x104>)
 80018b4:	f004 fdc2 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018b8:	2302      	movs	r3, #2
 80018ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f004 fdb3 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018d6:	2310      	movs	r3, #16
 80018d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018da:	2303      	movs	r3, #3
 80018dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f004 fda6 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f0:	2301      	movs	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	4619      	mov	r1, r3
 8001906:	4808      	ldr	r0, [pc, #32]	; (8001928 <MX_GPIO_Init+0x100>)
 8001908:	f004 fd98 	bl	800643c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	2028      	movs	r0, #40	; 0x28
 8001912:	f004 fada 	bl	8005eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001916:	2028      	movs	r0, #40	; 0x28
 8001918:	f004 faf3 	bl	8005f02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800191c:	bf00      	nop
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	48000400 	.word	0x48000400
 800192c:	48000800 	.word	0x48000800

08001930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i
}
 8001936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001938:	e7fe      	b.n	8001938 <Error_Handler+0x8>

0800193a <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7fe fc94 	bl	8000270 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	2b04      	cmp	r3, #4
 800194c:	d801      	bhi.n	8001952 <gps_checksum+0x18>
 800194e:	2300      	movs	r3, #0
 8001950:	e038      	b.n	80019c4 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe fc8c 	bl	8000270 <strlen>
 8001958:	4603      	mov	r3, r0
 800195a:	3b04      	subs	r3, #4
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7fe fc83 	bl	8000270 <strlen>
 800196a:	4603      	mov	r3, r0
 800196c:	3b03      	subs	r3, #3
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	e00a      	b.n	8001996 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	4053      	eors	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	3301      	adds	r3, #1
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe fc6a 	bl	8000270 <strlen>
 800199c:	4603      	mov	r3, r0
 800199e:	1f5a      	subs	r2, r3, #5
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d8ec      	bhi.n	8001980 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	2210      	movs	r2, #16
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f009 fc0e 	bl	800b1d0 <strtol>
 80019b4:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d101      	bne.n	80019c2 <gps_checksum+0x88>
        return 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <gps_checksum+0x8a>
    }
    else{
        return 0;
 80019c2:	2300      	movs	r3, #0
    }
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b0b7      	sub	sp, #220	; 0xdc
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	2264      	movs	r2, #100	; 0x64
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00a fbcc 	bl	800c182 <memset>
    char *marker = strtok(inputString, ",");
 80019ea:	49c2      	ldr	r1, [pc, #776]	; (8001cf4 <nmea_GPGGA+0x328>)
 80019ec:	6838      	ldr	r0, [r7, #0]
 80019ee:	f00a fbe3 	bl	800c1b8 <strtok>
 80019f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80019f6:	e027      	b.n	8001a48 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80019f8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80019fc:	f7fe fc38 	bl	8000270 <strlen>
 8001a00:	4603      	mov	r3, r0
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001a08:	1c63      	adds	r3, r4, #1
 8001a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f008 fc24 	bl	800a25c <malloc>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	00a3      	lsls	r3, r4, #2
 8001a1a:	33d8      	adds	r3, #216	; 0xd8
 8001a1c:	443b      	add	r3, r7
 8001a1e:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a26:	3b01      	subs	r3, #1
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	33d8      	adds	r3, #216	; 0xd8
 8001a2c:	443b      	add	r3, r7
 8001a2e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001a32:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00a fcb7 	bl	800c3aa <strcpy>
        marker = strtok(NULL, ",");
 8001a3c:	49ad      	ldr	r1, [pc, #692]	; (8001cf4 <nmea_GPGGA+0x328>)
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f00a fbba 	bl	800c1b8 <strtok>
 8001a44:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001a48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1d3      	bne.n	80019f8 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	332c      	adds	r3, #44	; 0x2c
 8001a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00a fc9e 	bl	800c3aa <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001a6e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001a72:	2b53      	cmp	r3, #83	; 0x53
 8001a74:	d004      	beq.n	8001a80 <nmea_GPGGA+0xb4>
 8001a76:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001a7a:	2b4e      	cmp	r3, #78	; 0x4e
 8001a7c:	f040 8159 	bne.w	8001d32 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a86:	e010      	b.n	8001aaa <nmea_GPGGA+0xde>
 8001a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a8e:	4413      	add	r3, r2
 8001a90:	7819      	ldrb	r1, [r3, #0]
 8001a92:	f107 021c 	add.w	r2, r7, #28
 8001a96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a9a:	4413      	add	r3, r2
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001aaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	ddea      	ble.n	8001a88 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ab8:	e011      	b.n	8001ade <nmea_GPGGA+0x112>
 8001aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001abc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	7819      	ldrb	r1, [r3, #0]
 8001ac6:	f107 0214 	add.w	r2, r7, #20
 8001aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ace:	4413      	add	r3, r2
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	dde9      	ble.n	8001aba <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	220a      	movs	r2, #10
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f009 fb6e 	bl	800b1d0 <strtol>
 8001af4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f009 fa7c 	bl	800affc <strtof>
 8001b04:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001b08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b14:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001b18:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001cf8 <nmea_GPGGA+0x32c>
 8001b1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b24:	ee17 0a90 	vmov	r0, s15
 8001b28:	f7fe fd0e 	bl	8000548 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001b3a:	e010      	b.n	8001b5e <nmea_GPGGA+0x192>
 8001b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b42:	4413      	add	r3, r2
 8001b44:	7819      	ldrb	r1, [r3, #0]
 8001b46:	f107 0210 	add.w	r2, r7, #16
 8001b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b4e:	4413      	add	r3, r2
 8001b50:	460a      	mov	r2, r1
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001b5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	ddea      	ble.n	8001b3c <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b6c:	e011      	b.n	8001b92 <nmea_GPGGA+0x1c6>
 8001b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b74:	3303      	adds	r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	7819      	ldrb	r1, [r3, #0]
 8001b7a:	f107 0208 	add.w	r2, r7, #8
 8001b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b82:	4413      	add	r3, r2
 8001b84:	460a      	mov	r2, r1
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b96:	2b05      	cmp	r3, #5
 8001b98:	dde9      	ble.n	8001b6e <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	220a      	movs	r2, #10
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f009 fb14 	bl	800b1d0 <strtol>
 8001ba8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f009 fa22 	bl	800affc <strtof>
 8001bb8:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc8:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001bcc:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001cf8 <nmea_GPGGA+0x32c>
 8001bd0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd8:	ee17 0a90 	vmov	r0, s15
 8001bdc:	f7fe fcb4 	bl	8000548 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001bf4:	f7fe ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d176      	bne.n	8001cec <nmea_GPGGA+0x320>
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001c0a:	f7fe ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d16b      	bne.n	8001cec <nmea_GPGGA+0x320>
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <nmea_GPGGA+0x330>)
 8001c1a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001c1e:	f7fe ff5d 	bl	8000adc <__aeabi_dcmplt>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d061      	beq.n	8001cec <nmea_GPGGA+0x320>
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <nmea_GPGGA+0x334>)
 8001c2e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001c32:	f7fe ff53 	bl	8000adc <__aeabi_dcmplt>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d057      	beq.n	8001cec <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001c42:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001c4c:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001c54:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001c5e:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f009 f9c9 	bl	800affc <strtof>
 8001c6a:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001c6e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001c72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7a:	d102      	bne.n	8001c82 <nmea_GPGGA+0x2b6>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	e001      	b.n	8001c86 <nmea_GPGGA+0x2ba>
 8001c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8c:	220a      	movs	r2, #10
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f009 fa9d 	bl	800b1d0 <strtol>
 8001c96:	4602      	mov	r2, r0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9e:	220a      	movs	r2, #10
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f009 fa94 	bl	800b1d0 <strtol>
 8001ca8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bfcc      	ite	gt
 8001cb4:	2301      	movgt	r3, #1
 8001cb6:	2300      	movle	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f009 f999 	bl	800affc <strtof>
 8001cca:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001cce:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001cd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	d102      	bne.n	8001ce2 <nmea_GPGGA+0x316>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	e001      	b.n	8001ce6 <nmea_GPGGA+0x31a>
 8001ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001cea:	e022      	b.n	8001d32 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001cf2:	e016      	b.n	8001d22 <nmea_GPGGA+0x356>
 8001cf4:	08010000 	.word	0x08010000
 8001cf8:	42700000 	.word	0x42700000
 8001cfc:	40568000 	.word	0x40568000
 8001d00:	40668000 	.word	0x40668000
 8001d04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	33d8      	adds	r3, #216	; 0xd8
 8001d0c:	443b      	add	r3, r7
 8001d0e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f008 faaa 	bl	800a26c <free>
 8001d18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dbea      	blt.n	8001d04 <nmea_GPGGA+0x338>
            return 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e019      	b.n	8001d66 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d38:	e00e      	b.n	8001d58 <nmea_GPGGA+0x38c>
 8001d3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	33d8      	adds	r3, #216	; 0xd8
 8001d42:	443b      	add	r3, r7
 8001d44:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f008 fa8f 	bl	800a26c <free>
 8001d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d52:	3301      	adds	r3, #1
 8001d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dbea      	blt.n	8001d3a <nmea_GPGGA+0x36e>
    return 1;
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	37dc      	adds	r7, #220	; 0xdc
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd90      	pop	{r4, r7, pc}
 8001d6e:	bf00      	nop

08001d70 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b0a3      	sub	sp, #140	; 0x8c
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	2264      	movs	r2, #100	; 0x64
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f00a f9fa 	bl	800c182 <memset>
    char *marker = strtok(inputString, ",");
 8001d8e:	493b      	ldr	r1, [pc, #236]	; (8001e7c <nmea_GPGSA+0x10c>)
 8001d90:	6838      	ldr	r0, [r7, #0]
 8001d92:	f00a fa11 	bl	800c1b8 <strtok>
 8001d96:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001d9a:	e027      	b.n	8001dec <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001d9c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001da0:	f7fe fa66 	bl	8000270 <strlen>
 8001da4:	4603      	mov	r3, r0
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001dac:	1c63      	adds	r3, r4, #1
 8001dae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001db2:	4610      	mov	r0, r2
 8001db4:	f008 fa52 	bl	800a25c <malloc>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	00a3      	lsls	r3, r4, #2
 8001dbe:	3388      	adds	r3, #136	; 0x88
 8001dc0:	443b      	add	r3, r7
 8001dc2:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	3388      	adds	r3, #136	; 0x88
 8001dd0:	443b      	add	r3, r7
 8001dd2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001dd6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f00a fae5 	bl	800c3aa <strcpy>
        marker = strtok(NULL, ",");
 8001de0:	4926      	ldr	r1, [pc, #152]	; (8001e7c <nmea_GPGSA+0x10c>)
 8001de2:	2000      	movs	r0, #0
 8001de4:	f00a f9e8 	bl	800c1b8 <strtok>
 8001de8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1d3      	bne.n	8001d9c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	220a      	movs	r2, #10
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f009 f9e8 	bl	800b1d0 <strtol>
 8001e00:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	bfcc      	ite	gt
 8001e08:	2301      	movgt	r3, #1
 8001e0a:	2300      	movle	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001e18:	2303      	movs	r3, #3
 8001e1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e1c:	e00e      	b.n	8001e3c <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	3388      	adds	r3, #136	; 0x88
 8001e24:	443b      	add	r3, r7
 8001e26:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001e30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e32:	3301      	adds	r3, #1
 8001e34:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e38:	3301      	adds	r3, #1
 8001e3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e3e:	2b0e      	cmp	r3, #14
 8001e40:	dded      	ble.n	8001e1e <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	677b      	str	r3, [r7, #116]	; 0x74
 8001e4c:	e00b      	b.n	8001e66 <nmea_GPGSA+0xf6>
 8001e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3388      	adds	r3, #136	; 0x88
 8001e54:	443b      	add	r3, r7
 8001e56:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f008 fa06 	bl	800a26c <free>
 8001e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e62:	3301      	adds	r3, #1
 8001e64:	677b      	str	r3, [r7, #116]	; 0x74
 8001e66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbee      	blt.n	8001e4e <nmea_GPGSA+0xde>
    return 1;
 8001e70:	2301      	movs	r3, #1
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	378c      	adds	r7, #140	; 0x8c
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd90      	pop	{r4, r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	08010000 	.word	0x08010000

08001e80 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b0a1      	sub	sp, #132	; 0x84
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	2264      	movs	r2, #100	; 0x64
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f00a f973 	bl	800c182 <memset>
    char *marker = strtok(inputString, ",");
 8001e9c:	4930      	ldr	r1, [pc, #192]	; (8001f60 <nmea_GNRMC+0xe0>)
 8001e9e:	6838      	ldr	r0, [r7, #0]
 8001ea0:	f00a f98a 	bl	800c1b8 <strtok>
 8001ea4:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001ea6:	e021      	b.n	8001eec <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001ea8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001eaa:	f7fe f9e1 	bl	8000270 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001eb4:	1c63      	adds	r3, r4, #1
 8001eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f008 f9cf 	bl	800a25c <malloc>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	00a3      	lsls	r3, r4, #2
 8001ec4:	3380      	adds	r3, #128	; 0x80
 8001ec6:	443b      	add	r3, r7
 8001ec8:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001ecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	3380      	adds	r3, #128	; 0x80
 8001ed4:	443b      	add	r3, r7
 8001ed6:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001eda:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001edc:	4618      	mov	r0, r3
 8001ede:	f00a fa64 	bl	800c3aa <strcpy>
        marker = strtok(NULL, ",");
 8001ee2:	491f      	ldr	r1, [pc, #124]	; (8001f60 <nmea_GNRMC+0xe0>)
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f00a f967 	bl	800c1b8 <strtok>
 8001eea:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1da      	bne.n	8001ea8 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f009 f880 	bl	800affc <strtof>
 8001efc:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001f00:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f02:	f7fe fb21 	bl	8000548 <__aeabi_f2d>
 8001f06:	a314      	add	r3, pc, #80	; (adr r3, 8001f58 <nmea_GNRMC+0xd8>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fc9e 	bl	800084c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fe66 	bl	8000be8 <__aeabi_d2f>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001f22:	2300      	movs	r3, #0
 8001f24:	677b      	str	r3, [r7, #116]	; 0x74
 8001f26:	e00b      	b.n	8001f40 <nmea_GNRMC+0xc0>
 8001f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	3380      	adds	r3, #128	; 0x80
 8001f2e:	443b      	add	r3, r7
 8001f30:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f008 f999 	bl	800a26c <free>
 8001f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	677b      	str	r3, [r7, #116]	; 0x74
 8001f40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dbef      	blt.n	8001f28 <nmea_GNRMC+0xa8>
    return 1;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3784      	adds	r7, #132	; 0x84
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	f3af 8000 	nop.w
 8001f58:	be76c8b4 	.word	0xbe76c8b4
 8001f5c:	3fff1a9f 	.word	0x3fff1a9f
 8001f60:	08010000 	.word	0x08010000

08001f64 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001f6e:	223c      	movs	r2, #60	; 0x3c
 8001f70:	2100      	movs	r1, #0
 8001f72:	484e      	ldr	r0, [pc, #312]	; (80020ac <nmea_parse+0x148>)
 8001f74:	f00a f905 	bl	800c182 <memset>
    char * token = strtok(buffer, "$");
 8001f78:	494d      	ldr	r1, [pc, #308]	; (80020b0 <nmea_parse+0x14c>)
 8001f7a:	6838      	ldr	r0, [r7, #0]
 8001f7c:	f00a f91c 	bl	800c1b8 <strtok>
 8001f80:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8001f86:	e01d      	b.n	8001fc4 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8001f88:	6978      	ldr	r0, [r7, #20]
 8001f8a:	f7fe f971 	bl	8000270 <strlen>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	693c      	ldr	r4, [r7, #16]
 8001f94:	1c63      	adds	r3, r4, #1
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f008 f95f 	bl	800a25c <malloc>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b42      	ldr	r3, [pc, #264]	; (80020ac <nmea_parse+0x148>)
 8001fa4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	4a3f      	ldr	r2, [pc, #252]	; (80020ac <nmea_parse+0x148>)
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	6979      	ldr	r1, [r7, #20]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00a f9f8 	bl	800c3aa <strcpy>
        token = strtok(NULL, "$");
 8001fba:	493d      	ldr	r1, [pc, #244]	; (80020b0 <nmea_parse+0x14c>)
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f00a f8fb 	bl	800c1b8 <strtok>
 8001fc2:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1de      	bne.n	8001f88 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e052      	b.n	8002076 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8001fd0:	4a36      	ldr	r2, [pc, #216]	; (80020ac <nmea_parse+0x148>)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	4936      	ldr	r1, [pc, #216]	; (80020b4 <nmea_parse+0x150>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00a f948 	bl	800c270 <strstr>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d044      	beq.n	8002070 <nmea_parse+0x10c>
 8001fe6:	4a31      	ldr	r2, [pc, #196]	; (80020ac <nmea_parse+0x148>)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fca3 	bl	800193a <gps_checksum>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d03a      	beq.n	8002070 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8001ffa:	4a2c      	ldr	r2, [pc, #176]	; (80020ac <nmea_parse+0x148>)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	492d      	ldr	r1, [pc, #180]	; (80020b8 <nmea_parse+0x154>)
 8002004:	4618      	mov	r0, r3
 8002006:	f00a f933 	bl	800c270 <strstr>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8002010:	4a26      	ldr	r2, [pc, #152]	; (80020ac <nmea_parse+0x148>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	4619      	mov	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff30 	bl	8001e80 <nmea_GNRMC>
 8002020:	e026      	b.n	8002070 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8002022:	4a22      	ldr	r2, [pc, #136]	; (80020ac <nmea_parse+0x148>)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	4924      	ldr	r1, [pc, #144]	; (80020bc <nmea_parse+0x158>)
 800202c:	4618      	mov	r0, r3
 800202e:	f00a f91f 	bl	800c270 <strstr>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8002038:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <nmea_parse+0x148>)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002040:	4619      	mov	r1, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fe94 	bl	8001d70 <nmea_GPGSA>
 8002048:	e012      	b.n	8002070 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 800204a:	4a18      	ldr	r2, [pc, #96]	; (80020ac <nmea_parse+0x148>)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	491b      	ldr	r1, [pc, #108]	; (80020c0 <nmea_parse+0x15c>)
 8002054:	4618      	mov	r0, r3
 8002056:	f00a f90b 	bl	800c270 <strstr>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002060:	4a12      	ldr	r2, [pc, #72]	; (80020ac <nmea_parse+0x148>)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fcae 	bl	80019cc <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3301      	adds	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	429a      	cmp	r2, r3
 800207c:	dba8      	blt.n	8001fd0 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	e009      	b.n	8002098 <nmea_parse+0x134>
 8002084:	4a09      	ldr	r2, [pc, #36]	; (80020ac <nmea_parse+0x148>)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	4618      	mov	r0, r3
 800208e:	f008 f8ed 	bl	800a26c <free>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3301      	adds	r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	dbf1      	blt.n	8002084 <nmea_parse+0x120>


}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd90      	pop	{r4, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000075c 	.word	0x2000075c
 80020b0:	08010004 	.word	0x08010004
 80020b4:	08010008 	.word	0x08010008
 80020b8:	0801000c 	.word	0x0801000c
 80020bc:	08010014 	.word	0x08010014
 80020c0:	0801001c 	.word	0x0801001c

080020c4 <nmea_speed>:

void nmea_speed(GPS *gps_data, uint8_t *buffer){
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
	 memset(data, 0, sizeof(data));
 80020ce:	223c      	movs	r2, #60	; 0x3c
 80020d0:	2100      	movs	r1, #0
 80020d2:	4844      	ldr	r0, [pc, #272]	; (80021e4 <nmea_speed+0x120>)
 80020d4:	f00a f855 	bl	800c182 <memset>
	    char * token = strtok(buffer, "$");
 80020d8:	4943      	ldr	r1, [pc, #268]	; (80021e8 <nmea_speed+0x124>)
 80020da:	6838      	ldr	r0, [r7, #0]
 80020dc:	f00a f86c 	bl	800c1b8 <strtok>
 80020e0:	6178      	str	r0, [r7, #20]
	    int cnt = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
	    while(token !=NULL){
 80020e6:	e01d      	b.n	8002124 <nmea_speed+0x60>
	        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80020e8:	6978      	ldr	r0, [r7, #20]
 80020ea:	f7fe f8c1 	bl	8000270 <strlen>
 80020ee:	4603      	mov	r3, r0
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	693c      	ldr	r4, [r7, #16]
 80020f4:	1c63      	adds	r3, r4, #1
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	4610      	mov	r0, r2
 80020fa:	f008 f8af 	bl	800a25c <malloc>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <nmea_speed+0x120>)
 8002104:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	        strcpy(data[cnt-1], token);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	3b01      	subs	r3, #1
 800210c:	4a35      	ldr	r2, [pc, #212]	; (80021e4 <nmea_speed+0x120>)
 800210e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002112:	6979      	ldr	r1, [r7, #20]
 8002114:	4618      	mov	r0, r3
 8002116:	f00a f948 	bl	800c3aa <strcpy>
	        token = strtok(NULL, "$");
 800211a:	4933      	ldr	r1, [pc, #204]	; (80021e8 <nmea_speed+0x124>)
 800211c:	2000      	movs	r0, #0
 800211e:	f00a f84b 	bl	800c1b8 <strtok>
 8002122:	6178      	str	r0, [r7, #20]
	    while(token !=NULL){
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1de      	bne.n	80020e8 <nmea_speed+0x24>
	    }
	    for(int i = 0; i<cnt; i++){
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e03e      	b.n	80021ae <nmea_speed+0xea>
	       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002130:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <nmea_speed+0x120>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	492c      	ldr	r1, [pc, #176]	; (80021ec <nmea_speed+0x128>)
 800213a:	4618      	mov	r0, r3
 800213c:	f00a f898 	bl	800c270 <strstr>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d030      	beq.n	80021a8 <nmea_speed+0xe4>
 8002146:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <nmea_speed+0x120>)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fbf3 	bl	800193a <gps_checksum>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d026      	beq.n	80021a8 <nmea_speed+0xe4>
	           if(strstr(data[i], "GNRMC")!=NULL){
 800215a:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <nmea_speed+0x120>)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	4923      	ldr	r1, [pc, #140]	; (80021f0 <nmea_speed+0x12c>)
 8002164:	4618      	mov	r0, r3
 8002166:	f00a f883 	bl	800c270 <strstr>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <nmea_speed+0xbe>
	               nmea_GNRMC(gps_data, data[i]);
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <nmea_speed+0x120>)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fe80 	bl	8001e80 <nmea_GNRMC>
 8002180:	e012      	b.n	80021a8 <nmea_speed+0xe4>
	           }
	           else if(strstr(data[i], "GNGSA")!=NULL){
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <nmea_speed+0x120>)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218a:	491a      	ldr	r1, [pc, #104]	; (80021f4 <nmea_speed+0x130>)
 800218c:	4618      	mov	r0, r3
 800218e:	f00a f86f 	bl	800c270 <strstr>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <nmea_speed+0xe4>
	                          nmea_GPGSA(gps_data, data[i]);
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <nmea_speed+0x120>)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a0:	4619      	mov	r1, r3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fde4 	bl	8001d70 <nmea_GPGSA>
	    for(int i = 0; i<cnt; i++){
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dbbc      	blt.n	8002130 <nmea_speed+0x6c>
	                      }
	       }

	    }
	    for(int i = 0; i<cnt; i++) free(data[i]);
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	e009      	b.n	80021d0 <nmea_speed+0x10c>
 80021bc:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <nmea_speed+0x120>)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f008 f851 	bl	800a26c <free>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	dbf1      	blt.n	80021bc <nmea_speed+0xf8>

}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000075c 	.word	0x2000075c
 80021e8:	08010004 	.word	0x08010004
 80021ec:	08010008 	.word	0x08010008
 80021f0:	0801000c 	.word	0x0801000c
 80021f4:	08010014 	.word	0x08010014

080021f8 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af04      	add	r7, sp, #16
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	2301      	movs	r3, #1
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	1dfb      	adds	r3, r7, #7
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2301      	movs	r3, #1
 8002222:	2200      	movs	r2, #0
 8002224:	2178      	movs	r1, #120	; 0x78
 8002226:	4803      	ldr	r0, [pc, #12]	; (8002234 <ssd1306_WriteCommand+0x2c>)
 8002228:	f004 fb3e 	bl	80068a8 <HAL_I2C_Mem_Write>
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000314 	.word	0x20000314

08002238 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af04      	add	r7, sp, #16
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	f04f 32ff 	mov.w	r2, #4294967295
 800224a:	9202      	str	r2, [sp, #8]
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2301      	movs	r3, #1
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	2178      	movs	r1, #120	; 0x78
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <ssd1306_WriteData+0x30>)
 800225a:	f004 fb25 	bl	80068a8 <HAL_I2C_Mem_Write>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000314 	.word	0x20000314

0800226c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002270:	f7ff ffc2 	bl	80021f8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002274:	2064      	movs	r0, #100	; 0x64
 8002276:	f002 fa89 	bl	800478c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800227a:	2000      	movs	r0, #0
 800227c:	f000 fba0 	bl	80029c0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002280:	2020      	movs	r0, #32
 8002282:	f7ff ffc1 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002286:	2000      	movs	r0, #0
 8002288:	f7ff ffbe 	bl	8002208 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800228c:	20b0      	movs	r0, #176	; 0xb0
 800228e:	f7ff ffbb 	bl	8002208 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002292:	20c8      	movs	r0, #200	; 0xc8
 8002294:	f7ff ffb8 	bl	8002208 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002298:	2000      	movs	r0, #0
 800229a:	f7ff ffb5 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800229e:	2010      	movs	r0, #16
 80022a0:	f7ff ffb2 	bl	8002208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80022a4:	2040      	movs	r0, #64	; 0x40
 80022a6:	f7ff ffaf 	bl	8002208 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80022aa:	20ff      	movs	r0, #255	; 0xff
 80022ac:	f000 fb75 	bl	800299a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80022b0:	20a1      	movs	r0, #161	; 0xa1
 80022b2:	f7ff ffa9 	bl	8002208 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80022b6:	20a6      	movs	r0, #166	; 0xa6
 80022b8:	f7ff ffa6 	bl	8002208 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80022bc:	20a8      	movs	r0, #168	; 0xa8
 80022be:	f7ff ffa3 	bl	8002208 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80022c2:	203f      	movs	r0, #63	; 0x3f
 80022c4:	f7ff ffa0 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022c8:	20a4      	movs	r0, #164	; 0xa4
 80022ca:	f7ff ff9d 	bl	8002208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80022ce:	20d3      	movs	r0, #211	; 0xd3
 80022d0:	f7ff ff9a 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff ff97 	bl	8002208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80022da:	20d5      	movs	r0, #213	; 0xd5
 80022dc:	f7ff ff94 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80022e0:	20f0      	movs	r0, #240	; 0xf0
 80022e2:	f7ff ff91 	bl	8002208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80022e6:	20d9      	movs	r0, #217	; 0xd9
 80022e8:	f7ff ff8e 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80022ec:	2022      	movs	r0, #34	; 0x22
 80022ee:	f7ff ff8b 	bl	8002208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80022f2:	20da      	movs	r0, #218	; 0xda
 80022f4:	f7ff ff88 	bl	8002208 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80022f8:	2012      	movs	r0, #18
 80022fa:	f7ff ff85 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80022fe:	20db      	movs	r0, #219	; 0xdb
 8002300:	f7ff ff82 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002304:	2020      	movs	r0, #32
 8002306:	f7ff ff7f 	bl	8002208 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800230a:	208d      	movs	r0, #141	; 0x8d
 800230c:	f7ff ff7c 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002310:	2014      	movs	r0, #20
 8002312:	f7ff ff79 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002316:	2001      	movs	r0, #1
 8002318:	f000 fb52 	bl	80029c0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800231c:	2000      	movs	r0, #0
 800231e:	f000 f80f 	bl	8002340 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002322:	f000 f825 	bl	8002370 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <ssd1306_Init+0xd0>)
 8002328:	2200      	movs	r2, #0
 800232a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <ssd1306_Init+0xd0>)
 800232e:	2200      	movs	r2, #0
 8002330:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002332:	4b02      	ldr	r3, [pc, #8]	; (800233c <ssd1306_Init+0xd0>)
 8002334:	2201      	movs	r2, #1
 8002336:	711a      	strb	r2, [r3, #4]
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000b98 	.word	0x20000b98

08002340 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <ssd1306_Fill+0x14>
 8002350:	2300      	movs	r3, #0
 8002352:	e000      	b.n	8002356 <ssd1306_Fill+0x16>
 8002354:	23ff      	movs	r3, #255	; 0xff
 8002356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235a:	4619      	mov	r1, r3
 800235c:	4803      	ldr	r0, [pc, #12]	; (800236c <ssd1306_Fill+0x2c>)
 800235e:	f009 ff10 	bl	800c182 <memset>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000798 	.word	0x20000798

08002370 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002376:	2300      	movs	r3, #0
 8002378:	71fb      	strb	r3, [r7, #7]
 800237a:	e016      	b.n	80023aa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	3b50      	subs	r3, #80	; 0x50
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff40 	bl	8002208 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff ff3d 	bl	8002208 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800238e:	2010      	movs	r0, #16
 8002390:	f7ff ff3a 	bl	8002208 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	01db      	lsls	r3, r3, #7
 8002398:	4a08      	ldr	r2, [pc, #32]	; (80023bc <ssd1306_UpdateScreen+0x4c>)
 800239a:	4413      	add	r3, r2
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff4a 	bl	8002238 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	3301      	adds	r3, #1
 80023a8:	71fb      	strb	r3, [r7, #7]
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b07      	cmp	r3, #7
 80023ae:	d9e5      	bls.n	800237c <ssd1306_UpdateScreen+0xc>
    }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000798 	.word	0x20000798

080023c0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
 80023ca:	460b      	mov	r3, r1
 80023cc:	71bb      	strb	r3, [r7, #6]
 80023ce:	4613      	mov	r3, r2
 80023d0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db3d      	blt.n	8002456 <ssd1306_DrawPixel+0x96>
 80023da:	79bb      	ldrb	r3, [r7, #6]
 80023dc:	2b3f      	cmp	r3, #63	; 0x3f
 80023de:	d83a      	bhi.n	8002456 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80023e0:	797b      	ldrb	r3, [r7, #5]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d11a      	bne.n	800241c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80023e6:	79fa      	ldrb	r2, [r7, #7]
 80023e8:	79bb      	ldrb	r3, [r7, #6]
 80023ea:	08db      	lsrs	r3, r3, #3
 80023ec:	b2d8      	uxtb	r0, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	01db      	lsls	r3, r3, #7
 80023f2:	4413      	add	r3, r2
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <ssd1306_DrawPixel+0xa4>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	b25a      	sxtb	r2, r3
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	b25b      	sxtb	r3, r3
 8002408:	4313      	orrs	r3, r2
 800240a:	b259      	sxtb	r1, r3
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	4603      	mov	r3, r0
 8002410:	01db      	lsls	r3, r3, #7
 8002412:	4413      	add	r3, r2
 8002414:	b2c9      	uxtb	r1, r1
 8002416:	4a13      	ldr	r2, [pc, #76]	; (8002464 <ssd1306_DrawPixel+0xa4>)
 8002418:	54d1      	strb	r1, [r2, r3]
 800241a:	e01d      	b.n	8002458 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800241c:	79fa      	ldrb	r2, [r7, #7]
 800241e:	79bb      	ldrb	r3, [r7, #6]
 8002420:	08db      	lsrs	r3, r3, #3
 8002422:	b2d8      	uxtb	r0, r3
 8002424:	4603      	mov	r3, r0
 8002426:	01db      	lsls	r3, r3, #7
 8002428:	4413      	add	r3, r2
 800242a:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <ssd1306_DrawPixel+0xa4>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	b25a      	sxtb	r2, r3
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	b25b      	sxtb	r3, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	b25b      	sxtb	r3, r3
 8002442:	4013      	ands	r3, r2
 8002444:	b259      	sxtb	r1, r3
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	4603      	mov	r3, r0
 800244a:	01db      	lsls	r3, r3, #7
 800244c:	4413      	add	r3, r2
 800244e:	b2c9      	uxtb	r1, r1
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <ssd1306_DrawPixel+0xa4>)
 8002452:	54d1      	strb	r1, [r2, r3]
 8002454:	e000      	b.n	8002458 <ssd1306_DrawPixel+0x98>
        return;
 8002456:	bf00      	nop
    }
}
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000798 	.word	0x20000798

08002468 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	4604      	mov	r4, r0
 8002470:	1d38      	adds	r0, r7, #4
 8002472:	e880 0006 	stmia.w	r0, {r1, r2}
 8002476:	461a      	mov	r2, r3
 8002478:	4623      	mov	r3, r4
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	4613      	mov	r3, r2
 800247e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b1f      	cmp	r3, #31
 8002484:	d902      	bls.n	800248c <ssd1306_WriteChar+0x24>
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	2b7e      	cmp	r3, #126	; 0x7e
 800248a:	d901      	bls.n	8002490 <ssd1306_WriteChar+0x28>
        return 0;
 800248c:	2300      	movs	r3, #0
 800248e:	e06d      	b.n	800256c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002490:	4b38      	ldr	r3, [pc, #224]	; (8002574 <ssd1306_WriteChar+0x10c>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	793b      	ldrb	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	2b80      	cmp	r3, #128	; 0x80
 800249c:	dc06      	bgt.n	80024ac <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800249e:	4b35      	ldr	r3, [pc, #212]	; (8002574 <ssd1306_WriteChar+0x10c>)
 80024a0:	885b      	ldrh	r3, [r3, #2]
 80024a2:	461a      	mov	r2, r3
 80024a4:	797b      	ldrb	r3, [r7, #5]
 80024a6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	dd01      	ble.n	80024b0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e05d      	b.n	800256c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	e04c      	b.n	8002550 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	3b20      	subs	r3, #32
 80024bc:	7979      	ldrb	r1, [r7, #5]
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4619      	mov	r1, r3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	440b      	add	r3, r1
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	e034      	b.n	8002540 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d012      	beq.n	800250c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80024e6:	4b23      	ldr	r3, [pc, #140]	; (8002574 <ssd1306_WriteChar+0x10c>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	b2d8      	uxtb	r0, r3
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <ssd1306_WriteChar+0x10c>)
 80024f6:	885b      	ldrh	r3, [r3, #2]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	4413      	add	r3, r2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	7bba      	ldrb	r2, [r7, #14]
 8002504:	4619      	mov	r1, r3
 8002506:	f7ff ff5b 	bl	80023c0 <ssd1306_DrawPixel>
 800250a:	e016      	b.n	800253a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <ssd1306_WriteChar+0x10c>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	4413      	add	r3, r2
 8002518:	b2d8      	uxtb	r0, r3
 800251a:	4b16      	ldr	r3, [pc, #88]	; (8002574 <ssd1306_WriteChar+0x10c>)
 800251c:	885b      	ldrh	r3, [r3, #2]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	4413      	add	r3, r2
 8002526:	b2d9      	uxtb	r1, r3
 8002528:	7bbb      	ldrb	r3, [r7, #14]
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	f7ff ff43 	bl	80023c0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	3301      	adds	r3, #1
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	793b      	ldrb	r3, [r7, #4]
 8002542:	461a      	mov	r2, r3
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4293      	cmp	r3, r2
 8002548:	d3c5      	bcc.n	80024d6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	797b      	ldrb	r3, [r7, #5]
 8002552:	461a      	mov	r2, r3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	4293      	cmp	r3, r2
 8002558:	d3ad      	bcc.n	80024b6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <ssd1306_WriteChar+0x10c>)
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	793b      	ldrb	r3, [r7, #4]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4413      	add	r3, r2
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b03      	ldr	r3, [pc, #12]	; (8002574 <ssd1306_WriteChar+0x10c>)
 8002568:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3724      	adds	r7, #36	; 0x24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}
 8002574:	20000b98 	.word	0x20000b98

08002578 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	1d38      	adds	r0, r7, #4
 8002582:	e880 0006 	stmia.w	r0, {r1, r2}
 8002586:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002588:	e012      	b.n	80025b0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	7818      	ldrb	r0, [r3, #0]
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	1d3a      	adds	r2, r7, #4
 8002592:	ca06      	ldmia	r2, {r1, r2}
 8002594:	f7ff ff68 	bl	8002468 <ssd1306_WriteChar>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d002      	beq.n	80025aa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	e008      	b.n	80025bc <ssd1306_WriteString+0x44>
        }
        str++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3301      	adds	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e8      	bne.n	800258a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	781b      	ldrb	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	460a      	mov	r2, r1
 80025ce:	71fb      	strb	r3, [r7, #7]
 80025d0:	4613      	mov	r3, r2
 80025d2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <ssd1306_SetCursor+0x2c>)
 80025da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <ssd1306_SetCursor+0x2c>)
 80025e2:	805a      	strh	r2, [r3, #2]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	20000b98 	.word	0x20000b98

080025f4 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4604      	mov	r4, r0
 80025fc:	4608      	mov	r0, r1
 80025fe:	4611      	mov	r1, r2
 8002600:	461a      	mov	r2, r3
 8002602:	4623      	mov	r3, r4
 8002604:	71fb      	strb	r3, [r7, #7]
 8002606:	4603      	mov	r3, r0
 8002608:	71bb      	strb	r3, [r7, #6]
 800260a:	460b      	mov	r3, r1
 800260c:	717b      	strb	r3, [r7, #5]
 800260e:	4613      	mov	r3, r2
 8002610:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002612:	797a      	ldrb	r2, [r7, #5]
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	bfb8      	it	lt
 800261c:	425b      	neglt	r3, r3
 800261e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002620:	793a      	ldrb	r2, [r7, #4]
 8002622:	79bb      	ldrb	r3, [r7, #6]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	bfb8      	it	lt
 800262a:	425b      	neglt	r3, r3
 800262c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800262e:	79fa      	ldrb	r2, [r7, #7]
 8002630:	797b      	ldrb	r3, [r7, #5]
 8002632:	429a      	cmp	r2, r3
 8002634:	d201      	bcs.n	800263a <ssd1306_Line+0x46>
 8002636:	2301      	movs	r3, #1
 8002638:	e001      	b.n	800263e <ssd1306_Line+0x4a>
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002640:	79ba      	ldrb	r2, [r7, #6]
 8002642:	793b      	ldrb	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d201      	bcs.n	800264c <ssd1306_Line+0x58>
 8002648:	2301      	movs	r3, #1
 800264a:	e001      	b.n	8002650 <ssd1306_Line+0x5c>
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800265a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800265e:	7939      	ldrb	r1, [r7, #4]
 8002660:	797b      	ldrb	r3, [r7, #5]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff feac 	bl	80023c0 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002668:	e024      	b.n	80026b4 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800266a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800266e:	79b9      	ldrb	r1, [r7, #6]
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fea4 	bl	80023c0 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	425b      	negs	r3, r3
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	429a      	cmp	r2, r3
 8002686:	dd08      	ble.n	800269a <ssd1306_Line+0xa6>
            error -= deltaY;
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	4413      	add	r3, r2
 8002698:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	429a      	cmp	r2, r3
 80026a0:	da08      	bge.n	80026b4 <ssd1306_Line+0xc0>
            error += deltaX;
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	79bb      	ldrb	r3, [r7, #6]
 80026b0:	4413      	add	r3, r2
 80026b2:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80026b4:	79fa      	ldrb	r2, [r7, #7]
 80026b6:	797b      	ldrb	r3, [r7, #5]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1d6      	bne.n	800266a <ssd1306_Line+0x76>
 80026bc:	79ba      	ldrb	r2, [r7, #6]
 80026be:	793b      	ldrb	r3, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1d2      	bne.n	800266a <ssd1306_Line+0x76>
        }
    }
    return;
 80026c4:	bf00      	nop
}
 80026c6:	3724      	adds	r7, #36	; 0x24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}

080026cc <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4604      	mov	r4, r0
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	461a      	mov	r2, r3
 80026da:	4623      	mov	r3, r4
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	4603      	mov	r3, r0
 80026e0:	71bb      	strb	r3, [r7, #6]
 80026e2:	460b      	mov	r3, r1
 80026e4:	717b      	strb	r3, [r7, #5]
 80026e6:	4613      	mov	r3, r2
 80026e8:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80026ea:	797b      	ldrb	r3, [r7, #5]
 80026ec:	425b      	negs	r3, r3
 80026ee:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80026f4:	797b      	ldrb	r3, [r7, #5]
 80026f6:	f1c3 0301 	rsb	r3, r3, #1
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db65      	blt.n	80027d2 <ssd1306_DrawCircle+0x106>
 8002706:	79bb      	ldrb	r3, [r7, #6]
 8002708:	2b3f      	cmp	r3, #63	; 0x3f
 800270a:	d862      	bhi.n	80027d2 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	b2d8      	uxtb	r0, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	4413      	add	r3, r2
 800271e:	b2db      	uxtb	r3, r3
 8002720:	793a      	ldrb	r2, [r7, #4]
 8002722:	4619      	mov	r1, r3
 8002724:	f7ff fe4c 	bl	80023c0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	4413      	add	r3, r2
 8002730:	b2d8      	uxtb	r0, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	4413      	add	r3, r2
 800273a:	b2db      	uxtb	r3, r3
 800273c:	793a      	ldrb	r2, [r7, #4]
 800273e:	4619      	mov	r1, r3
 8002740:	f7ff fe3e 	bl	80023c0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	4413      	add	r3, r2
 800274c:	b2d8      	uxtb	r0, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	79ba      	ldrb	r2, [r7, #6]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	793a      	ldrb	r2, [r7, #4]
 800275a:	4619      	mov	r1, r3
 800275c:	f7ff fe30 	bl	80023c0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	79fa      	ldrb	r2, [r7, #7]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	b2d8      	uxtb	r0, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	79ba      	ldrb	r2, [r7, #6]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	793a      	ldrb	r2, [r7, #4]
 8002776:	4619      	mov	r1, r3
 8002778:	f7ff fe22 	bl	80023c0 <ssd1306_DrawPixel>
        e2 = err;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	dc13      	bgt.n	80027b0 <ssd1306_DrawCircle+0xe4>
            y++;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	3301      	adds	r3, #1
 800278c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	3301      	adds	r3, #1
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	425b      	negs	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d105      	bne.n	80027b0 <ssd1306_DrawCircle+0xe4>
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dc01      	bgt.n	80027b0 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	dd08      	ble.n	80027ca <ssd1306_DrawCircle+0xfe>
            x++;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3301      	adds	r3, #1
 80027bc:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	3301      	adds	r3, #1
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	dd9d      	ble.n	800270c <ssd1306_DrawCircle+0x40>

    return;
 80027d0:	e000      	b.n	80027d4 <ssd1306_DrawCircle+0x108>
        return;
 80027d2:	bf00      	nop
}
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd90      	pop	{r4, r7, pc}

080027da <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80027da:	b590      	push	{r4, r7, lr}
 80027dc:	b085      	sub	sp, #20
 80027de:	af02      	add	r7, sp, #8
 80027e0:	4604      	mov	r4, r0
 80027e2:	4608      	mov	r0, r1
 80027e4:	4611      	mov	r1, r2
 80027e6:	461a      	mov	r2, r3
 80027e8:	4623      	mov	r3, r4
 80027ea:	71fb      	strb	r3, [r7, #7]
 80027ec:	4603      	mov	r3, r0
 80027ee:	71bb      	strb	r3, [r7, #6]
 80027f0:	460b      	mov	r3, r1
 80027f2:	717b      	strb	r3, [r7, #5]
 80027f4:	4613      	mov	r3, r2
 80027f6:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80027f8:	79bc      	ldrb	r4, [r7, #6]
 80027fa:	797a      	ldrb	r2, [r7, #5]
 80027fc:	79b9      	ldrb	r1, [r7, #6]
 80027fe:	79f8      	ldrb	r0, [r7, #7]
 8002800:	7e3b      	ldrb	r3, [r7, #24]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	4623      	mov	r3, r4
 8002806:	f7ff fef5 	bl	80025f4 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800280a:	793c      	ldrb	r4, [r7, #4]
 800280c:	797a      	ldrb	r2, [r7, #5]
 800280e:	79b9      	ldrb	r1, [r7, #6]
 8002810:	7978      	ldrb	r0, [r7, #5]
 8002812:	7e3b      	ldrb	r3, [r7, #24]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	4623      	mov	r3, r4
 8002818:	f7ff feec 	bl	80025f4 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800281c:	793c      	ldrb	r4, [r7, #4]
 800281e:	79fa      	ldrb	r2, [r7, #7]
 8002820:	7939      	ldrb	r1, [r7, #4]
 8002822:	7978      	ldrb	r0, [r7, #5]
 8002824:	7e3b      	ldrb	r3, [r7, #24]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4623      	mov	r3, r4
 800282a:	f7ff fee3 	bl	80025f4 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800282e:	79bc      	ldrb	r4, [r7, #6]
 8002830:	79fa      	ldrb	r2, [r7, #7]
 8002832:	7939      	ldrb	r1, [r7, #4]
 8002834:	79f8      	ldrb	r0, [r7, #7]
 8002836:	7e3b      	ldrb	r3, [r7, #24]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	4623      	mov	r3, r4
 800283c:	f7ff feda 	bl	80025f4 <ssd1306_Line>

    return;
 8002840:	bf00      	nop
}
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bd90      	pop	{r4, r7, pc}

08002848 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	4604      	mov	r4, r0
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	461a      	mov	r2, r3
 8002856:	4623      	mov	r3, r4
 8002858:	71fb      	strb	r3, [r7, #7]
 800285a:	4603      	mov	r3, r0
 800285c:	71bb      	strb	r3, [r7, #6]
 800285e:	460b      	mov	r3, r1
 8002860:	717b      	strb	r3, [r7, #5]
 8002862:	4613      	mov	r3, r2
 8002864:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002866:	79fa      	ldrb	r2, [r7, #7]
 8002868:	797b      	ldrb	r3, [r7, #5]
 800286a:	4293      	cmp	r3, r2
 800286c:	bf28      	it	cs
 800286e:	4613      	movcs	r3, r2
 8002870:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002872:	797a      	ldrb	r2, [r7, #5]
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	4293      	cmp	r3, r2
 8002878:	bf38      	it	cc
 800287a:	4613      	movcc	r3, r2
 800287c:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800287e:	79ba      	ldrb	r2, [r7, #6]
 8002880:	793b      	ldrb	r3, [r7, #4]
 8002882:	4293      	cmp	r3, r2
 8002884:	bf28      	it	cs
 8002886:	4613      	movcs	r3, r2
 8002888:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800288a:	793a      	ldrb	r2, [r7, #4]
 800288c:	79bb      	ldrb	r3, [r7, #6]
 800288e:	4293      	cmp	r3, r2
 8002890:	bf38      	it	cc
 8002892:	4613      	movcc	r3, r2
 8002894:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	e017      	b.n	80028cc <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800289c:	7b7b      	ldrb	r3, [r7, #13]
 800289e:	73bb      	strb	r3, [r7, #14]
 80028a0:	e009      	b.n	80028b6 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80028a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80028a6:	7bf9      	ldrb	r1, [r7, #15]
 80028a8:	7bbb      	ldrb	r3, [r7, #14]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fd88 	bl	80023c0 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80028b0:	7bbb      	ldrb	r3, [r7, #14]
 80028b2:	3301      	adds	r3, #1
 80028b4:	73bb      	strb	r3, [r7, #14]
 80028b6:	7bba      	ldrb	r2, [r7, #14]
 80028b8:	7b3b      	ldrb	r3, [r7, #12]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d803      	bhi.n	80028c6 <ssd1306_FillRectangle+0x7e>
 80028be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	daed      	bge.n	80028a2 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	3301      	adds	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	7abb      	ldrb	r3, [r7, #10]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d803      	bhi.n	80028dc <ssd1306_FillRectangle+0x94>
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b3f      	cmp	r3, #63	; 0x3f
 80028d8:	d9e0      	bls.n	800289c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80028da:	bf00      	nop
 80028dc:	bf00      	nop
}
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}

080028e4 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	603a      	str	r2, [r7, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	460b      	mov	r3, r1
 80028f4:	71bb      	strb	r3, [r7, #6]
 80028f6:	4613      	mov	r3, r2
 80028f8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80028fa:	797b      	ldrb	r3, [r7, #5]
 80028fc:	3307      	adds	r3, #7
 80028fe:	2b00      	cmp	r3, #0
 8002900:	da00      	bge.n	8002904 <ssd1306_DrawBitmap+0x20>
 8002902:	3307      	adds	r3, #7
 8002904:	10db      	asrs	r3, r3, #3
 8002906:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db3e      	blt.n	8002992 <ssd1306_DrawBitmap+0xae>
 8002914:	79bb      	ldrb	r3, [r7, #6]
 8002916:	2b3f      	cmp	r3, #63	; 0x3f
 8002918:	d83b      	bhi.n	8002992 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800291a:	2300      	movs	r3, #0
 800291c:	73bb      	strb	r3, [r7, #14]
 800291e:	e033      	b.n	8002988 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002920:	2300      	movs	r3, #0
 8002922:	737b      	strb	r3, [r7, #13]
 8002924:	e026      	b.n	8002974 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002926:	7b7b      	ldrb	r3, [r7, #13]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	e00d      	b.n	8002954 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002938:	7bbb      	ldrb	r3, [r7, #14]
 800293a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	7b7a      	ldrb	r2, [r7, #13]
 8002944:	08d2      	lsrs	r2, r2, #3
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	4413      	add	r3, r2
 800294a:	461a      	mov	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4413      	add	r3, r2
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002958:	2b00      	cmp	r3, #0
 800295a:	da08      	bge.n	800296e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800295c:	79fa      	ldrb	r2, [r7, #7]
 800295e:	7b7b      	ldrb	r3, [r7, #13]
 8002960:	4413      	add	r3, r2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	7f3a      	ldrb	r2, [r7, #28]
 8002966:	79b9      	ldrb	r1, [r7, #6]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fd29 	bl	80023c0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800296e:	7b7b      	ldrb	r3, [r7, #13]
 8002970:	3301      	adds	r3, #1
 8002972:	737b      	strb	r3, [r7, #13]
 8002974:	7b7a      	ldrb	r2, [r7, #13]
 8002976:	797b      	ldrb	r3, [r7, #5]
 8002978:	429a      	cmp	r2, r3
 800297a:	d3d4      	bcc.n	8002926 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800297c:	7bbb      	ldrb	r3, [r7, #14]
 800297e:	3301      	adds	r3, #1
 8002980:	73bb      	strb	r3, [r7, #14]
 8002982:	79bb      	ldrb	r3, [r7, #6]
 8002984:	3301      	adds	r3, #1
 8002986:	71bb      	strb	r3, [r7, #6]
 8002988:	7bba      	ldrb	r2, [r7, #14]
 800298a:	7e3b      	ldrb	r3, [r7, #24]
 800298c:	429a      	cmp	r2, r3
 800298e:	d3c7      	bcc.n	8002920 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002990:	e000      	b.n	8002994 <ssd1306_DrawBitmap+0xb0>
        return;
 8002992:	bf00      	nop
}
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80029a4:	2381      	movs	r3, #129	; 0x81
 80029a6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fc2c 	bl	8002208 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fc28 	bl	8002208 <ssd1306_WriteCommand>
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80029d0:	23af      	movs	r3, #175	; 0xaf
 80029d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <ssd1306_SetDisplayOn+0x38>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	715a      	strb	r2, [r3, #5]
 80029da:	e004      	b.n	80029e6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80029dc:	23ae      	movs	r3, #174	; 0xae
 80029de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <ssd1306_SetDisplayOn+0x38>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fc0d 	bl	8002208 <ssd1306_WriteCommand>
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000b98 	.word	0x20000b98
 80029fc:	00000000 	.word	0x00000000

08002a00 <statemachine>:
		};



//le code qui permet d'avoir les ecran de donnée que l'on souhaite, changeable a souhait on peut d'ailleur rajouter des état ou rajouter des fonctionnalité au sein de chaque état, pas encore décidé de la version définitive.
void statemachine(void){
 8002a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a02:	ed2d 8b02 	vpush	{d8}
 8002a06:	b09f      	sub	sp, #124	; 0x7c
 8002a08:	af04      	add	r7, sp, #16
	switch(state){
 8002a0a:	4bc3      	ldr	r3, [pc, #780]	; (8002d18 <statemachine+0x318>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	f201 825a 	bhi.w	8003ec8 <statemachine+0x14c8>
 8002a14:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <statemachine+0x1c>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a35 	.word	0x08002a35
 8002a20:	08002ea3 	.word	0x08002ea3
 8002a24:	080033c5 	.word	0x080033c5
 8002a28:	08003a19 	.word	0x08003a19
 8002a2c:	08003ba1 	.word	0x08003ba1
 8002a30:	08003db1 	.word	0x08003db1
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7ff fc83 	bl	8002340 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	2020      	movs	r0, #32
 8002a3e:	f7ff fdc1 	bl	80025c4 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8002a42:	49b6      	ldr	r1, [pc, #728]	; (8002d1c <statemachine+0x31c>)
 8002a44:	48b6      	ldr	r0, [pc, #728]	; (8002d20 <statemachine+0x320>)
 8002a46:	f7ff fa8d 	bl	8001f64 <nmea_parse>
				 if(myData.speed>=vitmax){
 8002a4a:	4bb5      	ldr	r3, [pc, #724]	; (8002d20 <statemachine+0x320>)
 8002a4c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002a50:	4bb4      	ldr	r3, [pc, #720]	; (8002d24 <statemachine+0x324>)
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	db03      	blt.n	8002a68 <statemachine+0x68>
									 vitmax=myData.speed;
 8002a60:	4baf      	ldr	r3, [pc, #700]	; (8002d20 <statemachine+0x320>)
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	4aaf      	ldr	r2, [pc, #700]	; (8002d24 <statemachine+0x324>)
 8002a66:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	667b      	str	r3, [r7, #100]	; 0x64
								 float sec=0;
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	663b      	str	r3, [r7, #96]	; 0x60
								 if (myData.speed!=0){
 8002a74:	4baa      	ldr	r3, [pc, #680]	; (8002d20 <statemachine+0x320>)
 8002a76:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002a7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a82:	d032      	beq.n	8002aea <statemachine+0xea>
									 pace=1000/(60*myData.speed);
 8002a84:	4ba6      	ldr	r3, [pc, #664]	; (8002d20 <statemachine+0x320>)
 8002a86:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002a8a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8002d28 <statemachine+0x328>
 8002a8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a92:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8002d2c <statemachine+0x32c>
 8002a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a9a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
									 sec=(pace-floor(pace))*60;
 8002a9e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002aa0:	f7fd fd52 	bl	8000548 <__aeabi_f2d>
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	460d      	mov	r5, r1
 8002aa8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002aaa:	f7fd fd4d 	bl	8000548 <__aeabi_f2d>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	ec43 2b10 	vmov	d0, r2, r3
 8002ab6:	f00c f9bf 	bl	800ee38 <floor>
 8002aba:	ec53 2b10 	vmov	r2, r3, d0
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f7fd fbe1 	bl	8000288 <__aeabi_dsub>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	4b97      	ldr	r3, [pc, #604]	; (8002d30 <statemachine+0x330>)
 8002ad4:	f7fd fd90 	bl	80005f8 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fe f882 	bl	8000be8 <__aeabi_d2f>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ae8:	e001      	b.n	8002aee <statemachine+0xee>
								 }
								 else {
									 pace=9999;//en cas de division par 0, techniquement le temps devient infini mais ce n'est pas intérréssant
 8002aea:	4b92      	ldr	r3, [pc, #584]	; (8002d34 <statemachine+0x334>)
 8002aec:	667b      	str	r3, [r7, #100]	; 0x64
								 }


				  switch(spdstate){
 8002aee:	4b92      	ldr	r3, [pc, #584]	; (8002d38 <statemachine+0x338>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	f000 815c 	beq.w	8002db0 <statemachine+0x3b0>
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	f300 81c2 	bgt.w	8002e82 <statemachine+0x482>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <statemachine+0x10a>
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	f000 80a0 	beq.w	8002c48 <statemachine+0x248>
 8002b08:	e1bb      	b.n	8002e82 <statemachine+0x482>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002b0a:	4b85      	ldr	r3, [pc, #532]	; (8002d20 <statemachine+0x320>)
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d16f      	bne.n	8002bf2 <statemachine+0x1f2>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8002b12:	2014      	movs	r0, #20
 8002b14:	f007 fba2 	bl	800a25c <malloc>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	603b      	str	r3, [r7, #0]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);//amélioration possible la stocker en eeprom
 8002b1c:	4b81      	ldr	r3, [pc, #516]	; (8002d24 <statemachine+0x324>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fd11 	bl	8000548 <__aeabi_f2d>
 8002b26:	a378      	add	r3, pc, #480	; (adr r3, 8002d08 <statemachine+0x308>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f7fd fd64 	bl	80005f8 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	e9cd 2300 	strd	r2, r3, [sp]
 8002b38:	4a80      	ldr	r2, [pc, #512]	; (8002d3c <statemachine+0x33c>)
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	6838      	ldr	r0, [r7, #0]
 8002b3e:	f009 fa89 	bl	800c054 <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 8002b42:	2120      	movs	r1, #32
 8002b44:	2020      	movs	r0, #32
 8002b46:	f7ff fd3d 	bl	80025c4 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002b4a:	4a7d      	ldr	r2, [pc, #500]	; (8002d40 <statemachine+0x340>)
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	ca06      	ldmia	r2, {r1, r2}
 8002b50:	6838      	ldr	r0, [r7, #0]
 8002b52:	f7ff fd11 	bl	8002578 <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8002b56:	4b72      	ldr	r3, [pc, #456]	; (8002d20 <statemachine+0x320>)
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fcf4 	bl	8000548 <__aeabi_f2d>
 8002b60:	a369      	add	r3, pc, #420	; (adr r3, 8002d08 <statemachine+0x308>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd fd47 	bl	80005f8 <__aeabi_dmul>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	e9cd 2300 	strd	r2, r3, [sp]
 8002b72:	4a74      	ldr	r2, [pc, #464]	; (8002d44 <statemachine+0x344>)
 8002b74:	210f      	movs	r1, #15
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	f009 fa6c 	bl	800c054 <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8002b7c:	212a      	movs	r1, #42	; 0x2a
 8002b7e:	2020      	movs	r0, #32
 8002b80:	f7ff fd20 	bl	80025c4 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002b84:	4a6e      	ldr	r2, [pc, #440]	; (8002d40 <statemachine+0x340>)
 8002b86:	2301      	movs	r3, #1
 8002b88:	ca06      	ldmia	r2, {r1, r2}
 8002b8a:	6838      	ldr	r0, [r7, #0]
 8002b8c:	f7ff fcf4 	bl	8002578 <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));//affichage au format minute puis seconde
 8002b90:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002b92:	f7fd fcd9 	bl	8000548 <__aeabi_f2d>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	ec43 2b10 	vmov	d0, r2, r3
 8002b9e:	f00c f94b 	bl	800ee38 <floor>
 8002ba2:	eeb0 8a40 	vmov.f32	s16, s0
 8002ba6:	eef0 8a60 	vmov.f32	s17, s1
 8002baa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002bac:	f7fd fccc 	bl	8000548 <__aeabi_f2d>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	ec43 2b10 	vmov	d0, r2, r3
 8002bb8:	f00c f93e 	bl	800ee38 <floor>
 8002bbc:	eeb0 7a40 	vmov.f32	s14, s0
 8002bc0:	eef0 7a60 	vmov.f32	s15, s1
 8002bc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002bc8:	ed8d 8b00 	vstr	d8, [sp]
 8002bcc:	4a5e      	ldr	r2, [pc, #376]	; (8002d48 <statemachine+0x348>)
 8002bce:	210f      	movs	r1, #15
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f009 fa3f 	bl	800c054 <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 8002bd6:	2134      	movs	r1, #52	; 0x34
 8002bd8:	2020      	movs	r0, #32
 8002bda:	f7ff fcf3 	bl	80025c4 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002bde:	4a58      	ldr	r2, [pc, #352]	; (8002d40 <statemachine+0x340>)
 8002be0:	2301      	movs	r3, #1
 8002be2:	ca06      	ldmia	r2, {r1, r2}
 8002be4:	6838      	ldr	r0, [r7, #0]
 8002be6:	f7ff fcc7 	bl	8002578 <ssd1306_WriteString>
					 				 						free(str);
 8002bea:	6838      	ldr	r0, [r7, #0]
 8002bec:	f007 fb3e 	bl	800a26c <free>
 8002bf0:	e01b      	b.n	8002c2a <statemachine+0x22a>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002bf2:	2014      	movs	r0, #20
 8002bf4:	f007 fb32 	bl	800a25c <malloc>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	607b      	str	r3, [r7, #4]
					 				 						ssd1306_SetCursor(32, 32);
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	2020      	movs	r0, #32
 8002c00:	f7ff fce0 	bl	80025c4 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 8002c04:	4a4e      	ldr	r2, [pc, #312]	; (8002d40 <statemachine+0x340>)
 8002c06:	2301      	movs	r3, #1
 8002c08:	ca06      	ldmia	r2, {r1, r2}
 8002c0a:	4850      	ldr	r0, [pc, #320]	; (8002d4c <statemachine+0x34c>)
 8002c0c:	f7ff fcb4 	bl	8002578 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	2020      	movs	r0, #32
 8002c14:	f7ff fcd6 	bl	80025c4 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002c18:	4a49      	ldr	r2, [pc, #292]	; (8002d40 <statemachine+0x340>)
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	ca06      	ldmia	r2, {r1, r2}
 8002c1e:	484c      	ldr	r0, [pc, #304]	; (8002d50 <statemachine+0x350>)
 8002c20:	f7ff fcaa 	bl	8002578 <ssd1306_WriteString>
					 				 						free(str);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f007 fb21 	bl	800a26c <free>
					 				 					}
					 if(BTN_B>=1){
 8002c2a:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <statemachine+0x354>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f340 8122 	ble.w	8002e78 <statemachine+0x478>
					 					 				 					spdstate++;
 8002c34:	4b40      	ldr	r3, [pc, #256]	; (8002d38 <statemachine+0x338>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <statemachine+0x338>)
 8002c3e:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8002c40:	4b44      	ldr	r3, [pc, #272]	; (8002d54 <statemachine+0x354>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 8002c46:	e117      	b.n	8002e78 <statemachine+0x478>
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <statemachine+0x320>)
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	f040 8085 	bne.w	8002d5c <statemachine+0x35c>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8002c52:	2014      	movs	r0, #20
 8002c54:	f007 fb02 	bl	800a25c <malloc>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60bb      	str	r3, [r7, #8]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <statemachine+0x320>)
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fc71 	bl	8000548 <__aeabi_f2d>
 8002c66:	a328      	add	r3, pc, #160	; (adr r3, 8002d08 <statemachine+0x308>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fcc4 	bl	80005f8 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	e9cd 2300 	strd	r2, r3, [sp]
 8002c78:	4a32      	ldr	r2, [pc, #200]	; (8002d44 <statemachine+0x344>)
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	68b8      	ldr	r0, [r7, #8]
 8002c7e:	f009 f9e9 	bl	800c054 <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 8002c82:	2136      	movs	r1, #54	; 0x36
 8002c84:	2020      	movs	r0, #32
 8002c86:	f7ff fc9d 	bl	80025c4 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002c8a:	4a2d      	ldr	r2, [pc, #180]	; (8002d40 <statemachine+0x340>)
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	ca06      	ldmia	r2, {r1, r2}
 8002c90:	68b8      	ldr	r0, [r7, #8]
 8002c92:	f7ff fc71 	bl	8002578 <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8002c96:	2301      	movs	r3, #1
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	2335      	movs	r3, #53	; 0x35
 8002c9c:	225f      	movs	r2, #95	; 0x5f
 8002c9e:	2126      	movs	r1, #38	; 0x26
 8002ca0:	2020      	movs	r0, #32
 8002ca2:	f7ff fd9a 	bl	80027da <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <statemachine+0x320>)
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fc4c 	bl	8000548 <__aeabi_f2d>
 8002cb0:	a317      	add	r3, pc, #92	; (adr r3, 8002d10 <statemachine+0x310>)
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f7fd fc9f 	bl	80005f8 <__aeabi_dmul>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <statemachine+0x358>)
 8002cc8:	f7fd fae0 	bl	800028c <__adddf3>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	ec43 2b17 	vmov	d7, r2, r3
 8002cd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002cd8:	eef0 0a67 	vmov.f32	s1, s15
 8002cdc:	f00c f8ac 	bl	800ee38 <floor>
 8002ce0:	ec53 2b10 	vmov	r2, r3, d0
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7fd ff36 	bl	8000b58 <__aeabi_d2iz>
 8002cec:	4603      	mov	r3, r0
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2335      	movs	r3, #53	; 0x35
 8002cf6:	2126      	movs	r1, #38	; 0x26
 8002cf8:	2020      	movs	r0, #32
 8002cfa:	f7ff fda5 	bl	8002848 <ssd1306_FillRectangle>

					 				 						free(str);
 8002cfe:	68b8      	ldr	r0, [r7, #8]
 8002d00:	f007 fab4 	bl	800a26c <free>
 8002d04:	e046      	b.n	8002d94 <statemachine+0x394>
 8002d06:	bf00      	nop
 8002d08:	cccccccd 	.word	0xcccccccd
 8002d0c:	400ccccc 	.word	0x400ccccc
 8002d10:	c28f5c29 	.word	0xc28f5c29
 8002d14:	3fe428f5 	.word	0x3fe428f5
 8002d18:	20000748 	.word	0x20000748
 8002d1c:	20000500 	.word	0x20000500
 8002d20:	20000700 	.word	0x20000700
 8002d24:	20000ba0 	.word	0x20000ba0
 8002d28:	42700000 	.word	0x42700000
 8002d2c:	447a0000 	.word	0x447a0000
 8002d30:	404e0000 	.word	0x404e0000
 8002d34:	461c3c00 	.word	0x461c3c00
 8002d38:	2000074a 	.word	0x2000074a
 8002d3c:	08010024 	.word	0x08010024
 8002d40:	20000008 	.word	0x20000008
 8002d44:	08010030 	.word	0x08010030
 8002d48:	08010038 	.word	0x08010038
 8002d4c:	0801004c 	.word	0x0801004c
 8002d50:	08010054 	.word	0x08010054
 8002d54:	20000744 	.word	0x20000744
 8002d58:	40400000 	.word	0x40400000
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002d5c:	2014      	movs	r0, #20
 8002d5e:	f007 fa7d 	bl	800a25c <malloc>
 8002d62:	4603      	mov	r3, r0
 8002d64:	60fb      	str	r3, [r7, #12]
					 				 						ssd1306_SetCursor(32, 32);
 8002d66:	2120      	movs	r1, #32
 8002d68:	2020      	movs	r0, #32
 8002d6a:	f7ff fc2b 	bl	80025c4 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 8002d6e:	4a9a      	ldr	r2, [pc, #616]	; (8002fd8 <statemachine+0x5d8>)
 8002d70:	2301      	movs	r3, #1
 8002d72:	ca06      	ldmia	r2, {r1, r2}
 8002d74:	4899      	ldr	r0, [pc, #612]	; (8002fdc <statemachine+0x5dc>)
 8002d76:	f7ff fbff 	bl	8002578 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	2020      	movs	r0, #32
 8002d7e:	f7ff fc21 	bl	80025c4 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002d82:	4a95      	ldr	r2, [pc, #596]	; (8002fd8 <statemachine+0x5d8>)
 8002d84:	2301      	movs	r3, #1
 8002d86:	ca06      	ldmia	r2, {r1, r2}
 8002d88:	4895      	ldr	r0, [pc, #596]	; (8002fe0 <statemachine+0x5e0>)
 8002d8a:	f7ff fbf5 	bl	8002578 <ssd1306_WriteString>
					 				 						free(str);
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f007 fa6c 	bl	800a26c <free>
					 				 					}
					 if(BTN_B>=1){
 8002d94:	4b93      	ldr	r3, [pc, #588]	; (8002fe4 <statemachine+0x5e4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	dd6f      	ble.n	8002e7c <statemachine+0x47c>
					 				 					spdstate++;
 8002d9c:	4b92      	ldr	r3, [pc, #584]	; (8002fe8 <statemachine+0x5e8>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	3301      	adds	r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b90      	ldr	r3, [pc, #576]	; (8002fe8 <statemachine+0x5e8>)
 8002da6:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 8002da8:	4b8e      	ldr	r3, [pc, #568]	; (8002fe4 <statemachine+0x5e4>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 8002dae:	e065      	b.n	8002e7c <statemachine+0x47c>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 8002db0:	4b8e      	ldr	r3, [pc, #568]	; (8002fec <statemachine+0x5ec>)
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d12f      	bne.n	8002e18 <statemachine+0x418>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002db8:	2014      	movs	r0, #20
 8002dba:	f007 fa4f 	bl	800a25c <malloc>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	613b      	str	r3, [r7, #16]

					 				 						ssd1306_SetCursor(32, 32);
 8002dc2:	2120      	movs	r1, #32
 8002dc4:	2020      	movs	r0, #32
 8002dc6:	f7ff fbfd 	bl	80025c4 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 8002dca:	4b88      	ldr	r3, [pc, #544]	; (8002fec <statemachine+0x5ec>)
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbba 	bl	8000548 <__aeabi_f2d>
 8002dd4:	a37e      	add	r3, pc, #504	; (adr r3, 8002fd0 <statemachine+0x5d0>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fc0d 	bl	80005f8 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	e9cd 2300 	strd	r2, r3, [sp]
 8002de6:	4a82      	ldr	r2, [pc, #520]	; (8002ff0 <statemachine+0x5f0>)
 8002de8:	210f      	movs	r1, #15
 8002dea:	6938      	ldr	r0, [r7, #16]
 8002dec:	f009 f932 	bl	800c054 <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 8002df0:	4a80      	ldr	r2, [pc, #512]	; (8002ff4 <statemachine+0x5f4>)
 8002df2:	2301      	movs	r3, #1
 8002df4:	ca06      	ldmia	r2, {r1, r2}
 8002df6:	6938      	ldr	r0, [r7, #16]
 8002df8:	f7ff fbbe 	bl	8002578 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 54);
 8002dfc:	2136      	movs	r1, #54	; 0x36
 8002dfe:	2020      	movs	r0, #32
 8002e00:	f7ff fbe0 	bl	80025c4 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("kmh", Font_6x8, White);
 8002e04:	4a74      	ldr	r2, [pc, #464]	; (8002fd8 <statemachine+0x5d8>)
 8002e06:	2301      	movs	r3, #1
 8002e08:	ca06      	ldmia	r2, {r1, r2}
 8002e0a:	487b      	ldr	r0, [pc, #492]	; (8002ff8 <statemachine+0x5f8>)
 8002e0c:	f7ff fbb4 	bl	8002578 <ssd1306_WriteString>

					 				 						free(str);
 8002e10:	6938      	ldr	r0, [r7, #16]
 8002e12:	f007 fa2b 	bl	800a26c <free>
 8002e16:	e01b      	b.n	8002e50 <statemachine+0x450>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002e18:	2014      	movs	r0, #20
 8002e1a:	f007 fa1f 	bl	800a25c <malloc>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	617b      	str	r3, [r7, #20]
						 ssd1306_SetCursor(32, 32);
 8002e22:	2120      	movs	r1, #32
 8002e24:	2020      	movs	r0, #32
 8002e26:	f7ff fbcd 	bl	80025c4 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 8002e2a:	4a6b      	ldr	r2, [pc, #428]	; (8002fd8 <statemachine+0x5d8>)
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	ca06      	ldmia	r2, {r1, r2}
 8002e30:	4872      	ldr	r0, [pc, #456]	; (8002ffc <statemachine+0x5fc>)
 8002e32:	f7ff fba1 	bl	8002578 <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	2020      	movs	r0, #32
 8002e3a:	f7ff fbc3 	bl	80025c4 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002e3e:	4a66      	ldr	r2, [pc, #408]	; (8002fd8 <statemachine+0x5d8>)
 8002e40:	2301      	movs	r3, #1
 8002e42:	ca06      	ldmia	r2, {r1, r2}
 8002e44:	4866      	ldr	r0, [pc, #408]	; (8002fe0 <statemachine+0x5e0>)
 8002e46:	f7ff fb97 	bl	8002578 <ssd1306_WriteString>
						 free(str);
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f007 fa0e 	bl	800a26c <free>
					 }

					 if(BTN_B>=1){
 8002e50:	4b64      	ldr	r3, [pc, #400]	; (8002fe4 <statemachine+0x5e4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	dd13      	ble.n	8002e80 <statemachine+0x480>
					 					 				 					spdstate--;
 8002e58:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <statemachine+0x5e8>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <statemachine+0x5e8>)
 8002e62:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 8002e64:	4b60      	ldr	r3, [pc, #384]	; (8002fe8 <statemachine+0x5e8>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <statemachine+0x5e8>)
 8002e6e:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8002e70:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <statemachine+0x5e4>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8002e76:	e003      	b.n	8002e80 <statemachine+0x480>
					 break;
 8002e78:	bf00      	nop
 8002e7a:	e002      	b.n	8002e82 <statemachine+0x482>
					 break;
 8002e7c:	bf00      	nop
 8002e7e:	e000      	b.n	8002e82 <statemachine+0x482>
					 break;
 8002e80:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8002e82:	4b5f      	ldr	r3, [pc, #380]	; (8003000 <statemachine+0x600>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f341 8012 	ble.w	8003eb0 <statemachine+0x14b0>
				 					state++;
 8002e8c:	4b5d      	ldr	r3, [pc, #372]	; (8003004 <statemachine+0x604>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4b5b      	ldr	r3, [pc, #364]	; (8003004 <statemachine+0x604>)
 8002e96:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8002e98:	4b59      	ldr	r3, [pc, #356]	; (8003000 <statemachine+0x600>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 8002e9e:	f001 b807 	b.w	8003eb0 <statemachine+0x14b0>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7ff fa4c 	bl	8002340 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8002ea8:	4957      	ldr	r1, [pc, #348]	; (8003008 <statemachine+0x608>)
 8002eaa:	4850      	ldr	r0, [pc, #320]	; (8002fec <statemachine+0x5ec>)
 8002eac:	f7ff f85a 	bl	8001f64 <nmea_parse>
			  switch(posstate){
 8002eb0:	4b56      	ldr	r3, [pc, #344]	; (800300c <statemachine+0x60c>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	f200 8275 	bhi.w	80033a4 <statemachine+0x9a4>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <statemachine+0x4c0>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08003021 	.word	0x08003021
 8002ec8:	08003117 	.word	0x08003117
 8002ecc:	08003241 	.word	0x08003241

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8002ed0:	4b46      	ldr	r3, [pc, #280]	; (8002fec <statemachine+0x5ec>)
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d14e      	bne.n	8002f76 <statemachine+0x576>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002ed8:	2014      	movs	r0, #20
 8002eda:	f007 f9bf 	bl	800a25c <malloc>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	61bb      	str	r3, [r7, #24]
				  						ssd1306_SetCursor(32, 32);
 8002ee2:	2120      	movs	r1, #32
 8002ee4:	2020      	movs	r0, #32
 8002ee6:	f7ff fb6d 	bl	80025c4 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8002eea:	4a49      	ldr	r2, [pc, #292]	; (8003010 <statemachine+0x610>)
 8002eec:	210f      	movs	r1, #15
 8002eee:	69b8      	ldr	r0, [r7, #24]
 8002ef0:	f009 f8b0 	bl	800c054 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002ef4:	4a38      	ldr	r2, [pc, #224]	; (8002fd8 <statemachine+0x5d8>)
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	ca06      	ldmia	r2, {r1, r2}
 8002efa:	69b8      	ldr	r0, [r7, #24]
 8002efc:	f7ff fb3c 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002f00:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <statemachine+0x5ec>)
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	e9cd 2300 	strd	r2, r3, [sp]
 8002f0a:	4a42      	ldr	r2, [pc, #264]	; (8003014 <statemachine+0x614>)
 8002f0c:	210f      	movs	r1, #15
 8002f0e:	69b8      	ldr	r0, [r7, #24]
 8002f10:	f009 f8a0 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002f14:	2128      	movs	r1, #40	; 0x28
 8002f16:	2020      	movs	r0, #32
 8002f18:	f7ff fb54 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002f1c:	4a2e      	ldr	r2, [pc, #184]	; (8002fd8 <statemachine+0x5d8>)
 8002f1e:	2301      	movs	r3, #1
 8002f20:	ca06      	ldmia	r2, {r1, r2}
 8002f22:	69b8      	ldr	r0, [r7, #24]
 8002f24:	f7ff fb28 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8002f28:	4a3b      	ldr	r2, [pc, #236]	; (8003018 <statemachine+0x618>)
 8002f2a:	210f      	movs	r1, #15
 8002f2c:	69b8      	ldr	r0, [r7, #24]
 8002f2e:	f009 f891 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002f32:	2130      	movs	r1, #48	; 0x30
 8002f34:	2020      	movs	r0, #32
 8002f36:	f7ff fb45 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002f3a:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <statemachine+0x5d8>)
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	ca06      	ldmia	r2, {r1, r2}
 8002f40:	69b8      	ldr	r0, [r7, #24]
 8002f42:	f7ff fb19 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8002f46:	4b29      	ldr	r3, [pc, #164]	; (8002fec <statemachine+0x5ec>)
 8002f48:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f4c:	e9cd 2300 	strd	r2, r3, [sp]
 8002f50:	4a30      	ldr	r2, [pc, #192]	; (8003014 <statemachine+0x614>)
 8002f52:	210f      	movs	r1, #15
 8002f54:	69b8      	ldr	r0, [r7, #24]
 8002f56:	f009 f87d 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002f5a:	2138      	movs	r1, #56	; 0x38
 8002f5c:	2020      	movs	r0, #32
 8002f5e:	f7ff fb31 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <statemachine+0x5d8>)
 8002f64:	2301      	movs	r3, #1
 8002f66:	ca06      	ldmia	r2, {r1, r2}
 8002f68:	69b8      	ldr	r0, [r7, #24]
 8002f6a:	f7ff fb05 	bl	8002578 <ssd1306_WriteString>
				  						free(str);
 8002f6e:	69b8      	ldr	r0, [r7, #24]
 8002f70:	f007 f97c 	bl	800a26c <free>
 8002f74:	e01b      	b.n	8002fae <statemachine+0x5ae>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002f76:	2014      	movs	r0, #20
 8002f78:	f007 f970 	bl	800a25c <malloc>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	61fb      	str	r3, [r7, #28]
				  						ssd1306_SetCursor(32, 32);
 8002f80:	2120      	movs	r1, #32
 8002f82:	2020      	movs	r0, #32
 8002f84:	f7ff fb1e 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8002f88:	4a13      	ldr	r2, [pc, #76]	; (8002fd8 <statemachine+0x5d8>)
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	ca06      	ldmia	r2, {r1, r2}
 8002f8e:	4823      	ldr	r0, [pc, #140]	; (800301c <statemachine+0x61c>)
 8002f90:	f7ff faf2 	bl	8002578 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	2020      	movs	r0, #32
 8002f98:	f7ff fb14 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <statemachine+0x5d8>)
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	ca06      	ldmia	r2, {r1, r2}
 8002fa2:	480f      	ldr	r0, [pc, #60]	; (8002fe0 <statemachine+0x5e0>)
 8002fa4:	f7ff fae8 	bl	8002578 <ssd1306_WriteString>
				  						free(str);
 8002fa8:	69f8      	ldr	r0, [r7, #28]
 8002faa:	f007 f95f 	bl	800a26c <free>
				  					}
				  if(BTN_B>=1){
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <statemachine+0x5e4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f340 81ef 	ble.w	8003396 <statemachine+0x996>
					  posstate++;
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <statemachine+0x60c>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <statemachine+0x60c>)
 8002fc2:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <statemachine+0x5e4>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]





				  break;
 8002fca:	e1e4      	b.n	8003396 <statemachine+0x996>
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	cccccccd 	.word	0xcccccccd
 8002fd4:	400ccccc 	.word	0x400ccccc
 8002fd8:	20000008 	.word	0x20000008
 8002fdc:	08010060 	.word	0x08010060
 8002fe0:	08010054 	.word	0x08010054
 8002fe4:	20000744 	.word	0x20000744
 8002fe8:	2000074a 	.word	0x2000074a
 8002fec:	20000700 	.word	0x20000700
 8002ff0:	08010068 	.word	0x08010068
 8002ff4:	20000018 	.word	0x20000018
 8002ff8:	08010070 	.word	0x08010070
 8002ffc:	08010074 	.word	0x08010074
 8003000:	20000740 	.word	0x20000740
 8003004:	20000748 	.word	0x20000748
 8003008:	20000500 	.word	0x20000500
 800300c:	2000074b 	.word	0x2000074b
 8003010:	0801007c 	.word	0x0801007c
 8003014:	08010088 	.word	0x08010088
 8003018:	08010090 	.word	0x08010090
 800301c:	0801009c 	.word	0x0801009c
			  case STATE_LAT:
				  if(myData.fix == 1){
 8003020:	4b7a      	ldr	r3, [pc, #488]	; (800320c <statemachine+0x80c>)
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	2b01      	cmp	r3, #1
 8003026:	d14b      	bne.n	80030c0 <statemachine+0x6c0>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003028:	2014      	movs	r0, #20
 800302a:	f007 f917 	bl	800a25c <malloc>
 800302e:	4603      	mov	r3, r0
 8003030:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 8003032:	2120      	movs	r1, #32
 8003034:	2020      	movs	r0, #32
 8003036:	f7ff fac5 	bl	80025c4 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 800303a:	4a75      	ldr	r2, [pc, #468]	; (8003210 <statemachine+0x810>)
 800303c:	210f      	movs	r1, #15
 800303e:	6a38      	ldr	r0, [r7, #32]
 8003040:	f009 f808 	bl	800c054 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003044:	4a73      	ldr	r2, [pc, #460]	; (8003214 <statemachine+0x814>)
 8003046:	2301      	movs	r3, #1
 8003048:	ca06      	ldmia	r2, {r1, r2}
 800304a:	6a38      	ldr	r0, [r7, #32]
 800304c:	f7ff fa94 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003050:	4b6e      	ldr	r3, [pc, #440]	; (800320c <statemachine+0x80c>)
 8003052:	7a1b      	ldrb	r3, [r3, #8]
 8003054:	4a70      	ldr	r2, [pc, #448]	; (8003218 <statemachine+0x818>)
 8003056:	210f      	movs	r1, #15
 8003058:	6a38      	ldr	r0, [r7, #32]
 800305a:	f008 fffb 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800305e:	2128      	movs	r1, #40	; 0x28
 8003060:	2020      	movs	r0, #32
 8003062:	f7ff faaf 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003066:	4a6b      	ldr	r2, [pc, #428]	; (8003214 <statemachine+0x814>)
 8003068:	2301      	movs	r3, #1
 800306a:	ca06      	ldmia	r2, {r1, r2}
 800306c:	6a38      	ldr	r0, [r7, #32]
 800306e:	f7ff fa83 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 8003072:	4a6a      	ldr	r2, [pc, #424]	; (800321c <statemachine+0x81c>)
 8003074:	210f      	movs	r1, #15
 8003076:	6a38      	ldr	r0, [r7, #32]
 8003078:	f008 ffec 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 800307c:	2130      	movs	r1, #48	; 0x30
 800307e:	2020      	movs	r0, #32
 8003080:	f7ff faa0 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003084:	4a63      	ldr	r2, [pc, #396]	; (8003214 <statemachine+0x814>)
 8003086:	2301      	movs	r3, #1
 8003088:	ca06      	ldmia	r2, {r1, r2}
 800308a:	6a38      	ldr	r0, [r7, #32]
 800308c:	f7ff fa74 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8003090:	4b5e      	ldr	r3, [pc, #376]	; (800320c <statemachine+0x80c>)
 8003092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003096:	e9cd 2300 	strd	r2, r3, [sp]
 800309a:	4a61      	ldr	r2, [pc, #388]	; (8003220 <statemachine+0x820>)
 800309c:	210f      	movs	r1, #15
 800309e:	6a38      	ldr	r0, [r7, #32]
 80030a0:	f008 ffd8 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80030a4:	2138      	movs	r1, #56	; 0x38
 80030a6:	2020      	movs	r0, #32
 80030a8:	f7ff fa8c 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80030ac:	4a59      	ldr	r2, [pc, #356]	; (8003214 <statemachine+0x814>)
 80030ae:	2301      	movs	r3, #1
 80030b0:	ca06      	ldmia	r2, {r1, r2}
 80030b2:	6a38      	ldr	r0, [r7, #32]
 80030b4:	f7ff fa60 	bl	8002578 <ssd1306_WriteString>
				  						free(str);
 80030b8:	6a38      	ldr	r0, [r7, #32]
 80030ba:	f007 f8d7 	bl	800a26c <free>
 80030be:	e01b      	b.n	80030f8 <statemachine+0x6f8>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80030c0:	2014      	movs	r0, #20
 80030c2:	f007 f8cb 	bl	800a25c <malloc>
 80030c6:	4603      	mov	r3, r0
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 80030ca:	2120      	movs	r1, #32
 80030cc:	2020      	movs	r0, #32
 80030ce:	f7ff fa79 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 80030d2:	4a50      	ldr	r2, [pc, #320]	; (8003214 <statemachine+0x814>)
 80030d4:	2301      	movs	r3, #1
 80030d6:	ca06      	ldmia	r2, {r1, r2}
 80030d8:	4852      	ldr	r0, [pc, #328]	; (8003224 <statemachine+0x824>)
 80030da:	f7ff fa4d 	bl	8002578 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	2020      	movs	r0, #32
 80030e2:	f7ff fa6f 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80030e6:	4a4b      	ldr	r2, [pc, #300]	; (8003214 <statemachine+0x814>)
 80030e8:	2301      	movs	r3, #1
 80030ea:	ca06      	ldmia	r2, {r1, r2}
 80030ec:	484e      	ldr	r0, [pc, #312]	; (8003228 <statemachine+0x828>)
 80030ee:	f7ff fa43 	bl	8002578 <ssd1306_WriteString>
				  						free(str);
 80030f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030f4:	f007 f8ba 	bl	800a26c <free>
				  					}
				  if(BTN_B>=1){
 80030f8:	4b4c      	ldr	r3, [pc, #304]	; (800322c <statemachine+0x82c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f340 814c 	ble.w	800339a <statemachine+0x99a>
				  					  posstate++;
 8003102:	4b4b      	ldr	r3, [pc, #300]	; (8003230 <statemachine+0x830>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b49      	ldr	r3, [pc, #292]	; (8003230 <statemachine+0x830>)
 800310c:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <statemachine+0x82c>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 8003114:	e141      	b.n	800339a <statemachine+0x99a>
			  case STATE_LONG:
				  if(myData.fix == 1){
 8003116:	4b3d      	ldr	r3, [pc, #244]	; (800320c <statemachine+0x80c>)
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	2b01      	cmp	r3, #1
 800311c:	d14b      	bne.n	80031b6 <statemachine+0x7b6>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 800311e:	2014      	movs	r0, #20
 8003120:	f007 f89c 	bl	800a25c <malloc>
 8003124:	4603      	mov	r3, r0
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 8003128:	2120      	movs	r1, #32
 800312a:	2020      	movs	r0, #32
 800312c:	f7ff fa4a 	bl	80025c4 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 8003130:	4a40      	ldr	r2, [pc, #256]	; (8003234 <statemachine+0x834>)
 8003132:	210f      	movs	r1, #15
 8003134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003136:	f008 ff8d 	bl	800c054 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800313a:	4a36      	ldr	r2, [pc, #216]	; (8003214 <statemachine+0x814>)
 800313c:	2301      	movs	r3, #1
 800313e:	ca06      	ldmia	r2, {r1, r2}
 8003140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003142:	f7ff fa19 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003146:	4b31      	ldr	r3, [pc, #196]	; (800320c <statemachine+0x80c>)
 8003148:	7e1b      	ldrb	r3, [r3, #24]
 800314a:	4a33      	ldr	r2, [pc, #204]	; (8003218 <statemachine+0x818>)
 800314c:	210f      	movs	r1, #15
 800314e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003150:	f008 ff80 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003154:	2128      	movs	r1, #40	; 0x28
 8003156:	2020      	movs	r0, #32
 8003158:	f7ff fa34 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800315c:	4a2d      	ldr	r2, [pc, #180]	; (8003214 <statemachine+0x814>)
 800315e:	2301      	movs	r3, #1
 8003160:	ca06      	ldmia	r2, {r1, r2}
 8003162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003164:	f7ff fa08 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8003168:	4a33      	ldr	r2, [pc, #204]	; (8003238 <statemachine+0x838>)
 800316a:	210f      	movs	r1, #15
 800316c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800316e:	f008 ff71 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003172:	2130      	movs	r1, #48	; 0x30
 8003174:	2020      	movs	r0, #32
 8003176:	f7ff fa25 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800317a:	4a26      	ldr	r2, [pc, #152]	; (8003214 <statemachine+0x814>)
 800317c:	2301      	movs	r3, #1
 800317e:	ca06      	ldmia	r2, {r1, r2}
 8003180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003182:	f7ff f9f9 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8003186:	4b21      	ldr	r3, [pc, #132]	; (800320c <statemachine+0x80c>)
 8003188:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800318c:	e9cd 2300 	strd	r2, r3, [sp]
 8003190:	4a23      	ldr	r2, [pc, #140]	; (8003220 <statemachine+0x820>)
 8003192:	210f      	movs	r1, #15
 8003194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003196:	f008 ff5d 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 800319a:	2138      	movs	r1, #56	; 0x38
 800319c:	2020      	movs	r0, #32
 800319e:	f7ff fa11 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80031a2:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <statemachine+0x814>)
 80031a4:	2301      	movs	r3, #1
 80031a6:	ca06      	ldmia	r2, {r1, r2}
 80031a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031aa:	f7ff f9e5 	bl	8002578 <ssd1306_WriteString>
				  						free(str);
 80031ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b0:	f007 f85c 	bl	800a26c <free>
 80031b4:	e01b      	b.n	80031ee <statemachine+0x7ee>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80031b6:	2014      	movs	r0, #20
 80031b8:	f007 f850 	bl	800a25c <malloc>
 80031bc:	4603      	mov	r3, r0
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 80031c0:	2120      	movs	r1, #32
 80031c2:	2020      	movs	r0, #32
 80031c4:	f7ff f9fe 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 80031c8:	4a12      	ldr	r2, [pc, #72]	; (8003214 <statemachine+0x814>)
 80031ca:	2301      	movs	r3, #1
 80031cc:	ca06      	ldmia	r2, {r1, r2}
 80031ce:	481b      	ldr	r0, [pc, #108]	; (800323c <statemachine+0x83c>)
 80031d0:	f7ff f9d2 	bl	8002578 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	2020      	movs	r0, #32
 80031d8:	f7ff f9f4 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80031dc:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <statemachine+0x814>)
 80031de:	2301      	movs	r3, #1
 80031e0:	ca06      	ldmia	r2, {r1, r2}
 80031e2:	4811      	ldr	r0, [pc, #68]	; (8003228 <statemachine+0x828>)
 80031e4:	f7ff f9c8 	bl	8002578 <ssd1306_WriteString>
				  						free(str);
 80031e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031ea:	f007 f83f 	bl	800a26c <free>
				  					}
				  if(BTN_B>=1){
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <statemachine+0x82c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f340 80d3 	ble.w	800339e <statemachine+0x99e>
				  					  posstate++;
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <statemachine+0x830>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <statemachine+0x830>)
 8003202:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <statemachine+0x82c>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 800320a:	e0c8      	b.n	800339e <statemachine+0x99e>
 800320c:	20000700 	.word	0x20000700
 8003210:	080100a4 	.word	0x080100a4
 8003214:	20000008 	.word	0x20000008
 8003218:	080100b0 	.word	0x080100b0
 800321c:	0801007c 	.word	0x0801007c
 8003220:	08010088 	.word	0x08010088
 8003224:	080100b4 	.word	0x080100b4
 8003228:	08010054 	.word	0x08010054
 800322c:	20000744 	.word	0x20000744
 8003230:	2000074b 	.word	0x2000074b
 8003234:	080100bc 	.word	0x080100bc
 8003238:	08010090 	.word	0x08010090
 800323c:	080100c8 	.word	0x080100c8
			  case STATE_ALT:
				  if(myData.fix == 1){
 8003240:	4bad      	ldr	r3, [pc, #692]	; (80034f8 <statemachine+0xaf8>)
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	2b01      	cmp	r3, #1
 8003246:	d170      	bne.n	800332a <statemachine+0x92a>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003248:	2014      	movs	r0, #20
 800324a:	f007 f807 	bl	800a25c <malloc>
 800324e:	4603      	mov	r3, r0
 8003250:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 8003252:	2120      	movs	r1, #32
 8003254:	2020      	movs	r0, #32
 8003256:	f7ff f9b5 	bl	80025c4 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 800325a:	4aa8      	ldr	r2, [pc, #672]	; (80034fc <statemachine+0xafc>)
 800325c:	210f      	movs	r1, #15
 800325e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003260:	f008 fef8 	bl	800c054 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003264:	4aa6      	ldr	r2, [pc, #664]	; (8003500 <statemachine+0xb00>)
 8003266:	2301      	movs	r3, #1
 8003268:	ca06      	ldmia	r2, {r1, r2}
 800326a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800326c:	f7ff f984 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003270:	4ba1      	ldr	r3, [pc, #644]	; (80034f8 <statemachine+0xaf8>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f967 	bl	8000548 <__aeabi_f2d>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	e9cd 2300 	strd	r2, r3, [sp]
 8003282:	4aa0      	ldr	r2, [pc, #640]	; (8003504 <statemachine+0xb04>)
 8003284:	210f      	movs	r1, #15
 8003286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003288:	f008 fee4 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800328c:	2128      	movs	r1, #40	; 0x28
 800328e:	2020      	movs	r0, #32
 8003290:	f7ff f998 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003294:	4a9a      	ldr	r2, [pc, #616]	; (8003500 <statemachine+0xb00>)
 8003296:	2301      	movs	r3, #1
 8003298:	ca06      	ldmia	r2, {r1, r2}
 800329a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800329c:	f7ff f96c 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 80032a0:	4a99      	ldr	r2, [pc, #612]	; (8003508 <statemachine+0xb08>)
 80032a2:	210f      	movs	r1, #15
 80032a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032a6:	f008 fed5 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80032aa:	2130      	movs	r1, #48	; 0x30
 80032ac:	2020      	movs	r0, #32
 80032ae:	f7ff f989 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80032b2:	4a93      	ldr	r2, [pc, #588]	; (8003500 <statemachine+0xb00>)
 80032b4:	2301      	movs	r3, #1
 80032b6:	ca06      	ldmia	r2, {r1, r2}
 80032b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ba:	f7ff f95d 	bl	8002578 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 80032be:	4b8e      	ldr	r3, [pc, #568]	; (80034f8 <statemachine+0xaf8>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd f940 	bl	8000548 <__aeabi_f2d>
 80032c8:	a389      	add	r3, pc, #548	; (adr r3, 80034f0 <statemachine+0xaf0>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fd f993 	bl	80005f8 <__aeabi_dmul>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	f7fd fc85 	bl	8000be8 <__aeabi_d2f>
 80032de:	4603      	mov	r3, r0
 80032e0:	ee00 3a10 	vmov	s0, r3
 80032e4:	f00b fd64 	bl	800edb0 <expf>
 80032e8:	eef0 7a40 	vmov.f32	s15, s0
 80032ec:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800350c <statemachine+0xb0c>
 80032f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f4:	ee17 0a90 	vmov	r0, s15
 80032f8:	f7fd f926 	bl	8000548 <__aeabi_f2d>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	e9cd 2300 	strd	r2, r3, [sp]
 8003304:	4a82      	ldr	r2, [pc, #520]	; (8003510 <statemachine+0xb10>)
 8003306:	210f      	movs	r1, #15
 8003308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800330a:	f008 fea3 	bl	800c054 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 800330e:	2138      	movs	r1, #56	; 0x38
 8003310:	2020      	movs	r0, #32
 8003312:	f7ff f957 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003316:	4a7a      	ldr	r2, [pc, #488]	; (8003500 <statemachine+0xb00>)
 8003318:	2301      	movs	r3, #1
 800331a:	ca06      	ldmia	r2, {r1, r2}
 800331c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800331e:	f7ff f92b 	bl	8002578 <ssd1306_WriteString>
				  						free(str);
 8003322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003324:	f006 ffa2 	bl	800a26c <free>
 8003328:	e01b      	b.n	8003362 <statemachine+0x962>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 800332a:	2014      	movs	r0, #20
 800332c:	f006 ff96 	bl	800a25c <malloc>
 8003330:	4603      	mov	r3, r0
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 8003334:	2120      	movs	r1, #32
 8003336:	2020      	movs	r0, #32
 8003338:	f7ff f944 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 800333c:	4a70      	ldr	r2, [pc, #448]	; (8003500 <statemachine+0xb00>)
 800333e:	2301      	movs	r3, #1
 8003340:	ca06      	ldmia	r2, {r1, r2}
 8003342:	4874      	ldr	r0, [pc, #464]	; (8003514 <statemachine+0xb14>)
 8003344:	f7ff f918 	bl	8002578 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	2020      	movs	r0, #32
 800334c:	f7ff f93a 	bl	80025c4 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003350:	4a6b      	ldr	r2, [pc, #428]	; (8003500 <statemachine+0xb00>)
 8003352:	2301      	movs	r3, #1
 8003354:	ca06      	ldmia	r2, {r1, r2}
 8003356:	4870      	ldr	r0, [pc, #448]	; (8003518 <statemachine+0xb18>)
 8003358:	f7ff f90e 	bl	8002578 <ssd1306_WriteString>
				  						free(str);
 800335c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800335e:	f006 ff85 	bl	800a26c <free>
				  					}
				  if(BTN_B>=1){
 8003362:	4b6e      	ldr	r3, [pc, #440]	; (800351c <statemachine+0xb1c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	dd1b      	ble.n	80033a2 <statemachine+0x9a2>
				  					posstate--;
 800336a:	4b6d      	ldr	r3, [pc, #436]	; (8003520 <statemachine+0xb20>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	3b01      	subs	r3, #1
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4b6b      	ldr	r3, [pc, #428]	; (8003520 <statemachine+0xb20>)
 8003374:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003376:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <statemachine+0xb20>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	3b01      	subs	r3, #1
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b68      	ldr	r3, [pc, #416]	; (8003520 <statemachine+0xb20>)
 8003380:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003382:	4b67      	ldr	r3, [pc, #412]	; (8003520 <statemachine+0xb20>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	3b01      	subs	r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b65      	ldr	r3, [pc, #404]	; (8003520 <statemachine+0xb20>)
 800338c:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 800338e:	4b63      	ldr	r3, [pc, #396]	; (800351c <statemachine+0xb1c>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 8003394:	e005      	b.n	80033a2 <statemachine+0x9a2>
				  break;
 8003396:	bf00      	nop
 8003398:	e004      	b.n	80033a4 <statemachine+0x9a4>
				  break;
 800339a:	bf00      	nop
 800339c:	e002      	b.n	80033a4 <statemachine+0x9a4>
				  break;
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <statemachine+0x9a4>
				  break;
 80033a2:	bf00      	nop
			  }

					if(BTN_A>=1){
 80033a4:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <statemachine+0xb24>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f340 8583 	ble.w	8003eb4 <statemachine+0x14b4>
							state++;
 80033ae:	4b5e      	ldr	r3, [pc, #376]	; (8003528 <statemachine+0xb28>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4b5c      	ldr	r3, [pc, #368]	; (8003528 <statemachine+0xb28>)
 80033b8:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80033ba:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <statemachine+0xb24>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
						}
			  break;
 80033c0:	f000 bd78 	b.w	8003eb4 <statemachine+0x14b4>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fe ffbb 	bl	8002340 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80033ca:	4958      	ldr	r1, [pc, #352]	; (800352c <statemachine+0xb2c>)
 80033cc:	484a      	ldr	r0, [pc, #296]	; (80034f8 <statemachine+0xaf8>)
 80033ce:	f7fe fdc9 	bl	8001f64 <nmea_parse>
			  int heure=0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	65fb      	str	r3, [r7, #92]	; 0x5c
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 80033d6:	4b48      	ldr	r3, [pc, #288]	; (80034f8 <statemachine+0xaf8>)
 80033d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <statemachine+0xaf8>)
 80033ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	4413      	add	r3, r2
 80033f6:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if((heure+2)>=24){
 80033f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fa:	2b15      	cmp	r3, #21
 80033fc:	dd03      	ble.n	8003406 <statemachine+0xa06>
				  heure=heure-22;
 80033fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003400:	3b16      	subs	r3, #22
 8003402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003404:	e002      	b.n	800340c <statemachine+0xa0c>
			  }
			  else{
				  heure=heure+2;
 8003406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003408:	3302      	adds	r3, #2
 800340a:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }

			  if(myData.fix == 1){
 800340c:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <statemachine+0xaf8>)
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	2b01      	cmp	r3, #1
 8003412:	f040 82d9 	bne.w	80039c8 <statemachine+0xfc8>

				  switch(hrstate){
 8003416:	4b46      	ldr	r3, [pc, #280]	; (8003530 <statemachine+0xb30>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <statemachine+0xa26>
 800341e:	2b01      	cmp	r3, #1
 8003420:	f000 8092 	beq.w	8003548 <statemachine+0xb48>
 8003424:	e2e6      	b.n	80039f4 <statemachine+0xff4>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 8003426:	2014      	movs	r0, #20
 8003428:	f006 ff18 	bl	800a25c <malloc>
 800342c:	4603      	mov	r3, r0
 800342e:	63bb      	str	r3, [r7, #56]	; 0x38
					  ssd1306_SetCursor(32, 32);
 8003430:	2120      	movs	r1, #32
 8003432:	2020      	movs	r0, #32
 8003434:	f7ff f8c6 	bl	80025c4 <ssd1306_SetCursor>
					  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 8003438:	4a31      	ldr	r2, [pc, #196]	; (8003500 <statemachine+0xb00>)
 800343a:	2301      	movs	r3, #1
 800343c:	ca06      	ldmia	r2, {r1, r2}
 800343e:	483d      	ldr	r0, [pc, #244]	; (8003534 <statemachine+0xb34>)
 8003440:	f7ff f89a 	bl	8002578 <ssd1306_WriteString>
					 ssd1306_SetCursor(34, 42);
 8003444:	212a      	movs	r1, #42	; 0x2a
 8003446:	2022      	movs	r0, #34	; 0x22
 8003448:	f7ff f8bc 	bl	80025c4 <ssd1306_SetCursor>
					 if(heure>=10){
 800344c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344e:	2b09      	cmp	r3, #9
 8003450:	dd0f      	ble.n	8003472 <statemachine+0xa72>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <statemachine+0xaf8>)
 8003454:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003458:	461a      	mov	r2, r3
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <statemachine+0xaf8>)
 800345c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	9200      	str	r2, [sp, #0]
 8003464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003466:	4a34      	ldr	r2, [pc, #208]	; (8003538 <statemachine+0xb38>)
 8003468:	210f      	movs	r1, #15
 800346a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800346c:	f008 fdf2 	bl	800c054 <sniprintf>
 8003470:	e00e      	b.n	8003490 <statemachine+0xa90>
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003472:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <statemachine+0xaf8>)
 8003474:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003478:	461a      	mov	r2, r3
 800347a:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <statemachine+0xaf8>)
 800347c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	9200      	str	r2, [sp, #0]
 8003484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003486:	4a2d      	ldr	r2, [pc, #180]	; (800353c <statemachine+0xb3c>)
 8003488:	210f      	movs	r1, #15
 800348a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800348c:	f008 fde2 	bl	800c054 <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 8003490:	4a2b      	ldr	r2, [pc, #172]	; (8003540 <statemachine+0xb40>)
 8003492:	2301      	movs	r3, #1
 8003494:	ca06      	ldmia	r2, {r1, r2}
 8003496:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003498:	f7ff f86e 	bl	8002578 <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 800349c:	2134      	movs	r1, #52	; 0x34
 800349e:	2022      	movs	r0, #34	; 0x22
 80034a0:	f7ff f890 	bl	80025c4 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <statemachine+0xaf8>)
 80034a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <statemachine+0xaf8>)
 80034ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	4a23      	ldr	r2, [pc, #140]	; (8003544 <statemachine+0xb44>)
 80034b8:	210f      	movs	r1, #15
 80034ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034bc:	f008 fdca 	bl	800c054 <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 80034c0:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <statemachine+0xb00>)
 80034c2:	2301      	movs	r3, #1
 80034c4:	ca06      	ldmia	r2, {r1, r2}
 80034c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034c8:	f7ff f856 	bl	8002578 <ssd1306_WriteString>
					free(str);
 80034cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034ce:	f006 fecd 	bl	800a26c <free>
					if(BTN_B>=1){
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <statemachine+0xb1c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f340 8289 	ble.w	80039ee <statemachine+0xfee>
												hrstate++;
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <statemachine+0xb30>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <statemachine+0xb30>)
 80034e6:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <statemachine+0xb1c>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
											}




					  break;
 80034ee:	e27e      	b.n	80039ee <statemachine+0xfee>
 80034f0:	fb798882 	.word	0xfb798882
 80034f4:	bf1e1818 	.word	0xbf1e1818
 80034f8:	20000700 	.word	0x20000700
 80034fc:	080100d0 	.word	0x080100d0
 8003500:	20000008 	.word	0x20000008
 8003504:	080100dc 	.word	0x080100dc
 8003508:	080100e4 	.word	0x080100e4
 800350c:	447a0000 	.word	0x447a0000
 8003510:	080100f0 	.word	0x080100f0
 8003514:	080100fc 	.word	0x080100fc
 8003518:	08010054 	.word	0x08010054
 800351c:	20000744 	.word	0x20000744
 8003520:	2000074b 	.word	0x2000074b
 8003524:	20000740 	.word	0x20000740
 8003528:	20000748 	.word	0x20000748
 800352c:	20000500 	.word	0x20000500
 8003530:	20000749 	.word	0x20000749
 8003534:	08010104 	.word	0x08010104
 8003538:	08010110 	.word	0x08010110
 800353c:	08010118 	.word	0x08010118
 8003540:	20000010 	.word	0x20000010
 8003544:	08010124 	.word	0x08010124
				  case STATE_OLD:
					  if(heure>12){
 8003548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354a:	2b0c      	cmp	r3, #12
 800354c:	dd02      	ble.n	8003554 <statemachine+0xb54>
						  heure=heure-12;
 800354e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003550:	3b0c      	subs	r3, #12
 8003552:	65fb      	str	r3, [r7, #92]	; 0x5c
					  }
					  int minute=0;
 8003554:	2300      	movs	r3, #0
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8003558:	4b91      	ldr	r3, [pc, #580]	; (80037a0 <statemachine+0xda0>)
 800355a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	461a      	mov	r2, r3
 800356c:	4b8c      	ldr	r3, [pc, #560]	; (80037a0 <statemachine+0xda0>)
 800356e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	4413      	add	r3, r2
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
					  ssd1306_DrawCircle(64, 48, 12, White);
 800357a:	2301      	movs	r3, #1
 800357c:	220c      	movs	r2, #12
 800357e:	2130      	movs	r1, #48	; 0x30
 8003580:	2040      	movs	r0, #64	; 0x40
 8003582:	f7ff f8a3 	bl	80026cc <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 8003586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003588:	f1c3 0303 	rsb	r3, r3, #3
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc ffc9 	bl	8000524 <__aeabi_i2d>
 8003592:	a381      	add	r3, pc, #516	; (adr r3, 8003798 <statemachine+0xd98>)
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f7fd f82e 	bl	80005f8 <__aeabi_dmul>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	4b7e      	ldr	r3, [pc, #504]	; (80037a4 <statemachine+0xda4>)
 80035aa:	f7fd f94f 	bl	800084c <__aeabi_ddiv>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	ec43 2b17 	vmov	d7, r2, r3
 80035b6:	eeb0 0a47 	vmov.f32	s0, s14
 80035ba:	eef0 0a67 	vmov.f32	s1, s15
 80035be:	f00b fb4b 	bl	800ec58 <cos>
 80035c2:	ec51 0b10 	vmov	r0, r1, d0
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	4b76      	ldr	r3, [pc, #472]	; (80037a4 <statemachine+0xda4>)
 80035cc:	f7fd f814 	bl	80005f8 <__aeabi_dmul>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	ec43 2b17 	vmov	d7, r2, r3
 80035d8:	eeb0 0a47 	vmov.f32	s0, s14
 80035dc:	eef0 0a67 	vmov.f32	s1, s15
 80035e0:	f00b fc2a 	bl	800ee38 <floor>
 80035e4:	ec51 0b10 	vmov	r0, r1, d0
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	4b6e      	ldr	r3, [pc, #440]	; (80037a8 <statemachine+0xda8>)
 80035ee:	f7fc fe4d 	bl	800028c <__adddf3>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	f7fd fad5 	bl	8000ba8 <__aeabi_d2uiz>
 80035fe:	4603      	mov	r3, r0
 8003600:	b2dc      	uxtb	r4, r3
 8003602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003604:	f1c3 0303 	rsb	r3, r3, #3
 8003608:	4618      	mov	r0, r3
 800360a:	f7fc ff8b 	bl	8000524 <__aeabi_i2d>
 800360e:	a362      	add	r3, pc, #392	; (adr r3, 8003798 <statemachine+0xd98>)
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f7fc fff0 	bl	80005f8 <__aeabi_dmul>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	4b5f      	ldr	r3, [pc, #380]	; (80037a4 <statemachine+0xda4>)
 8003626:	f7fd f911 	bl	800084c <__aeabi_ddiv>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	ec43 2b17 	vmov	d7, r2, r3
 8003632:	eeb0 0a47 	vmov.f32	s0, s14
 8003636:	eef0 0a67 	vmov.f32	s1, s15
 800363a:	f00b fb61 	bl	800ed00 <sin>
 800363e:	ec51 0b10 	vmov	r0, r1, d0
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	4b57      	ldr	r3, [pc, #348]	; (80037a4 <statemachine+0xda4>)
 8003648:	f7fc ffd6 	bl	80005f8 <__aeabi_dmul>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	ec43 2b17 	vmov	d7, r2, r3
 8003654:	eeb0 0a47 	vmov.f32	s0, s14
 8003658:	eef0 0a67 	vmov.f32	s1, s15
 800365c:	f00b fbec 	bl	800ee38 <floor>
 8003660:	ec53 2b10 	vmov	r2, r3, d0
 8003664:	f04f 0000 	mov.w	r0, #0
 8003668:	4950      	ldr	r1, [pc, #320]	; (80037ac <statemachine+0xdac>)
 800366a:	f7fc fe0d 	bl	8000288 <__aeabi_dsub>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f7fd fa97 	bl	8000ba8 <__aeabi_d2uiz>
 800367a:	4603      	mov	r3, r0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2201      	movs	r2, #1
 8003680:	9200      	str	r2, [sp, #0]
 8003682:	4622      	mov	r2, r4
 8003684:	2130      	movs	r1, #48	; 0x30
 8003686:	2040      	movs	r0, #64	; 0x40
 8003688:	f7fe ffb4 	bl	80025f4 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	f1c3 030f 	rsb	r3, r3, #15
 8003692:	4618      	mov	r0, r3
 8003694:	f7fc ff46 	bl	8000524 <__aeabi_i2d>
 8003698:	a33f      	add	r3, pc, #252	; (adr r3, 8003798 <statemachine+0xd98>)
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f7fc ffab 	bl	80005f8 <__aeabi_dmul>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4610      	mov	r0, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <statemachine+0xdb0>)
 80036b0:	f7fd f8cc 	bl	800084c <__aeabi_ddiv>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	ec43 2b17 	vmov	d7, r2, r3
 80036bc:	eeb0 0a47 	vmov.f32	s0, s14
 80036c0:	eef0 0a67 	vmov.f32	s1, s15
 80036c4:	f00b fac8 	bl	800ec58 <cos>
 80036c8:	ec51 0b10 	vmov	r0, r1, d0
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <statemachine+0xdb4>)
 80036d2:	f7fc ff91 	bl	80005f8 <__aeabi_dmul>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	ec43 2b17 	vmov	d7, r2, r3
 80036de:	eeb0 0a47 	vmov.f32	s0, s14
 80036e2:	eef0 0a67 	vmov.f32	s1, s15
 80036e6:	f00b fba7 	bl	800ee38 <floor>
 80036ea:	ec51 0b10 	vmov	r0, r1, d0
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <statemachine+0xda8>)
 80036f4:	f7fc fdca 	bl	800028c <__adddf3>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	f7fd fa52 	bl	8000ba8 <__aeabi_d2uiz>
 8003704:	4603      	mov	r3, r0
 8003706:	b2dc      	uxtb	r4, r3
 8003708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370a:	f1c3 030f 	rsb	r3, r3, #15
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc ff08 	bl	8000524 <__aeabi_i2d>
 8003714:	a320      	add	r3, pc, #128	; (adr r3, 8003798 <statemachine+0xd98>)
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f7fc ff6d 	bl	80005f8 <__aeabi_dmul>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <statemachine+0xdb0>)
 800372c:	f7fd f88e 	bl	800084c <__aeabi_ddiv>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	ec43 2b17 	vmov	d7, r2, r3
 8003738:	eeb0 0a47 	vmov.f32	s0, s14
 800373c:	eef0 0a67 	vmov.f32	s1, s15
 8003740:	f00b fade 	bl	800ed00 <sin>
 8003744:	ec51 0b10 	vmov	r0, r1, d0
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <statemachine+0xdb4>)
 800374e:	f7fc ff53 	bl	80005f8 <__aeabi_dmul>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	ec43 2b17 	vmov	d7, r2, r3
 800375a:	eeb0 0a47 	vmov.f32	s0, s14
 800375e:	eef0 0a67 	vmov.f32	s1, s15
 8003762:	f00b fb69 	bl	800ee38 <floor>
 8003766:	ec53 2b10 	vmov	r2, r3, d0
 800376a:	f04f 0000 	mov.w	r0, #0
 800376e:	490f      	ldr	r1, [pc, #60]	; (80037ac <statemachine+0xdac>)
 8003770:	f7fc fd8a 	bl	8000288 <__aeabi_dsub>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4610      	mov	r0, r2
 800377a:	4619      	mov	r1, r3
 800377c:	f7fd fa14 	bl	8000ba8 <__aeabi_d2uiz>
 8003780:	4603      	mov	r3, r0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2201      	movs	r2, #1
 8003786:	9200      	str	r2, [sp, #0]
 8003788:	4622      	mov	r2, r4
 800378a:	2130      	movs	r1, #48	; 0x30
 800378c:	2040      	movs	r0, #64	; 0x40
 800378e:	f7fe ff31 	bl	80025f4 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8003792:	2300      	movs	r3, #0
 8003794:	65bb      	str	r3, [r7, #88]	; 0x58
 8003796:	e105      	b.n	80039a4 <statemachine+0xfa4>
 8003798:	54442d18 	.word	0x54442d18
 800379c:	400921fb 	.word	0x400921fb
 80037a0:	20000700 	.word	0x20000700
 80037a4:	40180000 	.word	0x40180000
 80037a8:	40500000 	.word	0x40500000
 80037ac:	40480000 	.word	0x40480000
 80037b0:	403e0000 	.word	0x403e0000
 80037b4:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 80037b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80037ba:	f7fc feb3 	bl	8000524 <__aeabi_i2d>
 80037be:	a3c2      	add	r3, pc, #776	; (adr r3, 8003ac8 <statemachine+0x10c8>)
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f7fc ff18 	bl	80005f8 <__aeabi_dmul>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	4bbe      	ldr	r3, [pc, #760]	; (8003ad0 <statemachine+0x10d0>)
 80037d6:	f7fd f839 	bl	800084c <__aeabi_ddiv>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	ec43 2b17 	vmov	d7, r2, r3
 80037e2:	eeb0 0a47 	vmov.f32	s0, s14
 80037e6:	eef0 0a67 	vmov.f32	s1, s15
 80037ea:	f00b fa35 	bl	800ec58 <cos>
 80037ee:	ec51 0b10 	vmov	r0, r1, d0
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	4bb7      	ldr	r3, [pc, #732]	; (8003ad4 <statemachine+0x10d4>)
 80037f8:	f7fc fefe 	bl	80005f8 <__aeabi_dmul>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	ec43 2b17 	vmov	d7, r2, r3
 8003804:	eeb0 0a47 	vmov.f32	s0, s14
 8003808:	eef0 0a67 	vmov.f32	s1, s15
 800380c:	f00b fb14 	bl	800ee38 <floor>
 8003810:	ec51 0b10 	vmov	r0, r1, d0
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	4baf      	ldr	r3, [pc, #700]	; (8003ad8 <statemachine+0x10d8>)
 800381a:	f7fc fd37 	bl	800028c <__adddf3>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	f7fd f9bf 	bl	8000ba8 <__aeabi_d2uiz>
 800382a:	4603      	mov	r3, r0
 800382c:	b2dc      	uxtb	r4, r3
 800382e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003830:	f7fc fe78 	bl	8000524 <__aeabi_i2d>
 8003834:	a3a4      	add	r3, pc, #656	; (adr r3, 8003ac8 <statemachine+0x10c8>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f7fc fedd 	bl	80005f8 <__aeabi_dmul>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	4ba1      	ldr	r3, [pc, #644]	; (8003ad0 <statemachine+0x10d0>)
 800384c:	f7fc fffe 	bl	800084c <__aeabi_ddiv>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	ec43 2b17 	vmov	d7, r2, r3
 8003858:	eeb0 0a47 	vmov.f32	s0, s14
 800385c:	eef0 0a67 	vmov.f32	s1, s15
 8003860:	f00b fa4e 	bl	800ed00 <sin>
 8003864:	ec51 0b10 	vmov	r0, r1, d0
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	4b99      	ldr	r3, [pc, #612]	; (8003ad4 <statemachine+0x10d4>)
 800386e:	f7fc fec3 	bl	80005f8 <__aeabi_dmul>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	ec43 2b17 	vmov	d7, r2, r3
 800387a:	eeb0 0a47 	vmov.f32	s0, s14
 800387e:	eef0 0a67 	vmov.f32	s1, s15
 8003882:	f00b fad9 	bl	800ee38 <floor>
 8003886:	ec51 0b10 	vmov	r0, r1, d0
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	4b93      	ldr	r3, [pc, #588]	; (8003adc <statemachine+0x10dc>)
 8003890:	f7fc fcfc 	bl	800028c <__adddf3>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	f7fd f984 	bl	8000ba8 <__aeabi_d2uiz>
 80038a0:	4603      	mov	r3, r0
 80038a2:	b2dd      	uxtb	r5, r3
 80038a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80038a6:	f7fc fe3d 	bl	8000524 <__aeabi_i2d>
 80038aa:	a387      	add	r3, pc, #540	; (adr r3, 8003ac8 <statemachine+0x10c8>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f7fc fea2 	bl	80005f8 <__aeabi_dmul>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	4b83      	ldr	r3, [pc, #524]	; (8003ad0 <statemachine+0x10d0>)
 80038c2:	f7fc ffc3 	bl	800084c <__aeabi_ddiv>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	ec43 2b17 	vmov	d7, r2, r3
 80038ce:	eeb0 0a47 	vmov.f32	s0, s14
 80038d2:	eef0 0a67 	vmov.f32	s1, s15
 80038d6:	f00b f9bf 	bl	800ec58 <cos>
 80038da:	ec51 0b10 	vmov	r0, r1, d0
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	4b7f      	ldr	r3, [pc, #508]	; (8003ae0 <statemachine+0x10e0>)
 80038e4:	f7fc fe88 	bl	80005f8 <__aeabi_dmul>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	ec43 2b17 	vmov	d7, r2, r3
 80038f0:	eeb0 0a47 	vmov.f32	s0, s14
 80038f4:	eef0 0a67 	vmov.f32	s1, s15
 80038f8:	f00b fa9e 	bl	800ee38 <floor>
 80038fc:	ec51 0b10 	vmov	r0, r1, d0
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	4b74      	ldr	r3, [pc, #464]	; (8003ad8 <statemachine+0x10d8>)
 8003906:	f7fc fcc1 	bl	800028c <__adddf3>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	f7fd f949 	bl	8000ba8 <__aeabi_d2uiz>
 8003916:	4603      	mov	r3, r0
 8003918:	b2de      	uxtb	r6, r3
 800391a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800391c:	f7fc fe02 	bl	8000524 <__aeabi_i2d>
 8003920:	a369      	add	r3, pc, #420	; (adr r3, 8003ac8 <statemachine+0x10c8>)
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f7fc fe67 	bl	80005f8 <__aeabi_dmul>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	4b66      	ldr	r3, [pc, #408]	; (8003ad0 <statemachine+0x10d0>)
 8003938:	f7fc ff88 	bl	800084c <__aeabi_ddiv>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	ec43 2b17 	vmov	d7, r2, r3
 8003944:	eeb0 0a47 	vmov.f32	s0, s14
 8003948:	eef0 0a67 	vmov.f32	s1, s15
 800394c:	f00b f9d8 	bl	800ed00 <sin>
 8003950:	ec51 0b10 	vmov	r0, r1, d0
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	4b61      	ldr	r3, [pc, #388]	; (8003ae0 <statemachine+0x10e0>)
 800395a:	f7fc fe4d 	bl	80005f8 <__aeabi_dmul>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	ec43 2b17 	vmov	d7, r2, r3
 8003966:	eeb0 0a47 	vmov.f32	s0, s14
 800396a:	eef0 0a67 	vmov.f32	s1, s15
 800396e:	f00b fa63 	bl	800ee38 <floor>
 8003972:	ec51 0b10 	vmov	r0, r1, d0
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	4b58      	ldr	r3, [pc, #352]	; (8003adc <statemachine+0x10dc>)
 800397c:	f7fc fc86 	bl	800028c <__adddf3>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	f7fd f90e 	bl	8000ba8 <__aeabi_d2uiz>
 800398c:	4603      	mov	r3, r0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2201      	movs	r2, #1
 8003992:	9200      	str	r2, [sp, #0]
 8003994:	4632      	mov	r2, r6
 8003996:	4629      	mov	r1, r5
 8003998:	4620      	mov	r0, r4
 800399a:	f7fe fe2b 	bl	80025f4 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 800399e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a0:	3301      	adds	r3, #1
 80039a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80039a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	f77f af06 	ble.w	80037b8 <statemachine+0xdb8>
					  }
					  if(BTN_B>=1){
 80039ac:	4b4d      	ldr	r3, [pc, #308]	; (8003ae4 <statemachine+0x10e4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	dd1e      	ble.n	80039f2 <statemachine+0xff2>
					  	hrstate--;
 80039b4:	4b4c      	ldr	r3, [pc, #304]	; (8003ae8 <statemachine+0x10e8>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	4b4a      	ldr	r3, [pc, #296]	; (8003ae8 <statemachine+0x10e8>)
 80039be:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 80039c0:	4b48      	ldr	r3, [pc, #288]	; (8003ae4 <statemachine+0x10e4>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
					  }


					  break;
 80039c6:	e014      	b.n	80039f2 <statemachine+0xff2>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 80039c8:	2014      	movs	r0, #20
 80039ca:	f006 fc47 	bl	800a25c <malloc>
 80039ce:	4603      	mov	r3, r0
 80039d0:	643b      	str	r3, [r7, #64]	; 0x40
			  			 						ssd1306_SetCursor(32, 44);
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	2020      	movs	r0, #32
 80039d6:	f7fe fdf5 	bl	80025c4 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80039da:	4a44      	ldr	r2, [pc, #272]	; (8003aec <statemachine+0x10ec>)
 80039dc:	2301      	movs	r3, #1
 80039de:	ca06      	ldmia	r2, {r1, r2}
 80039e0:	4843      	ldr	r0, [pc, #268]	; (8003af0 <statemachine+0x10f0>)
 80039e2:	f7fe fdc9 	bl	8002578 <ssd1306_WriteString>
			  			 						free(str);
 80039e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80039e8:	f006 fc40 	bl	800a26c <free>
 80039ec:	e002      	b.n	80039f4 <statemachine+0xff4>
					  break;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <statemachine+0xff4>
					  break;
 80039f2:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 80039f4:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <statemachine+0x10f4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f340 825d 	ble.w	8003eb8 <statemachine+0x14b8>
			  		state++;
 80039fe:	4b3e      	ldr	r3, [pc, #248]	; (8003af8 <statemachine+0x10f8>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4b3c      	ldr	r3, [pc, #240]	; (8003af8 <statemachine+0x10f8>)
 8003a08:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8003a0a:	4b3a      	ldr	r3, [pc, #232]	; (8003af4 <statemachine+0x10f4>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8003a10:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <statemachine+0x10e4>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8003a16:	e24f      	b.n	8003eb8 <statemachine+0x14b8>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8003a18:	2000      	movs	r0, #0
 8003a1a:	f7fe fc91 	bl	8002340 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003a1e:	4937      	ldr	r1, [pc, #220]	; (8003afc <statemachine+0x10fc>)
 8003a20:	4837      	ldr	r0, [pc, #220]	; (8003b00 <statemachine+0x1100>)
 8003a22:	f7fe fa9f 	bl	8001f64 <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003a26:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <statemachine+0x1100>)
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d172      	bne.n	8003b14 <statemachine+0x1114>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8003a2e:	2014      	movs	r0, #20
 8003a30:	f006 fc14 	bl	800a25c <malloc>
 8003a34:	4603      	mov	r3, r0
 8003a36:	647b      	str	r3, [r7, #68]	; 0x44
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8003a38:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <statemachine+0x1100>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc fd83 	bl	8000548 <__aeabi_f2d>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	e9cd 2300 	strd	r2, r3, [sp]
 8003a4a:	4a2e      	ldr	r2, [pc, #184]	; (8003b04 <statemachine+0x1104>)
 8003a4c:	210f      	movs	r1, #15
 8003a4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003a50:	f008 fb00 	bl	800c054 <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 8003a54:	2120      	movs	r1, #32
 8003a56:	2020      	movs	r0, #32
 8003a58:	f7fe fdb4 	bl	80025c4 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003a5c:	4a23      	ldr	r2, [pc, #140]	; (8003aec <statemachine+0x10ec>)
 8003a5e:	2301      	movs	r3, #1
 8003a60:	ca06      	ldmia	r2, {r1, r2}
 8003a62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003a64:	f7fe fd88 	bl	8002578 <ssd1306_WriteString>
			 			 						snprintf(str,15, "SatNb :%d",myData.satelliteCount);
 8003a68:	4b25      	ldr	r3, [pc, #148]	; (8003b00 <statemachine+0x1100>)
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <statemachine+0x1108>)
 8003a6e:	210f      	movs	r1, #15
 8003a70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003a72:	f008 faef 	bl	800c054 <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 8003a76:	212a      	movs	r1, #42	; 0x2a
 8003a78:	2020      	movs	r0, #32
 8003a7a:	f7fe fda3 	bl	80025c4 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <statemachine+0x10ec>)
 8003a80:	2301      	movs	r3, #1
 8003a82:	ca06      	ldmia	r2, {r1, r2}
 8003a84:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003a86:	f7fe fd77 	bl	8002578 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8003a8a:	2132      	movs	r1, #50	; 0x32
 8003a8c:	2020      	movs	r0, #32
 8003a8e:	f7fe fd99 	bl	80025c4 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <statemachine+0x110c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fd56 	bl	8000548 <__aeabi_f2d>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	e9cd 2300 	strd	r2, r3, [sp]
 8003aa4:	4a1a      	ldr	r2, [pc, #104]	; (8003b10 <statemachine+0x1110>)
 8003aa6:	210f      	movs	r1, #15
 8003aa8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003aaa:	f008 fad3 	bl	800c054 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <statemachine+0x10ec>)
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	ca06      	ldmia	r2, {r1, r2}
 8003ab4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003ab6:	f7fe fd5f 	bl	8002578 <ssd1306_WriteString>
			 			 						free(str);
 8003aba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003abc:	f006 fbd6 	bl	800a26c <free>
 8003ac0:	e05c      	b.n	8003b7c <statemachine+0x117c>
 8003ac2:	bf00      	nop
 8003ac4:	f3af 8000 	nop.w
 8003ac8:	54442d18 	.word	0x54442d18
 8003acc:	400921fb 	.word	0x400921fb
 8003ad0:	40180000 	.word	0x40180000
 8003ad4:	40240000 	.word	0x40240000
 8003ad8:	40500000 	.word	0x40500000
 8003adc:	40480000 	.word	0x40480000
 8003ae0:	40280000 	.word	0x40280000
 8003ae4:	20000744 	.word	0x20000744
 8003ae8:	20000749 	.word	0x20000749
 8003aec:	20000008 	.word	0x20000008
 8003af0:	08010054 	.word	0x08010054
 8003af4:	20000740 	.word	0x20000740
 8003af8:	20000748 	.word	0x20000748
 8003afc:	20000500 	.word	0x20000500
 8003b00:	20000700 	.word	0x20000700
 8003b04:	08010130 	.word	0x08010130
 8003b08:	0801013c 	.word	0x0801013c
 8003b0c:	20000754 	.word	0x20000754
 8003b10:	08010148 	.word	0x08010148
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8003b14:	2014      	movs	r0, #20
 8003b16:	f006 fba1 	bl	800a25c <malloc>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	64bb      	str	r3, [r7, #72]	; 0x48
			 			 						ssd1306_SetCursor(32, 32);
 8003b1e:	2120      	movs	r1, #32
 8003b20:	2020      	movs	r0, #32
 8003b22:	f7fe fd4f 	bl	80025c4 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8003b26:	4a8e      	ldr	r2, [pc, #568]	; (8003d60 <statemachine+0x1360>)
 8003b28:	2301      	movs	r3, #1
 8003b2a:	ca06      	ldmia	r2, {r1, r2}
 8003b2c:	488d      	ldr	r0, [pc, #564]	; (8003d64 <statemachine+0x1364>)
 8003b2e:	f7fe fd23 	bl	8002578 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 8003b32:	2129      	movs	r1, #41	; 0x29
 8003b34:	2020      	movs	r0, #32
 8003b36:	f7fe fd45 	bl	80025c4 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003b3a:	4a89      	ldr	r2, [pc, #548]	; (8003d60 <statemachine+0x1360>)
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	ca06      	ldmia	r2, {r1, r2}
 8003b40:	4889      	ldr	r0, [pc, #548]	; (8003d68 <statemachine+0x1368>)
 8003b42:	f7fe fd19 	bl	8002578 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8003b46:	2132      	movs	r1, #50	; 0x32
 8003b48:	2020      	movs	r0, #32
 8003b4a:	f7fe fd3b 	bl	80025c4 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 8003b4e:	4b87      	ldr	r3, [pc, #540]	; (8003d6c <statemachine+0x136c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fcf8 	bl	8000548 <__aeabi_f2d>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	e9cd 2300 	strd	r2, r3, [sp]
 8003b60:	4a83      	ldr	r2, [pc, #524]	; (8003d70 <statemachine+0x1370>)
 8003b62:	210f      	movs	r1, #15
 8003b64:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003b66:	f008 fa75 	bl	800c054 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003b6a:	4a7d      	ldr	r2, [pc, #500]	; (8003d60 <statemachine+0x1360>)
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	ca06      	ldmia	r2, {r1, r2}
 8003b70:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003b72:	f7fe fd01 	bl	8002578 <ssd1306_WriteString>
			 			 						free(str);
 8003b76:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003b78:	f006 fb78 	bl	800a26c <free>
			 			 					}
			  if(BTN_A>=1){
 8003b7c:	4b7d      	ldr	r3, [pc, #500]	; (8003d74 <statemachine+0x1374>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f340 819b 	ble.w	8003ebc <statemachine+0x14bc>
			  		state++;
 8003b86:	4b7c      	ldr	r3, [pc, #496]	; (8003d78 <statemachine+0x1378>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	4b7a      	ldr	r3, [pc, #488]	; (8003d78 <statemachine+0x1378>)
 8003b90:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8003b92:	4b78      	ldr	r3, [pc, #480]	; (8003d74 <statemachine+0x1374>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8003b98:	4b78      	ldr	r3, [pc, #480]	; (8003d7c <statemachine+0x137c>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8003b9e:	e18d      	b.n	8003ebc <statemachine+0x14bc>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f7fe fbcd 	bl	8002340 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8003ba6:	2120      	movs	r1, #32
 8003ba8:	2020      	movs	r0, #32
 8003baa:	f7fe fd0b 	bl	80025c4 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 8003bae:	2014      	movs	r0, #20
 8003bb0:	f006 fb54 	bl	800a25c <malloc>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8003bb8:	4a69      	ldr	r2, [pc, #420]	; (8003d60 <statemachine+0x1360>)
 8003bba:	2301      	movs	r3, #1
 8003bbc:	ca06      	ldmia	r2, {r1, r2}
 8003bbe:	4870      	ldr	r0, [pc, #448]	; (8003d80 <statemachine+0x1380>)
 8003bc0:	f7fe fcda 	bl	8002578 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8003bc4:	2128      	movs	r1, #40	; 0x28
 8003bc6:	2020      	movs	r0, #32
 8003bc8:	f7fe fcfc 	bl	80025c4 <ssd1306_SetCursor>

			  switch(chronostate){
 8003bcc:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <statemachine+0x1384>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d038      	beq.n	8003c46 <statemachine+0x1246>
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	dc4f      	bgt.n	8003c78 <statemachine+0x1278>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <statemachine+0x11e2>
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d01d      	beq.n	8003c1c <statemachine+0x121c>
 8003be0:	e04a      	b.n	8003c78 <statemachine+0x1278>
			  case STATE_RESET:
				  min=0;
 8003be2:	4b69      	ldr	r3, [pc, #420]	; (8003d88 <statemachine+0x1388>)
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8003bea:	4b68      	ldr	r3, [pc, #416]	; (8003d8c <statemachine+0x138c>)
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8003bf2:	4b67      	ldr	r3, [pc, #412]	; (8003d90 <statemachine+0x1390>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 8003bf8:	4b60      	ldr	r3, [pc, #384]	; (8003d7c <statemachine+0x137c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	dd36      	ble.n	8003c6e <statemachine+0x126e>
				  		chronostate++;
 8003c00:	4b60      	ldr	r3, [pc, #384]	; (8003d84 <statemachine+0x1384>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	3301      	adds	r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	4b5e      	ldr	r3, [pc, #376]	; (8003d84 <statemachine+0x1384>)
 8003c0a:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8003c0c:	4b5b      	ldr	r3, [pc, #364]	; (8003d7c <statemachine+0x137c>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8003c12:	4b60      	ldr	r3, [pc, #384]	; (8003d94 <statemachine+0x1394>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a60      	ldr	r2, [pc, #384]	; (8003d98 <statemachine+0x1398>)
 8003c18:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8003c1a:	e028      	b.n	8003c6e <statemachine+0x126e>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 8003c1c:	4b5d      	ldr	r3, [pc, #372]	; (8003d94 <statemachine+0x1394>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b5d      	ldr	r3, [pc, #372]	; (8003d98 <statemachine+0x1398>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	4a5a      	ldr	r2, [pc, #360]	; (8003d90 <statemachine+0x1390>)
 8003c28:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8003c2a:	4b54      	ldr	r3, [pc, #336]	; (8003d7c <statemachine+0x137c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	dd1f      	ble.n	8003c72 <statemachine+0x1272>
				  		chronostate++;
 8003c32:	4b54      	ldr	r3, [pc, #336]	; (8003d84 <statemachine+0x1384>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4b52      	ldr	r3, [pc, #328]	; (8003d84 <statemachine+0x1384>)
 8003c3c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8003c3e:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <statemachine+0x137c>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8003c44:	e015      	b.n	8003c72 <statemachine+0x1272>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 8003c46:	4b4d      	ldr	r3, [pc, #308]	; (8003d7c <statemachine+0x137c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	dd13      	ble.n	8003c76 <statemachine+0x1276>
				  			chronostate--;
 8003c4e:	4b4d      	ldr	r3, [pc, #308]	; (8003d84 <statemachine+0x1384>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	4b4b      	ldr	r3, [pc, #300]	; (8003d84 <statemachine+0x1384>)
 8003c58:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 8003c5a:	4b4a      	ldr	r3, [pc, #296]	; (8003d84 <statemachine+0x1384>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4b48      	ldr	r3, [pc, #288]	; (8003d84 <statemachine+0x1384>)
 8003c64:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8003c66:	4b45      	ldr	r3, [pc, #276]	; (8003d7c <statemachine+0x137c>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
			 }

				  break;
 8003c6c:	e003      	b.n	8003c76 <statemachine+0x1276>
				  break;
 8003c6e:	bf00      	nop
 8003c70:	e002      	b.n	8003c78 <statemachine+0x1278>
				  break;
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <statemachine+0x1278>
				  break;
 8003c76:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8003c78:	4b45      	ldr	r3, [pc, #276]	; (8003d90 <statemachine+0x1390>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c84:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003d9c <statemachine+0x139c>
 8003c88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c8c:	ee16 0a90 	vmov	r0, s13
 8003c90:	f7fc fc5a 	bl	8000548 <__aeabi_f2d>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	ec43 2b10 	vmov	d0, r2, r3
 8003c9c:	f00b f8cc 	bl	800ee38 <floor>
 8003ca0:	ec53 2b10 	vmov	r2, r3, d0
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f7fc ff9e 	bl	8000be8 <__aeabi_d2f>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a36      	ldr	r2, [pc, #216]	; (8003d88 <statemachine+0x1388>)
 8003cb0:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8003cb2:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <statemachine+0x1390>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cbe:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <statemachine+0x1388>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	eddf 6a35 	vldr	s13, [pc, #212]	; 8003d9c <statemachine+0x139c>
 8003cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ccc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cd0:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003da0 <statemachine+0x13a0>
 8003cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cd8:	4b2c      	ldr	r3, [pc, #176]	; (8003d8c <statemachine+0x138c>)
 8003cda:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8003cde:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <statemachine+0x1388>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fc30 	bl	8000548 <__aeabi_f2d>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	e9cd 2300 	strd	r2, r3, [sp]
 8003cf0:	4a2c      	ldr	r2, [pc, #176]	; (8003da4 <statemachine+0x13a4>)
 8003cf2:	210f      	movs	r1, #15
 8003cf4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003cf6:	f008 f9ad 	bl	800c054 <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 8003cfa:	4a2b      	ldr	r2, [pc, #172]	; (8003da8 <statemachine+0x13a8>)
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	ca06      	ldmia	r2, {r1, r2}
 8003d00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003d02:	f7fe fc39 	bl	8002578 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8003d06:	2132      	movs	r1, #50	; 0x32
 8003d08:	2020      	movs	r0, #32
 8003d0a:	f7fe fc5b 	bl	80025c4 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <statemachine+0x138c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fc fc18 	bl	8000548 <__aeabi_f2d>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d20:	4a22      	ldr	r2, [pc, #136]	; (8003dac <statemachine+0x13ac>)
 8003d22:	210f      	movs	r1, #15
 8003d24:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003d26:	f008 f995 	bl	800c054 <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 8003d2a:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <statemachine+0x1360>)
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	ca06      	ldmia	r2, {r1, r2}
 8003d30:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003d32:	f7fe fc21 	bl	8002578 <ssd1306_WriteString>
			  free(str);
 8003d36:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003d38:	f006 fa98 	bl	800a26c <free>


			  if(BTN_A>=1){
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <statemachine+0x1374>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f340 80bd 	ble.w	8003ec0 <statemachine+0x14c0>
			 	state++;
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <statemachine+0x1378>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <statemachine+0x1378>)
 8003d50:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <statemachine+0x1374>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <statemachine+0x137c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]


	}
			  break;
 8003d5e:	e0af      	b.n	8003ec0 <statemachine+0x14c0>
 8003d60:	20000008 	.word	0x20000008
 8003d64:	08010154 	.word	0x08010154
 8003d68:	08010054 	.word	0x08010054
 8003d6c:	20000754 	.word	0x20000754
 8003d70:	08010148 	.word	0x08010148
 8003d74:	20000740 	.word	0x20000740
 8003d78:	20000748 	.word	0x20000748
 8003d7c:	20000744 	.word	0x20000744
 8003d80:	0801015c 	.word	0x0801015c
 8003d84:	2000074c 	.word	0x2000074c
 8003d88:	20000ba8 	.word	0x20000ba8
 8003d8c:	20000ba4 	.word	0x20000ba4
 8003d90:	20000bb0 	.word	0x20000bb0
 8003d94:	20000bd4 	.word	0x20000bd4
 8003d98:	20000bac 	.word	0x20000bac
 8003d9c:	476a6000 	.word	0x476a6000
 8003da0:	447a0000 	.word	0x447a0000
 8003da4:	08010164 	.word	0x08010164
 8003da8:	20000010 	.word	0x20000010
 8003dac:	08010170 	.word	0x08010170
			  case STATE_SPEEDTEST:
				  ssd1306_Fill(Black);
 8003db0:	2000      	movs	r0, #0
 8003db2:	f7fe fac5 	bl	8002340 <ssd1306_Fill>
				  nmea_speed(&myData, DataBuffer);
 8003db6:	494a      	ldr	r1, [pc, #296]	; (8003ee0 <statemachine+0x14e0>)
 8003db8:	484a      	ldr	r0, [pc, #296]	; (8003ee4 <statemachine+0x14e4>)
 8003dba:	f7fe f983 	bl	80020c4 <nmea_speed>
				  			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003dbe:	4b49      	ldr	r3, [pc, #292]	; (8003ee4 <statemachine+0x14e4>)
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d12f      	bne.n	8003e26 <statemachine+0x1426>
				  			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8003dc6:	2014      	movs	r0, #20
 8003dc8:	f006 fa48 	bl	800a25c <malloc>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	653b      	str	r3, [r7, #80]	; 0x50
				  			 			 					ssd1306_SetCursor(32, 32);
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	2020      	movs	r0, #32
 8003dd4:	f7fe fbf6 	bl	80025c4 <ssd1306_SetCursor>
				  			 			 					snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 8003dd8:	4b42      	ldr	r3, [pc, #264]	; (8003ee4 <statemachine+0x14e4>)
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fc fbb3 	bl	8000548 <__aeabi_f2d>
 8003de2:	a33d      	add	r3, pc, #244	; (adr r3, 8003ed8 <statemachine+0x14d8>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc fc06 	bl	80005f8 <__aeabi_dmul>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	e9cd 2300 	strd	r2, r3, [sp]
 8003df4:	4a3c      	ldr	r2, [pc, #240]	; (8003ee8 <statemachine+0x14e8>)
 8003df6:	210f      	movs	r1, #15
 8003df8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003dfa:	f008 f92b 	bl	800c054 <sniprintf>
				  			 			 					ssd1306_WriteString(str, Font_11x18, White);
 8003dfe:	4a3b      	ldr	r2, [pc, #236]	; (8003eec <statemachine+0x14ec>)
 8003e00:	2301      	movs	r3, #1
 8003e02:	ca06      	ldmia	r2, {r1, r2}
 8003e04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003e06:	f7fe fbb7 	bl	8002578 <ssd1306_WriteString>
				  			 			 					ssd1306_SetCursor(32, 54);
 8003e0a:	2136      	movs	r1, #54	; 0x36
 8003e0c:	2020      	movs	r0, #32
 8003e0e:	f7fe fbd9 	bl	80025c4 <ssd1306_SetCursor>
				  			 			 					ssd1306_WriteString("kmh", Font_6x8, White);
 8003e12:	4a37      	ldr	r2, [pc, #220]	; (8003ef0 <statemachine+0x14f0>)
 8003e14:	2301      	movs	r3, #1
 8003e16:	ca06      	ldmia	r2, {r1, r2}
 8003e18:	4836      	ldr	r0, [pc, #216]	; (8003ef4 <statemachine+0x14f4>)
 8003e1a:	f7fe fbad 	bl	8002578 <ssd1306_WriteString>
				  			 			 						free(str);
 8003e1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003e20:	f006 fa24 	bl	800a26c <free>
 8003e24:	e01b      	b.n	8003e5e <statemachine+0x145e>
				  			 			 					}
				  			 			 	else{ //if the GPS doesn't have a fix, print a message
				  			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8003e26:	2014      	movs	r0, #20
 8003e28:	f006 fa18 	bl	800a25c <malloc>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	657b      	str	r3, [r7, #84]	; 0x54
				  			 			 						ssd1306_SetCursor(32, 32);
 8003e30:	2120      	movs	r1, #32
 8003e32:	2020      	movs	r0, #32
 8003e34:	f7fe fbc6 	bl	80025c4 <ssd1306_SetCursor>
				  			 			 						ssd1306_WriteString("5HZ", Font_6x8, White);
 8003e38:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <statemachine+0x14f0>)
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	ca06      	ldmia	r2, {r1, r2}
 8003e3e:	482e      	ldr	r0, [pc, #184]	; (8003ef8 <statemachine+0x14f8>)
 8003e40:	f7fe fb9a 	bl	8002578 <ssd1306_WriteString>
				  			 			 						ssd1306_SetCursor(32, 44);
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	2020      	movs	r0, #32
 8003e48:	f7fe fbbc 	bl	80025c4 <ssd1306_SetCursor>
				  			 			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003e4c:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <statemachine+0x14f0>)
 8003e4e:	2301      	movs	r3, #1
 8003e50:	ca06      	ldmia	r2, {r1, r2}
 8003e52:	482a      	ldr	r0, [pc, #168]	; (8003efc <statemachine+0x14fc>)
 8003e54:	f7fe fb90 	bl	8002578 <ssd1306_WriteString>
				  			 			 						free(str);
 8003e58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003e5a:	f006 fa07 	bl	800a26c <free>
				  			 			 					}




				  if(BTN_A>=1){
 8003e5e:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <statemachine+0x1500>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	dd2e      	ble.n	8003ec4 <statemachine+0x14c4>
				  			 	state--;
 8003e66:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <statemachine+0x1504>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <statemachine+0x1504>)
 8003e70:	701a      	strb	r2, [r3, #0]
				  			 	state--;
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <statemachine+0x1504>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <statemachine+0x1504>)
 8003e7c:	701a      	strb	r2, [r3, #0]
				  			 	state--;
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <statemachine+0x1504>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <statemachine+0x1504>)
 8003e88:	701a      	strb	r2, [r3, #0]
				  			 	state--;
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <statemachine+0x1504>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <statemachine+0x1504>)
 8003e94:	701a      	strb	r2, [r3, #0]
				  			 	state--;
 8003e96:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <statemachine+0x1504>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <statemachine+0x1504>)
 8003ea0:	701a      	strb	r2, [r3, #0]
				  			 	BTN_A=0;
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <statemachine+0x1500>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
				  			 	BTN_B=0;
 8003ea8:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <statemachine+0x1508>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
				  	}



				  break;
 8003eae:	e009      	b.n	8003ec4 <statemachine+0x14c4>
				  break;
 8003eb0:	bf00      	nop
 8003eb2:	e008      	b.n	8003ec6 <statemachine+0x14c6>
			  break;
 8003eb4:	bf00      	nop
 8003eb6:	e006      	b.n	8003ec6 <statemachine+0x14c6>
			  break;
 8003eb8:	bf00      	nop
 8003eba:	e004      	b.n	8003ec6 <statemachine+0x14c6>
			  break;
 8003ebc:	bf00      	nop
 8003ebe:	e002      	b.n	8003ec6 <statemachine+0x14c6>
			  break;
 8003ec0:	bf00      	nop
 8003ec2:	e000      	b.n	8003ec6 <statemachine+0x14c6>
				  break;
 8003ec4:	bf00      	nop


	}

return ;
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
}
 8003eca:	376c      	adds	r7, #108	; 0x6c
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	ecbd 8b02 	vpop	{d8}
 8003ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	cccccccd 	.word	0xcccccccd
 8003edc:	400ccccc 	.word	0x400ccccc
 8003ee0:	20000500 	.word	0x20000500
 8003ee4:	20000700 	.word	0x20000700
 8003ee8:	08010068 	.word	0x08010068
 8003eec:	20000018 	.word	0x20000018
 8003ef0:	20000008 	.word	0x20000008
 8003ef4:	08010070 	.word	0x08010070
 8003ef8:	0801017c 	.word	0x0801017c
 8003efc:	08010054 	.word	0x08010054
 8003f00:	20000740 	.word	0x20000740
 8003f04:	20000748 	.word	0x20000748
 8003f08:	20000744 	.word	0x20000744

08003f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <HAL_MspInit+0x44>)
 8003f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f16:	4a0e      	ldr	r2, [pc, #56]	; (8003f50 <HAL_MspInit+0x44>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <HAL_MspInit+0x44>)
 8003f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_MspInit+0x44>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2e:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <HAL_MspInit+0x44>)
 8003f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6593      	str	r3, [r2, #88]	; 0x58
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_MspInit+0x44>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000

08003f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b098      	sub	sp, #96	; 0x60
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	2254      	movs	r2, #84	; 0x54
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f008 f90c 	bl	800c182 <memset>
  if(hadc->Instance==ADC1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a32      	ldr	r2, [pc, #200]	; (8004038 <HAL_ADC_MspInit+0xe4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d15d      	bne.n	8004030 <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003f74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f78:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003f7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f7e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003f80:	2301      	movs	r3, #1
 8003f82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003f84:	2301      	movs	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003f88:	2318      	movs	r3, #24
 8003f8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003f8c:	2307      	movs	r3, #7
 8003f8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003f90:	2302      	movs	r3, #2
 8003f92:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003f94:	2302      	movs	r3, #2
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f9e:	f107 030c 	add.w	r3, r7, #12
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f004 f8b0 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8003fae:	f7fd fcbf 	bl	8001930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003fb2:	4b22      	ldr	r3, [pc, #136]	; (800403c <HAL_ADC_MspInit+0xe8>)
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	4a21      	ldr	r2, [pc, #132]	; (800403c <HAL_ADC_MspInit+0xe8>)
 8003fb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	; (800403c <HAL_ADC_MspInit+0xe8>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003fca:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_ADC_MspInit+0xf0>)
 8003fce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fdc:	4b18      	ldr	r3, [pc, #96]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fe2:	4b17      	ldr	r3, [pc, #92]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8003fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ff0:	4b13      	ldr	r3, [pc, #76]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8003ff2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ff6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8004000:	2200      	movs	r2, #0
 8004002:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004004:	480e      	ldr	r0, [pc, #56]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8004006:	f001 ff97 	bl	8005f38 <HAL_DMA_Init>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8004010:	f7fd fc8e 	bl	8001930 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <HAL_ADC_MspInit+0xec>)
 8004018:	64da      	str	r2, [r3, #76]	; 0x4c
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <HAL_ADC_MspInit+0xec>)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	2100      	movs	r1, #0
 8004024:	2012      	movs	r0, #18
 8004026:	f001 ff50 	bl	8005eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800402a:	2012      	movs	r0, #18
 800402c:	f001 ff69 	bl	8005f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004030:	bf00      	nop
 8004032:	3760      	adds	r7, #96	; 0x60
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	50040000 	.word	0x50040000
 800403c:	40021000 	.word	0x40021000
 8004040:	20000278 	.word	0x20000278
 8004044:	40020008 	.word	0x40020008

08004048 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b0a2      	sub	sp, #136	; 0x88
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004050:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004060:	f107 0320 	add.w	r3, r7, #32
 8004064:	2254      	movs	r2, #84	; 0x54
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f008 f88a 	bl	800c182 <memset>
  if(hi2c->Instance==I2C1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a4f      	ldr	r2, [pc, #316]	; (80041b0 <HAL_I2C_MspInit+0x168>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d13a      	bne.n	80040ee <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004078:	2340      	movs	r3, #64	; 0x40
 800407a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800407c:	2300      	movs	r3, #0
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004080:	f107 0320 	add.w	r3, r7, #32
 8004084:	4618      	mov	r0, r3
 8004086:	f004 f83f 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004090:	f7fd fc4e 	bl	8001930 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004094:	4b47      	ldr	r3, [pc, #284]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	4a46      	ldr	r2, [pc, #280]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040a0:	4b44      	ldr	r3, [pc, #272]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040b0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040b2:	2312      	movs	r3, #18
 80040b4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ba:	2303      	movs	r3, #3
 80040bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040c0:	2304      	movs	r3, #4
 80040c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80040ca:	4619      	mov	r1, r3
 80040cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040d0:	f002 f9b4 	bl	800643c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040d4:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	4a36      	ldr	r2, [pc, #216]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 80040da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040de:	6593      	str	r3, [r2, #88]	; 0x58
 80040e0:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80040ec:	e05c      	b.n	80041a8 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a31      	ldr	r2, [pc, #196]	; (80041b8 <HAL_I2C_MspInit+0x170>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d157      	bne.n	80041a8 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80040f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80040fe:	2300      	movs	r3, #0
 8004100:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004102:	f107 0320 	add.w	r3, r7, #32
 8004106:	4618      	mov	r0, r3
 8004108:	f003 fffe 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8004112:	f7fd fc0d 	bl	8001930 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004116:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 8004118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411a:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004122:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 8004124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412e:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 8004134:	f043 0302 	orr.w	r3, r3, #2
 8004138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800413a:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800414a:	2312      	movs	r3, #18
 800414c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004152:	2303      	movs	r3, #3
 8004154:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004158:	2304      	movs	r3, #4
 800415a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004162:	4619      	mov	r1, r3
 8004164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004168:	f002 f968 	bl	800643c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800416c:	2310      	movs	r3, #16
 800416e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004170:	2312      	movs	r3, #18
 8004172:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004178:	2303      	movs	r3, #3
 800417a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800417e:	2304      	movs	r3, #4
 8004180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004184:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004188:	4619      	mov	r1, r3
 800418a:	480c      	ldr	r0, [pc, #48]	; (80041bc <HAL_I2C_MspInit+0x174>)
 800418c:	f002 f956 	bl	800643c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004190:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 8004196:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800419a:	6593      	str	r3, [r2, #88]	; 0x58
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_I2C_MspInit+0x16c>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
}
 80041a8:	bf00      	nop
 80041aa:	3788      	adds	r7, #136	; 0x88
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40005400 	.word	0x40005400
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40005c00 	.word	0x40005c00
 80041bc:	48000400 	.word	0x48000400

080041c0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b098      	sub	sp, #96	; 0x60
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041c8:	f107 030c 	add.w	r3, r7, #12
 80041cc:	2254      	movs	r2, #84	; 0x54
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f007 ffd6 	bl	800c182 <memset>
  if(hlptim->Instance==LPTIM1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <HAL_LPTIM_MspInit+0x70>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d123      	bne.n	8004228 <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80041e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 80041e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041ea:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041ec:	f107 030c 	add.w	r3, r7, #12
 80041f0:	4618      	mov	r0, r3
 80041f2:	f003 ff89 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 80041fc:	f7fd fb98 	bl	8001930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <HAL_LPTIM_MspInit+0x74>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <HAL_LPTIM_MspInit+0x74>)
 8004206:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800420a:	6593      	str	r3, [r2, #88]	; 0x58
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_LPTIM_MspInit+0x74>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8004218:	2200      	movs	r2, #0
 800421a:	2100      	movs	r1, #0
 800421c:	2041      	movs	r0, #65	; 0x41
 800421e:	f001 fe54 	bl	8005eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8004222:	2041      	movs	r0, #65	; 0x41
 8004224:	f001 fe6d 	bl	8005f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8004228:	bf00      	nop
 800422a:	3760      	adds	r7, #96	; 0x60
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40007c00 	.word	0x40007c00
 8004234:	40021000 	.word	0x40021000

08004238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b09e      	sub	sp, #120	; 0x78
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004250:	f107 0310 	add.w	r3, r7, #16
 8004254:	2254      	movs	r2, #84	; 0x54
 8004256:	2100      	movs	r1, #0
 8004258:	4618      	mov	r0, r3
 800425a:	f007 ff92 	bl	800c182 <memset>
  if(huart->Instance==LPUART1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a38      	ldr	r2, [pc, #224]	; (8004344 <HAL_UART_MspInit+0x10c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d168      	bne.n	800433a <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004268:	2320      	movs	r3, #32
 800426a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800426c:	2300      	movs	r3, #0
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004270:	f107 0310 	add.w	r3, r7, #16
 8004274:	4618      	mov	r0, r3
 8004276:	f003 ff47 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004280:	f7fd fb56 	bl	8001930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004284:	4b30      	ldr	r3, [pc, #192]	; (8004348 <HAL_UART_MspInit+0x110>)
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	4a2f      	ldr	r2, [pc, #188]	; (8004348 <HAL_UART_MspInit+0x110>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004290:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <HAL_UART_MspInit+0x110>)
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800429c:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <HAL_UART_MspInit+0x110>)
 800429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a0:	4a29      	ldr	r2, [pc, #164]	; (8004348 <HAL_UART_MspInit+0x110>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a8:	4b27      	ldr	r3, [pc, #156]	; (8004348 <HAL_UART_MspInit+0x110>)
 80042aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042b4:	230c      	movs	r3, #12
 80042b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b8:	2302      	movs	r3, #2
 80042ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042bc:	2300      	movs	r3, #0
 80042be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c0:	2303      	movs	r3, #3
 80042c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80042c4:	2308      	movs	r3, #8
 80042c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80042cc:	4619      	mov	r1, r3
 80042ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042d2:	f002 f8b3 	bl	800643c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_UART_MspInit+0x114>)
 80042d8:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <HAL_UART_MspInit+0x118>)
 80042da:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 80042dc:	4b1b      	ldr	r3, [pc, #108]	; (800434c <HAL_UART_MspInit+0x114>)
 80042de:	2204      	movs	r2, #4
 80042e0:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042e2:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_UART_MspInit+0x114>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042e8:	4b18      	ldr	r3, [pc, #96]	; (800434c <HAL_UART_MspInit+0x114>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042ee:	4b17      	ldr	r3, [pc, #92]	; (800434c <HAL_UART_MspInit+0x114>)
 80042f0:	2280      	movs	r2, #128	; 0x80
 80042f2:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042f4:	4b15      	ldr	r3, [pc, #84]	; (800434c <HAL_UART_MspInit+0x114>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042fa:	4b14      	ldr	r3, [pc, #80]	; (800434c <HAL_UART_MspInit+0x114>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_CIRCULAR;
 8004300:	4b12      	ldr	r3, [pc, #72]	; (800434c <HAL_UART_MspInit+0x114>)
 8004302:	2220      	movs	r2, #32
 8004304:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004306:	4b11      	ldr	r3, [pc, #68]	; (800434c <HAL_UART_MspInit+0x114>)
 8004308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800430c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 800430e:	480f      	ldr	r0, [pc, #60]	; (800434c <HAL_UART_MspInit+0x114>)
 8004310:	f001 fe12 	bl	8005f38 <HAL_DMA_Init>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800431a:	f7fd fb09 	bl	8001930 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart_rx);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a0a      	ldr	r2, [pc, #40]	; (800434c <HAL_UART_MspInit+0x114>)
 8004322:	675a      	str	r2, [r3, #116]	; 0x74
 8004324:	4a09      	ldr	r2, [pc, #36]	; (800434c <HAL_UART_MspInit+0x114>)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800432a:	2200      	movs	r2, #0
 800432c:	2100      	movs	r1, #0
 800432e:	2046      	movs	r0, #70	; 0x46
 8004330:	f001 fdcb 	bl	8005eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004334:	2046      	movs	r0, #70	; 0x46
 8004336:	f001 fde4 	bl	8005f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800433a:	bf00      	nop
 800433c:	3778      	adds	r7, #120	; 0x78
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40008000 	.word	0x40008000
 8004348:	40021000 	.word	0x40021000
 800434c:	20000428 	.word	0x20000428
 8004350:	40020480 	.word	0x40020480

08004354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004364:	d10b      	bne.n	800437e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_TIM_Base_MspInit+0x38>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	4a08      	ldr	r2, [pc, #32]	; (800438c <HAL_TIM_Base_MspInit+0x38>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	6593      	str	r3, [r2, #88]	; 0x58
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_TIM_Base_MspInit+0x38>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000

08004390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004394:	e7fe      	b.n	8004394 <NMI_Handler+0x4>
	...

08004398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_Fill(Black);
 800439c:	2000      	movs	r0, #0
 800439e:	f7fd ffcf 	bl	8002340 <ssd1306_Fill>
	  ssd1306_SetCursor(33, 36);
 80043a2:	2124      	movs	r1, #36	; 0x24
 80043a4:	2021      	movs	r0, #33	; 0x21
 80043a6:	f7fe f90d 	bl	80025c4 <ssd1306_SetCursor>
	  ssd1306_WriteString("rincee en", Font_6x8, White);
 80043aa:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <HardFault_Handler+0x38>)
 80043ac:	2301      	movs	r3, #1
 80043ae:	ca06      	ldmia	r2, {r1, r2}
 80043b0:	4808      	ldr	r0, [pc, #32]	; (80043d4 <HardFault_Handler+0x3c>)
 80043b2:	f7fe f8e1 	bl	8002578 <ssd1306_WriteString>
	  ssd1306_SetCursor(33, 46);
 80043b6:	212e      	movs	r1, #46	; 0x2e
 80043b8:	2021      	movs	r0, #33	; 0x21
 80043ba:	f7fe f903 	bl	80025c4 <ssd1306_SetCursor>
	  ssd1306_WriteString("code", Font_6x8, White);
 80043be:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <HardFault_Handler+0x38>)
 80043c0:	2301      	movs	r3, #1
 80043c2:	ca06      	ldmia	r2, {r1, r2}
 80043c4:	4804      	ldr	r0, [pc, #16]	; (80043d8 <HardFault_Handler+0x40>)
 80043c6:	f7fe f8d7 	bl	8002578 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80043ca:	f7fd ffd1 	bl	8002370 <ssd1306_UpdateScreen>
	  ssd1306_Fill(Black);
 80043ce:	e7e5      	b.n	800439c <HardFault_Handler+0x4>
 80043d0:	20000008 	.word	0x20000008
 80043d4:	08010180 	.word	0x08010180
 80043d8:	0801018c 	.word	0x0801018c

080043dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043e0:	e7fe      	b.n	80043e0 <MemManage_Handler+0x4>

080043e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043e6:	e7fe      	b.n	80043e6 <BusFault_Handler+0x4>

080043e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043ec:	e7fe      	b.n	80043ec <UsageFault_Handler+0x4>

080043ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043ee:	b480      	push	{r7}
 80043f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043f2:	bf00      	nop
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800440a:	b480      	push	{r7}
 800440c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800440e:	bf00      	nop
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800441c:	f000 f996 	bl	800474c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}

08004424 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004428:	4802      	ldr	r0, [pc, #8]	; (8004434 <DMA1_Channel1_IRQHandler+0x10>)
 800442a:	f001 ff1c 	bl	8006266 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000278 	.word	0x20000278

08004438 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800443c:	4802      	ldr	r0, [pc, #8]	; (8004448 <ADC1_IRQHandler+0x10>)
 800443e:	f000 fd69 	bl	8004f14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000214 	.word	0x20000214

0800444c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004450:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004454:	f002 f974 	bl	8006740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004458:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800445c:	f002 f970 	bl	8006740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004460:	bf00      	nop
 8004462:	bd80      	pop	{r7, pc}

08004464 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
//
//	}


  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004468:	4802      	ldr	r0, [pc, #8]	; (8004474 <LPTIM1_IRQHandler+0x10>)
 800446a:	f002 fecf 	bl	800720c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000368 	.word	0x20000368

08004478 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 800447c:	4802      	ldr	r0, [pc, #8]	; (8004488 <DMA2_Channel7_IRQHandler+0x10>)
 800447e:	f001 fef2 	bl	8006266 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000428 	.word	0x20000428

0800448c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004490:	4802      	ldr	r0, [pc, #8]	; (800449c <LPUART1_IRQHandler+0x10>)
 8004492:	f004 fd89 	bl	8008fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	200003a0 	.word	0x200003a0

080044a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return 1;
 80044a4:	2301      	movs	r3, #1
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <_kill>:

int _kill(int pid, int sig)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044ba:	f007 ff49 	bl	800c350 <__errno>
 80044be:	4603      	mov	r3, r0
 80044c0:	2216      	movs	r2, #22
 80044c2:	601a      	str	r2, [r3, #0]
  return -1;
 80044c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <_exit>:

void _exit (int status)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044d8:	f04f 31ff 	mov.w	r1, #4294967295
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ffe7 	bl	80044b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80044e2:	e7fe      	b.n	80044e2 <_exit+0x12>

080044e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e00a      	b.n	800450c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80044f6:	f3af 8000 	nop.w
 80044fa:	4601      	mov	r1, r0
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	60ba      	str	r2, [r7, #8]
 8004502:	b2ca      	uxtb	r2, r1
 8004504:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	3301      	adds	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	dbf0      	blt.n	80044f6 <_read+0x12>
  }

  return len;
 8004514:	687b      	ldr	r3, [r7, #4]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	e009      	b.n	8004544 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	60ba      	str	r2, [r7, #8]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	3301      	adds	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	dbf1      	blt.n	8004530 <_write+0x12>
  }
  return len;
 800454c:	687b      	ldr	r3, [r7, #4]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <_close>:

int _close(int file)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800457e:	605a      	str	r2, [r3, #4]
  return 0;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <_isatty>:

int _isatty(int file)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004596:	2301      	movs	r3, #1
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045c8:	4a14      	ldr	r2, [pc, #80]	; (800461c <_sbrk+0x5c>)
 80045ca:	4b15      	ldr	r3, [pc, #84]	; (8004620 <_sbrk+0x60>)
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045d4:	4b13      	ldr	r3, [pc, #76]	; (8004624 <_sbrk+0x64>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <_sbrk+0x64>)
 80045de:	4a12      	ldr	r2, [pc, #72]	; (8004628 <_sbrk+0x68>)
 80045e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <_sbrk+0x64>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d207      	bcs.n	8004600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045f0:	f007 feae 	bl	800c350 <__errno>
 80045f4:	4603      	mov	r3, r0
 80045f6:	220c      	movs	r2, #12
 80045f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
 80045fe:	e009      	b.n	8004614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004600:	4b08      	ldr	r3, [pc, #32]	; (8004624 <_sbrk+0x64>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <_sbrk+0x64>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	4a05      	ldr	r2, [pc, #20]	; (8004624 <_sbrk+0x64>)
 8004610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20010000 	.word	0x20010000
 8004620:	00000400 	.word	0x00000400
 8004624:	20000bd0 	.word	0x20000bd0
 8004628:	20000d28 	.word	0x20000d28

0800462c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <SystemInit+0x20>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	4a05      	ldr	r2, [pc, #20]	; (800464c <SystemInit+0x20>)
 8004638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800463c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004640:	bf00      	nop
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004654:	f7ff ffea 	bl	800462c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004658:	480c      	ldr	r0, [pc, #48]	; (800468c <LoopForever+0x6>)
  ldr r1, =_edata
 800465a:	490d      	ldr	r1, [pc, #52]	; (8004690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800465c:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <LoopForever+0xe>)
  movs r3, #0
 800465e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004660:	e002      	b.n	8004668 <LoopCopyDataInit>

08004662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004666:	3304      	adds	r3, #4

08004668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800466a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800466c:	d3f9      	bcc.n	8004662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004670:	4c0a      	ldr	r4, [pc, #40]	; (800469c <LoopForever+0x16>)
  movs r3, #0
 8004672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004674:	e001      	b.n	800467a <LoopFillZerobss>

08004676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004678:	3204      	adds	r2, #4

0800467a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800467a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800467c:	d3fb      	bcc.n	8004676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800467e:	f007 fe6d 	bl	800c35c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004682:	f7fc fe47 	bl	8001314 <main>

08004686 <LoopForever>:

LoopForever:
    b LoopForever
 8004686:	e7fe      	b.n	8004686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004688:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800468c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004690:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004694:	08012418 	.word	0x08012418
  ldr r2, =_sbss
 8004698:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800469c:	20000d24 	.word	0x20000d24

080046a0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046a0:	e7fe      	b.n	80046a0 <CAN1_RX0_IRQHandler>

080046a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ac:	2003      	movs	r0, #3
 80046ae:	f001 fc01 	bl	8005eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046b2:	200f      	movs	r0, #15
 80046b4:	f000 f80e 	bl	80046d4 <HAL_InitTick>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	71fb      	strb	r3, [r7, #7]
 80046c2:	e001      	b.n	80046c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046c4:	f7ff fc22 	bl	8003f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046c8:	79fb      	ldrb	r3, [r7, #7]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80046e0:	4b17      	ldr	r3, [pc, #92]	; (8004740 <HAL_InitTick+0x6c>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d023      	beq.n	8004730 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80046e8:	4b16      	ldr	r3, [pc, #88]	; (8004744 <HAL_InitTick+0x70>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b14      	ldr	r3, [pc, #80]	; (8004740 <HAL_InitTick+0x6c>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	4619      	mov	r1, r3
 80046f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 fc0d 	bl	8005f1e <HAL_SYSTICK_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10f      	bne.n	800472a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b0f      	cmp	r3, #15
 800470e:	d809      	bhi.n	8004724 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004710:	2200      	movs	r2, #0
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	f001 fbd7 	bl	8005eca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800471c:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <HAL_InitTick+0x74>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e007      	b.n	8004734 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
 8004728:	e004      	b.n	8004734 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
 800472e:	e001      	b.n	8004734 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000028 	.word	0x20000028
 8004744:	20000020 	.word	0x20000020
 8004748:	20000024 	.word	0x20000024

0800474c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004750:	4b06      	ldr	r3, [pc, #24]	; (800476c <HAL_IncTick+0x20>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_IncTick+0x24>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4413      	add	r3, r2
 800475c:	4a04      	ldr	r2, [pc, #16]	; (8004770 <HAL_IncTick+0x24>)
 800475e:	6013      	str	r3, [r2, #0]
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000028 	.word	0x20000028
 8004770:	20000bd4 	.word	0x20000bd4

08004774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return uwTick;
 8004778:	4b03      	ldr	r3, [pc, #12]	; (8004788 <HAL_GetTick+0x14>)
 800477a:	681b      	ldr	r3, [r3, #0]
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000bd4 	.word	0x20000bd4

0800478c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004794:	f7ff ffee 	bl	8004774 <HAL_GetTick>
 8004798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d005      	beq.n	80047b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80047a6:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <HAL_Delay+0x44>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047b2:	bf00      	nop
 80047b4:	f7ff ffde 	bl	8004774 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d8f7      	bhi.n	80047b4 <HAL_Delay+0x28>
  {
  }
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000028 	.word	0x20000028

080047d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	609a      	str	r2, [r3, #8]
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	609a      	str	r2, [r3, #8]
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3360      	adds	r3, #96	; 0x60
 800484e:	461a      	mov	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <LL_ADC_SetOffset+0x44>)
 800485e:	4013      	ands	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	4313      	orrs	r3, r2
 800486c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	03fff000 	.word	0x03fff000

08004884 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3360      	adds	r3, #96	; 0x60
 8004892:	461a      	mov	r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3360      	adds	r3, #96	; 0x60
 80048c0:	461a      	mov	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3330      	adds	r3, #48	; 0x30
 800491c:	461a      	mov	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	4413      	add	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	211f      	movs	r1, #31
 8004938:	fa01 f303 	lsl.w	r3, r1, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	401a      	ands	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	0e9b      	lsrs	r3, r3, #26
 8004944:	f003 011f 	and.w	r1, r3, #31
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	431a      	orrs	r2, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004970:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800498a:	b480      	push	{r7}
 800498c:	b087      	sub	sp, #28
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3314      	adds	r3, #20
 800499a:	461a      	mov	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	0e5b      	lsrs	r3, r3, #25
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	4413      	add	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	0d1b      	lsrs	r3, r3, #20
 80049b2:	f003 031f 	and.w	r3, r3, #31
 80049b6:	2107      	movs	r1, #7
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	401a      	ands	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	0d1b      	lsrs	r3, r3, #20
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	fa01 f303 	lsl.w	r3, r1, r3
 80049ce:	431a      	orrs	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f8:	43db      	mvns	r3, r3
 80049fa:	401a      	ands	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f003 0318 	and.w	r3, r3, #24
 8004a02:	4908      	ldr	r1, [pc, #32]	; (8004a24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a04:	40d9      	lsrs	r1, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	400b      	ands	r3, r1
 8004a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	0007ffff 	.word	0x0007ffff

08004a28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004a38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6093      	str	r3, [r2, #8]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a60:	d101      	bne.n	8004a66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004a84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab0:	d101      	bne.n	8004ab6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ad4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ad8:	f043 0201 	orr.w	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <LL_ADC_IsEnabled+0x18>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <LL_ADC_IsEnabled+0x1a>
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b26:	f043 0204 	orr.w	r2, r3, #4
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d101      	bne.n	8004b52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d101      	bne.n	8004b78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e126      	b.n	8004df0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff f9cf 	bl	8003f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff3f 	bl	8004a4c <LL_ADC_IsDeepPowerDownEnabled>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ff25 	bl	8004a28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff ff5a 	bl	8004a9c <LL_ADC_IsInternalRegulatorEnabled>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d115      	bne.n	8004c1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ff3e 	bl	8004a74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bf8:	4b7f      	ldr	r3, [pc, #508]	; (8004df8 <HAL_ADC_Init+0x270>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	099b      	lsrs	r3, r3, #6
 8004bfe:	4a7f      	ldr	r2, [pc, #508]	; (8004dfc <HAL_ADC_Init+0x274>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	099b      	lsrs	r3, r3, #6
 8004c06:	3301      	adds	r3, #1
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c0c:	e002      	b.n	8004c14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f9      	bne.n	8004c0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff ff3c 	bl	8004a9c <LL_ADC_IsInternalRegulatorEnabled>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10d      	bne.n	8004c46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	f043 0210 	orr.w	r2, r3, #16
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	f043 0201 	orr.w	r2, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ff75 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 8004c50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 80bf 	bne.w	8004dde <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f040 80bb 	bne.w	8004dde <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004c70:	f043 0202 	orr.w	r2, r3, #2
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ff35 	bl	8004aec <LL_ADC_IsEnabled>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10b      	bne.n	8004ca0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c88:	485d      	ldr	r0, [pc, #372]	; (8004e00 <HAL_ADC_Init+0x278>)
 8004c8a:	f7ff ff2f 	bl	8004aec <LL_ADC_IsEnabled>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	485a      	ldr	r0, [pc, #360]	; (8004e04 <HAL_ADC_Init+0x27c>)
 8004c9c:	f7ff fd9a 	bl	80047d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7e5b      	ldrb	r3, [r3, #25]
 8004ca4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004caa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004cb0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004cb6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cbe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d106      	bne.n	8004cdc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	045b      	lsls	r3, r3, #17
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	4b42      	ldr	r3, [pc, #264]	; (8004e08 <HAL_ADC_Init+0x280>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	69b9      	ldr	r1, [r7, #24]
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff25 	bl	8004b60 <LL_ADC_INJ_IsConversionOngoing>
 8004d16:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d13d      	bne.n	8004d9a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d13a      	bne.n	8004d9a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d28:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d30:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d40:	f023 0302 	bic.w	r3, r3, #2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	69b9      	ldr	r1, [r7, #24]
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d118      	bne.n	8004d8a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d62:	f023 0304 	bic.w	r3, r3, #4
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d6e:	4311      	orrs	r1, r2
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d74:	4311      	orrs	r1, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	611a      	str	r2, [r3, #16]
 8004d88:	e007      	b.n	8004d9a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d10c      	bne.n	8004dbc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	f023 010f 	bic.w	r1, r3, #15
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	1e5a      	subs	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
 8004dba:	e007      	b.n	8004dcc <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 020f 	bic.w	r2, r2, #15
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd0:	f023 0303 	bic.w	r3, r3, #3
 8004dd4:	f043 0201 	orr.w	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
 8004ddc:	e007      	b.n	8004dee <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f043 0210 	orr.w	r2, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000020 	.word	0x20000020
 8004dfc:	053e2d63 	.word	0x053e2d63
 8004e00:	50040000 	.word	0x50040000
 8004e04:	50040300 	.word	0x50040300
 8004e08:	fff0c007 	.word	0xfff0c007

08004e0c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff fe8c 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d167      	bne.n	8004ef8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_ADC_Start_DMA+0x2a>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e063      	b.n	8004efe <HAL_ADC_Start_DMA+0xf2>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fe1c 	bl	8005a7c <ADC_Enable>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d14f      	bne.n	8004eee <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d006      	beq.n	8004e7c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	f023 0206 	bic.w	r2, r3, #6
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	659a      	str	r2, [r3, #88]	; 0x58
 8004e7a:	e002      	b.n	8004e82 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e86:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <HAL_ADC_Start_DMA+0xfc>)
 8004e88:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <HAL_ADC_Start_DMA+0x100>)
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e96:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <HAL_ADC_Start_DMA+0x104>)
 8004e98:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	221c      	movs	r2, #28
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0210 	orr.w	r2, r2, #16
 8004eb8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3340      	adds	r3, #64	; 0x40
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f001 f8e5 	bl	80060a8 <HAL_DMA_Start_IT>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fe13 	bl	8004b12 <LL_ADC_REG_StartConversion>
 8004eec:	e006      	b.n	8004efc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004ef6:	e001      	b.n	8004efc <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	08005b89 	.word	0x08005b89
 8004f0c:	08005c61 	.word	0x08005c61
 8004f10:	08005c7d 	.word	0x08005c7d

08004f14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d017      	beq.n	8004f6a <HAL_ADC_IRQHandler+0x56>
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d012      	beq.n	8004f6a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d105      	bne.n	8004f5c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f54:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fecf 	bl	8005d00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2202      	movs	r2, #2
 8004f68:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <HAL_ADC_IRQHandler+0x6a>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d05e      	beq.n	8005046 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d059      	beq.n	8005046 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d105      	bne.n	8004faa <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fc99 	bl	80048e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d03e      	beq.n	8005038 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d135      	bne.n	8005038 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d12e      	bne.n	8005038 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fdab 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d11a      	bne.n	8005020 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 020c 	bic.w	r2, r2, #12
 8004ff8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d112      	bne.n	8005038 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
 800501e:	e00b      	b.n	8005038 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005024:	f043 0210 	orr.w	r2, r3, #16
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f043 0201 	orr.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fc f8d9 	bl	80011f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	220c      	movs	r2, #12
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <HAL_ADC_IRQHandler+0x146>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005060:	2b00      	cmp	r3, #0
 8005062:	d072      	beq.n	800514a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d06d      	beq.n	800514a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	2b00      	cmp	r3, #0
 8005078:	d105      	bne.n	8005086 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fc6a 	bl	8004964 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005090:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fc25 	bl	80048e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800509c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d047      	beq.n	800513c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <HAL_ADC_IRQHandler+0x1b2>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d03f      	beq.n	800513c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d13a      	bne.n	800513c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d133      	bne.n	800513c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d12e      	bne.n	800513c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fd3c 	bl	8004b60 <LL_ADC_INJ_IsConversionOngoing>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d11a      	bne.n	8005124 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050fc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d112      	bne.n	800513c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	f043 0201 	orr.w	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
 8005122:	e00b      	b.n	800513c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	f043 0210 	orr.w	r2, r3, #16
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	f043 0201 	orr.w	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fdb7 	bl	8005cb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2260      	movs	r2, #96	; 0x60
 8005148:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d011      	beq.n	8005178 <HAL_ADC_IRQHandler+0x264>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f890 	bl	8005290 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d012      	beq.n	80051a8 <HAL_ADC_IRQHandler+0x294>
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00d      	beq.n	80051a8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005190:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fd9d 	bl	8005cd8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <HAL_ADC_IRQHandler+0x2c4>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00d      	beq.n	80051d8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fd8f 	bl	8005cec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d02a      	beq.n	8005238 <HAL_ADC_IRQHandler+0x324>
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d025      	beq.n	8005238 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80051f4:	2301      	movs	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	e008      	b.n	800520c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8005208:	2301      	movs	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d10e      	bne.n	8005230 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005216:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	f043 0202 	orr.w	r2, r3, #2
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f83a 	bl	80052a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2210      	movs	r2, #16
 8005236:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <HAL_ADC_IRQHandler+0x360>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005248:	2b00      	cmp	r3, #0
 800524a:	d013      	beq.n	8005274 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	f043 0208 	orr.w	r2, r3, #8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800526c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fd28 	bl	8005cc4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005274:	bf00      	nop
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b0b6      	sub	sp, #216	; 0xd8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_ADC_ConfigChannel+0x22>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e3bb      	b.n	8005a52 <HAL_ADC_ConfigChannel+0x79a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fc27 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f040 83a0 	bne.w	8005a34 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b05      	cmp	r3, #5
 8005302:	d824      	bhi.n	800534e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	3b02      	subs	r3, #2
 800530a:	2b03      	cmp	r3, #3
 800530c:	d81b      	bhi.n	8005346 <HAL_ADC_ConfigChannel+0x8e>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <HAL_ADC_ConfigChannel+0x5c>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	08005325 	.word	0x08005325
 8005318:	0800532d 	.word	0x0800532d
 800531c:	08005335 	.word	0x08005335
 8005320:	0800533d 	.word	0x0800533d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005324:	230c      	movs	r3, #12
 8005326:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800532a:	e010      	b.n	800534e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800532c:	2312      	movs	r3, #18
 800532e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005332:	e00c      	b.n	800534e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005334:	2318      	movs	r3, #24
 8005336:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800533a:	e008      	b.n	800534e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800533c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005344:	e003      	b.n	800534e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005346:	2306      	movs	r3, #6
 8005348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800534c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800535c:	f7ff fad6 	bl	800490c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fbe8 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 800536a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fbf4 	bl	8004b60 <LL_ADC_INJ_IsConversionOngoing>
 8005378:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800537c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005380:	2b00      	cmp	r3, #0
 8005382:	f040 81a4 	bne.w	80056ce <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800538a:	2b00      	cmp	r3, #0
 800538c:	f040 819f 	bne.w	80056ce <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	6819      	ldr	r1, [r3, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	461a      	mov	r2, r3
 800539e:	f7ff faf4 	bl	800498a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	08db      	lsrs	r3, r3, #3
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d00a      	beq.n	80053da <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	6919      	ldr	r1, [r3, #16]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053d4:	f7ff fa32 	bl	800483c <LL_ADC_SetOffset>
 80053d8:	e179      	b.n	80056ce <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff fa4f 	bl	8004884 <LL_ADC_GetOffsetChannel>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <HAL_ADC_ConfigChannel+0x14e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff fa44 	bl	8004884 <LL_ADC_GetOffsetChannel>
 80053fc:	4603      	mov	r3, r0
 80053fe:	0e9b      	lsrs	r3, r3, #26
 8005400:	f003 021f 	and.w	r2, r3, #31
 8005404:	e01e      	b.n	8005444 <HAL_ADC_ConfigChannel+0x18c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fa39 	bl	8004884 <LL_ADC_GetOffsetChannel>
 8005412:	4603      	mov	r3, r0
 8005414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800541c:	fa93 f3a3 	rbit	r3, r3
 8005420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005424:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005428:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800542c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8005434:	2320      	movs	r3, #32
 8005436:	e004      	b.n	8005442 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8005438:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800543c:	fab3 f383 	clz	r3, r3
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <HAL_ADC_ConfigChannel+0x1a4>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	0e9b      	lsrs	r3, r3, #26
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	e018      	b.n	800548e <HAL_ADC_ConfigChannel+0x1d6>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005468:	fa93 f3a3 	rbit	r3, r3
 800546c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005478:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005480:	2320      	movs	r3, #32
 8005482:	e004      	b.n	800548e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8005484:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005488:	fab3 f383 	clz	r3, r3
 800548c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800548e:	429a      	cmp	r2, r3
 8005490:	d106      	bne.n	80054a0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2200      	movs	r2, #0
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fa08 	bl	80048b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2101      	movs	r1, #1
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff f9ec 	bl	8004884 <LL_ADC_GetOffsetChannel>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x214>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2101      	movs	r1, #1
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff f9e1 	bl	8004884 <LL_ADC_GetOffsetChannel>
 80054c2:	4603      	mov	r3, r0
 80054c4:	0e9b      	lsrs	r3, r3, #26
 80054c6:	f003 021f 	and.w	r2, r3, #31
 80054ca:	e01e      	b.n	800550a <HAL_ADC_ConfigChannel+0x252>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2101      	movs	r1, #1
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff f9d6 	bl	8004884 <LL_ADC_GetOffsetChannel>
 80054d8:	4603      	mov	r3, r0
 80054da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054e2:	fa93 f3a3 	rbit	r3, r3
 80054e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80054ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80054f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80054fa:	2320      	movs	r3, #32
 80054fc:	e004      	b.n	8005508 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80054fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005502:	fab3 f383 	clz	r3, r3
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005512:	2b00      	cmp	r3, #0
 8005514:	d105      	bne.n	8005522 <HAL_ADC_ConfigChannel+0x26a>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	0e9b      	lsrs	r3, r3, #26
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	e018      	b.n	8005554 <HAL_ADC_ConfigChannel+0x29c>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800552e:	fa93 f3a3 	rbit	r3, r3
 8005532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005536:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800553a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800553e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8005546:	2320      	movs	r3, #32
 8005548:	e004      	b.n	8005554 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800554a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800554e:	fab3 f383 	clz	r3, r3
 8005552:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005554:	429a      	cmp	r2, r3
 8005556:	d106      	bne.n	8005566 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2200      	movs	r2, #0
 800555e:	2101      	movs	r1, #1
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff f9a5 	bl	80048b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2102      	movs	r1, #2
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff f989 	bl	8004884 <LL_ADC_GetOffsetChannel>
 8005572:	4603      	mov	r3, r0
 8005574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <HAL_ADC_ConfigChannel+0x2da>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2102      	movs	r1, #2
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff f97e 	bl	8004884 <LL_ADC_GetOffsetChannel>
 8005588:	4603      	mov	r3, r0
 800558a:	0e9b      	lsrs	r3, r3, #26
 800558c:	f003 021f 	and.w	r2, r3, #31
 8005590:	e01e      	b.n	80055d0 <HAL_ADC_ConfigChannel+0x318>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2102      	movs	r1, #2
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff f973 	bl	8004884 <LL_ADC_GetOffsetChannel>
 800559e:	4603      	mov	r3, r0
 80055a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055a8:	fa93 f3a3 	rbit	r3, r3
 80055ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80055b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80055b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80055c0:	2320      	movs	r3, #32
 80055c2:	e004      	b.n	80055ce <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80055c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055c8:	fab3 f383 	clz	r3, r3
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x330>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	0e9b      	lsrs	r3, r3, #26
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	e014      	b.n	8005612 <HAL_ADC_ConfigChannel+0x35a>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055f0:	fa93 f3a3 	rbit	r3, r3
 80055f4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80055f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80055fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8005604:	2320      	movs	r3, #32
 8005606:	e004      	b.n	8005612 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800560c:	fab3 f383 	clz	r3, r3
 8005610:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005612:	429a      	cmp	r2, r3
 8005614:	d106      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	2102      	movs	r1, #2
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff f946 	bl	80048b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2103      	movs	r1, #3
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff f92a 	bl	8004884 <LL_ADC_GetOffsetChannel>
 8005630:	4603      	mov	r3, r0
 8005632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x398>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2103      	movs	r1, #3
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff f91f 	bl	8004884 <LL_ADC_GetOffsetChannel>
 8005646:	4603      	mov	r3, r0
 8005648:	0e9b      	lsrs	r3, r3, #26
 800564a:	f003 021f 	and.w	r2, r3, #31
 800564e:	e017      	b.n	8005680 <HAL_ADC_ConfigChannel+0x3c8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2103      	movs	r1, #3
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff f914 	bl	8004884 <LL_ADC_GetOffsetChannel>
 800565c:	4603      	mov	r3, r0
 800565e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005662:	fa93 f3a3 	rbit	r3, r3
 8005666:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800566c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8005672:	2320      	movs	r3, #32
 8005674:	e003      	b.n	800567e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8005676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005678:	fab3 f383 	clz	r3, r3
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x3e0>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	0e9b      	lsrs	r3, r3, #26
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	e011      	b.n	80056bc <HAL_ADC_ConfigChannel+0x404>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056a0:	fa93 f3a3 	rbit	r3, r3
 80056a4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80056a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80056aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80056b0:	2320      	movs	r3, #32
 80056b2:	e003      	b.n	80056bc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80056b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056bc:	429a      	cmp	r2, r3
 80056be:	d106      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2200      	movs	r2, #0
 80056c6:	2103      	movs	r1, #3
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff f8f1 	bl	80048b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fa0a 	bl	8004aec <LL_ADC_IsEnabled>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 8140 	bne.w	8005960 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	6819      	ldr	r1, [r3, #0]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	461a      	mov	r2, r3
 80056ee:	f7ff f977 	bl	80049e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	4a8f      	ldr	r2, [pc, #572]	; (8005934 <HAL_ADC_ConfigChannel+0x67c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	f040 8131 	bne.w	8005960 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <HAL_ADC_ConfigChannel+0x46e>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	0e9b      	lsrs	r3, r3, #26
 8005714:	3301      	adds	r3, #1
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2b09      	cmp	r3, #9
 800571c:	bf94      	ite	ls
 800571e:	2301      	movls	r3, #1
 8005720:	2300      	movhi	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e019      	b.n	800575a <HAL_ADC_ConfigChannel+0x4a2>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800572e:	fa93 f3a3 	rbit	r3, r3
 8005732:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005736:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800573e:	2320      	movs	r3, #32
 8005740:	e003      	b.n	800574a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005744:	fab3 f383 	clz	r3, r3
 8005748:	b2db      	uxtb	r3, r3
 800574a:	3301      	adds	r3, #1
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2b09      	cmp	r3, #9
 8005752:	bf94      	ite	ls
 8005754:	2301      	movls	r3, #1
 8005756:	2300      	movhi	r3, #0
 8005758:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800575a:	2b00      	cmp	r3, #0
 800575c:	d079      	beq.n	8005852 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005766:	2b00      	cmp	r3, #0
 8005768:	d107      	bne.n	800577a <HAL_ADC_ConfigChannel+0x4c2>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	0e9b      	lsrs	r3, r3, #26
 8005770:	3301      	adds	r3, #1
 8005772:	069b      	lsls	r3, r3, #26
 8005774:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005778:	e015      	b.n	80057a6 <HAL_ADC_ConfigChannel+0x4ee>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005782:	fa93 f3a3 	rbit	r3, r3
 8005786:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800578c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005792:	2320      	movs	r3, #32
 8005794:	e003      	b.n	800579e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8005796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005798:	fab3 f383 	clz	r3, r3
 800579c:	b2db      	uxtb	r3, r3
 800579e:	3301      	adds	r3, #1
 80057a0:	069b      	lsls	r3, r3, #26
 80057a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x50e>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	0e9b      	lsrs	r3, r3, #26
 80057b8:	3301      	adds	r3, #1
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2101      	movs	r1, #1
 80057c0:	fa01 f303 	lsl.w	r3, r1, r3
 80057c4:	e017      	b.n	80057f6 <HAL_ADC_ConfigChannel+0x53e>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ce:	fa93 f3a3 	rbit	r3, r3
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80057d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80057d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80057de:	2320      	movs	r3, #32
 80057e0:	e003      	b.n	80057ea <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80057e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e4:	fab3 f383 	clz	r3, r3
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	3301      	adds	r3, #1
 80057ec:	f003 031f 	and.w	r3, r3, #31
 80057f0:	2101      	movs	r1, #1
 80057f2:	fa01 f303 	lsl.w	r3, r1, r3
 80057f6:	ea42 0103 	orr.w	r1, r2, r3
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <HAL_ADC_ConfigChannel+0x564>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	0e9b      	lsrs	r3, r3, #26
 800580c:	3301      	adds	r3, #1
 800580e:	f003 021f 	and.w	r2, r3, #31
 8005812:	4613      	mov	r3, r2
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	4413      	add	r3, r2
 8005818:	051b      	lsls	r3, r3, #20
 800581a:	e018      	b.n	800584e <HAL_ADC_ConfigChannel+0x596>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005824:	fa93 f3a3 	rbit	r3, r3
 8005828:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800582e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005834:	2320      	movs	r3, #32
 8005836:	e003      	b.n	8005840 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	fab3 f383 	clz	r3, r3
 800583e:	b2db      	uxtb	r3, r3
 8005840:	3301      	adds	r3, #1
 8005842:	f003 021f 	and.w	r2, r3, #31
 8005846:	4613      	mov	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4413      	add	r3, r2
 800584c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800584e:	430b      	orrs	r3, r1
 8005850:	e081      	b.n	8005956 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585a:	2b00      	cmp	r3, #0
 800585c:	d107      	bne.n	800586e <HAL_ADC_ConfigChannel+0x5b6>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	0e9b      	lsrs	r3, r3, #26
 8005864:	3301      	adds	r3, #1
 8005866:	069b      	lsls	r3, r3, #26
 8005868:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800586c:	e015      	b.n	800589a <HAL_ADC_ConfigChannel+0x5e2>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	fa93 f3a3 	rbit	r3, r3
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8005886:	2320      	movs	r3, #32
 8005888:	e003      	b.n	8005892 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	fab3 f383 	clz	r3, r3
 8005890:	b2db      	uxtb	r3, r3
 8005892:	3301      	adds	r3, #1
 8005894:	069b      	lsls	r3, r3, #26
 8005896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x602>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	0e9b      	lsrs	r3, r3, #26
 80058ac:	3301      	adds	r3, #1
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2101      	movs	r1, #1
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	e017      	b.n	80058ea <HAL_ADC_ConfigChannel+0x632>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	fa93 f3a3 	rbit	r3, r3
 80058c6:	61bb      	str	r3, [r7, #24]
  return result;
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80058d2:	2320      	movs	r3, #32
 80058d4:	e003      	b.n	80058de <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	fab3 f383 	clz	r3, r3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	3301      	adds	r3, #1
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	2101      	movs	r1, #1
 80058e6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ea:	ea42 0103 	orr.w	r1, r2, r3
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10d      	bne.n	8005916 <HAL_ADC_ConfigChannel+0x65e>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	0e9b      	lsrs	r3, r3, #26
 8005900:	3301      	adds	r3, #1
 8005902:	f003 021f 	and.w	r2, r3, #31
 8005906:	4613      	mov	r3, r2
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	4413      	add	r3, r2
 800590c:	3b1e      	subs	r3, #30
 800590e:	051b      	lsls	r3, r3, #20
 8005910:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005914:	e01e      	b.n	8005954 <HAL_ADC_ConfigChannel+0x69c>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	fa93 f3a3 	rbit	r3, r3
 8005922:	60fb      	str	r3, [r7, #12]
  return result;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800592e:	2320      	movs	r3, #32
 8005930:	e006      	b.n	8005940 <HAL_ADC_ConfigChannel+0x688>
 8005932:	bf00      	nop
 8005934:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	fab3 f383 	clz	r3, r3
 800593e:	b2db      	uxtb	r3, r3
 8005940:	3301      	adds	r3, #1
 8005942:	f003 021f 	and.w	r2, r3, #31
 8005946:	4613      	mov	r3, r2
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	4413      	add	r3, r2
 800594c:	3b1e      	subs	r3, #30
 800594e:	051b      	lsls	r3, r3, #20
 8005950:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005954:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800595a:	4619      	mov	r1, r3
 800595c:	f7ff f815 	bl	800498a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	4b3d      	ldr	r3, [pc, #244]	; (8005a5c <HAL_ADC_ConfigChannel+0x7a4>)
 8005966:	4013      	ands	r3, r2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d06c      	beq.n	8005a46 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800596c:	483c      	ldr	r0, [pc, #240]	; (8005a60 <HAL_ADC_ConfigChannel+0x7a8>)
 800596e:	f7fe ff57 	bl	8004820 <LL_ADC_GetCommonPathInternalCh>
 8005972:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a3a      	ldr	r2, [pc, #232]	; (8005a64 <HAL_ADC_ConfigChannel+0x7ac>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d127      	bne.n	80059d0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d121      	bne.n	80059d0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a35      	ldr	r2, [pc, #212]	; (8005a68 <HAL_ADC_ConfigChannel+0x7b0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d157      	bne.n	8005a46 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800599a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800599e:	4619      	mov	r1, r3
 80059a0:	482f      	ldr	r0, [pc, #188]	; (8005a60 <HAL_ADC_ConfigChannel+0x7a8>)
 80059a2:	f7fe ff2a 	bl	80047fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059a6:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <HAL_ADC_ConfigChannel+0x7b4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	099b      	lsrs	r3, r3, #6
 80059ac:	4a30      	ldr	r2, [pc, #192]	; (8005a70 <HAL_ADC_ConfigChannel+0x7b8>)
 80059ae:	fba2 2303 	umull	r2, r3, r2, r3
 80059b2:	099b      	lsrs	r3, r3, #6
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	4613      	mov	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80059c0:	e002      	b.n	80059c8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f9      	bne.n	80059c2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059ce:	e03a      	b.n	8005a46 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a27      	ldr	r2, [pc, #156]	; (8005a74 <HAL_ADC_ConfigChannel+0x7bc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d113      	bne.n	8005a02 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80059da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10d      	bne.n	8005a02 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1f      	ldr	r2, [pc, #124]	; (8005a68 <HAL_ADC_ConfigChannel+0x7b0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d12a      	bne.n	8005a46 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f8:	4619      	mov	r1, r3
 80059fa:	4819      	ldr	r0, [pc, #100]	; (8005a60 <HAL_ADC_ConfigChannel+0x7a8>)
 80059fc:	f7fe fefd 	bl	80047fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a00:	e021      	b.n	8005a46 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1c      	ldr	r2, [pc, #112]	; (8005a78 <HAL_ADC_ConfigChannel+0x7c0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d11c      	bne.n	8005a46 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d116      	bne.n	8005a46 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a12      	ldr	r2, [pc, #72]	; (8005a68 <HAL_ADC_ConfigChannel+0x7b0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d111      	bne.n	8005a46 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	480c      	ldr	r0, [pc, #48]	; (8005a60 <HAL_ADC_ConfigChannel+0x7a8>)
 8005a2e:	f7fe fee4 	bl	80047fa <LL_ADC_SetCommonPathInternalCh>
 8005a32:	e008      	b.n	8005a46 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a38:	f043 0220 	orr.w	r2, r3, #32
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005a4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	37d8      	adds	r7, #216	; 0xd8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	80080000 	.word	0x80080000
 8005a60:	50040300 	.word	0x50040300
 8005a64:	c7520000 	.word	0xc7520000
 8005a68:	50040000 	.word	0x50040000
 8005a6c:	20000020 	.word	0x20000020
 8005a70:	053e2d63 	.word	0x053e2d63
 8005a74:	cb840000 	.word	0xcb840000
 8005a78:	80000001 	.word	0x80000001

08005a7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff f82d 	bl	8004aec <LL_ADC_IsEnabled>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d169      	bne.n	8005b6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <ADC_Enable+0xfc>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00d      	beq.n	8005ac2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	f043 0210 	orr.w	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	f043 0201 	orr.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e055      	b.n	8005b6e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe fffc 	bl	8004ac4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005acc:	482b      	ldr	r0, [pc, #172]	; (8005b7c <ADC_Enable+0x100>)
 8005ace:	f7fe fea7 	bl	8004820 <LL_ADC_GetCommonPathInternalCh>
 8005ad2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d013      	beq.n	8005b04 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005adc:	4b28      	ldr	r3, [pc, #160]	; (8005b80 <ADC_Enable+0x104>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	099b      	lsrs	r3, r3, #6
 8005ae2:	4a28      	ldr	r2, [pc, #160]	; (8005b84 <ADC_Enable+0x108>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	099b      	lsrs	r3, r3, #6
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	4613      	mov	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005af6:	e002      	b.n	8005afe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f9      	bne.n	8005af8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b04:	f7fe fe36 	bl	8004774 <HAL_GetTick>
 8005b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b0a:	e028      	b.n	8005b5e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe ffeb 	bl	8004aec <LL_ADC_IsEnabled>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe ffcf 	bl	8004ac4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b26:	f7fe fe25 	bl	8004774 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d914      	bls.n	8005b5e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d00d      	beq.n	8005b5e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b46:	f043 0210 	orr.w	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b52:	f043 0201 	orr.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e007      	b.n	8005b6e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d1cf      	bne.n	8005b0c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	8000003f 	.word	0x8000003f
 8005b7c:	50040300 	.word	0x50040300
 8005b80:	20000020 	.word	0x20000020
 8005b84:	053e2d63 	.word	0x053e2d63

08005b88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d14b      	bne.n	8005c3a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d021      	beq.n	8005c00 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe fe90 	bl	80048e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d032      	beq.n	8005c32 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d12b      	bne.n	8005c32 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d11f      	bne.n	8005c32 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	f043 0201 	orr.w	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	655a      	str	r2, [r3, #84]	; 0x54
 8005bfe:	e018      	b.n	8005c32 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d111      	bne.n	8005c32 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d105      	bne.n	8005c32 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	f043 0201 	orr.w	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7fb fadc 	bl	80011f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c38:	e00e      	b.n	8005c58 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7ff fb2c 	bl	80052a4 <HAL_ADC_ErrorCallback>
}
 8005c4c:	e004      	b.n	8005c58 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4798      	blx	r3
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff fb04 	bl	800527c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9a:	f043 0204 	orr.w	r2, r3, #4
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7ff fafe 	bl	80052a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d24:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <__NVIC_SetPriorityGrouping+0x44>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d30:	4013      	ands	r3, r2
 8005d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d46:	4a04      	ldr	r2, [pc, #16]	; (8005d58 <__NVIC_SetPriorityGrouping+0x44>)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	60d3      	str	r3, [r2, #12]
}
 8005d4c:	bf00      	nop
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	e000ed00 	.word	0xe000ed00

08005d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <__NVIC_GetPriorityGrouping+0x18>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	0a1b      	lsrs	r3, r3, #8
 8005d66:	f003 0307 	and.w	r3, r3, #7
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	e000ed00 	.word	0xe000ed00

08005d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	db0b      	blt.n	8005da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	f003 021f 	and.w	r2, r3, #31
 8005d90:	4907      	ldr	r1, [pc, #28]	; (8005db0 <__NVIC_EnableIRQ+0x38>)
 8005d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	2001      	movs	r0, #1
 8005d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	e000e100 	.word	0xe000e100

08005db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	6039      	str	r1, [r7, #0]
 8005dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	db0a      	blt.n	8005dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	490c      	ldr	r1, [pc, #48]	; (8005e00 <__NVIC_SetPriority+0x4c>)
 8005dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd2:	0112      	lsls	r2, r2, #4
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ddc:	e00a      	b.n	8005df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	4908      	ldr	r1, [pc, #32]	; (8005e04 <__NVIC_SetPriority+0x50>)
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	3b04      	subs	r3, #4
 8005dec:	0112      	lsls	r2, r2, #4
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	440b      	add	r3, r1
 8005df2:	761a      	strb	r2, [r3, #24]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	e000e100 	.word	0xe000e100
 8005e04:	e000ed00 	.word	0xe000ed00

08005e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b089      	sub	sp, #36	; 0x24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f1c3 0307 	rsb	r3, r3, #7
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	bf28      	it	cs
 8005e26:	2304      	movcs	r3, #4
 8005e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	2b06      	cmp	r3, #6
 8005e30:	d902      	bls.n	8005e38 <NVIC_EncodePriority+0x30>
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	3b03      	subs	r3, #3
 8005e36:	e000      	b.n	8005e3a <NVIC_EncodePriority+0x32>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43da      	mvns	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	401a      	ands	r2, r3
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e50:	f04f 31ff 	mov.w	r1, #4294967295
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5a:	43d9      	mvns	r1, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e60:	4313      	orrs	r3, r2
         );
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3724      	adds	r7, #36	; 0x24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e80:	d301      	bcc.n	8005e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e82:	2301      	movs	r3, #1
 8005e84:	e00f      	b.n	8005ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e86:	4a0a      	ldr	r2, [pc, #40]	; (8005eb0 <SysTick_Config+0x40>)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e8e:	210f      	movs	r1, #15
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	f7ff ff8e 	bl	8005db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <SysTick_Config+0x40>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e9e:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <SysTick_Config+0x40>)
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	e000e010 	.word	0xe000e010

08005eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ff29 	bl	8005d14 <__NVIC_SetPriorityGrouping>
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b086      	sub	sp, #24
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005edc:	f7ff ff3e 	bl	8005d5c <__NVIC_GetPriorityGrouping>
 8005ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	6978      	ldr	r0, [r7, #20]
 8005ee8:	f7ff ff8e 	bl	8005e08 <NVIC_EncodePriority>
 8005eec:	4602      	mov	r2, r0
 8005eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff ff5d 	bl	8005db4 <__NVIC_SetPriority>
}
 8005efa:	bf00      	nop
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	4603      	mov	r3, r0
 8005f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff ff31 	bl	8005d78 <__NVIC_EnableIRQ>
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ffa2 	bl	8005e70 <SysTick_Config>
 8005f2c:	4603      	mov	r3, r0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e098      	b.n	800607c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b4d      	ldr	r3, [pc, #308]	; (8006088 <HAL_DMA_Init+0x150>)
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d80f      	bhi.n	8005f76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	4b4b      	ldr	r3, [pc, #300]	; (800608c <HAL_DMA_Init+0x154>)
 8005f5e:	4413      	add	r3, r2
 8005f60:	4a4b      	ldr	r2, [pc, #300]	; (8006090 <HAL_DMA_Init+0x158>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	091b      	lsrs	r3, r3, #4
 8005f68:	009a      	lsls	r2, r3, #2
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a48      	ldr	r2, [pc, #288]	; (8006094 <HAL_DMA_Init+0x15c>)
 8005f72:	641a      	str	r2, [r3, #64]	; 0x40
 8005f74:	e00e      	b.n	8005f94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4b46      	ldr	r3, [pc, #280]	; (8006098 <HAL_DMA_Init+0x160>)
 8005f7e:	4413      	add	r3, r2
 8005f80:	4a43      	ldr	r2, [pc, #268]	; (8006090 <HAL_DMA_Init+0x158>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	091b      	lsrs	r3, r3, #4
 8005f88:	009a      	lsls	r2, r3, #2
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a42      	ldr	r2, [pc, #264]	; (800609c <HAL_DMA_Init+0x164>)
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fee:	d039      	beq.n	8006064 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	4a27      	ldr	r2, [pc, #156]	; (8006094 <HAL_DMA_Init+0x15c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d11a      	bne.n	8006030 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ffa:	4b29      	ldr	r3, [pc, #164]	; (80060a0 <HAL_DMA_Init+0x168>)
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	f003 031c 	and.w	r3, r3, #28
 8006006:	210f      	movs	r1, #15
 8006008:	fa01 f303 	lsl.w	r3, r1, r3
 800600c:	43db      	mvns	r3, r3
 800600e:	4924      	ldr	r1, [pc, #144]	; (80060a0 <HAL_DMA_Init+0x168>)
 8006010:	4013      	ands	r3, r2
 8006012:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006014:	4b22      	ldr	r3, [pc, #136]	; (80060a0 <HAL_DMA_Init+0x168>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6859      	ldr	r1, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006020:	f003 031c 	and.w	r3, r3, #28
 8006024:	fa01 f303 	lsl.w	r3, r1, r3
 8006028:	491d      	ldr	r1, [pc, #116]	; (80060a0 <HAL_DMA_Init+0x168>)
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]
 800602e:	e019      	b.n	8006064 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006030:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <HAL_DMA_Init+0x16c>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006038:	f003 031c 	and.w	r3, r3, #28
 800603c:	210f      	movs	r1, #15
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	43db      	mvns	r3, r3
 8006044:	4917      	ldr	r1, [pc, #92]	; (80060a4 <HAL_DMA_Init+0x16c>)
 8006046:	4013      	ands	r3, r2
 8006048:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800604a:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <HAL_DMA_Init+0x16c>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6859      	ldr	r1, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006056:	f003 031c 	and.w	r3, r3, #28
 800605a:	fa01 f303 	lsl.w	r3, r1, r3
 800605e:	4911      	ldr	r1, [pc, #68]	; (80060a4 <HAL_DMA_Init+0x16c>)
 8006060:	4313      	orrs	r3, r2
 8006062:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40020407 	.word	0x40020407
 800608c:	bffdfff8 	.word	0xbffdfff8
 8006090:	cccccccd 	.word	0xcccccccd
 8006094:	40020000 	.word	0x40020000
 8006098:	bffdfbf8 	.word	0xbffdfbf8
 800609c:	40020400 	.word	0x40020400
 80060a0:	400200a8 	.word	0x400200a8
 80060a4:	400204a8 	.word	0x400204a8

080060a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_DMA_Start_IT+0x20>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e04b      	b.n	8006160 <HAL_DMA_Start_IT+0xb8>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d13a      	bne.n	8006152 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f96b 	bl	80063dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 020e 	orr.w	r2, r2, #14
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e00f      	b.n	8006140 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0204 	bic.w	r2, r2, #4
 800612e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 020a 	orr.w	r2, r2, #10
 800613e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	e005      	b.n	800615e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800615a:	2302      	movs	r3, #2
 800615c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800615e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d008      	beq.n	8006192 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2204      	movs	r2, #4
 8006184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e022      	b.n	80061d8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 020e 	bic.w	r2, r2, #14
 80061a0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0201 	bic.w	r2, r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b6:	f003 021c 	and.w	r2, r3, #28
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	2101      	movs	r1, #1
 80061c0:	fa01 f202 	lsl.w	r2, r1, r2
 80061c4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d005      	beq.n	8006208 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2204      	movs	r2, #4
 8006200:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	73fb      	strb	r3, [r7, #15]
 8006206:	e029      	b.n	800625c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 020e 	bic.w	r2, r2, #14
 8006216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622c:	f003 021c 	and.w	r2, r3, #28
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	2101      	movs	r1, #1
 8006236:	fa01 f202 	lsl.w	r2, r1, r2
 800623a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
    }
  }
  return status;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	f003 031c 	and.w	r3, r3, #28
 8006286:	2204      	movs	r2, #4
 8006288:	409a      	lsls	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4013      	ands	r3, r2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d026      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x7a>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b00      	cmp	r3, #0
 800629a:	d021      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d107      	bne.n	80062ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0204 	bic.w	r2, r2, #4
 80062b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	f003 021c 	and.w	r2, r3, #28
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	2104      	movs	r1, #4
 80062c8:	fa01 f202 	lsl.w	r2, r1, r2
 80062cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d071      	beq.n	80063ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80062de:	e06c      	b.n	80063ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e4:	f003 031c 	and.w	r3, r3, #28
 80062e8:	2202      	movs	r2, #2
 80062ea:	409a      	lsls	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d02e      	beq.n	8006352 <HAL_DMA_IRQHandler+0xec>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d029      	beq.n	8006352 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 020a 	bic.w	r2, r2, #10
 800631a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006328:	f003 021c 	and.w	r2, r3, #28
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	2102      	movs	r1, #2
 8006332:	fa01 f202 	lsl.w	r2, r1, r2
 8006336:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d038      	beq.n	80063ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006350:	e033      	b.n	80063ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006356:	f003 031c 	and.w	r3, r3, #28
 800635a:	2208      	movs	r2, #8
 800635c:	409a      	lsls	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4013      	ands	r3, r2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d02a      	beq.n	80063bc <HAL_DMA_IRQHandler+0x156>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b00      	cmp	r3, #0
 800636e:	d025      	beq.n	80063bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 020e 	bic.w	r2, r2, #14
 800637e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006384:	f003 021c 	and.w	r2, r3, #28
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	2101      	movs	r1, #1
 800638e:	fa01 f202 	lsl.w	r2, r1, r2
 8006392:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
}
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ee:	f003 021c 	and.w	r2, r3, #28
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	2101      	movs	r1, #1
 80063f8:	fa01 f202 	lsl.w	r2, r1, r2
 80063fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b10      	cmp	r3, #16
 800640c:	d108      	bne.n	8006420 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800641e:	e007      	b.n	8006430 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	60da      	str	r2, [r3, #12]
}
 8006430:	bf00      	nop
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800644a:	e148      	b.n	80066de <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	2101      	movs	r1, #1
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	fa01 f303 	lsl.w	r3, r1, r3
 8006458:	4013      	ands	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 813a 	beq.w	80066d8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f003 0303 	and.w	r3, r3, #3
 800646c:	2b01      	cmp	r3, #1
 800646e:	d005      	beq.n	800647c <HAL_GPIO_Init+0x40>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d130      	bne.n	80064de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	2203      	movs	r2, #3
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	43db      	mvns	r3, r3
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4013      	ands	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064b2:	2201      	movs	r2, #1
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	43db      	mvns	r3, r3
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4013      	ands	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	091b      	lsrs	r3, r3, #4
 80064c8:	f003 0201 	and.w	r2, r3, #1
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d017      	beq.n	800651a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	2203      	movs	r2, #3
 80064f6:	fa02 f303 	lsl.w	r3, r2, r3
 80064fa:	43db      	mvns	r3, r3
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4013      	ands	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d123      	bne.n	800656e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	08da      	lsrs	r2, r3, #3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3208      	adds	r2, #8
 800652e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	220f      	movs	r2, #15
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	43db      	mvns	r3, r3
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4013      	ands	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	691a      	ldr	r2, [r3, #16]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	08da      	lsrs	r2, r3, #3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3208      	adds	r2, #8
 8006568:	6939      	ldr	r1, [r7, #16]
 800656a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	2203      	movs	r2, #3
 800657a:	fa02 f303 	lsl.w	r3, r2, r3
 800657e:	43db      	mvns	r3, r3
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4013      	ands	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f003 0203 	and.w	r2, r3, #3
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8094 	beq.w	80066d8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065b0:	4b52      	ldr	r3, [pc, #328]	; (80066fc <HAL_GPIO_Init+0x2c0>)
 80065b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b4:	4a51      	ldr	r2, [pc, #324]	; (80066fc <HAL_GPIO_Init+0x2c0>)
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	6613      	str	r3, [r2, #96]	; 0x60
 80065bc:	4b4f      	ldr	r3, [pc, #316]	; (80066fc <HAL_GPIO_Init+0x2c0>)
 80065be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80065c8:	4a4d      	ldr	r2, [pc, #308]	; (8006700 <HAL_GPIO_Init+0x2c4>)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	089b      	lsrs	r3, r3, #2
 80065ce:	3302      	adds	r3, #2
 80065d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	220f      	movs	r2, #15
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	43db      	mvns	r3, r3
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4013      	ands	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80065f2:	d00d      	beq.n	8006610 <HAL_GPIO_Init+0x1d4>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a43      	ldr	r2, [pc, #268]	; (8006704 <HAL_GPIO_Init+0x2c8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <HAL_GPIO_Init+0x1d0>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a42      	ldr	r2, [pc, #264]	; (8006708 <HAL_GPIO_Init+0x2cc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d101      	bne.n	8006608 <HAL_GPIO_Init+0x1cc>
 8006604:	2302      	movs	r3, #2
 8006606:	e004      	b.n	8006612 <HAL_GPIO_Init+0x1d6>
 8006608:	2307      	movs	r3, #7
 800660a:	e002      	b.n	8006612 <HAL_GPIO_Init+0x1d6>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <HAL_GPIO_Init+0x1d6>
 8006610:	2300      	movs	r3, #0
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	f002 0203 	and.w	r2, r2, #3
 8006618:	0092      	lsls	r2, r2, #2
 800661a:	4093      	lsls	r3, r2
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006622:	4937      	ldr	r1, [pc, #220]	; (8006700 <HAL_GPIO_Init+0x2c4>)
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	089b      	lsrs	r3, r3, #2
 8006628:	3302      	adds	r3, #2
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006630:	4b36      	ldr	r3, [pc, #216]	; (800670c <HAL_GPIO_Init+0x2d0>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	43db      	mvns	r3, r3
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4013      	ands	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006654:	4a2d      	ldr	r2, [pc, #180]	; (800670c <HAL_GPIO_Init+0x2d0>)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800665a:	4b2c      	ldr	r3, [pc, #176]	; (800670c <HAL_GPIO_Init+0x2d0>)
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	43db      	mvns	r3, r3
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4013      	ands	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800667e:	4a23      	ldr	r2, [pc, #140]	; (800670c <HAL_GPIO_Init+0x2d0>)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006684:	4b21      	ldr	r3, [pc, #132]	; (800670c <HAL_GPIO_Init+0x2d0>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	43db      	mvns	r3, r3
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4013      	ands	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80066a8:	4a18      	ldr	r2, [pc, #96]	; (800670c <HAL_GPIO_Init+0x2d0>)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80066ae:	4b17      	ldr	r3, [pc, #92]	; (800670c <HAL_GPIO_Init+0x2d0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4013      	ands	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066d2:	4a0e      	ldr	r2, [pc, #56]	; (800670c <HAL_GPIO_Init+0x2d0>)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	3301      	adds	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	fa22 f303 	lsr.w	r3, r2, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f47f aeaf 	bne.w	800644c <HAL_GPIO_Init+0x10>
  }
}
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	40021000 	.word	0x40021000
 8006700:	40010000 	.word	0x40010000
 8006704:	48000400 	.word	0x48000400
 8006708:	48000800 	.word	0x48000800
 800670c:	40010400 	.word	0x40010400

08006710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	807b      	strh	r3, [r7, #2]
 800671c:	4613      	mov	r3, r2
 800671e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006720:	787b      	ldrb	r3, [r7, #1]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006726:	887a      	ldrh	r2, [r7, #2]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800672c:	e002      	b.n	8006734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800672e:	887a      	ldrh	r2, [r7, #2]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800674a:	4b08      	ldr	r3, [pc, #32]	; (800676c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800674c:	695a      	ldr	r2, [r3, #20]
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	4013      	ands	r3, r2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d006      	beq.n	8006764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006756:	4a05      	ldr	r2, [pc, #20]	; (800676c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	4618      	mov	r0, r3
 8006760:	f7fa fcb4 	bl	80010cc <HAL_GPIO_EXTI_Callback>
  }
}
 8006764:	bf00      	nop
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40010400 	.word	0x40010400

08006770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e08d      	b.n	800689e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fd fc56 	bl	8004048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2224      	movs	r2, #36	; 0x24
 80067a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0201 	bic.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d107      	bne.n	80067ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067e6:	609a      	str	r2, [r3, #8]
 80067e8:	e006      	b.n	80067f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689a      	ldr	r2, [r3, #8]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80067f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d108      	bne.n	8006812 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800680e:	605a      	str	r2, [r3, #4]
 8006810:	e007      	b.n	8006822 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006820:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006834:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006844:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69d9      	ldr	r1, [r3, #28]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1a      	ldr	r2, [r3, #32]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	4608      	mov	r0, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	461a      	mov	r2, r3
 80068b6:	4603      	mov	r3, r0
 80068b8:	817b      	strh	r3, [r7, #10]
 80068ba:	460b      	mov	r3, r1
 80068bc:	813b      	strh	r3, [r7, #8]
 80068be:	4613      	mov	r3, r2
 80068c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	f040 80f9 	bne.w	8006ac2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_I2C_Mem_Write+0x34>
 80068d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0ed      	b.n	8006ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_I2C_Mem_Write+0x4e>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e0e6      	b.n	8006ac4 <HAL_I2C_Mem_Write+0x21c>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068fe:	f7fd ff39 	bl	8004774 <HAL_GetTick>
 8006902:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	2319      	movs	r3, #25
 800690a:	2201      	movs	r2, #1
 800690c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f955 	bl	8006bc0 <I2C_WaitOnFlagUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e0d1      	b.n	8006ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2221      	movs	r2, #33	; 0x21
 8006924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2240      	movs	r2, #64	; 0x40
 800692c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a3a      	ldr	r2, [r7, #32]
 800693a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006940:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006948:	88f8      	ldrh	r0, [r7, #6]
 800694a:	893a      	ldrh	r2, [r7, #8]
 800694c:	8979      	ldrh	r1, [r7, #10]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	4603      	mov	r3, r0
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f8b9 	bl	8006ad0 <I2C_RequestMemoryWrite>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0a9      	b.n	8006ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006974:	b29b      	uxth	r3, r3
 8006976:	2bff      	cmp	r3, #255	; 0xff
 8006978:	d90e      	bls.n	8006998 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006984:	b2da      	uxtb	r2, r3
 8006986:	8979      	ldrh	r1, [r7, #10]
 8006988:	2300      	movs	r3, #0
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 facf 	bl	8006f34 <I2C_TransferConfig>
 8006996:	e00f      	b.n	80069b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	8979      	ldrh	r1, [r7, #10]
 80069aa:	2300      	movs	r3, #0
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 fabe 	bl	8006f34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f94e 	bl	8006c5e <I2C_WaitOnTXISFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e07b      	b.n	8006ac4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	781a      	ldrb	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d034      	beq.n	8006a70 <HAL_I2C_Mem_Write+0x1c8>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d130      	bne.n	8006a70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	2200      	movs	r2, #0
 8006a16:	2180      	movs	r1, #128	; 0x80
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f8d1 	bl	8006bc0 <I2C_WaitOnFlagUntilTimeout>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e04d      	b.n	8006ac4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2bff      	cmp	r3, #255	; 0xff
 8006a30:	d90e      	bls.n	8006a50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	22ff      	movs	r2, #255	; 0xff
 8006a36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	8979      	ldrh	r1, [r7, #10]
 8006a40:	2300      	movs	r3, #0
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fa73 	bl	8006f34 <I2C_TransferConfig>
 8006a4e:	e00f      	b.n	8006a70 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	8979      	ldrh	r1, [r7, #10]
 8006a62:	2300      	movs	r3, #0
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fa62 	bl	8006f34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d19e      	bne.n	80069b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f934 	bl	8006cec <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e01a      	b.n	8006ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2220      	movs	r2, #32
 8006a94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6859      	ldr	r1, [r3, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <HAL_I2C_Mem_Write+0x224>)
 8006aa2:	400b      	ands	r3, r1
 8006aa4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e000      	b.n	8006ac4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006ac2:	2302      	movs	r3, #2
  }
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	fe00e800 	.word	0xfe00e800

08006ad0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	4608      	mov	r0, r1
 8006ada:	4611      	mov	r1, r2
 8006adc:	461a      	mov	r2, r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	817b      	strh	r3, [r7, #10]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	813b      	strh	r3, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	8979      	ldrh	r1, [r7, #10]
 8006af0:	4b20      	ldr	r3, [pc, #128]	; (8006b74 <I2C_RequestMemoryWrite+0xa4>)
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fa1b 	bl	8006f34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006afe:	69fa      	ldr	r2, [r7, #28]
 8006b00:	69b9      	ldr	r1, [r7, #24]
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 f8ab 	bl	8006c5e <I2C_WaitOnTXISFlagUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e02c      	b.n	8006b6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d105      	bne.n	8006b24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b18:	893b      	ldrh	r3, [r7, #8]
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	629a      	str	r2, [r3, #40]	; 0x28
 8006b22:	e015      	b.n	8006b50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b24:	893b      	ldrh	r3, [r7, #8]
 8006b26:	0a1b      	lsrs	r3, r3, #8
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	69b9      	ldr	r1, [r7, #24]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 f891 	bl	8006c5e <I2C_WaitOnTXISFlagUntilTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e012      	b.n	8006b6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b46:	893b      	ldrh	r3, [r7, #8]
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2200      	movs	r2, #0
 8006b58:	2180      	movs	r1, #128	; 0x80
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 f830 	bl	8006bc0 <I2C_WaitOnFlagUntilTimeout>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	80002000 	.word	0x80002000

08006b78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d103      	bne.n	8006b96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2200      	movs	r2, #0
 8006b94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d007      	beq.n	8006bb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	619a      	str	r2, [r3, #24]
  }
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bd0:	e031      	b.n	8006c36 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd8:	d02d      	beq.n	8006c36 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bda:	f7fd fdcb 	bl	8004774 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d302      	bcc.n	8006bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d122      	bne.n	8006c36 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	bf0c      	ite	eq
 8006c00:	2301      	moveq	r3, #1
 8006c02:	2300      	movne	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	461a      	mov	r2, r3
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d113      	bne.n	8006c36 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c12:	f043 0220 	orr.w	r2, r3, #32
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e00f      	b.n	8006c56 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	bf0c      	ite	eq
 8006c46:	2301      	moveq	r3, #1
 8006c48:	2300      	movne	r3, #0
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	79fb      	ldrb	r3, [r7, #7]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d0be      	beq.n	8006bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c6a:	e033      	b.n	8006cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f87f 	bl	8006d74 <I2C_IsErrorOccurred>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e031      	b.n	8006ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d025      	beq.n	8006cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c88:	f7fd fd74 	bl	8004774 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d302      	bcc.n	8006c9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d11a      	bne.n	8006cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d013      	beq.n	8006cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb0:	f043 0220 	orr.w	r2, r3, #32
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e007      	b.n	8006ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d1c4      	bne.n	8006c6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cf8:	e02f      	b.n	8006d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f838 	bl	8006d74 <I2C_IsErrorOccurred>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e02d      	b.n	8006d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0e:	f7fd fd31 	bl	8004774 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d302      	bcc.n	8006d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d11a      	bne.n	8006d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	d013      	beq.n	8006d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d36:	f043 0220 	orr.w	r2, r3, #32
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e007      	b.n	8006d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d1c8      	bne.n	8006cfa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	; 0x28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d068      	beq.n	8006e72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2210      	movs	r2, #16
 8006da6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006da8:	e049      	b.n	8006e3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db0:	d045      	beq.n	8006e3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006db2:	f7fd fcdf 	bl	8004774 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d302      	bcc.n	8006dc8 <I2C_IsErrorOccurred+0x54>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d13a      	bne.n	8006e3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dea:	d121      	bne.n	8006e30 <I2C_IsErrorOccurred+0xbc>
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df2:	d01d      	beq.n	8006e30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006df4:	7cfb      	ldrb	r3, [r7, #19]
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	d01a      	beq.n	8006e30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e0a:	f7fd fcb3 	bl	8004774 <HAL_GetTick>
 8006e0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e10:	e00e      	b.n	8006e30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e12:	f7fd fcaf 	bl	8004774 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b19      	cmp	r3, #25
 8006e1e:	d907      	bls.n	8006e30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	f043 0320 	orr.w	r3, r3, #32
 8006e26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006e2e:	e006      	b.n	8006e3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b20      	cmp	r3, #32
 8006e3c:	d1e9      	bne.n	8006e12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d003      	beq.n	8006e54 <I2C_IsErrorOccurred+0xe0>
 8006e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0aa      	beq.n	8006daa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d103      	bne.n	8006e64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2220      	movs	r2, #32
 8006e62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	f043 0304 	orr.w	r3, r3, #4
 8006e6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00b      	beq.n	8006ebe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	f043 0308 	orr.w	r3, r3, #8
 8006eac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006eb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	f043 0302 	orr.w	r3, r3, #2
 8006ece:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01c      	beq.n	8006f22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7ff fe45 	bl	8006b78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <I2C_IsErrorOccurred+0x1bc>)
 8006efa:	400b      	ands	r3, r1
 8006efc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3728      	adds	r7, #40	; 0x28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	fe00e800 	.word	0xfe00e800

08006f34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	607b      	str	r3, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	817b      	strh	r3, [r7, #10]
 8006f42:	4613      	mov	r3, r2
 8006f44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f46:	897b      	ldrh	r3, [r7, #10]
 8006f48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f4c:	7a7b      	ldrb	r3, [r7, #9]
 8006f4e:	041b      	lsls	r3, r3, #16
 8006f50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	0d5b      	lsrs	r3, r3, #21
 8006f6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f72:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <I2C_TransferConfig+0x60>)
 8006f74:	430b      	orrs	r3, r1
 8006f76:	43db      	mvns	r3, r3
 8006f78:	ea02 0103 	and.w	r1, r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	03ff63ff 	.word	0x03ff63ff

08006f98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d138      	bne.n	8007020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e032      	b.n	8007022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2224      	movs	r2, #36	; 0x24
 8006fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0201 	bic.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6819      	ldr	r1, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	e000      	b.n	8007022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007020:	2302      	movs	r3, #2
  }
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800702e:	b480      	push	{r7}
 8007030:	b085      	sub	sp, #20
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b20      	cmp	r3, #32
 8007042:	d139      	bne.n	80070b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800704e:	2302      	movs	r3, #2
 8007050:	e033      	b.n	80070ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2224      	movs	r2, #36	; 0x24
 800705e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007080:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	021b      	lsls	r3, r3, #8
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	e000      	b.n	80070ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80070b8:	2302      	movs	r3, #2
  }
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e08f      	b.n	80071fa <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d106      	bne.n	80070fa <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7fd f863 	bl	80041c0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2202      	movs	r2, #2
 80070fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d004      	beq.n	800711c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800711a:	d103      	bne.n	8007124 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 031e 	bic.w	r3, r3, #30
 8007122:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800712c:	4293      	cmp	r3, r2
 800712e:	d005      	beq.n	800713c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007136:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800713a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4b31      	ldr	r3, [pc, #196]	; (8007204 <HAL_LPTIM_Init+0x13c>)
 8007140:	4013      	ands	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800714c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007152:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007158:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800715e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d107      	bne.n	800717e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007176:	4313      	orrs	r3, r2
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d004      	beq.n	8007190 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800718e:	d107      	bne.n	80071a0 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007198:	4313      	orrs	r3, r2
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00a      	beq.n	80071c2 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80071b4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80071ba:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a0e      	ldr	r2, [pc, #56]	; (8007208 <HAL_LPTIM_Init+0x140>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d108      	bne.n	80071e6 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	621a      	str	r2, [r3, #32]
 80071e4:	e004      	b.n	80071f0 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071ee:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	ff19f1fe 	.word	0xff19f1fe
 8007208:	40007c00 	.word	0x40007c00

0800720c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b01      	cmp	r3, #1
 8007220:	d10d      	bne.n	800723e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b01      	cmp	r3, #1
 800722e:	d106      	bne.n	800723e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2201      	movs	r2, #1
 8007236:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f882 	bl	8007342 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b02      	cmp	r3, #2
 800724a:	d10d      	bne.n	8007268 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b02      	cmp	r3, #2
 8007258:	d106      	bne.n	8007268 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2202      	movs	r2, #2
 8007260:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f877 	bl	8007356 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b04      	cmp	r3, #4
 8007274:	d10d      	bne.n	8007292 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b04      	cmp	r3, #4
 8007282:	d106      	bne.n	8007292 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2204      	movs	r2, #4
 800728a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f86c 	bl	800736a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b08      	cmp	r3, #8
 800729e:	d10d      	bne.n	80072bc <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	d106      	bne.n	80072bc <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2208      	movs	r2, #8
 80072b4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f861 	bl	800737e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d10d      	bne.n	80072e6 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d106      	bne.n	80072e6 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2210      	movs	r2, #16
 80072de:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f856 	bl	8007392 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d10d      	bne.n	8007310 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d106      	bne.n	8007310 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2220      	movs	r2, #32
 8007308:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f84b 	bl	80073a6 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d10d      	bne.n	800733a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007328:	2b40      	cmp	r3, #64	; 0x40
 800732a:	d106      	bne.n	800733a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2240      	movs	r2, #64	; 0x40
 8007332:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f840 	bl	80073ba <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80073d4:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80073dc:	4618      	mov	r0, r3
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40007000 	.word	0x40007000

080073ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fa:	d130      	bne.n	800745e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80073fc:	4b23      	ldr	r3, [pc, #140]	; (800748c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007408:	d038      	beq.n	800747c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800740a:	4b20      	ldr	r3, [pc, #128]	; (800748c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007412:	4a1e      	ldr	r2, [pc, #120]	; (800748c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007418:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800741a:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2232      	movs	r2, #50	; 0x32
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	4a1b      	ldr	r2, [pc, #108]	; (8007494 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007426:	fba2 2303 	umull	r2, r3, r2, r3
 800742a:	0c9b      	lsrs	r3, r3, #18
 800742c:	3301      	adds	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007430:	e002      	b.n	8007438 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b01      	subs	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007438:	4b14      	ldr	r3, [pc, #80]	; (800748c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007444:	d102      	bne.n	800744c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1f2      	bne.n	8007432 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800744c:	4b0f      	ldr	r3, [pc, #60]	; (800748c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007458:	d110      	bne.n	800747c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e00f      	b.n	800747e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800745e:	4b0b      	ldr	r3, [pc, #44]	; (800748c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800746a:	d007      	beq.n	800747c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800746c:	4b07      	ldr	r3, [pc, #28]	; (800748c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007474:	4a05      	ldr	r2, [pc, #20]	; (800748c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800747a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40007000 	.word	0x40007000
 8007490:	20000020 	.word	0x20000020
 8007494:	431bde83 	.word	0x431bde83

08007498 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	f000 bc02 	b.w	8007cb0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ac:	4b96      	ldr	r3, [pc, #600]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 030c 	and.w	r3, r3, #12
 80074b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074b6:	4b94      	ldr	r3, [pc, #592]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 80e4 	beq.w	8007696 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d007      	beq.n	80074e4 <HAL_RCC_OscConfig+0x4c>
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b0c      	cmp	r3, #12
 80074d8:	f040 808b 	bne.w	80075f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	f040 8087 	bne.w	80075f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074e4:	4b88      	ldr	r3, [pc, #544]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <HAL_RCC_OscConfig+0x64>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e3d9      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a1a      	ldr	r2, [r3, #32]
 8007500:	4b81      	ldr	r3, [pc, #516]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <HAL_RCC_OscConfig+0x7e>
 800750c:	4b7e      	ldr	r3, [pc, #504]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007514:	e005      	b.n	8007522 <HAL_RCC_OscConfig+0x8a>
 8007516:	4b7c      	ldr	r3, [pc, #496]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800751c:	091b      	lsrs	r3, r3, #4
 800751e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007522:	4293      	cmp	r3, r2
 8007524:	d223      	bcs.n	800756e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fd8c 	bl	8008048 <RCC_SetFlashLatencyFromMSIRange>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e3ba      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800753a:	4b73      	ldr	r3, [pc, #460]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a72      	ldr	r2, [pc, #456]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007540:	f043 0308 	orr.w	r3, r3, #8
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	4b70      	ldr	r3, [pc, #448]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	496d      	ldr	r1, [pc, #436]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007554:	4313      	orrs	r3, r2
 8007556:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007558:	4b6b      	ldr	r3, [pc, #428]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	021b      	lsls	r3, r3, #8
 8007566:	4968      	ldr	r1, [pc, #416]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007568:	4313      	orrs	r3, r2
 800756a:	604b      	str	r3, [r1, #4]
 800756c:	e025      	b.n	80075ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800756e:	4b66      	ldr	r3, [pc, #408]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a65      	ldr	r2, [pc, #404]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007574:	f043 0308 	orr.w	r3, r3, #8
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	4b63      	ldr	r3, [pc, #396]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	4960      	ldr	r1, [pc, #384]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007588:	4313      	orrs	r3, r2
 800758a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800758c:	4b5e      	ldr	r3, [pc, #376]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	495b      	ldr	r1, [pc, #364]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 800759c:	4313      	orrs	r3, r2
 800759e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fd4c 	bl	8008048 <RCC_SetFlashLatencyFromMSIRange>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e37a      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075ba:	f000 fc81 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 80075be:	4602      	mov	r2, r0
 80075c0:	4b51      	ldr	r3, [pc, #324]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	4950      	ldr	r1, [pc, #320]	; (800770c <HAL_RCC_OscConfig+0x274>)
 80075cc:	5ccb      	ldrb	r3, [r1, r3]
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	fa22 f303 	lsr.w	r3, r2, r3
 80075d6:	4a4e      	ldr	r2, [pc, #312]	; (8007710 <HAL_RCC_OscConfig+0x278>)
 80075d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80075da:	4b4e      	ldr	r3, [pc, #312]	; (8007714 <HAL_RCC_OscConfig+0x27c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fd f878 	bl	80046d4 <HAL_InitTick>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d052      	beq.n	8007694 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	e35e      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d032      	beq.n	8007660 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80075fa:	4b43      	ldr	r3, [pc, #268]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a42      	ldr	r2, [pc, #264]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007600:	f043 0301 	orr.w	r3, r3, #1
 8007604:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007606:	f7fd f8b5 	bl	8004774 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800760e:	f7fd f8b1 	bl	8004774 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e347      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007620:	4b39      	ldr	r3, [pc, #228]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f0      	beq.n	800760e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800762c:	4b36      	ldr	r3, [pc, #216]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a35      	ldr	r2, [pc, #212]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007632:	f043 0308 	orr.w	r3, r3, #8
 8007636:	6013      	str	r3, [r2, #0]
 8007638:	4b33      	ldr	r3, [pc, #204]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	4930      	ldr	r1, [pc, #192]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007646:	4313      	orrs	r3, r2
 8007648:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800764a:	4b2f      	ldr	r3, [pc, #188]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	021b      	lsls	r3, r3, #8
 8007658:	492b      	ldr	r1, [pc, #172]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 800765a:	4313      	orrs	r3, r2
 800765c:	604b      	str	r3, [r1, #4]
 800765e:	e01a      	b.n	8007696 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007660:	4b29      	ldr	r3, [pc, #164]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a28      	ldr	r2, [pc, #160]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007666:	f023 0301 	bic.w	r3, r3, #1
 800766a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800766c:	f7fd f882 	bl	8004774 <HAL_GetTick>
 8007670:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007672:	e008      	b.n	8007686 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007674:	f7fd f87e 	bl	8004774 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e314      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007686:	4b20      	ldr	r3, [pc, #128]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1f0      	bne.n	8007674 <HAL_RCC_OscConfig+0x1dc>
 8007692:	e000      	b.n	8007696 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007694:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d073      	beq.n	800778a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d005      	beq.n	80076b4 <HAL_RCC_OscConfig+0x21c>
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	2b0c      	cmp	r3, #12
 80076ac:	d10e      	bne.n	80076cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d10b      	bne.n	80076cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b4:	4b14      	ldr	r3, [pc, #80]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d063      	beq.n	8007788 <HAL_RCC_OscConfig+0x2f0>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d15f      	bne.n	8007788 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e2f1      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d106      	bne.n	80076e4 <HAL_RCC_OscConfig+0x24c>
 80076d6:	4b0c      	ldr	r3, [pc, #48]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a0b      	ldr	r2, [pc, #44]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80076dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	e025      	b.n	8007730 <HAL_RCC_OscConfig+0x298>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076ec:	d114      	bne.n	8007718 <HAL_RCC_OscConfig+0x280>
 80076ee:	4b06      	ldr	r3, [pc, #24]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a05      	ldr	r2, [pc, #20]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80076f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4b03      	ldr	r3, [pc, #12]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a02      	ldr	r2, [pc, #8]	; (8007708 <HAL_RCC_OscConfig+0x270>)
 8007700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	e013      	b.n	8007730 <HAL_RCC_OscConfig+0x298>
 8007708:	40021000 	.word	0x40021000
 800770c:	08011d4c 	.word	0x08011d4c
 8007710:	20000020 	.word	0x20000020
 8007714:	20000024 	.word	0x20000024
 8007718:	4ba0      	ldr	r3, [pc, #640]	; (800799c <HAL_RCC_OscConfig+0x504>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a9f      	ldr	r2, [pc, #636]	; (800799c <HAL_RCC_OscConfig+0x504>)
 800771e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	4b9d      	ldr	r3, [pc, #628]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a9c      	ldr	r2, [pc, #624]	; (800799c <HAL_RCC_OscConfig+0x504>)
 800772a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800772e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d013      	beq.n	8007760 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007738:	f7fd f81c 	bl	8004774 <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007740:	f7fd f818 	bl	8004774 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b64      	cmp	r3, #100	; 0x64
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e2ae      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007752:	4b92      	ldr	r3, [pc, #584]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0f0      	beq.n	8007740 <HAL_RCC_OscConfig+0x2a8>
 800775e:	e014      	b.n	800778a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007760:	f7fd f808 	bl	8004774 <HAL_GetTick>
 8007764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007766:	e008      	b.n	800777a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007768:	f7fd f804 	bl	8004774 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b64      	cmp	r3, #100	; 0x64
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e29a      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800777a:	4b88      	ldr	r3, [pc, #544]	; (800799c <HAL_RCC_OscConfig+0x504>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1f0      	bne.n	8007768 <HAL_RCC_OscConfig+0x2d0>
 8007786:	e000      	b.n	800778a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d060      	beq.n	8007858 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b04      	cmp	r3, #4
 800779a:	d005      	beq.n	80077a8 <HAL_RCC_OscConfig+0x310>
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	2b0c      	cmp	r3, #12
 80077a0:	d119      	bne.n	80077d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d116      	bne.n	80077d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077a8:	4b7c      	ldr	r3, [pc, #496]	; (800799c <HAL_RCC_OscConfig+0x504>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <HAL_RCC_OscConfig+0x328>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e277      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c0:	4b76      	ldr	r3, [pc, #472]	; (800799c <HAL_RCC_OscConfig+0x504>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	061b      	lsls	r3, r3, #24
 80077ce:	4973      	ldr	r1, [pc, #460]	; (800799c <HAL_RCC_OscConfig+0x504>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077d4:	e040      	b.n	8007858 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d023      	beq.n	8007826 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077de:	4b6f      	ldr	r3, [pc, #444]	; (800799c <HAL_RCC_OscConfig+0x504>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a6e      	ldr	r2, [pc, #440]	; (800799c <HAL_RCC_OscConfig+0x504>)
 80077e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ea:	f7fc ffc3 	bl	8004774 <HAL_GetTick>
 80077ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077f2:	f7fc ffbf 	bl	8004774 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e255      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007804:	4b65      	ldr	r3, [pc, #404]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0f0      	beq.n	80077f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007810:	4b62      	ldr	r3, [pc, #392]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	061b      	lsls	r3, r3, #24
 800781e:	495f      	ldr	r1, [pc, #380]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007820:	4313      	orrs	r3, r2
 8007822:	604b      	str	r3, [r1, #4]
 8007824:	e018      	b.n	8007858 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007826:	4b5d      	ldr	r3, [pc, #372]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a5c      	ldr	r2, [pc, #368]	; (800799c <HAL_RCC_OscConfig+0x504>)
 800782c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007832:	f7fc ff9f 	bl	8004774 <HAL_GetTick>
 8007836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007838:	e008      	b.n	800784c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800783a:	f7fc ff9b 	bl	8004774 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d901      	bls.n	800784c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e231      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800784c:	4b53      	ldr	r3, [pc, #332]	; (800799c <HAL_RCC_OscConfig+0x504>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1f0      	bne.n	800783a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d03c      	beq.n	80078de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01c      	beq.n	80078a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800786c:	4b4b      	ldr	r3, [pc, #300]	; (800799c <HAL_RCC_OscConfig+0x504>)
 800786e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007872:	4a4a      	ldr	r2, [pc, #296]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800787c:	f7fc ff7a 	bl	8004774 <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007884:	f7fc ff76 	bl	8004774 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e20c      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007896:	4b41      	ldr	r3, [pc, #260]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0ef      	beq.n	8007884 <HAL_RCC_OscConfig+0x3ec>
 80078a4:	e01b      	b.n	80078de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078a6:	4b3d      	ldr	r3, [pc, #244]	; (800799c <HAL_RCC_OscConfig+0x504>)
 80078a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ac:	4a3b      	ldr	r2, [pc, #236]	; (800799c <HAL_RCC_OscConfig+0x504>)
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b6:	f7fc ff5d 	bl	8004774 <HAL_GetTick>
 80078ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078bc:	e008      	b.n	80078d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078be:	f7fc ff59 	bl	8004774 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e1ef      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078d0:	4b32      	ldr	r3, [pc, #200]	; (800799c <HAL_RCC_OscConfig+0x504>)
 80078d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1ef      	bne.n	80078be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0304 	and.w	r3, r3, #4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 80a6 	beq.w	8007a38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ec:	2300      	movs	r3, #0
 80078ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80078f0:	4b2a      	ldr	r3, [pc, #168]	; (800799c <HAL_RCC_OscConfig+0x504>)
 80078f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10d      	bne.n	8007918 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078fc:	4b27      	ldr	r3, [pc, #156]	; (800799c <HAL_RCC_OscConfig+0x504>)
 80078fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007900:	4a26      	ldr	r2, [pc, #152]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007906:	6593      	str	r3, [r2, #88]	; 0x58
 8007908:	4b24      	ldr	r3, [pc, #144]	; (800799c <HAL_RCC_OscConfig+0x504>)
 800790a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007910:	60bb      	str	r3, [r7, #8]
 8007912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007914:	2301      	movs	r3, #1
 8007916:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007918:	4b21      	ldr	r3, [pc, #132]	; (80079a0 <HAL_RCC_OscConfig+0x508>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007920:	2b00      	cmp	r3, #0
 8007922:	d118      	bne.n	8007956 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007924:	4b1e      	ldr	r3, [pc, #120]	; (80079a0 <HAL_RCC_OscConfig+0x508>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a1d      	ldr	r2, [pc, #116]	; (80079a0 <HAL_RCC_OscConfig+0x508>)
 800792a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800792e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007930:	f7fc ff20 	bl	8004774 <HAL_GetTick>
 8007934:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007936:	e008      	b.n	800794a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007938:	f7fc ff1c 	bl	8004774 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b02      	cmp	r3, #2
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e1b2      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800794a:	4b15      	ldr	r3, [pc, #84]	; (80079a0 <HAL_RCC_OscConfig+0x508>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0f0      	beq.n	8007938 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d108      	bne.n	8007970 <HAL_RCC_OscConfig+0x4d8>
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007964:	4a0d      	ldr	r2, [pc, #52]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800796e:	e029      	b.n	80079c4 <HAL_RCC_OscConfig+0x52c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	2b05      	cmp	r3, #5
 8007976:	d115      	bne.n	80079a4 <HAL_RCC_OscConfig+0x50c>
 8007978:	4b08      	ldr	r3, [pc, #32]	; (800799c <HAL_RCC_OscConfig+0x504>)
 800797a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797e:	4a07      	ldr	r2, [pc, #28]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007980:	f043 0304 	orr.w	r3, r3, #4
 8007984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007988:	4b04      	ldr	r3, [pc, #16]	; (800799c <HAL_RCC_OscConfig+0x504>)
 800798a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798e:	4a03      	ldr	r2, [pc, #12]	; (800799c <HAL_RCC_OscConfig+0x504>)
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007998:	e014      	b.n	80079c4 <HAL_RCC_OscConfig+0x52c>
 800799a:	bf00      	nop
 800799c:	40021000 	.word	0x40021000
 80079a0:	40007000 	.word	0x40007000
 80079a4:	4b9a      	ldr	r3, [pc, #616]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079aa:	4a99      	ldr	r2, [pc, #612]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 80079ac:	f023 0301 	bic.w	r3, r3, #1
 80079b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079b4:	4b96      	ldr	r3, [pc, #600]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 80079b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ba:	4a95      	ldr	r2, [pc, #596]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 80079bc:	f023 0304 	bic.w	r3, r3, #4
 80079c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d016      	beq.n	80079fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079cc:	f7fc fed2 	bl	8004774 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079d2:	e00a      	b.n	80079ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079d4:	f7fc fece 	bl	8004774 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e162      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079ea:	4b89      	ldr	r3, [pc, #548]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 80079ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d0ed      	beq.n	80079d4 <HAL_RCC_OscConfig+0x53c>
 80079f8:	e015      	b.n	8007a26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079fa:	f7fc febb 	bl	8004774 <HAL_GetTick>
 80079fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a00:	e00a      	b.n	8007a18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a02:	f7fc feb7 	bl	8004774 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e14b      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a18:	4b7d      	ldr	r3, [pc, #500]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1ed      	bne.n	8007a02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a26:	7ffb      	ldrb	r3, [r7, #31]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d105      	bne.n	8007a38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a2c:	4b78      	ldr	r3, [pc, #480]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a30:	4a77      	ldr	r2, [pc, #476]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d03c      	beq.n	8007abe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01c      	beq.n	8007a86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a4c:	4b70      	ldr	r3, [pc, #448]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a52:	4a6f      	ldr	r2, [pc, #444]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007a54:	f043 0301 	orr.w	r3, r3, #1
 8007a58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a5c:	f7fc fe8a 	bl	8004774 <HAL_GetTick>
 8007a60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a62:	e008      	b.n	8007a76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a64:	f7fc fe86 	bl	8004774 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d901      	bls.n	8007a76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e11c      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a76:	4b66      	ldr	r3, [pc, #408]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0ef      	beq.n	8007a64 <HAL_RCC_OscConfig+0x5cc>
 8007a84:	e01b      	b.n	8007abe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a86:	4b62      	ldr	r3, [pc, #392]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a8c:	4a60      	ldr	r2, [pc, #384]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007a8e:	f023 0301 	bic.w	r3, r3, #1
 8007a92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a96:	f7fc fe6d 	bl	8004774 <HAL_GetTick>
 8007a9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a9c:	e008      	b.n	8007ab0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a9e:	f7fc fe69 	bl	8004774 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e0ff      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ab0:	4b57      	ldr	r3, [pc, #348]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1ef      	bne.n	8007a9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 80f3 	beq.w	8007cae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	f040 80c9 	bne.w	8007c64 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007ad2:	4b4f      	ldr	r3, [pc, #316]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f003 0203 	and.w	r2, r3, #3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d12c      	bne.n	8007b40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af0:	3b01      	subs	r3, #1
 8007af2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d123      	bne.n	8007b40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d11b      	bne.n	8007b40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d113      	bne.n	8007b40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	3b01      	subs	r3, #1
 8007b26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d109      	bne.n	8007b40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	085b      	lsrs	r3, r3, #1
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d06b      	beq.n	8007c18 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	2b0c      	cmp	r3, #12
 8007b44:	d062      	beq.n	8007c0c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007b46:	4b32      	ldr	r3, [pc, #200]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e0ac      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007b56:	4b2e      	ldr	r3, [pc, #184]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a2d      	ldr	r2, [pc, #180]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b62:	f7fc fe07 	bl	8004774 <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b68:	e008      	b.n	8007b7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b6a:	f7fc fe03 	bl	8004774 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d901      	bls.n	8007b7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e099      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b7c:	4b24      	ldr	r3, [pc, #144]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1f0      	bne.n	8007b6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b88:	4b21      	ldr	r3, [pc, #132]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	4b21      	ldr	r3, [pc, #132]	; (8007c14 <HAL_RCC_OscConfig+0x77c>)
 8007b8e:	4013      	ands	r3, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b98:	3a01      	subs	r2, #1
 8007b9a:	0112      	lsls	r2, r2, #4
 8007b9c:	4311      	orrs	r1, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ba2:	0212      	lsls	r2, r2, #8
 8007ba4:	4311      	orrs	r1, r2
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007baa:	0852      	lsrs	r2, r2, #1
 8007bac:	3a01      	subs	r2, #1
 8007bae:	0552      	lsls	r2, r2, #21
 8007bb0:	4311      	orrs	r1, r2
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007bb6:	0852      	lsrs	r2, r2, #1
 8007bb8:	3a01      	subs	r2, #1
 8007bba:	0652      	lsls	r2, r2, #25
 8007bbc:	4311      	orrs	r1, r2
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bc2:	06d2      	lsls	r2, r2, #27
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	4912      	ldr	r1, [pc, #72]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007bcc:	4b10      	ldr	r3, [pc, #64]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0f      	ldr	r2, [pc, #60]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bd8:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	4a0c      	ldr	r2, [pc, #48]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007be2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007be4:	f7fc fdc6 	bl	8004774 <HAL_GetTick>
 8007be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bec:	f7fc fdc2 	bl	8004774 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e058      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bfe:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <HAL_RCC_OscConfig+0x778>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f0      	beq.n	8007bec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c0a:	e050      	b.n	8007cae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e04f      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
 8007c10:	40021000 	.word	0x40021000
 8007c14:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c18:	4b27      	ldr	r3, [pc, #156]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d144      	bne.n	8007cae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007c24:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a23      	ldr	r2, [pc, #140]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c30:	4b21      	ldr	r3, [pc, #132]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	4a20      	ldr	r2, [pc, #128]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c3c:	f7fc fd9a 	bl	8004774 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c44:	f7fc fd96 	bl	8004774 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e02c      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c56:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0f0      	beq.n	8007c44 <HAL_RCC_OscConfig+0x7ac>
 8007c62:	e024      	b.n	8007cae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	2b0c      	cmp	r3, #12
 8007c68:	d01f      	beq.n	8007caa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c6a:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a12      	ldr	r2, [pc, #72]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c76:	f7fc fd7d 	bl	8004774 <HAL_GetTick>
 8007c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c7c:	e008      	b.n	8007c90 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c7e:	f7fc fd79 	bl	8004774 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e00f      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c90:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1f0      	bne.n	8007c7e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007c9c:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	4905      	ldr	r1, [pc, #20]	; (8007cb8 <HAL_RCC_OscConfig+0x820>)
 8007ca2:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <HAL_RCC_OscConfig+0x824>)
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	60cb      	str	r3, [r1, #12]
 8007ca8:	e001      	b.n	8007cae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3720      	adds	r7, #32
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	feeefffc 	.word	0xfeeefffc

08007cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e0e7      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd4:	4b75      	ldr	r3, [pc, #468]	; (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d910      	bls.n	8007d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce2:	4b72      	ldr	r3, [pc, #456]	; (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f023 0207 	bic.w	r2, r3, #7
 8007cea:	4970      	ldr	r1, [pc, #448]	; (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cf2:	4b6e      	ldr	r3, [pc, #440]	; (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d001      	beq.n	8007d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e0cf      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d010      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	4b66      	ldr	r3, [pc, #408]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d908      	bls.n	8007d32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d20:	4b63      	ldr	r3, [pc, #396]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	4960      	ldr	r1, [pc, #384]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d04c      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d107      	bne.n	8007d56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d46:	4b5a      	ldr	r3, [pc, #360]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d121      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e0a6      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d107      	bne.n	8007d6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d5e:	4b54      	ldr	r3, [pc, #336]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d115      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e09a      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d107      	bne.n	8007d86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d76:	4b4e      	ldr	r3, [pc, #312]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e08e      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d86:	4b4a      	ldr	r3, [pc, #296]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e086      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d96:	4b46      	ldr	r3, [pc, #280]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f023 0203 	bic.w	r2, r3, #3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	4943      	ldr	r1, [pc, #268]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007da8:	f7fc fce4 	bl	8004774 <HAL_GetTick>
 8007dac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dae:	e00a      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db0:	f7fc fce0 	bl	8004774 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e06e      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dc6:	4b3a      	ldr	r3, [pc, #232]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 020c 	and.w	r2, r3, #12
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d1eb      	bne.n	8007db0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d010      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	4b31      	ldr	r3, [pc, #196]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d208      	bcs.n	8007e06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007df4:	4b2e      	ldr	r3, [pc, #184]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	492b      	ldr	r1, [pc, #172]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e06:	4b29      	ldr	r3, [pc, #164]	; (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0307 	and.w	r3, r3, #7
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d210      	bcs.n	8007e36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e14:	4b25      	ldr	r3, [pc, #148]	; (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f023 0207 	bic.w	r2, r3, #7
 8007e1c:	4923      	ldr	r1, [pc, #140]	; (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e24:	4b21      	ldr	r3, [pc, #132]	; (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d001      	beq.n	8007e36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e036      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e42:	4b1b      	ldr	r3, [pc, #108]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	4918      	ldr	r1, [pc, #96]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0308 	and.w	r3, r3, #8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d009      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e60:	4b13      	ldr	r3, [pc, #76]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	4910      	ldr	r1, [pc, #64]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e74:	f000 f824 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	091b      	lsrs	r3, r3, #4
 8007e80:	f003 030f 	and.w	r3, r3, #15
 8007e84:	490b      	ldr	r1, [pc, #44]	; (8007eb4 <HAL_RCC_ClockConfig+0x1f4>)
 8007e86:	5ccb      	ldrb	r3, [r1, r3]
 8007e88:	f003 031f 	and.w	r3, r3, #31
 8007e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e90:	4a09      	ldr	r2, [pc, #36]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f8>)
 8007e92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e94:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <HAL_RCC_ClockConfig+0x1fc>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fc fc1b 	bl	80046d4 <HAL_InitTick>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	72fb      	strb	r3, [r7, #11]

  return status;
 8007ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40022000 	.word	0x40022000
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	08011d4c 	.word	0x08011d4c
 8007eb8:	20000020 	.word	0x20000020
 8007ebc:	20000024 	.word	0x20000024

08007ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b089      	sub	sp, #36	; 0x24
 8007ec4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ece:	4b3e      	ldr	r3, [pc, #248]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 030c 	and.w	r3, r3, #12
 8007ed6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ed8:	4b3b      	ldr	r3, [pc, #236]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d005      	beq.n	8007ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b0c      	cmp	r3, #12
 8007eec:	d121      	bne.n	8007f32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d11e      	bne.n	8007f32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ef4:	4b34      	ldr	r3, [pc, #208]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0308 	and.w	r3, r3, #8
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d107      	bne.n	8007f10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007f00:	4b31      	ldr	r3, [pc, #196]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f06:	0a1b      	lsrs	r3, r3, #8
 8007f08:	f003 030f 	and.w	r3, r3, #15
 8007f0c:	61fb      	str	r3, [r7, #28]
 8007f0e:	e005      	b.n	8007f1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f10:	4b2d      	ldr	r3, [pc, #180]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f1c:	4a2b      	ldr	r2, [pc, #172]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10d      	bne.n	8007f48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f30:	e00a      	b.n	8007f48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d102      	bne.n	8007f3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f38:	4b25      	ldr	r3, [pc, #148]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	e004      	b.n	8007f48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d101      	bne.n	8007f48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f44:	4b23      	ldr	r3, [pc, #140]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2b0c      	cmp	r3, #12
 8007f4c:	d134      	bne.n	8007fb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f4e:	4b1e      	ldr	r3, [pc, #120]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d003      	beq.n	8007f66 <HAL_RCC_GetSysClockFreq+0xa6>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d003      	beq.n	8007f6c <HAL_RCC_GetSysClockFreq+0xac>
 8007f64:	e005      	b.n	8007f72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007f66:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f68:	617b      	str	r3, [r7, #20]
      break;
 8007f6a:	e005      	b.n	8007f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007f6c:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f6e:	617b      	str	r3, [r7, #20]
      break;
 8007f70:	e002      	b.n	8007f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	617b      	str	r3, [r7, #20]
      break;
 8007f76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f78:	4b13      	ldr	r3, [pc, #76]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	091b      	lsrs	r3, r3, #4
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	3301      	adds	r3, #1
 8007f84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007f86:	4b10      	ldr	r3, [pc, #64]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	0a1b      	lsrs	r3, r3, #8
 8007f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	fb03 f202 	mul.w	r2, r3, r2
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	0e5b      	lsrs	r3, r3, #25
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	3301      	adds	r3, #1
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3724      	adds	r7, #36	; 0x24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	40021000 	.word	0x40021000
 8007fcc:	08011d64 	.word	0x08011d64
 8007fd0:	00f42400 	.word	0x00f42400
 8007fd4:	007a1200 	.word	0x007a1200

08007fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fdc:	4b03      	ldr	r3, [pc, #12]	; (8007fec <HAL_RCC_GetHCLKFreq+0x14>)
 8007fde:	681b      	ldr	r3, [r3, #0]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000020 	.word	0x20000020

08007ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ff4:	f7ff fff0 	bl	8007fd8 <HAL_RCC_GetHCLKFreq>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	4b06      	ldr	r3, [pc, #24]	; (8008014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	4904      	ldr	r1, [pc, #16]	; (8008018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008006:	5ccb      	ldrb	r3, [r1, r3]
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008010:	4618      	mov	r0, r3
 8008012:	bd80      	pop	{r7, pc}
 8008014:	40021000 	.word	0x40021000
 8008018:	08011d5c 	.word	0x08011d5c

0800801c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008020:	f7ff ffda 	bl	8007fd8 <HAL_RCC_GetHCLKFreq>
 8008024:	4602      	mov	r2, r0
 8008026:	4b06      	ldr	r3, [pc, #24]	; (8008040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	0adb      	lsrs	r3, r3, #11
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	4904      	ldr	r1, [pc, #16]	; (8008044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008032:	5ccb      	ldrb	r3, [r1, r3]
 8008034:	f003 031f 	and.w	r3, r3, #31
 8008038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800803c:	4618      	mov	r0, r3
 800803e:	bd80      	pop	{r7, pc}
 8008040:	40021000 	.word	0x40021000
 8008044:	08011d5c 	.word	0x08011d5c

08008048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008050:	2300      	movs	r3, #0
 8008052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008054:	4b2a      	ldr	r3, [pc, #168]	; (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008060:	f7ff f9b6 	bl	80073d0 <HAL_PWREx_GetVoltageRange>
 8008064:	6178      	str	r0, [r7, #20]
 8008066:	e014      	b.n	8008092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008068:	4b25      	ldr	r3, [pc, #148]	; (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800806a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806c:	4a24      	ldr	r2, [pc, #144]	; (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800806e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008072:	6593      	str	r3, [r2, #88]	; 0x58
 8008074:	4b22      	ldr	r3, [pc, #136]	; (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008080:	f7ff f9a6 	bl	80073d0 <HAL_PWREx_GetVoltageRange>
 8008084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008086:	4b1e      	ldr	r3, [pc, #120]	; (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800808a:	4a1d      	ldr	r2, [pc, #116]	; (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800808c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008090:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008098:	d10b      	bne.n	80080b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b80      	cmp	r3, #128	; 0x80
 800809e:	d919      	bls.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2ba0      	cmp	r3, #160	; 0xa0
 80080a4:	d902      	bls.n	80080ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80080a6:	2302      	movs	r3, #2
 80080a8:	613b      	str	r3, [r7, #16]
 80080aa:	e013      	b.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80080ac:	2301      	movs	r3, #1
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	e010      	b.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b80      	cmp	r3, #128	; 0x80
 80080b6:	d902      	bls.n	80080be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80080b8:	2303      	movs	r3, #3
 80080ba:	613b      	str	r3, [r7, #16]
 80080bc:	e00a      	b.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b80      	cmp	r3, #128	; 0x80
 80080c2:	d102      	bne.n	80080ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80080c4:	2302      	movs	r3, #2
 80080c6:	613b      	str	r3, [r7, #16]
 80080c8:	e004      	b.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b70      	cmp	r3, #112	; 0x70
 80080ce:	d101      	bne.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80080d0:	2301      	movs	r3, #1
 80080d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80080d4:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f023 0207 	bic.w	r2, r3, #7
 80080dc:	4909      	ldr	r1, [pc, #36]	; (8008104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80080e4:	4b07      	ldr	r3, [pc, #28]	; (8008104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d001      	beq.n	80080f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40021000 	.word	0x40021000
 8008104:	40022000 	.word	0x40022000

08008108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008110:	2300      	movs	r3, #0
 8008112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008114:	2300      	movs	r3, #0
 8008116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008120:	2b00      	cmp	r3, #0
 8008122:	d031      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008128:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800812c:	d01a      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800812e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008132:	d814      	bhi.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d009      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800813c:	d10f      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800813e:	4b5d      	ldr	r3, [pc, #372]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	4a5c      	ldr	r2, [pc, #368]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008148:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800814a:	e00c      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3304      	adds	r3, #4
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f9ce 	bl	80084f4 <RCCEx_PLLSAI1_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800815c:	e003      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	74fb      	strb	r3, [r7, #19]
      break;
 8008162:	e000      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008166:	7cfb      	ldrb	r3, [r7, #19]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10b      	bne.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800816c:	4b51      	ldr	r3, [pc, #324]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800816e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817a:	494e      	ldr	r1, [pc, #312]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800817c:	4313      	orrs	r3, r2
 800817e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008182:	e001      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008184:	7cfb      	ldrb	r3, [r7, #19]
 8008186:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 809e 	beq.w	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008196:	2300      	movs	r3, #0
 8008198:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800819a:	4b46      	ldr	r3, [pc, #280]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800819c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80081a6:	2301      	movs	r3, #1
 80081a8:	e000      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80081aa:	2300      	movs	r3, #0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00d      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081b0:	4b40      	ldr	r3, [pc, #256]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b4:	4a3f      	ldr	r2, [pc, #252]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ba:	6593      	str	r3, [r2, #88]	; 0x58
 80081bc:	4b3d      	ldr	r3, [pc, #244]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081c8:	2301      	movs	r3, #1
 80081ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081cc:	4b3a      	ldr	r3, [pc, #232]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a39      	ldr	r2, [pc, #228]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80081d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081d8:	f7fc facc 	bl	8004774 <HAL_GetTick>
 80081dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081de:	e009      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081e0:	f7fc fac8 	bl	8004774 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d902      	bls.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	74fb      	strb	r3, [r7, #19]
        break;
 80081f2:	e005      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081f4:	4b30      	ldr	r3, [pc, #192]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0ef      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008200:	7cfb      	ldrb	r3, [r7, #19]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d15a      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008206:	4b2b      	ldr	r3, [pc, #172]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008210:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01e      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	429a      	cmp	r2, r3
 8008220:	d019      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008222:	4b24      	ldr	r3, [pc, #144]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800822c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800822e:	4b21      	ldr	r3, [pc, #132]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008234:	4a1f      	ldr	r2, [pc, #124]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800823a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800823e:	4b1d      	ldr	r3, [pc, #116]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008244:	4a1b      	ldr	r2, [pc, #108]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800824a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800824e:	4a19      	ldr	r2, [pc, #100]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d016      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008260:	f7fc fa88 	bl	8004774 <HAL_GetTick>
 8008264:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008266:	e00b      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008268:	f7fc fa84 	bl	8004774 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	f241 3288 	movw	r2, #5000	; 0x1388
 8008276:	4293      	cmp	r3, r2
 8008278:	d902      	bls.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	74fb      	strb	r3, [r7, #19]
            break;
 800827e:	e006      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008280:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0ec      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800828e:	7cfb      	ldrb	r3, [r7, #19]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10b      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008294:	4b07      	ldr	r3, [pc, #28]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800829a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a2:	4904      	ldr	r1, [pc, #16]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80082aa:	e009      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082ac:	7cfb      	ldrb	r3, [r7, #19]
 80082ae:	74bb      	strb	r3, [r7, #18]
 80082b0:	e006      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80082b2:	bf00      	nop
 80082b4:	40021000 	.word	0x40021000
 80082b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082bc:	7cfb      	ldrb	r3, [r7, #19]
 80082be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082c0:	7c7b      	ldrb	r3, [r7, #17]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d105      	bne.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082c6:	4b8a      	ldr	r3, [pc, #552]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80082c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ca:	4a89      	ldr	r2, [pc, #548]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80082cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082de:	4b84      	ldr	r3, [pc, #528]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80082e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e4:	f023 0203 	bic.w	r2, r3, #3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	4980      	ldr	r1, [pc, #512]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008300:	4b7b      	ldr	r3, [pc, #492]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008306:	f023 020c 	bic.w	r2, r3, #12
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	4978      	ldr	r1, [pc, #480]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008310:	4313      	orrs	r3, r2
 8008312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0320 	and.w	r3, r3, #32
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008322:	4b73      	ldr	r3, [pc, #460]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008328:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	496f      	ldr	r1, [pc, #444]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008332:	4313      	orrs	r3, r2
 8008334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008344:	4b6a      	ldr	r3, [pc, #424]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008352:	4967      	ldr	r1, [pc, #412]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008354:	4313      	orrs	r3, r2
 8008356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008366:	4b62      	ldr	r3, [pc, #392]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	495e      	ldr	r1, [pc, #376]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008376:	4313      	orrs	r3, r2
 8008378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00a      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008388:	4b59      	ldr	r3, [pc, #356]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800838a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008396:	4956      	ldr	r1, [pc, #344]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008398:	4313      	orrs	r3, r2
 800839a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80083aa:	4b51      	ldr	r3, [pc, #324]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b8:	494d      	ldr	r1, [pc, #308]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d028      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083cc:	4b48      	ldr	r3, [pc, #288]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80083ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	4945      	ldr	r1, [pc, #276]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083ea:	d106      	bne.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083ec:	4b40      	ldr	r3, [pc, #256]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	4a3f      	ldr	r2, [pc, #252]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80083f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083f6:	60d3      	str	r3, [r2, #12]
 80083f8:	e011      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008402:	d10c      	bne.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3304      	adds	r3, #4
 8008408:	2101      	movs	r1, #1
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f872 	bl	80084f4 <RCCEx_PLLSAI1_Config>
 8008410:	4603      	mov	r3, r0
 8008412:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008414:	7cfb      	ldrb	r3, [r7, #19]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800841a:	7cfb      	ldrb	r3, [r7, #19]
 800841c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d028      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800842a:	4b31      	ldr	r3, [pc, #196]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800842c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008430:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008438:	492d      	ldr	r1, [pc, #180]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800843a:	4313      	orrs	r3, r2
 800843c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008448:	d106      	bne.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800844a:	4b29      	ldr	r3, [pc, #164]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	4a28      	ldr	r2, [pc, #160]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008454:	60d3      	str	r3, [r2, #12]
 8008456:	e011      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008460:	d10c      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	3304      	adds	r3, #4
 8008466:	2101      	movs	r1, #1
 8008468:	4618      	mov	r0, r3
 800846a:	f000 f843 	bl	80084f4 <RCCEx_PLLSAI1_Config>
 800846e:	4603      	mov	r3, r0
 8008470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008472:	7cfb      	ldrb	r3, [r7, #19]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008478:	7cfb      	ldrb	r3, [r7, #19]
 800847a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01c      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008488:	4b19      	ldr	r3, [pc, #100]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800848a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008496:	4916      	ldr	r1, [pc, #88]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008498:	4313      	orrs	r3, r2
 800849a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084a6:	d10c      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3304      	adds	r3, #4
 80084ac:	2102      	movs	r1, #2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 f820 	bl	80084f4 <RCCEx_PLLSAI1_Config>
 80084b4:	4603      	mov	r3, r0
 80084b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084b8:	7cfb      	ldrb	r3, [r7, #19]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80084be:	7cfb      	ldrb	r3, [r7, #19]
 80084c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084ce:	4b08      	ldr	r3, [pc, #32]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80084d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084dc:	4904      	ldr	r1, [pc, #16]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80084e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	40021000 	.word	0x40021000

080084f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008502:	4b74      	ldr	r3, [pc, #464]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f003 0303 	and.w	r3, r3, #3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d018      	beq.n	8008540 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800850e:	4b71      	ldr	r3, [pc, #452]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	f003 0203 	and.w	r2, r3, #3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d10d      	bne.n	800853a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
       ||
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008526:	4b6b      	ldr	r3, [pc, #428]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	091b      	lsrs	r3, r3, #4
 800852c:	f003 0307 	and.w	r3, r3, #7
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
       ||
 8008536:	429a      	cmp	r2, r3
 8008538:	d047      	beq.n	80085ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	73fb      	strb	r3, [r7, #15]
 800853e:	e044      	b.n	80085ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b03      	cmp	r3, #3
 8008546:	d018      	beq.n	800857a <RCCEx_PLLSAI1_Config+0x86>
 8008548:	2b03      	cmp	r3, #3
 800854a:	d825      	bhi.n	8008598 <RCCEx_PLLSAI1_Config+0xa4>
 800854c:	2b01      	cmp	r3, #1
 800854e:	d002      	beq.n	8008556 <RCCEx_PLLSAI1_Config+0x62>
 8008550:	2b02      	cmp	r3, #2
 8008552:	d009      	beq.n	8008568 <RCCEx_PLLSAI1_Config+0x74>
 8008554:	e020      	b.n	8008598 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008556:	4b5f      	ldr	r3, [pc, #380]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d11d      	bne.n	800859e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008566:	e01a      	b.n	800859e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008568:	4b5a      	ldr	r3, [pc, #360]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008570:	2b00      	cmp	r3, #0
 8008572:	d116      	bne.n	80085a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008578:	e013      	b.n	80085a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800857a:	4b56      	ldr	r3, [pc, #344]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10f      	bne.n	80085a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008586:	4b53      	ldr	r3, [pc, #332]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008596:	e006      	b.n	80085a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	73fb      	strb	r3, [r7, #15]
      break;
 800859c:	e004      	b.n	80085a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800859e:	bf00      	nop
 80085a0:	e002      	b.n	80085a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80085a2:	bf00      	nop
 80085a4:	e000      	b.n	80085a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80085a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10d      	bne.n	80085ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80085ae:	4b49      	ldr	r3, [pc, #292]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6819      	ldr	r1, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	3b01      	subs	r3, #1
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	430b      	orrs	r3, r1
 80085c4:	4943      	ldr	r1, [pc, #268]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d17c      	bne.n	80086ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80085d0:	4b40      	ldr	r3, [pc, #256]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a3f      	ldr	r2, [pc, #252]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80085d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085dc:	f7fc f8ca 	bl	8004774 <HAL_GetTick>
 80085e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80085e2:	e009      	b.n	80085f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085e4:	f7fc f8c6 	bl	8004774 <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d902      	bls.n	80085f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	73fb      	strb	r3, [r7, #15]
        break;
 80085f6:	e005      	b.n	8008604 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80085f8:	4b36      	ldr	r3, [pc, #216]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1ef      	bne.n	80085e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d15f      	bne.n	80086ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d110      	bne.n	8008632 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008610:	4b30      	ldr	r3, [pc, #192]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6892      	ldr	r2, [r2, #8]
 8008620:	0211      	lsls	r1, r2, #8
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	68d2      	ldr	r2, [r2, #12]
 8008626:	06d2      	lsls	r2, r2, #27
 8008628:	430a      	orrs	r2, r1
 800862a:	492a      	ldr	r1, [pc, #168]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800862c:	4313      	orrs	r3, r2
 800862e:	610b      	str	r3, [r1, #16]
 8008630:	e027      	b.n	8008682 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d112      	bne.n	800865e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008638:	4b26      	ldr	r3, [pc, #152]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6892      	ldr	r2, [r2, #8]
 8008648:	0211      	lsls	r1, r2, #8
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6912      	ldr	r2, [r2, #16]
 800864e:	0852      	lsrs	r2, r2, #1
 8008650:	3a01      	subs	r2, #1
 8008652:	0552      	lsls	r2, r2, #21
 8008654:	430a      	orrs	r2, r1
 8008656:	491f      	ldr	r1, [pc, #124]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008658:	4313      	orrs	r3, r2
 800865a:	610b      	str	r3, [r1, #16]
 800865c:	e011      	b.n	8008682 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800865e:	4b1d      	ldr	r3, [pc, #116]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	6892      	ldr	r2, [r2, #8]
 800866e:	0211      	lsls	r1, r2, #8
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6952      	ldr	r2, [r2, #20]
 8008674:	0852      	lsrs	r2, r2, #1
 8008676:	3a01      	subs	r2, #1
 8008678:	0652      	lsls	r2, r2, #25
 800867a:	430a      	orrs	r2, r1
 800867c:	4915      	ldr	r1, [pc, #84]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800867e:	4313      	orrs	r3, r2
 8008680:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008682:	4b14      	ldr	r3, [pc, #80]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a13      	ldr	r2, [pc, #76]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800868c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800868e:	f7fc f871 	bl	8004774 <HAL_GetTick>
 8008692:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008694:	e009      	b.n	80086aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008696:	f7fc f86d 	bl	8004774 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d902      	bls.n	80086aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	73fb      	strb	r3, [r7, #15]
          break;
 80086a8:	e005      	b.n	80086b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086aa:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0ef      	beq.n	8008696 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d106      	bne.n	80086ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	4903      	ldr	r1, [pc, #12]	; (80086d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	40021000 	.word	0x40021000

080086d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e049      	b.n	800877e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d106      	bne.n	8008704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7fb fe28 	bl	8004354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3304      	adds	r3, #4
 8008714:	4619      	mov	r1, r3
 8008716:	4610      	mov	r0, r2
 8008718:	f000 f94c 	bl	80089b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b01      	cmp	r3, #1
 800879a:	d001      	beq.n	80087a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e033      	b.n	8008808 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a19      	ldr	r2, [pc, #100]	; (8008814 <HAL_TIM_Base_Start+0x8c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d009      	beq.n	80087c6 <HAL_TIM_Base_Start+0x3e>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ba:	d004      	beq.n	80087c6 <HAL_TIM_Base_Start+0x3e>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a15      	ldr	r2, [pc, #84]	; (8008818 <HAL_TIM_Base_Start+0x90>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d115      	bne.n	80087f2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	4b13      	ldr	r3, [pc, #76]	; (800881c <HAL_TIM_Base_Start+0x94>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b06      	cmp	r3, #6
 80087d6:	d015      	beq.n	8008804 <HAL_TIM_Base_Start+0x7c>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087de:	d011      	beq.n	8008804 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f0:	e008      	b.n	8008804 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f042 0201 	orr.w	r2, r2, #1
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	e000      	b.n	8008806 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40014000 	.word	0x40014000
 800881c:	00010007 	.word	0x00010007

08008820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <HAL_TIM_ConfigClockSource+0x1c>
 8008838:	2302      	movs	r3, #2
 800883a:	e0b6      	b.n	80089aa <HAL_TIM_ConfigClockSource+0x18a>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800885a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800885e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008878:	d03e      	beq.n	80088f8 <HAL_TIM_ConfigClockSource+0xd8>
 800887a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887e:	f200 8087 	bhi.w	8008990 <HAL_TIM_ConfigClockSource+0x170>
 8008882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008886:	f000 8086 	beq.w	8008996 <HAL_TIM_ConfigClockSource+0x176>
 800888a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800888e:	d87f      	bhi.n	8008990 <HAL_TIM_ConfigClockSource+0x170>
 8008890:	2b70      	cmp	r3, #112	; 0x70
 8008892:	d01a      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0xaa>
 8008894:	2b70      	cmp	r3, #112	; 0x70
 8008896:	d87b      	bhi.n	8008990 <HAL_TIM_ConfigClockSource+0x170>
 8008898:	2b60      	cmp	r3, #96	; 0x60
 800889a:	d050      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x11e>
 800889c:	2b60      	cmp	r3, #96	; 0x60
 800889e:	d877      	bhi.n	8008990 <HAL_TIM_ConfigClockSource+0x170>
 80088a0:	2b50      	cmp	r3, #80	; 0x50
 80088a2:	d03c      	beq.n	800891e <HAL_TIM_ConfigClockSource+0xfe>
 80088a4:	2b50      	cmp	r3, #80	; 0x50
 80088a6:	d873      	bhi.n	8008990 <HAL_TIM_ConfigClockSource+0x170>
 80088a8:	2b40      	cmp	r3, #64	; 0x40
 80088aa:	d058      	beq.n	800895e <HAL_TIM_ConfigClockSource+0x13e>
 80088ac:	2b40      	cmp	r3, #64	; 0x40
 80088ae:	d86f      	bhi.n	8008990 <HAL_TIM_ConfigClockSource+0x170>
 80088b0:	2b30      	cmp	r3, #48	; 0x30
 80088b2:	d064      	beq.n	800897e <HAL_TIM_ConfigClockSource+0x15e>
 80088b4:	2b30      	cmp	r3, #48	; 0x30
 80088b6:	d86b      	bhi.n	8008990 <HAL_TIM_ConfigClockSource+0x170>
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d060      	beq.n	800897e <HAL_TIM_ConfigClockSource+0x15e>
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d867      	bhi.n	8008990 <HAL_TIM_ConfigClockSource+0x170>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d05c      	beq.n	800897e <HAL_TIM_ConfigClockSource+0x15e>
 80088c4:	2b10      	cmp	r3, #16
 80088c6:	d05a      	beq.n	800897e <HAL_TIM_ConfigClockSource+0x15e>
 80088c8:	e062      	b.n	8008990 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088da:	f000 f949 	bl	8008b70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	609a      	str	r2, [r3, #8]
      break;
 80088f6:	e04f      	b.n	8008998 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008908:	f000 f932 	bl	8008b70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689a      	ldr	r2, [r3, #8]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800891a:	609a      	str	r2, [r3, #8]
      break;
 800891c:	e03c      	b.n	8008998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800892a:	461a      	mov	r2, r3
 800892c:	f000 f8a6 	bl	8008a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2150      	movs	r1, #80	; 0x50
 8008936:	4618      	mov	r0, r3
 8008938:	f000 f8ff 	bl	8008b3a <TIM_ITRx_SetConfig>
      break;
 800893c:	e02c      	b.n	8008998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800894a:	461a      	mov	r2, r3
 800894c:	f000 f8c5 	bl	8008ada <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2160      	movs	r1, #96	; 0x60
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f8ef 	bl	8008b3a <TIM_ITRx_SetConfig>
      break;
 800895c:	e01c      	b.n	8008998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800896a:	461a      	mov	r2, r3
 800896c:	f000 f886 	bl	8008a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2140      	movs	r1, #64	; 0x40
 8008976:	4618      	mov	r0, r3
 8008978:	f000 f8df 	bl	8008b3a <TIM_ITRx_SetConfig>
      break;
 800897c:	e00c      	b.n	8008998 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4619      	mov	r1, r3
 8008988:	4610      	mov	r0, r2
 800898a:	f000 f8d6 	bl	8008b3a <TIM_ITRx_SetConfig>
      break;
 800898e:	e003      	b.n	8008998 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	73fb      	strb	r3, [r7, #15]
      break;
 8008994:	e000      	b.n	8008998 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a2a      	ldr	r2, [pc, #168]	; (8008a70 <TIM_Base_SetConfig+0xbc>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_Base_SetConfig+0x20>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d2:	d108      	bne.n	80089e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a21      	ldr	r2, [pc, #132]	; (8008a70 <TIM_Base_SetConfig+0xbc>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00b      	beq.n	8008a06 <TIM_Base_SetConfig+0x52>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f4:	d007      	beq.n	8008a06 <TIM_Base_SetConfig+0x52>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a1e      	ldr	r2, [pc, #120]	; (8008a74 <TIM_Base_SetConfig+0xc0>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d003      	beq.n	8008a06 <TIM_Base_SetConfig+0x52>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a1d      	ldr	r2, [pc, #116]	; (8008a78 <TIM_Base_SetConfig+0xc4>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d108      	bne.n	8008a18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a0c      	ldr	r2, [pc, #48]	; (8008a70 <TIM_Base_SetConfig+0xbc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d007      	beq.n	8008a54 <TIM_Base_SetConfig+0xa0>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a0b      	ldr	r2, [pc, #44]	; (8008a74 <TIM_Base_SetConfig+0xc0>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d003      	beq.n	8008a54 <TIM_Base_SetConfig+0xa0>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a0a      	ldr	r2, [pc, #40]	; (8008a78 <TIM_Base_SetConfig+0xc4>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d103      	bne.n	8008a5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	615a      	str	r2, [r3, #20]
}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40012c00 	.word	0x40012c00
 8008a74:	40014000 	.word	0x40014000
 8008a78:	40014400 	.word	0x40014400

08008a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	f023 0201 	bic.w	r2, r3, #1
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	011b      	lsls	r3, r3, #4
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f023 030a 	bic.w	r3, r3, #10
 8008ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	621a      	str	r2, [r3, #32]
}
 8008ace:	bf00      	nop
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b087      	sub	sp, #28
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	f023 0210 	bic.w	r2, r3, #16
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	031b      	lsls	r3, r3, #12
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	621a      	str	r2, [r3, #32]
}
 8008b2e:	bf00      	nop
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f043 0307 	orr.w	r3, r3, #7
 8008b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	609a      	str	r2, [r3, #8]
}
 8008b64:	bf00      	nop
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	021a      	lsls	r2, r3, #8
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	431a      	orrs	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	609a      	str	r2, [r3, #8]
}
 8008ba4:	bf00      	nop
 8008ba6:	371c      	adds	r7, #28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	e04f      	b.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a21      	ldr	r2, [pc, #132]	; (8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d108      	bne.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bf8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a14      	ldr	r2, [pc, #80]	; (8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d009      	beq.n	8008c3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c30:	d004      	beq.n	8008c3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a10      	ldr	r2, [pc, #64]	; (8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d10c      	bne.n	8008c56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	40012c00 	.word	0x40012c00
 8008c78:	40014000 	.word	0x40014000

08008c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e040      	b.n	8008d10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d106      	bne.n	8008ca4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7fb faca 	bl	8004238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2224      	movs	r2, #36	; 0x24
 8008ca8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0201 	bic.w	r2, r2, #1
 8008cb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 feb0 	bl	8009a28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fc81 	bl	80095d0 <UART_SetConfig>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d101      	bne.n	8008cd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e01b      	b.n	8008d10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0201 	orr.w	r2, r2, #1
 8008d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 ff2f 	bl	8009b6c <UART_CheckIdleState>
 8008d0e:	4603      	mov	r3, r0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08a      	sub	sp, #40	; 0x28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4613      	mov	r3, r2
 8008d24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	d137      	bne.n	8008da0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <HAL_UART_Receive_DMA+0x24>
 8008d36:	88fb      	ldrh	r3, [r7, #6]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e030      	b.n	8008da2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a18      	ldr	r2, [pc, #96]	; (8008dac <HAL_UART_Receive_DMA+0x94>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d01f      	beq.n	8008d90 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d018      	beq.n	8008d90 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	623b      	str	r3, [r7, #32]
 8008d7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	69f9      	ldr	r1, [r7, #28]
 8008d82:	6a3a      	ldr	r2, [r7, #32]
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e6      	bne.n	8008d5e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008d90:	88fb      	ldrh	r3, [r7, #6]
 8008d92:	461a      	mov	r2, r3
 8008d94:	68b9      	ldr	r1, [r7, #8]
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 fff8 	bl	8009d8c <UART_Start_Receive_DMA>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	e000      	b.n	8008da2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008da0:	2302      	movs	r3, #2
  }
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3728      	adds	r7, #40	; 0x28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	40008000 	.word	0x40008000

08008db0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b0a0      	sub	sp, #128	; 0x80
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dc8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8008dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dd8:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008ddc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e6      	bne.n	8008db8 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dfc:	f023 0301 	bic.w	r3, r3, #1
 8008e00:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e0a:	657a      	str	r2, [r7, #84]	; 0x54
 8008e0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e5      	bne.n	8008dea <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d118      	bne.n	8008e58 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	f023 0310 	bic.w	r3, r3, #16
 8008e3a:	677b      	str	r3, [r7, #116]	; 0x74
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e44:	643b      	str	r3, [r7, #64]	; 0x40
 8008e46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e6      	bne.n	8008e26 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e62:	2b80      	cmp	r3, #128	; 0x80
 8008e64:	d137      	bne.n	8008ed6 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e7c:	673b      	str	r3, [r7, #112]	; 0x70
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e5      	bne.n	8008e66 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d019      	beq.n	8008ed6 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fd f95a 	bl	8006168 <HAL_DMA_Abort>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00d      	beq.n	8008ed6 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fd fa80 	bl	80063c4 <HAL_DMA_GetError>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	d105      	bne.n	8008ed6 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2210      	movs	r2, #16
 8008ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e063      	b.n	8008f9e <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee0:	2b40      	cmp	r3, #64	; 0x40
 8008ee2:	d137      	bne.n	8008f54 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3308      	adds	r3, #8
 8008eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008efa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f04:	61ba      	str	r2, [r7, #24]
 8008f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6979      	ldr	r1, [r7, #20]
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	613b      	str	r3, [r7, #16]
   return(result);
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e5      	bne.n	8008ee4 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d019      	beq.n	8008f54 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f24:	2200      	movs	r2, #0
 8008f26:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fd f91b 	bl	8006168 <HAL_DMA_Abort>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00d      	beq.n	8008f54 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fd fa41 	bl	80063c4 <HAL_DMA_GetError>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	d105      	bne.n	8008f54 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2210      	movs	r2, #16
 8008f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e024      	b.n	8008f9e <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	220f      	movs	r2, #15
 8008f6a:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	8b1b      	ldrh	r3, [r3, #24]
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f042 0208 	orr.w	r2, r2, #8
 8008f7c:	b292      	uxth	r2, r2
 8008f7e:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2220      	movs	r2, #32
 8008f84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3780      	adds	r7, #128	; 0x80
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b0ba      	sub	sp, #232	; 0xe8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008fd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d115      	bne.n	8009010 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00f      	beq.n	8009010 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff4:	f003 0320 	and.w	r3, r3, #32
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d009      	beq.n	8009010 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 82ae 	beq.w	8009562 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	4798      	blx	r3
      }
      return;
 800900e:	e2a8      	b.n	8009562 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 8117 	beq.w	8009248 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800901a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009026:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800902a:	4b85      	ldr	r3, [pc, #532]	; (8009240 <HAL_UART_IRQHandler+0x298>)
 800902c:	4013      	ands	r3, r2
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 810a 	beq.w	8009248 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	2b00      	cmp	r3, #0
 800903e:	d011      	beq.n	8009064 <HAL_UART_IRQHandler+0xbc>
 8009040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2201      	movs	r2, #1
 8009052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800905a:	f043 0201 	orr.w	r2, r3, #1
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d011      	beq.n	8009094 <HAL_UART_IRQHandler+0xec>
 8009070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00b      	beq.n	8009094 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2202      	movs	r2, #2
 8009082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800908a:	f043 0204 	orr.w	r2, r3, #4
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	d011      	beq.n	80090c4 <HAL_UART_IRQHandler+0x11c>
 80090a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2204      	movs	r2, #4
 80090b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ba:	f043 0202 	orr.w	r2, r3, #2
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c8:	f003 0308 	and.w	r3, r3, #8
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d017      	beq.n	8009100 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090d4:	f003 0320 	and.w	r3, r3, #32
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d105      	bne.n	80090e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80090dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2208      	movs	r2, #8
 80090ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f6:	f043 0208 	orr.w	r2, r3, #8
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009108:	2b00      	cmp	r3, #0
 800910a:	d012      	beq.n	8009132 <HAL_UART_IRQHandler+0x18a>
 800910c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00c      	beq.n	8009132 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009120:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009128:	f043 0220 	orr.w	r2, r3, #32
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 8214 	beq.w	8009566 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800913e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00d      	beq.n	8009166 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800914a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800914e:	f003 0320 	and.w	r3, r3, #32
 8009152:	2b00      	cmp	r3, #0
 8009154:	d007      	beq.n	8009166 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800916c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917a:	2b40      	cmp	r3, #64	; 0x40
 800917c:	d005      	beq.n	800918a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800917e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009182:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009186:	2b00      	cmp	r3, #0
 8009188:	d04f      	beq.n	800922a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fec4 	bl	8009f18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919a:	2b40      	cmp	r3, #64	; 0x40
 800919c:	d141      	bne.n	8009222 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3308      	adds	r3, #8
 80091c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1d9      	bne.n	800919e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d013      	beq.n	800921a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091f6:	4a13      	ldr	r2, [pc, #76]	; (8009244 <HAL_UART_IRQHandler+0x29c>)
 80091f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fc fff0 	bl	80061e4 <HAL_DMA_Abort_IT>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d017      	beq.n	800923a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800920e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009214:	4610      	mov	r0, r2
 8009216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009218:	e00f      	b.n	800923a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f9c2 	bl	80095a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009220:	e00b      	b.n	800923a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f9be 	bl	80095a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009228:	e007      	b.n	800923a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f9ba 	bl	80095a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009238:	e195      	b.n	8009566 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923a:	bf00      	nop
    return;
 800923c:	e193      	b.n	8009566 <HAL_UART_IRQHandler+0x5be>
 800923e:	bf00      	nop
 8009240:	04000120 	.word	0x04000120
 8009244:	0800a1c9 	.word	0x0800a1c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800924c:	2b01      	cmp	r3, #1
 800924e:	f040 814e 	bne.w	80094ee <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009256:	f003 0310 	and.w	r3, r3, #16
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 8147 	beq.w	80094ee <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009264:	f003 0310 	and.w	r3, r3, #16
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 8140 	beq.w	80094ee <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2210      	movs	r2, #16
 8009274:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009280:	2b40      	cmp	r3, #64	; 0x40
 8009282:	f040 80b8 	bne.w	80093f6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009292:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 8167 	beq.w	800956a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80092a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092a6:	429a      	cmp	r2, r3
 80092a8:	f080 815f 	bcs.w	800956a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0320 	and.w	r3, r3, #32
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f040 8086 	bne.w	80093d4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80092dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800930a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1da      	bne.n	80092c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3308      	adds	r3, #8
 8009318:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009324:	f023 0301 	bic.w	r3, r3, #1
 8009328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3308      	adds	r3, #8
 8009332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009336:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800933a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800933e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e1      	bne.n	8009312 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3308      	adds	r3, #8
 8009354:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800935e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3308      	adds	r3, #8
 800936e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009372:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009374:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009376:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009378:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800937a:	e841 2300 	strex	r3, r2, [r1]
 800937e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1e3      	bne.n	800934e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a4:	f023 0310 	bic.w	r3, r3, #16
 80093a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80093b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e4      	bne.n	8009394 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fc feca 	bl	8006168 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f8e2 	bl	80095b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093f4:	e0b9      	b.n	800956a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009402:	b29b      	uxth	r3, r3
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009410:	b29b      	uxth	r3, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 80ab 	beq.w	800956e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8009418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 80a6 	beq.w	800956e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009444:	647b      	str	r3, [r7, #68]	; 0x44
 8009446:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800944a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e4      	bne.n	8009422 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3308      	adds	r3, #8
 800945e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	623b      	str	r3, [r7, #32]
   return(result);
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	f023 0301 	bic.w	r3, r3, #1
 800946e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3308      	adds	r3, #8
 8009478:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800947c:	633a      	str	r2, [r7, #48]	; 0x30
 800947e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009484:	e841 2300 	strex	r3, r2, [r1]
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1e3      	bne.n	8009458 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2220      	movs	r2, #32
 8009494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f023 0310 	bic.w	r3, r3, #16
 80094b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094c6:	61fb      	str	r3, [r7, #28]
 80094c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	69b9      	ldr	r1, [r7, #24]
 80094cc:	69fa      	ldr	r2, [r7, #28]
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	617b      	str	r3, [r7, #20]
   return(result);
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e4      	bne.n	80094a4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2202      	movs	r2, #2
 80094de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f866 	bl	80095b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094ec:	e03f      	b.n	800956e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00e      	beq.n	8009518 <HAL_UART_IRQHandler+0x570>
 80094fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d008      	beq.n	8009518 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800950e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fe99 	bl	800a248 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009516:	e02d      	b.n	8009574 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800951c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00e      	beq.n	8009542 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952c:	2b00      	cmp	r3, #0
 800952e:	d008      	beq.n	8009542 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01c      	beq.n	8009572 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	4798      	blx	r3
    }
    return;
 8009540:	e017      	b.n	8009572 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954a:	2b00      	cmp	r3, #0
 800954c:	d012      	beq.n	8009574 <HAL_UART_IRQHandler+0x5cc>
 800954e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00c      	beq.n	8009574 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fe4a 	bl	800a1f4 <UART_EndTransmit_IT>
    return;
 8009560:	e008      	b.n	8009574 <HAL_UART_IRQHandler+0x5cc>
      return;
 8009562:	bf00      	nop
 8009564:	e006      	b.n	8009574 <HAL_UART_IRQHandler+0x5cc>
    return;
 8009566:	bf00      	nop
 8009568:	e004      	b.n	8009574 <HAL_UART_IRQHandler+0x5cc>
      return;
 800956a:	bf00      	nop
 800956c:	e002      	b.n	8009574 <HAL_UART_IRQHandler+0x5cc>
      return;
 800956e:	bf00      	nop
 8009570:	e000      	b.n	8009574 <HAL_UART_IRQHandler+0x5cc>
    return;
 8009572:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009574:	37e8      	adds	r7, #232	; 0xe8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop

0800957c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095d4:	b08a      	sub	sp, #40	; 0x28
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	431a      	orrs	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	431a      	orrs	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4bb4      	ldr	r3, [pc, #720]	; (80098d0 <UART_SetConfig+0x300>)
 8009600:	4013      	ands	r3, r2
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	6812      	ldr	r2, [r2, #0]
 8009606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009608:	430b      	orrs	r3, r1
 800960a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	430a      	orrs	r2, r1
 8009620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4aa9      	ldr	r2, [pc, #676]	; (80098d4 <UART_SetConfig+0x304>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d004      	beq.n	800963c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009638:	4313      	orrs	r3, r2
 800963a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964c:	430a      	orrs	r2, r1
 800964e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4aa0      	ldr	r2, [pc, #640]	; (80098d8 <UART_SetConfig+0x308>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d126      	bne.n	80096a8 <UART_SetConfig+0xd8>
 800965a:	4ba0      	ldr	r3, [pc, #640]	; (80098dc <UART_SetConfig+0x30c>)
 800965c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009660:	f003 0303 	and.w	r3, r3, #3
 8009664:	2b03      	cmp	r3, #3
 8009666:	d81b      	bhi.n	80096a0 <UART_SetConfig+0xd0>
 8009668:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <UART_SetConfig+0xa0>)
 800966a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966e:	bf00      	nop
 8009670:	08009681 	.word	0x08009681
 8009674:	08009691 	.word	0x08009691
 8009678:	08009689 	.word	0x08009689
 800967c:	08009699 	.word	0x08009699
 8009680:	2301      	movs	r3, #1
 8009682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009686:	e080      	b.n	800978a <UART_SetConfig+0x1ba>
 8009688:	2302      	movs	r3, #2
 800968a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800968e:	e07c      	b.n	800978a <UART_SetConfig+0x1ba>
 8009690:	2304      	movs	r3, #4
 8009692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009696:	e078      	b.n	800978a <UART_SetConfig+0x1ba>
 8009698:	2308      	movs	r3, #8
 800969a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800969e:	e074      	b.n	800978a <UART_SetConfig+0x1ba>
 80096a0:	2310      	movs	r3, #16
 80096a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096a6:	e070      	b.n	800978a <UART_SetConfig+0x1ba>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a8c      	ldr	r2, [pc, #560]	; (80098e0 <UART_SetConfig+0x310>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d138      	bne.n	8009724 <UART_SetConfig+0x154>
 80096b2:	4b8a      	ldr	r3, [pc, #552]	; (80098dc <UART_SetConfig+0x30c>)
 80096b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b8:	f003 030c 	and.w	r3, r3, #12
 80096bc:	2b0c      	cmp	r3, #12
 80096be:	d82d      	bhi.n	800971c <UART_SetConfig+0x14c>
 80096c0:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <UART_SetConfig+0xf8>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096fd 	.word	0x080096fd
 80096cc:	0800971d 	.word	0x0800971d
 80096d0:	0800971d 	.word	0x0800971d
 80096d4:	0800971d 	.word	0x0800971d
 80096d8:	0800970d 	.word	0x0800970d
 80096dc:	0800971d 	.word	0x0800971d
 80096e0:	0800971d 	.word	0x0800971d
 80096e4:	0800971d 	.word	0x0800971d
 80096e8:	08009705 	.word	0x08009705
 80096ec:	0800971d 	.word	0x0800971d
 80096f0:	0800971d 	.word	0x0800971d
 80096f4:	0800971d 	.word	0x0800971d
 80096f8:	08009715 	.word	0x08009715
 80096fc:	2300      	movs	r3, #0
 80096fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009702:	e042      	b.n	800978a <UART_SetConfig+0x1ba>
 8009704:	2302      	movs	r3, #2
 8009706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800970a:	e03e      	b.n	800978a <UART_SetConfig+0x1ba>
 800970c:	2304      	movs	r3, #4
 800970e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009712:	e03a      	b.n	800978a <UART_SetConfig+0x1ba>
 8009714:	2308      	movs	r3, #8
 8009716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800971a:	e036      	b.n	800978a <UART_SetConfig+0x1ba>
 800971c:	2310      	movs	r3, #16
 800971e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009722:	e032      	b.n	800978a <UART_SetConfig+0x1ba>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a6a      	ldr	r2, [pc, #424]	; (80098d4 <UART_SetConfig+0x304>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d12a      	bne.n	8009784 <UART_SetConfig+0x1b4>
 800972e:	4b6b      	ldr	r3, [pc, #428]	; (80098dc <UART_SetConfig+0x30c>)
 8009730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009734:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800973c:	d01a      	beq.n	8009774 <UART_SetConfig+0x1a4>
 800973e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009742:	d81b      	bhi.n	800977c <UART_SetConfig+0x1ac>
 8009744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009748:	d00c      	beq.n	8009764 <UART_SetConfig+0x194>
 800974a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800974e:	d815      	bhi.n	800977c <UART_SetConfig+0x1ac>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <UART_SetConfig+0x18c>
 8009754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009758:	d008      	beq.n	800976c <UART_SetConfig+0x19c>
 800975a:	e00f      	b.n	800977c <UART_SetConfig+0x1ac>
 800975c:	2300      	movs	r3, #0
 800975e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009762:	e012      	b.n	800978a <UART_SetConfig+0x1ba>
 8009764:	2302      	movs	r3, #2
 8009766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800976a:	e00e      	b.n	800978a <UART_SetConfig+0x1ba>
 800976c:	2304      	movs	r3, #4
 800976e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009772:	e00a      	b.n	800978a <UART_SetConfig+0x1ba>
 8009774:	2308      	movs	r3, #8
 8009776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800977a:	e006      	b.n	800978a <UART_SetConfig+0x1ba>
 800977c:	2310      	movs	r3, #16
 800977e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009782:	e002      	b.n	800978a <UART_SetConfig+0x1ba>
 8009784:	2310      	movs	r3, #16
 8009786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a51      	ldr	r2, [pc, #324]	; (80098d4 <UART_SetConfig+0x304>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d17a      	bne.n	800988a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009798:	2b08      	cmp	r3, #8
 800979a:	d824      	bhi.n	80097e6 <UART_SetConfig+0x216>
 800979c:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <UART_SetConfig+0x1d4>)
 800979e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a2:	bf00      	nop
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	080097e7 	.word	0x080097e7
 80097ac:	080097d1 	.word	0x080097d1
 80097b0:	080097e7 	.word	0x080097e7
 80097b4:	080097d7 	.word	0x080097d7
 80097b8:	080097e7 	.word	0x080097e7
 80097bc:	080097e7 	.word	0x080097e7
 80097c0:	080097e7 	.word	0x080097e7
 80097c4:	080097df 	.word	0x080097df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097c8:	f7fe fc12 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 80097cc:	61f8      	str	r0, [r7, #28]
        break;
 80097ce:	e010      	b.n	80097f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097d0:	4b44      	ldr	r3, [pc, #272]	; (80098e4 <UART_SetConfig+0x314>)
 80097d2:	61fb      	str	r3, [r7, #28]
        break;
 80097d4:	e00d      	b.n	80097f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097d6:	f7fe fb73 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 80097da:	61f8      	str	r0, [r7, #28]
        break;
 80097dc:	e009      	b.n	80097f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097e2:	61fb      	str	r3, [r7, #28]
        break;
 80097e4:	e005      	b.n	80097f2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80097f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 8107 	beq.w	8009a08 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	4613      	mov	r3, r2
 8009800:	005b      	lsls	r3, r3, #1
 8009802:	4413      	add	r3, r2
 8009804:	69fa      	ldr	r2, [r7, #28]
 8009806:	429a      	cmp	r2, r3
 8009808:	d305      	bcc.n	8009816 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009810:	69fa      	ldr	r2, [r7, #28]
 8009812:	429a      	cmp	r2, r3
 8009814:	d903      	bls.n	800981e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800981c:	e0f4      	b.n	8009a08 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	2200      	movs	r2, #0
 8009822:	461c      	mov	r4, r3
 8009824:	4615      	mov	r5, r2
 8009826:	f04f 0200 	mov.w	r2, #0
 800982a:	f04f 0300 	mov.w	r3, #0
 800982e:	022b      	lsls	r3, r5, #8
 8009830:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009834:	0222      	lsls	r2, r4, #8
 8009836:	68f9      	ldr	r1, [r7, #12]
 8009838:	6849      	ldr	r1, [r1, #4]
 800983a:	0849      	lsrs	r1, r1, #1
 800983c:	2000      	movs	r0, #0
 800983e:	4688      	mov	r8, r1
 8009840:	4681      	mov	r9, r0
 8009842:	eb12 0a08 	adds.w	sl, r2, r8
 8009846:	eb43 0b09 	adc.w	fp, r3, r9
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	603b      	str	r3, [r7, #0]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009858:	4650      	mov	r0, sl
 800985a:	4659      	mov	r1, fp
 800985c:	f7f7 fa14 	bl	8000c88 <__aeabi_uldivmod>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4613      	mov	r3, r2
 8009866:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800986e:	d308      	bcc.n	8009882 <UART_SetConfig+0x2b2>
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009876:	d204      	bcs.n	8009882 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	60da      	str	r2, [r3, #12]
 8009880:	e0c2      	b.n	8009a08 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009888:	e0be      	b.n	8009a08 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009892:	d16a      	bne.n	800996a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009898:	2b08      	cmp	r3, #8
 800989a:	d834      	bhi.n	8009906 <UART_SetConfig+0x336>
 800989c:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <UART_SetConfig+0x2d4>)
 800989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a2:	bf00      	nop
 80098a4:	080098c9 	.word	0x080098c9
 80098a8:	080098e9 	.word	0x080098e9
 80098ac:	080098f1 	.word	0x080098f1
 80098b0:	08009907 	.word	0x08009907
 80098b4:	080098f7 	.word	0x080098f7
 80098b8:	08009907 	.word	0x08009907
 80098bc:	08009907 	.word	0x08009907
 80098c0:	08009907 	.word	0x08009907
 80098c4:	080098ff 	.word	0x080098ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098c8:	f7fe fb92 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 80098cc:	61f8      	str	r0, [r7, #28]
        break;
 80098ce:	e020      	b.n	8009912 <UART_SetConfig+0x342>
 80098d0:	efff69f3 	.word	0xefff69f3
 80098d4:	40008000 	.word	0x40008000
 80098d8:	40013800 	.word	0x40013800
 80098dc:	40021000 	.word	0x40021000
 80098e0:	40004400 	.word	0x40004400
 80098e4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098e8:	f7fe fb98 	bl	800801c <HAL_RCC_GetPCLK2Freq>
 80098ec:	61f8      	str	r0, [r7, #28]
        break;
 80098ee:	e010      	b.n	8009912 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098f0:	4b4c      	ldr	r3, [pc, #304]	; (8009a24 <UART_SetConfig+0x454>)
 80098f2:	61fb      	str	r3, [r7, #28]
        break;
 80098f4:	e00d      	b.n	8009912 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098f6:	f7fe fae3 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 80098fa:	61f8      	str	r0, [r7, #28]
        break;
 80098fc:	e009      	b.n	8009912 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009902:	61fb      	str	r3, [r7, #28]
        break;
 8009904:	e005      	b.n	8009912 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d077      	beq.n	8009a08 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	005a      	lsls	r2, r3, #1
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	085b      	lsrs	r3, r3, #1
 8009922:	441a      	add	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	fbb2 f3f3 	udiv	r3, r2, r3
 800992c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	2b0f      	cmp	r3, #15
 8009932:	d916      	bls.n	8009962 <UART_SetConfig+0x392>
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800993a:	d212      	bcs.n	8009962 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	b29b      	uxth	r3, r3
 8009940:	f023 030f 	bic.w	r3, r3, #15
 8009944:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	085b      	lsrs	r3, r3, #1
 800994a:	b29b      	uxth	r3, r3
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	b29a      	uxth	r2, r3
 8009952:	8afb      	ldrh	r3, [r7, #22]
 8009954:	4313      	orrs	r3, r2
 8009956:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	8afa      	ldrh	r2, [r7, #22]
 800995e:	60da      	str	r2, [r3, #12]
 8009960:	e052      	b.n	8009a08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009968:	e04e      	b.n	8009a08 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800996a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800996e:	2b08      	cmp	r3, #8
 8009970:	d827      	bhi.n	80099c2 <UART_SetConfig+0x3f2>
 8009972:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <UART_SetConfig+0x3a8>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	0800999d 	.word	0x0800999d
 800997c:	080099a5 	.word	0x080099a5
 8009980:	080099ad 	.word	0x080099ad
 8009984:	080099c3 	.word	0x080099c3
 8009988:	080099b3 	.word	0x080099b3
 800998c:	080099c3 	.word	0x080099c3
 8009990:	080099c3 	.word	0x080099c3
 8009994:	080099c3 	.word	0x080099c3
 8009998:	080099bb 	.word	0x080099bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800999c:	f7fe fb28 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 80099a0:	61f8      	str	r0, [r7, #28]
        break;
 80099a2:	e014      	b.n	80099ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099a4:	f7fe fb3a 	bl	800801c <HAL_RCC_GetPCLK2Freq>
 80099a8:	61f8      	str	r0, [r7, #28]
        break;
 80099aa:	e010      	b.n	80099ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099ac:	4b1d      	ldr	r3, [pc, #116]	; (8009a24 <UART_SetConfig+0x454>)
 80099ae:	61fb      	str	r3, [r7, #28]
        break;
 80099b0:	e00d      	b.n	80099ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099b2:	f7fe fa85 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 80099b6:	61f8      	str	r0, [r7, #28]
        break;
 80099b8:	e009      	b.n	80099ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099be:	61fb      	str	r3, [r7, #28]
        break;
 80099c0:	e005      	b.n	80099ce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80099cc:	bf00      	nop
    }

    if (pclk != 0U)
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d019      	beq.n	8009a08 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	085a      	lsrs	r2, r3, #1
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	441a      	add	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	2b0f      	cmp	r3, #15
 80099ec:	d909      	bls.n	8009a02 <UART_SetConfig+0x432>
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f4:	d205      	bcs.n	8009a02 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60da      	str	r2, [r3, #12]
 8009a00:	e002      	b.n	8009a08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009a14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3728      	adds	r7, #40	; 0x28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a22:	bf00      	nop
 8009a24:	00f42400 	.word	0x00f42400

08009a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	f003 0308 	and.w	r3, r3, #8
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00a      	beq.n	8009a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	f003 0304 	and.w	r3, r3, #4
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	f003 0310 	and.w	r3, r3, #16
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00a      	beq.n	8009ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	f003 0320 	and.w	r3, r3, #32
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00a      	beq.n	8009afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	430a      	orrs	r2, r1
 8009afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d01a      	beq.n	8009b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b26:	d10a      	bne.n	8009b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	430a      	orrs	r2, r1
 8009b5e:	605a      	str	r2, [r3, #4]
  }
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b098      	sub	sp, #96	; 0x60
 8009b70:	af02      	add	r7, sp, #8
 8009b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b7c:	f7fa fdfa 	bl	8004774 <HAL_GetTick>
 8009b80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0308 	and.w	r3, r3, #8
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d12e      	bne.n	8009bee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f88c 	bl	8009cbc <UART_WaitOnFlagUntilTimeout>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d021      	beq.n	8009bee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb2:	e853 3f00 	ldrex	r3, [r3]
 8009bb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8009bca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bd0:	e841 2300 	strex	r3, r2, [r1]
 8009bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e6      	bne.n	8009baa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2220      	movs	r2, #32
 8009be0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e062      	b.n	8009cb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	d149      	bne.n	8009c90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c04:	2200      	movs	r2, #0
 8009c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f856 	bl	8009cbc <UART_WaitOnFlagUntilTimeout>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d03c      	beq.n	8009c90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	e853 3f00 	ldrex	r3, [r3]
 8009c22:	623b      	str	r3, [r7, #32]
   return(result);
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c34:	633b      	str	r3, [r7, #48]	; 0x30
 8009c36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c3c:	e841 2300 	strex	r3, r2, [r1]
 8009c40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1e6      	bne.n	8009c16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	e853 3f00 	ldrex	r3, [r3]
 8009c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f023 0301 	bic.w	r3, r3, #1
 8009c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3308      	adds	r3, #8
 8009c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c68:	61fa      	str	r2, [r7, #28]
 8009c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6c:	69b9      	ldr	r1, [r7, #24]
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	e841 2300 	strex	r3, r2, [r1]
 8009c74:	617b      	str	r3, [r7, #20]
   return(result);
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e5      	bne.n	8009c48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2220      	movs	r2, #32
 8009c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e011      	b.n	8009cb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2220      	movs	r2, #32
 8009c94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3758      	adds	r7, #88	; 0x58
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ccc:	e049      	b.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd4:	d045      	beq.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cd6:	f7fa fd4d 	bl	8004774 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	69ba      	ldr	r2, [r7, #24]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d302      	bcc.n	8009cec <UART_WaitOnFlagUntilTimeout+0x30>
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e048      	b.n	8009d82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0304 	and.w	r3, r3, #4
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d031      	beq.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	f003 0308 	and.w	r3, r3, #8
 8009d08:	2b08      	cmp	r3, #8
 8009d0a:	d110      	bne.n	8009d2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2208      	movs	r2, #8
 8009d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f8ff 	bl	8009f18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e029      	b.n	8009d82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d3c:	d111      	bne.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f000 f8e5 	bl	8009f18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e00f      	b.n	8009d82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69da      	ldr	r2, [r3, #28]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	bf0c      	ite	eq
 8009d72:	2301      	moveq	r3, #1
 8009d74:	2300      	movne	r3, #0
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	461a      	mov	r2, r3
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d0a6      	beq.n	8009cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b096      	sub	sp, #88	; 0x58
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	4613      	mov	r3, r2
 8009d98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	88fa      	ldrh	r2, [r7, #6]
 8009da4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2222      	movs	r2, #34	; 0x22
 8009db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d028      	beq.n	8009e12 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dc4:	4a3e      	ldr	r2, [pc, #248]	; (8009ec0 <UART_Start_Receive_DMA+0x134>)
 8009dc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dcc:	4a3d      	ldr	r2, [pc, #244]	; (8009ec4 <UART_Start_Receive_DMA+0x138>)
 8009dce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dd4:	4a3c      	ldr	r2, [pc, #240]	; (8009ec8 <UART_Start_Receive_DMA+0x13c>)
 8009dd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ddc:	2200      	movs	r2, #0
 8009dde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3324      	adds	r3, #36	; 0x24
 8009dea:	4619      	mov	r1, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df0:	461a      	mov	r2, r3
 8009df2:	88fb      	ldrh	r3, [r7, #6]
 8009df4:	f7fc f958 	bl	80060a8 <HAL_DMA_Start_IT>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d009      	beq.n	8009e12 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2210      	movs	r2, #16
 8009e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e051      	b.n	8009eb6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d018      	beq.n	8009e4c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e22:	e853 3f00 	ldrex	r3, [r3]
 8009e26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	461a      	mov	r2, r3
 8009e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e3a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e40:	e841 2300 	strex	r3, r2, [r1]
 8009e44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1e6      	bne.n	8009e1a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3308      	adds	r3, #8
 8009e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	e853 3f00 	ldrex	r3, [r3]
 8009e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	653b      	str	r3, [r7, #80]	; 0x50
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3308      	adds	r3, #8
 8009e6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e6c:	637a      	str	r2, [r7, #52]	; 0x34
 8009e6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e74:	e841 2300 	strex	r3, r2, [r1]
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e5      	bne.n	8009e4c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3308      	adds	r3, #8
 8009e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ea0:	623a      	str	r2, [r7, #32]
 8009ea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	69f9      	ldr	r1, [r7, #28]
 8009ea6:	6a3a      	ldr	r2, [r7, #32]
 8009ea8:	e841 2300 	strex	r3, r2, [r1]
 8009eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e5      	bne.n	8009e80 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3758      	adds	r7, #88	; 0x58
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	08009fe1 	.word	0x08009fe1
 8009ec4:	0800a10d 	.word	0x0800a10d
 8009ec8:	0800a14b 	.word	0x0800a14b

08009ecc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b089      	sub	sp, #36	; 0x24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ee8:	61fb      	str	r3, [r7, #28]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	61bb      	str	r3, [r7, #24]
 8009ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef6:	6979      	ldr	r1, [r7, #20]
 8009ef8:	69ba      	ldr	r2, [r7, #24]
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	613b      	str	r3, [r7, #16]
   return(result);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e6      	bne.n	8009ed4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2220      	movs	r2, #32
 8009f0a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009f0c:	bf00      	nop
 8009f0e:	3724      	adds	r7, #36	; 0x24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b095      	sub	sp, #84	; 0x54
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f28:	e853 3f00 	ldrex	r3, [r3]
 8009f2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8009f40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f46:	e841 2300 	strex	r3, r2, [r1]
 8009f4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1e6      	bne.n	8009f20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3308      	adds	r3, #8
 8009f58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	f023 0301 	bic.w	r3, r3, #1
 8009f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e5      	bne.n	8009f52 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d118      	bne.n	8009fc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f023 0310 	bic.w	r3, r3, #16
 8009fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fac:	61bb      	str	r3, [r7, #24]
 8009fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	6979      	ldr	r1, [r7, #20]
 8009fb2:	69ba      	ldr	r2, [r7, #24]
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e6      	bne.n	8009f8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009fd4:	bf00      	nop
 8009fd6:	3754      	adds	r7, #84	; 0x54
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b09c      	sub	sp, #112	; 0x70
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fec:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0320 	and.w	r3, r3, #32
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d171      	bne.n	800a0e0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ffe:	2200      	movs	r2, #0
 800a000:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a018:	66bb      	str	r3, [r7, #104]	; 0x68
 800a01a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a022:	65bb      	str	r3, [r7, #88]	; 0x58
 800a024:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a02a:	e841 2300 	strex	r3, r2, [r1]
 800a02e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e6      	bne.n	800a004 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3308      	adds	r3, #8
 800a03c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	e853 3f00 	ldrex	r3, [r3]
 800a044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a048:	f023 0301 	bic.w	r3, r3, #1
 800a04c:	667b      	str	r3, [r7, #100]	; 0x64
 800a04e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3308      	adds	r3, #8
 800a054:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a056:	647a      	str	r2, [r7, #68]	; 0x44
 800a058:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a05c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e5      	bne.n	800a036 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3308      	adds	r3, #8
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	e853 3f00 	ldrex	r3, [r3]
 800a078:	623b      	str	r3, [r7, #32]
   return(result);
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a080:	663b      	str	r3, [r7, #96]	; 0x60
 800a082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3308      	adds	r3, #8
 800a088:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a08a:	633a      	str	r2, [r7, #48]	; 0x30
 800a08c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a092:	e841 2300 	strex	r3, r2, [r1]
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1e5      	bne.n	800a06a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d118      	bne.n	800a0e0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	e853 3f00 	ldrex	r3, [r3]
 800a0ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 0310 	bic.w	r3, r3, #16
 800a0c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d0:	69b9      	ldr	r1, [r7, #24]
 800a0d2:	69fa      	ldr	r2, [r7, #28]
 800a0d4:	e841 2300 	strex	r3, r2, [r1]
 800a0d8:	617b      	str	r3, [r7, #20]
   return(result);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1e6      	bne.n	800a0ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d107      	bne.n	800a0fe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a0f8:	f7ff fa5e 	bl	80095b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0fc:	e002      	b.n	800a104 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a0fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a100:	f7f7 f806 	bl	8001110 <HAL_UART_RxCpltCallback>
}
 800a104:	bf00      	nop
 800a106:	3770      	adds	r7, #112	; 0x70
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a118:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2201      	movs	r2, #1
 800a11e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a124:	2b01      	cmp	r3, #1
 800a126:	d109      	bne.n	800a13c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a12e:	085b      	lsrs	r3, r3, #1
 800a130:	b29b      	uxth	r3, r3
 800a132:	4619      	mov	r1, r3
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7ff fa3f 	bl	80095b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a13a:	e002      	b.n	800a142 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f7ff fa27 	bl	8009590 <HAL_UART_RxHalfCpltCallback>
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b086      	sub	sp, #24
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a15c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a164:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a170:	2b80      	cmp	r3, #128	; 0x80
 800a172:	d109      	bne.n	800a188 <UART_DMAError+0x3e>
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	2b21      	cmp	r3, #33	; 0x21
 800a178:	d106      	bne.n	800a188 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a182:	6978      	ldr	r0, [r7, #20]
 800a184:	f7ff fea2 	bl	8009ecc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a192:	2b40      	cmp	r3, #64	; 0x40
 800a194:	d109      	bne.n	800a1aa <UART_DMAError+0x60>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b22      	cmp	r3, #34	; 0x22
 800a19a:	d106      	bne.n	800a1aa <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a1a4:	6978      	ldr	r0, [r7, #20]
 800a1a6:	f7ff feb7 	bl	8009f18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1b0:	f043 0210 	orr.w	r2, r3, #16
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1ba:	6978      	ldr	r0, [r7, #20]
 800a1bc:	f7ff f9f2 	bl	80095a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1c0:	bf00      	nop
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7ff f9dc 	bl	80095a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1ec:	bf00      	nop
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b088      	sub	sp, #32
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	60bb      	str	r3, [r7, #8]
   return(result);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a210:	61fb      	str	r3, [r7, #28]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	61bb      	str	r3, [r7, #24]
 800a21c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6979      	ldr	r1, [r7, #20]
 800a220:	69ba      	ldr	r2, [r7, #24]
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	613b      	str	r3, [r7, #16]
   return(result);
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e6      	bne.n	800a1fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7ff f99e 	bl	800957c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a240:	bf00      	nop
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <malloc>:
 800a25c:	4b02      	ldr	r3, [pc, #8]	; (800a268 <malloc+0xc>)
 800a25e:	4601      	mov	r1, r0
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	f000 b82b 	b.w	800a2bc <_malloc_r>
 800a266:	bf00      	nop
 800a268:	200001f0 	.word	0x200001f0

0800a26c <free>:
 800a26c:	4b02      	ldr	r3, [pc, #8]	; (800a278 <free+0xc>)
 800a26e:	4601      	mov	r1, r0
 800a270:	6818      	ldr	r0, [r3, #0]
 800a272:	f002 bf57 	b.w	800d124 <_free_r>
 800a276:	bf00      	nop
 800a278:	200001f0 	.word	0x200001f0

0800a27c <sbrk_aligned>:
 800a27c:	b570      	push	{r4, r5, r6, lr}
 800a27e:	4e0e      	ldr	r6, [pc, #56]	; (800a2b8 <sbrk_aligned+0x3c>)
 800a280:	460c      	mov	r4, r1
 800a282:	6831      	ldr	r1, [r6, #0]
 800a284:	4605      	mov	r5, r0
 800a286:	b911      	cbnz	r1, 800a28e <sbrk_aligned+0x12>
 800a288:	f002 f840 	bl	800c30c <_sbrk_r>
 800a28c:	6030      	str	r0, [r6, #0]
 800a28e:	4621      	mov	r1, r4
 800a290:	4628      	mov	r0, r5
 800a292:	f002 f83b 	bl	800c30c <_sbrk_r>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	d00a      	beq.n	800a2b0 <sbrk_aligned+0x34>
 800a29a:	1cc4      	adds	r4, r0, #3
 800a29c:	f024 0403 	bic.w	r4, r4, #3
 800a2a0:	42a0      	cmp	r0, r4
 800a2a2:	d007      	beq.n	800a2b4 <sbrk_aligned+0x38>
 800a2a4:	1a21      	subs	r1, r4, r0
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f002 f830 	bl	800c30c <_sbrk_r>
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	d101      	bne.n	800a2b4 <sbrk_aligned+0x38>
 800a2b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}
 800a2b8:	20000bdc 	.word	0x20000bdc

0800a2bc <_malloc_r>:
 800a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	1ccd      	adds	r5, r1, #3
 800a2c2:	f025 0503 	bic.w	r5, r5, #3
 800a2c6:	3508      	adds	r5, #8
 800a2c8:	2d0c      	cmp	r5, #12
 800a2ca:	bf38      	it	cc
 800a2cc:	250c      	movcc	r5, #12
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	4607      	mov	r7, r0
 800a2d2:	db01      	blt.n	800a2d8 <_malloc_r+0x1c>
 800a2d4:	42a9      	cmp	r1, r5
 800a2d6:	d905      	bls.n	800a2e4 <_malloc_r+0x28>
 800a2d8:	230c      	movs	r3, #12
 800a2da:	603b      	str	r3, [r7, #0]
 800a2dc:	2600      	movs	r6, #0
 800a2de:	4630      	mov	r0, r6
 800a2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a3b8 <_malloc_r+0xfc>
 800a2e8:	f000 f868 	bl	800a3bc <__malloc_lock>
 800a2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a2f0:	461c      	mov	r4, r3
 800a2f2:	bb5c      	cbnz	r4, 800a34c <_malloc_r+0x90>
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	f7ff ffc0 	bl	800a27c <sbrk_aligned>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	4604      	mov	r4, r0
 800a300:	d155      	bne.n	800a3ae <_malloc_r+0xf2>
 800a302:	f8d8 4000 	ldr.w	r4, [r8]
 800a306:	4626      	mov	r6, r4
 800a308:	2e00      	cmp	r6, #0
 800a30a:	d145      	bne.n	800a398 <_malloc_r+0xdc>
 800a30c:	2c00      	cmp	r4, #0
 800a30e:	d048      	beq.n	800a3a2 <_malloc_r+0xe6>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	4631      	mov	r1, r6
 800a314:	4638      	mov	r0, r7
 800a316:	eb04 0903 	add.w	r9, r4, r3
 800a31a:	f001 fff7 	bl	800c30c <_sbrk_r>
 800a31e:	4581      	cmp	r9, r0
 800a320:	d13f      	bne.n	800a3a2 <_malloc_r+0xe6>
 800a322:	6821      	ldr	r1, [r4, #0]
 800a324:	1a6d      	subs	r5, r5, r1
 800a326:	4629      	mov	r1, r5
 800a328:	4638      	mov	r0, r7
 800a32a:	f7ff ffa7 	bl	800a27c <sbrk_aligned>
 800a32e:	3001      	adds	r0, #1
 800a330:	d037      	beq.n	800a3a2 <_malloc_r+0xe6>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	442b      	add	r3, r5
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	f8d8 3000 	ldr.w	r3, [r8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d038      	beq.n	800a3b2 <_malloc_r+0xf6>
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	42a2      	cmp	r2, r4
 800a344:	d12b      	bne.n	800a39e <_malloc_r+0xe2>
 800a346:	2200      	movs	r2, #0
 800a348:	605a      	str	r2, [r3, #4]
 800a34a:	e00f      	b.n	800a36c <_malloc_r+0xb0>
 800a34c:	6822      	ldr	r2, [r4, #0]
 800a34e:	1b52      	subs	r2, r2, r5
 800a350:	d41f      	bmi.n	800a392 <_malloc_r+0xd6>
 800a352:	2a0b      	cmp	r2, #11
 800a354:	d917      	bls.n	800a386 <_malloc_r+0xca>
 800a356:	1961      	adds	r1, r4, r5
 800a358:	42a3      	cmp	r3, r4
 800a35a:	6025      	str	r5, [r4, #0]
 800a35c:	bf18      	it	ne
 800a35e:	6059      	strne	r1, [r3, #4]
 800a360:	6863      	ldr	r3, [r4, #4]
 800a362:	bf08      	it	eq
 800a364:	f8c8 1000 	streq.w	r1, [r8]
 800a368:	5162      	str	r2, [r4, r5]
 800a36a:	604b      	str	r3, [r1, #4]
 800a36c:	4638      	mov	r0, r7
 800a36e:	f104 060b 	add.w	r6, r4, #11
 800a372:	f000 f829 	bl	800a3c8 <__malloc_unlock>
 800a376:	f026 0607 	bic.w	r6, r6, #7
 800a37a:	1d23      	adds	r3, r4, #4
 800a37c:	1af2      	subs	r2, r6, r3
 800a37e:	d0ae      	beq.n	800a2de <_malloc_r+0x22>
 800a380:	1b9b      	subs	r3, r3, r6
 800a382:	50a3      	str	r3, [r4, r2]
 800a384:	e7ab      	b.n	800a2de <_malloc_r+0x22>
 800a386:	42a3      	cmp	r3, r4
 800a388:	6862      	ldr	r2, [r4, #4]
 800a38a:	d1dd      	bne.n	800a348 <_malloc_r+0x8c>
 800a38c:	f8c8 2000 	str.w	r2, [r8]
 800a390:	e7ec      	b.n	800a36c <_malloc_r+0xb0>
 800a392:	4623      	mov	r3, r4
 800a394:	6864      	ldr	r4, [r4, #4]
 800a396:	e7ac      	b.n	800a2f2 <_malloc_r+0x36>
 800a398:	4634      	mov	r4, r6
 800a39a:	6876      	ldr	r6, [r6, #4]
 800a39c:	e7b4      	b.n	800a308 <_malloc_r+0x4c>
 800a39e:	4613      	mov	r3, r2
 800a3a0:	e7cc      	b.n	800a33c <_malloc_r+0x80>
 800a3a2:	230c      	movs	r3, #12
 800a3a4:	603b      	str	r3, [r7, #0]
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	f000 f80e 	bl	800a3c8 <__malloc_unlock>
 800a3ac:	e797      	b.n	800a2de <_malloc_r+0x22>
 800a3ae:	6025      	str	r5, [r4, #0]
 800a3b0:	e7dc      	b.n	800a36c <_malloc_r+0xb0>
 800a3b2:	605b      	str	r3, [r3, #4]
 800a3b4:	deff      	udf	#255	; 0xff
 800a3b6:	bf00      	nop
 800a3b8:	20000bd8 	.word	0x20000bd8

0800a3bc <__malloc_lock>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	; (800a3c4 <__malloc_lock+0x8>)
 800a3be:	f001 bff2 	b.w	800c3a6 <__retarget_lock_acquire_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	20000d20 	.word	0x20000d20

0800a3c8 <__malloc_unlock>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	; (800a3d0 <__malloc_unlock+0x8>)
 800a3ca:	f001 bfed 	b.w	800c3a8 <__retarget_lock_release_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	20000d20 	.word	0x20000d20

0800a3d4 <sulp>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	460d      	mov	r5, r1
 800a3da:	ec45 4b10 	vmov	d0, r4, r5
 800a3de:	4616      	mov	r6, r2
 800a3e0:	f003 fdc2 	bl	800df68 <__ulp>
 800a3e4:	ec51 0b10 	vmov	r0, r1, d0
 800a3e8:	b17e      	cbz	r6, 800a40a <sulp+0x36>
 800a3ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a3ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	dd09      	ble.n	800a40a <sulp+0x36>
 800a3f6:	051b      	lsls	r3, r3, #20
 800a3f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a3fc:	2400      	movs	r4, #0
 800a3fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a402:	4622      	mov	r2, r4
 800a404:	462b      	mov	r3, r5
 800a406:	f7f6 f8f7 	bl	80005f8 <__aeabi_dmul>
 800a40a:	bd70      	pop	{r4, r5, r6, pc}
 800a40c:	0000      	movs	r0, r0
	...

0800a410 <_strtod_l>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	ed2d 8b02 	vpush	{d8}
 800a418:	b09b      	sub	sp, #108	; 0x6c
 800a41a:	4604      	mov	r4, r0
 800a41c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a41e:	2200      	movs	r2, #0
 800a420:	9216      	str	r2, [sp, #88]	; 0x58
 800a422:	460d      	mov	r5, r1
 800a424:	f04f 0800 	mov.w	r8, #0
 800a428:	f04f 0900 	mov.w	r9, #0
 800a42c:	460a      	mov	r2, r1
 800a42e:	9215      	str	r2, [sp, #84]	; 0x54
 800a430:	7811      	ldrb	r1, [r2, #0]
 800a432:	292b      	cmp	r1, #43	; 0x2b
 800a434:	d04c      	beq.n	800a4d0 <_strtod_l+0xc0>
 800a436:	d83a      	bhi.n	800a4ae <_strtod_l+0x9e>
 800a438:	290d      	cmp	r1, #13
 800a43a:	d834      	bhi.n	800a4a6 <_strtod_l+0x96>
 800a43c:	2908      	cmp	r1, #8
 800a43e:	d834      	bhi.n	800a4aa <_strtod_l+0x9a>
 800a440:	2900      	cmp	r1, #0
 800a442:	d03d      	beq.n	800a4c0 <_strtod_l+0xb0>
 800a444:	2200      	movs	r2, #0
 800a446:	920a      	str	r2, [sp, #40]	; 0x28
 800a448:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a44a:	7832      	ldrb	r2, [r6, #0]
 800a44c:	2a30      	cmp	r2, #48	; 0x30
 800a44e:	f040 80b4 	bne.w	800a5ba <_strtod_l+0x1aa>
 800a452:	7872      	ldrb	r2, [r6, #1]
 800a454:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a458:	2a58      	cmp	r2, #88	; 0x58
 800a45a:	d170      	bne.n	800a53e <_strtod_l+0x12e>
 800a45c:	9302      	str	r3, [sp, #8]
 800a45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	ab16      	add	r3, sp, #88	; 0x58
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	4a8e      	ldr	r2, [pc, #568]	; (800a6a0 <_strtod_l+0x290>)
 800a468:	ab17      	add	r3, sp, #92	; 0x5c
 800a46a:	a915      	add	r1, sp, #84	; 0x54
 800a46c:	4620      	mov	r0, r4
 800a46e:	f002 ff0d 	bl	800d28c <__gethex>
 800a472:	f010 070f 	ands.w	r7, r0, #15
 800a476:	4605      	mov	r5, r0
 800a478:	d005      	beq.n	800a486 <_strtod_l+0x76>
 800a47a:	2f06      	cmp	r7, #6
 800a47c:	d12a      	bne.n	800a4d4 <_strtod_l+0xc4>
 800a47e:	3601      	adds	r6, #1
 800a480:	2300      	movs	r3, #0
 800a482:	9615      	str	r6, [sp, #84]	; 0x54
 800a484:	930a      	str	r3, [sp, #40]	; 0x28
 800a486:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f040 857f 	bne.w	800af8c <_strtod_l+0xb7c>
 800a48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a490:	b1db      	cbz	r3, 800a4ca <_strtod_l+0xba>
 800a492:	4642      	mov	r2, r8
 800a494:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a498:	ec43 2b10 	vmov	d0, r2, r3
 800a49c:	b01b      	add	sp, #108	; 0x6c
 800a49e:	ecbd 8b02 	vpop	{d8}
 800a4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a6:	2920      	cmp	r1, #32
 800a4a8:	d1cc      	bne.n	800a444 <_strtod_l+0x34>
 800a4aa:	3201      	adds	r2, #1
 800a4ac:	e7bf      	b.n	800a42e <_strtod_l+0x1e>
 800a4ae:	292d      	cmp	r1, #45	; 0x2d
 800a4b0:	d1c8      	bne.n	800a444 <_strtod_l+0x34>
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	910a      	str	r1, [sp, #40]	; 0x28
 800a4b6:	1c51      	adds	r1, r2, #1
 800a4b8:	9115      	str	r1, [sp, #84]	; 0x54
 800a4ba:	7852      	ldrb	r2, [r2, #1]
 800a4bc:	2a00      	cmp	r2, #0
 800a4be:	d1c3      	bne.n	800a448 <_strtod_l+0x38>
 800a4c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4c2:	9515      	str	r5, [sp, #84]	; 0x54
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f040 855f 	bne.w	800af88 <_strtod_l+0xb78>
 800a4ca:	4642      	mov	r2, r8
 800a4cc:	464b      	mov	r3, r9
 800a4ce:	e7e3      	b.n	800a498 <_strtod_l+0x88>
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	e7ef      	b.n	800a4b4 <_strtod_l+0xa4>
 800a4d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a4d6:	b13a      	cbz	r2, 800a4e8 <_strtod_l+0xd8>
 800a4d8:	2135      	movs	r1, #53	; 0x35
 800a4da:	a818      	add	r0, sp, #96	; 0x60
 800a4dc:	f003 fe41 	bl	800e162 <__copybits>
 800a4e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f003 fa14 	bl	800d910 <_Bfree>
 800a4e8:	3f01      	subs	r7, #1
 800a4ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4ec:	2f04      	cmp	r7, #4
 800a4ee:	d806      	bhi.n	800a4fe <_strtod_l+0xee>
 800a4f0:	e8df f007 	tbb	[pc, r7]
 800a4f4:	201d0314 	.word	0x201d0314
 800a4f8:	14          	.byte	0x14
 800a4f9:	00          	.byte	0x00
 800a4fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a4fe:	05e9      	lsls	r1, r5, #23
 800a500:	bf48      	it	mi
 800a502:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a506:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a50a:	0d1b      	lsrs	r3, r3, #20
 800a50c:	051b      	lsls	r3, r3, #20
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1b9      	bne.n	800a486 <_strtod_l+0x76>
 800a512:	f001 ff1d 	bl	800c350 <__errno>
 800a516:	2322      	movs	r3, #34	; 0x22
 800a518:	6003      	str	r3, [r0, #0]
 800a51a:	e7b4      	b.n	800a486 <_strtod_l+0x76>
 800a51c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a520:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a524:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a528:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a52c:	e7e7      	b.n	800a4fe <_strtod_l+0xee>
 800a52e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a6a8 <_strtod_l+0x298>
 800a532:	e7e4      	b.n	800a4fe <_strtod_l+0xee>
 800a534:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a538:	f04f 38ff 	mov.w	r8, #4294967295
 800a53c:	e7df      	b.n	800a4fe <_strtod_l+0xee>
 800a53e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	9215      	str	r2, [sp, #84]	; 0x54
 800a544:	785b      	ldrb	r3, [r3, #1]
 800a546:	2b30      	cmp	r3, #48	; 0x30
 800a548:	d0f9      	beq.n	800a53e <_strtod_l+0x12e>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d09b      	beq.n	800a486 <_strtod_l+0x76>
 800a54e:	2301      	movs	r3, #1
 800a550:	f04f 0a00 	mov.w	sl, #0
 800a554:	9304      	str	r3, [sp, #16]
 800a556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a558:	930b      	str	r3, [sp, #44]	; 0x2c
 800a55a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a55e:	46d3      	mov	fp, sl
 800a560:	220a      	movs	r2, #10
 800a562:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a564:	7806      	ldrb	r6, [r0, #0]
 800a566:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a56a:	b2d9      	uxtb	r1, r3
 800a56c:	2909      	cmp	r1, #9
 800a56e:	d926      	bls.n	800a5be <_strtod_l+0x1ae>
 800a570:	494c      	ldr	r1, [pc, #304]	; (800a6a4 <_strtod_l+0x294>)
 800a572:	2201      	movs	r2, #1
 800a574:	f001 fe0d 	bl	800c192 <strncmp>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d030      	beq.n	800a5de <_strtod_l+0x1ce>
 800a57c:	2000      	movs	r0, #0
 800a57e:	4632      	mov	r2, r6
 800a580:	9005      	str	r0, [sp, #20]
 800a582:	465e      	mov	r6, fp
 800a584:	4603      	mov	r3, r0
 800a586:	2a65      	cmp	r2, #101	; 0x65
 800a588:	d001      	beq.n	800a58e <_strtod_l+0x17e>
 800a58a:	2a45      	cmp	r2, #69	; 0x45
 800a58c:	d113      	bne.n	800a5b6 <_strtod_l+0x1a6>
 800a58e:	b91e      	cbnz	r6, 800a598 <_strtod_l+0x188>
 800a590:	9a04      	ldr	r2, [sp, #16]
 800a592:	4302      	orrs	r2, r0
 800a594:	d094      	beq.n	800a4c0 <_strtod_l+0xb0>
 800a596:	2600      	movs	r6, #0
 800a598:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a59a:	1c6a      	adds	r2, r5, #1
 800a59c:	9215      	str	r2, [sp, #84]	; 0x54
 800a59e:	786a      	ldrb	r2, [r5, #1]
 800a5a0:	2a2b      	cmp	r2, #43	; 0x2b
 800a5a2:	d074      	beq.n	800a68e <_strtod_l+0x27e>
 800a5a4:	2a2d      	cmp	r2, #45	; 0x2d
 800a5a6:	d078      	beq.n	800a69a <_strtod_l+0x28a>
 800a5a8:	f04f 0c00 	mov.w	ip, #0
 800a5ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a5b0:	2909      	cmp	r1, #9
 800a5b2:	d97f      	bls.n	800a6b4 <_strtod_l+0x2a4>
 800a5b4:	9515      	str	r5, [sp, #84]	; 0x54
 800a5b6:	2700      	movs	r7, #0
 800a5b8:	e09e      	b.n	800a6f8 <_strtod_l+0x2e8>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	e7c8      	b.n	800a550 <_strtod_l+0x140>
 800a5be:	f1bb 0f08 	cmp.w	fp, #8
 800a5c2:	bfd8      	it	le
 800a5c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a5c6:	f100 0001 	add.w	r0, r0, #1
 800a5ca:	bfda      	itte	le
 800a5cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5d0:	9309      	strle	r3, [sp, #36]	; 0x24
 800a5d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a5d6:	f10b 0b01 	add.w	fp, fp, #1
 800a5da:	9015      	str	r0, [sp, #84]	; 0x54
 800a5dc:	e7c1      	b.n	800a562 <_strtod_l+0x152>
 800a5de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	9215      	str	r2, [sp, #84]	; 0x54
 800a5e4:	785a      	ldrb	r2, [r3, #1]
 800a5e6:	f1bb 0f00 	cmp.w	fp, #0
 800a5ea:	d037      	beq.n	800a65c <_strtod_l+0x24c>
 800a5ec:	9005      	str	r0, [sp, #20]
 800a5ee:	465e      	mov	r6, fp
 800a5f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a5f4:	2b09      	cmp	r3, #9
 800a5f6:	d912      	bls.n	800a61e <_strtod_l+0x20e>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e7c4      	b.n	800a586 <_strtod_l+0x176>
 800a5fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	9215      	str	r2, [sp, #84]	; 0x54
 800a602:	785a      	ldrb	r2, [r3, #1]
 800a604:	3001      	adds	r0, #1
 800a606:	2a30      	cmp	r2, #48	; 0x30
 800a608:	d0f8      	beq.n	800a5fc <_strtod_l+0x1ec>
 800a60a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a60e:	2b08      	cmp	r3, #8
 800a610:	f200 84c1 	bhi.w	800af96 <_strtod_l+0xb86>
 800a614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a616:	9005      	str	r0, [sp, #20]
 800a618:	2000      	movs	r0, #0
 800a61a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a61c:	4606      	mov	r6, r0
 800a61e:	3a30      	subs	r2, #48	; 0x30
 800a620:	f100 0301 	add.w	r3, r0, #1
 800a624:	d014      	beq.n	800a650 <_strtod_l+0x240>
 800a626:	9905      	ldr	r1, [sp, #20]
 800a628:	4419      	add	r1, r3
 800a62a:	9105      	str	r1, [sp, #20]
 800a62c:	4633      	mov	r3, r6
 800a62e:	eb00 0c06 	add.w	ip, r0, r6
 800a632:	210a      	movs	r1, #10
 800a634:	4563      	cmp	r3, ip
 800a636:	d113      	bne.n	800a660 <_strtod_l+0x250>
 800a638:	1833      	adds	r3, r6, r0
 800a63a:	2b08      	cmp	r3, #8
 800a63c:	f106 0601 	add.w	r6, r6, #1
 800a640:	4406      	add	r6, r0
 800a642:	dc1a      	bgt.n	800a67a <_strtod_l+0x26a>
 800a644:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a646:	230a      	movs	r3, #10
 800a648:	fb03 2301 	mla	r3, r3, r1, r2
 800a64c:	9309      	str	r3, [sp, #36]	; 0x24
 800a64e:	2300      	movs	r3, #0
 800a650:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a652:	1c51      	adds	r1, r2, #1
 800a654:	9115      	str	r1, [sp, #84]	; 0x54
 800a656:	7852      	ldrb	r2, [r2, #1]
 800a658:	4618      	mov	r0, r3
 800a65a:	e7c9      	b.n	800a5f0 <_strtod_l+0x1e0>
 800a65c:	4658      	mov	r0, fp
 800a65e:	e7d2      	b.n	800a606 <_strtod_l+0x1f6>
 800a660:	2b08      	cmp	r3, #8
 800a662:	f103 0301 	add.w	r3, r3, #1
 800a666:	dc03      	bgt.n	800a670 <_strtod_l+0x260>
 800a668:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a66a:	434f      	muls	r7, r1
 800a66c:	9709      	str	r7, [sp, #36]	; 0x24
 800a66e:	e7e1      	b.n	800a634 <_strtod_l+0x224>
 800a670:	2b10      	cmp	r3, #16
 800a672:	bfd8      	it	le
 800a674:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a678:	e7dc      	b.n	800a634 <_strtod_l+0x224>
 800a67a:	2e10      	cmp	r6, #16
 800a67c:	bfdc      	itt	le
 800a67e:	230a      	movle	r3, #10
 800a680:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a684:	e7e3      	b.n	800a64e <_strtod_l+0x23e>
 800a686:	2300      	movs	r3, #0
 800a688:	9305      	str	r3, [sp, #20]
 800a68a:	2301      	movs	r3, #1
 800a68c:	e780      	b.n	800a590 <_strtod_l+0x180>
 800a68e:	f04f 0c00 	mov.w	ip, #0
 800a692:	1caa      	adds	r2, r5, #2
 800a694:	9215      	str	r2, [sp, #84]	; 0x54
 800a696:	78aa      	ldrb	r2, [r5, #2]
 800a698:	e788      	b.n	800a5ac <_strtod_l+0x19c>
 800a69a:	f04f 0c01 	mov.w	ip, #1
 800a69e:	e7f8      	b.n	800a692 <_strtod_l+0x282>
 800a6a0:	08011d98 	.word	0x08011d98
 800a6a4:	08011d94 	.word	0x08011d94
 800a6a8:	7ff00000 	.word	0x7ff00000
 800a6ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6ae:	1c51      	adds	r1, r2, #1
 800a6b0:	9115      	str	r1, [sp, #84]	; 0x54
 800a6b2:	7852      	ldrb	r2, [r2, #1]
 800a6b4:	2a30      	cmp	r2, #48	; 0x30
 800a6b6:	d0f9      	beq.n	800a6ac <_strtod_l+0x29c>
 800a6b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a6bc:	2908      	cmp	r1, #8
 800a6be:	f63f af7a 	bhi.w	800a5b6 <_strtod_l+0x1a6>
 800a6c2:	3a30      	subs	r2, #48	; 0x30
 800a6c4:	9208      	str	r2, [sp, #32]
 800a6c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6c8:	920c      	str	r2, [sp, #48]	; 0x30
 800a6ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6cc:	1c57      	adds	r7, r2, #1
 800a6ce:	9715      	str	r7, [sp, #84]	; 0x54
 800a6d0:	7852      	ldrb	r2, [r2, #1]
 800a6d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a6d6:	f1be 0f09 	cmp.w	lr, #9
 800a6da:	d938      	bls.n	800a74e <_strtod_l+0x33e>
 800a6dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a6de:	1a7f      	subs	r7, r7, r1
 800a6e0:	2f08      	cmp	r7, #8
 800a6e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a6e6:	dc03      	bgt.n	800a6f0 <_strtod_l+0x2e0>
 800a6e8:	9908      	ldr	r1, [sp, #32]
 800a6ea:	428f      	cmp	r7, r1
 800a6ec:	bfa8      	it	ge
 800a6ee:	460f      	movge	r7, r1
 800a6f0:	f1bc 0f00 	cmp.w	ip, #0
 800a6f4:	d000      	beq.n	800a6f8 <_strtod_l+0x2e8>
 800a6f6:	427f      	negs	r7, r7
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	d14f      	bne.n	800a79c <_strtod_l+0x38c>
 800a6fc:	9904      	ldr	r1, [sp, #16]
 800a6fe:	4301      	orrs	r1, r0
 800a700:	f47f aec1 	bne.w	800a486 <_strtod_l+0x76>
 800a704:	2b00      	cmp	r3, #0
 800a706:	f47f aedb 	bne.w	800a4c0 <_strtod_l+0xb0>
 800a70a:	2a69      	cmp	r2, #105	; 0x69
 800a70c:	d029      	beq.n	800a762 <_strtod_l+0x352>
 800a70e:	dc26      	bgt.n	800a75e <_strtod_l+0x34e>
 800a710:	2a49      	cmp	r2, #73	; 0x49
 800a712:	d026      	beq.n	800a762 <_strtod_l+0x352>
 800a714:	2a4e      	cmp	r2, #78	; 0x4e
 800a716:	f47f aed3 	bne.w	800a4c0 <_strtod_l+0xb0>
 800a71a:	499b      	ldr	r1, [pc, #620]	; (800a988 <_strtod_l+0x578>)
 800a71c:	a815      	add	r0, sp, #84	; 0x54
 800a71e:	f002 fff5 	bl	800d70c <__match>
 800a722:	2800      	cmp	r0, #0
 800a724:	f43f aecc 	beq.w	800a4c0 <_strtod_l+0xb0>
 800a728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b28      	cmp	r3, #40	; 0x28
 800a72e:	d12f      	bne.n	800a790 <_strtod_l+0x380>
 800a730:	4996      	ldr	r1, [pc, #600]	; (800a98c <_strtod_l+0x57c>)
 800a732:	aa18      	add	r2, sp, #96	; 0x60
 800a734:	a815      	add	r0, sp, #84	; 0x54
 800a736:	f002 fffd 	bl	800d734 <__hexnan>
 800a73a:	2805      	cmp	r0, #5
 800a73c:	d128      	bne.n	800a790 <_strtod_l+0x380>
 800a73e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a740:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a744:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a748:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a74c:	e69b      	b.n	800a486 <_strtod_l+0x76>
 800a74e:	9f08      	ldr	r7, [sp, #32]
 800a750:	210a      	movs	r1, #10
 800a752:	fb01 2107 	mla	r1, r1, r7, r2
 800a756:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a75a:	9208      	str	r2, [sp, #32]
 800a75c:	e7b5      	b.n	800a6ca <_strtod_l+0x2ba>
 800a75e:	2a6e      	cmp	r2, #110	; 0x6e
 800a760:	e7d9      	b.n	800a716 <_strtod_l+0x306>
 800a762:	498b      	ldr	r1, [pc, #556]	; (800a990 <_strtod_l+0x580>)
 800a764:	a815      	add	r0, sp, #84	; 0x54
 800a766:	f002 ffd1 	bl	800d70c <__match>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	f43f aea8 	beq.w	800a4c0 <_strtod_l+0xb0>
 800a770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a772:	4988      	ldr	r1, [pc, #544]	; (800a994 <_strtod_l+0x584>)
 800a774:	3b01      	subs	r3, #1
 800a776:	a815      	add	r0, sp, #84	; 0x54
 800a778:	9315      	str	r3, [sp, #84]	; 0x54
 800a77a:	f002 ffc7 	bl	800d70c <__match>
 800a77e:	b910      	cbnz	r0, 800a786 <_strtod_l+0x376>
 800a780:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a782:	3301      	adds	r3, #1
 800a784:	9315      	str	r3, [sp, #84]	; 0x54
 800a786:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a9a4 <_strtod_l+0x594>
 800a78a:	f04f 0800 	mov.w	r8, #0
 800a78e:	e67a      	b.n	800a486 <_strtod_l+0x76>
 800a790:	4881      	ldr	r0, [pc, #516]	; (800a998 <_strtod_l+0x588>)
 800a792:	f001 fe21 	bl	800c3d8 <nan>
 800a796:	ec59 8b10 	vmov	r8, r9, d0
 800a79a:	e674      	b.n	800a486 <_strtod_l+0x76>
 800a79c:	9b05      	ldr	r3, [sp, #20]
 800a79e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7a0:	1afb      	subs	r3, r7, r3
 800a7a2:	f1bb 0f00 	cmp.w	fp, #0
 800a7a6:	bf08      	it	eq
 800a7a8:	46b3      	moveq	fp, r6
 800a7aa:	2e10      	cmp	r6, #16
 800a7ac:	9308      	str	r3, [sp, #32]
 800a7ae:	4635      	mov	r5, r6
 800a7b0:	bfa8      	it	ge
 800a7b2:	2510      	movge	r5, #16
 800a7b4:	f7f5 fea6 	bl	8000504 <__aeabi_ui2d>
 800a7b8:	2e09      	cmp	r6, #9
 800a7ba:	4680      	mov	r8, r0
 800a7bc:	4689      	mov	r9, r1
 800a7be:	dd13      	ble.n	800a7e8 <_strtod_l+0x3d8>
 800a7c0:	4b76      	ldr	r3, [pc, #472]	; (800a99c <_strtod_l+0x58c>)
 800a7c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a7c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a7ca:	f7f5 ff15 	bl	80005f8 <__aeabi_dmul>
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	4689      	mov	r9, r1
 800a7d4:	f7f5 fe96 	bl	8000504 <__aeabi_ui2d>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4640      	mov	r0, r8
 800a7de:	4649      	mov	r1, r9
 800a7e0:	f7f5 fd54 	bl	800028c <__adddf3>
 800a7e4:	4680      	mov	r8, r0
 800a7e6:	4689      	mov	r9, r1
 800a7e8:	2e0f      	cmp	r6, #15
 800a7ea:	dc38      	bgt.n	800a85e <_strtod_l+0x44e>
 800a7ec:	9b08      	ldr	r3, [sp, #32]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f43f ae49 	beq.w	800a486 <_strtod_l+0x76>
 800a7f4:	dd24      	ble.n	800a840 <_strtod_l+0x430>
 800a7f6:	2b16      	cmp	r3, #22
 800a7f8:	dc0b      	bgt.n	800a812 <_strtod_l+0x402>
 800a7fa:	4968      	ldr	r1, [pc, #416]	; (800a99c <_strtod_l+0x58c>)
 800a7fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a800:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a804:	4642      	mov	r2, r8
 800a806:	464b      	mov	r3, r9
 800a808:	f7f5 fef6 	bl	80005f8 <__aeabi_dmul>
 800a80c:	4680      	mov	r8, r0
 800a80e:	4689      	mov	r9, r1
 800a810:	e639      	b.n	800a486 <_strtod_l+0x76>
 800a812:	9a08      	ldr	r2, [sp, #32]
 800a814:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a818:	4293      	cmp	r3, r2
 800a81a:	db20      	blt.n	800a85e <_strtod_l+0x44e>
 800a81c:	4c5f      	ldr	r4, [pc, #380]	; (800a99c <_strtod_l+0x58c>)
 800a81e:	f1c6 060f 	rsb	r6, r6, #15
 800a822:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a826:	4642      	mov	r2, r8
 800a828:	464b      	mov	r3, r9
 800a82a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a82e:	f7f5 fee3 	bl	80005f8 <__aeabi_dmul>
 800a832:	9b08      	ldr	r3, [sp, #32]
 800a834:	1b9e      	subs	r6, r3, r6
 800a836:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a83a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a83e:	e7e3      	b.n	800a808 <_strtod_l+0x3f8>
 800a840:	9b08      	ldr	r3, [sp, #32]
 800a842:	3316      	adds	r3, #22
 800a844:	db0b      	blt.n	800a85e <_strtod_l+0x44e>
 800a846:	9b05      	ldr	r3, [sp, #20]
 800a848:	1bdf      	subs	r7, r3, r7
 800a84a:	4b54      	ldr	r3, [pc, #336]	; (800a99c <_strtod_l+0x58c>)
 800a84c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a850:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a854:	4640      	mov	r0, r8
 800a856:	4649      	mov	r1, r9
 800a858:	f7f5 fff8 	bl	800084c <__aeabi_ddiv>
 800a85c:	e7d6      	b.n	800a80c <_strtod_l+0x3fc>
 800a85e:	9b08      	ldr	r3, [sp, #32]
 800a860:	1b75      	subs	r5, r6, r5
 800a862:	441d      	add	r5, r3
 800a864:	2d00      	cmp	r5, #0
 800a866:	dd70      	ble.n	800a94a <_strtod_l+0x53a>
 800a868:	f015 030f 	ands.w	r3, r5, #15
 800a86c:	d00a      	beq.n	800a884 <_strtod_l+0x474>
 800a86e:	494b      	ldr	r1, [pc, #300]	; (800a99c <_strtod_l+0x58c>)
 800a870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a874:	4642      	mov	r2, r8
 800a876:	464b      	mov	r3, r9
 800a878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a87c:	f7f5 febc 	bl	80005f8 <__aeabi_dmul>
 800a880:	4680      	mov	r8, r0
 800a882:	4689      	mov	r9, r1
 800a884:	f035 050f 	bics.w	r5, r5, #15
 800a888:	d04d      	beq.n	800a926 <_strtod_l+0x516>
 800a88a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a88e:	dd22      	ble.n	800a8d6 <_strtod_l+0x4c6>
 800a890:	2500      	movs	r5, #0
 800a892:	46ab      	mov	fp, r5
 800a894:	9509      	str	r5, [sp, #36]	; 0x24
 800a896:	9505      	str	r5, [sp, #20]
 800a898:	2322      	movs	r3, #34	; 0x22
 800a89a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a9a4 <_strtod_l+0x594>
 800a89e:	6023      	str	r3, [r4, #0]
 800a8a0:	f04f 0800 	mov.w	r8, #0
 800a8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f43f aded 	beq.w	800a486 <_strtod_l+0x76>
 800a8ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f003 f82e 	bl	800d910 <_Bfree>
 800a8b4:	9905      	ldr	r1, [sp, #20]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f003 f82a 	bl	800d910 <_Bfree>
 800a8bc:	4659      	mov	r1, fp
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f003 f826 	bl	800d910 <_Bfree>
 800a8c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f003 f822 	bl	800d910 <_Bfree>
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f003 f81e 	bl	800d910 <_Bfree>
 800a8d4:	e5d7      	b.n	800a486 <_strtod_l+0x76>
 800a8d6:	4b32      	ldr	r3, [pc, #200]	; (800a9a0 <_strtod_l+0x590>)
 800a8d8:	9304      	str	r3, [sp, #16]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	112d      	asrs	r5, r5, #4
 800a8de:	4640      	mov	r0, r8
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	469a      	mov	sl, r3
 800a8e4:	2d01      	cmp	r5, #1
 800a8e6:	dc21      	bgt.n	800a92c <_strtod_l+0x51c>
 800a8e8:	b10b      	cbz	r3, 800a8ee <_strtod_l+0x4de>
 800a8ea:	4680      	mov	r8, r0
 800a8ec:	4689      	mov	r9, r1
 800a8ee:	492c      	ldr	r1, [pc, #176]	; (800a9a0 <_strtod_l+0x590>)
 800a8f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a8f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a8f8:	4642      	mov	r2, r8
 800a8fa:	464b      	mov	r3, r9
 800a8fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a900:	f7f5 fe7a 	bl	80005f8 <__aeabi_dmul>
 800a904:	4b27      	ldr	r3, [pc, #156]	; (800a9a4 <_strtod_l+0x594>)
 800a906:	460a      	mov	r2, r1
 800a908:	400b      	ands	r3, r1
 800a90a:	4927      	ldr	r1, [pc, #156]	; (800a9a8 <_strtod_l+0x598>)
 800a90c:	428b      	cmp	r3, r1
 800a90e:	4680      	mov	r8, r0
 800a910:	d8be      	bhi.n	800a890 <_strtod_l+0x480>
 800a912:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a916:	428b      	cmp	r3, r1
 800a918:	bf86      	itte	hi
 800a91a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a9ac <_strtod_l+0x59c>
 800a91e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a922:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a926:	2300      	movs	r3, #0
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	e07b      	b.n	800aa24 <_strtod_l+0x614>
 800a92c:	07ea      	lsls	r2, r5, #31
 800a92e:	d505      	bpl.n	800a93c <_strtod_l+0x52c>
 800a930:	9b04      	ldr	r3, [sp, #16]
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f5 fe5f 	bl	80005f8 <__aeabi_dmul>
 800a93a:	2301      	movs	r3, #1
 800a93c:	9a04      	ldr	r2, [sp, #16]
 800a93e:	3208      	adds	r2, #8
 800a940:	f10a 0a01 	add.w	sl, sl, #1
 800a944:	106d      	asrs	r5, r5, #1
 800a946:	9204      	str	r2, [sp, #16]
 800a948:	e7cc      	b.n	800a8e4 <_strtod_l+0x4d4>
 800a94a:	d0ec      	beq.n	800a926 <_strtod_l+0x516>
 800a94c:	426d      	negs	r5, r5
 800a94e:	f015 020f 	ands.w	r2, r5, #15
 800a952:	d00a      	beq.n	800a96a <_strtod_l+0x55a>
 800a954:	4b11      	ldr	r3, [pc, #68]	; (800a99c <_strtod_l+0x58c>)
 800a956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a95a:	4640      	mov	r0, r8
 800a95c:	4649      	mov	r1, r9
 800a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a962:	f7f5 ff73 	bl	800084c <__aeabi_ddiv>
 800a966:	4680      	mov	r8, r0
 800a968:	4689      	mov	r9, r1
 800a96a:	112d      	asrs	r5, r5, #4
 800a96c:	d0db      	beq.n	800a926 <_strtod_l+0x516>
 800a96e:	2d1f      	cmp	r5, #31
 800a970:	dd1e      	ble.n	800a9b0 <_strtod_l+0x5a0>
 800a972:	2500      	movs	r5, #0
 800a974:	46ab      	mov	fp, r5
 800a976:	9509      	str	r5, [sp, #36]	; 0x24
 800a978:	9505      	str	r5, [sp, #20]
 800a97a:	2322      	movs	r3, #34	; 0x22
 800a97c:	f04f 0800 	mov.w	r8, #0
 800a980:	f04f 0900 	mov.w	r9, #0
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	e78d      	b.n	800a8a4 <_strtod_l+0x494>
 800a988:	08011ef6 	.word	0x08011ef6
 800a98c:	08011dac 	.word	0x08011dac
 800a990:	08011eee 	.word	0x08011eee
 800a994:	08011fda 	.word	0x08011fda
 800a998:	08011fd6 	.word	0x08011fd6
 800a99c:	08012130 	.word	0x08012130
 800a9a0:	08012108 	.word	0x08012108
 800a9a4:	7ff00000 	.word	0x7ff00000
 800a9a8:	7ca00000 	.word	0x7ca00000
 800a9ac:	7fefffff 	.word	0x7fefffff
 800a9b0:	f015 0310 	ands.w	r3, r5, #16
 800a9b4:	bf18      	it	ne
 800a9b6:	236a      	movne	r3, #106	; 0x6a
 800a9b8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ad5c <_strtod_l+0x94c>
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	07ea      	lsls	r2, r5, #31
 800a9c6:	d504      	bpl.n	800a9d2 <_strtod_l+0x5c2>
 800a9c8:	e9da 2300 	ldrd	r2, r3, [sl]
 800a9cc:	f7f5 fe14 	bl	80005f8 <__aeabi_dmul>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	106d      	asrs	r5, r5, #1
 800a9d4:	f10a 0a08 	add.w	sl, sl, #8
 800a9d8:	d1f4      	bne.n	800a9c4 <_strtod_l+0x5b4>
 800a9da:	b10b      	cbz	r3, 800a9e0 <_strtod_l+0x5d0>
 800a9dc:	4680      	mov	r8, r0
 800a9de:	4689      	mov	r9, r1
 800a9e0:	9b04      	ldr	r3, [sp, #16]
 800a9e2:	b1bb      	cbz	r3, 800aa14 <_strtod_l+0x604>
 800a9e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a9e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	dd10      	ble.n	800aa14 <_strtod_l+0x604>
 800a9f2:	2b1f      	cmp	r3, #31
 800a9f4:	f340 811e 	ble.w	800ac34 <_strtod_l+0x824>
 800a9f8:	2b34      	cmp	r3, #52	; 0x34
 800a9fa:	bfde      	ittt	le
 800a9fc:	f04f 33ff 	movle.w	r3, #4294967295
 800aa00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aa04:	4093      	lslle	r3, r2
 800aa06:	f04f 0800 	mov.w	r8, #0
 800aa0a:	bfcc      	ite	gt
 800aa0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aa10:	ea03 0901 	andle.w	r9, r3, r1
 800aa14:	2200      	movs	r2, #0
 800aa16:	2300      	movs	r3, #0
 800aa18:	4640      	mov	r0, r8
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	f7f6 f854 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d1a6      	bne.n	800a972 <_strtod_l+0x562>
 800aa24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa2a:	4633      	mov	r3, r6
 800aa2c:	465a      	mov	r2, fp
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f002 ffd6 	bl	800d9e0 <__s2b>
 800aa34:	9009      	str	r0, [sp, #36]	; 0x24
 800aa36:	2800      	cmp	r0, #0
 800aa38:	f43f af2a 	beq.w	800a890 <_strtod_l+0x480>
 800aa3c:	9a08      	ldr	r2, [sp, #32]
 800aa3e:	9b05      	ldr	r3, [sp, #20]
 800aa40:	2a00      	cmp	r2, #0
 800aa42:	eba3 0307 	sub.w	r3, r3, r7
 800aa46:	bfa8      	it	ge
 800aa48:	2300      	movge	r3, #0
 800aa4a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa4c:	2500      	movs	r5, #0
 800aa4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa52:	9312      	str	r3, [sp, #72]	; 0x48
 800aa54:	46ab      	mov	fp, r5
 800aa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa58:	4620      	mov	r0, r4
 800aa5a:	6859      	ldr	r1, [r3, #4]
 800aa5c:	f002 ff18 	bl	800d890 <_Balloc>
 800aa60:	9005      	str	r0, [sp, #20]
 800aa62:	2800      	cmp	r0, #0
 800aa64:	f43f af18 	beq.w	800a898 <_strtod_l+0x488>
 800aa68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa6a:	691a      	ldr	r2, [r3, #16]
 800aa6c:	3202      	adds	r2, #2
 800aa6e:	f103 010c 	add.w	r1, r3, #12
 800aa72:	0092      	lsls	r2, r2, #2
 800aa74:	300c      	adds	r0, #12
 800aa76:	f001 fca0 	bl	800c3ba <memcpy>
 800aa7a:	ec49 8b10 	vmov	d0, r8, r9
 800aa7e:	aa18      	add	r2, sp, #96	; 0x60
 800aa80:	a917      	add	r1, sp, #92	; 0x5c
 800aa82:	4620      	mov	r0, r4
 800aa84:	f003 fae0 	bl	800e048 <__d2b>
 800aa88:	ec49 8b18 	vmov	d8, r8, r9
 800aa8c:	9016      	str	r0, [sp, #88]	; 0x58
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	f43f af02 	beq.w	800a898 <_strtod_l+0x488>
 800aa94:	2101      	movs	r1, #1
 800aa96:	4620      	mov	r0, r4
 800aa98:	f003 f83a 	bl	800db10 <__i2b>
 800aa9c:	4683      	mov	fp, r0
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f43f aefa 	beq.w	800a898 <_strtod_l+0x488>
 800aaa4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aaa6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aaa8:	2e00      	cmp	r6, #0
 800aaaa:	bfab      	itete	ge
 800aaac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800aaae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800aab0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aab2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800aab6:	bfac      	ite	ge
 800aab8:	eb06 0a03 	addge.w	sl, r6, r3
 800aabc:	1b9f      	sublt	r7, r3, r6
 800aabe:	9b04      	ldr	r3, [sp, #16]
 800aac0:	1af6      	subs	r6, r6, r3
 800aac2:	4416      	add	r6, r2
 800aac4:	4ba0      	ldr	r3, [pc, #640]	; (800ad48 <_strtod_l+0x938>)
 800aac6:	3e01      	subs	r6, #1
 800aac8:	429e      	cmp	r6, r3
 800aaca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aace:	f280 80c4 	bge.w	800ac5a <_strtod_l+0x84a>
 800aad2:	1b9b      	subs	r3, r3, r6
 800aad4:	2b1f      	cmp	r3, #31
 800aad6:	eba2 0203 	sub.w	r2, r2, r3
 800aada:	f04f 0101 	mov.w	r1, #1
 800aade:	f300 80b0 	bgt.w	800ac42 <_strtod_l+0x832>
 800aae2:	fa01 f303 	lsl.w	r3, r1, r3
 800aae6:	930e      	str	r3, [sp, #56]	; 0x38
 800aae8:	2300      	movs	r3, #0
 800aaea:	930d      	str	r3, [sp, #52]	; 0x34
 800aaec:	eb0a 0602 	add.w	r6, sl, r2
 800aaf0:	9b04      	ldr	r3, [sp, #16]
 800aaf2:	45b2      	cmp	sl, r6
 800aaf4:	4417      	add	r7, r2
 800aaf6:	441f      	add	r7, r3
 800aaf8:	4653      	mov	r3, sl
 800aafa:	bfa8      	it	ge
 800aafc:	4633      	movge	r3, r6
 800aafe:	42bb      	cmp	r3, r7
 800ab00:	bfa8      	it	ge
 800ab02:	463b      	movge	r3, r7
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bfc2      	ittt	gt
 800ab08:	1af6      	subgt	r6, r6, r3
 800ab0a:	1aff      	subgt	r7, r7, r3
 800ab0c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ab10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	dd17      	ble.n	800ab46 <_strtod_l+0x736>
 800ab16:	4659      	mov	r1, fp
 800ab18:	461a      	mov	r2, r3
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f003 f8b8 	bl	800dc90 <__pow5mult>
 800ab20:	4683      	mov	fp, r0
 800ab22:	2800      	cmp	r0, #0
 800ab24:	f43f aeb8 	beq.w	800a898 <_strtod_l+0x488>
 800ab28:	4601      	mov	r1, r0
 800ab2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f003 f805 	bl	800db3c <__multiply>
 800ab32:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab34:	2800      	cmp	r0, #0
 800ab36:	f43f aeaf 	beq.w	800a898 <_strtod_l+0x488>
 800ab3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f002 fee7 	bl	800d910 <_Bfree>
 800ab42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab44:	9316      	str	r3, [sp, #88]	; 0x58
 800ab46:	2e00      	cmp	r6, #0
 800ab48:	f300 808c 	bgt.w	800ac64 <_strtod_l+0x854>
 800ab4c:	9b08      	ldr	r3, [sp, #32]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	dd08      	ble.n	800ab64 <_strtod_l+0x754>
 800ab52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab54:	9905      	ldr	r1, [sp, #20]
 800ab56:	4620      	mov	r0, r4
 800ab58:	f003 f89a 	bl	800dc90 <__pow5mult>
 800ab5c:	9005      	str	r0, [sp, #20]
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f43f ae9a 	beq.w	800a898 <_strtod_l+0x488>
 800ab64:	2f00      	cmp	r7, #0
 800ab66:	dd08      	ble.n	800ab7a <_strtod_l+0x76a>
 800ab68:	9905      	ldr	r1, [sp, #20]
 800ab6a:	463a      	mov	r2, r7
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f003 f8e9 	bl	800dd44 <__lshift>
 800ab72:	9005      	str	r0, [sp, #20]
 800ab74:	2800      	cmp	r0, #0
 800ab76:	f43f ae8f 	beq.w	800a898 <_strtod_l+0x488>
 800ab7a:	f1ba 0f00 	cmp.w	sl, #0
 800ab7e:	dd08      	ble.n	800ab92 <_strtod_l+0x782>
 800ab80:	4659      	mov	r1, fp
 800ab82:	4652      	mov	r2, sl
 800ab84:	4620      	mov	r0, r4
 800ab86:	f003 f8dd 	bl	800dd44 <__lshift>
 800ab8a:	4683      	mov	fp, r0
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	f43f ae83 	beq.w	800a898 <_strtod_l+0x488>
 800ab92:	9a05      	ldr	r2, [sp, #20]
 800ab94:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab96:	4620      	mov	r0, r4
 800ab98:	f003 f95c 	bl	800de54 <__mdiff>
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	f43f ae7a 	beq.w	800a898 <_strtod_l+0x488>
 800aba4:	68c3      	ldr	r3, [r0, #12]
 800aba6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aba8:	2300      	movs	r3, #0
 800abaa:	60c3      	str	r3, [r0, #12]
 800abac:	4659      	mov	r1, fp
 800abae:	f003 f935 	bl	800de1c <__mcmp>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	da60      	bge.n	800ac78 <_strtod_l+0x868>
 800abb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb8:	ea53 0308 	orrs.w	r3, r3, r8
 800abbc:	f040 8084 	bne.w	800acc8 <_strtod_l+0x8b8>
 800abc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d17f      	bne.n	800acc8 <_strtod_l+0x8b8>
 800abc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abcc:	0d1b      	lsrs	r3, r3, #20
 800abce:	051b      	lsls	r3, r3, #20
 800abd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800abd4:	d978      	bls.n	800acc8 <_strtod_l+0x8b8>
 800abd6:	696b      	ldr	r3, [r5, #20]
 800abd8:	b913      	cbnz	r3, 800abe0 <_strtod_l+0x7d0>
 800abda:	692b      	ldr	r3, [r5, #16]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	dd73      	ble.n	800acc8 <_strtod_l+0x8b8>
 800abe0:	4629      	mov	r1, r5
 800abe2:	2201      	movs	r2, #1
 800abe4:	4620      	mov	r0, r4
 800abe6:	f003 f8ad 	bl	800dd44 <__lshift>
 800abea:	4659      	mov	r1, fp
 800abec:	4605      	mov	r5, r0
 800abee:	f003 f915 	bl	800de1c <__mcmp>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	dd68      	ble.n	800acc8 <_strtod_l+0x8b8>
 800abf6:	9904      	ldr	r1, [sp, #16]
 800abf8:	4a54      	ldr	r2, [pc, #336]	; (800ad4c <_strtod_l+0x93c>)
 800abfa:	464b      	mov	r3, r9
 800abfc:	2900      	cmp	r1, #0
 800abfe:	f000 8084 	beq.w	800ad0a <_strtod_l+0x8fa>
 800ac02:	ea02 0109 	and.w	r1, r2, r9
 800ac06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac0a:	dc7e      	bgt.n	800ad0a <_strtod_l+0x8fa>
 800ac0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ac10:	f77f aeb3 	ble.w	800a97a <_strtod_l+0x56a>
 800ac14:	4b4e      	ldr	r3, [pc, #312]	; (800ad50 <_strtod_l+0x940>)
 800ac16:	4640      	mov	r0, r8
 800ac18:	4649      	mov	r1, r9
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f7f5 fcec 	bl	80005f8 <__aeabi_dmul>
 800ac20:	4b4a      	ldr	r3, [pc, #296]	; (800ad4c <_strtod_l+0x93c>)
 800ac22:	400b      	ands	r3, r1
 800ac24:	4680      	mov	r8, r0
 800ac26:	4689      	mov	r9, r1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f47f ae3f 	bne.w	800a8ac <_strtod_l+0x49c>
 800ac2e:	2322      	movs	r3, #34	; 0x22
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	e63b      	b.n	800a8ac <_strtod_l+0x49c>
 800ac34:	f04f 32ff 	mov.w	r2, #4294967295
 800ac38:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3c:	ea03 0808 	and.w	r8, r3, r8
 800ac40:	e6e8      	b.n	800aa14 <_strtod_l+0x604>
 800ac42:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ac46:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ac4a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ac4e:	36e2      	adds	r6, #226	; 0xe2
 800ac50:	fa01 f306 	lsl.w	r3, r1, r6
 800ac54:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ac58:	e748      	b.n	800aaec <_strtod_l+0x6dc>
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ac62:	e743      	b.n	800aaec <_strtod_l+0x6dc>
 800ac64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac66:	4632      	mov	r2, r6
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f003 f86b 	bl	800dd44 <__lshift>
 800ac6e:	9016      	str	r0, [sp, #88]	; 0x58
 800ac70:	2800      	cmp	r0, #0
 800ac72:	f47f af6b 	bne.w	800ab4c <_strtod_l+0x73c>
 800ac76:	e60f      	b.n	800a898 <_strtod_l+0x488>
 800ac78:	46ca      	mov	sl, r9
 800ac7a:	d171      	bne.n	800ad60 <_strtod_l+0x950>
 800ac7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac82:	b352      	cbz	r2, 800acda <_strtod_l+0x8ca>
 800ac84:	4a33      	ldr	r2, [pc, #204]	; (800ad54 <_strtod_l+0x944>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d12a      	bne.n	800ace0 <_strtod_l+0x8d0>
 800ac8a:	9b04      	ldr	r3, [sp, #16]
 800ac8c:	4641      	mov	r1, r8
 800ac8e:	b1fb      	cbz	r3, 800acd0 <_strtod_l+0x8c0>
 800ac90:	4b2e      	ldr	r3, [pc, #184]	; (800ad4c <_strtod_l+0x93c>)
 800ac92:	ea09 0303 	and.w	r3, r9, r3
 800ac96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ac9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac9e:	d81a      	bhi.n	800acd6 <_strtod_l+0x8c6>
 800aca0:	0d1b      	lsrs	r3, r3, #20
 800aca2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aca6:	fa02 f303 	lsl.w	r3, r2, r3
 800acaa:	4299      	cmp	r1, r3
 800acac:	d118      	bne.n	800ace0 <_strtod_l+0x8d0>
 800acae:	4b2a      	ldr	r3, [pc, #168]	; (800ad58 <_strtod_l+0x948>)
 800acb0:	459a      	cmp	sl, r3
 800acb2:	d102      	bne.n	800acba <_strtod_l+0x8aa>
 800acb4:	3101      	adds	r1, #1
 800acb6:	f43f adef 	beq.w	800a898 <_strtod_l+0x488>
 800acba:	4b24      	ldr	r3, [pc, #144]	; (800ad4c <_strtod_l+0x93c>)
 800acbc:	ea0a 0303 	and.w	r3, sl, r3
 800acc0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800acc4:	f04f 0800 	mov.w	r8, #0
 800acc8:	9b04      	ldr	r3, [sp, #16]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1a2      	bne.n	800ac14 <_strtod_l+0x804>
 800acce:	e5ed      	b.n	800a8ac <_strtod_l+0x49c>
 800acd0:	f04f 33ff 	mov.w	r3, #4294967295
 800acd4:	e7e9      	b.n	800acaa <_strtod_l+0x89a>
 800acd6:	4613      	mov	r3, r2
 800acd8:	e7e7      	b.n	800acaa <_strtod_l+0x89a>
 800acda:	ea53 0308 	orrs.w	r3, r3, r8
 800acde:	d08a      	beq.n	800abf6 <_strtod_l+0x7e6>
 800ace0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ace2:	b1e3      	cbz	r3, 800ad1e <_strtod_l+0x90e>
 800ace4:	ea13 0f0a 	tst.w	r3, sl
 800ace8:	d0ee      	beq.n	800acc8 <_strtod_l+0x8b8>
 800acea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acec:	9a04      	ldr	r2, [sp, #16]
 800acee:	4640      	mov	r0, r8
 800acf0:	4649      	mov	r1, r9
 800acf2:	b1c3      	cbz	r3, 800ad26 <_strtod_l+0x916>
 800acf4:	f7ff fb6e 	bl	800a3d4 <sulp>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	ec51 0b18 	vmov	r0, r1, d8
 800ad00:	f7f5 fac4 	bl	800028c <__adddf3>
 800ad04:	4680      	mov	r8, r0
 800ad06:	4689      	mov	r9, r1
 800ad08:	e7de      	b.n	800acc8 <_strtod_l+0x8b8>
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad10:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ad14:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ad18:	f04f 38ff 	mov.w	r8, #4294967295
 800ad1c:	e7d4      	b.n	800acc8 <_strtod_l+0x8b8>
 800ad1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad20:	ea13 0f08 	tst.w	r3, r8
 800ad24:	e7e0      	b.n	800ace8 <_strtod_l+0x8d8>
 800ad26:	f7ff fb55 	bl	800a3d4 <sulp>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	ec51 0b18 	vmov	r0, r1, d8
 800ad32:	f7f5 faa9 	bl	8000288 <__aeabi_dsub>
 800ad36:	2200      	movs	r2, #0
 800ad38:	2300      	movs	r3, #0
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	4689      	mov	r9, r1
 800ad3e:	f7f5 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d0c0      	beq.n	800acc8 <_strtod_l+0x8b8>
 800ad46:	e618      	b.n	800a97a <_strtod_l+0x56a>
 800ad48:	fffffc02 	.word	0xfffffc02
 800ad4c:	7ff00000 	.word	0x7ff00000
 800ad50:	39500000 	.word	0x39500000
 800ad54:	000fffff 	.word	0x000fffff
 800ad58:	7fefffff 	.word	0x7fefffff
 800ad5c:	08011dc0 	.word	0x08011dc0
 800ad60:	4659      	mov	r1, fp
 800ad62:	4628      	mov	r0, r5
 800ad64:	f003 f9ca 	bl	800e0fc <__ratio>
 800ad68:	ec57 6b10 	vmov	r6, r7, d0
 800ad6c:	ee10 0a10 	vmov	r0, s0
 800ad70:	2200      	movs	r2, #0
 800ad72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad76:	4639      	mov	r1, r7
 800ad78:	f7f5 feba 	bl	8000af0 <__aeabi_dcmple>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d071      	beq.n	800ae64 <_strtod_l+0xa54>
 800ad80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d17c      	bne.n	800ae80 <_strtod_l+0xa70>
 800ad86:	f1b8 0f00 	cmp.w	r8, #0
 800ad8a:	d15a      	bne.n	800ae42 <_strtod_l+0xa32>
 800ad8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d15d      	bne.n	800ae50 <_strtod_l+0xa40>
 800ad94:	4b90      	ldr	r3, [pc, #576]	; (800afd8 <_strtod_l+0xbc8>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	4630      	mov	r0, r6
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	f7f5 fe9e 	bl	8000adc <__aeabi_dcmplt>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d15c      	bne.n	800ae5e <_strtod_l+0xa4e>
 800ada4:	4630      	mov	r0, r6
 800ada6:	4639      	mov	r1, r7
 800ada8:	4b8c      	ldr	r3, [pc, #560]	; (800afdc <_strtod_l+0xbcc>)
 800adaa:	2200      	movs	r2, #0
 800adac:	f7f5 fc24 	bl	80005f8 <__aeabi_dmul>
 800adb0:	4606      	mov	r6, r0
 800adb2:	460f      	mov	r7, r1
 800adb4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800adb8:	9606      	str	r6, [sp, #24]
 800adba:	9307      	str	r3, [sp, #28]
 800adbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800adc4:	4b86      	ldr	r3, [pc, #536]	; (800afe0 <_strtod_l+0xbd0>)
 800adc6:	ea0a 0303 	and.w	r3, sl, r3
 800adca:	930d      	str	r3, [sp, #52]	; 0x34
 800adcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adce:	4b85      	ldr	r3, [pc, #532]	; (800afe4 <_strtod_l+0xbd4>)
 800add0:	429a      	cmp	r2, r3
 800add2:	f040 8090 	bne.w	800aef6 <_strtod_l+0xae6>
 800add6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800adda:	ec49 8b10 	vmov	d0, r8, r9
 800adde:	f003 f8c3 	bl	800df68 <__ulp>
 800ade2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ade6:	ec51 0b10 	vmov	r0, r1, d0
 800adea:	f7f5 fc05 	bl	80005f8 <__aeabi_dmul>
 800adee:	4642      	mov	r2, r8
 800adf0:	464b      	mov	r3, r9
 800adf2:	f7f5 fa4b 	bl	800028c <__adddf3>
 800adf6:	460b      	mov	r3, r1
 800adf8:	4979      	ldr	r1, [pc, #484]	; (800afe0 <_strtod_l+0xbd0>)
 800adfa:	4a7b      	ldr	r2, [pc, #492]	; (800afe8 <_strtod_l+0xbd8>)
 800adfc:	4019      	ands	r1, r3
 800adfe:	4291      	cmp	r1, r2
 800ae00:	4680      	mov	r8, r0
 800ae02:	d944      	bls.n	800ae8e <_strtod_l+0xa7e>
 800ae04:	ee18 2a90 	vmov	r2, s17
 800ae08:	4b78      	ldr	r3, [pc, #480]	; (800afec <_strtod_l+0xbdc>)
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d104      	bne.n	800ae18 <_strtod_l+0xa08>
 800ae0e:	ee18 3a10 	vmov	r3, s16
 800ae12:	3301      	adds	r3, #1
 800ae14:	f43f ad40 	beq.w	800a898 <_strtod_l+0x488>
 800ae18:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800afec <_strtod_l+0xbdc>
 800ae1c:	f04f 38ff 	mov.w	r8, #4294967295
 800ae20:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae22:	4620      	mov	r0, r4
 800ae24:	f002 fd74 	bl	800d910 <_Bfree>
 800ae28:	9905      	ldr	r1, [sp, #20]
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f002 fd70 	bl	800d910 <_Bfree>
 800ae30:	4659      	mov	r1, fp
 800ae32:	4620      	mov	r0, r4
 800ae34:	f002 fd6c 	bl	800d910 <_Bfree>
 800ae38:	4629      	mov	r1, r5
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f002 fd68 	bl	800d910 <_Bfree>
 800ae40:	e609      	b.n	800aa56 <_strtod_l+0x646>
 800ae42:	f1b8 0f01 	cmp.w	r8, #1
 800ae46:	d103      	bne.n	800ae50 <_strtod_l+0xa40>
 800ae48:	f1b9 0f00 	cmp.w	r9, #0
 800ae4c:	f43f ad95 	beq.w	800a97a <_strtod_l+0x56a>
 800ae50:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800afa8 <_strtod_l+0xb98>
 800ae54:	4f60      	ldr	r7, [pc, #384]	; (800afd8 <_strtod_l+0xbc8>)
 800ae56:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae5a:	2600      	movs	r6, #0
 800ae5c:	e7ae      	b.n	800adbc <_strtod_l+0x9ac>
 800ae5e:	4f5f      	ldr	r7, [pc, #380]	; (800afdc <_strtod_l+0xbcc>)
 800ae60:	2600      	movs	r6, #0
 800ae62:	e7a7      	b.n	800adb4 <_strtod_l+0x9a4>
 800ae64:	4b5d      	ldr	r3, [pc, #372]	; (800afdc <_strtod_l+0xbcc>)
 800ae66:	4630      	mov	r0, r6
 800ae68:	4639      	mov	r1, r7
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f7f5 fbc4 	bl	80005f8 <__aeabi_dmul>
 800ae70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae72:	4606      	mov	r6, r0
 800ae74:	460f      	mov	r7, r1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d09c      	beq.n	800adb4 <_strtod_l+0x9a4>
 800ae7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ae7e:	e79d      	b.n	800adbc <_strtod_l+0x9ac>
 800ae80:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800afb0 <_strtod_l+0xba0>
 800ae84:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae88:	ec57 6b17 	vmov	r6, r7, d7
 800ae8c:	e796      	b.n	800adbc <_strtod_l+0x9ac>
 800ae8e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ae92:	9b04      	ldr	r3, [sp, #16]
 800ae94:	46ca      	mov	sl, r9
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1c2      	bne.n	800ae20 <_strtod_l+0xa10>
 800ae9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aea0:	0d1b      	lsrs	r3, r3, #20
 800aea2:	051b      	lsls	r3, r3, #20
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d1bb      	bne.n	800ae20 <_strtod_l+0xa10>
 800aea8:	4630      	mov	r0, r6
 800aeaa:	4639      	mov	r1, r7
 800aeac:	f7f5 ff04 	bl	8000cb8 <__aeabi_d2lz>
 800aeb0:	f7f5 fb74 	bl	800059c <__aeabi_l2d>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4630      	mov	r0, r6
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 f9e4 	bl	8000288 <__aeabi_dsub>
 800aec0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aec2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aec6:	ea43 0308 	orr.w	r3, r3, r8
 800aeca:	4313      	orrs	r3, r2
 800aecc:	4606      	mov	r6, r0
 800aece:	460f      	mov	r7, r1
 800aed0:	d054      	beq.n	800af7c <_strtod_l+0xb6c>
 800aed2:	a339      	add	r3, pc, #228	; (adr r3, 800afb8 <_strtod_l+0xba8>)
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f7f5 fe00 	bl	8000adc <__aeabi_dcmplt>
 800aedc:	2800      	cmp	r0, #0
 800aede:	f47f ace5 	bne.w	800a8ac <_strtod_l+0x49c>
 800aee2:	a337      	add	r3, pc, #220	; (adr r3, 800afc0 <_strtod_l+0xbb0>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	4630      	mov	r0, r6
 800aeea:	4639      	mov	r1, r7
 800aeec:	f7f5 fe14 	bl	8000b18 <__aeabi_dcmpgt>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d095      	beq.n	800ae20 <_strtod_l+0xa10>
 800aef4:	e4da      	b.n	800a8ac <_strtod_l+0x49c>
 800aef6:	9b04      	ldr	r3, [sp, #16]
 800aef8:	b333      	cbz	r3, 800af48 <_strtod_l+0xb38>
 800aefa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aefc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af00:	d822      	bhi.n	800af48 <_strtod_l+0xb38>
 800af02:	a331      	add	r3, pc, #196	; (adr r3, 800afc8 <_strtod_l+0xbb8>)
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	4630      	mov	r0, r6
 800af0a:	4639      	mov	r1, r7
 800af0c:	f7f5 fdf0 	bl	8000af0 <__aeabi_dcmple>
 800af10:	b1a0      	cbz	r0, 800af3c <_strtod_l+0xb2c>
 800af12:	4639      	mov	r1, r7
 800af14:	4630      	mov	r0, r6
 800af16:	f7f5 fe47 	bl	8000ba8 <__aeabi_d2uiz>
 800af1a:	2801      	cmp	r0, #1
 800af1c:	bf38      	it	cc
 800af1e:	2001      	movcc	r0, #1
 800af20:	f7f5 faf0 	bl	8000504 <__aeabi_ui2d>
 800af24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af26:	4606      	mov	r6, r0
 800af28:	460f      	mov	r7, r1
 800af2a:	bb23      	cbnz	r3, 800af76 <_strtod_l+0xb66>
 800af2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af30:	9010      	str	r0, [sp, #64]	; 0x40
 800af32:	9311      	str	r3, [sp, #68]	; 0x44
 800af34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800af3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800af44:	1a9b      	subs	r3, r3, r2
 800af46:	930f      	str	r3, [sp, #60]	; 0x3c
 800af48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800af4c:	eeb0 0a48 	vmov.f32	s0, s16
 800af50:	eef0 0a68 	vmov.f32	s1, s17
 800af54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800af58:	f003 f806 	bl	800df68 <__ulp>
 800af5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800af60:	ec53 2b10 	vmov	r2, r3, d0
 800af64:	f7f5 fb48 	bl	80005f8 <__aeabi_dmul>
 800af68:	ec53 2b18 	vmov	r2, r3, d8
 800af6c:	f7f5 f98e 	bl	800028c <__adddf3>
 800af70:	4680      	mov	r8, r0
 800af72:	4689      	mov	r9, r1
 800af74:	e78d      	b.n	800ae92 <_strtod_l+0xa82>
 800af76:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800af7a:	e7db      	b.n	800af34 <_strtod_l+0xb24>
 800af7c:	a314      	add	r3, pc, #80	; (adr r3, 800afd0 <_strtod_l+0xbc0>)
 800af7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af82:	f7f5 fdab 	bl	8000adc <__aeabi_dcmplt>
 800af86:	e7b3      	b.n	800aef0 <_strtod_l+0xae0>
 800af88:	2300      	movs	r3, #0
 800af8a:	930a      	str	r3, [sp, #40]	; 0x28
 800af8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	f7ff ba7c 	b.w	800a48e <_strtod_l+0x7e>
 800af96:	2a65      	cmp	r2, #101	; 0x65
 800af98:	f43f ab75 	beq.w	800a686 <_strtod_l+0x276>
 800af9c:	2a45      	cmp	r2, #69	; 0x45
 800af9e:	f43f ab72 	beq.w	800a686 <_strtod_l+0x276>
 800afa2:	2301      	movs	r3, #1
 800afa4:	f7ff bbaa 	b.w	800a6fc <_strtod_l+0x2ec>
 800afa8:	00000000 	.word	0x00000000
 800afac:	bff00000 	.word	0xbff00000
 800afb0:	00000000 	.word	0x00000000
 800afb4:	3ff00000 	.word	0x3ff00000
 800afb8:	94a03595 	.word	0x94a03595
 800afbc:	3fdfffff 	.word	0x3fdfffff
 800afc0:	35afe535 	.word	0x35afe535
 800afc4:	3fe00000 	.word	0x3fe00000
 800afc8:	ffc00000 	.word	0xffc00000
 800afcc:	41dfffff 	.word	0x41dfffff
 800afd0:	94a03595 	.word	0x94a03595
 800afd4:	3fcfffff 	.word	0x3fcfffff
 800afd8:	3ff00000 	.word	0x3ff00000
 800afdc:	3fe00000 	.word	0x3fe00000
 800afe0:	7ff00000 	.word	0x7ff00000
 800afe4:	7fe00000 	.word	0x7fe00000
 800afe8:	7c9fffff 	.word	0x7c9fffff
 800afec:	7fefffff 	.word	0x7fefffff

0800aff0 <_strtod_r>:
 800aff0:	4b01      	ldr	r3, [pc, #4]	; (800aff8 <_strtod_r+0x8>)
 800aff2:	f7ff ba0d 	b.w	800a410 <_strtod_l>
 800aff6:	bf00      	nop
 800aff8:	20000038 	.word	0x20000038

0800affc <strtof>:
 800affc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b000:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800b0c4 <strtof+0xc8>
 800b004:	4b2a      	ldr	r3, [pc, #168]	; (800b0b0 <strtof+0xb4>)
 800b006:	460a      	mov	r2, r1
 800b008:	ed2d 8b02 	vpush	{d8}
 800b00c:	4601      	mov	r1, r0
 800b00e:	f8d8 0000 	ldr.w	r0, [r8]
 800b012:	f7ff f9fd 	bl	800a410 <_strtod_l>
 800b016:	ec55 4b10 	vmov	r4, r5, d0
 800b01a:	ee10 2a10 	vmov	r2, s0
 800b01e:	ee10 0a10 	vmov	r0, s0
 800b022:	462b      	mov	r3, r5
 800b024:	4629      	mov	r1, r5
 800b026:	f7f5 fd81 	bl	8000b2c <__aeabi_dcmpun>
 800b02a:	b190      	cbz	r0, 800b052 <strtof+0x56>
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	4821      	ldr	r0, [pc, #132]	; (800b0b4 <strtof+0xb8>)
 800b030:	da09      	bge.n	800b046 <strtof+0x4a>
 800b032:	f001 f9d9 	bl	800c3e8 <nanf>
 800b036:	eeb1 8a40 	vneg.f32	s16, s0
 800b03a:	eeb0 0a48 	vmov.f32	s0, s16
 800b03e:	ecbd 8b02 	vpop	{d8}
 800b042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b046:	ecbd 8b02 	vpop	{d8}
 800b04a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b04e:	f001 b9cb 	b.w	800c3e8 <nanf>
 800b052:	4620      	mov	r0, r4
 800b054:	4629      	mov	r1, r5
 800b056:	f7f5 fdc7 	bl	8000be8 <__aeabi_d2f>
 800b05a:	ee08 0a10 	vmov	s16, r0
 800b05e:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b0b8 <strtof+0xbc>
 800b062:	eeb0 7ac8 	vabs.f32	s14, s16
 800b066:	eeb4 7a67 	vcmp.f32	s14, s15
 800b06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06e:	dd11      	ble.n	800b094 <strtof+0x98>
 800b070:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800b074:	4b11      	ldr	r3, [pc, #68]	; (800b0bc <strtof+0xc0>)
 800b076:	f04f 32ff 	mov.w	r2, #4294967295
 800b07a:	4620      	mov	r0, r4
 800b07c:	4639      	mov	r1, r7
 800b07e:	f7f5 fd55 	bl	8000b2c <__aeabi_dcmpun>
 800b082:	b980      	cbnz	r0, 800b0a6 <strtof+0xaa>
 800b084:	4b0d      	ldr	r3, [pc, #52]	; (800b0bc <strtof+0xc0>)
 800b086:	f04f 32ff 	mov.w	r2, #4294967295
 800b08a:	4620      	mov	r0, r4
 800b08c:	4639      	mov	r1, r7
 800b08e:	f7f5 fd2f 	bl	8000af0 <__aeabi_dcmple>
 800b092:	b940      	cbnz	r0, 800b0a6 <strtof+0xaa>
 800b094:	ee18 3a10 	vmov	r3, s16
 800b098:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b09c:	d1cd      	bne.n	800b03a <strtof+0x3e>
 800b09e:	4b08      	ldr	r3, [pc, #32]	; (800b0c0 <strtof+0xc4>)
 800b0a0:	402b      	ands	r3, r5
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d0c9      	beq.n	800b03a <strtof+0x3e>
 800b0a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b0aa:	2222      	movs	r2, #34	; 0x22
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	e7c4      	b.n	800b03a <strtof+0x3e>
 800b0b0:	20000038 	.word	0x20000038
 800b0b4:	08011fd6 	.word	0x08011fd6
 800b0b8:	7f7fffff 	.word	0x7f7fffff
 800b0bc:	7fefffff 	.word	0x7fefffff
 800b0c0:	7ff00000 	.word	0x7ff00000
 800b0c4:	200001f0 	.word	0x200001f0

0800b0c8 <_strtol_l.constprop.0>:
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ce:	d001      	beq.n	800b0d4 <_strtol_l.constprop.0+0xc>
 800b0d0:	2b24      	cmp	r3, #36	; 0x24
 800b0d2:	d906      	bls.n	800b0e2 <_strtol_l.constprop.0+0x1a>
 800b0d4:	f001 f93c 	bl	800c350 <__errno>
 800b0d8:	2316      	movs	r3, #22
 800b0da:	6003      	str	r3, [r0, #0]
 800b0dc:	2000      	movs	r0, #0
 800b0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b1c8 <_strtol_l.constprop.0+0x100>
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	462e      	mov	r6, r5
 800b0ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0ee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b0f2:	f017 0708 	ands.w	r7, r7, #8
 800b0f6:	d1f7      	bne.n	800b0e8 <_strtol_l.constprop.0+0x20>
 800b0f8:	2c2d      	cmp	r4, #45	; 0x2d
 800b0fa:	d132      	bne.n	800b162 <_strtol_l.constprop.0+0x9a>
 800b0fc:	782c      	ldrb	r4, [r5, #0]
 800b0fe:	2701      	movs	r7, #1
 800b100:	1cb5      	adds	r5, r6, #2
 800b102:	2b00      	cmp	r3, #0
 800b104:	d05b      	beq.n	800b1be <_strtol_l.constprop.0+0xf6>
 800b106:	2b10      	cmp	r3, #16
 800b108:	d109      	bne.n	800b11e <_strtol_l.constprop.0+0x56>
 800b10a:	2c30      	cmp	r4, #48	; 0x30
 800b10c:	d107      	bne.n	800b11e <_strtol_l.constprop.0+0x56>
 800b10e:	782c      	ldrb	r4, [r5, #0]
 800b110:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b114:	2c58      	cmp	r4, #88	; 0x58
 800b116:	d14d      	bne.n	800b1b4 <_strtol_l.constprop.0+0xec>
 800b118:	786c      	ldrb	r4, [r5, #1]
 800b11a:	2310      	movs	r3, #16
 800b11c:	3502      	adds	r5, #2
 800b11e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b122:	f108 38ff 	add.w	r8, r8, #4294967295
 800b126:	f04f 0e00 	mov.w	lr, #0
 800b12a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b12e:	4676      	mov	r6, lr
 800b130:	fb03 8a19 	mls	sl, r3, r9, r8
 800b134:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b138:	f1bc 0f09 	cmp.w	ip, #9
 800b13c:	d816      	bhi.n	800b16c <_strtol_l.constprop.0+0xa4>
 800b13e:	4664      	mov	r4, ip
 800b140:	42a3      	cmp	r3, r4
 800b142:	dd24      	ble.n	800b18e <_strtol_l.constprop.0+0xc6>
 800b144:	f1be 3fff 	cmp.w	lr, #4294967295
 800b148:	d008      	beq.n	800b15c <_strtol_l.constprop.0+0x94>
 800b14a:	45b1      	cmp	r9, r6
 800b14c:	d31c      	bcc.n	800b188 <_strtol_l.constprop.0+0xc0>
 800b14e:	d101      	bne.n	800b154 <_strtol_l.constprop.0+0x8c>
 800b150:	45a2      	cmp	sl, r4
 800b152:	db19      	blt.n	800b188 <_strtol_l.constprop.0+0xc0>
 800b154:	fb06 4603 	mla	r6, r6, r3, r4
 800b158:	f04f 0e01 	mov.w	lr, #1
 800b15c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b160:	e7e8      	b.n	800b134 <_strtol_l.constprop.0+0x6c>
 800b162:	2c2b      	cmp	r4, #43	; 0x2b
 800b164:	bf04      	itt	eq
 800b166:	782c      	ldrbeq	r4, [r5, #0]
 800b168:	1cb5      	addeq	r5, r6, #2
 800b16a:	e7ca      	b.n	800b102 <_strtol_l.constprop.0+0x3a>
 800b16c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b170:	f1bc 0f19 	cmp.w	ip, #25
 800b174:	d801      	bhi.n	800b17a <_strtol_l.constprop.0+0xb2>
 800b176:	3c37      	subs	r4, #55	; 0x37
 800b178:	e7e2      	b.n	800b140 <_strtol_l.constprop.0+0x78>
 800b17a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b17e:	f1bc 0f19 	cmp.w	ip, #25
 800b182:	d804      	bhi.n	800b18e <_strtol_l.constprop.0+0xc6>
 800b184:	3c57      	subs	r4, #87	; 0x57
 800b186:	e7db      	b.n	800b140 <_strtol_l.constprop.0+0x78>
 800b188:	f04f 3eff 	mov.w	lr, #4294967295
 800b18c:	e7e6      	b.n	800b15c <_strtol_l.constprop.0+0x94>
 800b18e:	f1be 3fff 	cmp.w	lr, #4294967295
 800b192:	d105      	bne.n	800b1a0 <_strtol_l.constprop.0+0xd8>
 800b194:	2322      	movs	r3, #34	; 0x22
 800b196:	6003      	str	r3, [r0, #0]
 800b198:	4646      	mov	r6, r8
 800b19a:	b942      	cbnz	r2, 800b1ae <_strtol_l.constprop.0+0xe6>
 800b19c:	4630      	mov	r0, r6
 800b19e:	e79e      	b.n	800b0de <_strtol_l.constprop.0+0x16>
 800b1a0:	b107      	cbz	r7, 800b1a4 <_strtol_l.constprop.0+0xdc>
 800b1a2:	4276      	negs	r6, r6
 800b1a4:	2a00      	cmp	r2, #0
 800b1a6:	d0f9      	beq.n	800b19c <_strtol_l.constprop.0+0xd4>
 800b1a8:	f1be 0f00 	cmp.w	lr, #0
 800b1ac:	d000      	beq.n	800b1b0 <_strtol_l.constprop.0+0xe8>
 800b1ae:	1e69      	subs	r1, r5, #1
 800b1b0:	6011      	str	r1, [r2, #0]
 800b1b2:	e7f3      	b.n	800b19c <_strtol_l.constprop.0+0xd4>
 800b1b4:	2430      	movs	r4, #48	; 0x30
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1b1      	bne.n	800b11e <_strtol_l.constprop.0+0x56>
 800b1ba:	2308      	movs	r3, #8
 800b1bc:	e7af      	b.n	800b11e <_strtol_l.constprop.0+0x56>
 800b1be:	2c30      	cmp	r4, #48	; 0x30
 800b1c0:	d0a5      	beq.n	800b10e <_strtol_l.constprop.0+0x46>
 800b1c2:	230a      	movs	r3, #10
 800b1c4:	e7ab      	b.n	800b11e <_strtol_l.constprop.0+0x56>
 800b1c6:	bf00      	nop
 800b1c8:	08011de9 	.word	0x08011de9

0800b1cc <_strtol_r>:
 800b1cc:	f7ff bf7c 	b.w	800b0c8 <_strtol_l.constprop.0>

0800b1d0 <strtol>:
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	460a      	mov	r2, r1
 800b1d4:	4601      	mov	r1, r0
 800b1d6:	4802      	ldr	r0, [pc, #8]	; (800b1e0 <strtol+0x10>)
 800b1d8:	6800      	ldr	r0, [r0, #0]
 800b1da:	f7ff bf75 	b.w	800b0c8 <_strtol_l.constprop.0>
 800b1de:	bf00      	nop
 800b1e0:	200001f0 	.word	0x200001f0

0800b1e4 <__cvt>:
 800b1e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e8:	ec55 4b10 	vmov	r4, r5, d0
 800b1ec:	2d00      	cmp	r5, #0
 800b1ee:	460e      	mov	r6, r1
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	462b      	mov	r3, r5
 800b1f4:	bfbb      	ittet	lt
 800b1f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b1fa:	461d      	movlt	r5, r3
 800b1fc:	2300      	movge	r3, #0
 800b1fe:	232d      	movlt	r3, #45	; 0x2d
 800b200:	700b      	strb	r3, [r1, #0]
 800b202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b204:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b208:	4691      	mov	r9, r2
 800b20a:	f023 0820 	bic.w	r8, r3, #32
 800b20e:	bfbc      	itt	lt
 800b210:	4622      	movlt	r2, r4
 800b212:	4614      	movlt	r4, r2
 800b214:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b218:	d005      	beq.n	800b226 <__cvt+0x42>
 800b21a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b21e:	d100      	bne.n	800b222 <__cvt+0x3e>
 800b220:	3601      	adds	r6, #1
 800b222:	2102      	movs	r1, #2
 800b224:	e000      	b.n	800b228 <__cvt+0x44>
 800b226:	2103      	movs	r1, #3
 800b228:	ab03      	add	r3, sp, #12
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	ab02      	add	r3, sp, #8
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	ec45 4b10 	vmov	d0, r4, r5
 800b234:	4653      	mov	r3, sl
 800b236:	4632      	mov	r2, r6
 800b238:	f001 f982 	bl	800c540 <_dtoa_r>
 800b23c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b240:	4607      	mov	r7, r0
 800b242:	d102      	bne.n	800b24a <__cvt+0x66>
 800b244:	f019 0f01 	tst.w	r9, #1
 800b248:	d022      	beq.n	800b290 <__cvt+0xac>
 800b24a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b24e:	eb07 0906 	add.w	r9, r7, r6
 800b252:	d110      	bne.n	800b276 <__cvt+0x92>
 800b254:	783b      	ldrb	r3, [r7, #0]
 800b256:	2b30      	cmp	r3, #48	; 0x30
 800b258:	d10a      	bne.n	800b270 <__cvt+0x8c>
 800b25a:	2200      	movs	r2, #0
 800b25c:	2300      	movs	r3, #0
 800b25e:	4620      	mov	r0, r4
 800b260:	4629      	mov	r1, r5
 800b262:	f7f5 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 800b266:	b918      	cbnz	r0, 800b270 <__cvt+0x8c>
 800b268:	f1c6 0601 	rsb	r6, r6, #1
 800b26c:	f8ca 6000 	str.w	r6, [sl]
 800b270:	f8da 3000 	ldr.w	r3, [sl]
 800b274:	4499      	add	r9, r3
 800b276:	2200      	movs	r2, #0
 800b278:	2300      	movs	r3, #0
 800b27a:	4620      	mov	r0, r4
 800b27c:	4629      	mov	r1, r5
 800b27e:	f7f5 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 800b282:	b108      	cbz	r0, 800b288 <__cvt+0xa4>
 800b284:	f8cd 900c 	str.w	r9, [sp, #12]
 800b288:	2230      	movs	r2, #48	; 0x30
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	454b      	cmp	r3, r9
 800b28e:	d307      	bcc.n	800b2a0 <__cvt+0xbc>
 800b290:	9b03      	ldr	r3, [sp, #12]
 800b292:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b294:	1bdb      	subs	r3, r3, r7
 800b296:	4638      	mov	r0, r7
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	b004      	add	sp, #16
 800b29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a0:	1c59      	adds	r1, r3, #1
 800b2a2:	9103      	str	r1, [sp, #12]
 800b2a4:	701a      	strb	r2, [r3, #0]
 800b2a6:	e7f0      	b.n	800b28a <__cvt+0xa6>

0800b2a8 <__exponent>:
 800b2a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2900      	cmp	r1, #0
 800b2ae:	bfb8      	it	lt
 800b2b0:	4249      	neglt	r1, r1
 800b2b2:	f803 2b02 	strb.w	r2, [r3], #2
 800b2b6:	bfb4      	ite	lt
 800b2b8:	222d      	movlt	r2, #45	; 0x2d
 800b2ba:	222b      	movge	r2, #43	; 0x2b
 800b2bc:	2909      	cmp	r1, #9
 800b2be:	7042      	strb	r2, [r0, #1]
 800b2c0:	dd2a      	ble.n	800b318 <__exponent+0x70>
 800b2c2:	f10d 0207 	add.w	r2, sp, #7
 800b2c6:	4617      	mov	r7, r2
 800b2c8:	260a      	movs	r6, #10
 800b2ca:	4694      	mov	ip, r2
 800b2cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800b2d0:	fb06 1415 	mls	r4, r6, r5, r1
 800b2d4:	3430      	adds	r4, #48	; 0x30
 800b2d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b2da:	460c      	mov	r4, r1
 800b2dc:	2c63      	cmp	r4, #99	; 0x63
 800b2de:	f102 32ff 	add.w	r2, r2, #4294967295
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	dcf1      	bgt.n	800b2ca <__exponent+0x22>
 800b2e6:	3130      	adds	r1, #48	; 0x30
 800b2e8:	f1ac 0402 	sub.w	r4, ip, #2
 800b2ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b2f0:	1c41      	adds	r1, r0, #1
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	42ba      	cmp	r2, r7
 800b2f6:	d30a      	bcc.n	800b30e <__exponent+0x66>
 800b2f8:	f10d 0209 	add.w	r2, sp, #9
 800b2fc:	eba2 020c 	sub.w	r2, r2, ip
 800b300:	42bc      	cmp	r4, r7
 800b302:	bf88      	it	hi
 800b304:	2200      	movhi	r2, #0
 800b306:	4413      	add	r3, r2
 800b308:	1a18      	subs	r0, r3, r0
 800b30a:	b003      	add	sp, #12
 800b30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b30e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b312:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b316:	e7ed      	b.n	800b2f4 <__exponent+0x4c>
 800b318:	2330      	movs	r3, #48	; 0x30
 800b31a:	3130      	adds	r1, #48	; 0x30
 800b31c:	7083      	strb	r3, [r0, #2]
 800b31e:	70c1      	strb	r1, [r0, #3]
 800b320:	1d03      	adds	r3, r0, #4
 800b322:	e7f1      	b.n	800b308 <__exponent+0x60>

0800b324 <_printf_float>:
 800b324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b328:	ed2d 8b02 	vpush	{d8}
 800b32c:	b08d      	sub	sp, #52	; 0x34
 800b32e:	460c      	mov	r4, r1
 800b330:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b334:	4616      	mov	r6, r2
 800b336:	461f      	mov	r7, r3
 800b338:	4605      	mov	r5, r0
 800b33a:	f000 ffaf 	bl	800c29c <_localeconv_r>
 800b33e:	f8d0 a000 	ldr.w	sl, [r0]
 800b342:	4650      	mov	r0, sl
 800b344:	f7f4 ff94 	bl	8000270 <strlen>
 800b348:	2300      	movs	r3, #0
 800b34a:	930a      	str	r3, [sp, #40]	; 0x28
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	9305      	str	r3, [sp, #20]
 800b350:	f8d8 3000 	ldr.w	r3, [r8]
 800b354:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b358:	3307      	adds	r3, #7
 800b35a:	f023 0307 	bic.w	r3, r3, #7
 800b35e:	f103 0208 	add.w	r2, r3, #8
 800b362:	f8c8 2000 	str.w	r2, [r8]
 800b366:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b36a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b36e:	9307      	str	r3, [sp, #28]
 800b370:	f8cd 8018 	str.w	r8, [sp, #24]
 800b374:	ee08 0a10 	vmov	s16, r0
 800b378:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b37c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b380:	4b9e      	ldr	r3, [pc, #632]	; (800b5fc <_printf_float+0x2d8>)
 800b382:	f04f 32ff 	mov.w	r2, #4294967295
 800b386:	f7f5 fbd1 	bl	8000b2c <__aeabi_dcmpun>
 800b38a:	bb88      	cbnz	r0, 800b3f0 <_printf_float+0xcc>
 800b38c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b390:	4b9a      	ldr	r3, [pc, #616]	; (800b5fc <_printf_float+0x2d8>)
 800b392:	f04f 32ff 	mov.w	r2, #4294967295
 800b396:	f7f5 fbab 	bl	8000af0 <__aeabi_dcmple>
 800b39a:	bb48      	cbnz	r0, 800b3f0 <_printf_float+0xcc>
 800b39c:	2200      	movs	r2, #0
 800b39e:	2300      	movs	r3, #0
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	f7f5 fb9a 	bl	8000adc <__aeabi_dcmplt>
 800b3a8:	b110      	cbz	r0, 800b3b0 <_printf_float+0x8c>
 800b3aa:	232d      	movs	r3, #45	; 0x2d
 800b3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3b0:	4a93      	ldr	r2, [pc, #588]	; (800b600 <_printf_float+0x2dc>)
 800b3b2:	4b94      	ldr	r3, [pc, #592]	; (800b604 <_printf_float+0x2e0>)
 800b3b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b3b8:	bf94      	ite	ls
 800b3ba:	4690      	movls	r8, r2
 800b3bc:	4698      	movhi	r8, r3
 800b3be:	2303      	movs	r3, #3
 800b3c0:	6123      	str	r3, [r4, #16]
 800b3c2:	9b05      	ldr	r3, [sp, #20]
 800b3c4:	f023 0304 	bic.w	r3, r3, #4
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	f04f 0900 	mov.w	r9, #0
 800b3ce:	9700      	str	r7, [sp, #0]
 800b3d0:	4633      	mov	r3, r6
 800b3d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f000 f9da 	bl	800b790 <_printf_common>
 800b3dc:	3001      	adds	r0, #1
 800b3de:	f040 8090 	bne.w	800b502 <_printf_float+0x1de>
 800b3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e6:	b00d      	add	sp, #52	; 0x34
 800b3e8:	ecbd 8b02 	vpop	{d8}
 800b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f0:	4642      	mov	r2, r8
 800b3f2:	464b      	mov	r3, r9
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	f7f5 fb98 	bl	8000b2c <__aeabi_dcmpun>
 800b3fc:	b140      	cbz	r0, 800b410 <_printf_float+0xec>
 800b3fe:	464b      	mov	r3, r9
 800b400:	2b00      	cmp	r3, #0
 800b402:	bfbc      	itt	lt
 800b404:	232d      	movlt	r3, #45	; 0x2d
 800b406:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b40a:	4a7f      	ldr	r2, [pc, #508]	; (800b608 <_printf_float+0x2e4>)
 800b40c:	4b7f      	ldr	r3, [pc, #508]	; (800b60c <_printf_float+0x2e8>)
 800b40e:	e7d1      	b.n	800b3b4 <_printf_float+0x90>
 800b410:	6863      	ldr	r3, [r4, #4]
 800b412:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b416:	9206      	str	r2, [sp, #24]
 800b418:	1c5a      	adds	r2, r3, #1
 800b41a:	d13f      	bne.n	800b49c <_printf_float+0x178>
 800b41c:	2306      	movs	r3, #6
 800b41e:	6063      	str	r3, [r4, #4]
 800b420:	9b05      	ldr	r3, [sp, #20]
 800b422:	6861      	ldr	r1, [r4, #4]
 800b424:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b428:	2300      	movs	r3, #0
 800b42a:	9303      	str	r3, [sp, #12]
 800b42c:	ab0a      	add	r3, sp, #40	; 0x28
 800b42e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b432:	ab09      	add	r3, sp, #36	; 0x24
 800b434:	ec49 8b10 	vmov	d0, r8, r9
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	6022      	str	r2, [r4, #0]
 800b43c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b440:	4628      	mov	r0, r5
 800b442:	f7ff fecf 	bl	800b1e4 <__cvt>
 800b446:	9b06      	ldr	r3, [sp, #24]
 800b448:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b44a:	2b47      	cmp	r3, #71	; 0x47
 800b44c:	4680      	mov	r8, r0
 800b44e:	d108      	bne.n	800b462 <_printf_float+0x13e>
 800b450:	1cc8      	adds	r0, r1, #3
 800b452:	db02      	blt.n	800b45a <_printf_float+0x136>
 800b454:	6863      	ldr	r3, [r4, #4]
 800b456:	4299      	cmp	r1, r3
 800b458:	dd41      	ble.n	800b4de <_printf_float+0x1ba>
 800b45a:	f1ab 0302 	sub.w	r3, fp, #2
 800b45e:	fa5f fb83 	uxtb.w	fp, r3
 800b462:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b466:	d820      	bhi.n	800b4aa <_printf_float+0x186>
 800b468:	3901      	subs	r1, #1
 800b46a:	465a      	mov	r2, fp
 800b46c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b470:	9109      	str	r1, [sp, #36]	; 0x24
 800b472:	f7ff ff19 	bl	800b2a8 <__exponent>
 800b476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b478:	1813      	adds	r3, r2, r0
 800b47a:	2a01      	cmp	r2, #1
 800b47c:	4681      	mov	r9, r0
 800b47e:	6123      	str	r3, [r4, #16]
 800b480:	dc02      	bgt.n	800b488 <_printf_float+0x164>
 800b482:	6822      	ldr	r2, [r4, #0]
 800b484:	07d2      	lsls	r2, r2, #31
 800b486:	d501      	bpl.n	800b48c <_printf_float+0x168>
 800b488:	3301      	adds	r3, #1
 800b48a:	6123      	str	r3, [r4, #16]
 800b48c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b490:	2b00      	cmp	r3, #0
 800b492:	d09c      	beq.n	800b3ce <_printf_float+0xaa>
 800b494:	232d      	movs	r3, #45	; 0x2d
 800b496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b49a:	e798      	b.n	800b3ce <_printf_float+0xaa>
 800b49c:	9a06      	ldr	r2, [sp, #24]
 800b49e:	2a47      	cmp	r2, #71	; 0x47
 800b4a0:	d1be      	bne.n	800b420 <_printf_float+0xfc>
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1bc      	bne.n	800b420 <_printf_float+0xfc>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e7b9      	b.n	800b41e <_printf_float+0xfa>
 800b4aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b4ae:	d118      	bne.n	800b4e2 <_printf_float+0x1be>
 800b4b0:	2900      	cmp	r1, #0
 800b4b2:	6863      	ldr	r3, [r4, #4]
 800b4b4:	dd0b      	ble.n	800b4ce <_printf_float+0x1aa>
 800b4b6:	6121      	str	r1, [r4, #16]
 800b4b8:	b913      	cbnz	r3, 800b4c0 <_printf_float+0x19c>
 800b4ba:	6822      	ldr	r2, [r4, #0]
 800b4bc:	07d0      	lsls	r0, r2, #31
 800b4be:	d502      	bpl.n	800b4c6 <_printf_float+0x1a2>
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	440b      	add	r3, r1
 800b4c4:	6123      	str	r3, [r4, #16]
 800b4c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b4c8:	f04f 0900 	mov.w	r9, #0
 800b4cc:	e7de      	b.n	800b48c <_printf_float+0x168>
 800b4ce:	b913      	cbnz	r3, 800b4d6 <_printf_float+0x1b2>
 800b4d0:	6822      	ldr	r2, [r4, #0]
 800b4d2:	07d2      	lsls	r2, r2, #31
 800b4d4:	d501      	bpl.n	800b4da <_printf_float+0x1b6>
 800b4d6:	3302      	adds	r3, #2
 800b4d8:	e7f4      	b.n	800b4c4 <_printf_float+0x1a0>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e7f2      	b.n	800b4c4 <_printf_float+0x1a0>
 800b4de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b4e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4e4:	4299      	cmp	r1, r3
 800b4e6:	db05      	blt.n	800b4f4 <_printf_float+0x1d0>
 800b4e8:	6823      	ldr	r3, [r4, #0]
 800b4ea:	6121      	str	r1, [r4, #16]
 800b4ec:	07d8      	lsls	r0, r3, #31
 800b4ee:	d5ea      	bpl.n	800b4c6 <_printf_float+0x1a2>
 800b4f0:	1c4b      	adds	r3, r1, #1
 800b4f2:	e7e7      	b.n	800b4c4 <_printf_float+0x1a0>
 800b4f4:	2900      	cmp	r1, #0
 800b4f6:	bfd4      	ite	le
 800b4f8:	f1c1 0202 	rsble	r2, r1, #2
 800b4fc:	2201      	movgt	r2, #1
 800b4fe:	4413      	add	r3, r2
 800b500:	e7e0      	b.n	800b4c4 <_printf_float+0x1a0>
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	055a      	lsls	r2, r3, #21
 800b506:	d407      	bmi.n	800b518 <_printf_float+0x1f4>
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	4642      	mov	r2, r8
 800b50c:	4631      	mov	r1, r6
 800b50e:	4628      	mov	r0, r5
 800b510:	47b8      	blx	r7
 800b512:	3001      	adds	r0, #1
 800b514:	d12c      	bne.n	800b570 <_printf_float+0x24c>
 800b516:	e764      	b.n	800b3e2 <_printf_float+0xbe>
 800b518:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b51c:	f240 80e0 	bls.w	800b6e0 <_printf_float+0x3bc>
 800b520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b524:	2200      	movs	r2, #0
 800b526:	2300      	movs	r3, #0
 800b528:	f7f5 face 	bl	8000ac8 <__aeabi_dcmpeq>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d034      	beq.n	800b59a <_printf_float+0x276>
 800b530:	4a37      	ldr	r2, [pc, #220]	; (800b610 <_printf_float+0x2ec>)
 800b532:	2301      	movs	r3, #1
 800b534:	4631      	mov	r1, r6
 800b536:	4628      	mov	r0, r5
 800b538:	47b8      	blx	r7
 800b53a:	3001      	adds	r0, #1
 800b53c:	f43f af51 	beq.w	800b3e2 <_printf_float+0xbe>
 800b540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b544:	429a      	cmp	r2, r3
 800b546:	db02      	blt.n	800b54e <_printf_float+0x22a>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	07d8      	lsls	r0, r3, #31
 800b54c:	d510      	bpl.n	800b570 <_printf_float+0x24c>
 800b54e:	ee18 3a10 	vmov	r3, s16
 800b552:	4652      	mov	r2, sl
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	f43f af41 	beq.w	800b3e2 <_printf_float+0xbe>
 800b560:	f04f 0800 	mov.w	r8, #0
 800b564:	f104 091a 	add.w	r9, r4, #26
 800b568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b56a:	3b01      	subs	r3, #1
 800b56c:	4543      	cmp	r3, r8
 800b56e:	dc09      	bgt.n	800b584 <_printf_float+0x260>
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	079b      	lsls	r3, r3, #30
 800b574:	f100 8107 	bmi.w	800b786 <_printf_float+0x462>
 800b578:	68e0      	ldr	r0, [r4, #12]
 800b57a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b57c:	4298      	cmp	r0, r3
 800b57e:	bfb8      	it	lt
 800b580:	4618      	movlt	r0, r3
 800b582:	e730      	b.n	800b3e6 <_printf_float+0xc2>
 800b584:	2301      	movs	r3, #1
 800b586:	464a      	mov	r2, r9
 800b588:	4631      	mov	r1, r6
 800b58a:	4628      	mov	r0, r5
 800b58c:	47b8      	blx	r7
 800b58e:	3001      	adds	r0, #1
 800b590:	f43f af27 	beq.w	800b3e2 <_printf_float+0xbe>
 800b594:	f108 0801 	add.w	r8, r8, #1
 800b598:	e7e6      	b.n	800b568 <_printf_float+0x244>
 800b59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	dc39      	bgt.n	800b614 <_printf_float+0x2f0>
 800b5a0:	4a1b      	ldr	r2, [pc, #108]	; (800b610 <_printf_float+0x2ec>)
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	47b8      	blx	r7
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	f43f af19 	beq.w	800b3e2 <_printf_float+0xbe>
 800b5b0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	d102      	bne.n	800b5be <_printf_float+0x29a>
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	07d9      	lsls	r1, r3, #31
 800b5bc:	d5d8      	bpl.n	800b570 <_printf_float+0x24c>
 800b5be:	ee18 3a10 	vmov	r3, s16
 800b5c2:	4652      	mov	r2, sl
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	47b8      	blx	r7
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	f43f af09 	beq.w	800b3e2 <_printf_float+0xbe>
 800b5d0:	f04f 0900 	mov.w	r9, #0
 800b5d4:	f104 0a1a 	add.w	sl, r4, #26
 800b5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5da:	425b      	negs	r3, r3
 800b5dc:	454b      	cmp	r3, r9
 800b5de:	dc01      	bgt.n	800b5e4 <_printf_float+0x2c0>
 800b5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5e2:	e792      	b.n	800b50a <_printf_float+0x1e6>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	4652      	mov	r2, sl
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	f43f aef7 	beq.w	800b3e2 <_printf_float+0xbe>
 800b5f4:	f109 0901 	add.w	r9, r9, #1
 800b5f8:	e7ee      	b.n	800b5d8 <_printf_float+0x2b4>
 800b5fa:	bf00      	nop
 800b5fc:	7fefffff 	.word	0x7fefffff
 800b600:	08011ee9 	.word	0x08011ee9
 800b604:	08011eed 	.word	0x08011eed
 800b608:	08011ef1 	.word	0x08011ef1
 800b60c:	08011ef5 	.word	0x08011ef5
 800b610:	08011ef9 	.word	0x08011ef9
 800b614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b616:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b618:	429a      	cmp	r2, r3
 800b61a:	bfa8      	it	ge
 800b61c:	461a      	movge	r2, r3
 800b61e:	2a00      	cmp	r2, #0
 800b620:	4691      	mov	r9, r2
 800b622:	dc37      	bgt.n	800b694 <_printf_float+0x370>
 800b624:	f04f 0b00 	mov.w	fp, #0
 800b628:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b62c:	f104 021a 	add.w	r2, r4, #26
 800b630:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b632:	9305      	str	r3, [sp, #20]
 800b634:	eba3 0309 	sub.w	r3, r3, r9
 800b638:	455b      	cmp	r3, fp
 800b63a:	dc33      	bgt.n	800b6a4 <_printf_float+0x380>
 800b63c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b640:	429a      	cmp	r2, r3
 800b642:	db3b      	blt.n	800b6bc <_printf_float+0x398>
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	07da      	lsls	r2, r3, #31
 800b648:	d438      	bmi.n	800b6bc <_printf_float+0x398>
 800b64a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b64e:	eba2 0903 	sub.w	r9, r2, r3
 800b652:	9b05      	ldr	r3, [sp, #20]
 800b654:	1ad2      	subs	r2, r2, r3
 800b656:	4591      	cmp	r9, r2
 800b658:	bfa8      	it	ge
 800b65a:	4691      	movge	r9, r2
 800b65c:	f1b9 0f00 	cmp.w	r9, #0
 800b660:	dc35      	bgt.n	800b6ce <_printf_float+0x3aa>
 800b662:	f04f 0800 	mov.w	r8, #0
 800b666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b66a:	f104 0a1a 	add.w	sl, r4, #26
 800b66e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b672:	1a9b      	subs	r3, r3, r2
 800b674:	eba3 0309 	sub.w	r3, r3, r9
 800b678:	4543      	cmp	r3, r8
 800b67a:	f77f af79 	ble.w	800b570 <_printf_float+0x24c>
 800b67e:	2301      	movs	r3, #1
 800b680:	4652      	mov	r2, sl
 800b682:	4631      	mov	r1, r6
 800b684:	4628      	mov	r0, r5
 800b686:	47b8      	blx	r7
 800b688:	3001      	adds	r0, #1
 800b68a:	f43f aeaa 	beq.w	800b3e2 <_printf_float+0xbe>
 800b68e:	f108 0801 	add.w	r8, r8, #1
 800b692:	e7ec      	b.n	800b66e <_printf_float+0x34a>
 800b694:	4613      	mov	r3, r2
 800b696:	4631      	mov	r1, r6
 800b698:	4642      	mov	r2, r8
 800b69a:	4628      	mov	r0, r5
 800b69c:	47b8      	blx	r7
 800b69e:	3001      	adds	r0, #1
 800b6a0:	d1c0      	bne.n	800b624 <_printf_float+0x300>
 800b6a2:	e69e      	b.n	800b3e2 <_printf_float+0xbe>
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	9205      	str	r2, [sp, #20]
 800b6ac:	47b8      	blx	r7
 800b6ae:	3001      	adds	r0, #1
 800b6b0:	f43f ae97 	beq.w	800b3e2 <_printf_float+0xbe>
 800b6b4:	9a05      	ldr	r2, [sp, #20]
 800b6b6:	f10b 0b01 	add.w	fp, fp, #1
 800b6ba:	e7b9      	b.n	800b630 <_printf_float+0x30c>
 800b6bc:	ee18 3a10 	vmov	r3, s16
 800b6c0:	4652      	mov	r2, sl
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	47b8      	blx	r7
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d1be      	bne.n	800b64a <_printf_float+0x326>
 800b6cc:	e689      	b.n	800b3e2 <_printf_float+0xbe>
 800b6ce:	9a05      	ldr	r2, [sp, #20]
 800b6d0:	464b      	mov	r3, r9
 800b6d2:	4442      	add	r2, r8
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	47b8      	blx	r7
 800b6da:	3001      	adds	r0, #1
 800b6dc:	d1c1      	bne.n	800b662 <_printf_float+0x33e>
 800b6de:	e680      	b.n	800b3e2 <_printf_float+0xbe>
 800b6e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6e2:	2a01      	cmp	r2, #1
 800b6e4:	dc01      	bgt.n	800b6ea <_printf_float+0x3c6>
 800b6e6:	07db      	lsls	r3, r3, #31
 800b6e8:	d53a      	bpl.n	800b760 <_printf_float+0x43c>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	47b8      	blx	r7
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	f43f ae74 	beq.w	800b3e2 <_printf_float+0xbe>
 800b6fa:	ee18 3a10 	vmov	r3, s16
 800b6fe:	4652      	mov	r2, sl
 800b700:	4631      	mov	r1, r6
 800b702:	4628      	mov	r0, r5
 800b704:	47b8      	blx	r7
 800b706:	3001      	adds	r0, #1
 800b708:	f43f ae6b 	beq.w	800b3e2 <_printf_float+0xbe>
 800b70c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b710:	2200      	movs	r2, #0
 800b712:	2300      	movs	r3, #0
 800b714:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b718:	f7f5 f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b71c:	b9d8      	cbnz	r0, 800b756 <_printf_float+0x432>
 800b71e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b722:	f108 0201 	add.w	r2, r8, #1
 800b726:	4631      	mov	r1, r6
 800b728:	4628      	mov	r0, r5
 800b72a:	47b8      	blx	r7
 800b72c:	3001      	adds	r0, #1
 800b72e:	d10e      	bne.n	800b74e <_printf_float+0x42a>
 800b730:	e657      	b.n	800b3e2 <_printf_float+0xbe>
 800b732:	2301      	movs	r3, #1
 800b734:	4652      	mov	r2, sl
 800b736:	4631      	mov	r1, r6
 800b738:	4628      	mov	r0, r5
 800b73a:	47b8      	blx	r7
 800b73c:	3001      	adds	r0, #1
 800b73e:	f43f ae50 	beq.w	800b3e2 <_printf_float+0xbe>
 800b742:	f108 0801 	add.w	r8, r8, #1
 800b746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b748:	3b01      	subs	r3, #1
 800b74a:	4543      	cmp	r3, r8
 800b74c:	dcf1      	bgt.n	800b732 <_printf_float+0x40e>
 800b74e:	464b      	mov	r3, r9
 800b750:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b754:	e6da      	b.n	800b50c <_printf_float+0x1e8>
 800b756:	f04f 0800 	mov.w	r8, #0
 800b75a:	f104 0a1a 	add.w	sl, r4, #26
 800b75e:	e7f2      	b.n	800b746 <_printf_float+0x422>
 800b760:	2301      	movs	r3, #1
 800b762:	4642      	mov	r2, r8
 800b764:	e7df      	b.n	800b726 <_printf_float+0x402>
 800b766:	2301      	movs	r3, #1
 800b768:	464a      	mov	r2, r9
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b8      	blx	r7
 800b770:	3001      	adds	r0, #1
 800b772:	f43f ae36 	beq.w	800b3e2 <_printf_float+0xbe>
 800b776:	f108 0801 	add.w	r8, r8, #1
 800b77a:	68e3      	ldr	r3, [r4, #12]
 800b77c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b77e:	1a5b      	subs	r3, r3, r1
 800b780:	4543      	cmp	r3, r8
 800b782:	dcf0      	bgt.n	800b766 <_printf_float+0x442>
 800b784:	e6f8      	b.n	800b578 <_printf_float+0x254>
 800b786:	f04f 0800 	mov.w	r8, #0
 800b78a:	f104 0919 	add.w	r9, r4, #25
 800b78e:	e7f4      	b.n	800b77a <_printf_float+0x456>

0800b790 <_printf_common>:
 800b790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b794:	4616      	mov	r6, r2
 800b796:	4699      	mov	r9, r3
 800b798:	688a      	ldr	r2, [r1, #8]
 800b79a:	690b      	ldr	r3, [r1, #16]
 800b79c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	bfb8      	it	lt
 800b7a4:	4613      	movlt	r3, r2
 800b7a6:	6033      	str	r3, [r6, #0]
 800b7a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	b10a      	cbz	r2, 800b7b6 <_printf_common+0x26>
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	6033      	str	r3, [r6, #0]
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	0699      	lsls	r1, r3, #26
 800b7ba:	bf42      	ittt	mi
 800b7bc:	6833      	ldrmi	r3, [r6, #0]
 800b7be:	3302      	addmi	r3, #2
 800b7c0:	6033      	strmi	r3, [r6, #0]
 800b7c2:	6825      	ldr	r5, [r4, #0]
 800b7c4:	f015 0506 	ands.w	r5, r5, #6
 800b7c8:	d106      	bne.n	800b7d8 <_printf_common+0x48>
 800b7ca:	f104 0a19 	add.w	sl, r4, #25
 800b7ce:	68e3      	ldr	r3, [r4, #12]
 800b7d0:	6832      	ldr	r2, [r6, #0]
 800b7d2:	1a9b      	subs	r3, r3, r2
 800b7d4:	42ab      	cmp	r3, r5
 800b7d6:	dc26      	bgt.n	800b826 <_printf_common+0x96>
 800b7d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7dc:	1e13      	subs	r3, r2, #0
 800b7de:	6822      	ldr	r2, [r4, #0]
 800b7e0:	bf18      	it	ne
 800b7e2:	2301      	movne	r3, #1
 800b7e4:	0692      	lsls	r2, r2, #26
 800b7e6:	d42b      	bmi.n	800b840 <_printf_common+0xb0>
 800b7e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	47c0      	blx	r8
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	d01e      	beq.n	800b834 <_printf_common+0xa4>
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	6922      	ldr	r2, [r4, #16]
 800b7fa:	f003 0306 	and.w	r3, r3, #6
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	bf02      	ittt	eq
 800b802:	68e5      	ldreq	r5, [r4, #12]
 800b804:	6833      	ldreq	r3, [r6, #0]
 800b806:	1aed      	subeq	r5, r5, r3
 800b808:	68a3      	ldr	r3, [r4, #8]
 800b80a:	bf0c      	ite	eq
 800b80c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b810:	2500      	movne	r5, #0
 800b812:	4293      	cmp	r3, r2
 800b814:	bfc4      	itt	gt
 800b816:	1a9b      	subgt	r3, r3, r2
 800b818:	18ed      	addgt	r5, r5, r3
 800b81a:	2600      	movs	r6, #0
 800b81c:	341a      	adds	r4, #26
 800b81e:	42b5      	cmp	r5, r6
 800b820:	d11a      	bne.n	800b858 <_printf_common+0xc8>
 800b822:	2000      	movs	r0, #0
 800b824:	e008      	b.n	800b838 <_printf_common+0xa8>
 800b826:	2301      	movs	r3, #1
 800b828:	4652      	mov	r2, sl
 800b82a:	4649      	mov	r1, r9
 800b82c:	4638      	mov	r0, r7
 800b82e:	47c0      	blx	r8
 800b830:	3001      	adds	r0, #1
 800b832:	d103      	bne.n	800b83c <_printf_common+0xac>
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b83c:	3501      	adds	r5, #1
 800b83e:	e7c6      	b.n	800b7ce <_printf_common+0x3e>
 800b840:	18e1      	adds	r1, r4, r3
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	2030      	movs	r0, #48	; 0x30
 800b846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b84a:	4422      	add	r2, r4
 800b84c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b850:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b854:	3302      	adds	r3, #2
 800b856:	e7c7      	b.n	800b7e8 <_printf_common+0x58>
 800b858:	2301      	movs	r3, #1
 800b85a:	4622      	mov	r2, r4
 800b85c:	4649      	mov	r1, r9
 800b85e:	4638      	mov	r0, r7
 800b860:	47c0      	blx	r8
 800b862:	3001      	adds	r0, #1
 800b864:	d0e6      	beq.n	800b834 <_printf_common+0xa4>
 800b866:	3601      	adds	r6, #1
 800b868:	e7d9      	b.n	800b81e <_printf_common+0x8e>
	...

0800b86c <_printf_i>:
 800b86c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b870:	7e0f      	ldrb	r7, [r1, #24]
 800b872:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b874:	2f78      	cmp	r7, #120	; 0x78
 800b876:	4691      	mov	r9, r2
 800b878:	4680      	mov	r8, r0
 800b87a:	460c      	mov	r4, r1
 800b87c:	469a      	mov	sl, r3
 800b87e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b882:	d807      	bhi.n	800b894 <_printf_i+0x28>
 800b884:	2f62      	cmp	r7, #98	; 0x62
 800b886:	d80a      	bhi.n	800b89e <_printf_i+0x32>
 800b888:	2f00      	cmp	r7, #0
 800b88a:	f000 80d4 	beq.w	800ba36 <_printf_i+0x1ca>
 800b88e:	2f58      	cmp	r7, #88	; 0x58
 800b890:	f000 80c0 	beq.w	800ba14 <_printf_i+0x1a8>
 800b894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b89c:	e03a      	b.n	800b914 <_printf_i+0xa8>
 800b89e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8a2:	2b15      	cmp	r3, #21
 800b8a4:	d8f6      	bhi.n	800b894 <_printf_i+0x28>
 800b8a6:	a101      	add	r1, pc, #4	; (adr r1, 800b8ac <_printf_i+0x40>)
 800b8a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8ac:	0800b905 	.word	0x0800b905
 800b8b0:	0800b919 	.word	0x0800b919
 800b8b4:	0800b895 	.word	0x0800b895
 800b8b8:	0800b895 	.word	0x0800b895
 800b8bc:	0800b895 	.word	0x0800b895
 800b8c0:	0800b895 	.word	0x0800b895
 800b8c4:	0800b919 	.word	0x0800b919
 800b8c8:	0800b895 	.word	0x0800b895
 800b8cc:	0800b895 	.word	0x0800b895
 800b8d0:	0800b895 	.word	0x0800b895
 800b8d4:	0800b895 	.word	0x0800b895
 800b8d8:	0800ba1d 	.word	0x0800ba1d
 800b8dc:	0800b945 	.word	0x0800b945
 800b8e0:	0800b9d7 	.word	0x0800b9d7
 800b8e4:	0800b895 	.word	0x0800b895
 800b8e8:	0800b895 	.word	0x0800b895
 800b8ec:	0800ba3f 	.word	0x0800ba3f
 800b8f0:	0800b895 	.word	0x0800b895
 800b8f4:	0800b945 	.word	0x0800b945
 800b8f8:	0800b895 	.word	0x0800b895
 800b8fc:	0800b895 	.word	0x0800b895
 800b900:	0800b9df 	.word	0x0800b9df
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	1d1a      	adds	r2, r3, #4
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	602a      	str	r2, [r5, #0]
 800b90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b914:	2301      	movs	r3, #1
 800b916:	e09f      	b.n	800ba58 <_printf_i+0x1ec>
 800b918:	6820      	ldr	r0, [r4, #0]
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	0607      	lsls	r7, r0, #24
 800b91e:	f103 0104 	add.w	r1, r3, #4
 800b922:	6029      	str	r1, [r5, #0]
 800b924:	d501      	bpl.n	800b92a <_printf_i+0xbe>
 800b926:	681e      	ldr	r6, [r3, #0]
 800b928:	e003      	b.n	800b932 <_printf_i+0xc6>
 800b92a:	0646      	lsls	r6, r0, #25
 800b92c:	d5fb      	bpl.n	800b926 <_printf_i+0xba>
 800b92e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b932:	2e00      	cmp	r6, #0
 800b934:	da03      	bge.n	800b93e <_printf_i+0xd2>
 800b936:	232d      	movs	r3, #45	; 0x2d
 800b938:	4276      	negs	r6, r6
 800b93a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b93e:	485a      	ldr	r0, [pc, #360]	; (800baa8 <_printf_i+0x23c>)
 800b940:	230a      	movs	r3, #10
 800b942:	e012      	b.n	800b96a <_printf_i+0xfe>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	6820      	ldr	r0, [r4, #0]
 800b948:	1d19      	adds	r1, r3, #4
 800b94a:	6029      	str	r1, [r5, #0]
 800b94c:	0605      	lsls	r5, r0, #24
 800b94e:	d501      	bpl.n	800b954 <_printf_i+0xe8>
 800b950:	681e      	ldr	r6, [r3, #0]
 800b952:	e002      	b.n	800b95a <_printf_i+0xee>
 800b954:	0641      	lsls	r1, r0, #25
 800b956:	d5fb      	bpl.n	800b950 <_printf_i+0xe4>
 800b958:	881e      	ldrh	r6, [r3, #0]
 800b95a:	4853      	ldr	r0, [pc, #332]	; (800baa8 <_printf_i+0x23c>)
 800b95c:	2f6f      	cmp	r7, #111	; 0x6f
 800b95e:	bf0c      	ite	eq
 800b960:	2308      	moveq	r3, #8
 800b962:	230a      	movne	r3, #10
 800b964:	2100      	movs	r1, #0
 800b966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b96a:	6865      	ldr	r5, [r4, #4]
 800b96c:	60a5      	str	r5, [r4, #8]
 800b96e:	2d00      	cmp	r5, #0
 800b970:	bfa2      	ittt	ge
 800b972:	6821      	ldrge	r1, [r4, #0]
 800b974:	f021 0104 	bicge.w	r1, r1, #4
 800b978:	6021      	strge	r1, [r4, #0]
 800b97a:	b90e      	cbnz	r6, 800b980 <_printf_i+0x114>
 800b97c:	2d00      	cmp	r5, #0
 800b97e:	d04b      	beq.n	800ba18 <_printf_i+0x1ac>
 800b980:	4615      	mov	r5, r2
 800b982:	fbb6 f1f3 	udiv	r1, r6, r3
 800b986:	fb03 6711 	mls	r7, r3, r1, r6
 800b98a:	5dc7      	ldrb	r7, [r0, r7]
 800b98c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b990:	4637      	mov	r7, r6
 800b992:	42bb      	cmp	r3, r7
 800b994:	460e      	mov	r6, r1
 800b996:	d9f4      	bls.n	800b982 <_printf_i+0x116>
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d10b      	bne.n	800b9b4 <_printf_i+0x148>
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	07de      	lsls	r6, r3, #31
 800b9a0:	d508      	bpl.n	800b9b4 <_printf_i+0x148>
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	6861      	ldr	r1, [r4, #4]
 800b9a6:	4299      	cmp	r1, r3
 800b9a8:	bfde      	ittt	le
 800b9aa:	2330      	movle	r3, #48	; 0x30
 800b9ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9b4:	1b52      	subs	r2, r2, r5
 800b9b6:	6122      	str	r2, [r4, #16]
 800b9b8:	f8cd a000 	str.w	sl, [sp]
 800b9bc:	464b      	mov	r3, r9
 800b9be:	aa03      	add	r2, sp, #12
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	f7ff fee4 	bl	800b790 <_printf_common>
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d14a      	bne.n	800ba62 <_printf_i+0x1f6>
 800b9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d0:	b004      	add	sp, #16
 800b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	f043 0320 	orr.w	r3, r3, #32
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	4833      	ldr	r0, [pc, #204]	; (800baac <_printf_i+0x240>)
 800b9e0:	2778      	movs	r7, #120	; 0x78
 800b9e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	6829      	ldr	r1, [r5, #0]
 800b9ea:	061f      	lsls	r7, r3, #24
 800b9ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9f0:	d402      	bmi.n	800b9f8 <_printf_i+0x18c>
 800b9f2:	065f      	lsls	r7, r3, #25
 800b9f4:	bf48      	it	mi
 800b9f6:	b2b6      	uxthmi	r6, r6
 800b9f8:	07df      	lsls	r7, r3, #31
 800b9fa:	bf48      	it	mi
 800b9fc:	f043 0320 	orrmi.w	r3, r3, #32
 800ba00:	6029      	str	r1, [r5, #0]
 800ba02:	bf48      	it	mi
 800ba04:	6023      	strmi	r3, [r4, #0]
 800ba06:	b91e      	cbnz	r6, 800ba10 <_printf_i+0x1a4>
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	f023 0320 	bic.w	r3, r3, #32
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	2310      	movs	r3, #16
 800ba12:	e7a7      	b.n	800b964 <_printf_i+0xf8>
 800ba14:	4824      	ldr	r0, [pc, #144]	; (800baa8 <_printf_i+0x23c>)
 800ba16:	e7e4      	b.n	800b9e2 <_printf_i+0x176>
 800ba18:	4615      	mov	r5, r2
 800ba1a:	e7bd      	b.n	800b998 <_printf_i+0x12c>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	6826      	ldr	r6, [r4, #0]
 800ba20:	6961      	ldr	r1, [r4, #20]
 800ba22:	1d18      	adds	r0, r3, #4
 800ba24:	6028      	str	r0, [r5, #0]
 800ba26:	0635      	lsls	r5, r6, #24
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	d501      	bpl.n	800ba30 <_printf_i+0x1c4>
 800ba2c:	6019      	str	r1, [r3, #0]
 800ba2e:	e002      	b.n	800ba36 <_printf_i+0x1ca>
 800ba30:	0670      	lsls	r0, r6, #25
 800ba32:	d5fb      	bpl.n	800ba2c <_printf_i+0x1c0>
 800ba34:	8019      	strh	r1, [r3, #0]
 800ba36:	2300      	movs	r3, #0
 800ba38:	6123      	str	r3, [r4, #16]
 800ba3a:	4615      	mov	r5, r2
 800ba3c:	e7bc      	b.n	800b9b8 <_printf_i+0x14c>
 800ba3e:	682b      	ldr	r3, [r5, #0]
 800ba40:	1d1a      	adds	r2, r3, #4
 800ba42:	602a      	str	r2, [r5, #0]
 800ba44:	681d      	ldr	r5, [r3, #0]
 800ba46:	6862      	ldr	r2, [r4, #4]
 800ba48:	2100      	movs	r1, #0
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	f7f4 fbc0 	bl	80001d0 <memchr>
 800ba50:	b108      	cbz	r0, 800ba56 <_printf_i+0x1ea>
 800ba52:	1b40      	subs	r0, r0, r5
 800ba54:	6060      	str	r0, [r4, #4]
 800ba56:	6863      	ldr	r3, [r4, #4]
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba60:	e7aa      	b.n	800b9b8 <_printf_i+0x14c>
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	462a      	mov	r2, r5
 800ba66:	4649      	mov	r1, r9
 800ba68:	4640      	mov	r0, r8
 800ba6a:	47d0      	blx	sl
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d0ad      	beq.n	800b9cc <_printf_i+0x160>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	079b      	lsls	r3, r3, #30
 800ba74:	d413      	bmi.n	800ba9e <_printf_i+0x232>
 800ba76:	68e0      	ldr	r0, [r4, #12]
 800ba78:	9b03      	ldr	r3, [sp, #12]
 800ba7a:	4298      	cmp	r0, r3
 800ba7c:	bfb8      	it	lt
 800ba7e:	4618      	movlt	r0, r3
 800ba80:	e7a6      	b.n	800b9d0 <_printf_i+0x164>
 800ba82:	2301      	movs	r3, #1
 800ba84:	4632      	mov	r2, r6
 800ba86:	4649      	mov	r1, r9
 800ba88:	4640      	mov	r0, r8
 800ba8a:	47d0      	blx	sl
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d09d      	beq.n	800b9cc <_printf_i+0x160>
 800ba90:	3501      	adds	r5, #1
 800ba92:	68e3      	ldr	r3, [r4, #12]
 800ba94:	9903      	ldr	r1, [sp, #12]
 800ba96:	1a5b      	subs	r3, r3, r1
 800ba98:	42ab      	cmp	r3, r5
 800ba9a:	dcf2      	bgt.n	800ba82 <_printf_i+0x216>
 800ba9c:	e7eb      	b.n	800ba76 <_printf_i+0x20a>
 800ba9e:	2500      	movs	r5, #0
 800baa0:	f104 0619 	add.w	r6, r4, #25
 800baa4:	e7f5      	b.n	800ba92 <_printf_i+0x226>
 800baa6:	bf00      	nop
 800baa8:	08011efb 	.word	0x08011efb
 800baac:	08011f0c 	.word	0x08011f0c

0800bab0 <_scanf_float>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	b087      	sub	sp, #28
 800bab6:	4617      	mov	r7, r2
 800bab8:	9303      	str	r3, [sp, #12]
 800baba:	688b      	ldr	r3, [r1, #8]
 800babc:	1e5a      	subs	r2, r3, #1
 800babe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bac2:	bf83      	ittte	hi
 800bac4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bac8:	195b      	addhi	r3, r3, r5
 800baca:	9302      	strhi	r3, [sp, #8]
 800bacc:	2300      	movls	r3, #0
 800bace:	bf86      	itte	hi
 800bad0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bad4:	608b      	strhi	r3, [r1, #8]
 800bad6:	9302      	strls	r3, [sp, #8]
 800bad8:	680b      	ldr	r3, [r1, #0]
 800bada:	468b      	mov	fp, r1
 800badc:	2500      	movs	r5, #0
 800bade:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bae2:	f84b 3b1c 	str.w	r3, [fp], #28
 800bae6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800baea:	4680      	mov	r8, r0
 800baec:	460c      	mov	r4, r1
 800baee:	465e      	mov	r6, fp
 800baf0:	46aa      	mov	sl, r5
 800baf2:	46a9      	mov	r9, r5
 800baf4:	9501      	str	r5, [sp, #4]
 800baf6:	68a2      	ldr	r2, [r4, #8]
 800baf8:	b152      	cbz	r2, 800bb10 <_scanf_float+0x60>
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	2b4e      	cmp	r3, #78	; 0x4e
 800bb00:	d864      	bhi.n	800bbcc <_scanf_float+0x11c>
 800bb02:	2b40      	cmp	r3, #64	; 0x40
 800bb04:	d83c      	bhi.n	800bb80 <_scanf_float+0xd0>
 800bb06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bb0a:	b2c8      	uxtb	r0, r1
 800bb0c:	280e      	cmp	r0, #14
 800bb0e:	d93a      	bls.n	800bb86 <_scanf_float+0xd6>
 800bb10:	f1b9 0f00 	cmp.w	r9, #0
 800bb14:	d003      	beq.n	800bb1e <_scanf_float+0x6e>
 800bb16:	6823      	ldr	r3, [r4, #0]
 800bb18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb22:	f1ba 0f01 	cmp.w	sl, #1
 800bb26:	f200 8113 	bhi.w	800bd50 <_scanf_float+0x2a0>
 800bb2a:	455e      	cmp	r6, fp
 800bb2c:	f200 8105 	bhi.w	800bd3a <_scanf_float+0x28a>
 800bb30:	2501      	movs	r5, #1
 800bb32:	4628      	mov	r0, r5
 800bb34:	b007      	add	sp, #28
 800bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bb3e:	2a0d      	cmp	r2, #13
 800bb40:	d8e6      	bhi.n	800bb10 <_scanf_float+0x60>
 800bb42:	a101      	add	r1, pc, #4	; (adr r1, 800bb48 <_scanf_float+0x98>)
 800bb44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb48:	0800bc87 	.word	0x0800bc87
 800bb4c:	0800bb11 	.word	0x0800bb11
 800bb50:	0800bb11 	.word	0x0800bb11
 800bb54:	0800bb11 	.word	0x0800bb11
 800bb58:	0800bce7 	.word	0x0800bce7
 800bb5c:	0800bcbf 	.word	0x0800bcbf
 800bb60:	0800bb11 	.word	0x0800bb11
 800bb64:	0800bb11 	.word	0x0800bb11
 800bb68:	0800bc95 	.word	0x0800bc95
 800bb6c:	0800bb11 	.word	0x0800bb11
 800bb70:	0800bb11 	.word	0x0800bb11
 800bb74:	0800bb11 	.word	0x0800bb11
 800bb78:	0800bb11 	.word	0x0800bb11
 800bb7c:	0800bc4d 	.word	0x0800bc4d
 800bb80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bb84:	e7db      	b.n	800bb3e <_scanf_float+0x8e>
 800bb86:	290e      	cmp	r1, #14
 800bb88:	d8c2      	bhi.n	800bb10 <_scanf_float+0x60>
 800bb8a:	a001      	add	r0, pc, #4	; (adr r0, 800bb90 <_scanf_float+0xe0>)
 800bb8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb90:	0800bc3f 	.word	0x0800bc3f
 800bb94:	0800bb11 	.word	0x0800bb11
 800bb98:	0800bc3f 	.word	0x0800bc3f
 800bb9c:	0800bcd3 	.word	0x0800bcd3
 800bba0:	0800bb11 	.word	0x0800bb11
 800bba4:	0800bbed 	.word	0x0800bbed
 800bba8:	0800bc29 	.word	0x0800bc29
 800bbac:	0800bc29 	.word	0x0800bc29
 800bbb0:	0800bc29 	.word	0x0800bc29
 800bbb4:	0800bc29 	.word	0x0800bc29
 800bbb8:	0800bc29 	.word	0x0800bc29
 800bbbc:	0800bc29 	.word	0x0800bc29
 800bbc0:	0800bc29 	.word	0x0800bc29
 800bbc4:	0800bc29 	.word	0x0800bc29
 800bbc8:	0800bc29 	.word	0x0800bc29
 800bbcc:	2b6e      	cmp	r3, #110	; 0x6e
 800bbce:	d809      	bhi.n	800bbe4 <_scanf_float+0x134>
 800bbd0:	2b60      	cmp	r3, #96	; 0x60
 800bbd2:	d8b2      	bhi.n	800bb3a <_scanf_float+0x8a>
 800bbd4:	2b54      	cmp	r3, #84	; 0x54
 800bbd6:	d077      	beq.n	800bcc8 <_scanf_float+0x218>
 800bbd8:	2b59      	cmp	r3, #89	; 0x59
 800bbda:	d199      	bne.n	800bb10 <_scanf_float+0x60>
 800bbdc:	2d07      	cmp	r5, #7
 800bbde:	d197      	bne.n	800bb10 <_scanf_float+0x60>
 800bbe0:	2508      	movs	r5, #8
 800bbe2:	e029      	b.n	800bc38 <_scanf_float+0x188>
 800bbe4:	2b74      	cmp	r3, #116	; 0x74
 800bbe6:	d06f      	beq.n	800bcc8 <_scanf_float+0x218>
 800bbe8:	2b79      	cmp	r3, #121	; 0x79
 800bbea:	e7f6      	b.n	800bbda <_scanf_float+0x12a>
 800bbec:	6821      	ldr	r1, [r4, #0]
 800bbee:	05c8      	lsls	r0, r1, #23
 800bbf0:	d51a      	bpl.n	800bc28 <_scanf_float+0x178>
 800bbf2:	9b02      	ldr	r3, [sp, #8]
 800bbf4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bbf8:	6021      	str	r1, [r4, #0]
 800bbfa:	f109 0901 	add.w	r9, r9, #1
 800bbfe:	b11b      	cbz	r3, 800bc08 <_scanf_float+0x158>
 800bc00:	3b01      	subs	r3, #1
 800bc02:	3201      	adds	r2, #1
 800bc04:	9302      	str	r3, [sp, #8]
 800bc06:	60a2      	str	r2, [r4, #8]
 800bc08:	68a3      	ldr	r3, [r4, #8]
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	60a3      	str	r3, [r4, #8]
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	3301      	adds	r3, #1
 800bc12:	6123      	str	r3, [r4, #16]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	607b      	str	r3, [r7, #4]
 800bc1c:	f340 8084 	ble.w	800bd28 <_scanf_float+0x278>
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	3301      	adds	r3, #1
 800bc24:	603b      	str	r3, [r7, #0]
 800bc26:	e766      	b.n	800baf6 <_scanf_float+0x46>
 800bc28:	eb1a 0f05 	cmn.w	sl, r5
 800bc2c:	f47f af70 	bne.w	800bb10 <_scanf_float+0x60>
 800bc30:	6822      	ldr	r2, [r4, #0]
 800bc32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bc36:	6022      	str	r2, [r4, #0]
 800bc38:	f806 3b01 	strb.w	r3, [r6], #1
 800bc3c:	e7e4      	b.n	800bc08 <_scanf_float+0x158>
 800bc3e:	6822      	ldr	r2, [r4, #0]
 800bc40:	0610      	lsls	r0, r2, #24
 800bc42:	f57f af65 	bpl.w	800bb10 <_scanf_float+0x60>
 800bc46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc4a:	e7f4      	b.n	800bc36 <_scanf_float+0x186>
 800bc4c:	f1ba 0f00 	cmp.w	sl, #0
 800bc50:	d10e      	bne.n	800bc70 <_scanf_float+0x1c0>
 800bc52:	f1b9 0f00 	cmp.w	r9, #0
 800bc56:	d10e      	bne.n	800bc76 <_scanf_float+0x1c6>
 800bc58:	6822      	ldr	r2, [r4, #0]
 800bc5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bc5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bc62:	d108      	bne.n	800bc76 <_scanf_float+0x1c6>
 800bc64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bc68:	6022      	str	r2, [r4, #0]
 800bc6a:	f04f 0a01 	mov.w	sl, #1
 800bc6e:	e7e3      	b.n	800bc38 <_scanf_float+0x188>
 800bc70:	f1ba 0f02 	cmp.w	sl, #2
 800bc74:	d055      	beq.n	800bd22 <_scanf_float+0x272>
 800bc76:	2d01      	cmp	r5, #1
 800bc78:	d002      	beq.n	800bc80 <_scanf_float+0x1d0>
 800bc7a:	2d04      	cmp	r5, #4
 800bc7c:	f47f af48 	bne.w	800bb10 <_scanf_float+0x60>
 800bc80:	3501      	adds	r5, #1
 800bc82:	b2ed      	uxtb	r5, r5
 800bc84:	e7d8      	b.n	800bc38 <_scanf_float+0x188>
 800bc86:	f1ba 0f01 	cmp.w	sl, #1
 800bc8a:	f47f af41 	bne.w	800bb10 <_scanf_float+0x60>
 800bc8e:	f04f 0a02 	mov.w	sl, #2
 800bc92:	e7d1      	b.n	800bc38 <_scanf_float+0x188>
 800bc94:	b97d      	cbnz	r5, 800bcb6 <_scanf_float+0x206>
 800bc96:	f1b9 0f00 	cmp.w	r9, #0
 800bc9a:	f47f af3c 	bne.w	800bb16 <_scanf_float+0x66>
 800bc9e:	6822      	ldr	r2, [r4, #0]
 800bca0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bca4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bca8:	f47f af39 	bne.w	800bb1e <_scanf_float+0x6e>
 800bcac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bcb0:	6022      	str	r2, [r4, #0]
 800bcb2:	2501      	movs	r5, #1
 800bcb4:	e7c0      	b.n	800bc38 <_scanf_float+0x188>
 800bcb6:	2d03      	cmp	r5, #3
 800bcb8:	d0e2      	beq.n	800bc80 <_scanf_float+0x1d0>
 800bcba:	2d05      	cmp	r5, #5
 800bcbc:	e7de      	b.n	800bc7c <_scanf_float+0x1cc>
 800bcbe:	2d02      	cmp	r5, #2
 800bcc0:	f47f af26 	bne.w	800bb10 <_scanf_float+0x60>
 800bcc4:	2503      	movs	r5, #3
 800bcc6:	e7b7      	b.n	800bc38 <_scanf_float+0x188>
 800bcc8:	2d06      	cmp	r5, #6
 800bcca:	f47f af21 	bne.w	800bb10 <_scanf_float+0x60>
 800bcce:	2507      	movs	r5, #7
 800bcd0:	e7b2      	b.n	800bc38 <_scanf_float+0x188>
 800bcd2:	6822      	ldr	r2, [r4, #0]
 800bcd4:	0591      	lsls	r1, r2, #22
 800bcd6:	f57f af1b 	bpl.w	800bb10 <_scanf_float+0x60>
 800bcda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bcde:	6022      	str	r2, [r4, #0]
 800bce0:	f8cd 9004 	str.w	r9, [sp, #4]
 800bce4:	e7a8      	b.n	800bc38 <_scanf_float+0x188>
 800bce6:	6822      	ldr	r2, [r4, #0]
 800bce8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bcec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bcf0:	d006      	beq.n	800bd00 <_scanf_float+0x250>
 800bcf2:	0550      	lsls	r0, r2, #21
 800bcf4:	f57f af0c 	bpl.w	800bb10 <_scanf_float+0x60>
 800bcf8:	f1b9 0f00 	cmp.w	r9, #0
 800bcfc:	f43f af0f 	beq.w	800bb1e <_scanf_float+0x6e>
 800bd00:	0591      	lsls	r1, r2, #22
 800bd02:	bf58      	it	pl
 800bd04:	9901      	ldrpl	r1, [sp, #4]
 800bd06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bd0a:	bf58      	it	pl
 800bd0c:	eba9 0101 	subpl.w	r1, r9, r1
 800bd10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bd14:	bf58      	it	pl
 800bd16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bd1a:	6022      	str	r2, [r4, #0]
 800bd1c:	f04f 0900 	mov.w	r9, #0
 800bd20:	e78a      	b.n	800bc38 <_scanf_float+0x188>
 800bd22:	f04f 0a03 	mov.w	sl, #3
 800bd26:	e787      	b.n	800bc38 <_scanf_float+0x188>
 800bd28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	4640      	mov	r0, r8
 800bd30:	4798      	blx	r3
 800bd32:	2800      	cmp	r0, #0
 800bd34:	f43f aedf 	beq.w	800baf6 <_scanf_float+0x46>
 800bd38:	e6ea      	b.n	800bb10 <_scanf_float+0x60>
 800bd3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd42:	463a      	mov	r2, r7
 800bd44:	4640      	mov	r0, r8
 800bd46:	4798      	blx	r3
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	6123      	str	r3, [r4, #16]
 800bd4e:	e6ec      	b.n	800bb2a <_scanf_float+0x7a>
 800bd50:	1e6b      	subs	r3, r5, #1
 800bd52:	2b06      	cmp	r3, #6
 800bd54:	d825      	bhi.n	800bda2 <_scanf_float+0x2f2>
 800bd56:	2d02      	cmp	r5, #2
 800bd58:	d836      	bhi.n	800bdc8 <_scanf_float+0x318>
 800bd5a:	455e      	cmp	r6, fp
 800bd5c:	f67f aee8 	bls.w	800bb30 <_scanf_float+0x80>
 800bd60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd68:	463a      	mov	r2, r7
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	4798      	blx	r3
 800bd6e:	6923      	ldr	r3, [r4, #16]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	6123      	str	r3, [r4, #16]
 800bd74:	e7f1      	b.n	800bd5a <_scanf_float+0x2aa>
 800bd76:	9802      	ldr	r0, [sp, #8]
 800bd78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bd80:	9002      	str	r0, [sp, #8]
 800bd82:	463a      	mov	r2, r7
 800bd84:	4640      	mov	r0, r8
 800bd86:	4798      	blx	r3
 800bd88:	6923      	ldr	r3, [r4, #16]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	6123      	str	r3, [r4, #16]
 800bd8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd92:	fa5f fa8a 	uxtb.w	sl, sl
 800bd96:	f1ba 0f02 	cmp.w	sl, #2
 800bd9a:	d1ec      	bne.n	800bd76 <_scanf_float+0x2c6>
 800bd9c:	3d03      	subs	r5, #3
 800bd9e:	b2ed      	uxtb	r5, r5
 800bda0:	1b76      	subs	r6, r6, r5
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	05da      	lsls	r2, r3, #23
 800bda6:	d52f      	bpl.n	800be08 <_scanf_float+0x358>
 800bda8:	055b      	lsls	r3, r3, #21
 800bdaa:	d510      	bpl.n	800bdce <_scanf_float+0x31e>
 800bdac:	455e      	cmp	r6, fp
 800bdae:	f67f aebf 	bls.w	800bb30 <_scanf_float+0x80>
 800bdb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdba:	463a      	mov	r2, r7
 800bdbc:	4640      	mov	r0, r8
 800bdbe:	4798      	blx	r3
 800bdc0:	6923      	ldr	r3, [r4, #16]
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	6123      	str	r3, [r4, #16]
 800bdc6:	e7f1      	b.n	800bdac <_scanf_float+0x2fc>
 800bdc8:	46aa      	mov	sl, r5
 800bdca:	9602      	str	r6, [sp, #8]
 800bdcc:	e7df      	b.n	800bd8e <_scanf_float+0x2de>
 800bdce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bdd2:	6923      	ldr	r3, [r4, #16]
 800bdd4:	2965      	cmp	r1, #101	; 0x65
 800bdd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800bdda:	f106 35ff 	add.w	r5, r6, #4294967295
 800bdde:	6123      	str	r3, [r4, #16]
 800bde0:	d00c      	beq.n	800bdfc <_scanf_float+0x34c>
 800bde2:	2945      	cmp	r1, #69	; 0x45
 800bde4:	d00a      	beq.n	800bdfc <_scanf_float+0x34c>
 800bde6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdea:	463a      	mov	r2, r7
 800bdec:	4640      	mov	r0, r8
 800bdee:	4798      	blx	r3
 800bdf0:	6923      	ldr	r3, [r4, #16]
 800bdf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	1eb5      	subs	r5, r6, #2
 800bdfa:	6123      	str	r3, [r4, #16]
 800bdfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be00:	463a      	mov	r2, r7
 800be02:	4640      	mov	r0, r8
 800be04:	4798      	blx	r3
 800be06:	462e      	mov	r6, r5
 800be08:	6825      	ldr	r5, [r4, #0]
 800be0a:	f015 0510 	ands.w	r5, r5, #16
 800be0e:	d158      	bne.n	800bec2 <_scanf_float+0x412>
 800be10:	7035      	strb	r5, [r6, #0]
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be1c:	d11c      	bne.n	800be58 <_scanf_float+0x3a8>
 800be1e:	9b01      	ldr	r3, [sp, #4]
 800be20:	454b      	cmp	r3, r9
 800be22:	eba3 0209 	sub.w	r2, r3, r9
 800be26:	d124      	bne.n	800be72 <_scanf_float+0x3c2>
 800be28:	2200      	movs	r2, #0
 800be2a:	4659      	mov	r1, fp
 800be2c:	4640      	mov	r0, r8
 800be2e:	f7ff f8df 	bl	800aff0 <_strtod_r>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	6821      	ldr	r1, [r4, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f011 0f02 	tst.w	r1, #2
 800be3c:	ec57 6b10 	vmov	r6, r7, d0
 800be40:	f103 0204 	add.w	r2, r3, #4
 800be44:	d020      	beq.n	800be88 <_scanf_float+0x3d8>
 800be46:	9903      	ldr	r1, [sp, #12]
 800be48:	600a      	str	r2, [r1, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	e9c3 6700 	strd	r6, r7, [r3]
 800be50:	68e3      	ldr	r3, [r4, #12]
 800be52:	3301      	adds	r3, #1
 800be54:	60e3      	str	r3, [r4, #12]
 800be56:	e66c      	b.n	800bb32 <_scanf_float+0x82>
 800be58:	9b04      	ldr	r3, [sp, #16]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d0e4      	beq.n	800be28 <_scanf_float+0x378>
 800be5e:	9905      	ldr	r1, [sp, #20]
 800be60:	230a      	movs	r3, #10
 800be62:	462a      	mov	r2, r5
 800be64:	3101      	adds	r1, #1
 800be66:	4640      	mov	r0, r8
 800be68:	f7ff f9b0 	bl	800b1cc <_strtol_r>
 800be6c:	9b04      	ldr	r3, [sp, #16]
 800be6e:	9e05      	ldr	r6, [sp, #20]
 800be70:	1ac2      	subs	r2, r0, r3
 800be72:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800be76:	429e      	cmp	r6, r3
 800be78:	bf28      	it	cs
 800be7a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800be7e:	4912      	ldr	r1, [pc, #72]	; (800bec8 <_scanf_float+0x418>)
 800be80:	4630      	mov	r0, r6
 800be82:	f000 f91b 	bl	800c0bc <siprintf>
 800be86:	e7cf      	b.n	800be28 <_scanf_float+0x378>
 800be88:	f011 0f04 	tst.w	r1, #4
 800be8c:	9903      	ldr	r1, [sp, #12]
 800be8e:	600a      	str	r2, [r1, #0]
 800be90:	d1db      	bne.n	800be4a <_scanf_float+0x39a>
 800be92:	f8d3 8000 	ldr.w	r8, [r3]
 800be96:	ee10 2a10 	vmov	r2, s0
 800be9a:	ee10 0a10 	vmov	r0, s0
 800be9e:	463b      	mov	r3, r7
 800bea0:	4639      	mov	r1, r7
 800bea2:	f7f4 fe43 	bl	8000b2c <__aeabi_dcmpun>
 800bea6:	b128      	cbz	r0, 800beb4 <_scanf_float+0x404>
 800bea8:	4808      	ldr	r0, [pc, #32]	; (800becc <_scanf_float+0x41c>)
 800beaa:	f000 fa9d 	bl	800c3e8 <nanf>
 800beae:	ed88 0a00 	vstr	s0, [r8]
 800beb2:	e7cd      	b.n	800be50 <_scanf_float+0x3a0>
 800beb4:	4630      	mov	r0, r6
 800beb6:	4639      	mov	r1, r7
 800beb8:	f7f4 fe96 	bl	8000be8 <__aeabi_d2f>
 800bebc:	f8c8 0000 	str.w	r0, [r8]
 800bec0:	e7c6      	b.n	800be50 <_scanf_float+0x3a0>
 800bec2:	2500      	movs	r5, #0
 800bec4:	e635      	b.n	800bb32 <_scanf_float+0x82>
 800bec6:	bf00      	nop
 800bec8:	08011f1d 	.word	0x08011f1d
 800becc:	08011fd6 	.word	0x08011fd6

0800bed0 <std>:
 800bed0:	2300      	movs	r3, #0
 800bed2:	b510      	push	{r4, lr}
 800bed4:	4604      	mov	r4, r0
 800bed6:	e9c0 3300 	strd	r3, r3, [r0]
 800beda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bede:	6083      	str	r3, [r0, #8]
 800bee0:	8181      	strh	r1, [r0, #12]
 800bee2:	6643      	str	r3, [r0, #100]	; 0x64
 800bee4:	81c2      	strh	r2, [r0, #14]
 800bee6:	6183      	str	r3, [r0, #24]
 800bee8:	4619      	mov	r1, r3
 800beea:	2208      	movs	r2, #8
 800beec:	305c      	adds	r0, #92	; 0x5c
 800beee:	f000 f948 	bl	800c182 <memset>
 800bef2:	4b0d      	ldr	r3, [pc, #52]	; (800bf28 <std+0x58>)
 800bef4:	6263      	str	r3, [r4, #36]	; 0x24
 800bef6:	4b0d      	ldr	r3, [pc, #52]	; (800bf2c <std+0x5c>)
 800bef8:	62a3      	str	r3, [r4, #40]	; 0x28
 800befa:	4b0d      	ldr	r3, [pc, #52]	; (800bf30 <std+0x60>)
 800befc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800befe:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <std+0x64>)
 800bf00:	6323      	str	r3, [r4, #48]	; 0x30
 800bf02:	4b0d      	ldr	r3, [pc, #52]	; (800bf38 <std+0x68>)
 800bf04:	6224      	str	r4, [r4, #32]
 800bf06:	429c      	cmp	r4, r3
 800bf08:	d006      	beq.n	800bf18 <std+0x48>
 800bf0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bf0e:	4294      	cmp	r4, r2
 800bf10:	d002      	beq.n	800bf18 <std+0x48>
 800bf12:	33d0      	adds	r3, #208	; 0xd0
 800bf14:	429c      	cmp	r4, r3
 800bf16:	d105      	bne.n	800bf24 <std+0x54>
 800bf18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf20:	f000 ba40 	b.w	800c3a4 <__retarget_lock_init_recursive>
 800bf24:	bd10      	pop	{r4, pc}
 800bf26:	bf00      	nop
 800bf28:	0800c0fd 	.word	0x0800c0fd
 800bf2c:	0800c11f 	.word	0x0800c11f
 800bf30:	0800c157 	.word	0x0800c157
 800bf34:	0800c17b 	.word	0x0800c17b
 800bf38:	20000be0 	.word	0x20000be0

0800bf3c <stdio_exit_handler>:
 800bf3c:	4a02      	ldr	r2, [pc, #8]	; (800bf48 <stdio_exit_handler+0xc>)
 800bf3e:	4903      	ldr	r1, [pc, #12]	; (800bf4c <stdio_exit_handler+0x10>)
 800bf40:	4803      	ldr	r0, [pc, #12]	; (800bf50 <stdio_exit_handler+0x14>)
 800bf42:	f000 b869 	b.w	800c018 <_fwalk_sglue>
 800bf46:	bf00      	nop
 800bf48:	2000002c 	.word	0x2000002c
 800bf4c:	0800e5c1 	.word	0x0800e5c1
 800bf50:	200001a4 	.word	0x200001a4

0800bf54 <cleanup_stdio>:
 800bf54:	6841      	ldr	r1, [r0, #4]
 800bf56:	4b0c      	ldr	r3, [pc, #48]	; (800bf88 <cleanup_stdio+0x34>)
 800bf58:	4299      	cmp	r1, r3
 800bf5a:	b510      	push	{r4, lr}
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	d001      	beq.n	800bf64 <cleanup_stdio+0x10>
 800bf60:	f002 fb2e 	bl	800e5c0 <_fflush_r>
 800bf64:	68a1      	ldr	r1, [r4, #8]
 800bf66:	4b09      	ldr	r3, [pc, #36]	; (800bf8c <cleanup_stdio+0x38>)
 800bf68:	4299      	cmp	r1, r3
 800bf6a:	d002      	beq.n	800bf72 <cleanup_stdio+0x1e>
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f002 fb27 	bl	800e5c0 <_fflush_r>
 800bf72:	68e1      	ldr	r1, [r4, #12]
 800bf74:	4b06      	ldr	r3, [pc, #24]	; (800bf90 <cleanup_stdio+0x3c>)
 800bf76:	4299      	cmp	r1, r3
 800bf78:	d004      	beq.n	800bf84 <cleanup_stdio+0x30>
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf80:	f002 bb1e 	b.w	800e5c0 <_fflush_r>
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	bf00      	nop
 800bf88:	20000be0 	.word	0x20000be0
 800bf8c:	20000c48 	.word	0x20000c48
 800bf90:	20000cb0 	.word	0x20000cb0

0800bf94 <global_stdio_init.part.0>:
 800bf94:	b510      	push	{r4, lr}
 800bf96:	4b0b      	ldr	r3, [pc, #44]	; (800bfc4 <global_stdio_init.part.0+0x30>)
 800bf98:	4c0b      	ldr	r4, [pc, #44]	; (800bfc8 <global_stdio_init.part.0+0x34>)
 800bf9a:	4a0c      	ldr	r2, [pc, #48]	; (800bfcc <global_stdio_init.part.0+0x38>)
 800bf9c:	601a      	str	r2, [r3, #0]
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	2104      	movs	r1, #4
 800bfa4:	f7ff ff94 	bl	800bed0 <std>
 800bfa8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bfac:	2201      	movs	r2, #1
 800bfae:	2109      	movs	r1, #9
 800bfb0:	f7ff ff8e 	bl	800bed0 <std>
 800bfb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bfb8:	2202      	movs	r2, #2
 800bfba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfbe:	2112      	movs	r1, #18
 800bfc0:	f7ff bf86 	b.w	800bed0 <std>
 800bfc4:	20000d18 	.word	0x20000d18
 800bfc8:	20000be0 	.word	0x20000be0
 800bfcc:	0800bf3d 	.word	0x0800bf3d

0800bfd0 <__sfp_lock_acquire>:
 800bfd0:	4801      	ldr	r0, [pc, #4]	; (800bfd8 <__sfp_lock_acquire+0x8>)
 800bfd2:	f000 b9e8 	b.w	800c3a6 <__retarget_lock_acquire_recursive>
 800bfd6:	bf00      	nop
 800bfd8:	20000d21 	.word	0x20000d21

0800bfdc <__sfp_lock_release>:
 800bfdc:	4801      	ldr	r0, [pc, #4]	; (800bfe4 <__sfp_lock_release+0x8>)
 800bfde:	f000 b9e3 	b.w	800c3a8 <__retarget_lock_release_recursive>
 800bfe2:	bf00      	nop
 800bfe4:	20000d21 	.word	0x20000d21

0800bfe8 <__sinit>:
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	4604      	mov	r4, r0
 800bfec:	f7ff fff0 	bl	800bfd0 <__sfp_lock_acquire>
 800bff0:	6a23      	ldr	r3, [r4, #32]
 800bff2:	b11b      	cbz	r3, 800bffc <__sinit+0x14>
 800bff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bff8:	f7ff bff0 	b.w	800bfdc <__sfp_lock_release>
 800bffc:	4b04      	ldr	r3, [pc, #16]	; (800c010 <__sinit+0x28>)
 800bffe:	6223      	str	r3, [r4, #32]
 800c000:	4b04      	ldr	r3, [pc, #16]	; (800c014 <__sinit+0x2c>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1f5      	bne.n	800bff4 <__sinit+0xc>
 800c008:	f7ff ffc4 	bl	800bf94 <global_stdio_init.part.0>
 800c00c:	e7f2      	b.n	800bff4 <__sinit+0xc>
 800c00e:	bf00      	nop
 800c010:	0800bf55 	.word	0x0800bf55
 800c014:	20000d18 	.word	0x20000d18

0800c018 <_fwalk_sglue>:
 800c018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c01c:	4607      	mov	r7, r0
 800c01e:	4688      	mov	r8, r1
 800c020:	4614      	mov	r4, r2
 800c022:	2600      	movs	r6, #0
 800c024:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c028:	f1b9 0901 	subs.w	r9, r9, #1
 800c02c:	d505      	bpl.n	800c03a <_fwalk_sglue+0x22>
 800c02e:	6824      	ldr	r4, [r4, #0]
 800c030:	2c00      	cmp	r4, #0
 800c032:	d1f7      	bne.n	800c024 <_fwalk_sglue+0xc>
 800c034:	4630      	mov	r0, r6
 800c036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c03a:	89ab      	ldrh	r3, [r5, #12]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d907      	bls.n	800c050 <_fwalk_sglue+0x38>
 800c040:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c044:	3301      	adds	r3, #1
 800c046:	d003      	beq.n	800c050 <_fwalk_sglue+0x38>
 800c048:	4629      	mov	r1, r5
 800c04a:	4638      	mov	r0, r7
 800c04c:	47c0      	blx	r8
 800c04e:	4306      	orrs	r6, r0
 800c050:	3568      	adds	r5, #104	; 0x68
 800c052:	e7e9      	b.n	800c028 <_fwalk_sglue+0x10>

0800c054 <sniprintf>:
 800c054:	b40c      	push	{r2, r3}
 800c056:	b530      	push	{r4, r5, lr}
 800c058:	4b17      	ldr	r3, [pc, #92]	; (800c0b8 <sniprintf+0x64>)
 800c05a:	1e0c      	subs	r4, r1, #0
 800c05c:	681d      	ldr	r5, [r3, #0]
 800c05e:	b09d      	sub	sp, #116	; 0x74
 800c060:	da08      	bge.n	800c074 <sniprintf+0x20>
 800c062:	238b      	movs	r3, #139	; 0x8b
 800c064:	602b      	str	r3, [r5, #0]
 800c066:	f04f 30ff 	mov.w	r0, #4294967295
 800c06a:	b01d      	add	sp, #116	; 0x74
 800c06c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c070:	b002      	add	sp, #8
 800c072:	4770      	bx	lr
 800c074:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c078:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c07c:	bf14      	ite	ne
 800c07e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c082:	4623      	moveq	r3, r4
 800c084:	9304      	str	r3, [sp, #16]
 800c086:	9307      	str	r3, [sp, #28]
 800c088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c08c:	9002      	str	r0, [sp, #8]
 800c08e:	9006      	str	r0, [sp, #24]
 800c090:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c094:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c096:	ab21      	add	r3, sp, #132	; 0x84
 800c098:	a902      	add	r1, sp, #8
 800c09a:	4628      	mov	r0, r5
 800c09c:	9301      	str	r3, [sp, #4]
 800c09e:	f002 f90b 	bl	800e2b8 <_svfiprintf_r>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	bfbc      	itt	lt
 800c0a6:	238b      	movlt	r3, #139	; 0x8b
 800c0a8:	602b      	strlt	r3, [r5, #0]
 800c0aa:	2c00      	cmp	r4, #0
 800c0ac:	d0dd      	beq.n	800c06a <sniprintf+0x16>
 800c0ae:	9b02      	ldr	r3, [sp, #8]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	701a      	strb	r2, [r3, #0]
 800c0b4:	e7d9      	b.n	800c06a <sniprintf+0x16>
 800c0b6:	bf00      	nop
 800c0b8:	200001f0 	.word	0x200001f0

0800c0bc <siprintf>:
 800c0bc:	b40e      	push	{r1, r2, r3}
 800c0be:	b500      	push	{lr}
 800c0c0:	b09c      	sub	sp, #112	; 0x70
 800c0c2:	ab1d      	add	r3, sp, #116	; 0x74
 800c0c4:	9002      	str	r0, [sp, #8]
 800c0c6:	9006      	str	r0, [sp, #24]
 800c0c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0cc:	4809      	ldr	r0, [pc, #36]	; (800c0f4 <siprintf+0x38>)
 800c0ce:	9107      	str	r1, [sp, #28]
 800c0d0:	9104      	str	r1, [sp, #16]
 800c0d2:	4909      	ldr	r1, [pc, #36]	; (800c0f8 <siprintf+0x3c>)
 800c0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0d8:	9105      	str	r1, [sp, #20]
 800c0da:	6800      	ldr	r0, [r0, #0]
 800c0dc:	9301      	str	r3, [sp, #4]
 800c0de:	a902      	add	r1, sp, #8
 800c0e0:	f002 f8ea 	bl	800e2b8 <_svfiprintf_r>
 800c0e4:	9b02      	ldr	r3, [sp, #8]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	701a      	strb	r2, [r3, #0]
 800c0ea:	b01c      	add	sp, #112	; 0x70
 800c0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0f0:	b003      	add	sp, #12
 800c0f2:	4770      	bx	lr
 800c0f4:	200001f0 	.word	0x200001f0
 800c0f8:	ffff0208 	.word	0xffff0208

0800c0fc <__sread>:
 800c0fc:	b510      	push	{r4, lr}
 800c0fe:	460c      	mov	r4, r1
 800c100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c104:	f000 f8f0 	bl	800c2e8 <_read_r>
 800c108:	2800      	cmp	r0, #0
 800c10a:	bfab      	itete	ge
 800c10c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c10e:	89a3      	ldrhlt	r3, [r4, #12]
 800c110:	181b      	addge	r3, r3, r0
 800c112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c116:	bfac      	ite	ge
 800c118:	6563      	strge	r3, [r4, #84]	; 0x54
 800c11a:	81a3      	strhlt	r3, [r4, #12]
 800c11c:	bd10      	pop	{r4, pc}

0800c11e <__swrite>:
 800c11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c122:	461f      	mov	r7, r3
 800c124:	898b      	ldrh	r3, [r1, #12]
 800c126:	05db      	lsls	r3, r3, #23
 800c128:	4605      	mov	r5, r0
 800c12a:	460c      	mov	r4, r1
 800c12c:	4616      	mov	r6, r2
 800c12e:	d505      	bpl.n	800c13c <__swrite+0x1e>
 800c130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c134:	2302      	movs	r3, #2
 800c136:	2200      	movs	r2, #0
 800c138:	f000 f8c4 	bl	800c2c4 <_lseek_r>
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c146:	81a3      	strh	r3, [r4, #12]
 800c148:	4632      	mov	r2, r6
 800c14a:	463b      	mov	r3, r7
 800c14c:	4628      	mov	r0, r5
 800c14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c152:	f000 b8eb 	b.w	800c32c <_write_r>

0800c156 <__sseek>:
 800c156:	b510      	push	{r4, lr}
 800c158:	460c      	mov	r4, r1
 800c15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c15e:	f000 f8b1 	bl	800c2c4 <_lseek_r>
 800c162:	1c43      	adds	r3, r0, #1
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	bf15      	itete	ne
 800c168:	6560      	strne	r0, [r4, #84]	; 0x54
 800c16a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c16e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c172:	81a3      	strheq	r3, [r4, #12]
 800c174:	bf18      	it	ne
 800c176:	81a3      	strhne	r3, [r4, #12]
 800c178:	bd10      	pop	{r4, pc}

0800c17a <__sclose>:
 800c17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c17e:	f000 b891 	b.w	800c2a4 <_close_r>

0800c182 <memset>:
 800c182:	4402      	add	r2, r0
 800c184:	4603      	mov	r3, r0
 800c186:	4293      	cmp	r3, r2
 800c188:	d100      	bne.n	800c18c <memset+0xa>
 800c18a:	4770      	bx	lr
 800c18c:	f803 1b01 	strb.w	r1, [r3], #1
 800c190:	e7f9      	b.n	800c186 <memset+0x4>

0800c192 <strncmp>:
 800c192:	b510      	push	{r4, lr}
 800c194:	b16a      	cbz	r2, 800c1b2 <strncmp+0x20>
 800c196:	3901      	subs	r1, #1
 800c198:	1884      	adds	r4, r0, r2
 800c19a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c19e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d103      	bne.n	800c1ae <strncmp+0x1c>
 800c1a6:	42a0      	cmp	r0, r4
 800c1a8:	d001      	beq.n	800c1ae <strncmp+0x1c>
 800c1aa:	2a00      	cmp	r2, #0
 800c1ac:	d1f5      	bne.n	800c19a <strncmp+0x8>
 800c1ae:	1ad0      	subs	r0, r2, r3
 800c1b0:	bd10      	pop	{r4, pc}
 800c1b2:	4610      	mov	r0, r2
 800c1b4:	e7fc      	b.n	800c1b0 <strncmp+0x1e>
	...

0800c1b8 <strtok>:
 800c1b8:	4b16      	ldr	r3, [pc, #88]	; (800c214 <strtok+0x5c>)
 800c1ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1bc:	681e      	ldr	r6, [r3, #0]
 800c1be:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	b9fc      	cbnz	r4, 800c204 <strtok+0x4c>
 800c1c4:	2050      	movs	r0, #80	; 0x50
 800c1c6:	9101      	str	r1, [sp, #4]
 800c1c8:	f7fe f848 	bl	800a25c <malloc>
 800c1cc:	9901      	ldr	r1, [sp, #4]
 800c1ce:	6470      	str	r0, [r6, #68]	; 0x44
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	b920      	cbnz	r0, 800c1de <strtok+0x26>
 800c1d4:	4b10      	ldr	r3, [pc, #64]	; (800c218 <strtok+0x60>)
 800c1d6:	4811      	ldr	r0, [pc, #68]	; (800c21c <strtok+0x64>)
 800c1d8:	215b      	movs	r1, #91	; 0x5b
 800c1da:	f000 f90b 	bl	800c3f4 <__assert_func>
 800c1de:	e9c0 4400 	strd	r4, r4, [r0]
 800c1e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c1e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c1ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c1ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c1f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c1f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c1fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c1fe:	6184      	str	r4, [r0, #24]
 800c200:	7704      	strb	r4, [r0, #28]
 800c202:	6244      	str	r4, [r0, #36]	; 0x24
 800c204:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800c206:	2301      	movs	r3, #1
 800c208:	4628      	mov	r0, r5
 800c20a:	b002      	add	sp, #8
 800c20c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c210:	f000 b806 	b.w	800c220 <__strtok_r>
 800c214:	200001f0 	.word	0x200001f0
 800c218:	08011f22 	.word	0x08011f22
 800c21c:	08011f39 	.word	0x08011f39

0800c220 <__strtok_r>:
 800c220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c222:	b908      	cbnz	r0, 800c228 <__strtok_r+0x8>
 800c224:	6810      	ldr	r0, [r2, #0]
 800c226:	b188      	cbz	r0, 800c24c <__strtok_r+0x2c>
 800c228:	4604      	mov	r4, r0
 800c22a:	4620      	mov	r0, r4
 800c22c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c230:	460f      	mov	r7, r1
 800c232:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c236:	b91e      	cbnz	r6, 800c240 <__strtok_r+0x20>
 800c238:	b965      	cbnz	r5, 800c254 <__strtok_r+0x34>
 800c23a:	6015      	str	r5, [r2, #0]
 800c23c:	4628      	mov	r0, r5
 800c23e:	e005      	b.n	800c24c <__strtok_r+0x2c>
 800c240:	42b5      	cmp	r5, r6
 800c242:	d1f6      	bne.n	800c232 <__strtok_r+0x12>
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1f0      	bne.n	800c22a <__strtok_r+0xa>
 800c248:	6014      	str	r4, [r2, #0]
 800c24a:	7003      	strb	r3, [r0, #0]
 800c24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c24e:	461c      	mov	r4, r3
 800c250:	e00c      	b.n	800c26c <__strtok_r+0x4c>
 800c252:	b915      	cbnz	r5, 800c25a <__strtok_r+0x3a>
 800c254:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c258:	460e      	mov	r6, r1
 800c25a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c25e:	42ab      	cmp	r3, r5
 800c260:	d1f7      	bne.n	800c252 <__strtok_r+0x32>
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0f3      	beq.n	800c24e <__strtok_r+0x2e>
 800c266:	2300      	movs	r3, #0
 800c268:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c26c:	6014      	str	r4, [r2, #0]
 800c26e:	e7ed      	b.n	800c24c <__strtok_r+0x2c>

0800c270 <strstr>:
 800c270:	780a      	ldrb	r2, [r1, #0]
 800c272:	b570      	push	{r4, r5, r6, lr}
 800c274:	b96a      	cbnz	r2, 800c292 <strstr+0x22>
 800c276:	bd70      	pop	{r4, r5, r6, pc}
 800c278:	429a      	cmp	r2, r3
 800c27a:	d109      	bne.n	800c290 <strstr+0x20>
 800c27c:	460c      	mov	r4, r1
 800c27e:	4605      	mov	r5, r0
 800c280:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c284:	2b00      	cmp	r3, #0
 800c286:	d0f6      	beq.n	800c276 <strstr+0x6>
 800c288:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c28c:	429e      	cmp	r6, r3
 800c28e:	d0f7      	beq.n	800c280 <strstr+0x10>
 800c290:	3001      	adds	r0, #1
 800c292:	7803      	ldrb	r3, [r0, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1ef      	bne.n	800c278 <strstr+0x8>
 800c298:	4618      	mov	r0, r3
 800c29a:	e7ec      	b.n	800c276 <strstr+0x6>

0800c29c <_localeconv_r>:
 800c29c:	4800      	ldr	r0, [pc, #0]	; (800c2a0 <_localeconv_r+0x4>)
 800c29e:	4770      	bx	lr
 800c2a0:	20000128 	.word	0x20000128

0800c2a4 <_close_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d06      	ldr	r5, [pc, #24]	; (800c2c0 <_close_r+0x1c>)
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	4608      	mov	r0, r1
 800c2ae:	602b      	str	r3, [r5, #0]
 800c2b0:	f7f8 f951 	bl	8004556 <_close>
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	d102      	bne.n	800c2be <_close_r+0x1a>
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	b103      	cbz	r3, 800c2be <_close_r+0x1a>
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	bd38      	pop	{r3, r4, r5, pc}
 800c2c0:	20000d1c 	.word	0x20000d1c

0800c2c4 <_lseek_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4d07      	ldr	r5, [pc, #28]	; (800c2e4 <_lseek_r+0x20>)
 800c2c8:	4604      	mov	r4, r0
 800c2ca:	4608      	mov	r0, r1
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	602a      	str	r2, [r5, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	f7f8 f966 	bl	80045a4 <_lseek>
 800c2d8:	1c43      	adds	r3, r0, #1
 800c2da:	d102      	bne.n	800c2e2 <_lseek_r+0x1e>
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	b103      	cbz	r3, 800c2e2 <_lseek_r+0x1e>
 800c2e0:	6023      	str	r3, [r4, #0]
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	20000d1c 	.word	0x20000d1c

0800c2e8 <_read_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d07      	ldr	r5, [pc, #28]	; (800c308 <_read_r+0x20>)
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	602a      	str	r2, [r5, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f7f8 f8f4 	bl	80044e4 <_read>
 800c2fc:	1c43      	adds	r3, r0, #1
 800c2fe:	d102      	bne.n	800c306 <_read_r+0x1e>
 800c300:	682b      	ldr	r3, [r5, #0]
 800c302:	b103      	cbz	r3, 800c306 <_read_r+0x1e>
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	20000d1c 	.word	0x20000d1c

0800c30c <_sbrk_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4d06      	ldr	r5, [pc, #24]	; (800c328 <_sbrk_r+0x1c>)
 800c310:	2300      	movs	r3, #0
 800c312:	4604      	mov	r4, r0
 800c314:	4608      	mov	r0, r1
 800c316:	602b      	str	r3, [r5, #0]
 800c318:	f7f8 f952 	bl	80045c0 <_sbrk>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	d102      	bne.n	800c326 <_sbrk_r+0x1a>
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	b103      	cbz	r3, 800c326 <_sbrk_r+0x1a>
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	20000d1c 	.word	0x20000d1c

0800c32c <_write_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4d07      	ldr	r5, [pc, #28]	; (800c34c <_write_r+0x20>)
 800c330:	4604      	mov	r4, r0
 800c332:	4608      	mov	r0, r1
 800c334:	4611      	mov	r1, r2
 800c336:	2200      	movs	r2, #0
 800c338:	602a      	str	r2, [r5, #0]
 800c33a:	461a      	mov	r2, r3
 800c33c:	f7f8 f8ef 	bl	800451e <_write>
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	d102      	bne.n	800c34a <_write_r+0x1e>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	b103      	cbz	r3, 800c34a <_write_r+0x1e>
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	20000d1c 	.word	0x20000d1c

0800c350 <__errno>:
 800c350:	4b01      	ldr	r3, [pc, #4]	; (800c358 <__errno+0x8>)
 800c352:	6818      	ldr	r0, [r3, #0]
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	200001f0 	.word	0x200001f0

0800c35c <__libc_init_array>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	4d0d      	ldr	r5, [pc, #52]	; (800c394 <__libc_init_array+0x38>)
 800c360:	4c0d      	ldr	r4, [pc, #52]	; (800c398 <__libc_init_array+0x3c>)
 800c362:	1b64      	subs	r4, r4, r5
 800c364:	10a4      	asrs	r4, r4, #2
 800c366:	2600      	movs	r6, #0
 800c368:	42a6      	cmp	r6, r4
 800c36a:	d109      	bne.n	800c380 <__libc_init_array+0x24>
 800c36c:	4d0b      	ldr	r5, [pc, #44]	; (800c39c <__libc_init_array+0x40>)
 800c36e:	4c0c      	ldr	r4, [pc, #48]	; (800c3a0 <__libc_init_array+0x44>)
 800c370:	f003 fe38 	bl	800ffe4 <_init>
 800c374:	1b64      	subs	r4, r4, r5
 800c376:	10a4      	asrs	r4, r4, #2
 800c378:	2600      	movs	r6, #0
 800c37a:	42a6      	cmp	r6, r4
 800c37c:	d105      	bne.n	800c38a <__libc_init_array+0x2e>
 800c37e:	bd70      	pop	{r4, r5, r6, pc}
 800c380:	f855 3b04 	ldr.w	r3, [r5], #4
 800c384:	4798      	blx	r3
 800c386:	3601      	adds	r6, #1
 800c388:	e7ee      	b.n	800c368 <__libc_init_array+0xc>
 800c38a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c38e:	4798      	blx	r3
 800c390:	3601      	adds	r6, #1
 800c392:	e7f2      	b.n	800c37a <__libc_init_array+0x1e>
 800c394:	08012410 	.word	0x08012410
 800c398:	08012410 	.word	0x08012410
 800c39c:	08012410 	.word	0x08012410
 800c3a0:	08012414 	.word	0x08012414

0800c3a4 <__retarget_lock_init_recursive>:
 800c3a4:	4770      	bx	lr

0800c3a6 <__retarget_lock_acquire_recursive>:
 800c3a6:	4770      	bx	lr

0800c3a8 <__retarget_lock_release_recursive>:
 800c3a8:	4770      	bx	lr

0800c3aa <strcpy>:
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3b0:	f803 2b01 	strb.w	r2, [r3], #1
 800c3b4:	2a00      	cmp	r2, #0
 800c3b6:	d1f9      	bne.n	800c3ac <strcpy+0x2>
 800c3b8:	4770      	bx	lr

0800c3ba <memcpy>:
 800c3ba:	440a      	add	r2, r1
 800c3bc:	4291      	cmp	r1, r2
 800c3be:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3c2:	d100      	bne.n	800c3c6 <memcpy+0xc>
 800c3c4:	4770      	bx	lr
 800c3c6:	b510      	push	{r4, lr}
 800c3c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3d0:	4291      	cmp	r1, r2
 800c3d2:	d1f9      	bne.n	800c3c8 <memcpy+0xe>
 800c3d4:	bd10      	pop	{r4, pc}
	...

0800c3d8 <nan>:
 800c3d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c3e0 <nan+0x8>
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	00000000 	.word	0x00000000
 800c3e4:	7ff80000 	.word	0x7ff80000

0800c3e8 <nanf>:
 800c3e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c3f0 <nanf+0x8>
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	7fc00000 	.word	0x7fc00000

0800c3f4 <__assert_func>:
 800c3f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3f6:	4614      	mov	r4, r2
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	4b09      	ldr	r3, [pc, #36]	; (800c420 <__assert_func+0x2c>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4605      	mov	r5, r0
 800c400:	68d8      	ldr	r0, [r3, #12]
 800c402:	b14c      	cbz	r4, 800c418 <__assert_func+0x24>
 800c404:	4b07      	ldr	r3, [pc, #28]	; (800c424 <__assert_func+0x30>)
 800c406:	9100      	str	r1, [sp, #0]
 800c408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c40c:	4906      	ldr	r1, [pc, #24]	; (800c428 <__assert_func+0x34>)
 800c40e:	462b      	mov	r3, r5
 800c410:	f002 f8fe 	bl	800e610 <fiprintf>
 800c414:	f002 f928 	bl	800e668 <abort>
 800c418:	4b04      	ldr	r3, [pc, #16]	; (800c42c <__assert_func+0x38>)
 800c41a:	461c      	mov	r4, r3
 800c41c:	e7f3      	b.n	800c406 <__assert_func+0x12>
 800c41e:	bf00      	nop
 800c420:	200001f0 	.word	0x200001f0
 800c424:	08011f9b 	.word	0x08011f9b
 800c428:	08011fa8 	.word	0x08011fa8
 800c42c:	08011fd6 	.word	0x08011fd6

0800c430 <quorem>:
 800c430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c434:	6903      	ldr	r3, [r0, #16]
 800c436:	690c      	ldr	r4, [r1, #16]
 800c438:	42a3      	cmp	r3, r4
 800c43a:	4607      	mov	r7, r0
 800c43c:	db7e      	blt.n	800c53c <quorem+0x10c>
 800c43e:	3c01      	subs	r4, #1
 800c440:	f101 0814 	add.w	r8, r1, #20
 800c444:	f100 0514 	add.w	r5, r0, #20
 800c448:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c456:	3301      	adds	r3, #1
 800c458:	429a      	cmp	r2, r3
 800c45a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c45e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c462:	fbb2 f6f3 	udiv	r6, r2, r3
 800c466:	d331      	bcc.n	800c4cc <quorem+0x9c>
 800c468:	f04f 0e00 	mov.w	lr, #0
 800c46c:	4640      	mov	r0, r8
 800c46e:	46ac      	mov	ip, r5
 800c470:	46f2      	mov	sl, lr
 800c472:	f850 2b04 	ldr.w	r2, [r0], #4
 800c476:	b293      	uxth	r3, r2
 800c478:	fb06 e303 	mla	r3, r6, r3, lr
 800c47c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c480:	0c1a      	lsrs	r2, r3, #16
 800c482:	b29b      	uxth	r3, r3
 800c484:	ebaa 0303 	sub.w	r3, sl, r3
 800c488:	f8dc a000 	ldr.w	sl, [ip]
 800c48c:	fa13 f38a 	uxtah	r3, r3, sl
 800c490:	fb06 220e 	mla	r2, r6, lr, r2
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	9b00      	ldr	r3, [sp, #0]
 800c498:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c49c:	b292      	uxth	r2, r2
 800c49e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c4a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4a6:	f8bd 3000 	ldrh.w	r3, [sp]
 800c4aa:	4581      	cmp	r9, r0
 800c4ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4b0:	f84c 3b04 	str.w	r3, [ip], #4
 800c4b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c4b8:	d2db      	bcs.n	800c472 <quorem+0x42>
 800c4ba:	f855 300b 	ldr.w	r3, [r5, fp]
 800c4be:	b92b      	cbnz	r3, 800c4cc <quorem+0x9c>
 800c4c0:	9b01      	ldr	r3, [sp, #4]
 800c4c2:	3b04      	subs	r3, #4
 800c4c4:	429d      	cmp	r5, r3
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	d32c      	bcc.n	800c524 <quorem+0xf4>
 800c4ca:	613c      	str	r4, [r7, #16]
 800c4cc:	4638      	mov	r0, r7
 800c4ce:	f001 fca5 	bl	800de1c <__mcmp>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	db22      	blt.n	800c51c <quorem+0xec>
 800c4d6:	3601      	adds	r6, #1
 800c4d8:	4629      	mov	r1, r5
 800c4da:	2000      	movs	r0, #0
 800c4dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800c4e0:	f8d1 c000 	ldr.w	ip, [r1]
 800c4e4:	b293      	uxth	r3, r2
 800c4e6:	1ac3      	subs	r3, r0, r3
 800c4e8:	0c12      	lsrs	r2, r2, #16
 800c4ea:	fa13 f38c 	uxtah	r3, r3, ip
 800c4ee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c4f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4fc:	45c1      	cmp	r9, r8
 800c4fe:	f841 3b04 	str.w	r3, [r1], #4
 800c502:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c506:	d2e9      	bcs.n	800c4dc <quorem+0xac>
 800c508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c50c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c510:	b922      	cbnz	r2, 800c51c <quorem+0xec>
 800c512:	3b04      	subs	r3, #4
 800c514:	429d      	cmp	r5, r3
 800c516:	461a      	mov	r2, r3
 800c518:	d30a      	bcc.n	800c530 <quorem+0x100>
 800c51a:	613c      	str	r4, [r7, #16]
 800c51c:	4630      	mov	r0, r6
 800c51e:	b003      	add	sp, #12
 800c520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c524:	6812      	ldr	r2, [r2, #0]
 800c526:	3b04      	subs	r3, #4
 800c528:	2a00      	cmp	r2, #0
 800c52a:	d1ce      	bne.n	800c4ca <quorem+0x9a>
 800c52c:	3c01      	subs	r4, #1
 800c52e:	e7c9      	b.n	800c4c4 <quorem+0x94>
 800c530:	6812      	ldr	r2, [r2, #0]
 800c532:	3b04      	subs	r3, #4
 800c534:	2a00      	cmp	r2, #0
 800c536:	d1f0      	bne.n	800c51a <quorem+0xea>
 800c538:	3c01      	subs	r4, #1
 800c53a:	e7eb      	b.n	800c514 <quorem+0xe4>
 800c53c:	2000      	movs	r0, #0
 800c53e:	e7ee      	b.n	800c51e <quorem+0xee>

0800c540 <_dtoa_r>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	ed2d 8b04 	vpush	{d8-d9}
 800c548:	69c5      	ldr	r5, [r0, #28]
 800c54a:	b093      	sub	sp, #76	; 0x4c
 800c54c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c550:	ec57 6b10 	vmov	r6, r7, d0
 800c554:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c558:	9107      	str	r1, [sp, #28]
 800c55a:	4604      	mov	r4, r0
 800c55c:	920a      	str	r2, [sp, #40]	; 0x28
 800c55e:	930d      	str	r3, [sp, #52]	; 0x34
 800c560:	b975      	cbnz	r5, 800c580 <_dtoa_r+0x40>
 800c562:	2010      	movs	r0, #16
 800c564:	f7fd fe7a 	bl	800a25c <malloc>
 800c568:	4602      	mov	r2, r0
 800c56a:	61e0      	str	r0, [r4, #28]
 800c56c:	b920      	cbnz	r0, 800c578 <_dtoa_r+0x38>
 800c56e:	4bae      	ldr	r3, [pc, #696]	; (800c828 <_dtoa_r+0x2e8>)
 800c570:	21ef      	movs	r1, #239	; 0xef
 800c572:	48ae      	ldr	r0, [pc, #696]	; (800c82c <_dtoa_r+0x2ec>)
 800c574:	f7ff ff3e 	bl	800c3f4 <__assert_func>
 800c578:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c57c:	6005      	str	r5, [r0, #0]
 800c57e:	60c5      	str	r5, [r0, #12]
 800c580:	69e3      	ldr	r3, [r4, #28]
 800c582:	6819      	ldr	r1, [r3, #0]
 800c584:	b151      	cbz	r1, 800c59c <_dtoa_r+0x5c>
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	604a      	str	r2, [r1, #4]
 800c58a:	2301      	movs	r3, #1
 800c58c:	4093      	lsls	r3, r2
 800c58e:	608b      	str	r3, [r1, #8]
 800c590:	4620      	mov	r0, r4
 800c592:	f001 f9bd 	bl	800d910 <_Bfree>
 800c596:	69e3      	ldr	r3, [r4, #28]
 800c598:	2200      	movs	r2, #0
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	1e3b      	subs	r3, r7, #0
 800c59e:	bfbb      	ittet	lt
 800c5a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c5a4:	9303      	strlt	r3, [sp, #12]
 800c5a6:	2300      	movge	r3, #0
 800c5a8:	2201      	movlt	r2, #1
 800c5aa:	bfac      	ite	ge
 800c5ac:	f8c8 3000 	strge.w	r3, [r8]
 800c5b0:	f8c8 2000 	strlt.w	r2, [r8]
 800c5b4:	4b9e      	ldr	r3, [pc, #632]	; (800c830 <_dtoa_r+0x2f0>)
 800c5b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c5ba:	ea33 0308 	bics.w	r3, r3, r8
 800c5be:	d11b      	bne.n	800c5f8 <_dtoa_r+0xb8>
 800c5c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c5c6:	6013      	str	r3, [r2, #0]
 800c5c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c5cc:	4333      	orrs	r3, r6
 800c5ce:	f000 8593 	beq.w	800d0f8 <_dtoa_r+0xbb8>
 800c5d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5d4:	b963      	cbnz	r3, 800c5f0 <_dtoa_r+0xb0>
 800c5d6:	4b97      	ldr	r3, [pc, #604]	; (800c834 <_dtoa_r+0x2f4>)
 800c5d8:	e027      	b.n	800c62a <_dtoa_r+0xea>
 800c5da:	4b97      	ldr	r3, [pc, #604]	; (800c838 <_dtoa_r+0x2f8>)
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	3308      	adds	r3, #8
 800c5e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c5e2:	6013      	str	r3, [r2, #0]
 800c5e4:	9800      	ldr	r0, [sp, #0]
 800c5e6:	b013      	add	sp, #76	; 0x4c
 800c5e8:	ecbd 8b04 	vpop	{d8-d9}
 800c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f0:	4b90      	ldr	r3, [pc, #576]	; (800c834 <_dtoa_r+0x2f4>)
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	3303      	adds	r3, #3
 800c5f6:	e7f3      	b.n	800c5e0 <_dtoa_r+0xa0>
 800c5f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	ec51 0b17 	vmov	r0, r1, d7
 800c602:	eeb0 8a47 	vmov.f32	s16, s14
 800c606:	eef0 8a67 	vmov.f32	s17, s15
 800c60a:	2300      	movs	r3, #0
 800c60c:	f7f4 fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c610:	4681      	mov	r9, r0
 800c612:	b160      	cbz	r0, 800c62e <_dtoa_r+0xee>
 800c614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c616:	2301      	movs	r3, #1
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 8568 	beq.w	800d0f2 <_dtoa_r+0xbb2>
 800c622:	4b86      	ldr	r3, [pc, #536]	; (800c83c <_dtoa_r+0x2fc>)
 800c624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	3b01      	subs	r3, #1
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	e7da      	b.n	800c5e4 <_dtoa_r+0xa4>
 800c62e:	aa10      	add	r2, sp, #64	; 0x40
 800c630:	a911      	add	r1, sp, #68	; 0x44
 800c632:	4620      	mov	r0, r4
 800c634:	eeb0 0a48 	vmov.f32	s0, s16
 800c638:	eef0 0a68 	vmov.f32	s1, s17
 800c63c:	f001 fd04 	bl	800e048 <__d2b>
 800c640:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c644:	4682      	mov	sl, r0
 800c646:	2d00      	cmp	r5, #0
 800c648:	d07f      	beq.n	800c74a <_dtoa_r+0x20a>
 800c64a:	ee18 3a90 	vmov	r3, s17
 800c64e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c652:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c656:	ec51 0b18 	vmov	r0, r1, d8
 800c65a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c65e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c662:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c666:	4619      	mov	r1, r3
 800c668:	2200      	movs	r2, #0
 800c66a:	4b75      	ldr	r3, [pc, #468]	; (800c840 <_dtoa_r+0x300>)
 800c66c:	f7f3 fe0c 	bl	8000288 <__aeabi_dsub>
 800c670:	a367      	add	r3, pc, #412	; (adr r3, 800c810 <_dtoa_r+0x2d0>)
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	f7f3 ffbf 	bl	80005f8 <__aeabi_dmul>
 800c67a:	a367      	add	r3, pc, #412	; (adr r3, 800c818 <_dtoa_r+0x2d8>)
 800c67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c680:	f7f3 fe04 	bl	800028c <__adddf3>
 800c684:	4606      	mov	r6, r0
 800c686:	4628      	mov	r0, r5
 800c688:	460f      	mov	r7, r1
 800c68a:	f7f3 ff4b 	bl	8000524 <__aeabi_i2d>
 800c68e:	a364      	add	r3, pc, #400	; (adr r3, 800c820 <_dtoa_r+0x2e0>)
 800c690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c694:	f7f3 ffb0 	bl	80005f8 <__aeabi_dmul>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4630      	mov	r0, r6
 800c69e:	4639      	mov	r1, r7
 800c6a0:	f7f3 fdf4 	bl	800028c <__adddf3>
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	460f      	mov	r7, r1
 800c6a8:	f7f4 fa56 	bl	8000b58 <__aeabi_d2iz>
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4683      	mov	fp, r0
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	4639      	mov	r1, r7
 800c6b6:	f7f4 fa11 	bl	8000adc <__aeabi_dcmplt>
 800c6ba:	b148      	cbz	r0, 800c6d0 <_dtoa_r+0x190>
 800c6bc:	4658      	mov	r0, fp
 800c6be:	f7f3 ff31 	bl	8000524 <__aeabi_i2d>
 800c6c2:	4632      	mov	r2, r6
 800c6c4:	463b      	mov	r3, r7
 800c6c6:	f7f4 f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6ca:	b908      	cbnz	r0, 800c6d0 <_dtoa_r+0x190>
 800c6cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c6d0:	f1bb 0f16 	cmp.w	fp, #22
 800c6d4:	d857      	bhi.n	800c786 <_dtoa_r+0x246>
 800c6d6:	4b5b      	ldr	r3, [pc, #364]	; (800c844 <_dtoa_r+0x304>)
 800c6d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e0:	ec51 0b18 	vmov	r0, r1, d8
 800c6e4:	f7f4 f9fa 	bl	8000adc <__aeabi_dcmplt>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d04e      	beq.n	800c78a <_dtoa_r+0x24a>
 800c6ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	930c      	str	r3, [sp, #48]	; 0x30
 800c6f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6f6:	1b5b      	subs	r3, r3, r5
 800c6f8:	1e5a      	subs	r2, r3, #1
 800c6fa:	bf45      	ittet	mi
 800c6fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800c700:	9305      	strmi	r3, [sp, #20]
 800c702:	2300      	movpl	r3, #0
 800c704:	2300      	movmi	r3, #0
 800c706:	9206      	str	r2, [sp, #24]
 800c708:	bf54      	ite	pl
 800c70a:	9305      	strpl	r3, [sp, #20]
 800c70c:	9306      	strmi	r3, [sp, #24]
 800c70e:	f1bb 0f00 	cmp.w	fp, #0
 800c712:	db3c      	blt.n	800c78e <_dtoa_r+0x24e>
 800c714:	9b06      	ldr	r3, [sp, #24]
 800c716:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c71a:	445b      	add	r3, fp
 800c71c:	9306      	str	r3, [sp, #24]
 800c71e:	2300      	movs	r3, #0
 800c720:	9308      	str	r3, [sp, #32]
 800c722:	9b07      	ldr	r3, [sp, #28]
 800c724:	2b09      	cmp	r3, #9
 800c726:	d868      	bhi.n	800c7fa <_dtoa_r+0x2ba>
 800c728:	2b05      	cmp	r3, #5
 800c72a:	bfc4      	itt	gt
 800c72c:	3b04      	subgt	r3, #4
 800c72e:	9307      	strgt	r3, [sp, #28]
 800c730:	9b07      	ldr	r3, [sp, #28]
 800c732:	f1a3 0302 	sub.w	r3, r3, #2
 800c736:	bfcc      	ite	gt
 800c738:	2500      	movgt	r5, #0
 800c73a:	2501      	movle	r5, #1
 800c73c:	2b03      	cmp	r3, #3
 800c73e:	f200 8085 	bhi.w	800c84c <_dtoa_r+0x30c>
 800c742:	e8df f003 	tbb	[pc, r3]
 800c746:	3b2e      	.short	0x3b2e
 800c748:	5839      	.short	0x5839
 800c74a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c74e:	441d      	add	r5, r3
 800c750:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c754:	2b20      	cmp	r3, #32
 800c756:	bfc1      	itttt	gt
 800c758:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c75c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c760:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c764:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c768:	bfd6      	itet	le
 800c76a:	f1c3 0320 	rsble	r3, r3, #32
 800c76e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c772:	fa06 f003 	lslle.w	r0, r6, r3
 800c776:	f7f3 fec5 	bl	8000504 <__aeabi_ui2d>
 800c77a:	2201      	movs	r2, #1
 800c77c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c780:	3d01      	subs	r5, #1
 800c782:	920e      	str	r2, [sp, #56]	; 0x38
 800c784:	e76f      	b.n	800c666 <_dtoa_r+0x126>
 800c786:	2301      	movs	r3, #1
 800c788:	e7b3      	b.n	800c6f2 <_dtoa_r+0x1b2>
 800c78a:	900c      	str	r0, [sp, #48]	; 0x30
 800c78c:	e7b2      	b.n	800c6f4 <_dtoa_r+0x1b4>
 800c78e:	9b05      	ldr	r3, [sp, #20]
 800c790:	eba3 030b 	sub.w	r3, r3, fp
 800c794:	9305      	str	r3, [sp, #20]
 800c796:	f1cb 0300 	rsb	r3, fp, #0
 800c79a:	9308      	str	r3, [sp, #32]
 800c79c:	2300      	movs	r3, #0
 800c79e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7a0:	e7bf      	b.n	800c722 <_dtoa_r+0x1e2>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	dc52      	bgt.n	800c852 <_dtoa_r+0x312>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	9301      	str	r3, [sp, #4]
 800c7b0:	9304      	str	r3, [sp, #16]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	920a      	str	r2, [sp, #40]	; 0x28
 800c7b6:	e00b      	b.n	800c7d0 <_dtoa_r+0x290>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e7f3      	b.n	800c7a4 <_dtoa_r+0x264>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c2:	445b      	add	r3, fp
 800c7c4:	9301      	str	r3, [sp, #4]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	9304      	str	r3, [sp, #16]
 800c7cc:	bfb8      	it	lt
 800c7ce:	2301      	movlt	r3, #1
 800c7d0:	69e0      	ldr	r0, [r4, #28]
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	2204      	movs	r2, #4
 800c7d6:	f102 0614 	add.w	r6, r2, #20
 800c7da:	429e      	cmp	r6, r3
 800c7dc:	d93d      	bls.n	800c85a <_dtoa_r+0x31a>
 800c7de:	6041      	str	r1, [r0, #4]
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f001 f855 	bl	800d890 <_Balloc>
 800c7e6:	9000      	str	r0, [sp, #0]
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d139      	bne.n	800c860 <_dtoa_r+0x320>
 800c7ec:	4b16      	ldr	r3, [pc, #88]	; (800c848 <_dtoa_r+0x308>)
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	f240 11af 	movw	r1, #431	; 0x1af
 800c7f4:	e6bd      	b.n	800c572 <_dtoa_r+0x32>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e7e1      	b.n	800c7be <_dtoa_r+0x27e>
 800c7fa:	2501      	movs	r5, #1
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	9307      	str	r3, [sp, #28]
 800c800:	9509      	str	r5, [sp, #36]	; 0x24
 800c802:	f04f 33ff 	mov.w	r3, #4294967295
 800c806:	9301      	str	r3, [sp, #4]
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	2200      	movs	r2, #0
 800c80c:	2312      	movs	r3, #18
 800c80e:	e7d1      	b.n	800c7b4 <_dtoa_r+0x274>
 800c810:	636f4361 	.word	0x636f4361
 800c814:	3fd287a7 	.word	0x3fd287a7
 800c818:	8b60c8b3 	.word	0x8b60c8b3
 800c81c:	3fc68a28 	.word	0x3fc68a28
 800c820:	509f79fb 	.word	0x509f79fb
 800c824:	3fd34413 	.word	0x3fd34413
 800c828:	08011f22 	.word	0x08011f22
 800c82c:	08011fe4 	.word	0x08011fe4
 800c830:	7ff00000 	.word	0x7ff00000
 800c834:	08011fe0 	.word	0x08011fe0
 800c838:	08011fd7 	.word	0x08011fd7
 800c83c:	08011efa 	.word	0x08011efa
 800c840:	3ff80000 	.word	0x3ff80000
 800c844:	08012130 	.word	0x08012130
 800c848:	0801203c 	.word	0x0801203c
 800c84c:	2301      	movs	r3, #1
 800c84e:	9309      	str	r3, [sp, #36]	; 0x24
 800c850:	e7d7      	b.n	800c802 <_dtoa_r+0x2c2>
 800c852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c854:	9301      	str	r3, [sp, #4]
 800c856:	9304      	str	r3, [sp, #16]
 800c858:	e7ba      	b.n	800c7d0 <_dtoa_r+0x290>
 800c85a:	3101      	adds	r1, #1
 800c85c:	0052      	lsls	r2, r2, #1
 800c85e:	e7ba      	b.n	800c7d6 <_dtoa_r+0x296>
 800c860:	69e3      	ldr	r3, [r4, #28]
 800c862:	9a00      	ldr	r2, [sp, #0]
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	9b04      	ldr	r3, [sp, #16]
 800c868:	2b0e      	cmp	r3, #14
 800c86a:	f200 80a8 	bhi.w	800c9be <_dtoa_r+0x47e>
 800c86e:	2d00      	cmp	r5, #0
 800c870:	f000 80a5 	beq.w	800c9be <_dtoa_r+0x47e>
 800c874:	f1bb 0f00 	cmp.w	fp, #0
 800c878:	dd38      	ble.n	800c8ec <_dtoa_r+0x3ac>
 800c87a:	4bc0      	ldr	r3, [pc, #768]	; (800cb7c <_dtoa_r+0x63c>)
 800c87c:	f00b 020f 	and.w	r2, fp, #15
 800c880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c884:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c888:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c88c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c890:	d019      	beq.n	800c8c6 <_dtoa_r+0x386>
 800c892:	4bbb      	ldr	r3, [pc, #748]	; (800cb80 <_dtoa_r+0x640>)
 800c894:	ec51 0b18 	vmov	r0, r1, d8
 800c898:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c89c:	f7f3 ffd6 	bl	800084c <__aeabi_ddiv>
 800c8a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8a4:	f008 080f 	and.w	r8, r8, #15
 800c8a8:	2503      	movs	r5, #3
 800c8aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cb80 <_dtoa_r+0x640>
 800c8ae:	f1b8 0f00 	cmp.w	r8, #0
 800c8b2:	d10a      	bne.n	800c8ca <_dtoa_r+0x38a>
 800c8b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8b8:	4632      	mov	r2, r6
 800c8ba:	463b      	mov	r3, r7
 800c8bc:	f7f3 ffc6 	bl	800084c <__aeabi_ddiv>
 800c8c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8c4:	e02b      	b.n	800c91e <_dtoa_r+0x3de>
 800c8c6:	2502      	movs	r5, #2
 800c8c8:	e7ef      	b.n	800c8aa <_dtoa_r+0x36a>
 800c8ca:	f018 0f01 	tst.w	r8, #1
 800c8ce:	d008      	beq.n	800c8e2 <_dtoa_r+0x3a2>
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	4639      	mov	r1, r7
 800c8d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c8d8:	f7f3 fe8e 	bl	80005f8 <__aeabi_dmul>
 800c8dc:	3501      	adds	r5, #1
 800c8de:	4606      	mov	r6, r0
 800c8e0:	460f      	mov	r7, r1
 800c8e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c8e6:	f109 0908 	add.w	r9, r9, #8
 800c8ea:	e7e0      	b.n	800c8ae <_dtoa_r+0x36e>
 800c8ec:	f000 809f 	beq.w	800ca2e <_dtoa_r+0x4ee>
 800c8f0:	f1cb 0600 	rsb	r6, fp, #0
 800c8f4:	4ba1      	ldr	r3, [pc, #644]	; (800cb7c <_dtoa_r+0x63c>)
 800c8f6:	4fa2      	ldr	r7, [pc, #648]	; (800cb80 <_dtoa_r+0x640>)
 800c8f8:	f006 020f 	and.w	r2, r6, #15
 800c8fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	ec51 0b18 	vmov	r0, r1, d8
 800c908:	f7f3 fe76 	bl	80005f8 <__aeabi_dmul>
 800c90c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c910:	1136      	asrs	r6, r6, #4
 800c912:	2300      	movs	r3, #0
 800c914:	2502      	movs	r5, #2
 800c916:	2e00      	cmp	r6, #0
 800c918:	d17e      	bne.n	800ca18 <_dtoa_r+0x4d8>
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1d0      	bne.n	800c8c0 <_dtoa_r+0x380>
 800c91e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c920:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c924:	2b00      	cmp	r3, #0
 800c926:	f000 8084 	beq.w	800ca32 <_dtoa_r+0x4f2>
 800c92a:	4b96      	ldr	r3, [pc, #600]	; (800cb84 <_dtoa_r+0x644>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	4640      	mov	r0, r8
 800c930:	4649      	mov	r1, r9
 800c932:	f7f4 f8d3 	bl	8000adc <__aeabi_dcmplt>
 800c936:	2800      	cmp	r0, #0
 800c938:	d07b      	beq.n	800ca32 <_dtoa_r+0x4f2>
 800c93a:	9b04      	ldr	r3, [sp, #16]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d078      	beq.n	800ca32 <_dtoa_r+0x4f2>
 800c940:	9b01      	ldr	r3, [sp, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	dd39      	ble.n	800c9ba <_dtoa_r+0x47a>
 800c946:	4b90      	ldr	r3, [pc, #576]	; (800cb88 <_dtoa_r+0x648>)
 800c948:	2200      	movs	r2, #0
 800c94a:	4640      	mov	r0, r8
 800c94c:	4649      	mov	r1, r9
 800c94e:	f7f3 fe53 	bl	80005f8 <__aeabi_dmul>
 800c952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c956:	9e01      	ldr	r6, [sp, #4]
 800c958:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c95c:	3501      	adds	r5, #1
 800c95e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c962:	4628      	mov	r0, r5
 800c964:	f7f3 fdde 	bl	8000524 <__aeabi_i2d>
 800c968:	4642      	mov	r2, r8
 800c96a:	464b      	mov	r3, r9
 800c96c:	f7f3 fe44 	bl	80005f8 <__aeabi_dmul>
 800c970:	4b86      	ldr	r3, [pc, #536]	; (800cb8c <_dtoa_r+0x64c>)
 800c972:	2200      	movs	r2, #0
 800c974:	f7f3 fc8a 	bl	800028c <__adddf3>
 800c978:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c980:	9303      	str	r3, [sp, #12]
 800c982:	2e00      	cmp	r6, #0
 800c984:	d158      	bne.n	800ca38 <_dtoa_r+0x4f8>
 800c986:	4b82      	ldr	r3, [pc, #520]	; (800cb90 <_dtoa_r+0x650>)
 800c988:	2200      	movs	r2, #0
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	f7f3 fc7b 	bl	8000288 <__aeabi_dsub>
 800c992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c996:	4680      	mov	r8, r0
 800c998:	4689      	mov	r9, r1
 800c99a:	f7f4 f8bd 	bl	8000b18 <__aeabi_dcmpgt>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f040 8296 	bne.w	800ced0 <_dtoa_r+0x990>
 800c9a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c9a8:	4640      	mov	r0, r8
 800c9aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9ae:	4649      	mov	r1, r9
 800c9b0:	f7f4 f894 	bl	8000adc <__aeabi_dcmplt>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	f040 8289 	bne.w	800cecc <_dtoa_r+0x98c>
 800c9ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c9be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f2c0 814e 	blt.w	800cc62 <_dtoa_r+0x722>
 800c9c6:	f1bb 0f0e 	cmp.w	fp, #14
 800c9ca:	f300 814a 	bgt.w	800cc62 <_dtoa_r+0x722>
 800c9ce:	4b6b      	ldr	r3, [pc, #428]	; (800cb7c <_dtoa_r+0x63c>)
 800c9d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c9d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f280 80dc 	bge.w	800cb98 <_dtoa_r+0x658>
 800c9e0:	9b04      	ldr	r3, [sp, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f300 80d8 	bgt.w	800cb98 <_dtoa_r+0x658>
 800c9e8:	f040 826f 	bne.w	800ceca <_dtoa_r+0x98a>
 800c9ec:	4b68      	ldr	r3, [pc, #416]	; (800cb90 <_dtoa_r+0x650>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	4640      	mov	r0, r8
 800c9f2:	4649      	mov	r1, r9
 800c9f4:	f7f3 fe00 	bl	80005f8 <__aeabi_dmul>
 800c9f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9fc:	f7f4 f882 	bl	8000b04 <__aeabi_dcmpge>
 800ca00:	9e04      	ldr	r6, [sp, #16]
 800ca02:	4637      	mov	r7, r6
 800ca04:	2800      	cmp	r0, #0
 800ca06:	f040 8245 	bne.w	800ce94 <_dtoa_r+0x954>
 800ca0a:	9d00      	ldr	r5, [sp, #0]
 800ca0c:	2331      	movs	r3, #49	; 0x31
 800ca0e:	f805 3b01 	strb.w	r3, [r5], #1
 800ca12:	f10b 0b01 	add.w	fp, fp, #1
 800ca16:	e241      	b.n	800ce9c <_dtoa_r+0x95c>
 800ca18:	07f2      	lsls	r2, r6, #31
 800ca1a:	d505      	bpl.n	800ca28 <_dtoa_r+0x4e8>
 800ca1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca20:	f7f3 fdea 	bl	80005f8 <__aeabi_dmul>
 800ca24:	3501      	adds	r5, #1
 800ca26:	2301      	movs	r3, #1
 800ca28:	1076      	asrs	r6, r6, #1
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	e773      	b.n	800c916 <_dtoa_r+0x3d6>
 800ca2e:	2502      	movs	r5, #2
 800ca30:	e775      	b.n	800c91e <_dtoa_r+0x3de>
 800ca32:	9e04      	ldr	r6, [sp, #16]
 800ca34:	465f      	mov	r7, fp
 800ca36:	e792      	b.n	800c95e <_dtoa_r+0x41e>
 800ca38:	9900      	ldr	r1, [sp, #0]
 800ca3a:	4b50      	ldr	r3, [pc, #320]	; (800cb7c <_dtoa_r+0x63c>)
 800ca3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca40:	4431      	add	r1, r6
 800ca42:	9102      	str	r1, [sp, #8]
 800ca44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca46:	eeb0 9a47 	vmov.f32	s18, s14
 800ca4a:	eef0 9a67 	vmov.f32	s19, s15
 800ca4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ca52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca56:	2900      	cmp	r1, #0
 800ca58:	d044      	beq.n	800cae4 <_dtoa_r+0x5a4>
 800ca5a:	494e      	ldr	r1, [pc, #312]	; (800cb94 <_dtoa_r+0x654>)
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	f7f3 fef5 	bl	800084c <__aeabi_ddiv>
 800ca62:	ec53 2b19 	vmov	r2, r3, d9
 800ca66:	f7f3 fc0f 	bl	8000288 <__aeabi_dsub>
 800ca6a:	9d00      	ldr	r5, [sp, #0]
 800ca6c:	ec41 0b19 	vmov	d9, r0, r1
 800ca70:	4649      	mov	r1, r9
 800ca72:	4640      	mov	r0, r8
 800ca74:	f7f4 f870 	bl	8000b58 <__aeabi_d2iz>
 800ca78:	4606      	mov	r6, r0
 800ca7a:	f7f3 fd53 	bl	8000524 <__aeabi_i2d>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	4640      	mov	r0, r8
 800ca84:	4649      	mov	r1, r9
 800ca86:	f7f3 fbff 	bl	8000288 <__aeabi_dsub>
 800ca8a:	3630      	adds	r6, #48	; 0x30
 800ca8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ca90:	ec53 2b19 	vmov	r2, r3, d9
 800ca94:	4680      	mov	r8, r0
 800ca96:	4689      	mov	r9, r1
 800ca98:	f7f4 f820 	bl	8000adc <__aeabi_dcmplt>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d164      	bne.n	800cb6a <_dtoa_r+0x62a>
 800caa0:	4642      	mov	r2, r8
 800caa2:	464b      	mov	r3, r9
 800caa4:	4937      	ldr	r1, [pc, #220]	; (800cb84 <_dtoa_r+0x644>)
 800caa6:	2000      	movs	r0, #0
 800caa8:	f7f3 fbee 	bl	8000288 <__aeabi_dsub>
 800caac:	ec53 2b19 	vmov	r2, r3, d9
 800cab0:	f7f4 f814 	bl	8000adc <__aeabi_dcmplt>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	f040 80b6 	bne.w	800cc26 <_dtoa_r+0x6e6>
 800caba:	9b02      	ldr	r3, [sp, #8]
 800cabc:	429d      	cmp	r5, r3
 800cabe:	f43f af7c 	beq.w	800c9ba <_dtoa_r+0x47a>
 800cac2:	4b31      	ldr	r3, [pc, #196]	; (800cb88 <_dtoa_r+0x648>)
 800cac4:	ec51 0b19 	vmov	r0, r1, d9
 800cac8:	2200      	movs	r2, #0
 800caca:	f7f3 fd95 	bl	80005f8 <__aeabi_dmul>
 800cace:	4b2e      	ldr	r3, [pc, #184]	; (800cb88 <_dtoa_r+0x648>)
 800cad0:	ec41 0b19 	vmov	d9, r0, r1
 800cad4:	2200      	movs	r2, #0
 800cad6:	4640      	mov	r0, r8
 800cad8:	4649      	mov	r1, r9
 800cada:	f7f3 fd8d 	bl	80005f8 <__aeabi_dmul>
 800cade:	4680      	mov	r8, r0
 800cae0:	4689      	mov	r9, r1
 800cae2:	e7c5      	b.n	800ca70 <_dtoa_r+0x530>
 800cae4:	ec51 0b17 	vmov	r0, r1, d7
 800cae8:	f7f3 fd86 	bl	80005f8 <__aeabi_dmul>
 800caec:	9b02      	ldr	r3, [sp, #8]
 800caee:	9d00      	ldr	r5, [sp, #0]
 800caf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800caf2:	ec41 0b19 	vmov	d9, r0, r1
 800caf6:	4649      	mov	r1, r9
 800caf8:	4640      	mov	r0, r8
 800cafa:	f7f4 f82d 	bl	8000b58 <__aeabi_d2iz>
 800cafe:	4606      	mov	r6, r0
 800cb00:	f7f3 fd10 	bl	8000524 <__aeabi_i2d>
 800cb04:	3630      	adds	r6, #48	; 0x30
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	f7f3 fbbb 	bl	8000288 <__aeabi_dsub>
 800cb12:	f805 6b01 	strb.w	r6, [r5], #1
 800cb16:	9b02      	ldr	r3, [sp, #8]
 800cb18:	429d      	cmp	r5, r3
 800cb1a:	4680      	mov	r8, r0
 800cb1c:	4689      	mov	r9, r1
 800cb1e:	f04f 0200 	mov.w	r2, #0
 800cb22:	d124      	bne.n	800cb6e <_dtoa_r+0x62e>
 800cb24:	4b1b      	ldr	r3, [pc, #108]	; (800cb94 <_dtoa_r+0x654>)
 800cb26:	ec51 0b19 	vmov	r0, r1, d9
 800cb2a:	f7f3 fbaf 	bl	800028c <__adddf3>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	4640      	mov	r0, r8
 800cb34:	4649      	mov	r1, r9
 800cb36:	f7f3 ffef 	bl	8000b18 <__aeabi_dcmpgt>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d173      	bne.n	800cc26 <_dtoa_r+0x6e6>
 800cb3e:	ec53 2b19 	vmov	r2, r3, d9
 800cb42:	4914      	ldr	r1, [pc, #80]	; (800cb94 <_dtoa_r+0x654>)
 800cb44:	2000      	movs	r0, #0
 800cb46:	f7f3 fb9f 	bl	8000288 <__aeabi_dsub>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	4640      	mov	r0, r8
 800cb50:	4649      	mov	r1, r9
 800cb52:	f7f3 ffc3 	bl	8000adc <__aeabi_dcmplt>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f43f af2f 	beq.w	800c9ba <_dtoa_r+0x47a>
 800cb5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cb5e:	1e6b      	subs	r3, r5, #1
 800cb60:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb66:	2b30      	cmp	r3, #48	; 0x30
 800cb68:	d0f8      	beq.n	800cb5c <_dtoa_r+0x61c>
 800cb6a:	46bb      	mov	fp, r7
 800cb6c:	e04a      	b.n	800cc04 <_dtoa_r+0x6c4>
 800cb6e:	4b06      	ldr	r3, [pc, #24]	; (800cb88 <_dtoa_r+0x648>)
 800cb70:	f7f3 fd42 	bl	80005f8 <__aeabi_dmul>
 800cb74:	4680      	mov	r8, r0
 800cb76:	4689      	mov	r9, r1
 800cb78:	e7bd      	b.n	800caf6 <_dtoa_r+0x5b6>
 800cb7a:	bf00      	nop
 800cb7c:	08012130 	.word	0x08012130
 800cb80:	08012108 	.word	0x08012108
 800cb84:	3ff00000 	.word	0x3ff00000
 800cb88:	40240000 	.word	0x40240000
 800cb8c:	401c0000 	.word	0x401c0000
 800cb90:	40140000 	.word	0x40140000
 800cb94:	3fe00000 	.word	0x3fe00000
 800cb98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cb9c:	9d00      	ldr	r5, [sp, #0]
 800cb9e:	4642      	mov	r2, r8
 800cba0:	464b      	mov	r3, r9
 800cba2:	4630      	mov	r0, r6
 800cba4:	4639      	mov	r1, r7
 800cba6:	f7f3 fe51 	bl	800084c <__aeabi_ddiv>
 800cbaa:	f7f3 ffd5 	bl	8000b58 <__aeabi_d2iz>
 800cbae:	9001      	str	r0, [sp, #4]
 800cbb0:	f7f3 fcb8 	bl	8000524 <__aeabi_i2d>
 800cbb4:	4642      	mov	r2, r8
 800cbb6:	464b      	mov	r3, r9
 800cbb8:	f7f3 fd1e 	bl	80005f8 <__aeabi_dmul>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	f7f3 fb60 	bl	8000288 <__aeabi_dsub>
 800cbc8:	9e01      	ldr	r6, [sp, #4]
 800cbca:	9f04      	ldr	r7, [sp, #16]
 800cbcc:	3630      	adds	r6, #48	; 0x30
 800cbce:	f805 6b01 	strb.w	r6, [r5], #1
 800cbd2:	9e00      	ldr	r6, [sp, #0]
 800cbd4:	1bae      	subs	r6, r5, r6
 800cbd6:	42b7      	cmp	r7, r6
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	d134      	bne.n	800cc48 <_dtoa_r+0x708>
 800cbde:	f7f3 fb55 	bl	800028c <__adddf3>
 800cbe2:	4642      	mov	r2, r8
 800cbe4:	464b      	mov	r3, r9
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	460f      	mov	r7, r1
 800cbea:	f7f3 ff95 	bl	8000b18 <__aeabi_dcmpgt>
 800cbee:	b9c8      	cbnz	r0, 800cc24 <_dtoa_r+0x6e4>
 800cbf0:	4642      	mov	r2, r8
 800cbf2:	464b      	mov	r3, r9
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	f7f3 ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbfc:	b110      	cbz	r0, 800cc04 <_dtoa_r+0x6c4>
 800cbfe:	9b01      	ldr	r3, [sp, #4]
 800cc00:	07db      	lsls	r3, r3, #31
 800cc02:	d40f      	bmi.n	800cc24 <_dtoa_r+0x6e4>
 800cc04:	4651      	mov	r1, sl
 800cc06:	4620      	mov	r0, r4
 800cc08:	f000 fe82 	bl	800d910 <_Bfree>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc10:	702b      	strb	r3, [r5, #0]
 800cc12:	f10b 0301 	add.w	r3, fp, #1
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f43f ace2 	beq.w	800c5e4 <_dtoa_r+0xa4>
 800cc20:	601d      	str	r5, [r3, #0]
 800cc22:	e4df      	b.n	800c5e4 <_dtoa_r+0xa4>
 800cc24:	465f      	mov	r7, fp
 800cc26:	462b      	mov	r3, r5
 800cc28:	461d      	mov	r5, r3
 800cc2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc2e:	2a39      	cmp	r2, #57	; 0x39
 800cc30:	d106      	bne.n	800cc40 <_dtoa_r+0x700>
 800cc32:	9a00      	ldr	r2, [sp, #0]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d1f7      	bne.n	800cc28 <_dtoa_r+0x6e8>
 800cc38:	9900      	ldr	r1, [sp, #0]
 800cc3a:	2230      	movs	r2, #48	; 0x30
 800cc3c:	3701      	adds	r7, #1
 800cc3e:	700a      	strb	r2, [r1, #0]
 800cc40:	781a      	ldrb	r2, [r3, #0]
 800cc42:	3201      	adds	r2, #1
 800cc44:	701a      	strb	r2, [r3, #0]
 800cc46:	e790      	b.n	800cb6a <_dtoa_r+0x62a>
 800cc48:	4ba3      	ldr	r3, [pc, #652]	; (800ced8 <_dtoa_r+0x998>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f7f3 fcd4 	bl	80005f8 <__aeabi_dmul>
 800cc50:	2200      	movs	r2, #0
 800cc52:	2300      	movs	r3, #0
 800cc54:	4606      	mov	r6, r0
 800cc56:	460f      	mov	r7, r1
 800cc58:	f7f3 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d09e      	beq.n	800cb9e <_dtoa_r+0x65e>
 800cc60:	e7d0      	b.n	800cc04 <_dtoa_r+0x6c4>
 800cc62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc64:	2a00      	cmp	r2, #0
 800cc66:	f000 80ca 	beq.w	800cdfe <_dtoa_r+0x8be>
 800cc6a:	9a07      	ldr	r2, [sp, #28]
 800cc6c:	2a01      	cmp	r2, #1
 800cc6e:	f300 80ad 	bgt.w	800cdcc <_dtoa_r+0x88c>
 800cc72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc74:	2a00      	cmp	r2, #0
 800cc76:	f000 80a5 	beq.w	800cdc4 <_dtoa_r+0x884>
 800cc7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc7e:	9e08      	ldr	r6, [sp, #32]
 800cc80:	9d05      	ldr	r5, [sp, #20]
 800cc82:	9a05      	ldr	r2, [sp, #20]
 800cc84:	441a      	add	r2, r3
 800cc86:	9205      	str	r2, [sp, #20]
 800cc88:	9a06      	ldr	r2, [sp, #24]
 800cc8a:	2101      	movs	r1, #1
 800cc8c:	441a      	add	r2, r3
 800cc8e:	4620      	mov	r0, r4
 800cc90:	9206      	str	r2, [sp, #24]
 800cc92:	f000 ff3d 	bl	800db10 <__i2b>
 800cc96:	4607      	mov	r7, r0
 800cc98:	b165      	cbz	r5, 800ccb4 <_dtoa_r+0x774>
 800cc9a:	9b06      	ldr	r3, [sp, #24]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dd09      	ble.n	800ccb4 <_dtoa_r+0x774>
 800cca0:	42ab      	cmp	r3, r5
 800cca2:	9a05      	ldr	r2, [sp, #20]
 800cca4:	bfa8      	it	ge
 800cca6:	462b      	movge	r3, r5
 800cca8:	1ad2      	subs	r2, r2, r3
 800ccaa:	9205      	str	r2, [sp, #20]
 800ccac:	9a06      	ldr	r2, [sp, #24]
 800ccae:	1aed      	subs	r5, r5, r3
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	9306      	str	r3, [sp, #24]
 800ccb4:	9b08      	ldr	r3, [sp, #32]
 800ccb6:	b1f3      	cbz	r3, 800ccf6 <_dtoa_r+0x7b6>
 800ccb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f000 80a3 	beq.w	800ce06 <_dtoa_r+0x8c6>
 800ccc0:	2e00      	cmp	r6, #0
 800ccc2:	dd10      	ble.n	800cce6 <_dtoa_r+0x7a6>
 800ccc4:	4639      	mov	r1, r7
 800ccc6:	4632      	mov	r2, r6
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f000 ffe1 	bl	800dc90 <__pow5mult>
 800ccce:	4652      	mov	r2, sl
 800ccd0:	4601      	mov	r1, r0
 800ccd2:	4607      	mov	r7, r0
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f000 ff31 	bl	800db3c <__multiply>
 800ccda:	4651      	mov	r1, sl
 800ccdc:	4680      	mov	r8, r0
 800ccde:	4620      	mov	r0, r4
 800cce0:	f000 fe16 	bl	800d910 <_Bfree>
 800cce4:	46c2      	mov	sl, r8
 800cce6:	9b08      	ldr	r3, [sp, #32]
 800cce8:	1b9a      	subs	r2, r3, r6
 800ccea:	d004      	beq.n	800ccf6 <_dtoa_r+0x7b6>
 800ccec:	4651      	mov	r1, sl
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f000 ffce 	bl	800dc90 <__pow5mult>
 800ccf4:	4682      	mov	sl, r0
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 ff09 	bl	800db10 <__i2b>
 800ccfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	4606      	mov	r6, r0
 800cd04:	f340 8081 	ble.w	800ce0a <_dtoa_r+0x8ca>
 800cd08:	461a      	mov	r2, r3
 800cd0a:	4601      	mov	r1, r0
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f000 ffbf 	bl	800dc90 <__pow5mult>
 800cd12:	9b07      	ldr	r3, [sp, #28]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	4606      	mov	r6, r0
 800cd18:	dd7a      	ble.n	800ce10 <_dtoa_r+0x8d0>
 800cd1a:	f04f 0800 	mov.w	r8, #0
 800cd1e:	6933      	ldr	r3, [r6, #16]
 800cd20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cd24:	6918      	ldr	r0, [r3, #16]
 800cd26:	f000 fea5 	bl	800da74 <__hi0bits>
 800cd2a:	f1c0 0020 	rsb	r0, r0, #32
 800cd2e:	9b06      	ldr	r3, [sp, #24]
 800cd30:	4418      	add	r0, r3
 800cd32:	f010 001f 	ands.w	r0, r0, #31
 800cd36:	f000 8094 	beq.w	800ce62 <_dtoa_r+0x922>
 800cd3a:	f1c0 0320 	rsb	r3, r0, #32
 800cd3e:	2b04      	cmp	r3, #4
 800cd40:	f340 8085 	ble.w	800ce4e <_dtoa_r+0x90e>
 800cd44:	9b05      	ldr	r3, [sp, #20]
 800cd46:	f1c0 001c 	rsb	r0, r0, #28
 800cd4a:	4403      	add	r3, r0
 800cd4c:	9305      	str	r3, [sp, #20]
 800cd4e:	9b06      	ldr	r3, [sp, #24]
 800cd50:	4403      	add	r3, r0
 800cd52:	4405      	add	r5, r0
 800cd54:	9306      	str	r3, [sp, #24]
 800cd56:	9b05      	ldr	r3, [sp, #20]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	dd05      	ble.n	800cd68 <_dtoa_r+0x828>
 800cd5c:	4651      	mov	r1, sl
 800cd5e:	461a      	mov	r2, r3
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 ffef 	bl	800dd44 <__lshift>
 800cd66:	4682      	mov	sl, r0
 800cd68:	9b06      	ldr	r3, [sp, #24]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dd05      	ble.n	800cd7a <_dtoa_r+0x83a>
 800cd6e:	4631      	mov	r1, r6
 800cd70:	461a      	mov	r2, r3
 800cd72:	4620      	mov	r0, r4
 800cd74:	f000 ffe6 	bl	800dd44 <__lshift>
 800cd78:	4606      	mov	r6, r0
 800cd7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d072      	beq.n	800ce66 <_dtoa_r+0x926>
 800cd80:	4631      	mov	r1, r6
 800cd82:	4650      	mov	r0, sl
 800cd84:	f001 f84a 	bl	800de1c <__mcmp>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	da6c      	bge.n	800ce66 <_dtoa_r+0x926>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	4651      	mov	r1, sl
 800cd90:	220a      	movs	r2, #10
 800cd92:	4620      	mov	r0, r4
 800cd94:	f000 fdde 	bl	800d954 <__multadd>
 800cd98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd9e:	4682      	mov	sl, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 81b0 	beq.w	800d106 <_dtoa_r+0xbc6>
 800cda6:	2300      	movs	r3, #0
 800cda8:	4639      	mov	r1, r7
 800cdaa:	220a      	movs	r2, #10
 800cdac:	4620      	mov	r0, r4
 800cdae:	f000 fdd1 	bl	800d954 <__multadd>
 800cdb2:	9b01      	ldr	r3, [sp, #4]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	4607      	mov	r7, r0
 800cdb8:	f300 8096 	bgt.w	800cee8 <_dtoa_r+0x9a8>
 800cdbc:	9b07      	ldr	r3, [sp, #28]
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	dc59      	bgt.n	800ce76 <_dtoa_r+0x936>
 800cdc2:	e091      	b.n	800cee8 <_dtoa_r+0x9a8>
 800cdc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cdca:	e758      	b.n	800cc7e <_dtoa_r+0x73e>
 800cdcc:	9b04      	ldr	r3, [sp, #16]
 800cdce:	1e5e      	subs	r6, r3, #1
 800cdd0:	9b08      	ldr	r3, [sp, #32]
 800cdd2:	42b3      	cmp	r3, r6
 800cdd4:	bfbf      	itttt	lt
 800cdd6:	9b08      	ldrlt	r3, [sp, #32]
 800cdd8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cdda:	9608      	strlt	r6, [sp, #32]
 800cddc:	1af3      	sublt	r3, r6, r3
 800cdde:	bfb4      	ite	lt
 800cde0:	18d2      	addlt	r2, r2, r3
 800cde2:	1b9e      	subge	r6, r3, r6
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	bfbc      	itt	lt
 800cde8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cdea:	2600      	movlt	r6, #0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	bfb7      	itett	lt
 800cdf0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cdf4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cdf8:	1a9d      	sublt	r5, r3, r2
 800cdfa:	2300      	movlt	r3, #0
 800cdfc:	e741      	b.n	800cc82 <_dtoa_r+0x742>
 800cdfe:	9e08      	ldr	r6, [sp, #32]
 800ce00:	9d05      	ldr	r5, [sp, #20]
 800ce02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce04:	e748      	b.n	800cc98 <_dtoa_r+0x758>
 800ce06:	9a08      	ldr	r2, [sp, #32]
 800ce08:	e770      	b.n	800ccec <_dtoa_r+0x7ac>
 800ce0a:	9b07      	ldr	r3, [sp, #28]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	dc19      	bgt.n	800ce44 <_dtoa_r+0x904>
 800ce10:	9b02      	ldr	r3, [sp, #8]
 800ce12:	b9bb      	cbnz	r3, 800ce44 <_dtoa_r+0x904>
 800ce14:	9b03      	ldr	r3, [sp, #12]
 800ce16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce1a:	b99b      	cbnz	r3, 800ce44 <_dtoa_r+0x904>
 800ce1c:	9b03      	ldr	r3, [sp, #12]
 800ce1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce22:	0d1b      	lsrs	r3, r3, #20
 800ce24:	051b      	lsls	r3, r3, #20
 800ce26:	b183      	cbz	r3, 800ce4a <_dtoa_r+0x90a>
 800ce28:	9b05      	ldr	r3, [sp, #20]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	9305      	str	r3, [sp, #20]
 800ce2e:	9b06      	ldr	r3, [sp, #24]
 800ce30:	3301      	adds	r3, #1
 800ce32:	9306      	str	r3, [sp, #24]
 800ce34:	f04f 0801 	mov.w	r8, #1
 800ce38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f47f af6f 	bne.w	800cd1e <_dtoa_r+0x7de>
 800ce40:	2001      	movs	r0, #1
 800ce42:	e774      	b.n	800cd2e <_dtoa_r+0x7ee>
 800ce44:	f04f 0800 	mov.w	r8, #0
 800ce48:	e7f6      	b.n	800ce38 <_dtoa_r+0x8f8>
 800ce4a:	4698      	mov	r8, r3
 800ce4c:	e7f4      	b.n	800ce38 <_dtoa_r+0x8f8>
 800ce4e:	d082      	beq.n	800cd56 <_dtoa_r+0x816>
 800ce50:	9a05      	ldr	r2, [sp, #20]
 800ce52:	331c      	adds	r3, #28
 800ce54:	441a      	add	r2, r3
 800ce56:	9205      	str	r2, [sp, #20]
 800ce58:	9a06      	ldr	r2, [sp, #24]
 800ce5a:	441a      	add	r2, r3
 800ce5c:	441d      	add	r5, r3
 800ce5e:	9206      	str	r2, [sp, #24]
 800ce60:	e779      	b.n	800cd56 <_dtoa_r+0x816>
 800ce62:	4603      	mov	r3, r0
 800ce64:	e7f4      	b.n	800ce50 <_dtoa_r+0x910>
 800ce66:	9b04      	ldr	r3, [sp, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	dc37      	bgt.n	800cedc <_dtoa_r+0x99c>
 800ce6c:	9b07      	ldr	r3, [sp, #28]
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	dd34      	ble.n	800cedc <_dtoa_r+0x99c>
 800ce72:	9b04      	ldr	r3, [sp, #16]
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	b963      	cbnz	r3, 800ce94 <_dtoa_r+0x954>
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	2205      	movs	r2, #5
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f000 fd68 	bl	800d954 <__multadd>
 800ce84:	4601      	mov	r1, r0
 800ce86:	4606      	mov	r6, r0
 800ce88:	4650      	mov	r0, sl
 800ce8a:	f000 ffc7 	bl	800de1c <__mcmp>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	f73f adbb 	bgt.w	800ca0a <_dtoa_r+0x4ca>
 800ce94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce96:	9d00      	ldr	r5, [sp, #0]
 800ce98:	ea6f 0b03 	mvn.w	fp, r3
 800ce9c:	f04f 0800 	mov.w	r8, #0
 800cea0:	4631      	mov	r1, r6
 800cea2:	4620      	mov	r0, r4
 800cea4:	f000 fd34 	bl	800d910 <_Bfree>
 800cea8:	2f00      	cmp	r7, #0
 800ceaa:	f43f aeab 	beq.w	800cc04 <_dtoa_r+0x6c4>
 800ceae:	f1b8 0f00 	cmp.w	r8, #0
 800ceb2:	d005      	beq.n	800cec0 <_dtoa_r+0x980>
 800ceb4:	45b8      	cmp	r8, r7
 800ceb6:	d003      	beq.n	800cec0 <_dtoa_r+0x980>
 800ceb8:	4641      	mov	r1, r8
 800ceba:	4620      	mov	r0, r4
 800cebc:	f000 fd28 	bl	800d910 <_Bfree>
 800cec0:	4639      	mov	r1, r7
 800cec2:	4620      	mov	r0, r4
 800cec4:	f000 fd24 	bl	800d910 <_Bfree>
 800cec8:	e69c      	b.n	800cc04 <_dtoa_r+0x6c4>
 800ceca:	2600      	movs	r6, #0
 800cecc:	4637      	mov	r7, r6
 800cece:	e7e1      	b.n	800ce94 <_dtoa_r+0x954>
 800ced0:	46bb      	mov	fp, r7
 800ced2:	4637      	mov	r7, r6
 800ced4:	e599      	b.n	800ca0a <_dtoa_r+0x4ca>
 800ced6:	bf00      	nop
 800ced8:	40240000 	.word	0x40240000
 800cedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 80c8 	beq.w	800d074 <_dtoa_r+0xb34>
 800cee4:	9b04      	ldr	r3, [sp, #16]
 800cee6:	9301      	str	r3, [sp, #4]
 800cee8:	2d00      	cmp	r5, #0
 800ceea:	dd05      	ble.n	800cef8 <_dtoa_r+0x9b8>
 800ceec:	4639      	mov	r1, r7
 800ceee:	462a      	mov	r2, r5
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 ff27 	bl	800dd44 <__lshift>
 800cef6:	4607      	mov	r7, r0
 800cef8:	f1b8 0f00 	cmp.w	r8, #0
 800cefc:	d05b      	beq.n	800cfb6 <_dtoa_r+0xa76>
 800cefe:	6879      	ldr	r1, [r7, #4]
 800cf00:	4620      	mov	r0, r4
 800cf02:	f000 fcc5 	bl	800d890 <_Balloc>
 800cf06:	4605      	mov	r5, r0
 800cf08:	b928      	cbnz	r0, 800cf16 <_dtoa_r+0x9d6>
 800cf0a:	4b83      	ldr	r3, [pc, #524]	; (800d118 <_dtoa_r+0xbd8>)
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cf12:	f7ff bb2e 	b.w	800c572 <_dtoa_r+0x32>
 800cf16:	693a      	ldr	r2, [r7, #16]
 800cf18:	3202      	adds	r2, #2
 800cf1a:	0092      	lsls	r2, r2, #2
 800cf1c:	f107 010c 	add.w	r1, r7, #12
 800cf20:	300c      	adds	r0, #12
 800cf22:	f7ff fa4a 	bl	800c3ba <memcpy>
 800cf26:	2201      	movs	r2, #1
 800cf28:	4629      	mov	r1, r5
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 ff0a 	bl	800dd44 <__lshift>
 800cf30:	9b00      	ldr	r3, [sp, #0]
 800cf32:	3301      	adds	r3, #1
 800cf34:	9304      	str	r3, [sp, #16]
 800cf36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	9308      	str	r3, [sp, #32]
 800cf3e:	9b02      	ldr	r3, [sp, #8]
 800cf40:	f003 0301 	and.w	r3, r3, #1
 800cf44:	46b8      	mov	r8, r7
 800cf46:	9306      	str	r3, [sp, #24]
 800cf48:	4607      	mov	r7, r0
 800cf4a:	9b04      	ldr	r3, [sp, #16]
 800cf4c:	4631      	mov	r1, r6
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	4650      	mov	r0, sl
 800cf52:	9301      	str	r3, [sp, #4]
 800cf54:	f7ff fa6c 	bl	800c430 <quorem>
 800cf58:	4641      	mov	r1, r8
 800cf5a:	9002      	str	r0, [sp, #8]
 800cf5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cf60:	4650      	mov	r0, sl
 800cf62:	f000 ff5b 	bl	800de1c <__mcmp>
 800cf66:	463a      	mov	r2, r7
 800cf68:	9005      	str	r0, [sp, #20]
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f000 ff71 	bl	800de54 <__mdiff>
 800cf72:	68c2      	ldr	r2, [r0, #12]
 800cf74:	4605      	mov	r5, r0
 800cf76:	bb02      	cbnz	r2, 800cfba <_dtoa_r+0xa7a>
 800cf78:	4601      	mov	r1, r0
 800cf7a:	4650      	mov	r0, sl
 800cf7c:	f000 ff4e 	bl	800de1c <__mcmp>
 800cf80:	4602      	mov	r2, r0
 800cf82:	4629      	mov	r1, r5
 800cf84:	4620      	mov	r0, r4
 800cf86:	9209      	str	r2, [sp, #36]	; 0x24
 800cf88:	f000 fcc2 	bl	800d910 <_Bfree>
 800cf8c:	9b07      	ldr	r3, [sp, #28]
 800cf8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf90:	9d04      	ldr	r5, [sp, #16]
 800cf92:	ea43 0102 	orr.w	r1, r3, r2
 800cf96:	9b06      	ldr	r3, [sp, #24]
 800cf98:	4319      	orrs	r1, r3
 800cf9a:	d110      	bne.n	800cfbe <_dtoa_r+0xa7e>
 800cf9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cfa0:	d029      	beq.n	800cff6 <_dtoa_r+0xab6>
 800cfa2:	9b05      	ldr	r3, [sp, #20]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	dd02      	ble.n	800cfae <_dtoa_r+0xa6e>
 800cfa8:	9b02      	ldr	r3, [sp, #8]
 800cfaa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cfae:	9b01      	ldr	r3, [sp, #4]
 800cfb0:	f883 9000 	strb.w	r9, [r3]
 800cfb4:	e774      	b.n	800cea0 <_dtoa_r+0x960>
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	e7ba      	b.n	800cf30 <_dtoa_r+0x9f0>
 800cfba:	2201      	movs	r2, #1
 800cfbc:	e7e1      	b.n	800cf82 <_dtoa_r+0xa42>
 800cfbe:	9b05      	ldr	r3, [sp, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	db04      	blt.n	800cfce <_dtoa_r+0xa8e>
 800cfc4:	9907      	ldr	r1, [sp, #28]
 800cfc6:	430b      	orrs	r3, r1
 800cfc8:	9906      	ldr	r1, [sp, #24]
 800cfca:	430b      	orrs	r3, r1
 800cfcc:	d120      	bne.n	800d010 <_dtoa_r+0xad0>
 800cfce:	2a00      	cmp	r2, #0
 800cfd0:	dded      	ble.n	800cfae <_dtoa_r+0xa6e>
 800cfd2:	4651      	mov	r1, sl
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f000 feb4 	bl	800dd44 <__lshift>
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4682      	mov	sl, r0
 800cfe0:	f000 ff1c 	bl	800de1c <__mcmp>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	dc03      	bgt.n	800cff0 <_dtoa_r+0xab0>
 800cfe8:	d1e1      	bne.n	800cfae <_dtoa_r+0xa6e>
 800cfea:	f019 0f01 	tst.w	r9, #1
 800cfee:	d0de      	beq.n	800cfae <_dtoa_r+0xa6e>
 800cff0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cff4:	d1d8      	bne.n	800cfa8 <_dtoa_r+0xa68>
 800cff6:	9a01      	ldr	r2, [sp, #4]
 800cff8:	2339      	movs	r3, #57	; 0x39
 800cffa:	7013      	strb	r3, [r2, #0]
 800cffc:	462b      	mov	r3, r5
 800cffe:	461d      	mov	r5, r3
 800d000:	3b01      	subs	r3, #1
 800d002:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d006:	2a39      	cmp	r2, #57	; 0x39
 800d008:	d06c      	beq.n	800d0e4 <_dtoa_r+0xba4>
 800d00a:	3201      	adds	r2, #1
 800d00c:	701a      	strb	r2, [r3, #0]
 800d00e:	e747      	b.n	800cea0 <_dtoa_r+0x960>
 800d010:	2a00      	cmp	r2, #0
 800d012:	dd07      	ble.n	800d024 <_dtoa_r+0xae4>
 800d014:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d018:	d0ed      	beq.n	800cff6 <_dtoa_r+0xab6>
 800d01a:	9a01      	ldr	r2, [sp, #4]
 800d01c:	f109 0301 	add.w	r3, r9, #1
 800d020:	7013      	strb	r3, [r2, #0]
 800d022:	e73d      	b.n	800cea0 <_dtoa_r+0x960>
 800d024:	9b04      	ldr	r3, [sp, #16]
 800d026:	9a08      	ldr	r2, [sp, #32]
 800d028:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d043      	beq.n	800d0b8 <_dtoa_r+0xb78>
 800d030:	4651      	mov	r1, sl
 800d032:	2300      	movs	r3, #0
 800d034:	220a      	movs	r2, #10
 800d036:	4620      	mov	r0, r4
 800d038:	f000 fc8c 	bl	800d954 <__multadd>
 800d03c:	45b8      	cmp	r8, r7
 800d03e:	4682      	mov	sl, r0
 800d040:	f04f 0300 	mov.w	r3, #0
 800d044:	f04f 020a 	mov.w	r2, #10
 800d048:	4641      	mov	r1, r8
 800d04a:	4620      	mov	r0, r4
 800d04c:	d107      	bne.n	800d05e <_dtoa_r+0xb1e>
 800d04e:	f000 fc81 	bl	800d954 <__multadd>
 800d052:	4680      	mov	r8, r0
 800d054:	4607      	mov	r7, r0
 800d056:	9b04      	ldr	r3, [sp, #16]
 800d058:	3301      	adds	r3, #1
 800d05a:	9304      	str	r3, [sp, #16]
 800d05c:	e775      	b.n	800cf4a <_dtoa_r+0xa0a>
 800d05e:	f000 fc79 	bl	800d954 <__multadd>
 800d062:	4639      	mov	r1, r7
 800d064:	4680      	mov	r8, r0
 800d066:	2300      	movs	r3, #0
 800d068:	220a      	movs	r2, #10
 800d06a:	4620      	mov	r0, r4
 800d06c:	f000 fc72 	bl	800d954 <__multadd>
 800d070:	4607      	mov	r7, r0
 800d072:	e7f0      	b.n	800d056 <_dtoa_r+0xb16>
 800d074:	9b04      	ldr	r3, [sp, #16]
 800d076:	9301      	str	r3, [sp, #4]
 800d078:	9d00      	ldr	r5, [sp, #0]
 800d07a:	4631      	mov	r1, r6
 800d07c:	4650      	mov	r0, sl
 800d07e:	f7ff f9d7 	bl	800c430 <quorem>
 800d082:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d086:	9b00      	ldr	r3, [sp, #0]
 800d088:	f805 9b01 	strb.w	r9, [r5], #1
 800d08c:	1aea      	subs	r2, r5, r3
 800d08e:	9b01      	ldr	r3, [sp, #4]
 800d090:	4293      	cmp	r3, r2
 800d092:	dd07      	ble.n	800d0a4 <_dtoa_r+0xb64>
 800d094:	4651      	mov	r1, sl
 800d096:	2300      	movs	r3, #0
 800d098:	220a      	movs	r2, #10
 800d09a:	4620      	mov	r0, r4
 800d09c:	f000 fc5a 	bl	800d954 <__multadd>
 800d0a0:	4682      	mov	sl, r0
 800d0a2:	e7ea      	b.n	800d07a <_dtoa_r+0xb3a>
 800d0a4:	9b01      	ldr	r3, [sp, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	bfc8      	it	gt
 800d0aa:	461d      	movgt	r5, r3
 800d0ac:	9b00      	ldr	r3, [sp, #0]
 800d0ae:	bfd8      	it	le
 800d0b0:	2501      	movle	r5, #1
 800d0b2:	441d      	add	r5, r3
 800d0b4:	f04f 0800 	mov.w	r8, #0
 800d0b8:	4651      	mov	r1, sl
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f000 fe41 	bl	800dd44 <__lshift>
 800d0c2:	4631      	mov	r1, r6
 800d0c4:	4682      	mov	sl, r0
 800d0c6:	f000 fea9 	bl	800de1c <__mcmp>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	dc96      	bgt.n	800cffc <_dtoa_r+0xabc>
 800d0ce:	d102      	bne.n	800d0d6 <_dtoa_r+0xb96>
 800d0d0:	f019 0f01 	tst.w	r9, #1
 800d0d4:	d192      	bne.n	800cffc <_dtoa_r+0xabc>
 800d0d6:	462b      	mov	r3, r5
 800d0d8:	461d      	mov	r5, r3
 800d0da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0de:	2a30      	cmp	r2, #48	; 0x30
 800d0e0:	d0fa      	beq.n	800d0d8 <_dtoa_r+0xb98>
 800d0e2:	e6dd      	b.n	800cea0 <_dtoa_r+0x960>
 800d0e4:	9a00      	ldr	r2, [sp, #0]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d189      	bne.n	800cffe <_dtoa_r+0xabe>
 800d0ea:	f10b 0b01 	add.w	fp, fp, #1
 800d0ee:	2331      	movs	r3, #49	; 0x31
 800d0f0:	e796      	b.n	800d020 <_dtoa_r+0xae0>
 800d0f2:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <_dtoa_r+0xbdc>)
 800d0f4:	f7ff ba99 	b.w	800c62a <_dtoa_r+0xea>
 800d0f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f47f aa6d 	bne.w	800c5da <_dtoa_r+0x9a>
 800d100:	4b07      	ldr	r3, [pc, #28]	; (800d120 <_dtoa_r+0xbe0>)
 800d102:	f7ff ba92 	b.w	800c62a <_dtoa_r+0xea>
 800d106:	9b01      	ldr	r3, [sp, #4]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	dcb5      	bgt.n	800d078 <_dtoa_r+0xb38>
 800d10c:	9b07      	ldr	r3, [sp, #28]
 800d10e:	2b02      	cmp	r3, #2
 800d110:	f73f aeb1 	bgt.w	800ce76 <_dtoa_r+0x936>
 800d114:	e7b0      	b.n	800d078 <_dtoa_r+0xb38>
 800d116:	bf00      	nop
 800d118:	0801203c 	.word	0x0801203c
 800d11c:	08011ef9 	.word	0x08011ef9
 800d120:	08011fd7 	.word	0x08011fd7

0800d124 <_free_r>:
 800d124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d126:	2900      	cmp	r1, #0
 800d128:	d044      	beq.n	800d1b4 <_free_r+0x90>
 800d12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d12e:	9001      	str	r0, [sp, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	f1a1 0404 	sub.w	r4, r1, #4
 800d136:	bfb8      	it	lt
 800d138:	18e4      	addlt	r4, r4, r3
 800d13a:	f7fd f93f 	bl	800a3bc <__malloc_lock>
 800d13e:	4a1e      	ldr	r2, [pc, #120]	; (800d1b8 <_free_r+0x94>)
 800d140:	9801      	ldr	r0, [sp, #4]
 800d142:	6813      	ldr	r3, [r2, #0]
 800d144:	b933      	cbnz	r3, 800d154 <_free_r+0x30>
 800d146:	6063      	str	r3, [r4, #4]
 800d148:	6014      	str	r4, [r2, #0]
 800d14a:	b003      	add	sp, #12
 800d14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d150:	f7fd b93a 	b.w	800a3c8 <__malloc_unlock>
 800d154:	42a3      	cmp	r3, r4
 800d156:	d908      	bls.n	800d16a <_free_r+0x46>
 800d158:	6825      	ldr	r5, [r4, #0]
 800d15a:	1961      	adds	r1, r4, r5
 800d15c:	428b      	cmp	r3, r1
 800d15e:	bf01      	itttt	eq
 800d160:	6819      	ldreq	r1, [r3, #0]
 800d162:	685b      	ldreq	r3, [r3, #4]
 800d164:	1949      	addeq	r1, r1, r5
 800d166:	6021      	streq	r1, [r4, #0]
 800d168:	e7ed      	b.n	800d146 <_free_r+0x22>
 800d16a:	461a      	mov	r2, r3
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	b10b      	cbz	r3, 800d174 <_free_r+0x50>
 800d170:	42a3      	cmp	r3, r4
 800d172:	d9fa      	bls.n	800d16a <_free_r+0x46>
 800d174:	6811      	ldr	r1, [r2, #0]
 800d176:	1855      	adds	r5, r2, r1
 800d178:	42a5      	cmp	r5, r4
 800d17a:	d10b      	bne.n	800d194 <_free_r+0x70>
 800d17c:	6824      	ldr	r4, [r4, #0]
 800d17e:	4421      	add	r1, r4
 800d180:	1854      	adds	r4, r2, r1
 800d182:	42a3      	cmp	r3, r4
 800d184:	6011      	str	r1, [r2, #0]
 800d186:	d1e0      	bne.n	800d14a <_free_r+0x26>
 800d188:	681c      	ldr	r4, [r3, #0]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	6053      	str	r3, [r2, #4]
 800d18e:	440c      	add	r4, r1
 800d190:	6014      	str	r4, [r2, #0]
 800d192:	e7da      	b.n	800d14a <_free_r+0x26>
 800d194:	d902      	bls.n	800d19c <_free_r+0x78>
 800d196:	230c      	movs	r3, #12
 800d198:	6003      	str	r3, [r0, #0]
 800d19a:	e7d6      	b.n	800d14a <_free_r+0x26>
 800d19c:	6825      	ldr	r5, [r4, #0]
 800d19e:	1961      	adds	r1, r4, r5
 800d1a0:	428b      	cmp	r3, r1
 800d1a2:	bf04      	itt	eq
 800d1a4:	6819      	ldreq	r1, [r3, #0]
 800d1a6:	685b      	ldreq	r3, [r3, #4]
 800d1a8:	6063      	str	r3, [r4, #4]
 800d1aa:	bf04      	itt	eq
 800d1ac:	1949      	addeq	r1, r1, r5
 800d1ae:	6021      	streq	r1, [r4, #0]
 800d1b0:	6054      	str	r4, [r2, #4]
 800d1b2:	e7ca      	b.n	800d14a <_free_r+0x26>
 800d1b4:	b003      	add	sp, #12
 800d1b6:	bd30      	pop	{r4, r5, pc}
 800d1b8:	20000bd8 	.word	0x20000bd8

0800d1bc <rshift>:
 800d1bc:	6903      	ldr	r3, [r0, #16]
 800d1be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d1c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d1ca:	f100 0414 	add.w	r4, r0, #20
 800d1ce:	dd45      	ble.n	800d25c <rshift+0xa0>
 800d1d0:	f011 011f 	ands.w	r1, r1, #31
 800d1d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d1d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d1dc:	d10c      	bne.n	800d1f8 <rshift+0x3c>
 800d1de:	f100 0710 	add.w	r7, r0, #16
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	42b1      	cmp	r1, r6
 800d1e6:	d334      	bcc.n	800d252 <rshift+0x96>
 800d1e8:	1a9b      	subs	r3, r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	1eea      	subs	r2, r5, #3
 800d1ee:	4296      	cmp	r6, r2
 800d1f0:	bf38      	it	cc
 800d1f2:	2300      	movcc	r3, #0
 800d1f4:	4423      	add	r3, r4
 800d1f6:	e015      	b.n	800d224 <rshift+0x68>
 800d1f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d1fc:	f1c1 0820 	rsb	r8, r1, #32
 800d200:	40cf      	lsrs	r7, r1
 800d202:	f105 0e04 	add.w	lr, r5, #4
 800d206:	46a1      	mov	r9, r4
 800d208:	4576      	cmp	r6, lr
 800d20a:	46f4      	mov	ip, lr
 800d20c:	d815      	bhi.n	800d23a <rshift+0x7e>
 800d20e:	1a9a      	subs	r2, r3, r2
 800d210:	0092      	lsls	r2, r2, #2
 800d212:	3a04      	subs	r2, #4
 800d214:	3501      	adds	r5, #1
 800d216:	42ae      	cmp	r6, r5
 800d218:	bf38      	it	cc
 800d21a:	2200      	movcc	r2, #0
 800d21c:	18a3      	adds	r3, r4, r2
 800d21e:	50a7      	str	r7, [r4, r2]
 800d220:	b107      	cbz	r7, 800d224 <rshift+0x68>
 800d222:	3304      	adds	r3, #4
 800d224:	1b1a      	subs	r2, r3, r4
 800d226:	42a3      	cmp	r3, r4
 800d228:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d22c:	bf08      	it	eq
 800d22e:	2300      	moveq	r3, #0
 800d230:	6102      	str	r2, [r0, #16]
 800d232:	bf08      	it	eq
 800d234:	6143      	streq	r3, [r0, #20]
 800d236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d23a:	f8dc c000 	ldr.w	ip, [ip]
 800d23e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d242:	ea4c 0707 	orr.w	r7, ip, r7
 800d246:	f849 7b04 	str.w	r7, [r9], #4
 800d24a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d24e:	40cf      	lsrs	r7, r1
 800d250:	e7da      	b.n	800d208 <rshift+0x4c>
 800d252:	f851 cb04 	ldr.w	ip, [r1], #4
 800d256:	f847 cf04 	str.w	ip, [r7, #4]!
 800d25a:	e7c3      	b.n	800d1e4 <rshift+0x28>
 800d25c:	4623      	mov	r3, r4
 800d25e:	e7e1      	b.n	800d224 <rshift+0x68>

0800d260 <__hexdig_fun>:
 800d260:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d264:	2b09      	cmp	r3, #9
 800d266:	d802      	bhi.n	800d26e <__hexdig_fun+0xe>
 800d268:	3820      	subs	r0, #32
 800d26a:	b2c0      	uxtb	r0, r0
 800d26c:	4770      	bx	lr
 800d26e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d272:	2b05      	cmp	r3, #5
 800d274:	d801      	bhi.n	800d27a <__hexdig_fun+0x1a>
 800d276:	3847      	subs	r0, #71	; 0x47
 800d278:	e7f7      	b.n	800d26a <__hexdig_fun+0xa>
 800d27a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d27e:	2b05      	cmp	r3, #5
 800d280:	d801      	bhi.n	800d286 <__hexdig_fun+0x26>
 800d282:	3827      	subs	r0, #39	; 0x27
 800d284:	e7f1      	b.n	800d26a <__hexdig_fun+0xa>
 800d286:	2000      	movs	r0, #0
 800d288:	4770      	bx	lr
	...

0800d28c <__gethex>:
 800d28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d290:	4617      	mov	r7, r2
 800d292:	680a      	ldr	r2, [r1, #0]
 800d294:	b085      	sub	sp, #20
 800d296:	f102 0b02 	add.w	fp, r2, #2
 800d29a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d29e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d2a2:	4681      	mov	r9, r0
 800d2a4:	468a      	mov	sl, r1
 800d2a6:	9302      	str	r3, [sp, #8]
 800d2a8:	32fe      	adds	r2, #254	; 0xfe
 800d2aa:	eb02 030b 	add.w	r3, r2, fp
 800d2ae:	46d8      	mov	r8, fp
 800d2b0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d2b4:	9301      	str	r3, [sp, #4]
 800d2b6:	2830      	cmp	r0, #48	; 0x30
 800d2b8:	d0f7      	beq.n	800d2aa <__gethex+0x1e>
 800d2ba:	f7ff ffd1 	bl	800d260 <__hexdig_fun>
 800d2be:	4604      	mov	r4, r0
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	d138      	bne.n	800d336 <__gethex+0xaa>
 800d2c4:	49a7      	ldr	r1, [pc, #668]	; (800d564 <__gethex+0x2d8>)
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	4640      	mov	r0, r8
 800d2ca:	f7fe ff62 	bl	800c192 <strncmp>
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d169      	bne.n	800d3a8 <__gethex+0x11c>
 800d2d4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d2d8:	465d      	mov	r5, fp
 800d2da:	f7ff ffc1 	bl	800d260 <__hexdig_fun>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d064      	beq.n	800d3ac <__gethex+0x120>
 800d2e2:	465a      	mov	r2, fp
 800d2e4:	7810      	ldrb	r0, [r2, #0]
 800d2e6:	2830      	cmp	r0, #48	; 0x30
 800d2e8:	4690      	mov	r8, r2
 800d2ea:	f102 0201 	add.w	r2, r2, #1
 800d2ee:	d0f9      	beq.n	800d2e4 <__gethex+0x58>
 800d2f0:	f7ff ffb6 	bl	800d260 <__hexdig_fun>
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	fab0 f480 	clz	r4, r0
 800d2fa:	0964      	lsrs	r4, r4, #5
 800d2fc:	465e      	mov	r6, fp
 800d2fe:	9301      	str	r3, [sp, #4]
 800d300:	4642      	mov	r2, r8
 800d302:	4615      	mov	r5, r2
 800d304:	3201      	adds	r2, #1
 800d306:	7828      	ldrb	r0, [r5, #0]
 800d308:	f7ff ffaa 	bl	800d260 <__hexdig_fun>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d1f8      	bne.n	800d302 <__gethex+0x76>
 800d310:	4994      	ldr	r1, [pc, #592]	; (800d564 <__gethex+0x2d8>)
 800d312:	2201      	movs	r2, #1
 800d314:	4628      	mov	r0, r5
 800d316:	f7fe ff3c 	bl	800c192 <strncmp>
 800d31a:	b978      	cbnz	r0, 800d33c <__gethex+0xb0>
 800d31c:	b946      	cbnz	r6, 800d330 <__gethex+0xa4>
 800d31e:	1c6e      	adds	r6, r5, #1
 800d320:	4632      	mov	r2, r6
 800d322:	4615      	mov	r5, r2
 800d324:	3201      	adds	r2, #1
 800d326:	7828      	ldrb	r0, [r5, #0]
 800d328:	f7ff ff9a 	bl	800d260 <__hexdig_fun>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d1f8      	bne.n	800d322 <__gethex+0x96>
 800d330:	1b73      	subs	r3, r6, r5
 800d332:	009e      	lsls	r6, r3, #2
 800d334:	e004      	b.n	800d340 <__gethex+0xb4>
 800d336:	2400      	movs	r4, #0
 800d338:	4626      	mov	r6, r4
 800d33a:	e7e1      	b.n	800d300 <__gethex+0x74>
 800d33c:	2e00      	cmp	r6, #0
 800d33e:	d1f7      	bne.n	800d330 <__gethex+0xa4>
 800d340:	782b      	ldrb	r3, [r5, #0]
 800d342:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d346:	2b50      	cmp	r3, #80	; 0x50
 800d348:	d13d      	bne.n	800d3c6 <__gethex+0x13a>
 800d34a:	786b      	ldrb	r3, [r5, #1]
 800d34c:	2b2b      	cmp	r3, #43	; 0x2b
 800d34e:	d02f      	beq.n	800d3b0 <__gethex+0x124>
 800d350:	2b2d      	cmp	r3, #45	; 0x2d
 800d352:	d031      	beq.n	800d3b8 <__gethex+0x12c>
 800d354:	1c69      	adds	r1, r5, #1
 800d356:	f04f 0b00 	mov.w	fp, #0
 800d35a:	7808      	ldrb	r0, [r1, #0]
 800d35c:	f7ff ff80 	bl	800d260 <__hexdig_fun>
 800d360:	1e42      	subs	r2, r0, #1
 800d362:	b2d2      	uxtb	r2, r2
 800d364:	2a18      	cmp	r2, #24
 800d366:	d82e      	bhi.n	800d3c6 <__gethex+0x13a>
 800d368:	f1a0 0210 	sub.w	r2, r0, #16
 800d36c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d370:	f7ff ff76 	bl	800d260 <__hexdig_fun>
 800d374:	f100 3cff 	add.w	ip, r0, #4294967295
 800d378:	fa5f fc8c 	uxtb.w	ip, ip
 800d37c:	f1bc 0f18 	cmp.w	ip, #24
 800d380:	d91d      	bls.n	800d3be <__gethex+0x132>
 800d382:	f1bb 0f00 	cmp.w	fp, #0
 800d386:	d000      	beq.n	800d38a <__gethex+0xfe>
 800d388:	4252      	negs	r2, r2
 800d38a:	4416      	add	r6, r2
 800d38c:	f8ca 1000 	str.w	r1, [sl]
 800d390:	b1dc      	cbz	r4, 800d3ca <__gethex+0x13e>
 800d392:	9b01      	ldr	r3, [sp, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	bf14      	ite	ne
 800d398:	f04f 0800 	movne.w	r8, #0
 800d39c:	f04f 0806 	moveq.w	r8, #6
 800d3a0:	4640      	mov	r0, r8
 800d3a2:	b005      	add	sp, #20
 800d3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a8:	4645      	mov	r5, r8
 800d3aa:	4626      	mov	r6, r4
 800d3ac:	2401      	movs	r4, #1
 800d3ae:	e7c7      	b.n	800d340 <__gethex+0xb4>
 800d3b0:	f04f 0b00 	mov.w	fp, #0
 800d3b4:	1ca9      	adds	r1, r5, #2
 800d3b6:	e7d0      	b.n	800d35a <__gethex+0xce>
 800d3b8:	f04f 0b01 	mov.w	fp, #1
 800d3bc:	e7fa      	b.n	800d3b4 <__gethex+0x128>
 800d3be:	230a      	movs	r3, #10
 800d3c0:	fb03 0002 	mla	r0, r3, r2, r0
 800d3c4:	e7d0      	b.n	800d368 <__gethex+0xdc>
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	e7e0      	b.n	800d38c <__gethex+0x100>
 800d3ca:	eba5 0308 	sub.w	r3, r5, r8
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	4621      	mov	r1, r4
 800d3d2:	2b07      	cmp	r3, #7
 800d3d4:	dc0a      	bgt.n	800d3ec <__gethex+0x160>
 800d3d6:	4648      	mov	r0, r9
 800d3d8:	f000 fa5a 	bl	800d890 <_Balloc>
 800d3dc:	4604      	mov	r4, r0
 800d3de:	b940      	cbnz	r0, 800d3f2 <__gethex+0x166>
 800d3e0:	4b61      	ldr	r3, [pc, #388]	; (800d568 <__gethex+0x2dc>)
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	21e4      	movs	r1, #228	; 0xe4
 800d3e6:	4861      	ldr	r0, [pc, #388]	; (800d56c <__gethex+0x2e0>)
 800d3e8:	f7ff f804 	bl	800c3f4 <__assert_func>
 800d3ec:	3101      	adds	r1, #1
 800d3ee:	105b      	asrs	r3, r3, #1
 800d3f0:	e7ef      	b.n	800d3d2 <__gethex+0x146>
 800d3f2:	f100 0a14 	add.w	sl, r0, #20
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	495a      	ldr	r1, [pc, #360]	; (800d564 <__gethex+0x2d8>)
 800d3fa:	f8cd a004 	str.w	sl, [sp, #4]
 800d3fe:	469b      	mov	fp, r3
 800d400:	45a8      	cmp	r8, r5
 800d402:	d342      	bcc.n	800d48a <__gethex+0x1fe>
 800d404:	9801      	ldr	r0, [sp, #4]
 800d406:	f840 bb04 	str.w	fp, [r0], #4
 800d40a:	eba0 000a 	sub.w	r0, r0, sl
 800d40e:	1080      	asrs	r0, r0, #2
 800d410:	6120      	str	r0, [r4, #16]
 800d412:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d416:	4658      	mov	r0, fp
 800d418:	f000 fb2c 	bl	800da74 <__hi0bits>
 800d41c:	683d      	ldr	r5, [r7, #0]
 800d41e:	eba8 0000 	sub.w	r0, r8, r0
 800d422:	42a8      	cmp	r0, r5
 800d424:	dd59      	ble.n	800d4da <__gethex+0x24e>
 800d426:	eba0 0805 	sub.w	r8, r0, r5
 800d42a:	4641      	mov	r1, r8
 800d42c:	4620      	mov	r0, r4
 800d42e:	f000 febb 	bl	800e1a8 <__any_on>
 800d432:	4683      	mov	fp, r0
 800d434:	b1b8      	cbz	r0, 800d466 <__gethex+0x1da>
 800d436:	f108 33ff 	add.w	r3, r8, #4294967295
 800d43a:	1159      	asrs	r1, r3, #5
 800d43c:	f003 021f 	and.w	r2, r3, #31
 800d440:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d444:	f04f 0b01 	mov.w	fp, #1
 800d448:	fa0b f202 	lsl.w	r2, fp, r2
 800d44c:	420a      	tst	r2, r1
 800d44e:	d00a      	beq.n	800d466 <__gethex+0x1da>
 800d450:	455b      	cmp	r3, fp
 800d452:	dd06      	ble.n	800d462 <__gethex+0x1d6>
 800d454:	f1a8 0102 	sub.w	r1, r8, #2
 800d458:	4620      	mov	r0, r4
 800d45a:	f000 fea5 	bl	800e1a8 <__any_on>
 800d45e:	2800      	cmp	r0, #0
 800d460:	d138      	bne.n	800d4d4 <__gethex+0x248>
 800d462:	f04f 0b02 	mov.w	fp, #2
 800d466:	4641      	mov	r1, r8
 800d468:	4620      	mov	r0, r4
 800d46a:	f7ff fea7 	bl	800d1bc <rshift>
 800d46e:	4446      	add	r6, r8
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	42b3      	cmp	r3, r6
 800d474:	da41      	bge.n	800d4fa <__gethex+0x26e>
 800d476:	4621      	mov	r1, r4
 800d478:	4648      	mov	r0, r9
 800d47a:	f000 fa49 	bl	800d910 <_Bfree>
 800d47e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d480:	2300      	movs	r3, #0
 800d482:	6013      	str	r3, [r2, #0]
 800d484:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d488:	e78a      	b.n	800d3a0 <__gethex+0x114>
 800d48a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d48e:	2a2e      	cmp	r2, #46	; 0x2e
 800d490:	d014      	beq.n	800d4bc <__gethex+0x230>
 800d492:	2b20      	cmp	r3, #32
 800d494:	d106      	bne.n	800d4a4 <__gethex+0x218>
 800d496:	9b01      	ldr	r3, [sp, #4]
 800d498:	f843 bb04 	str.w	fp, [r3], #4
 800d49c:	f04f 0b00 	mov.w	fp, #0
 800d4a0:	9301      	str	r3, [sp, #4]
 800d4a2:	465b      	mov	r3, fp
 800d4a4:	7828      	ldrb	r0, [r5, #0]
 800d4a6:	9303      	str	r3, [sp, #12]
 800d4a8:	f7ff feda 	bl	800d260 <__hexdig_fun>
 800d4ac:	9b03      	ldr	r3, [sp, #12]
 800d4ae:	f000 000f 	and.w	r0, r0, #15
 800d4b2:	4098      	lsls	r0, r3
 800d4b4:	ea4b 0b00 	orr.w	fp, fp, r0
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	e7a1      	b.n	800d400 <__gethex+0x174>
 800d4bc:	45a8      	cmp	r8, r5
 800d4be:	d8e8      	bhi.n	800d492 <__gethex+0x206>
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	9303      	str	r3, [sp, #12]
 800d4c6:	f7fe fe64 	bl	800c192 <strncmp>
 800d4ca:	4926      	ldr	r1, [pc, #152]	; (800d564 <__gethex+0x2d8>)
 800d4cc:	9b03      	ldr	r3, [sp, #12]
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d1df      	bne.n	800d492 <__gethex+0x206>
 800d4d2:	e795      	b.n	800d400 <__gethex+0x174>
 800d4d4:	f04f 0b03 	mov.w	fp, #3
 800d4d8:	e7c5      	b.n	800d466 <__gethex+0x1da>
 800d4da:	da0b      	bge.n	800d4f4 <__gethex+0x268>
 800d4dc:	eba5 0800 	sub.w	r8, r5, r0
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	4642      	mov	r2, r8
 800d4e4:	4648      	mov	r0, r9
 800d4e6:	f000 fc2d 	bl	800dd44 <__lshift>
 800d4ea:	eba6 0608 	sub.w	r6, r6, r8
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	f100 0a14 	add.w	sl, r0, #20
 800d4f4:	f04f 0b00 	mov.w	fp, #0
 800d4f8:	e7ba      	b.n	800d470 <__gethex+0x1e4>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	42b3      	cmp	r3, r6
 800d4fe:	dd73      	ble.n	800d5e8 <__gethex+0x35c>
 800d500:	1b9e      	subs	r6, r3, r6
 800d502:	42b5      	cmp	r5, r6
 800d504:	dc34      	bgt.n	800d570 <__gethex+0x2e4>
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d023      	beq.n	800d554 <__gethex+0x2c8>
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d025      	beq.n	800d55c <__gethex+0x2d0>
 800d510:	2b01      	cmp	r3, #1
 800d512:	d115      	bne.n	800d540 <__gethex+0x2b4>
 800d514:	42b5      	cmp	r5, r6
 800d516:	d113      	bne.n	800d540 <__gethex+0x2b4>
 800d518:	2d01      	cmp	r5, #1
 800d51a:	d10b      	bne.n	800d534 <__gethex+0x2a8>
 800d51c:	9a02      	ldr	r2, [sp, #8]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6013      	str	r3, [r2, #0]
 800d522:	2301      	movs	r3, #1
 800d524:	6123      	str	r3, [r4, #16]
 800d526:	f8ca 3000 	str.w	r3, [sl]
 800d52a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d52c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d530:	601c      	str	r4, [r3, #0]
 800d532:	e735      	b.n	800d3a0 <__gethex+0x114>
 800d534:	1e69      	subs	r1, r5, #1
 800d536:	4620      	mov	r0, r4
 800d538:	f000 fe36 	bl	800e1a8 <__any_on>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d1ed      	bne.n	800d51c <__gethex+0x290>
 800d540:	4621      	mov	r1, r4
 800d542:	4648      	mov	r0, r9
 800d544:	f000 f9e4 	bl	800d910 <_Bfree>
 800d548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d54a:	2300      	movs	r3, #0
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d552:	e725      	b.n	800d3a0 <__gethex+0x114>
 800d554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1f2      	bne.n	800d540 <__gethex+0x2b4>
 800d55a:	e7df      	b.n	800d51c <__gethex+0x290>
 800d55c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1dc      	bne.n	800d51c <__gethex+0x290>
 800d562:	e7ed      	b.n	800d540 <__gethex+0x2b4>
 800d564:	08011d94 	.word	0x08011d94
 800d568:	0801203c 	.word	0x0801203c
 800d56c:	0801204d 	.word	0x0801204d
 800d570:	f106 38ff 	add.w	r8, r6, #4294967295
 800d574:	f1bb 0f00 	cmp.w	fp, #0
 800d578:	d133      	bne.n	800d5e2 <__gethex+0x356>
 800d57a:	f1b8 0f00 	cmp.w	r8, #0
 800d57e:	d004      	beq.n	800d58a <__gethex+0x2fe>
 800d580:	4641      	mov	r1, r8
 800d582:	4620      	mov	r0, r4
 800d584:	f000 fe10 	bl	800e1a8 <__any_on>
 800d588:	4683      	mov	fp, r0
 800d58a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d58e:	2301      	movs	r3, #1
 800d590:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d594:	f008 081f 	and.w	r8, r8, #31
 800d598:	fa03 f308 	lsl.w	r3, r3, r8
 800d59c:	4213      	tst	r3, r2
 800d59e:	4631      	mov	r1, r6
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	bf18      	it	ne
 800d5a4:	f04b 0b02 	orrne.w	fp, fp, #2
 800d5a8:	1bad      	subs	r5, r5, r6
 800d5aa:	f7ff fe07 	bl	800d1bc <rshift>
 800d5ae:	687e      	ldr	r6, [r7, #4]
 800d5b0:	f04f 0802 	mov.w	r8, #2
 800d5b4:	f1bb 0f00 	cmp.w	fp, #0
 800d5b8:	d04a      	beq.n	800d650 <__gethex+0x3c4>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d016      	beq.n	800d5ee <__gethex+0x362>
 800d5c0:	2b03      	cmp	r3, #3
 800d5c2:	d018      	beq.n	800d5f6 <__gethex+0x36a>
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d109      	bne.n	800d5dc <__gethex+0x350>
 800d5c8:	f01b 0f02 	tst.w	fp, #2
 800d5cc:	d006      	beq.n	800d5dc <__gethex+0x350>
 800d5ce:	f8da 3000 	ldr.w	r3, [sl]
 800d5d2:	ea4b 0b03 	orr.w	fp, fp, r3
 800d5d6:	f01b 0f01 	tst.w	fp, #1
 800d5da:	d10f      	bne.n	800d5fc <__gethex+0x370>
 800d5dc:	f048 0810 	orr.w	r8, r8, #16
 800d5e0:	e036      	b.n	800d650 <__gethex+0x3c4>
 800d5e2:	f04f 0b01 	mov.w	fp, #1
 800d5e6:	e7d0      	b.n	800d58a <__gethex+0x2fe>
 800d5e8:	f04f 0801 	mov.w	r8, #1
 800d5ec:	e7e2      	b.n	800d5b4 <__gethex+0x328>
 800d5ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5f0:	f1c3 0301 	rsb	r3, r3, #1
 800d5f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d0ef      	beq.n	800d5dc <__gethex+0x350>
 800d5fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d600:	f104 0214 	add.w	r2, r4, #20
 800d604:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d608:	9301      	str	r3, [sp, #4]
 800d60a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d60e:	2300      	movs	r3, #0
 800d610:	4694      	mov	ip, r2
 800d612:	f852 1b04 	ldr.w	r1, [r2], #4
 800d616:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d61a:	d01e      	beq.n	800d65a <__gethex+0x3ce>
 800d61c:	3101      	adds	r1, #1
 800d61e:	f8cc 1000 	str.w	r1, [ip]
 800d622:	f1b8 0f02 	cmp.w	r8, #2
 800d626:	f104 0214 	add.w	r2, r4, #20
 800d62a:	d13d      	bne.n	800d6a8 <__gethex+0x41c>
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	3b01      	subs	r3, #1
 800d630:	42ab      	cmp	r3, r5
 800d632:	d10b      	bne.n	800d64c <__gethex+0x3c0>
 800d634:	1169      	asrs	r1, r5, #5
 800d636:	2301      	movs	r3, #1
 800d638:	f005 051f 	and.w	r5, r5, #31
 800d63c:	fa03 f505 	lsl.w	r5, r3, r5
 800d640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d644:	421d      	tst	r5, r3
 800d646:	bf18      	it	ne
 800d648:	f04f 0801 	movne.w	r8, #1
 800d64c:	f048 0820 	orr.w	r8, r8, #32
 800d650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d652:	601c      	str	r4, [r3, #0]
 800d654:	9b02      	ldr	r3, [sp, #8]
 800d656:	601e      	str	r6, [r3, #0]
 800d658:	e6a2      	b.n	800d3a0 <__gethex+0x114>
 800d65a:	4290      	cmp	r0, r2
 800d65c:	f842 3c04 	str.w	r3, [r2, #-4]
 800d660:	d8d6      	bhi.n	800d610 <__gethex+0x384>
 800d662:	68a2      	ldr	r2, [r4, #8]
 800d664:	4593      	cmp	fp, r2
 800d666:	db17      	blt.n	800d698 <__gethex+0x40c>
 800d668:	6861      	ldr	r1, [r4, #4]
 800d66a:	4648      	mov	r0, r9
 800d66c:	3101      	adds	r1, #1
 800d66e:	f000 f90f 	bl	800d890 <_Balloc>
 800d672:	4682      	mov	sl, r0
 800d674:	b918      	cbnz	r0, 800d67e <__gethex+0x3f2>
 800d676:	4b1b      	ldr	r3, [pc, #108]	; (800d6e4 <__gethex+0x458>)
 800d678:	4602      	mov	r2, r0
 800d67a:	2184      	movs	r1, #132	; 0x84
 800d67c:	e6b3      	b.n	800d3e6 <__gethex+0x15a>
 800d67e:	6922      	ldr	r2, [r4, #16]
 800d680:	3202      	adds	r2, #2
 800d682:	f104 010c 	add.w	r1, r4, #12
 800d686:	0092      	lsls	r2, r2, #2
 800d688:	300c      	adds	r0, #12
 800d68a:	f7fe fe96 	bl	800c3ba <memcpy>
 800d68e:	4621      	mov	r1, r4
 800d690:	4648      	mov	r0, r9
 800d692:	f000 f93d 	bl	800d910 <_Bfree>
 800d696:	4654      	mov	r4, sl
 800d698:	6922      	ldr	r2, [r4, #16]
 800d69a:	1c51      	adds	r1, r2, #1
 800d69c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d6a0:	6121      	str	r1, [r4, #16]
 800d6a2:	2101      	movs	r1, #1
 800d6a4:	6151      	str	r1, [r2, #20]
 800d6a6:	e7bc      	b.n	800d622 <__gethex+0x396>
 800d6a8:	6921      	ldr	r1, [r4, #16]
 800d6aa:	4559      	cmp	r1, fp
 800d6ac:	dd0b      	ble.n	800d6c6 <__gethex+0x43a>
 800d6ae:	2101      	movs	r1, #1
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f7ff fd83 	bl	800d1bc <rshift>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	3601      	adds	r6, #1
 800d6ba:	42b3      	cmp	r3, r6
 800d6bc:	f6ff aedb 	blt.w	800d476 <__gethex+0x1ea>
 800d6c0:	f04f 0801 	mov.w	r8, #1
 800d6c4:	e7c2      	b.n	800d64c <__gethex+0x3c0>
 800d6c6:	f015 051f 	ands.w	r5, r5, #31
 800d6ca:	d0f9      	beq.n	800d6c0 <__gethex+0x434>
 800d6cc:	9b01      	ldr	r3, [sp, #4]
 800d6ce:	441a      	add	r2, r3
 800d6d0:	f1c5 0520 	rsb	r5, r5, #32
 800d6d4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d6d8:	f000 f9cc 	bl	800da74 <__hi0bits>
 800d6dc:	42a8      	cmp	r0, r5
 800d6de:	dbe6      	blt.n	800d6ae <__gethex+0x422>
 800d6e0:	e7ee      	b.n	800d6c0 <__gethex+0x434>
 800d6e2:	bf00      	nop
 800d6e4:	0801203c 	.word	0x0801203c

0800d6e8 <L_shift>:
 800d6e8:	f1c2 0208 	rsb	r2, r2, #8
 800d6ec:	0092      	lsls	r2, r2, #2
 800d6ee:	b570      	push	{r4, r5, r6, lr}
 800d6f0:	f1c2 0620 	rsb	r6, r2, #32
 800d6f4:	6843      	ldr	r3, [r0, #4]
 800d6f6:	6804      	ldr	r4, [r0, #0]
 800d6f8:	fa03 f506 	lsl.w	r5, r3, r6
 800d6fc:	432c      	orrs	r4, r5
 800d6fe:	40d3      	lsrs	r3, r2
 800d700:	6004      	str	r4, [r0, #0]
 800d702:	f840 3f04 	str.w	r3, [r0, #4]!
 800d706:	4288      	cmp	r0, r1
 800d708:	d3f4      	bcc.n	800d6f4 <L_shift+0xc>
 800d70a:	bd70      	pop	{r4, r5, r6, pc}

0800d70c <__match>:
 800d70c:	b530      	push	{r4, r5, lr}
 800d70e:	6803      	ldr	r3, [r0, #0]
 800d710:	3301      	adds	r3, #1
 800d712:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d716:	b914      	cbnz	r4, 800d71e <__match+0x12>
 800d718:	6003      	str	r3, [r0, #0]
 800d71a:	2001      	movs	r0, #1
 800d71c:	bd30      	pop	{r4, r5, pc}
 800d71e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d722:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d726:	2d19      	cmp	r5, #25
 800d728:	bf98      	it	ls
 800d72a:	3220      	addls	r2, #32
 800d72c:	42a2      	cmp	r2, r4
 800d72e:	d0f0      	beq.n	800d712 <__match+0x6>
 800d730:	2000      	movs	r0, #0
 800d732:	e7f3      	b.n	800d71c <__match+0x10>

0800d734 <__hexnan>:
 800d734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d738:	680b      	ldr	r3, [r1, #0]
 800d73a:	6801      	ldr	r1, [r0, #0]
 800d73c:	115e      	asrs	r6, r3, #5
 800d73e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d742:	f013 031f 	ands.w	r3, r3, #31
 800d746:	b087      	sub	sp, #28
 800d748:	bf18      	it	ne
 800d74a:	3604      	addne	r6, #4
 800d74c:	2500      	movs	r5, #0
 800d74e:	1f37      	subs	r7, r6, #4
 800d750:	4682      	mov	sl, r0
 800d752:	4690      	mov	r8, r2
 800d754:	9301      	str	r3, [sp, #4]
 800d756:	f846 5c04 	str.w	r5, [r6, #-4]
 800d75a:	46b9      	mov	r9, r7
 800d75c:	463c      	mov	r4, r7
 800d75e:	9502      	str	r5, [sp, #8]
 800d760:	46ab      	mov	fp, r5
 800d762:	784a      	ldrb	r2, [r1, #1]
 800d764:	1c4b      	adds	r3, r1, #1
 800d766:	9303      	str	r3, [sp, #12]
 800d768:	b342      	cbz	r2, 800d7bc <__hexnan+0x88>
 800d76a:	4610      	mov	r0, r2
 800d76c:	9105      	str	r1, [sp, #20]
 800d76e:	9204      	str	r2, [sp, #16]
 800d770:	f7ff fd76 	bl	800d260 <__hexdig_fun>
 800d774:	2800      	cmp	r0, #0
 800d776:	d14f      	bne.n	800d818 <__hexnan+0xe4>
 800d778:	9a04      	ldr	r2, [sp, #16]
 800d77a:	9905      	ldr	r1, [sp, #20]
 800d77c:	2a20      	cmp	r2, #32
 800d77e:	d818      	bhi.n	800d7b2 <__hexnan+0x7e>
 800d780:	9b02      	ldr	r3, [sp, #8]
 800d782:	459b      	cmp	fp, r3
 800d784:	dd13      	ble.n	800d7ae <__hexnan+0x7a>
 800d786:	454c      	cmp	r4, r9
 800d788:	d206      	bcs.n	800d798 <__hexnan+0x64>
 800d78a:	2d07      	cmp	r5, #7
 800d78c:	dc04      	bgt.n	800d798 <__hexnan+0x64>
 800d78e:	462a      	mov	r2, r5
 800d790:	4649      	mov	r1, r9
 800d792:	4620      	mov	r0, r4
 800d794:	f7ff ffa8 	bl	800d6e8 <L_shift>
 800d798:	4544      	cmp	r4, r8
 800d79a:	d950      	bls.n	800d83e <__hexnan+0x10a>
 800d79c:	2300      	movs	r3, #0
 800d79e:	f1a4 0904 	sub.w	r9, r4, #4
 800d7a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7a6:	f8cd b008 	str.w	fp, [sp, #8]
 800d7aa:	464c      	mov	r4, r9
 800d7ac:	461d      	mov	r5, r3
 800d7ae:	9903      	ldr	r1, [sp, #12]
 800d7b0:	e7d7      	b.n	800d762 <__hexnan+0x2e>
 800d7b2:	2a29      	cmp	r2, #41	; 0x29
 800d7b4:	d155      	bne.n	800d862 <__hexnan+0x12e>
 800d7b6:	3102      	adds	r1, #2
 800d7b8:	f8ca 1000 	str.w	r1, [sl]
 800d7bc:	f1bb 0f00 	cmp.w	fp, #0
 800d7c0:	d04f      	beq.n	800d862 <__hexnan+0x12e>
 800d7c2:	454c      	cmp	r4, r9
 800d7c4:	d206      	bcs.n	800d7d4 <__hexnan+0xa0>
 800d7c6:	2d07      	cmp	r5, #7
 800d7c8:	dc04      	bgt.n	800d7d4 <__hexnan+0xa0>
 800d7ca:	462a      	mov	r2, r5
 800d7cc:	4649      	mov	r1, r9
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f7ff ff8a 	bl	800d6e8 <L_shift>
 800d7d4:	4544      	cmp	r4, r8
 800d7d6:	d934      	bls.n	800d842 <__hexnan+0x10e>
 800d7d8:	f1a8 0204 	sub.w	r2, r8, #4
 800d7dc:	4623      	mov	r3, r4
 800d7de:	f853 1b04 	ldr.w	r1, [r3], #4
 800d7e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d7e6:	429f      	cmp	r7, r3
 800d7e8:	d2f9      	bcs.n	800d7de <__hexnan+0xaa>
 800d7ea:	1b3b      	subs	r3, r7, r4
 800d7ec:	f023 0303 	bic.w	r3, r3, #3
 800d7f0:	3304      	adds	r3, #4
 800d7f2:	3e03      	subs	r6, #3
 800d7f4:	3401      	adds	r4, #1
 800d7f6:	42a6      	cmp	r6, r4
 800d7f8:	bf38      	it	cc
 800d7fa:	2304      	movcc	r3, #4
 800d7fc:	4443      	add	r3, r8
 800d7fe:	2200      	movs	r2, #0
 800d800:	f843 2b04 	str.w	r2, [r3], #4
 800d804:	429f      	cmp	r7, r3
 800d806:	d2fb      	bcs.n	800d800 <__hexnan+0xcc>
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	b91b      	cbnz	r3, 800d814 <__hexnan+0xe0>
 800d80c:	4547      	cmp	r7, r8
 800d80e:	d126      	bne.n	800d85e <__hexnan+0x12a>
 800d810:	2301      	movs	r3, #1
 800d812:	603b      	str	r3, [r7, #0]
 800d814:	2005      	movs	r0, #5
 800d816:	e025      	b.n	800d864 <__hexnan+0x130>
 800d818:	3501      	adds	r5, #1
 800d81a:	2d08      	cmp	r5, #8
 800d81c:	f10b 0b01 	add.w	fp, fp, #1
 800d820:	dd06      	ble.n	800d830 <__hexnan+0xfc>
 800d822:	4544      	cmp	r4, r8
 800d824:	d9c3      	bls.n	800d7ae <__hexnan+0x7a>
 800d826:	2300      	movs	r3, #0
 800d828:	f844 3c04 	str.w	r3, [r4, #-4]
 800d82c:	2501      	movs	r5, #1
 800d82e:	3c04      	subs	r4, #4
 800d830:	6822      	ldr	r2, [r4, #0]
 800d832:	f000 000f 	and.w	r0, r0, #15
 800d836:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d83a:	6020      	str	r0, [r4, #0]
 800d83c:	e7b7      	b.n	800d7ae <__hexnan+0x7a>
 800d83e:	2508      	movs	r5, #8
 800d840:	e7b5      	b.n	800d7ae <__hexnan+0x7a>
 800d842:	9b01      	ldr	r3, [sp, #4]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d0df      	beq.n	800d808 <__hexnan+0xd4>
 800d848:	f1c3 0320 	rsb	r3, r3, #32
 800d84c:	f04f 32ff 	mov.w	r2, #4294967295
 800d850:	40da      	lsrs	r2, r3
 800d852:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d856:	4013      	ands	r3, r2
 800d858:	f846 3c04 	str.w	r3, [r6, #-4]
 800d85c:	e7d4      	b.n	800d808 <__hexnan+0xd4>
 800d85e:	3f04      	subs	r7, #4
 800d860:	e7d2      	b.n	800d808 <__hexnan+0xd4>
 800d862:	2004      	movs	r0, #4
 800d864:	b007      	add	sp, #28
 800d866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d86a <__ascii_mbtowc>:
 800d86a:	b082      	sub	sp, #8
 800d86c:	b901      	cbnz	r1, 800d870 <__ascii_mbtowc+0x6>
 800d86e:	a901      	add	r1, sp, #4
 800d870:	b142      	cbz	r2, 800d884 <__ascii_mbtowc+0x1a>
 800d872:	b14b      	cbz	r3, 800d888 <__ascii_mbtowc+0x1e>
 800d874:	7813      	ldrb	r3, [r2, #0]
 800d876:	600b      	str	r3, [r1, #0]
 800d878:	7812      	ldrb	r2, [r2, #0]
 800d87a:	1e10      	subs	r0, r2, #0
 800d87c:	bf18      	it	ne
 800d87e:	2001      	movne	r0, #1
 800d880:	b002      	add	sp, #8
 800d882:	4770      	bx	lr
 800d884:	4610      	mov	r0, r2
 800d886:	e7fb      	b.n	800d880 <__ascii_mbtowc+0x16>
 800d888:	f06f 0001 	mvn.w	r0, #1
 800d88c:	e7f8      	b.n	800d880 <__ascii_mbtowc+0x16>
	...

0800d890 <_Balloc>:
 800d890:	b570      	push	{r4, r5, r6, lr}
 800d892:	69c6      	ldr	r6, [r0, #28]
 800d894:	4604      	mov	r4, r0
 800d896:	460d      	mov	r5, r1
 800d898:	b976      	cbnz	r6, 800d8b8 <_Balloc+0x28>
 800d89a:	2010      	movs	r0, #16
 800d89c:	f7fc fcde 	bl	800a25c <malloc>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	61e0      	str	r0, [r4, #28]
 800d8a4:	b920      	cbnz	r0, 800d8b0 <_Balloc+0x20>
 800d8a6:	4b18      	ldr	r3, [pc, #96]	; (800d908 <_Balloc+0x78>)
 800d8a8:	4818      	ldr	r0, [pc, #96]	; (800d90c <_Balloc+0x7c>)
 800d8aa:	216b      	movs	r1, #107	; 0x6b
 800d8ac:	f7fe fda2 	bl	800c3f4 <__assert_func>
 800d8b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8b4:	6006      	str	r6, [r0, #0]
 800d8b6:	60c6      	str	r6, [r0, #12]
 800d8b8:	69e6      	ldr	r6, [r4, #28]
 800d8ba:	68f3      	ldr	r3, [r6, #12]
 800d8bc:	b183      	cbz	r3, 800d8e0 <_Balloc+0x50>
 800d8be:	69e3      	ldr	r3, [r4, #28]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8c6:	b9b8      	cbnz	r0, 800d8f8 <_Balloc+0x68>
 800d8c8:	2101      	movs	r1, #1
 800d8ca:	fa01 f605 	lsl.w	r6, r1, r5
 800d8ce:	1d72      	adds	r2, r6, #5
 800d8d0:	0092      	lsls	r2, r2, #2
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f000 fecf 	bl	800e676 <_calloc_r>
 800d8d8:	b160      	cbz	r0, 800d8f4 <_Balloc+0x64>
 800d8da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d8de:	e00e      	b.n	800d8fe <_Balloc+0x6e>
 800d8e0:	2221      	movs	r2, #33	; 0x21
 800d8e2:	2104      	movs	r1, #4
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	f000 fec6 	bl	800e676 <_calloc_r>
 800d8ea:	69e3      	ldr	r3, [r4, #28]
 800d8ec:	60f0      	str	r0, [r6, #12]
 800d8ee:	68db      	ldr	r3, [r3, #12]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1e4      	bne.n	800d8be <_Balloc+0x2e>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	bd70      	pop	{r4, r5, r6, pc}
 800d8f8:	6802      	ldr	r2, [r0, #0]
 800d8fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d8fe:	2300      	movs	r3, #0
 800d900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d904:	e7f7      	b.n	800d8f6 <_Balloc+0x66>
 800d906:	bf00      	nop
 800d908:	08011f22 	.word	0x08011f22
 800d90c:	080120ad 	.word	0x080120ad

0800d910 <_Bfree>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	69c6      	ldr	r6, [r0, #28]
 800d914:	4605      	mov	r5, r0
 800d916:	460c      	mov	r4, r1
 800d918:	b976      	cbnz	r6, 800d938 <_Bfree+0x28>
 800d91a:	2010      	movs	r0, #16
 800d91c:	f7fc fc9e 	bl	800a25c <malloc>
 800d920:	4602      	mov	r2, r0
 800d922:	61e8      	str	r0, [r5, #28]
 800d924:	b920      	cbnz	r0, 800d930 <_Bfree+0x20>
 800d926:	4b09      	ldr	r3, [pc, #36]	; (800d94c <_Bfree+0x3c>)
 800d928:	4809      	ldr	r0, [pc, #36]	; (800d950 <_Bfree+0x40>)
 800d92a:	218f      	movs	r1, #143	; 0x8f
 800d92c:	f7fe fd62 	bl	800c3f4 <__assert_func>
 800d930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d934:	6006      	str	r6, [r0, #0]
 800d936:	60c6      	str	r6, [r0, #12]
 800d938:	b13c      	cbz	r4, 800d94a <_Bfree+0x3a>
 800d93a:	69eb      	ldr	r3, [r5, #28]
 800d93c:	6862      	ldr	r2, [r4, #4]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d944:	6021      	str	r1, [r4, #0]
 800d946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d94a:	bd70      	pop	{r4, r5, r6, pc}
 800d94c:	08011f22 	.word	0x08011f22
 800d950:	080120ad 	.word	0x080120ad

0800d954 <__multadd>:
 800d954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d958:	690d      	ldr	r5, [r1, #16]
 800d95a:	4607      	mov	r7, r0
 800d95c:	460c      	mov	r4, r1
 800d95e:	461e      	mov	r6, r3
 800d960:	f101 0c14 	add.w	ip, r1, #20
 800d964:	2000      	movs	r0, #0
 800d966:	f8dc 3000 	ldr.w	r3, [ip]
 800d96a:	b299      	uxth	r1, r3
 800d96c:	fb02 6101 	mla	r1, r2, r1, r6
 800d970:	0c1e      	lsrs	r6, r3, #16
 800d972:	0c0b      	lsrs	r3, r1, #16
 800d974:	fb02 3306 	mla	r3, r2, r6, r3
 800d978:	b289      	uxth	r1, r1
 800d97a:	3001      	adds	r0, #1
 800d97c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d980:	4285      	cmp	r5, r0
 800d982:	f84c 1b04 	str.w	r1, [ip], #4
 800d986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d98a:	dcec      	bgt.n	800d966 <__multadd+0x12>
 800d98c:	b30e      	cbz	r6, 800d9d2 <__multadd+0x7e>
 800d98e:	68a3      	ldr	r3, [r4, #8]
 800d990:	42ab      	cmp	r3, r5
 800d992:	dc19      	bgt.n	800d9c8 <__multadd+0x74>
 800d994:	6861      	ldr	r1, [r4, #4]
 800d996:	4638      	mov	r0, r7
 800d998:	3101      	adds	r1, #1
 800d99a:	f7ff ff79 	bl	800d890 <_Balloc>
 800d99e:	4680      	mov	r8, r0
 800d9a0:	b928      	cbnz	r0, 800d9ae <__multadd+0x5a>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	4b0c      	ldr	r3, [pc, #48]	; (800d9d8 <__multadd+0x84>)
 800d9a6:	480d      	ldr	r0, [pc, #52]	; (800d9dc <__multadd+0x88>)
 800d9a8:	21ba      	movs	r1, #186	; 0xba
 800d9aa:	f7fe fd23 	bl	800c3f4 <__assert_func>
 800d9ae:	6922      	ldr	r2, [r4, #16]
 800d9b0:	3202      	adds	r2, #2
 800d9b2:	f104 010c 	add.w	r1, r4, #12
 800d9b6:	0092      	lsls	r2, r2, #2
 800d9b8:	300c      	adds	r0, #12
 800d9ba:	f7fe fcfe 	bl	800c3ba <memcpy>
 800d9be:	4621      	mov	r1, r4
 800d9c0:	4638      	mov	r0, r7
 800d9c2:	f7ff ffa5 	bl	800d910 <_Bfree>
 800d9c6:	4644      	mov	r4, r8
 800d9c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9cc:	3501      	adds	r5, #1
 800d9ce:	615e      	str	r6, [r3, #20]
 800d9d0:	6125      	str	r5, [r4, #16]
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9d8:	0801203c 	.word	0x0801203c
 800d9dc:	080120ad 	.word	0x080120ad

0800d9e0 <__s2b>:
 800d9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	4615      	mov	r5, r2
 800d9e8:	461f      	mov	r7, r3
 800d9ea:	2209      	movs	r2, #9
 800d9ec:	3308      	adds	r3, #8
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	db09      	blt.n	800da10 <__s2b+0x30>
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f7ff ff47 	bl	800d890 <_Balloc>
 800da02:	b940      	cbnz	r0, 800da16 <__s2b+0x36>
 800da04:	4602      	mov	r2, r0
 800da06:	4b19      	ldr	r3, [pc, #100]	; (800da6c <__s2b+0x8c>)
 800da08:	4819      	ldr	r0, [pc, #100]	; (800da70 <__s2b+0x90>)
 800da0a:	21d3      	movs	r1, #211	; 0xd3
 800da0c:	f7fe fcf2 	bl	800c3f4 <__assert_func>
 800da10:	0052      	lsls	r2, r2, #1
 800da12:	3101      	adds	r1, #1
 800da14:	e7f0      	b.n	800d9f8 <__s2b+0x18>
 800da16:	9b08      	ldr	r3, [sp, #32]
 800da18:	6143      	str	r3, [r0, #20]
 800da1a:	2d09      	cmp	r5, #9
 800da1c:	f04f 0301 	mov.w	r3, #1
 800da20:	6103      	str	r3, [r0, #16]
 800da22:	dd16      	ble.n	800da52 <__s2b+0x72>
 800da24:	f104 0909 	add.w	r9, r4, #9
 800da28:	46c8      	mov	r8, r9
 800da2a:	442c      	add	r4, r5
 800da2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da30:	4601      	mov	r1, r0
 800da32:	3b30      	subs	r3, #48	; 0x30
 800da34:	220a      	movs	r2, #10
 800da36:	4630      	mov	r0, r6
 800da38:	f7ff ff8c 	bl	800d954 <__multadd>
 800da3c:	45a0      	cmp	r8, r4
 800da3e:	d1f5      	bne.n	800da2c <__s2b+0x4c>
 800da40:	f1a5 0408 	sub.w	r4, r5, #8
 800da44:	444c      	add	r4, r9
 800da46:	1b2d      	subs	r5, r5, r4
 800da48:	1963      	adds	r3, r4, r5
 800da4a:	42bb      	cmp	r3, r7
 800da4c:	db04      	blt.n	800da58 <__s2b+0x78>
 800da4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da52:	340a      	adds	r4, #10
 800da54:	2509      	movs	r5, #9
 800da56:	e7f6      	b.n	800da46 <__s2b+0x66>
 800da58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da5c:	4601      	mov	r1, r0
 800da5e:	3b30      	subs	r3, #48	; 0x30
 800da60:	220a      	movs	r2, #10
 800da62:	4630      	mov	r0, r6
 800da64:	f7ff ff76 	bl	800d954 <__multadd>
 800da68:	e7ee      	b.n	800da48 <__s2b+0x68>
 800da6a:	bf00      	nop
 800da6c:	0801203c 	.word	0x0801203c
 800da70:	080120ad 	.word	0x080120ad

0800da74 <__hi0bits>:
 800da74:	0c03      	lsrs	r3, r0, #16
 800da76:	041b      	lsls	r3, r3, #16
 800da78:	b9d3      	cbnz	r3, 800dab0 <__hi0bits+0x3c>
 800da7a:	0400      	lsls	r0, r0, #16
 800da7c:	2310      	movs	r3, #16
 800da7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da82:	bf04      	itt	eq
 800da84:	0200      	lsleq	r0, r0, #8
 800da86:	3308      	addeq	r3, #8
 800da88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da8c:	bf04      	itt	eq
 800da8e:	0100      	lsleq	r0, r0, #4
 800da90:	3304      	addeq	r3, #4
 800da92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da96:	bf04      	itt	eq
 800da98:	0080      	lsleq	r0, r0, #2
 800da9a:	3302      	addeq	r3, #2
 800da9c:	2800      	cmp	r0, #0
 800da9e:	db05      	blt.n	800daac <__hi0bits+0x38>
 800daa0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800daa4:	f103 0301 	add.w	r3, r3, #1
 800daa8:	bf08      	it	eq
 800daaa:	2320      	moveq	r3, #32
 800daac:	4618      	mov	r0, r3
 800daae:	4770      	bx	lr
 800dab0:	2300      	movs	r3, #0
 800dab2:	e7e4      	b.n	800da7e <__hi0bits+0xa>

0800dab4 <__lo0bits>:
 800dab4:	6803      	ldr	r3, [r0, #0]
 800dab6:	f013 0207 	ands.w	r2, r3, #7
 800daba:	d00c      	beq.n	800dad6 <__lo0bits+0x22>
 800dabc:	07d9      	lsls	r1, r3, #31
 800dabe:	d422      	bmi.n	800db06 <__lo0bits+0x52>
 800dac0:	079a      	lsls	r2, r3, #30
 800dac2:	bf49      	itett	mi
 800dac4:	085b      	lsrmi	r3, r3, #1
 800dac6:	089b      	lsrpl	r3, r3, #2
 800dac8:	6003      	strmi	r3, [r0, #0]
 800daca:	2201      	movmi	r2, #1
 800dacc:	bf5c      	itt	pl
 800dace:	6003      	strpl	r3, [r0, #0]
 800dad0:	2202      	movpl	r2, #2
 800dad2:	4610      	mov	r0, r2
 800dad4:	4770      	bx	lr
 800dad6:	b299      	uxth	r1, r3
 800dad8:	b909      	cbnz	r1, 800dade <__lo0bits+0x2a>
 800dada:	0c1b      	lsrs	r3, r3, #16
 800dadc:	2210      	movs	r2, #16
 800dade:	b2d9      	uxtb	r1, r3
 800dae0:	b909      	cbnz	r1, 800dae6 <__lo0bits+0x32>
 800dae2:	3208      	adds	r2, #8
 800dae4:	0a1b      	lsrs	r3, r3, #8
 800dae6:	0719      	lsls	r1, r3, #28
 800dae8:	bf04      	itt	eq
 800daea:	091b      	lsreq	r3, r3, #4
 800daec:	3204      	addeq	r2, #4
 800daee:	0799      	lsls	r1, r3, #30
 800daf0:	bf04      	itt	eq
 800daf2:	089b      	lsreq	r3, r3, #2
 800daf4:	3202      	addeq	r2, #2
 800daf6:	07d9      	lsls	r1, r3, #31
 800daf8:	d403      	bmi.n	800db02 <__lo0bits+0x4e>
 800dafa:	085b      	lsrs	r3, r3, #1
 800dafc:	f102 0201 	add.w	r2, r2, #1
 800db00:	d003      	beq.n	800db0a <__lo0bits+0x56>
 800db02:	6003      	str	r3, [r0, #0]
 800db04:	e7e5      	b.n	800dad2 <__lo0bits+0x1e>
 800db06:	2200      	movs	r2, #0
 800db08:	e7e3      	b.n	800dad2 <__lo0bits+0x1e>
 800db0a:	2220      	movs	r2, #32
 800db0c:	e7e1      	b.n	800dad2 <__lo0bits+0x1e>
	...

0800db10 <__i2b>:
 800db10:	b510      	push	{r4, lr}
 800db12:	460c      	mov	r4, r1
 800db14:	2101      	movs	r1, #1
 800db16:	f7ff febb 	bl	800d890 <_Balloc>
 800db1a:	4602      	mov	r2, r0
 800db1c:	b928      	cbnz	r0, 800db2a <__i2b+0x1a>
 800db1e:	4b05      	ldr	r3, [pc, #20]	; (800db34 <__i2b+0x24>)
 800db20:	4805      	ldr	r0, [pc, #20]	; (800db38 <__i2b+0x28>)
 800db22:	f240 1145 	movw	r1, #325	; 0x145
 800db26:	f7fe fc65 	bl	800c3f4 <__assert_func>
 800db2a:	2301      	movs	r3, #1
 800db2c:	6144      	str	r4, [r0, #20]
 800db2e:	6103      	str	r3, [r0, #16]
 800db30:	bd10      	pop	{r4, pc}
 800db32:	bf00      	nop
 800db34:	0801203c 	.word	0x0801203c
 800db38:	080120ad 	.word	0x080120ad

0800db3c <__multiply>:
 800db3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db40:	4691      	mov	r9, r2
 800db42:	690a      	ldr	r2, [r1, #16]
 800db44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db48:	429a      	cmp	r2, r3
 800db4a:	bfb8      	it	lt
 800db4c:	460b      	movlt	r3, r1
 800db4e:	460c      	mov	r4, r1
 800db50:	bfbc      	itt	lt
 800db52:	464c      	movlt	r4, r9
 800db54:	4699      	movlt	r9, r3
 800db56:	6927      	ldr	r7, [r4, #16]
 800db58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db5c:	68a3      	ldr	r3, [r4, #8]
 800db5e:	6861      	ldr	r1, [r4, #4]
 800db60:	eb07 060a 	add.w	r6, r7, sl
 800db64:	42b3      	cmp	r3, r6
 800db66:	b085      	sub	sp, #20
 800db68:	bfb8      	it	lt
 800db6a:	3101      	addlt	r1, #1
 800db6c:	f7ff fe90 	bl	800d890 <_Balloc>
 800db70:	b930      	cbnz	r0, 800db80 <__multiply+0x44>
 800db72:	4602      	mov	r2, r0
 800db74:	4b44      	ldr	r3, [pc, #272]	; (800dc88 <__multiply+0x14c>)
 800db76:	4845      	ldr	r0, [pc, #276]	; (800dc8c <__multiply+0x150>)
 800db78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800db7c:	f7fe fc3a 	bl	800c3f4 <__assert_func>
 800db80:	f100 0514 	add.w	r5, r0, #20
 800db84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db88:	462b      	mov	r3, r5
 800db8a:	2200      	movs	r2, #0
 800db8c:	4543      	cmp	r3, r8
 800db8e:	d321      	bcc.n	800dbd4 <__multiply+0x98>
 800db90:	f104 0314 	add.w	r3, r4, #20
 800db94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800db98:	f109 0314 	add.w	r3, r9, #20
 800db9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dba0:	9202      	str	r2, [sp, #8]
 800dba2:	1b3a      	subs	r2, r7, r4
 800dba4:	3a15      	subs	r2, #21
 800dba6:	f022 0203 	bic.w	r2, r2, #3
 800dbaa:	3204      	adds	r2, #4
 800dbac:	f104 0115 	add.w	r1, r4, #21
 800dbb0:	428f      	cmp	r7, r1
 800dbb2:	bf38      	it	cc
 800dbb4:	2204      	movcc	r2, #4
 800dbb6:	9201      	str	r2, [sp, #4]
 800dbb8:	9a02      	ldr	r2, [sp, #8]
 800dbba:	9303      	str	r3, [sp, #12]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d80c      	bhi.n	800dbda <__multiply+0x9e>
 800dbc0:	2e00      	cmp	r6, #0
 800dbc2:	dd03      	ble.n	800dbcc <__multiply+0x90>
 800dbc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d05b      	beq.n	800dc84 <__multiply+0x148>
 800dbcc:	6106      	str	r6, [r0, #16]
 800dbce:	b005      	add	sp, #20
 800dbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd4:	f843 2b04 	str.w	r2, [r3], #4
 800dbd8:	e7d8      	b.n	800db8c <__multiply+0x50>
 800dbda:	f8b3 a000 	ldrh.w	sl, [r3]
 800dbde:	f1ba 0f00 	cmp.w	sl, #0
 800dbe2:	d024      	beq.n	800dc2e <__multiply+0xf2>
 800dbe4:	f104 0e14 	add.w	lr, r4, #20
 800dbe8:	46a9      	mov	r9, r5
 800dbea:	f04f 0c00 	mov.w	ip, #0
 800dbee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dbf2:	f8d9 1000 	ldr.w	r1, [r9]
 800dbf6:	fa1f fb82 	uxth.w	fp, r2
 800dbfa:	b289      	uxth	r1, r1
 800dbfc:	fb0a 110b 	mla	r1, sl, fp, r1
 800dc00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dc04:	f8d9 2000 	ldr.w	r2, [r9]
 800dc08:	4461      	add	r1, ip
 800dc0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc0e:	fb0a c20b 	mla	r2, sl, fp, ip
 800dc12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dc16:	b289      	uxth	r1, r1
 800dc18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc1c:	4577      	cmp	r7, lr
 800dc1e:	f849 1b04 	str.w	r1, [r9], #4
 800dc22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc26:	d8e2      	bhi.n	800dbee <__multiply+0xb2>
 800dc28:	9a01      	ldr	r2, [sp, #4]
 800dc2a:	f845 c002 	str.w	ip, [r5, r2]
 800dc2e:	9a03      	ldr	r2, [sp, #12]
 800dc30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dc34:	3304      	adds	r3, #4
 800dc36:	f1b9 0f00 	cmp.w	r9, #0
 800dc3a:	d021      	beq.n	800dc80 <__multiply+0x144>
 800dc3c:	6829      	ldr	r1, [r5, #0]
 800dc3e:	f104 0c14 	add.w	ip, r4, #20
 800dc42:	46ae      	mov	lr, r5
 800dc44:	f04f 0a00 	mov.w	sl, #0
 800dc48:	f8bc b000 	ldrh.w	fp, [ip]
 800dc4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dc50:	fb09 220b 	mla	r2, r9, fp, r2
 800dc54:	4452      	add	r2, sl
 800dc56:	b289      	uxth	r1, r1
 800dc58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc5c:	f84e 1b04 	str.w	r1, [lr], #4
 800dc60:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dc64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc68:	f8be 1000 	ldrh.w	r1, [lr]
 800dc6c:	fb09 110a 	mla	r1, r9, sl, r1
 800dc70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dc74:	4567      	cmp	r7, ip
 800dc76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc7a:	d8e5      	bhi.n	800dc48 <__multiply+0x10c>
 800dc7c:	9a01      	ldr	r2, [sp, #4]
 800dc7e:	50a9      	str	r1, [r5, r2]
 800dc80:	3504      	adds	r5, #4
 800dc82:	e799      	b.n	800dbb8 <__multiply+0x7c>
 800dc84:	3e01      	subs	r6, #1
 800dc86:	e79b      	b.n	800dbc0 <__multiply+0x84>
 800dc88:	0801203c 	.word	0x0801203c
 800dc8c:	080120ad 	.word	0x080120ad

0800dc90 <__pow5mult>:
 800dc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc94:	4615      	mov	r5, r2
 800dc96:	f012 0203 	ands.w	r2, r2, #3
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	460f      	mov	r7, r1
 800dc9e:	d007      	beq.n	800dcb0 <__pow5mult+0x20>
 800dca0:	4c25      	ldr	r4, [pc, #148]	; (800dd38 <__pow5mult+0xa8>)
 800dca2:	3a01      	subs	r2, #1
 800dca4:	2300      	movs	r3, #0
 800dca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dcaa:	f7ff fe53 	bl	800d954 <__multadd>
 800dcae:	4607      	mov	r7, r0
 800dcb0:	10ad      	asrs	r5, r5, #2
 800dcb2:	d03d      	beq.n	800dd30 <__pow5mult+0xa0>
 800dcb4:	69f4      	ldr	r4, [r6, #28]
 800dcb6:	b97c      	cbnz	r4, 800dcd8 <__pow5mult+0x48>
 800dcb8:	2010      	movs	r0, #16
 800dcba:	f7fc facf 	bl	800a25c <malloc>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	61f0      	str	r0, [r6, #28]
 800dcc2:	b928      	cbnz	r0, 800dcd0 <__pow5mult+0x40>
 800dcc4:	4b1d      	ldr	r3, [pc, #116]	; (800dd3c <__pow5mult+0xac>)
 800dcc6:	481e      	ldr	r0, [pc, #120]	; (800dd40 <__pow5mult+0xb0>)
 800dcc8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dccc:	f7fe fb92 	bl	800c3f4 <__assert_func>
 800dcd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dcd4:	6004      	str	r4, [r0, #0]
 800dcd6:	60c4      	str	r4, [r0, #12]
 800dcd8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dcdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dce0:	b94c      	cbnz	r4, 800dcf6 <__pow5mult+0x66>
 800dce2:	f240 2171 	movw	r1, #625	; 0x271
 800dce6:	4630      	mov	r0, r6
 800dce8:	f7ff ff12 	bl	800db10 <__i2b>
 800dcec:	2300      	movs	r3, #0
 800dcee:	f8c8 0008 	str.w	r0, [r8, #8]
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	6003      	str	r3, [r0, #0]
 800dcf6:	f04f 0900 	mov.w	r9, #0
 800dcfa:	07eb      	lsls	r3, r5, #31
 800dcfc:	d50a      	bpl.n	800dd14 <__pow5mult+0x84>
 800dcfe:	4639      	mov	r1, r7
 800dd00:	4622      	mov	r2, r4
 800dd02:	4630      	mov	r0, r6
 800dd04:	f7ff ff1a 	bl	800db3c <__multiply>
 800dd08:	4639      	mov	r1, r7
 800dd0a:	4680      	mov	r8, r0
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	f7ff fdff 	bl	800d910 <_Bfree>
 800dd12:	4647      	mov	r7, r8
 800dd14:	106d      	asrs	r5, r5, #1
 800dd16:	d00b      	beq.n	800dd30 <__pow5mult+0xa0>
 800dd18:	6820      	ldr	r0, [r4, #0]
 800dd1a:	b938      	cbnz	r0, 800dd2c <__pow5mult+0x9c>
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	4621      	mov	r1, r4
 800dd20:	4630      	mov	r0, r6
 800dd22:	f7ff ff0b 	bl	800db3c <__multiply>
 800dd26:	6020      	str	r0, [r4, #0]
 800dd28:	f8c0 9000 	str.w	r9, [r0]
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	e7e4      	b.n	800dcfa <__pow5mult+0x6a>
 800dd30:	4638      	mov	r0, r7
 800dd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd36:	bf00      	nop
 800dd38:	080121f8 	.word	0x080121f8
 800dd3c:	08011f22 	.word	0x08011f22
 800dd40:	080120ad 	.word	0x080120ad

0800dd44 <__lshift>:
 800dd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd48:	460c      	mov	r4, r1
 800dd4a:	6849      	ldr	r1, [r1, #4]
 800dd4c:	6923      	ldr	r3, [r4, #16]
 800dd4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd52:	68a3      	ldr	r3, [r4, #8]
 800dd54:	4607      	mov	r7, r0
 800dd56:	4691      	mov	r9, r2
 800dd58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd5c:	f108 0601 	add.w	r6, r8, #1
 800dd60:	42b3      	cmp	r3, r6
 800dd62:	db0b      	blt.n	800dd7c <__lshift+0x38>
 800dd64:	4638      	mov	r0, r7
 800dd66:	f7ff fd93 	bl	800d890 <_Balloc>
 800dd6a:	4605      	mov	r5, r0
 800dd6c:	b948      	cbnz	r0, 800dd82 <__lshift+0x3e>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	4b28      	ldr	r3, [pc, #160]	; (800de14 <__lshift+0xd0>)
 800dd72:	4829      	ldr	r0, [pc, #164]	; (800de18 <__lshift+0xd4>)
 800dd74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dd78:	f7fe fb3c 	bl	800c3f4 <__assert_func>
 800dd7c:	3101      	adds	r1, #1
 800dd7e:	005b      	lsls	r3, r3, #1
 800dd80:	e7ee      	b.n	800dd60 <__lshift+0x1c>
 800dd82:	2300      	movs	r3, #0
 800dd84:	f100 0114 	add.w	r1, r0, #20
 800dd88:	f100 0210 	add.w	r2, r0, #16
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	4553      	cmp	r3, sl
 800dd90:	db33      	blt.n	800ddfa <__lshift+0xb6>
 800dd92:	6920      	ldr	r0, [r4, #16]
 800dd94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd98:	f104 0314 	add.w	r3, r4, #20
 800dd9c:	f019 091f 	ands.w	r9, r9, #31
 800dda0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dda4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dda8:	d02b      	beq.n	800de02 <__lshift+0xbe>
 800ddaa:	f1c9 0e20 	rsb	lr, r9, #32
 800ddae:	468a      	mov	sl, r1
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	6818      	ldr	r0, [r3, #0]
 800ddb4:	fa00 f009 	lsl.w	r0, r0, r9
 800ddb8:	4310      	orrs	r0, r2
 800ddba:	f84a 0b04 	str.w	r0, [sl], #4
 800ddbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc2:	459c      	cmp	ip, r3
 800ddc4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ddc8:	d8f3      	bhi.n	800ddb2 <__lshift+0x6e>
 800ddca:	ebac 0304 	sub.w	r3, ip, r4
 800ddce:	3b15      	subs	r3, #21
 800ddd0:	f023 0303 	bic.w	r3, r3, #3
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	f104 0015 	add.w	r0, r4, #21
 800ddda:	4584      	cmp	ip, r0
 800dddc:	bf38      	it	cc
 800ddde:	2304      	movcc	r3, #4
 800dde0:	50ca      	str	r2, [r1, r3]
 800dde2:	b10a      	cbz	r2, 800dde8 <__lshift+0xa4>
 800dde4:	f108 0602 	add.w	r6, r8, #2
 800dde8:	3e01      	subs	r6, #1
 800ddea:	4638      	mov	r0, r7
 800ddec:	612e      	str	r6, [r5, #16]
 800ddee:	4621      	mov	r1, r4
 800ddf0:	f7ff fd8e 	bl	800d910 <_Bfree>
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddfa:	f842 0f04 	str.w	r0, [r2, #4]!
 800ddfe:	3301      	adds	r3, #1
 800de00:	e7c5      	b.n	800dd8e <__lshift+0x4a>
 800de02:	3904      	subs	r1, #4
 800de04:	f853 2b04 	ldr.w	r2, [r3], #4
 800de08:	f841 2f04 	str.w	r2, [r1, #4]!
 800de0c:	459c      	cmp	ip, r3
 800de0e:	d8f9      	bhi.n	800de04 <__lshift+0xc0>
 800de10:	e7ea      	b.n	800dde8 <__lshift+0xa4>
 800de12:	bf00      	nop
 800de14:	0801203c 	.word	0x0801203c
 800de18:	080120ad 	.word	0x080120ad

0800de1c <__mcmp>:
 800de1c:	b530      	push	{r4, r5, lr}
 800de1e:	6902      	ldr	r2, [r0, #16]
 800de20:	690c      	ldr	r4, [r1, #16]
 800de22:	1b12      	subs	r2, r2, r4
 800de24:	d10e      	bne.n	800de44 <__mcmp+0x28>
 800de26:	f100 0314 	add.w	r3, r0, #20
 800de2a:	3114      	adds	r1, #20
 800de2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800de30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800de38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800de3c:	42a5      	cmp	r5, r4
 800de3e:	d003      	beq.n	800de48 <__mcmp+0x2c>
 800de40:	d305      	bcc.n	800de4e <__mcmp+0x32>
 800de42:	2201      	movs	r2, #1
 800de44:	4610      	mov	r0, r2
 800de46:	bd30      	pop	{r4, r5, pc}
 800de48:	4283      	cmp	r3, r0
 800de4a:	d3f3      	bcc.n	800de34 <__mcmp+0x18>
 800de4c:	e7fa      	b.n	800de44 <__mcmp+0x28>
 800de4e:	f04f 32ff 	mov.w	r2, #4294967295
 800de52:	e7f7      	b.n	800de44 <__mcmp+0x28>

0800de54 <__mdiff>:
 800de54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de58:	460c      	mov	r4, r1
 800de5a:	4606      	mov	r6, r0
 800de5c:	4611      	mov	r1, r2
 800de5e:	4620      	mov	r0, r4
 800de60:	4690      	mov	r8, r2
 800de62:	f7ff ffdb 	bl	800de1c <__mcmp>
 800de66:	1e05      	subs	r5, r0, #0
 800de68:	d110      	bne.n	800de8c <__mdiff+0x38>
 800de6a:	4629      	mov	r1, r5
 800de6c:	4630      	mov	r0, r6
 800de6e:	f7ff fd0f 	bl	800d890 <_Balloc>
 800de72:	b930      	cbnz	r0, 800de82 <__mdiff+0x2e>
 800de74:	4b3a      	ldr	r3, [pc, #232]	; (800df60 <__mdiff+0x10c>)
 800de76:	4602      	mov	r2, r0
 800de78:	f240 2137 	movw	r1, #567	; 0x237
 800de7c:	4839      	ldr	r0, [pc, #228]	; (800df64 <__mdiff+0x110>)
 800de7e:	f7fe fab9 	bl	800c3f4 <__assert_func>
 800de82:	2301      	movs	r3, #1
 800de84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de8c:	bfa4      	itt	ge
 800de8e:	4643      	movge	r3, r8
 800de90:	46a0      	movge	r8, r4
 800de92:	4630      	mov	r0, r6
 800de94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de98:	bfa6      	itte	ge
 800de9a:	461c      	movge	r4, r3
 800de9c:	2500      	movge	r5, #0
 800de9e:	2501      	movlt	r5, #1
 800dea0:	f7ff fcf6 	bl	800d890 <_Balloc>
 800dea4:	b920      	cbnz	r0, 800deb0 <__mdiff+0x5c>
 800dea6:	4b2e      	ldr	r3, [pc, #184]	; (800df60 <__mdiff+0x10c>)
 800dea8:	4602      	mov	r2, r0
 800deaa:	f240 2145 	movw	r1, #581	; 0x245
 800deae:	e7e5      	b.n	800de7c <__mdiff+0x28>
 800deb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800deb4:	6926      	ldr	r6, [r4, #16]
 800deb6:	60c5      	str	r5, [r0, #12]
 800deb8:	f104 0914 	add.w	r9, r4, #20
 800debc:	f108 0514 	add.w	r5, r8, #20
 800dec0:	f100 0e14 	add.w	lr, r0, #20
 800dec4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dec8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800decc:	f108 0210 	add.w	r2, r8, #16
 800ded0:	46f2      	mov	sl, lr
 800ded2:	2100      	movs	r1, #0
 800ded4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ded8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dedc:	fa11 f88b 	uxtah	r8, r1, fp
 800dee0:	b299      	uxth	r1, r3
 800dee2:	0c1b      	lsrs	r3, r3, #16
 800dee4:	eba8 0801 	sub.w	r8, r8, r1
 800dee8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800deec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800def0:	fa1f f888 	uxth.w	r8, r8
 800def4:	1419      	asrs	r1, r3, #16
 800def6:	454e      	cmp	r6, r9
 800def8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800defc:	f84a 3b04 	str.w	r3, [sl], #4
 800df00:	d8e8      	bhi.n	800ded4 <__mdiff+0x80>
 800df02:	1b33      	subs	r3, r6, r4
 800df04:	3b15      	subs	r3, #21
 800df06:	f023 0303 	bic.w	r3, r3, #3
 800df0a:	3304      	adds	r3, #4
 800df0c:	3415      	adds	r4, #21
 800df0e:	42a6      	cmp	r6, r4
 800df10:	bf38      	it	cc
 800df12:	2304      	movcc	r3, #4
 800df14:	441d      	add	r5, r3
 800df16:	4473      	add	r3, lr
 800df18:	469e      	mov	lr, r3
 800df1a:	462e      	mov	r6, r5
 800df1c:	4566      	cmp	r6, ip
 800df1e:	d30e      	bcc.n	800df3e <__mdiff+0xea>
 800df20:	f10c 0203 	add.w	r2, ip, #3
 800df24:	1b52      	subs	r2, r2, r5
 800df26:	f022 0203 	bic.w	r2, r2, #3
 800df2a:	3d03      	subs	r5, #3
 800df2c:	45ac      	cmp	ip, r5
 800df2e:	bf38      	it	cc
 800df30:	2200      	movcc	r2, #0
 800df32:	4413      	add	r3, r2
 800df34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800df38:	b17a      	cbz	r2, 800df5a <__mdiff+0x106>
 800df3a:	6107      	str	r7, [r0, #16]
 800df3c:	e7a4      	b.n	800de88 <__mdiff+0x34>
 800df3e:	f856 8b04 	ldr.w	r8, [r6], #4
 800df42:	fa11 f288 	uxtah	r2, r1, r8
 800df46:	1414      	asrs	r4, r2, #16
 800df48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800df4c:	b292      	uxth	r2, r2
 800df4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800df52:	f84e 2b04 	str.w	r2, [lr], #4
 800df56:	1421      	asrs	r1, r4, #16
 800df58:	e7e0      	b.n	800df1c <__mdiff+0xc8>
 800df5a:	3f01      	subs	r7, #1
 800df5c:	e7ea      	b.n	800df34 <__mdiff+0xe0>
 800df5e:	bf00      	nop
 800df60:	0801203c 	.word	0x0801203c
 800df64:	080120ad 	.word	0x080120ad

0800df68 <__ulp>:
 800df68:	b082      	sub	sp, #8
 800df6a:	ed8d 0b00 	vstr	d0, [sp]
 800df6e:	9a01      	ldr	r2, [sp, #4]
 800df70:	4b0f      	ldr	r3, [pc, #60]	; (800dfb0 <__ulp+0x48>)
 800df72:	4013      	ands	r3, r2
 800df74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800df78:	2b00      	cmp	r3, #0
 800df7a:	dc08      	bgt.n	800df8e <__ulp+0x26>
 800df7c:	425b      	negs	r3, r3
 800df7e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800df82:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df86:	da04      	bge.n	800df92 <__ulp+0x2a>
 800df88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800df8c:	4113      	asrs	r3, r2
 800df8e:	2200      	movs	r2, #0
 800df90:	e008      	b.n	800dfa4 <__ulp+0x3c>
 800df92:	f1a2 0314 	sub.w	r3, r2, #20
 800df96:	2b1e      	cmp	r3, #30
 800df98:	bfda      	itte	le
 800df9a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800df9e:	40da      	lsrle	r2, r3
 800dfa0:	2201      	movgt	r2, #1
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	ec41 0b10 	vmov	d0, r0, r1
 800dfac:	b002      	add	sp, #8
 800dfae:	4770      	bx	lr
 800dfb0:	7ff00000 	.word	0x7ff00000

0800dfb4 <__b2d>:
 800dfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfb8:	6906      	ldr	r6, [r0, #16]
 800dfba:	f100 0814 	add.w	r8, r0, #20
 800dfbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dfc2:	1f37      	subs	r7, r6, #4
 800dfc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dfc8:	4610      	mov	r0, r2
 800dfca:	f7ff fd53 	bl	800da74 <__hi0bits>
 800dfce:	f1c0 0320 	rsb	r3, r0, #32
 800dfd2:	280a      	cmp	r0, #10
 800dfd4:	600b      	str	r3, [r1, #0]
 800dfd6:	491b      	ldr	r1, [pc, #108]	; (800e044 <__b2d+0x90>)
 800dfd8:	dc15      	bgt.n	800e006 <__b2d+0x52>
 800dfda:	f1c0 0c0b 	rsb	ip, r0, #11
 800dfde:	fa22 f30c 	lsr.w	r3, r2, ip
 800dfe2:	45b8      	cmp	r8, r7
 800dfe4:	ea43 0501 	orr.w	r5, r3, r1
 800dfe8:	bf34      	ite	cc
 800dfea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dfee:	2300      	movcs	r3, #0
 800dff0:	3015      	adds	r0, #21
 800dff2:	fa02 f000 	lsl.w	r0, r2, r0
 800dff6:	fa23 f30c 	lsr.w	r3, r3, ip
 800dffa:	4303      	orrs	r3, r0
 800dffc:	461c      	mov	r4, r3
 800dffe:	ec45 4b10 	vmov	d0, r4, r5
 800e002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e006:	45b8      	cmp	r8, r7
 800e008:	bf3a      	itte	cc
 800e00a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e00e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e012:	2300      	movcs	r3, #0
 800e014:	380b      	subs	r0, #11
 800e016:	d012      	beq.n	800e03e <__b2d+0x8a>
 800e018:	f1c0 0120 	rsb	r1, r0, #32
 800e01c:	fa23 f401 	lsr.w	r4, r3, r1
 800e020:	4082      	lsls	r2, r0
 800e022:	4322      	orrs	r2, r4
 800e024:	4547      	cmp	r7, r8
 800e026:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e02a:	bf8c      	ite	hi
 800e02c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e030:	2200      	movls	r2, #0
 800e032:	4083      	lsls	r3, r0
 800e034:	40ca      	lsrs	r2, r1
 800e036:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e03a:	4313      	orrs	r3, r2
 800e03c:	e7de      	b.n	800dffc <__b2d+0x48>
 800e03e:	ea42 0501 	orr.w	r5, r2, r1
 800e042:	e7db      	b.n	800dffc <__b2d+0x48>
 800e044:	3ff00000 	.word	0x3ff00000

0800e048 <__d2b>:
 800e048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e04c:	460f      	mov	r7, r1
 800e04e:	2101      	movs	r1, #1
 800e050:	ec59 8b10 	vmov	r8, r9, d0
 800e054:	4616      	mov	r6, r2
 800e056:	f7ff fc1b 	bl	800d890 <_Balloc>
 800e05a:	4604      	mov	r4, r0
 800e05c:	b930      	cbnz	r0, 800e06c <__d2b+0x24>
 800e05e:	4602      	mov	r2, r0
 800e060:	4b24      	ldr	r3, [pc, #144]	; (800e0f4 <__d2b+0xac>)
 800e062:	4825      	ldr	r0, [pc, #148]	; (800e0f8 <__d2b+0xb0>)
 800e064:	f240 310f 	movw	r1, #783	; 0x30f
 800e068:	f7fe f9c4 	bl	800c3f4 <__assert_func>
 800e06c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e074:	bb2d      	cbnz	r5, 800e0c2 <__d2b+0x7a>
 800e076:	9301      	str	r3, [sp, #4]
 800e078:	f1b8 0300 	subs.w	r3, r8, #0
 800e07c:	d026      	beq.n	800e0cc <__d2b+0x84>
 800e07e:	4668      	mov	r0, sp
 800e080:	9300      	str	r3, [sp, #0]
 800e082:	f7ff fd17 	bl	800dab4 <__lo0bits>
 800e086:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e08a:	b1e8      	cbz	r0, 800e0c8 <__d2b+0x80>
 800e08c:	f1c0 0320 	rsb	r3, r0, #32
 800e090:	fa02 f303 	lsl.w	r3, r2, r3
 800e094:	430b      	orrs	r3, r1
 800e096:	40c2      	lsrs	r2, r0
 800e098:	6163      	str	r3, [r4, #20]
 800e09a:	9201      	str	r2, [sp, #4]
 800e09c:	9b01      	ldr	r3, [sp, #4]
 800e09e:	61a3      	str	r3, [r4, #24]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	bf14      	ite	ne
 800e0a4:	2202      	movne	r2, #2
 800e0a6:	2201      	moveq	r2, #1
 800e0a8:	6122      	str	r2, [r4, #16]
 800e0aa:	b1bd      	cbz	r5, 800e0dc <__d2b+0x94>
 800e0ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e0b0:	4405      	add	r5, r0
 800e0b2:	603d      	str	r5, [r7, #0]
 800e0b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e0b8:	6030      	str	r0, [r6, #0]
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	b003      	add	sp, #12
 800e0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e0c6:	e7d6      	b.n	800e076 <__d2b+0x2e>
 800e0c8:	6161      	str	r1, [r4, #20]
 800e0ca:	e7e7      	b.n	800e09c <__d2b+0x54>
 800e0cc:	a801      	add	r0, sp, #4
 800e0ce:	f7ff fcf1 	bl	800dab4 <__lo0bits>
 800e0d2:	9b01      	ldr	r3, [sp, #4]
 800e0d4:	6163      	str	r3, [r4, #20]
 800e0d6:	3020      	adds	r0, #32
 800e0d8:	2201      	movs	r2, #1
 800e0da:	e7e5      	b.n	800e0a8 <__d2b+0x60>
 800e0dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e0e4:	6038      	str	r0, [r7, #0]
 800e0e6:	6918      	ldr	r0, [r3, #16]
 800e0e8:	f7ff fcc4 	bl	800da74 <__hi0bits>
 800e0ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0f0:	e7e2      	b.n	800e0b8 <__d2b+0x70>
 800e0f2:	bf00      	nop
 800e0f4:	0801203c 	.word	0x0801203c
 800e0f8:	080120ad 	.word	0x080120ad

0800e0fc <__ratio>:
 800e0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e100:	4688      	mov	r8, r1
 800e102:	4669      	mov	r1, sp
 800e104:	4681      	mov	r9, r0
 800e106:	f7ff ff55 	bl	800dfb4 <__b2d>
 800e10a:	a901      	add	r1, sp, #4
 800e10c:	4640      	mov	r0, r8
 800e10e:	ec55 4b10 	vmov	r4, r5, d0
 800e112:	f7ff ff4f 	bl	800dfb4 <__b2d>
 800e116:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e11a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e11e:	eba3 0c02 	sub.w	ip, r3, r2
 800e122:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e126:	1a9b      	subs	r3, r3, r2
 800e128:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e12c:	ec51 0b10 	vmov	r0, r1, d0
 800e130:	2b00      	cmp	r3, #0
 800e132:	bfd6      	itet	le
 800e134:	460a      	movle	r2, r1
 800e136:	462a      	movgt	r2, r5
 800e138:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e13c:	468b      	mov	fp, r1
 800e13e:	462f      	mov	r7, r5
 800e140:	bfd4      	ite	le
 800e142:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e146:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e14a:	4620      	mov	r0, r4
 800e14c:	ee10 2a10 	vmov	r2, s0
 800e150:	465b      	mov	r3, fp
 800e152:	4639      	mov	r1, r7
 800e154:	f7f2 fb7a 	bl	800084c <__aeabi_ddiv>
 800e158:	ec41 0b10 	vmov	d0, r0, r1
 800e15c:	b003      	add	sp, #12
 800e15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e162 <__copybits>:
 800e162:	3901      	subs	r1, #1
 800e164:	b570      	push	{r4, r5, r6, lr}
 800e166:	1149      	asrs	r1, r1, #5
 800e168:	6914      	ldr	r4, [r2, #16]
 800e16a:	3101      	adds	r1, #1
 800e16c:	f102 0314 	add.w	r3, r2, #20
 800e170:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e174:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e178:	1f05      	subs	r5, r0, #4
 800e17a:	42a3      	cmp	r3, r4
 800e17c:	d30c      	bcc.n	800e198 <__copybits+0x36>
 800e17e:	1aa3      	subs	r3, r4, r2
 800e180:	3b11      	subs	r3, #17
 800e182:	f023 0303 	bic.w	r3, r3, #3
 800e186:	3211      	adds	r2, #17
 800e188:	42a2      	cmp	r2, r4
 800e18a:	bf88      	it	hi
 800e18c:	2300      	movhi	r3, #0
 800e18e:	4418      	add	r0, r3
 800e190:	2300      	movs	r3, #0
 800e192:	4288      	cmp	r0, r1
 800e194:	d305      	bcc.n	800e1a2 <__copybits+0x40>
 800e196:	bd70      	pop	{r4, r5, r6, pc}
 800e198:	f853 6b04 	ldr.w	r6, [r3], #4
 800e19c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e1a0:	e7eb      	b.n	800e17a <__copybits+0x18>
 800e1a2:	f840 3b04 	str.w	r3, [r0], #4
 800e1a6:	e7f4      	b.n	800e192 <__copybits+0x30>

0800e1a8 <__any_on>:
 800e1a8:	f100 0214 	add.w	r2, r0, #20
 800e1ac:	6900      	ldr	r0, [r0, #16]
 800e1ae:	114b      	asrs	r3, r1, #5
 800e1b0:	4298      	cmp	r0, r3
 800e1b2:	b510      	push	{r4, lr}
 800e1b4:	db11      	blt.n	800e1da <__any_on+0x32>
 800e1b6:	dd0a      	ble.n	800e1ce <__any_on+0x26>
 800e1b8:	f011 011f 	ands.w	r1, r1, #31
 800e1bc:	d007      	beq.n	800e1ce <__any_on+0x26>
 800e1be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e1c2:	fa24 f001 	lsr.w	r0, r4, r1
 800e1c6:	fa00 f101 	lsl.w	r1, r0, r1
 800e1ca:	428c      	cmp	r4, r1
 800e1cc:	d10b      	bne.n	800e1e6 <__any_on+0x3e>
 800e1ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d803      	bhi.n	800e1de <__any_on+0x36>
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	bd10      	pop	{r4, pc}
 800e1da:	4603      	mov	r3, r0
 800e1dc:	e7f7      	b.n	800e1ce <__any_on+0x26>
 800e1de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1e2:	2900      	cmp	r1, #0
 800e1e4:	d0f5      	beq.n	800e1d2 <__any_on+0x2a>
 800e1e6:	2001      	movs	r0, #1
 800e1e8:	e7f6      	b.n	800e1d8 <__any_on+0x30>

0800e1ea <__ascii_wctomb>:
 800e1ea:	b149      	cbz	r1, 800e200 <__ascii_wctomb+0x16>
 800e1ec:	2aff      	cmp	r2, #255	; 0xff
 800e1ee:	bf85      	ittet	hi
 800e1f0:	238a      	movhi	r3, #138	; 0x8a
 800e1f2:	6003      	strhi	r3, [r0, #0]
 800e1f4:	700a      	strbls	r2, [r1, #0]
 800e1f6:	f04f 30ff 	movhi.w	r0, #4294967295
 800e1fa:	bf98      	it	ls
 800e1fc:	2001      	movls	r0, #1
 800e1fe:	4770      	bx	lr
 800e200:	4608      	mov	r0, r1
 800e202:	4770      	bx	lr

0800e204 <__ssputs_r>:
 800e204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e208:	688e      	ldr	r6, [r1, #8]
 800e20a:	461f      	mov	r7, r3
 800e20c:	42be      	cmp	r6, r7
 800e20e:	680b      	ldr	r3, [r1, #0]
 800e210:	4682      	mov	sl, r0
 800e212:	460c      	mov	r4, r1
 800e214:	4690      	mov	r8, r2
 800e216:	d82c      	bhi.n	800e272 <__ssputs_r+0x6e>
 800e218:	898a      	ldrh	r2, [r1, #12]
 800e21a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e21e:	d026      	beq.n	800e26e <__ssputs_r+0x6a>
 800e220:	6965      	ldr	r5, [r4, #20]
 800e222:	6909      	ldr	r1, [r1, #16]
 800e224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e228:	eba3 0901 	sub.w	r9, r3, r1
 800e22c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e230:	1c7b      	adds	r3, r7, #1
 800e232:	444b      	add	r3, r9
 800e234:	106d      	asrs	r5, r5, #1
 800e236:	429d      	cmp	r5, r3
 800e238:	bf38      	it	cc
 800e23a:	461d      	movcc	r5, r3
 800e23c:	0553      	lsls	r3, r2, #21
 800e23e:	d527      	bpl.n	800e290 <__ssputs_r+0x8c>
 800e240:	4629      	mov	r1, r5
 800e242:	f7fc f83b 	bl	800a2bc <_malloc_r>
 800e246:	4606      	mov	r6, r0
 800e248:	b360      	cbz	r0, 800e2a4 <__ssputs_r+0xa0>
 800e24a:	6921      	ldr	r1, [r4, #16]
 800e24c:	464a      	mov	r2, r9
 800e24e:	f7fe f8b4 	bl	800c3ba <memcpy>
 800e252:	89a3      	ldrh	r3, [r4, #12]
 800e254:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e25c:	81a3      	strh	r3, [r4, #12]
 800e25e:	6126      	str	r6, [r4, #16]
 800e260:	6165      	str	r5, [r4, #20]
 800e262:	444e      	add	r6, r9
 800e264:	eba5 0509 	sub.w	r5, r5, r9
 800e268:	6026      	str	r6, [r4, #0]
 800e26a:	60a5      	str	r5, [r4, #8]
 800e26c:	463e      	mov	r6, r7
 800e26e:	42be      	cmp	r6, r7
 800e270:	d900      	bls.n	800e274 <__ssputs_r+0x70>
 800e272:	463e      	mov	r6, r7
 800e274:	6820      	ldr	r0, [r4, #0]
 800e276:	4632      	mov	r2, r6
 800e278:	4641      	mov	r1, r8
 800e27a:	f000 f9db 	bl	800e634 <memmove>
 800e27e:	68a3      	ldr	r3, [r4, #8]
 800e280:	1b9b      	subs	r3, r3, r6
 800e282:	60a3      	str	r3, [r4, #8]
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	4433      	add	r3, r6
 800e288:	6023      	str	r3, [r4, #0]
 800e28a:	2000      	movs	r0, #0
 800e28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e290:	462a      	mov	r2, r5
 800e292:	f000 fa06 	bl	800e6a2 <_realloc_r>
 800e296:	4606      	mov	r6, r0
 800e298:	2800      	cmp	r0, #0
 800e29a:	d1e0      	bne.n	800e25e <__ssputs_r+0x5a>
 800e29c:	6921      	ldr	r1, [r4, #16]
 800e29e:	4650      	mov	r0, sl
 800e2a0:	f7fe ff40 	bl	800d124 <_free_r>
 800e2a4:	230c      	movs	r3, #12
 800e2a6:	f8ca 3000 	str.w	r3, [sl]
 800e2aa:	89a3      	ldrh	r3, [r4, #12]
 800e2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2b0:	81a3      	strh	r3, [r4, #12]
 800e2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b6:	e7e9      	b.n	800e28c <__ssputs_r+0x88>

0800e2b8 <_svfiprintf_r>:
 800e2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2bc:	4698      	mov	r8, r3
 800e2be:	898b      	ldrh	r3, [r1, #12]
 800e2c0:	061b      	lsls	r3, r3, #24
 800e2c2:	b09d      	sub	sp, #116	; 0x74
 800e2c4:	4607      	mov	r7, r0
 800e2c6:	460d      	mov	r5, r1
 800e2c8:	4614      	mov	r4, r2
 800e2ca:	d50e      	bpl.n	800e2ea <_svfiprintf_r+0x32>
 800e2cc:	690b      	ldr	r3, [r1, #16]
 800e2ce:	b963      	cbnz	r3, 800e2ea <_svfiprintf_r+0x32>
 800e2d0:	2140      	movs	r1, #64	; 0x40
 800e2d2:	f7fb fff3 	bl	800a2bc <_malloc_r>
 800e2d6:	6028      	str	r0, [r5, #0]
 800e2d8:	6128      	str	r0, [r5, #16]
 800e2da:	b920      	cbnz	r0, 800e2e6 <_svfiprintf_r+0x2e>
 800e2dc:	230c      	movs	r3, #12
 800e2de:	603b      	str	r3, [r7, #0]
 800e2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e4:	e0d0      	b.n	800e488 <_svfiprintf_r+0x1d0>
 800e2e6:	2340      	movs	r3, #64	; 0x40
 800e2e8:	616b      	str	r3, [r5, #20]
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ee:	2320      	movs	r3, #32
 800e2f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2f8:	2330      	movs	r3, #48	; 0x30
 800e2fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e4a0 <_svfiprintf_r+0x1e8>
 800e2fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e302:	f04f 0901 	mov.w	r9, #1
 800e306:	4623      	mov	r3, r4
 800e308:	469a      	mov	sl, r3
 800e30a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e30e:	b10a      	cbz	r2, 800e314 <_svfiprintf_r+0x5c>
 800e310:	2a25      	cmp	r2, #37	; 0x25
 800e312:	d1f9      	bne.n	800e308 <_svfiprintf_r+0x50>
 800e314:	ebba 0b04 	subs.w	fp, sl, r4
 800e318:	d00b      	beq.n	800e332 <_svfiprintf_r+0x7a>
 800e31a:	465b      	mov	r3, fp
 800e31c:	4622      	mov	r2, r4
 800e31e:	4629      	mov	r1, r5
 800e320:	4638      	mov	r0, r7
 800e322:	f7ff ff6f 	bl	800e204 <__ssputs_r>
 800e326:	3001      	adds	r0, #1
 800e328:	f000 80a9 	beq.w	800e47e <_svfiprintf_r+0x1c6>
 800e32c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e32e:	445a      	add	r2, fp
 800e330:	9209      	str	r2, [sp, #36]	; 0x24
 800e332:	f89a 3000 	ldrb.w	r3, [sl]
 800e336:	2b00      	cmp	r3, #0
 800e338:	f000 80a1 	beq.w	800e47e <_svfiprintf_r+0x1c6>
 800e33c:	2300      	movs	r3, #0
 800e33e:	f04f 32ff 	mov.w	r2, #4294967295
 800e342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e346:	f10a 0a01 	add.w	sl, sl, #1
 800e34a:	9304      	str	r3, [sp, #16]
 800e34c:	9307      	str	r3, [sp, #28]
 800e34e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e352:	931a      	str	r3, [sp, #104]	; 0x68
 800e354:	4654      	mov	r4, sl
 800e356:	2205      	movs	r2, #5
 800e358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e35c:	4850      	ldr	r0, [pc, #320]	; (800e4a0 <_svfiprintf_r+0x1e8>)
 800e35e:	f7f1 ff37 	bl	80001d0 <memchr>
 800e362:	9a04      	ldr	r2, [sp, #16]
 800e364:	b9d8      	cbnz	r0, 800e39e <_svfiprintf_r+0xe6>
 800e366:	06d0      	lsls	r0, r2, #27
 800e368:	bf44      	itt	mi
 800e36a:	2320      	movmi	r3, #32
 800e36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e370:	0711      	lsls	r1, r2, #28
 800e372:	bf44      	itt	mi
 800e374:	232b      	movmi	r3, #43	; 0x2b
 800e376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e37a:	f89a 3000 	ldrb.w	r3, [sl]
 800e37e:	2b2a      	cmp	r3, #42	; 0x2a
 800e380:	d015      	beq.n	800e3ae <_svfiprintf_r+0xf6>
 800e382:	9a07      	ldr	r2, [sp, #28]
 800e384:	4654      	mov	r4, sl
 800e386:	2000      	movs	r0, #0
 800e388:	f04f 0c0a 	mov.w	ip, #10
 800e38c:	4621      	mov	r1, r4
 800e38e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e392:	3b30      	subs	r3, #48	; 0x30
 800e394:	2b09      	cmp	r3, #9
 800e396:	d94d      	bls.n	800e434 <_svfiprintf_r+0x17c>
 800e398:	b1b0      	cbz	r0, 800e3c8 <_svfiprintf_r+0x110>
 800e39a:	9207      	str	r2, [sp, #28]
 800e39c:	e014      	b.n	800e3c8 <_svfiprintf_r+0x110>
 800e39e:	eba0 0308 	sub.w	r3, r0, r8
 800e3a2:	fa09 f303 	lsl.w	r3, r9, r3
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	9304      	str	r3, [sp, #16]
 800e3aa:	46a2      	mov	sl, r4
 800e3ac:	e7d2      	b.n	800e354 <_svfiprintf_r+0x9c>
 800e3ae:	9b03      	ldr	r3, [sp, #12]
 800e3b0:	1d19      	adds	r1, r3, #4
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	9103      	str	r1, [sp, #12]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	bfbb      	ittet	lt
 800e3ba:	425b      	neglt	r3, r3
 800e3bc:	f042 0202 	orrlt.w	r2, r2, #2
 800e3c0:	9307      	strge	r3, [sp, #28]
 800e3c2:	9307      	strlt	r3, [sp, #28]
 800e3c4:	bfb8      	it	lt
 800e3c6:	9204      	strlt	r2, [sp, #16]
 800e3c8:	7823      	ldrb	r3, [r4, #0]
 800e3ca:	2b2e      	cmp	r3, #46	; 0x2e
 800e3cc:	d10c      	bne.n	800e3e8 <_svfiprintf_r+0x130>
 800e3ce:	7863      	ldrb	r3, [r4, #1]
 800e3d0:	2b2a      	cmp	r3, #42	; 0x2a
 800e3d2:	d134      	bne.n	800e43e <_svfiprintf_r+0x186>
 800e3d4:	9b03      	ldr	r3, [sp, #12]
 800e3d6:	1d1a      	adds	r2, r3, #4
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	9203      	str	r2, [sp, #12]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	bfb8      	it	lt
 800e3e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3e4:	3402      	adds	r4, #2
 800e3e6:	9305      	str	r3, [sp, #20]
 800e3e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e4b0 <_svfiprintf_r+0x1f8>
 800e3ec:	7821      	ldrb	r1, [r4, #0]
 800e3ee:	2203      	movs	r2, #3
 800e3f0:	4650      	mov	r0, sl
 800e3f2:	f7f1 feed 	bl	80001d0 <memchr>
 800e3f6:	b138      	cbz	r0, 800e408 <_svfiprintf_r+0x150>
 800e3f8:	9b04      	ldr	r3, [sp, #16]
 800e3fa:	eba0 000a 	sub.w	r0, r0, sl
 800e3fe:	2240      	movs	r2, #64	; 0x40
 800e400:	4082      	lsls	r2, r0
 800e402:	4313      	orrs	r3, r2
 800e404:	3401      	adds	r4, #1
 800e406:	9304      	str	r3, [sp, #16]
 800e408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e40c:	4825      	ldr	r0, [pc, #148]	; (800e4a4 <_svfiprintf_r+0x1ec>)
 800e40e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e412:	2206      	movs	r2, #6
 800e414:	f7f1 fedc 	bl	80001d0 <memchr>
 800e418:	2800      	cmp	r0, #0
 800e41a:	d038      	beq.n	800e48e <_svfiprintf_r+0x1d6>
 800e41c:	4b22      	ldr	r3, [pc, #136]	; (800e4a8 <_svfiprintf_r+0x1f0>)
 800e41e:	bb1b      	cbnz	r3, 800e468 <_svfiprintf_r+0x1b0>
 800e420:	9b03      	ldr	r3, [sp, #12]
 800e422:	3307      	adds	r3, #7
 800e424:	f023 0307 	bic.w	r3, r3, #7
 800e428:	3308      	adds	r3, #8
 800e42a:	9303      	str	r3, [sp, #12]
 800e42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e42e:	4433      	add	r3, r6
 800e430:	9309      	str	r3, [sp, #36]	; 0x24
 800e432:	e768      	b.n	800e306 <_svfiprintf_r+0x4e>
 800e434:	fb0c 3202 	mla	r2, ip, r2, r3
 800e438:	460c      	mov	r4, r1
 800e43a:	2001      	movs	r0, #1
 800e43c:	e7a6      	b.n	800e38c <_svfiprintf_r+0xd4>
 800e43e:	2300      	movs	r3, #0
 800e440:	3401      	adds	r4, #1
 800e442:	9305      	str	r3, [sp, #20]
 800e444:	4619      	mov	r1, r3
 800e446:	f04f 0c0a 	mov.w	ip, #10
 800e44a:	4620      	mov	r0, r4
 800e44c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e450:	3a30      	subs	r2, #48	; 0x30
 800e452:	2a09      	cmp	r2, #9
 800e454:	d903      	bls.n	800e45e <_svfiprintf_r+0x1a6>
 800e456:	2b00      	cmp	r3, #0
 800e458:	d0c6      	beq.n	800e3e8 <_svfiprintf_r+0x130>
 800e45a:	9105      	str	r1, [sp, #20]
 800e45c:	e7c4      	b.n	800e3e8 <_svfiprintf_r+0x130>
 800e45e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e462:	4604      	mov	r4, r0
 800e464:	2301      	movs	r3, #1
 800e466:	e7f0      	b.n	800e44a <_svfiprintf_r+0x192>
 800e468:	ab03      	add	r3, sp, #12
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	462a      	mov	r2, r5
 800e46e:	4b0f      	ldr	r3, [pc, #60]	; (800e4ac <_svfiprintf_r+0x1f4>)
 800e470:	a904      	add	r1, sp, #16
 800e472:	4638      	mov	r0, r7
 800e474:	f7fc ff56 	bl	800b324 <_printf_float>
 800e478:	1c42      	adds	r2, r0, #1
 800e47a:	4606      	mov	r6, r0
 800e47c:	d1d6      	bne.n	800e42c <_svfiprintf_r+0x174>
 800e47e:	89ab      	ldrh	r3, [r5, #12]
 800e480:	065b      	lsls	r3, r3, #25
 800e482:	f53f af2d 	bmi.w	800e2e0 <_svfiprintf_r+0x28>
 800e486:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e488:	b01d      	add	sp, #116	; 0x74
 800e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48e:	ab03      	add	r3, sp, #12
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	462a      	mov	r2, r5
 800e494:	4b05      	ldr	r3, [pc, #20]	; (800e4ac <_svfiprintf_r+0x1f4>)
 800e496:	a904      	add	r1, sp, #16
 800e498:	4638      	mov	r0, r7
 800e49a:	f7fd f9e7 	bl	800b86c <_printf_i>
 800e49e:	e7eb      	b.n	800e478 <_svfiprintf_r+0x1c0>
 800e4a0:	08012204 	.word	0x08012204
 800e4a4:	0801220e 	.word	0x0801220e
 800e4a8:	0800b325 	.word	0x0800b325
 800e4ac:	0800e205 	.word	0x0800e205
 800e4b0:	0801220a 	.word	0x0801220a

0800e4b4 <__sflush_r>:
 800e4b4:	898a      	ldrh	r2, [r1, #12]
 800e4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ba:	4605      	mov	r5, r0
 800e4bc:	0710      	lsls	r0, r2, #28
 800e4be:	460c      	mov	r4, r1
 800e4c0:	d458      	bmi.n	800e574 <__sflush_r+0xc0>
 800e4c2:	684b      	ldr	r3, [r1, #4]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	dc05      	bgt.n	800e4d4 <__sflush_r+0x20>
 800e4c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	dc02      	bgt.n	800e4d4 <__sflush_r+0x20>
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4d6:	2e00      	cmp	r6, #0
 800e4d8:	d0f9      	beq.n	800e4ce <__sflush_r+0x1a>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4e0:	682f      	ldr	r7, [r5, #0]
 800e4e2:	6a21      	ldr	r1, [r4, #32]
 800e4e4:	602b      	str	r3, [r5, #0]
 800e4e6:	d032      	beq.n	800e54e <__sflush_r+0x9a>
 800e4e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4ea:	89a3      	ldrh	r3, [r4, #12]
 800e4ec:	075a      	lsls	r2, r3, #29
 800e4ee:	d505      	bpl.n	800e4fc <__sflush_r+0x48>
 800e4f0:	6863      	ldr	r3, [r4, #4]
 800e4f2:	1ac0      	subs	r0, r0, r3
 800e4f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4f6:	b10b      	cbz	r3, 800e4fc <__sflush_r+0x48>
 800e4f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4fa:	1ac0      	subs	r0, r0, r3
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	4602      	mov	r2, r0
 800e500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e502:	6a21      	ldr	r1, [r4, #32]
 800e504:	4628      	mov	r0, r5
 800e506:	47b0      	blx	r6
 800e508:	1c43      	adds	r3, r0, #1
 800e50a:	89a3      	ldrh	r3, [r4, #12]
 800e50c:	d106      	bne.n	800e51c <__sflush_r+0x68>
 800e50e:	6829      	ldr	r1, [r5, #0]
 800e510:	291d      	cmp	r1, #29
 800e512:	d82b      	bhi.n	800e56c <__sflush_r+0xb8>
 800e514:	4a29      	ldr	r2, [pc, #164]	; (800e5bc <__sflush_r+0x108>)
 800e516:	410a      	asrs	r2, r1
 800e518:	07d6      	lsls	r6, r2, #31
 800e51a:	d427      	bmi.n	800e56c <__sflush_r+0xb8>
 800e51c:	2200      	movs	r2, #0
 800e51e:	6062      	str	r2, [r4, #4]
 800e520:	04d9      	lsls	r1, r3, #19
 800e522:	6922      	ldr	r2, [r4, #16]
 800e524:	6022      	str	r2, [r4, #0]
 800e526:	d504      	bpl.n	800e532 <__sflush_r+0x7e>
 800e528:	1c42      	adds	r2, r0, #1
 800e52a:	d101      	bne.n	800e530 <__sflush_r+0x7c>
 800e52c:	682b      	ldr	r3, [r5, #0]
 800e52e:	b903      	cbnz	r3, 800e532 <__sflush_r+0x7e>
 800e530:	6560      	str	r0, [r4, #84]	; 0x54
 800e532:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e534:	602f      	str	r7, [r5, #0]
 800e536:	2900      	cmp	r1, #0
 800e538:	d0c9      	beq.n	800e4ce <__sflush_r+0x1a>
 800e53a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e53e:	4299      	cmp	r1, r3
 800e540:	d002      	beq.n	800e548 <__sflush_r+0x94>
 800e542:	4628      	mov	r0, r5
 800e544:	f7fe fdee 	bl	800d124 <_free_r>
 800e548:	2000      	movs	r0, #0
 800e54a:	6360      	str	r0, [r4, #52]	; 0x34
 800e54c:	e7c0      	b.n	800e4d0 <__sflush_r+0x1c>
 800e54e:	2301      	movs	r3, #1
 800e550:	4628      	mov	r0, r5
 800e552:	47b0      	blx	r6
 800e554:	1c41      	adds	r1, r0, #1
 800e556:	d1c8      	bne.n	800e4ea <__sflush_r+0x36>
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d0c5      	beq.n	800e4ea <__sflush_r+0x36>
 800e55e:	2b1d      	cmp	r3, #29
 800e560:	d001      	beq.n	800e566 <__sflush_r+0xb2>
 800e562:	2b16      	cmp	r3, #22
 800e564:	d101      	bne.n	800e56a <__sflush_r+0xb6>
 800e566:	602f      	str	r7, [r5, #0]
 800e568:	e7b1      	b.n	800e4ce <__sflush_r+0x1a>
 800e56a:	89a3      	ldrh	r3, [r4, #12]
 800e56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e570:	81a3      	strh	r3, [r4, #12]
 800e572:	e7ad      	b.n	800e4d0 <__sflush_r+0x1c>
 800e574:	690f      	ldr	r7, [r1, #16]
 800e576:	2f00      	cmp	r7, #0
 800e578:	d0a9      	beq.n	800e4ce <__sflush_r+0x1a>
 800e57a:	0793      	lsls	r3, r2, #30
 800e57c:	680e      	ldr	r6, [r1, #0]
 800e57e:	bf08      	it	eq
 800e580:	694b      	ldreq	r3, [r1, #20]
 800e582:	600f      	str	r7, [r1, #0]
 800e584:	bf18      	it	ne
 800e586:	2300      	movne	r3, #0
 800e588:	eba6 0807 	sub.w	r8, r6, r7
 800e58c:	608b      	str	r3, [r1, #8]
 800e58e:	f1b8 0f00 	cmp.w	r8, #0
 800e592:	dd9c      	ble.n	800e4ce <__sflush_r+0x1a>
 800e594:	6a21      	ldr	r1, [r4, #32]
 800e596:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e598:	4643      	mov	r3, r8
 800e59a:	463a      	mov	r2, r7
 800e59c:	4628      	mov	r0, r5
 800e59e:	47b0      	blx	r6
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	dc06      	bgt.n	800e5b2 <__sflush_r+0xfe>
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5aa:	81a3      	strh	r3, [r4, #12]
 800e5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b0:	e78e      	b.n	800e4d0 <__sflush_r+0x1c>
 800e5b2:	4407      	add	r7, r0
 800e5b4:	eba8 0800 	sub.w	r8, r8, r0
 800e5b8:	e7e9      	b.n	800e58e <__sflush_r+0xda>
 800e5ba:	bf00      	nop
 800e5bc:	dfbffffe 	.word	0xdfbffffe

0800e5c0 <_fflush_r>:
 800e5c0:	b538      	push	{r3, r4, r5, lr}
 800e5c2:	690b      	ldr	r3, [r1, #16]
 800e5c4:	4605      	mov	r5, r0
 800e5c6:	460c      	mov	r4, r1
 800e5c8:	b913      	cbnz	r3, 800e5d0 <_fflush_r+0x10>
 800e5ca:	2500      	movs	r5, #0
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	b118      	cbz	r0, 800e5da <_fflush_r+0x1a>
 800e5d2:	6a03      	ldr	r3, [r0, #32]
 800e5d4:	b90b      	cbnz	r3, 800e5da <_fflush_r+0x1a>
 800e5d6:	f7fd fd07 	bl	800bfe8 <__sinit>
 800e5da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d0f3      	beq.n	800e5ca <_fflush_r+0xa>
 800e5e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5e4:	07d0      	lsls	r0, r2, #31
 800e5e6:	d404      	bmi.n	800e5f2 <_fflush_r+0x32>
 800e5e8:	0599      	lsls	r1, r3, #22
 800e5ea:	d402      	bmi.n	800e5f2 <_fflush_r+0x32>
 800e5ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ee:	f7fd feda 	bl	800c3a6 <__retarget_lock_acquire_recursive>
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	4621      	mov	r1, r4
 800e5f6:	f7ff ff5d 	bl	800e4b4 <__sflush_r>
 800e5fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5fc:	07da      	lsls	r2, r3, #31
 800e5fe:	4605      	mov	r5, r0
 800e600:	d4e4      	bmi.n	800e5cc <_fflush_r+0xc>
 800e602:	89a3      	ldrh	r3, [r4, #12]
 800e604:	059b      	lsls	r3, r3, #22
 800e606:	d4e1      	bmi.n	800e5cc <_fflush_r+0xc>
 800e608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e60a:	f7fd fecd 	bl	800c3a8 <__retarget_lock_release_recursive>
 800e60e:	e7dd      	b.n	800e5cc <_fflush_r+0xc>

0800e610 <fiprintf>:
 800e610:	b40e      	push	{r1, r2, r3}
 800e612:	b503      	push	{r0, r1, lr}
 800e614:	4601      	mov	r1, r0
 800e616:	ab03      	add	r3, sp, #12
 800e618:	4805      	ldr	r0, [pc, #20]	; (800e630 <fiprintf+0x20>)
 800e61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61e:	6800      	ldr	r0, [r0, #0]
 800e620:	9301      	str	r3, [sp, #4]
 800e622:	f000 f897 	bl	800e754 <_vfiprintf_r>
 800e626:	b002      	add	sp, #8
 800e628:	f85d eb04 	ldr.w	lr, [sp], #4
 800e62c:	b003      	add	sp, #12
 800e62e:	4770      	bx	lr
 800e630:	200001f0 	.word	0x200001f0

0800e634 <memmove>:
 800e634:	4288      	cmp	r0, r1
 800e636:	b510      	push	{r4, lr}
 800e638:	eb01 0402 	add.w	r4, r1, r2
 800e63c:	d902      	bls.n	800e644 <memmove+0x10>
 800e63e:	4284      	cmp	r4, r0
 800e640:	4623      	mov	r3, r4
 800e642:	d807      	bhi.n	800e654 <memmove+0x20>
 800e644:	1e43      	subs	r3, r0, #1
 800e646:	42a1      	cmp	r1, r4
 800e648:	d008      	beq.n	800e65c <memmove+0x28>
 800e64a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e64e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e652:	e7f8      	b.n	800e646 <memmove+0x12>
 800e654:	4402      	add	r2, r0
 800e656:	4601      	mov	r1, r0
 800e658:	428a      	cmp	r2, r1
 800e65a:	d100      	bne.n	800e65e <memmove+0x2a>
 800e65c:	bd10      	pop	{r4, pc}
 800e65e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e666:	e7f7      	b.n	800e658 <memmove+0x24>

0800e668 <abort>:
 800e668:	b508      	push	{r3, lr}
 800e66a:	2006      	movs	r0, #6
 800e66c:	f000 fa4a 	bl	800eb04 <raise>
 800e670:	2001      	movs	r0, #1
 800e672:	f7f5 ff2d 	bl	80044d0 <_exit>

0800e676 <_calloc_r>:
 800e676:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e678:	fba1 2402 	umull	r2, r4, r1, r2
 800e67c:	b94c      	cbnz	r4, 800e692 <_calloc_r+0x1c>
 800e67e:	4611      	mov	r1, r2
 800e680:	9201      	str	r2, [sp, #4]
 800e682:	f7fb fe1b 	bl	800a2bc <_malloc_r>
 800e686:	9a01      	ldr	r2, [sp, #4]
 800e688:	4605      	mov	r5, r0
 800e68a:	b930      	cbnz	r0, 800e69a <_calloc_r+0x24>
 800e68c:	4628      	mov	r0, r5
 800e68e:	b003      	add	sp, #12
 800e690:	bd30      	pop	{r4, r5, pc}
 800e692:	220c      	movs	r2, #12
 800e694:	6002      	str	r2, [r0, #0]
 800e696:	2500      	movs	r5, #0
 800e698:	e7f8      	b.n	800e68c <_calloc_r+0x16>
 800e69a:	4621      	mov	r1, r4
 800e69c:	f7fd fd71 	bl	800c182 <memset>
 800e6a0:	e7f4      	b.n	800e68c <_calloc_r+0x16>

0800e6a2 <_realloc_r>:
 800e6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a6:	4680      	mov	r8, r0
 800e6a8:	4614      	mov	r4, r2
 800e6aa:	460e      	mov	r6, r1
 800e6ac:	b921      	cbnz	r1, 800e6b8 <_realloc_r+0x16>
 800e6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	f7fb be02 	b.w	800a2bc <_malloc_r>
 800e6b8:	b92a      	cbnz	r2, 800e6c6 <_realloc_r+0x24>
 800e6ba:	f7fe fd33 	bl	800d124 <_free_r>
 800e6be:	4625      	mov	r5, r4
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c6:	f000 fa39 	bl	800eb3c <_malloc_usable_size_r>
 800e6ca:	4284      	cmp	r4, r0
 800e6cc:	4607      	mov	r7, r0
 800e6ce:	d802      	bhi.n	800e6d6 <_realloc_r+0x34>
 800e6d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e6d4:	d812      	bhi.n	800e6fc <_realloc_r+0x5a>
 800e6d6:	4621      	mov	r1, r4
 800e6d8:	4640      	mov	r0, r8
 800e6da:	f7fb fdef 	bl	800a2bc <_malloc_r>
 800e6de:	4605      	mov	r5, r0
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d0ed      	beq.n	800e6c0 <_realloc_r+0x1e>
 800e6e4:	42bc      	cmp	r4, r7
 800e6e6:	4622      	mov	r2, r4
 800e6e8:	4631      	mov	r1, r6
 800e6ea:	bf28      	it	cs
 800e6ec:	463a      	movcs	r2, r7
 800e6ee:	f7fd fe64 	bl	800c3ba <memcpy>
 800e6f2:	4631      	mov	r1, r6
 800e6f4:	4640      	mov	r0, r8
 800e6f6:	f7fe fd15 	bl	800d124 <_free_r>
 800e6fa:	e7e1      	b.n	800e6c0 <_realloc_r+0x1e>
 800e6fc:	4635      	mov	r5, r6
 800e6fe:	e7df      	b.n	800e6c0 <_realloc_r+0x1e>

0800e700 <__sfputc_r>:
 800e700:	6893      	ldr	r3, [r2, #8]
 800e702:	3b01      	subs	r3, #1
 800e704:	2b00      	cmp	r3, #0
 800e706:	b410      	push	{r4}
 800e708:	6093      	str	r3, [r2, #8]
 800e70a:	da08      	bge.n	800e71e <__sfputc_r+0x1e>
 800e70c:	6994      	ldr	r4, [r2, #24]
 800e70e:	42a3      	cmp	r3, r4
 800e710:	db01      	blt.n	800e716 <__sfputc_r+0x16>
 800e712:	290a      	cmp	r1, #10
 800e714:	d103      	bne.n	800e71e <__sfputc_r+0x1e>
 800e716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e71a:	f000 b935 	b.w	800e988 <__swbuf_r>
 800e71e:	6813      	ldr	r3, [r2, #0]
 800e720:	1c58      	adds	r0, r3, #1
 800e722:	6010      	str	r0, [r2, #0]
 800e724:	7019      	strb	r1, [r3, #0]
 800e726:	4608      	mov	r0, r1
 800e728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e72c:	4770      	bx	lr

0800e72e <__sfputs_r>:
 800e72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e730:	4606      	mov	r6, r0
 800e732:	460f      	mov	r7, r1
 800e734:	4614      	mov	r4, r2
 800e736:	18d5      	adds	r5, r2, r3
 800e738:	42ac      	cmp	r4, r5
 800e73a:	d101      	bne.n	800e740 <__sfputs_r+0x12>
 800e73c:	2000      	movs	r0, #0
 800e73e:	e007      	b.n	800e750 <__sfputs_r+0x22>
 800e740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e744:	463a      	mov	r2, r7
 800e746:	4630      	mov	r0, r6
 800e748:	f7ff ffda 	bl	800e700 <__sfputc_r>
 800e74c:	1c43      	adds	r3, r0, #1
 800e74e:	d1f3      	bne.n	800e738 <__sfputs_r+0xa>
 800e750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e754 <_vfiprintf_r>:
 800e754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e758:	460d      	mov	r5, r1
 800e75a:	b09d      	sub	sp, #116	; 0x74
 800e75c:	4614      	mov	r4, r2
 800e75e:	4698      	mov	r8, r3
 800e760:	4606      	mov	r6, r0
 800e762:	b118      	cbz	r0, 800e76c <_vfiprintf_r+0x18>
 800e764:	6a03      	ldr	r3, [r0, #32]
 800e766:	b90b      	cbnz	r3, 800e76c <_vfiprintf_r+0x18>
 800e768:	f7fd fc3e 	bl	800bfe8 <__sinit>
 800e76c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e76e:	07d9      	lsls	r1, r3, #31
 800e770:	d405      	bmi.n	800e77e <_vfiprintf_r+0x2a>
 800e772:	89ab      	ldrh	r3, [r5, #12]
 800e774:	059a      	lsls	r2, r3, #22
 800e776:	d402      	bmi.n	800e77e <_vfiprintf_r+0x2a>
 800e778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e77a:	f7fd fe14 	bl	800c3a6 <__retarget_lock_acquire_recursive>
 800e77e:	89ab      	ldrh	r3, [r5, #12]
 800e780:	071b      	lsls	r3, r3, #28
 800e782:	d501      	bpl.n	800e788 <_vfiprintf_r+0x34>
 800e784:	692b      	ldr	r3, [r5, #16]
 800e786:	b99b      	cbnz	r3, 800e7b0 <_vfiprintf_r+0x5c>
 800e788:	4629      	mov	r1, r5
 800e78a:	4630      	mov	r0, r6
 800e78c:	f000 f93a 	bl	800ea04 <__swsetup_r>
 800e790:	b170      	cbz	r0, 800e7b0 <_vfiprintf_r+0x5c>
 800e792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e794:	07dc      	lsls	r4, r3, #31
 800e796:	d504      	bpl.n	800e7a2 <_vfiprintf_r+0x4e>
 800e798:	f04f 30ff 	mov.w	r0, #4294967295
 800e79c:	b01d      	add	sp, #116	; 0x74
 800e79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a2:	89ab      	ldrh	r3, [r5, #12]
 800e7a4:	0598      	lsls	r0, r3, #22
 800e7a6:	d4f7      	bmi.n	800e798 <_vfiprintf_r+0x44>
 800e7a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7aa:	f7fd fdfd 	bl	800c3a8 <__retarget_lock_release_recursive>
 800e7ae:	e7f3      	b.n	800e798 <_vfiprintf_r+0x44>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e7b4:	2320      	movs	r3, #32
 800e7b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7be:	2330      	movs	r3, #48	; 0x30
 800e7c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e974 <_vfiprintf_r+0x220>
 800e7c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7c8:	f04f 0901 	mov.w	r9, #1
 800e7cc:	4623      	mov	r3, r4
 800e7ce:	469a      	mov	sl, r3
 800e7d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7d4:	b10a      	cbz	r2, 800e7da <_vfiprintf_r+0x86>
 800e7d6:	2a25      	cmp	r2, #37	; 0x25
 800e7d8:	d1f9      	bne.n	800e7ce <_vfiprintf_r+0x7a>
 800e7da:	ebba 0b04 	subs.w	fp, sl, r4
 800e7de:	d00b      	beq.n	800e7f8 <_vfiprintf_r+0xa4>
 800e7e0:	465b      	mov	r3, fp
 800e7e2:	4622      	mov	r2, r4
 800e7e4:	4629      	mov	r1, r5
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	f7ff ffa1 	bl	800e72e <__sfputs_r>
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	f000 80a9 	beq.w	800e944 <_vfiprintf_r+0x1f0>
 800e7f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7f4:	445a      	add	r2, fp
 800e7f6:	9209      	str	r2, [sp, #36]	; 0x24
 800e7f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f000 80a1 	beq.w	800e944 <_vfiprintf_r+0x1f0>
 800e802:	2300      	movs	r3, #0
 800e804:	f04f 32ff 	mov.w	r2, #4294967295
 800e808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e80c:	f10a 0a01 	add.w	sl, sl, #1
 800e810:	9304      	str	r3, [sp, #16]
 800e812:	9307      	str	r3, [sp, #28]
 800e814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e818:	931a      	str	r3, [sp, #104]	; 0x68
 800e81a:	4654      	mov	r4, sl
 800e81c:	2205      	movs	r2, #5
 800e81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e822:	4854      	ldr	r0, [pc, #336]	; (800e974 <_vfiprintf_r+0x220>)
 800e824:	f7f1 fcd4 	bl	80001d0 <memchr>
 800e828:	9a04      	ldr	r2, [sp, #16]
 800e82a:	b9d8      	cbnz	r0, 800e864 <_vfiprintf_r+0x110>
 800e82c:	06d1      	lsls	r1, r2, #27
 800e82e:	bf44      	itt	mi
 800e830:	2320      	movmi	r3, #32
 800e832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e836:	0713      	lsls	r3, r2, #28
 800e838:	bf44      	itt	mi
 800e83a:	232b      	movmi	r3, #43	; 0x2b
 800e83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e840:	f89a 3000 	ldrb.w	r3, [sl]
 800e844:	2b2a      	cmp	r3, #42	; 0x2a
 800e846:	d015      	beq.n	800e874 <_vfiprintf_r+0x120>
 800e848:	9a07      	ldr	r2, [sp, #28]
 800e84a:	4654      	mov	r4, sl
 800e84c:	2000      	movs	r0, #0
 800e84e:	f04f 0c0a 	mov.w	ip, #10
 800e852:	4621      	mov	r1, r4
 800e854:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e858:	3b30      	subs	r3, #48	; 0x30
 800e85a:	2b09      	cmp	r3, #9
 800e85c:	d94d      	bls.n	800e8fa <_vfiprintf_r+0x1a6>
 800e85e:	b1b0      	cbz	r0, 800e88e <_vfiprintf_r+0x13a>
 800e860:	9207      	str	r2, [sp, #28]
 800e862:	e014      	b.n	800e88e <_vfiprintf_r+0x13a>
 800e864:	eba0 0308 	sub.w	r3, r0, r8
 800e868:	fa09 f303 	lsl.w	r3, r9, r3
 800e86c:	4313      	orrs	r3, r2
 800e86e:	9304      	str	r3, [sp, #16]
 800e870:	46a2      	mov	sl, r4
 800e872:	e7d2      	b.n	800e81a <_vfiprintf_r+0xc6>
 800e874:	9b03      	ldr	r3, [sp, #12]
 800e876:	1d19      	adds	r1, r3, #4
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	9103      	str	r1, [sp, #12]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	bfbb      	ittet	lt
 800e880:	425b      	neglt	r3, r3
 800e882:	f042 0202 	orrlt.w	r2, r2, #2
 800e886:	9307      	strge	r3, [sp, #28]
 800e888:	9307      	strlt	r3, [sp, #28]
 800e88a:	bfb8      	it	lt
 800e88c:	9204      	strlt	r2, [sp, #16]
 800e88e:	7823      	ldrb	r3, [r4, #0]
 800e890:	2b2e      	cmp	r3, #46	; 0x2e
 800e892:	d10c      	bne.n	800e8ae <_vfiprintf_r+0x15a>
 800e894:	7863      	ldrb	r3, [r4, #1]
 800e896:	2b2a      	cmp	r3, #42	; 0x2a
 800e898:	d134      	bne.n	800e904 <_vfiprintf_r+0x1b0>
 800e89a:	9b03      	ldr	r3, [sp, #12]
 800e89c:	1d1a      	adds	r2, r3, #4
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	9203      	str	r2, [sp, #12]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	bfb8      	it	lt
 800e8a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8aa:	3402      	adds	r4, #2
 800e8ac:	9305      	str	r3, [sp, #20]
 800e8ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e984 <_vfiprintf_r+0x230>
 800e8b2:	7821      	ldrb	r1, [r4, #0]
 800e8b4:	2203      	movs	r2, #3
 800e8b6:	4650      	mov	r0, sl
 800e8b8:	f7f1 fc8a 	bl	80001d0 <memchr>
 800e8bc:	b138      	cbz	r0, 800e8ce <_vfiprintf_r+0x17a>
 800e8be:	9b04      	ldr	r3, [sp, #16]
 800e8c0:	eba0 000a 	sub.w	r0, r0, sl
 800e8c4:	2240      	movs	r2, #64	; 0x40
 800e8c6:	4082      	lsls	r2, r0
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	3401      	adds	r4, #1
 800e8cc:	9304      	str	r3, [sp, #16]
 800e8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8d2:	4829      	ldr	r0, [pc, #164]	; (800e978 <_vfiprintf_r+0x224>)
 800e8d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8d8:	2206      	movs	r2, #6
 800e8da:	f7f1 fc79 	bl	80001d0 <memchr>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d03f      	beq.n	800e962 <_vfiprintf_r+0x20e>
 800e8e2:	4b26      	ldr	r3, [pc, #152]	; (800e97c <_vfiprintf_r+0x228>)
 800e8e4:	bb1b      	cbnz	r3, 800e92e <_vfiprintf_r+0x1da>
 800e8e6:	9b03      	ldr	r3, [sp, #12]
 800e8e8:	3307      	adds	r3, #7
 800e8ea:	f023 0307 	bic.w	r3, r3, #7
 800e8ee:	3308      	adds	r3, #8
 800e8f0:	9303      	str	r3, [sp, #12]
 800e8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8f4:	443b      	add	r3, r7
 800e8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8f8:	e768      	b.n	800e7cc <_vfiprintf_r+0x78>
 800e8fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8fe:	460c      	mov	r4, r1
 800e900:	2001      	movs	r0, #1
 800e902:	e7a6      	b.n	800e852 <_vfiprintf_r+0xfe>
 800e904:	2300      	movs	r3, #0
 800e906:	3401      	adds	r4, #1
 800e908:	9305      	str	r3, [sp, #20]
 800e90a:	4619      	mov	r1, r3
 800e90c:	f04f 0c0a 	mov.w	ip, #10
 800e910:	4620      	mov	r0, r4
 800e912:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e916:	3a30      	subs	r2, #48	; 0x30
 800e918:	2a09      	cmp	r2, #9
 800e91a:	d903      	bls.n	800e924 <_vfiprintf_r+0x1d0>
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d0c6      	beq.n	800e8ae <_vfiprintf_r+0x15a>
 800e920:	9105      	str	r1, [sp, #20]
 800e922:	e7c4      	b.n	800e8ae <_vfiprintf_r+0x15a>
 800e924:	fb0c 2101 	mla	r1, ip, r1, r2
 800e928:	4604      	mov	r4, r0
 800e92a:	2301      	movs	r3, #1
 800e92c:	e7f0      	b.n	800e910 <_vfiprintf_r+0x1bc>
 800e92e:	ab03      	add	r3, sp, #12
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	462a      	mov	r2, r5
 800e934:	4b12      	ldr	r3, [pc, #72]	; (800e980 <_vfiprintf_r+0x22c>)
 800e936:	a904      	add	r1, sp, #16
 800e938:	4630      	mov	r0, r6
 800e93a:	f7fc fcf3 	bl	800b324 <_printf_float>
 800e93e:	4607      	mov	r7, r0
 800e940:	1c78      	adds	r0, r7, #1
 800e942:	d1d6      	bne.n	800e8f2 <_vfiprintf_r+0x19e>
 800e944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e946:	07d9      	lsls	r1, r3, #31
 800e948:	d405      	bmi.n	800e956 <_vfiprintf_r+0x202>
 800e94a:	89ab      	ldrh	r3, [r5, #12]
 800e94c:	059a      	lsls	r2, r3, #22
 800e94e:	d402      	bmi.n	800e956 <_vfiprintf_r+0x202>
 800e950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e952:	f7fd fd29 	bl	800c3a8 <__retarget_lock_release_recursive>
 800e956:	89ab      	ldrh	r3, [r5, #12]
 800e958:	065b      	lsls	r3, r3, #25
 800e95a:	f53f af1d 	bmi.w	800e798 <_vfiprintf_r+0x44>
 800e95e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e960:	e71c      	b.n	800e79c <_vfiprintf_r+0x48>
 800e962:	ab03      	add	r3, sp, #12
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	462a      	mov	r2, r5
 800e968:	4b05      	ldr	r3, [pc, #20]	; (800e980 <_vfiprintf_r+0x22c>)
 800e96a:	a904      	add	r1, sp, #16
 800e96c:	4630      	mov	r0, r6
 800e96e:	f7fc ff7d 	bl	800b86c <_printf_i>
 800e972:	e7e4      	b.n	800e93e <_vfiprintf_r+0x1ea>
 800e974:	08012204 	.word	0x08012204
 800e978:	0801220e 	.word	0x0801220e
 800e97c:	0800b325 	.word	0x0800b325
 800e980:	0800e72f 	.word	0x0800e72f
 800e984:	0801220a 	.word	0x0801220a

0800e988 <__swbuf_r>:
 800e988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98a:	460e      	mov	r6, r1
 800e98c:	4614      	mov	r4, r2
 800e98e:	4605      	mov	r5, r0
 800e990:	b118      	cbz	r0, 800e99a <__swbuf_r+0x12>
 800e992:	6a03      	ldr	r3, [r0, #32]
 800e994:	b90b      	cbnz	r3, 800e99a <__swbuf_r+0x12>
 800e996:	f7fd fb27 	bl	800bfe8 <__sinit>
 800e99a:	69a3      	ldr	r3, [r4, #24]
 800e99c:	60a3      	str	r3, [r4, #8]
 800e99e:	89a3      	ldrh	r3, [r4, #12]
 800e9a0:	071a      	lsls	r2, r3, #28
 800e9a2:	d525      	bpl.n	800e9f0 <__swbuf_r+0x68>
 800e9a4:	6923      	ldr	r3, [r4, #16]
 800e9a6:	b31b      	cbz	r3, 800e9f0 <__swbuf_r+0x68>
 800e9a8:	6823      	ldr	r3, [r4, #0]
 800e9aa:	6922      	ldr	r2, [r4, #16]
 800e9ac:	1a98      	subs	r0, r3, r2
 800e9ae:	6963      	ldr	r3, [r4, #20]
 800e9b0:	b2f6      	uxtb	r6, r6
 800e9b2:	4283      	cmp	r3, r0
 800e9b4:	4637      	mov	r7, r6
 800e9b6:	dc04      	bgt.n	800e9c2 <__swbuf_r+0x3a>
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	f7ff fe00 	bl	800e5c0 <_fflush_r>
 800e9c0:	b9e0      	cbnz	r0, 800e9fc <__swbuf_r+0x74>
 800e9c2:	68a3      	ldr	r3, [r4, #8]
 800e9c4:	3b01      	subs	r3, #1
 800e9c6:	60a3      	str	r3, [r4, #8]
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	1c5a      	adds	r2, r3, #1
 800e9cc:	6022      	str	r2, [r4, #0]
 800e9ce:	701e      	strb	r6, [r3, #0]
 800e9d0:	6962      	ldr	r2, [r4, #20]
 800e9d2:	1c43      	adds	r3, r0, #1
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d004      	beq.n	800e9e2 <__swbuf_r+0x5a>
 800e9d8:	89a3      	ldrh	r3, [r4, #12]
 800e9da:	07db      	lsls	r3, r3, #31
 800e9dc:	d506      	bpl.n	800e9ec <__swbuf_r+0x64>
 800e9de:	2e0a      	cmp	r6, #10
 800e9e0:	d104      	bne.n	800e9ec <__swbuf_r+0x64>
 800e9e2:	4621      	mov	r1, r4
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	f7ff fdeb 	bl	800e5c0 <_fflush_r>
 800e9ea:	b938      	cbnz	r0, 800e9fc <__swbuf_r+0x74>
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	f000 f806 	bl	800ea04 <__swsetup_r>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d0d5      	beq.n	800e9a8 <__swbuf_r+0x20>
 800e9fc:	f04f 37ff 	mov.w	r7, #4294967295
 800ea00:	e7f4      	b.n	800e9ec <__swbuf_r+0x64>
	...

0800ea04 <__swsetup_r>:
 800ea04:	b538      	push	{r3, r4, r5, lr}
 800ea06:	4b2a      	ldr	r3, [pc, #168]	; (800eab0 <__swsetup_r+0xac>)
 800ea08:	4605      	mov	r5, r0
 800ea0a:	6818      	ldr	r0, [r3, #0]
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	b118      	cbz	r0, 800ea18 <__swsetup_r+0x14>
 800ea10:	6a03      	ldr	r3, [r0, #32]
 800ea12:	b90b      	cbnz	r3, 800ea18 <__swsetup_r+0x14>
 800ea14:	f7fd fae8 	bl	800bfe8 <__sinit>
 800ea18:	89a3      	ldrh	r3, [r4, #12]
 800ea1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea1e:	0718      	lsls	r0, r3, #28
 800ea20:	d422      	bmi.n	800ea68 <__swsetup_r+0x64>
 800ea22:	06d9      	lsls	r1, r3, #27
 800ea24:	d407      	bmi.n	800ea36 <__swsetup_r+0x32>
 800ea26:	2309      	movs	r3, #9
 800ea28:	602b      	str	r3, [r5, #0]
 800ea2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea2e:	81a3      	strh	r3, [r4, #12]
 800ea30:	f04f 30ff 	mov.w	r0, #4294967295
 800ea34:	e034      	b.n	800eaa0 <__swsetup_r+0x9c>
 800ea36:	0758      	lsls	r0, r3, #29
 800ea38:	d512      	bpl.n	800ea60 <__swsetup_r+0x5c>
 800ea3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea3c:	b141      	cbz	r1, 800ea50 <__swsetup_r+0x4c>
 800ea3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea42:	4299      	cmp	r1, r3
 800ea44:	d002      	beq.n	800ea4c <__swsetup_r+0x48>
 800ea46:	4628      	mov	r0, r5
 800ea48:	f7fe fb6c 	bl	800d124 <_free_r>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	6363      	str	r3, [r4, #52]	; 0x34
 800ea50:	89a3      	ldrh	r3, [r4, #12]
 800ea52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea56:	81a3      	strh	r3, [r4, #12]
 800ea58:	2300      	movs	r3, #0
 800ea5a:	6063      	str	r3, [r4, #4]
 800ea5c:	6923      	ldr	r3, [r4, #16]
 800ea5e:	6023      	str	r3, [r4, #0]
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	f043 0308 	orr.w	r3, r3, #8
 800ea66:	81a3      	strh	r3, [r4, #12]
 800ea68:	6923      	ldr	r3, [r4, #16]
 800ea6a:	b94b      	cbnz	r3, 800ea80 <__swsetup_r+0x7c>
 800ea6c:	89a3      	ldrh	r3, [r4, #12]
 800ea6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea76:	d003      	beq.n	800ea80 <__swsetup_r+0x7c>
 800ea78:	4621      	mov	r1, r4
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	f000 f88c 	bl	800eb98 <__smakebuf_r>
 800ea80:	89a0      	ldrh	r0, [r4, #12]
 800ea82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea86:	f010 0301 	ands.w	r3, r0, #1
 800ea8a:	d00a      	beq.n	800eaa2 <__swsetup_r+0x9e>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	60a3      	str	r3, [r4, #8]
 800ea90:	6963      	ldr	r3, [r4, #20]
 800ea92:	425b      	negs	r3, r3
 800ea94:	61a3      	str	r3, [r4, #24]
 800ea96:	6923      	ldr	r3, [r4, #16]
 800ea98:	b943      	cbnz	r3, 800eaac <__swsetup_r+0xa8>
 800ea9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea9e:	d1c4      	bne.n	800ea2a <__swsetup_r+0x26>
 800eaa0:	bd38      	pop	{r3, r4, r5, pc}
 800eaa2:	0781      	lsls	r1, r0, #30
 800eaa4:	bf58      	it	pl
 800eaa6:	6963      	ldrpl	r3, [r4, #20]
 800eaa8:	60a3      	str	r3, [r4, #8]
 800eaaa:	e7f4      	b.n	800ea96 <__swsetup_r+0x92>
 800eaac:	2000      	movs	r0, #0
 800eaae:	e7f7      	b.n	800eaa0 <__swsetup_r+0x9c>
 800eab0:	200001f0 	.word	0x200001f0

0800eab4 <_raise_r>:
 800eab4:	291f      	cmp	r1, #31
 800eab6:	b538      	push	{r3, r4, r5, lr}
 800eab8:	4604      	mov	r4, r0
 800eaba:	460d      	mov	r5, r1
 800eabc:	d904      	bls.n	800eac8 <_raise_r+0x14>
 800eabe:	2316      	movs	r3, #22
 800eac0:	6003      	str	r3, [r0, #0]
 800eac2:	f04f 30ff 	mov.w	r0, #4294967295
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eaca:	b112      	cbz	r2, 800ead2 <_raise_r+0x1e>
 800eacc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ead0:	b94b      	cbnz	r3, 800eae6 <_raise_r+0x32>
 800ead2:	4620      	mov	r0, r4
 800ead4:	f000 f830 	bl	800eb38 <_getpid_r>
 800ead8:	462a      	mov	r2, r5
 800eada:	4601      	mov	r1, r0
 800eadc:	4620      	mov	r0, r4
 800eade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eae2:	f000 b817 	b.w	800eb14 <_kill_r>
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d00a      	beq.n	800eb00 <_raise_r+0x4c>
 800eaea:	1c59      	adds	r1, r3, #1
 800eaec:	d103      	bne.n	800eaf6 <_raise_r+0x42>
 800eaee:	2316      	movs	r3, #22
 800eaf0:	6003      	str	r3, [r0, #0]
 800eaf2:	2001      	movs	r0, #1
 800eaf4:	e7e7      	b.n	800eac6 <_raise_r+0x12>
 800eaf6:	2400      	movs	r4, #0
 800eaf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eafc:	4628      	mov	r0, r5
 800eafe:	4798      	blx	r3
 800eb00:	2000      	movs	r0, #0
 800eb02:	e7e0      	b.n	800eac6 <_raise_r+0x12>

0800eb04 <raise>:
 800eb04:	4b02      	ldr	r3, [pc, #8]	; (800eb10 <raise+0xc>)
 800eb06:	4601      	mov	r1, r0
 800eb08:	6818      	ldr	r0, [r3, #0]
 800eb0a:	f7ff bfd3 	b.w	800eab4 <_raise_r>
 800eb0e:	bf00      	nop
 800eb10:	200001f0 	.word	0x200001f0

0800eb14 <_kill_r>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	4d07      	ldr	r5, [pc, #28]	; (800eb34 <_kill_r+0x20>)
 800eb18:	2300      	movs	r3, #0
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	4611      	mov	r1, r2
 800eb20:	602b      	str	r3, [r5, #0]
 800eb22:	f7f5 fcc5 	bl	80044b0 <_kill>
 800eb26:	1c43      	adds	r3, r0, #1
 800eb28:	d102      	bne.n	800eb30 <_kill_r+0x1c>
 800eb2a:	682b      	ldr	r3, [r5, #0]
 800eb2c:	b103      	cbz	r3, 800eb30 <_kill_r+0x1c>
 800eb2e:	6023      	str	r3, [r4, #0]
 800eb30:	bd38      	pop	{r3, r4, r5, pc}
 800eb32:	bf00      	nop
 800eb34:	20000d1c 	.word	0x20000d1c

0800eb38 <_getpid_r>:
 800eb38:	f7f5 bcb2 	b.w	80044a0 <_getpid>

0800eb3c <_malloc_usable_size_r>:
 800eb3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb40:	1f18      	subs	r0, r3, #4
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	bfbc      	itt	lt
 800eb46:	580b      	ldrlt	r3, [r1, r0]
 800eb48:	18c0      	addlt	r0, r0, r3
 800eb4a:	4770      	bx	lr

0800eb4c <__swhatbuf_r>:
 800eb4c:	b570      	push	{r4, r5, r6, lr}
 800eb4e:	460c      	mov	r4, r1
 800eb50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb54:	2900      	cmp	r1, #0
 800eb56:	b096      	sub	sp, #88	; 0x58
 800eb58:	4615      	mov	r5, r2
 800eb5a:	461e      	mov	r6, r3
 800eb5c:	da0d      	bge.n	800eb7a <__swhatbuf_r+0x2e>
 800eb5e:	89a3      	ldrh	r3, [r4, #12]
 800eb60:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eb64:	f04f 0100 	mov.w	r1, #0
 800eb68:	bf0c      	ite	eq
 800eb6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eb6e:	2340      	movne	r3, #64	; 0x40
 800eb70:	2000      	movs	r0, #0
 800eb72:	6031      	str	r1, [r6, #0]
 800eb74:	602b      	str	r3, [r5, #0]
 800eb76:	b016      	add	sp, #88	; 0x58
 800eb78:	bd70      	pop	{r4, r5, r6, pc}
 800eb7a:	466a      	mov	r2, sp
 800eb7c:	f000 f848 	bl	800ec10 <_fstat_r>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	dbec      	blt.n	800eb5e <__swhatbuf_r+0x12>
 800eb84:	9901      	ldr	r1, [sp, #4]
 800eb86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eb8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eb8e:	4259      	negs	r1, r3
 800eb90:	4159      	adcs	r1, r3
 800eb92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb96:	e7eb      	b.n	800eb70 <__swhatbuf_r+0x24>

0800eb98 <__smakebuf_r>:
 800eb98:	898b      	ldrh	r3, [r1, #12]
 800eb9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb9c:	079d      	lsls	r5, r3, #30
 800eb9e:	4606      	mov	r6, r0
 800eba0:	460c      	mov	r4, r1
 800eba2:	d507      	bpl.n	800ebb4 <__smakebuf_r+0x1c>
 800eba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	6123      	str	r3, [r4, #16]
 800ebac:	2301      	movs	r3, #1
 800ebae:	6163      	str	r3, [r4, #20]
 800ebb0:	b002      	add	sp, #8
 800ebb2:	bd70      	pop	{r4, r5, r6, pc}
 800ebb4:	ab01      	add	r3, sp, #4
 800ebb6:	466a      	mov	r2, sp
 800ebb8:	f7ff ffc8 	bl	800eb4c <__swhatbuf_r>
 800ebbc:	9900      	ldr	r1, [sp, #0]
 800ebbe:	4605      	mov	r5, r0
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f7fb fb7b 	bl	800a2bc <_malloc_r>
 800ebc6:	b948      	cbnz	r0, 800ebdc <__smakebuf_r+0x44>
 800ebc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebcc:	059a      	lsls	r2, r3, #22
 800ebce:	d4ef      	bmi.n	800ebb0 <__smakebuf_r+0x18>
 800ebd0:	f023 0303 	bic.w	r3, r3, #3
 800ebd4:	f043 0302 	orr.w	r3, r3, #2
 800ebd8:	81a3      	strh	r3, [r4, #12]
 800ebda:	e7e3      	b.n	800eba4 <__smakebuf_r+0xc>
 800ebdc:	89a3      	ldrh	r3, [r4, #12]
 800ebde:	6020      	str	r0, [r4, #0]
 800ebe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebe4:	81a3      	strh	r3, [r4, #12]
 800ebe6:	9b00      	ldr	r3, [sp, #0]
 800ebe8:	6163      	str	r3, [r4, #20]
 800ebea:	9b01      	ldr	r3, [sp, #4]
 800ebec:	6120      	str	r0, [r4, #16]
 800ebee:	b15b      	cbz	r3, 800ec08 <__smakebuf_r+0x70>
 800ebf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	f000 f81d 	bl	800ec34 <_isatty_r>
 800ebfa:	b128      	cbz	r0, 800ec08 <__smakebuf_r+0x70>
 800ebfc:	89a3      	ldrh	r3, [r4, #12]
 800ebfe:	f023 0303 	bic.w	r3, r3, #3
 800ec02:	f043 0301 	orr.w	r3, r3, #1
 800ec06:	81a3      	strh	r3, [r4, #12]
 800ec08:	89a3      	ldrh	r3, [r4, #12]
 800ec0a:	431d      	orrs	r5, r3
 800ec0c:	81a5      	strh	r5, [r4, #12]
 800ec0e:	e7cf      	b.n	800ebb0 <__smakebuf_r+0x18>

0800ec10 <_fstat_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	4d07      	ldr	r5, [pc, #28]	; (800ec30 <_fstat_r+0x20>)
 800ec14:	2300      	movs	r3, #0
 800ec16:	4604      	mov	r4, r0
 800ec18:	4608      	mov	r0, r1
 800ec1a:	4611      	mov	r1, r2
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	f7f5 fca6 	bl	800456e <_fstat>
 800ec22:	1c43      	adds	r3, r0, #1
 800ec24:	d102      	bne.n	800ec2c <_fstat_r+0x1c>
 800ec26:	682b      	ldr	r3, [r5, #0]
 800ec28:	b103      	cbz	r3, 800ec2c <_fstat_r+0x1c>
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	bd38      	pop	{r3, r4, r5, pc}
 800ec2e:	bf00      	nop
 800ec30:	20000d1c 	.word	0x20000d1c

0800ec34 <_isatty_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4d06      	ldr	r5, [pc, #24]	; (800ec50 <_isatty_r+0x1c>)
 800ec38:	2300      	movs	r3, #0
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	4608      	mov	r0, r1
 800ec3e:	602b      	str	r3, [r5, #0]
 800ec40:	f7f5 fca5 	bl	800458e <_isatty>
 800ec44:	1c43      	adds	r3, r0, #1
 800ec46:	d102      	bne.n	800ec4e <_isatty_r+0x1a>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	b103      	cbz	r3, 800ec4e <_isatty_r+0x1a>
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	20000d1c 	.word	0x20000d1c
 800ec54:	00000000 	.word	0x00000000

0800ec58 <cos>:
 800ec58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec5a:	ec53 2b10 	vmov	r2, r3, d0
 800ec5e:	4826      	ldr	r0, [pc, #152]	; (800ecf8 <cos+0xa0>)
 800ec60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ec64:	4281      	cmp	r1, r0
 800ec66:	dc06      	bgt.n	800ec76 <cos+0x1e>
 800ec68:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ecf0 <cos+0x98>
 800ec6c:	b005      	add	sp, #20
 800ec6e:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec72:	f000 b961 	b.w	800ef38 <__kernel_cos>
 800ec76:	4821      	ldr	r0, [pc, #132]	; (800ecfc <cos+0xa4>)
 800ec78:	4281      	cmp	r1, r0
 800ec7a:	dd09      	ble.n	800ec90 <cos+0x38>
 800ec7c:	ee10 0a10 	vmov	r0, s0
 800ec80:	4619      	mov	r1, r3
 800ec82:	f7f1 fb01 	bl	8000288 <__aeabi_dsub>
 800ec86:	ec41 0b10 	vmov	d0, r0, r1
 800ec8a:	b005      	add	sp, #20
 800ec8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec90:	4668      	mov	r0, sp
 800ec92:	f000 fad9 	bl	800f248 <__ieee754_rem_pio2>
 800ec96:	f000 0003 	and.w	r0, r0, #3
 800ec9a:	2801      	cmp	r0, #1
 800ec9c:	d00b      	beq.n	800ecb6 <cos+0x5e>
 800ec9e:	2802      	cmp	r0, #2
 800eca0:	d016      	beq.n	800ecd0 <cos+0x78>
 800eca2:	b9e0      	cbnz	r0, 800ecde <cos+0x86>
 800eca4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eca8:	ed9d 0b00 	vldr	d0, [sp]
 800ecac:	f000 f944 	bl	800ef38 <__kernel_cos>
 800ecb0:	ec51 0b10 	vmov	r0, r1, d0
 800ecb4:	e7e7      	b.n	800ec86 <cos+0x2e>
 800ecb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ecba:	ed9d 0b00 	vldr	d0, [sp]
 800ecbe:	f000 fa03 	bl	800f0c8 <__kernel_sin>
 800ecc2:	ec53 2b10 	vmov	r2, r3, d0
 800ecc6:	ee10 0a10 	vmov	r0, s0
 800ecca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ecce:	e7da      	b.n	800ec86 <cos+0x2e>
 800ecd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ecd4:	ed9d 0b00 	vldr	d0, [sp]
 800ecd8:	f000 f92e 	bl	800ef38 <__kernel_cos>
 800ecdc:	e7f1      	b.n	800ecc2 <cos+0x6a>
 800ecde:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ece2:	ed9d 0b00 	vldr	d0, [sp]
 800ece6:	2001      	movs	r0, #1
 800ece8:	f000 f9ee 	bl	800f0c8 <__kernel_sin>
 800ecec:	e7e0      	b.n	800ecb0 <cos+0x58>
 800ecee:	bf00      	nop
	...
 800ecf8:	3fe921fb 	.word	0x3fe921fb
 800ecfc:	7fefffff 	.word	0x7fefffff

0800ed00 <sin>:
 800ed00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed02:	ec53 2b10 	vmov	r2, r3, d0
 800ed06:	4828      	ldr	r0, [pc, #160]	; (800eda8 <sin+0xa8>)
 800ed08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ed0c:	4281      	cmp	r1, r0
 800ed0e:	dc07      	bgt.n	800ed20 <sin+0x20>
 800ed10:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800eda0 <sin+0xa0>
 800ed14:	2000      	movs	r0, #0
 800ed16:	b005      	add	sp, #20
 800ed18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed1c:	f000 b9d4 	b.w	800f0c8 <__kernel_sin>
 800ed20:	4822      	ldr	r0, [pc, #136]	; (800edac <sin+0xac>)
 800ed22:	4281      	cmp	r1, r0
 800ed24:	dd09      	ble.n	800ed3a <sin+0x3a>
 800ed26:	ee10 0a10 	vmov	r0, s0
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	f7f1 faac 	bl	8000288 <__aeabi_dsub>
 800ed30:	ec41 0b10 	vmov	d0, r0, r1
 800ed34:	b005      	add	sp, #20
 800ed36:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed3a:	4668      	mov	r0, sp
 800ed3c:	f000 fa84 	bl	800f248 <__ieee754_rem_pio2>
 800ed40:	f000 0003 	and.w	r0, r0, #3
 800ed44:	2801      	cmp	r0, #1
 800ed46:	d00c      	beq.n	800ed62 <sin+0x62>
 800ed48:	2802      	cmp	r0, #2
 800ed4a:	d011      	beq.n	800ed70 <sin+0x70>
 800ed4c:	b9f0      	cbnz	r0, 800ed8c <sin+0x8c>
 800ed4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed52:	ed9d 0b00 	vldr	d0, [sp]
 800ed56:	2001      	movs	r0, #1
 800ed58:	f000 f9b6 	bl	800f0c8 <__kernel_sin>
 800ed5c:	ec51 0b10 	vmov	r0, r1, d0
 800ed60:	e7e6      	b.n	800ed30 <sin+0x30>
 800ed62:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed66:	ed9d 0b00 	vldr	d0, [sp]
 800ed6a:	f000 f8e5 	bl	800ef38 <__kernel_cos>
 800ed6e:	e7f5      	b.n	800ed5c <sin+0x5c>
 800ed70:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed74:	ed9d 0b00 	vldr	d0, [sp]
 800ed78:	2001      	movs	r0, #1
 800ed7a:	f000 f9a5 	bl	800f0c8 <__kernel_sin>
 800ed7e:	ec53 2b10 	vmov	r2, r3, d0
 800ed82:	ee10 0a10 	vmov	r0, s0
 800ed86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ed8a:	e7d1      	b.n	800ed30 <sin+0x30>
 800ed8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed90:	ed9d 0b00 	vldr	d0, [sp]
 800ed94:	f000 f8d0 	bl	800ef38 <__kernel_cos>
 800ed98:	e7f1      	b.n	800ed7e <sin+0x7e>
 800ed9a:	bf00      	nop
 800ed9c:	f3af 8000 	nop.w
	...
 800eda8:	3fe921fb 	.word	0x3fe921fb
 800edac:	7fefffff 	.word	0x7fefffff

0800edb0 <expf>:
 800edb0:	b508      	push	{r3, lr}
 800edb2:	ed2d 8b02 	vpush	{d8}
 800edb6:	eef0 8a40 	vmov.f32	s17, s0
 800edba:	f000 fc55 	bl	800f668 <__ieee754_expf>
 800edbe:	eeb0 8a40 	vmov.f32	s16, s0
 800edc2:	eeb0 0a68 	vmov.f32	s0, s17
 800edc6:	f000 f829 	bl	800ee1c <finitef>
 800edca:	b160      	cbz	r0, 800ede6 <expf+0x36>
 800edcc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ee0c <expf+0x5c>
 800edd0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800edd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd8:	dd0a      	ble.n	800edf0 <expf+0x40>
 800edda:	f7fd fab9 	bl	800c350 <__errno>
 800edde:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800ee10 <expf+0x60>
 800ede2:	2322      	movs	r3, #34	; 0x22
 800ede4:	6003      	str	r3, [r0, #0]
 800ede6:	eeb0 0a48 	vmov.f32	s0, s16
 800edea:	ecbd 8b02 	vpop	{d8}
 800edee:	bd08      	pop	{r3, pc}
 800edf0:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ee14 <expf+0x64>
 800edf4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800edf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfc:	d5f3      	bpl.n	800ede6 <expf+0x36>
 800edfe:	f7fd faa7 	bl	800c350 <__errno>
 800ee02:	2322      	movs	r3, #34	; 0x22
 800ee04:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800ee18 <expf+0x68>
 800ee08:	6003      	str	r3, [r0, #0]
 800ee0a:	e7ec      	b.n	800ede6 <expf+0x36>
 800ee0c:	42b17217 	.word	0x42b17217
 800ee10:	7f800000 	.word	0x7f800000
 800ee14:	c2cff1b5 	.word	0xc2cff1b5
 800ee18:	00000000 	.word	0x00000000

0800ee1c <finitef>:
 800ee1c:	b082      	sub	sp, #8
 800ee1e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ee22:	9801      	ldr	r0, [sp, #4]
 800ee24:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ee28:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ee2c:	bfac      	ite	ge
 800ee2e:	2000      	movge	r0, #0
 800ee30:	2001      	movlt	r0, #1
 800ee32:	b002      	add	sp, #8
 800ee34:	4770      	bx	lr
	...

0800ee38 <floor>:
 800ee38:	ec51 0b10 	vmov	r0, r1, d0
 800ee3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800ee48:	2e13      	cmp	r6, #19
 800ee4a:	ee10 5a10 	vmov	r5, s0
 800ee4e:	ee10 8a10 	vmov	r8, s0
 800ee52:	460c      	mov	r4, r1
 800ee54:	dc31      	bgt.n	800eeba <floor+0x82>
 800ee56:	2e00      	cmp	r6, #0
 800ee58:	da14      	bge.n	800ee84 <floor+0x4c>
 800ee5a:	a333      	add	r3, pc, #204	; (adr r3, 800ef28 <floor+0xf0>)
 800ee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee60:	f7f1 fa14 	bl	800028c <__adddf3>
 800ee64:	2200      	movs	r2, #0
 800ee66:	2300      	movs	r3, #0
 800ee68:	f7f1 fe56 	bl	8000b18 <__aeabi_dcmpgt>
 800ee6c:	b138      	cbz	r0, 800ee7e <floor+0x46>
 800ee6e:	2c00      	cmp	r4, #0
 800ee70:	da53      	bge.n	800ef1a <floor+0xe2>
 800ee72:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ee76:	4325      	orrs	r5, r4
 800ee78:	d052      	beq.n	800ef20 <floor+0xe8>
 800ee7a:	4c2d      	ldr	r4, [pc, #180]	; (800ef30 <floor+0xf8>)
 800ee7c:	2500      	movs	r5, #0
 800ee7e:	4621      	mov	r1, r4
 800ee80:	4628      	mov	r0, r5
 800ee82:	e024      	b.n	800eece <floor+0x96>
 800ee84:	4f2b      	ldr	r7, [pc, #172]	; (800ef34 <floor+0xfc>)
 800ee86:	4137      	asrs	r7, r6
 800ee88:	ea01 0307 	and.w	r3, r1, r7
 800ee8c:	4303      	orrs	r3, r0
 800ee8e:	d01e      	beq.n	800eece <floor+0x96>
 800ee90:	a325      	add	r3, pc, #148	; (adr r3, 800ef28 <floor+0xf0>)
 800ee92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee96:	f7f1 f9f9 	bl	800028c <__adddf3>
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f7f1 fe3b 	bl	8000b18 <__aeabi_dcmpgt>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	d0eb      	beq.n	800ee7e <floor+0x46>
 800eea6:	2c00      	cmp	r4, #0
 800eea8:	bfbe      	ittt	lt
 800eeaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800eeae:	4133      	asrlt	r3, r6
 800eeb0:	18e4      	addlt	r4, r4, r3
 800eeb2:	ea24 0407 	bic.w	r4, r4, r7
 800eeb6:	2500      	movs	r5, #0
 800eeb8:	e7e1      	b.n	800ee7e <floor+0x46>
 800eeba:	2e33      	cmp	r6, #51	; 0x33
 800eebc:	dd0b      	ble.n	800eed6 <floor+0x9e>
 800eebe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800eec2:	d104      	bne.n	800eece <floor+0x96>
 800eec4:	ee10 2a10 	vmov	r2, s0
 800eec8:	460b      	mov	r3, r1
 800eeca:	f7f1 f9df 	bl	800028c <__adddf3>
 800eece:	ec41 0b10 	vmov	d0, r0, r1
 800eed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800eeda:	f04f 37ff 	mov.w	r7, #4294967295
 800eede:	40df      	lsrs	r7, r3
 800eee0:	4238      	tst	r0, r7
 800eee2:	d0f4      	beq.n	800eece <floor+0x96>
 800eee4:	a310      	add	r3, pc, #64	; (adr r3, 800ef28 <floor+0xf0>)
 800eee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeea:	f7f1 f9cf 	bl	800028c <__adddf3>
 800eeee:	2200      	movs	r2, #0
 800eef0:	2300      	movs	r3, #0
 800eef2:	f7f1 fe11 	bl	8000b18 <__aeabi_dcmpgt>
 800eef6:	2800      	cmp	r0, #0
 800eef8:	d0c1      	beq.n	800ee7e <floor+0x46>
 800eefa:	2c00      	cmp	r4, #0
 800eefc:	da0a      	bge.n	800ef14 <floor+0xdc>
 800eefe:	2e14      	cmp	r6, #20
 800ef00:	d101      	bne.n	800ef06 <floor+0xce>
 800ef02:	3401      	adds	r4, #1
 800ef04:	e006      	b.n	800ef14 <floor+0xdc>
 800ef06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	40b3      	lsls	r3, r6
 800ef0e:	441d      	add	r5, r3
 800ef10:	45a8      	cmp	r8, r5
 800ef12:	d8f6      	bhi.n	800ef02 <floor+0xca>
 800ef14:	ea25 0507 	bic.w	r5, r5, r7
 800ef18:	e7b1      	b.n	800ee7e <floor+0x46>
 800ef1a:	2500      	movs	r5, #0
 800ef1c:	462c      	mov	r4, r5
 800ef1e:	e7ae      	b.n	800ee7e <floor+0x46>
 800ef20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ef24:	e7ab      	b.n	800ee7e <floor+0x46>
 800ef26:	bf00      	nop
 800ef28:	8800759c 	.word	0x8800759c
 800ef2c:	7e37e43c 	.word	0x7e37e43c
 800ef30:	bff00000 	.word	0xbff00000
 800ef34:	000fffff 	.word	0x000fffff

0800ef38 <__kernel_cos>:
 800ef38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef3c:	ec57 6b10 	vmov	r6, r7, d0
 800ef40:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ef44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ef48:	ed8d 1b00 	vstr	d1, [sp]
 800ef4c:	da07      	bge.n	800ef5e <__kernel_cos+0x26>
 800ef4e:	ee10 0a10 	vmov	r0, s0
 800ef52:	4639      	mov	r1, r7
 800ef54:	f7f1 fe00 	bl	8000b58 <__aeabi_d2iz>
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	f000 8088 	beq.w	800f06e <__kernel_cos+0x136>
 800ef5e:	4632      	mov	r2, r6
 800ef60:	463b      	mov	r3, r7
 800ef62:	4630      	mov	r0, r6
 800ef64:	4639      	mov	r1, r7
 800ef66:	f7f1 fb47 	bl	80005f8 <__aeabi_dmul>
 800ef6a:	4b51      	ldr	r3, [pc, #324]	; (800f0b0 <__kernel_cos+0x178>)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	4604      	mov	r4, r0
 800ef70:	460d      	mov	r5, r1
 800ef72:	f7f1 fb41 	bl	80005f8 <__aeabi_dmul>
 800ef76:	a340      	add	r3, pc, #256	; (adr r3, 800f078 <__kernel_cos+0x140>)
 800ef78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7c:	4682      	mov	sl, r0
 800ef7e:	468b      	mov	fp, r1
 800ef80:	4620      	mov	r0, r4
 800ef82:	4629      	mov	r1, r5
 800ef84:	f7f1 fb38 	bl	80005f8 <__aeabi_dmul>
 800ef88:	a33d      	add	r3, pc, #244	; (adr r3, 800f080 <__kernel_cos+0x148>)
 800ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8e:	f7f1 f97d 	bl	800028c <__adddf3>
 800ef92:	4622      	mov	r2, r4
 800ef94:	462b      	mov	r3, r5
 800ef96:	f7f1 fb2f 	bl	80005f8 <__aeabi_dmul>
 800ef9a:	a33b      	add	r3, pc, #236	; (adr r3, 800f088 <__kernel_cos+0x150>)
 800ef9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa0:	f7f1 f972 	bl	8000288 <__aeabi_dsub>
 800efa4:	4622      	mov	r2, r4
 800efa6:	462b      	mov	r3, r5
 800efa8:	f7f1 fb26 	bl	80005f8 <__aeabi_dmul>
 800efac:	a338      	add	r3, pc, #224	; (adr r3, 800f090 <__kernel_cos+0x158>)
 800efae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb2:	f7f1 f96b 	bl	800028c <__adddf3>
 800efb6:	4622      	mov	r2, r4
 800efb8:	462b      	mov	r3, r5
 800efba:	f7f1 fb1d 	bl	80005f8 <__aeabi_dmul>
 800efbe:	a336      	add	r3, pc, #216	; (adr r3, 800f098 <__kernel_cos+0x160>)
 800efc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc4:	f7f1 f960 	bl	8000288 <__aeabi_dsub>
 800efc8:	4622      	mov	r2, r4
 800efca:	462b      	mov	r3, r5
 800efcc:	f7f1 fb14 	bl	80005f8 <__aeabi_dmul>
 800efd0:	a333      	add	r3, pc, #204	; (adr r3, 800f0a0 <__kernel_cos+0x168>)
 800efd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd6:	f7f1 f959 	bl	800028c <__adddf3>
 800efda:	4622      	mov	r2, r4
 800efdc:	462b      	mov	r3, r5
 800efde:	f7f1 fb0b 	bl	80005f8 <__aeabi_dmul>
 800efe2:	4622      	mov	r2, r4
 800efe4:	462b      	mov	r3, r5
 800efe6:	f7f1 fb07 	bl	80005f8 <__aeabi_dmul>
 800efea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efee:	4604      	mov	r4, r0
 800eff0:	460d      	mov	r5, r1
 800eff2:	4630      	mov	r0, r6
 800eff4:	4639      	mov	r1, r7
 800eff6:	f7f1 faff 	bl	80005f8 <__aeabi_dmul>
 800effa:	460b      	mov	r3, r1
 800effc:	4602      	mov	r2, r0
 800effe:	4629      	mov	r1, r5
 800f000:	4620      	mov	r0, r4
 800f002:	f7f1 f941 	bl	8000288 <__aeabi_dsub>
 800f006:	4b2b      	ldr	r3, [pc, #172]	; (800f0b4 <__kernel_cos+0x17c>)
 800f008:	4598      	cmp	r8, r3
 800f00a:	4606      	mov	r6, r0
 800f00c:	460f      	mov	r7, r1
 800f00e:	dc10      	bgt.n	800f032 <__kernel_cos+0xfa>
 800f010:	4602      	mov	r2, r0
 800f012:	460b      	mov	r3, r1
 800f014:	4650      	mov	r0, sl
 800f016:	4659      	mov	r1, fp
 800f018:	f7f1 f936 	bl	8000288 <__aeabi_dsub>
 800f01c:	460b      	mov	r3, r1
 800f01e:	4926      	ldr	r1, [pc, #152]	; (800f0b8 <__kernel_cos+0x180>)
 800f020:	4602      	mov	r2, r0
 800f022:	2000      	movs	r0, #0
 800f024:	f7f1 f930 	bl	8000288 <__aeabi_dsub>
 800f028:	ec41 0b10 	vmov	d0, r0, r1
 800f02c:	b003      	add	sp, #12
 800f02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f032:	4b22      	ldr	r3, [pc, #136]	; (800f0bc <__kernel_cos+0x184>)
 800f034:	4920      	ldr	r1, [pc, #128]	; (800f0b8 <__kernel_cos+0x180>)
 800f036:	4598      	cmp	r8, r3
 800f038:	bfcc      	ite	gt
 800f03a:	4d21      	ldrgt	r5, [pc, #132]	; (800f0c0 <__kernel_cos+0x188>)
 800f03c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f040:	2400      	movs	r4, #0
 800f042:	4622      	mov	r2, r4
 800f044:	462b      	mov	r3, r5
 800f046:	2000      	movs	r0, #0
 800f048:	f7f1 f91e 	bl	8000288 <__aeabi_dsub>
 800f04c:	4622      	mov	r2, r4
 800f04e:	4680      	mov	r8, r0
 800f050:	4689      	mov	r9, r1
 800f052:	462b      	mov	r3, r5
 800f054:	4650      	mov	r0, sl
 800f056:	4659      	mov	r1, fp
 800f058:	f7f1 f916 	bl	8000288 <__aeabi_dsub>
 800f05c:	4632      	mov	r2, r6
 800f05e:	463b      	mov	r3, r7
 800f060:	f7f1 f912 	bl	8000288 <__aeabi_dsub>
 800f064:	4602      	mov	r2, r0
 800f066:	460b      	mov	r3, r1
 800f068:	4640      	mov	r0, r8
 800f06a:	4649      	mov	r1, r9
 800f06c:	e7da      	b.n	800f024 <__kernel_cos+0xec>
 800f06e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f0a8 <__kernel_cos+0x170>
 800f072:	e7db      	b.n	800f02c <__kernel_cos+0xf4>
 800f074:	f3af 8000 	nop.w
 800f078:	be8838d4 	.word	0xbe8838d4
 800f07c:	bda8fae9 	.word	0xbda8fae9
 800f080:	bdb4b1c4 	.word	0xbdb4b1c4
 800f084:	3e21ee9e 	.word	0x3e21ee9e
 800f088:	809c52ad 	.word	0x809c52ad
 800f08c:	3e927e4f 	.word	0x3e927e4f
 800f090:	19cb1590 	.word	0x19cb1590
 800f094:	3efa01a0 	.word	0x3efa01a0
 800f098:	16c15177 	.word	0x16c15177
 800f09c:	3f56c16c 	.word	0x3f56c16c
 800f0a0:	5555554c 	.word	0x5555554c
 800f0a4:	3fa55555 	.word	0x3fa55555
 800f0a8:	00000000 	.word	0x00000000
 800f0ac:	3ff00000 	.word	0x3ff00000
 800f0b0:	3fe00000 	.word	0x3fe00000
 800f0b4:	3fd33332 	.word	0x3fd33332
 800f0b8:	3ff00000 	.word	0x3ff00000
 800f0bc:	3fe90000 	.word	0x3fe90000
 800f0c0:	3fd20000 	.word	0x3fd20000
 800f0c4:	00000000 	.word	0x00000000

0800f0c8 <__kernel_sin>:
 800f0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0cc:	ed2d 8b04 	vpush	{d8-d9}
 800f0d0:	eeb0 8a41 	vmov.f32	s16, s2
 800f0d4:	eef0 8a61 	vmov.f32	s17, s3
 800f0d8:	ec55 4b10 	vmov	r4, r5, d0
 800f0dc:	b083      	sub	sp, #12
 800f0de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f0e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f0e6:	9001      	str	r0, [sp, #4]
 800f0e8:	da06      	bge.n	800f0f8 <__kernel_sin+0x30>
 800f0ea:	ee10 0a10 	vmov	r0, s0
 800f0ee:	4629      	mov	r1, r5
 800f0f0:	f7f1 fd32 	bl	8000b58 <__aeabi_d2iz>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d051      	beq.n	800f19c <__kernel_sin+0xd4>
 800f0f8:	4622      	mov	r2, r4
 800f0fa:	462b      	mov	r3, r5
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	4629      	mov	r1, r5
 800f100:	f7f1 fa7a 	bl	80005f8 <__aeabi_dmul>
 800f104:	4682      	mov	sl, r0
 800f106:	468b      	mov	fp, r1
 800f108:	4602      	mov	r2, r0
 800f10a:	460b      	mov	r3, r1
 800f10c:	4620      	mov	r0, r4
 800f10e:	4629      	mov	r1, r5
 800f110:	f7f1 fa72 	bl	80005f8 <__aeabi_dmul>
 800f114:	a341      	add	r3, pc, #260	; (adr r3, 800f21c <__kernel_sin+0x154>)
 800f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11a:	4680      	mov	r8, r0
 800f11c:	4689      	mov	r9, r1
 800f11e:	4650      	mov	r0, sl
 800f120:	4659      	mov	r1, fp
 800f122:	f7f1 fa69 	bl	80005f8 <__aeabi_dmul>
 800f126:	a33f      	add	r3, pc, #252	; (adr r3, 800f224 <__kernel_sin+0x15c>)
 800f128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12c:	f7f1 f8ac 	bl	8000288 <__aeabi_dsub>
 800f130:	4652      	mov	r2, sl
 800f132:	465b      	mov	r3, fp
 800f134:	f7f1 fa60 	bl	80005f8 <__aeabi_dmul>
 800f138:	a33c      	add	r3, pc, #240	; (adr r3, 800f22c <__kernel_sin+0x164>)
 800f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13e:	f7f1 f8a5 	bl	800028c <__adddf3>
 800f142:	4652      	mov	r2, sl
 800f144:	465b      	mov	r3, fp
 800f146:	f7f1 fa57 	bl	80005f8 <__aeabi_dmul>
 800f14a:	a33a      	add	r3, pc, #232	; (adr r3, 800f234 <__kernel_sin+0x16c>)
 800f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f150:	f7f1 f89a 	bl	8000288 <__aeabi_dsub>
 800f154:	4652      	mov	r2, sl
 800f156:	465b      	mov	r3, fp
 800f158:	f7f1 fa4e 	bl	80005f8 <__aeabi_dmul>
 800f15c:	a337      	add	r3, pc, #220	; (adr r3, 800f23c <__kernel_sin+0x174>)
 800f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f162:	f7f1 f893 	bl	800028c <__adddf3>
 800f166:	9b01      	ldr	r3, [sp, #4]
 800f168:	4606      	mov	r6, r0
 800f16a:	460f      	mov	r7, r1
 800f16c:	b9eb      	cbnz	r3, 800f1aa <__kernel_sin+0xe2>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	4650      	mov	r0, sl
 800f174:	4659      	mov	r1, fp
 800f176:	f7f1 fa3f 	bl	80005f8 <__aeabi_dmul>
 800f17a:	a325      	add	r3, pc, #148	; (adr r3, 800f210 <__kernel_sin+0x148>)
 800f17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f180:	f7f1 f882 	bl	8000288 <__aeabi_dsub>
 800f184:	4642      	mov	r2, r8
 800f186:	464b      	mov	r3, r9
 800f188:	f7f1 fa36 	bl	80005f8 <__aeabi_dmul>
 800f18c:	4602      	mov	r2, r0
 800f18e:	460b      	mov	r3, r1
 800f190:	4620      	mov	r0, r4
 800f192:	4629      	mov	r1, r5
 800f194:	f7f1 f87a 	bl	800028c <__adddf3>
 800f198:	4604      	mov	r4, r0
 800f19a:	460d      	mov	r5, r1
 800f19c:	ec45 4b10 	vmov	d0, r4, r5
 800f1a0:	b003      	add	sp, #12
 800f1a2:	ecbd 8b04 	vpop	{d8-d9}
 800f1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1aa:	4b1b      	ldr	r3, [pc, #108]	; (800f218 <__kernel_sin+0x150>)
 800f1ac:	ec51 0b18 	vmov	r0, r1, d8
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f7f1 fa21 	bl	80005f8 <__aeabi_dmul>
 800f1b6:	4632      	mov	r2, r6
 800f1b8:	ec41 0b19 	vmov	d9, r0, r1
 800f1bc:	463b      	mov	r3, r7
 800f1be:	4640      	mov	r0, r8
 800f1c0:	4649      	mov	r1, r9
 800f1c2:	f7f1 fa19 	bl	80005f8 <__aeabi_dmul>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	ec51 0b19 	vmov	r0, r1, d9
 800f1ce:	f7f1 f85b 	bl	8000288 <__aeabi_dsub>
 800f1d2:	4652      	mov	r2, sl
 800f1d4:	465b      	mov	r3, fp
 800f1d6:	f7f1 fa0f 	bl	80005f8 <__aeabi_dmul>
 800f1da:	ec53 2b18 	vmov	r2, r3, d8
 800f1de:	f7f1 f853 	bl	8000288 <__aeabi_dsub>
 800f1e2:	a30b      	add	r3, pc, #44	; (adr r3, 800f210 <__kernel_sin+0x148>)
 800f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	460f      	mov	r7, r1
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	4649      	mov	r1, r9
 800f1f0:	f7f1 fa02 	bl	80005f8 <__aeabi_dmul>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	4639      	mov	r1, r7
 800f1fc:	f7f1 f846 	bl	800028c <__adddf3>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4620      	mov	r0, r4
 800f206:	4629      	mov	r1, r5
 800f208:	f7f1 f83e 	bl	8000288 <__aeabi_dsub>
 800f20c:	e7c4      	b.n	800f198 <__kernel_sin+0xd0>
 800f20e:	bf00      	nop
 800f210:	55555549 	.word	0x55555549
 800f214:	3fc55555 	.word	0x3fc55555
 800f218:	3fe00000 	.word	0x3fe00000
 800f21c:	5acfd57c 	.word	0x5acfd57c
 800f220:	3de5d93a 	.word	0x3de5d93a
 800f224:	8a2b9ceb 	.word	0x8a2b9ceb
 800f228:	3e5ae5e6 	.word	0x3e5ae5e6
 800f22c:	57b1fe7d 	.word	0x57b1fe7d
 800f230:	3ec71de3 	.word	0x3ec71de3
 800f234:	19c161d5 	.word	0x19c161d5
 800f238:	3f2a01a0 	.word	0x3f2a01a0
 800f23c:	1110f8a6 	.word	0x1110f8a6
 800f240:	3f811111 	.word	0x3f811111
 800f244:	00000000 	.word	0x00000000

0800f248 <__ieee754_rem_pio2>:
 800f248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24c:	ed2d 8b02 	vpush	{d8}
 800f250:	ec55 4b10 	vmov	r4, r5, d0
 800f254:	4bca      	ldr	r3, [pc, #808]	; (800f580 <__ieee754_rem_pio2+0x338>)
 800f256:	b08b      	sub	sp, #44	; 0x2c
 800f258:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f25c:	4598      	cmp	r8, r3
 800f25e:	4682      	mov	sl, r0
 800f260:	9502      	str	r5, [sp, #8]
 800f262:	dc08      	bgt.n	800f276 <__ieee754_rem_pio2+0x2e>
 800f264:	2200      	movs	r2, #0
 800f266:	2300      	movs	r3, #0
 800f268:	ed80 0b00 	vstr	d0, [r0]
 800f26c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f270:	f04f 0b00 	mov.w	fp, #0
 800f274:	e028      	b.n	800f2c8 <__ieee754_rem_pio2+0x80>
 800f276:	4bc3      	ldr	r3, [pc, #780]	; (800f584 <__ieee754_rem_pio2+0x33c>)
 800f278:	4598      	cmp	r8, r3
 800f27a:	dc78      	bgt.n	800f36e <__ieee754_rem_pio2+0x126>
 800f27c:	9b02      	ldr	r3, [sp, #8]
 800f27e:	4ec2      	ldr	r6, [pc, #776]	; (800f588 <__ieee754_rem_pio2+0x340>)
 800f280:	2b00      	cmp	r3, #0
 800f282:	ee10 0a10 	vmov	r0, s0
 800f286:	a3b0      	add	r3, pc, #704	; (adr r3, 800f548 <__ieee754_rem_pio2+0x300>)
 800f288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28c:	4629      	mov	r1, r5
 800f28e:	dd39      	ble.n	800f304 <__ieee754_rem_pio2+0xbc>
 800f290:	f7f0 fffa 	bl	8000288 <__aeabi_dsub>
 800f294:	45b0      	cmp	r8, r6
 800f296:	4604      	mov	r4, r0
 800f298:	460d      	mov	r5, r1
 800f29a:	d01b      	beq.n	800f2d4 <__ieee754_rem_pio2+0x8c>
 800f29c:	a3ac      	add	r3, pc, #688	; (adr r3, 800f550 <__ieee754_rem_pio2+0x308>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	f7f0 fff1 	bl	8000288 <__aeabi_dsub>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	e9ca 2300 	strd	r2, r3, [sl]
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	4629      	mov	r1, r5
 800f2b2:	f7f0 ffe9 	bl	8000288 <__aeabi_dsub>
 800f2b6:	a3a6      	add	r3, pc, #664	; (adr r3, 800f550 <__ieee754_rem_pio2+0x308>)
 800f2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2bc:	f7f0 ffe4 	bl	8000288 <__aeabi_dsub>
 800f2c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f2c4:	f04f 0b01 	mov.w	fp, #1
 800f2c8:	4658      	mov	r0, fp
 800f2ca:	b00b      	add	sp, #44	; 0x2c
 800f2cc:	ecbd 8b02 	vpop	{d8}
 800f2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d4:	a3a0      	add	r3, pc, #640	; (adr r3, 800f558 <__ieee754_rem_pio2+0x310>)
 800f2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2da:	f7f0 ffd5 	bl	8000288 <__aeabi_dsub>
 800f2de:	a3a0      	add	r3, pc, #640	; (adr r3, 800f560 <__ieee754_rem_pio2+0x318>)
 800f2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	460d      	mov	r5, r1
 800f2e8:	f7f0 ffce 	bl	8000288 <__aeabi_dsub>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	e9ca 2300 	strd	r2, r3, [sl]
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	f7f0 ffc6 	bl	8000288 <__aeabi_dsub>
 800f2fc:	a398      	add	r3, pc, #608	; (adr r3, 800f560 <__ieee754_rem_pio2+0x318>)
 800f2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f302:	e7db      	b.n	800f2bc <__ieee754_rem_pio2+0x74>
 800f304:	f7f0 ffc2 	bl	800028c <__adddf3>
 800f308:	45b0      	cmp	r8, r6
 800f30a:	4604      	mov	r4, r0
 800f30c:	460d      	mov	r5, r1
 800f30e:	d016      	beq.n	800f33e <__ieee754_rem_pio2+0xf6>
 800f310:	a38f      	add	r3, pc, #572	; (adr r3, 800f550 <__ieee754_rem_pio2+0x308>)
 800f312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f316:	f7f0 ffb9 	bl	800028c <__adddf3>
 800f31a:	4602      	mov	r2, r0
 800f31c:	460b      	mov	r3, r1
 800f31e:	e9ca 2300 	strd	r2, r3, [sl]
 800f322:	4620      	mov	r0, r4
 800f324:	4629      	mov	r1, r5
 800f326:	f7f0 ffaf 	bl	8000288 <__aeabi_dsub>
 800f32a:	a389      	add	r3, pc, #548	; (adr r3, 800f550 <__ieee754_rem_pio2+0x308>)
 800f32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f330:	f7f0 ffac 	bl	800028c <__adddf3>
 800f334:	f04f 3bff 	mov.w	fp, #4294967295
 800f338:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f33c:	e7c4      	b.n	800f2c8 <__ieee754_rem_pio2+0x80>
 800f33e:	a386      	add	r3, pc, #536	; (adr r3, 800f558 <__ieee754_rem_pio2+0x310>)
 800f340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f344:	f7f0 ffa2 	bl	800028c <__adddf3>
 800f348:	a385      	add	r3, pc, #532	; (adr r3, 800f560 <__ieee754_rem_pio2+0x318>)
 800f34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34e:	4604      	mov	r4, r0
 800f350:	460d      	mov	r5, r1
 800f352:	f7f0 ff9b 	bl	800028c <__adddf3>
 800f356:	4602      	mov	r2, r0
 800f358:	460b      	mov	r3, r1
 800f35a:	e9ca 2300 	strd	r2, r3, [sl]
 800f35e:	4620      	mov	r0, r4
 800f360:	4629      	mov	r1, r5
 800f362:	f7f0 ff91 	bl	8000288 <__aeabi_dsub>
 800f366:	a37e      	add	r3, pc, #504	; (adr r3, 800f560 <__ieee754_rem_pio2+0x318>)
 800f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36c:	e7e0      	b.n	800f330 <__ieee754_rem_pio2+0xe8>
 800f36e:	4b87      	ldr	r3, [pc, #540]	; (800f58c <__ieee754_rem_pio2+0x344>)
 800f370:	4598      	cmp	r8, r3
 800f372:	f300 80d8 	bgt.w	800f526 <__ieee754_rem_pio2+0x2de>
 800f376:	f000 f96d 	bl	800f654 <fabs>
 800f37a:	ec55 4b10 	vmov	r4, r5, d0
 800f37e:	ee10 0a10 	vmov	r0, s0
 800f382:	a379      	add	r3, pc, #484	; (adr r3, 800f568 <__ieee754_rem_pio2+0x320>)
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	4629      	mov	r1, r5
 800f38a:	f7f1 f935 	bl	80005f8 <__aeabi_dmul>
 800f38e:	4b80      	ldr	r3, [pc, #512]	; (800f590 <__ieee754_rem_pio2+0x348>)
 800f390:	2200      	movs	r2, #0
 800f392:	f7f0 ff7b 	bl	800028c <__adddf3>
 800f396:	f7f1 fbdf 	bl	8000b58 <__aeabi_d2iz>
 800f39a:	4683      	mov	fp, r0
 800f39c:	f7f1 f8c2 	bl	8000524 <__aeabi_i2d>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	ec43 2b18 	vmov	d8, r2, r3
 800f3a8:	a367      	add	r3, pc, #412	; (adr r3, 800f548 <__ieee754_rem_pio2+0x300>)
 800f3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ae:	f7f1 f923 	bl	80005f8 <__aeabi_dmul>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	4629      	mov	r1, r5
 800f3ba:	f7f0 ff65 	bl	8000288 <__aeabi_dsub>
 800f3be:	a364      	add	r3, pc, #400	; (adr r3, 800f550 <__ieee754_rem_pio2+0x308>)
 800f3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c4:	4606      	mov	r6, r0
 800f3c6:	460f      	mov	r7, r1
 800f3c8:	ec51 0b18 	vmov	r0, r1, d8
 800f3cc:	f7f1 f914 	bl	80005f8 <__aeabi_dmul>
 800f3d0:	f1bb 0f1f 	cmp.w	fp, #31
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	460d      	mov	r5, r1
 800f3d8:	dc0d      	bgt.n	800f3f6 <__ieee754_rem_pio2+0x1ae>
 800f3da:	4b6e      	ldr	r3, [pc, #440]	; (800f594 <__ieee754_rem_pio2+0x34c>)
 800f3dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3e4:	4543      	cmp	r3, r8
 800f3e6:	d006      	beq.n	800f3f6 <__ieee754_rem_pio2+0x1ae>
 800f3e8:	4622      	mov	r2, r4
 800f3ea:	462b      	mov	r3, r5
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	4639      	mov	r1, r7
 800f3f0:	f7f0 ff4a 	bl	8000288 <__aeabi_dsub>
 800f3f4:	e00e      	b.n	800f414 <__ieee754_rem_pio2+0x1cc>
 800f3f6:	462b      	mov	r3, r5
 800f3f8:	4622      	mov	r2, r4
 800f3fa:	4630      	mov	r0, r6
 800f3fc:	4639      	mov	r1, r7
 800f3fe:	f7f0 ff43 	bl	8000288 <__aeabi_dsub>
 800f402:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f406:	9303      	str	r3, [sp, #12]
 800f408:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f40c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f410:	2b10      	cmp	r3, #16
 800f412:	dc02      	bgt.n	800f41a <__ieee754_rem_pio2+0x1d2>
 800f414:	e9ca 0100 	strd	r0, r1, [sl]
 800f418:	e039      	b.n	800f48e <__ieee754_rem_pio2+0x246>
 800f41a:	a34f      	add	r3, pc, #316	; (adr r3, 800f558 <__ieee754_rem_pio2+0x310>)
 800f41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f420:	ec51 0b18 	vmov	r0, r1, d8
 800f424:	f7f1 f8e8 	bl	80005f8 <__aeabi_dmul>
 800f428:	4604      	mov	r4, r0
 800f42a:	460d      	mov	r5, r1
 800f42c:	4602      	mov	r2, r0
 800f42e:	460b      	mov	r3, r1
 800f430:	4630      	mov	r0, r6
 800f432:	4639      	mov	r1, r7
 800f434:	f7f0 ff28 	bl	8000288 <__aeabi_dsub>
 800f438:	4602      	mov	r2, r0
 800f43a:	460b      	mov	r3, r1
 800f43c:	4680      	mov	r8, r0
 800f43e:	4689      	mov	r9, r1
 800f440:	4630      	mov	r0, r6
 800f442:	4639      	mov	r1, r7
 800f444:	f7f0 ff20 	bl	8000288 <__aeabi_dsub>
 800f448:	4622      	mov	r2, r4
 800f44a:	462b      	mov	r3, r5
 800f44c:	f7f0 ff1c 	bl	8000288 <__aeabi_dsub>
 800f450:	a343      	add	r3, pc, #268	; (adr r3, 800f560 <__ieee754_rem_pio2+0x318>)
 800f452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f456:	4604      	mov	r4, r0
 800f458:	460d      	mov	r5, r1
 800f45a:	ec51 0b18 	vmov	r0, r1, d8
 800f45e:	f7f1 f8cb 	bl	80005f8 <__aeabi_dmul>
 800f462:	4622      	mov	r2, r4
 800f464:	462b      	mov	r3, r5
 800f466:	f7f0 ff0f 	bl	8000288 <__aeabi_dsub>
 800f46a:	4602      	mov	r2, r0
 800f46c:	460b      	mov	r3, r1
 800f46e:	4604      	mov	r4, r0
 800f470:	460d      	mov	r5, r1
 800f472:	4640      	mov	r0, r8
 800f474:	4649      	mov	r1, r9
 800f476:	f7f0 ff07 	bl	8000288 <__aeabi_dsub>
 800f47a:	9a03      	ldr	r2, [sp, #12]
 800f47c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	2b31      	cmp	r3, #49	; 0x31
 800f484:	dc24      	bgt.n	800f4d0 <__ieee754_rem_pio2+0x288>
 800f486:	e9ca 0100 	strd	r0, r1, [sl]
 800f48a:	4646      	mov	r6, r8
 800f48c:	464f      	mov	r7, r9
 800f48e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f492:	4630      	mov	r0, r6
 800f494:	4642      	mov	r2, r8
 800f496:	464b      	mov	r3, r9
 800f498:	4639      	mov	r1, r7
 800f49a:	f7f0 fef5 	bl	8000288 <__aeabi_dsub>
 800f49e:	462b      	mov	r3, r5
 800f4a0:	4622      	mov	r2, r4
 800f4a2:	f7f0 fef1 	bl	8000288 <__aeabi_dsub>
 800f4a6:	9b02      	ldr	r3, [sp, #8]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f4ae:	f6bf af0b 	bge.w	800f2c8 <__ieee754_rem_pio2+0x80>
 800f4b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f4b6:	f8ca 3004 	str.w	r3, [sl, #4]
 800f4ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4be:	f8ca 8000 	str.w	r8, [sl]
 800f4c2:	f8ca 0008 	str.w	r0, [sl, #8]
 800f4c6:	f8ca 300c 	str.w	r3, [sl, #12]
 800f4ca:	f1cb 0b00 	rsb	fp, fp, #0
 800f4ce:	e6fb      	b.n	800f2c8 <__ieee754_rem_pio2+0x80>
 800f4d0:	a327      	add	r3, pc, #156	; (adr r3, 800f570 <__ieee754_rem_pio2+0x328>)
 800f4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d6:	ec51 0b18 	vmov	r0, r1, d8
 800f4da:	f7f1 f88d 	bl	80005f8 <__aeabi_dmul>
 800f4de:	4604      	mov	r4, r0
 800f4e0:	460d      	mov	r5, r1
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	4640      	mov	r0, r8
 800f4e8:	4649      	mov	r1, r9
 800f4ea:	f7f0 fecd 	bl	8000288 <__aeabi_dsub>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	4606      	mov	r6, r0
 800f4f4:	460f      	mov	r7, r1
 800f4f6:	4640      	mov	r0, r8
 800f4f8:	4649      	mov	r1, r9
 800f4fa:	f7f0 fec5 	bl	8000288 <__aeabi_dsub>
 800f4fe:	4622      	mov	r2, r4
 800f500:	462b      	mov	r3, r5
 800f502:	f7f0 fec1 	bl	8000288 <__aeabi_dsub>
 800f506:	a31c      	add	r3, pc, #112	; (adr r3, 800f578 <__ieee754_rem_pio2+0x330>)
 800f508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50c:	4604      	mov	r4, r0
 800f50e:	460d      	mov	r5, r1
 800f510:	ec51 0b18 	vmov	r0, r1, d8
 800f514:	f7f1 f870 	bl	80005f8 <__aeabi_dmul>
 800f518:	4622      	mov	r2, r4
 800f51a:	462b      	mov	r3, r5
 800f51c:	f7f0 feb4 	bl	8000288 <__aeabi_dsub>
 800f520:	4604      	mov	r4, r0
 800f522:	460d      	mov	r5, r1
 800f524:	e760      	b.n	800f3e8 <__ieee754_rem_pio2+0x1a0>
 800f526:	4b1c      	ldr	r3, [pc, #112]	; (800f598 <__ieee754_rem_pio2+0x350>)
 800f528:	4598      	cmp	r8, r3
 800f52a:	dd37      	ble.n	800f59c <__ieee754_rem_pio2+0x354>
 800f52c:	ee10 2a10 	vmov	r2, s0
 800f530:	462b      	mov	r3, r5
 800f532:	4620      	mov	r0, r4
 800f534:	4629      	mov	r1, r5
 800f536:	f7f0 fea7 	bl	8000288 <__aeabi_dsub>
 800f53a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f53e:	e9ca 0100 	strd	r0, r1, [sl]
 800f542:	e695      	b.n	800f270 <__ieee754_rem_pio2+0x28>
 800f544:	f3af 8000 	nop.w
 800f548:	54400000 	.word	0x54400000
 800f54c:	3ff921fb 	.word	0x3ff921fb
 800f550:	1a626331 	.word	0x1a626331
 800f554:	3dd0b461 	.word	0x3dd0b461
 800f558:	1a600000 	.word	0x1a600000
 800f55c:	3dd0b461 	.word	0x3dd0b461
 800f560:	2e037073 	.word	0x2e037073
 800f564:	3ba3198a 	.word	0x3ba3198a
 800f568:	6dc9c883 	.word	0x6dc9c883
 800f56c:	3fe45f30 	.word	0x3fe45f30
 800f570:	2e000000 	.word	0x2e000000
 800f574:	3ba3198a 	.word	0x3ba3198a
 800f578:	252049c1 	.word	0x252049c1
 800f57c:	397b839a 	.word	0x397b839a
 800f580:	3fe921fb 	.word	0x3fe921fb
 800f584:	4002d97b 	.word	0x4002d97b
 800f588:	3ff921fb 	.word	0x3ff921fb
 800f58c:	413921fb 	.word	0x413921fb
 800f590:	3fe00000 	.word	0x3fe00000
 800f594:	08012218 	.word	0x08012218
 800f598:	7fefffff 	.word	0x7fefffff
 800f59c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800f5a0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800f5a4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	460d      	mov	r5, r1
 800f5ac:	f7f1 fad4 	bl	8000b58 <__aeabi_d2iz>
 800f5b0:	f7f0 ffb8 	bl	8000524 <__aeabi_i2d>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	4629      	mov	r1, r5
 800f5bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f5c0:	f7f0 fe62 	bl	8000288 <__aeabi_dsub>
 800f5c4:	4b21      	ldr	r3, [pc, #132]	; (800f64c <__ieee754_rem_pio2+0x404>)
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	f7f1 f816 	bl	80005f8 <__aeabi_dmul>
 800f5cc:	460d      	mov	r5, r1
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	f7f1 fac2 	bl	8000b58 <__aeabi_d2iz>
 800f5d4:	f7f0 ffa6 	bl	8000524 <__aeabi_i2d>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	4620      	mov	r0, r4
 800f5de:	4629      	mov	r1, r5
 800f5e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f5e4:	f7f0 fe50 	bl	8000288 <__aeabi_dsub>
 800f5e8:	4b18      	ldr	r3, [pc, #96]	; (800f64c <__ieee754_rem_pio2+0x404>)
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f7f1 f804 	bl	80005f8 <__aeabi_dmul>
 800f5f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f5f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800f5f8:	2703      	movs	r7, #3
 800f5fa:	2400      	movs	r4, #0
 800f5fc:	2500      	movs	r5, #0
 800f5fe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800f602:	4622      	mov	r2, r4
 800f604:	462b      	mov	r3, r5
 800f606:	46b9      	mov	r9, r7
 800f608:	3f01      	subs	r7, #1
 800f60a:	f7f1 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f60e:	2800      	cmp	r0, #0
 800f610:	d1f5      	bne.n	800f5fe <__ieee754_rem_pio2+0x3b6>
 800f612:	4b0f      	ldr	r3, [pc, #60]	; (800f650 <__ieee754_rem_pio2+0x408>)
 800f614:	9301      	str	r3, [sp, #4]
 800f616:	2302      	movs	r3, #2
 800f618:	9300      	str	r3, [sp, #0]
 800f61a:	4632      	mov	r2, r6
 800f61c:	464b      	mov	r3, r9
 800f61e:	4651      	mov	r1, sl
 800f620:	a804      	add	r0, sp, #16
 800f622:	f000 f911 	bl	800f848 <__kernel_rem_pio2>
 800f626:	9b02      	ldr	r3, [sp, #8]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	4683      	mov	fp, r0
 800f62c:	f6bf ae4c 	bge.w	800f2c8 <__ieee754_rem_pio2+0x80>
 800f630:	e9da 2100 	ldrd	r2, r1, [sl]
 800f634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f638:	e9ca 2300 	strd	r2, r3, [sl]
 800f63c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f644:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f648:	e73f      	b.n	800f4ca <__ieee754_rem_pio2+0x282>
 800f64a:	bf00      	nop
 800f64c:	41700000 	.word	0x41700000
 800f650:	08012298 	.word	0x08012298

0800f654 <fabs>:
 800f654:	ec51 0b10 	vmov	r0, r1, d0
 800f658:	ee10 2a10 	vmov	r2, s0
 800f65c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f660:	ec43 2b10 	vmov	d0, r2, r3
 800f664:	4770      	bx	lr
	...

0800f668 <__ieee754_expf>:
 800f668:	ee10 2a10 	vmov	r2, s0
 800f66c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800f670:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f674:	d902      	bls.n	800f67c <__ieee754_expf+0x14>
 800f676:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f67a:	4770      	bx	lr
 800f67c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800f680:	d106      	bne.n	800f690 <__ieee754_expf+0x28>
 800f682:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800f7bc <__ieee754_expf+0x154>
 800f686:	2900      	cmp	r1, #0
 800f688:	bf18      	it	ne
 800f68a:	eeb0 0a67 	vmovne.f32	s0, s15
 800f68e:	4770      	bx	lr
 800f690:	484b      	ldr	r0, [pc, #300]	; (800f7c0 <__ieee754_expf+0x158>)
 800f692:	4282      	cmp	r2, r0
 800f694:	dd02      	ble.n	800f69c <__ieee754_expf+0x34>
 800f696:	2000      	movs	r0, #0
 800f698:	f000 b8d0 	b.w	800f83c <__math_oflowf>
 800f69c:	2a00      	cmp	r2, #0
 800f69e:	da05      	bge.n	800f6ac <__ieee754_expf+0x44>
 800f6a0:	4a48      	ldr	r2, [pc, #288]	; (800f7c4 <__ieee754_expf+0x15c>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d902      	bls.n	800f6ac <__ieee754_expf+0x44>
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	f000 b8c2 	b.w	800f830 <__math_uflowf>
 800f6ac:	4a46      	ldr	r2, [pc, #280]	; (800f7c8 <__ieee754_expf+0x160>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f6b4:	d952      	bls.n	800f75c <__ieee754_expf+0xf4>
 800f6b6:	4a45      	ldr	r2, [pc, #276]	; (800f7cc <__ieee754_expf+0x164>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800f6be:	d834      	bhi.n	800f72a <__ieee754_expf+0xc2>
 800f6c0:	4b43      	ldr	r3, [pc, #268]	; (800f7d0 <__ieee754_expf+0x168>)
 800f6c2:	4413      	add	r3, r2
 800f6c4:	ed93 7a00 	vldr	s14, [r3]
 800f6c8:	4b42      	ldr	r3, [pc, #264]	; (800f7d4 <__ieee754_expf+0x16c>)
 800f6ca:	4413      	add	r3, r2
 800f6cc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800f6d0:	f1c1 0201 	rsb	r2, r1, #1
 800f6d4:	edd3 7a00 	vldr	s15, [r3]
 800f6d8:	1a52      	subs	r2, r2, r1
 800f6da:	ee37 0a67 	vsub.f32	s0, s14, s15
 800f6de:	ee20 6a00 	vmul.f32	s12, s0, s0
 800f6e2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800f7d8 <__ieee754_expf+0x170>
 800f6e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f7dc <__ieee754_expf+0x174>
 800f6ea:	eee6 6a05 	vfma.f32	s13, s12, s10
 800f6ee:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800f7e0 <__ieee754_expf+0x178>
 800f6f2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800f6f6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f7e4 <__ieee754_expf+0x17c>
 800f6fa:	eee5 6a06 	vfma.f32	s13, s10, s12
 800f6fe:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800f7e8 <__ieee754_expf+0x180>
 800f702:	eea6 5a86 	vfma.f32	s10, s13, s12
 800f706:	eef0 6a40 	vmov.f32	s13, s0
 800f70a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800f70e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800f712:	ee20 5a26 	vmul.f32	s10, s0, s13
 800f716:	bb92      	cbnz	r2, 800f77e <__ieee754_expf+0x116>
 800f718:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f71c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800f720:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f724:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800f728:	4770      	bx	lr
 800f72a:	4b30      	ldr	r3, [pc, #192]	; (800f7ec <__ieee754_expf+0x184>)
 800f72c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800f7f0 <__ieee754_expf+0x188>
 800f730:	eddf 6a30 	vldr	s13, [pc, #192]	; 800f7f4 <__ieee754_expf+0x18c>
 800f734:	4413      	add	r3, r2
 800f736:	edd3 7a00 	vldr	s15, [r3]
 800f73a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f73e:	eeb0 7a40 	vmov.f32	s14, s0
 800f742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f746:	ee17 2a90 	vmov	r2, s15
 800f74a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f74e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f752:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f7f8 <__ieee754_expf+0x190>
 800f756:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f75a:	e7be      	b.n	800f6da <__ieee754_expf+0x72>
 800f75c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800f760:	d20b      	bcs.n	800f77a <__ieee754_expf+0x112>
 800f762:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f7fc <__ieee754_expf+0x194>
 800f766:	ee70 6a26 	vadd.f32	s13, s0, s13
 800f76a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800f76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f772:	dd02      	ble.n	800f77a <__ieee754_expf+0x112>
 800f774:	ee30 0a25 	vadd.f32	s0, s0, s11
 800f778:	4770      	bx	lr
 800f77a:	2200      	movs	r2, #0
 800f77c:	e7af      	b.n	800f6de <__ieee754_expf+0x76>
 800f77e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800f782:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800f786:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800f78a:	bfb8      	it	lt
 800f78c:	3264      	addlt	r2, #100	; 0x64
 800f78e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f792:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f796:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f79a:	ee17 3a90 	vmov	r3, s15
 800f79e:	bfab      	itete	ge
 800f7a0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800f7a4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800f7a8:	ee00 3a10 	vmovge	s0, r3
 800f7ac:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800f800 <__ieee754_expf+0x198>
 800f7b0:	bfbc      	itt	lt
 800f7b2:	ee00 3a10 	vmovlt	s0, r3
 800f7b6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800f7ba:	4770      	bx	lr
 800f7bc:	00000000 	.word	0x00000000
 800f7c0:	42b17217 	.word	0x42b17217
 800f7c4:	42cff1b5 	.word	0x42cff1b5
 800f7c8:	3eb17218 	.word	0x3eb17218
 800f7cc:	3f851591 	.word	0x3f851591
 800f7d0:	080123a8 	.word	0x080123a8
 800f7d4:	080123b0 	.word	0x080123b0
 800f7d8:	3331bb4c 	.word	0x3331bb4c
 800f7dc:	b5ddea0e 	.word	0xb5ddea0e
 800f7e0:	388ab355 	.word	0x388ab355
 800f7e4:	bb360b61 	.word	0xbb360b61
 800f7e8:	3e2aaaab 	.word	0x3e2aaaab
 800f7ec:	080123a0 	.word	0x080123a0
 800f7f0:	3fb8aa3b 	.word	0x3fb8aa3b
 800f7f4:	3f317180 	.word	0x3f317180
 800f7f8:	3717f7d1 	.word	0x3717f7d1
 800f7fc:	7149f2ca 	.word	0x7149f2ca
 800f800:	0d800000 	.word	0x0d800000

0800f804 <with_errnof>:
 800f804:	b513      	push	{r0, r1, r4, lr}
 800f806:	4604      	mov	r4, r0
 800f808:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f80c:	f7fc fda0 	bl	800c350 <__errno>
 800f810:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f814:	6004      	str	r4, [r0, #0]
 800f816:	b002      	add	sp, #8
 800f818:	bd10      	pop	{r4, pc}

0800f81a <xflowf>:
 800f81a:	b130      	cbz	r0, 800f82a <xflowf+0x10>
 800f81c:	eef1 7a40 	vneg.f32	s15, s0
 800f820:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f824:	2022      	movs	r0, #34	; 0x22
 800f826:	f7ff bfed 	b.w	800f804 <with_errnof>
 800f82a:	eef0 7a40 	vmov.f32	s15, s0
 800f82e:	e7f7      	b.n	800f820 <xflowf+0x6>

0800f830 <__math_uflowf>:
 800f830:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f838 <__math_uflowf+0x8>
 800f834:	f7ff bff1 	b.w	800f81a <xflowf>
 800f838:	10000000 	.word	0x10000000

0800f83c <__math_oflowf>:
 800f83c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f844 <__math_oflowf+0x8>
 800f840:	f7ff bfeb 	b.w	800f81a <xflowf>
 800f844:	70000000 	.word	0x70000000

0800f848 <__kernel_rem_pio2>:
 800f848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f84c:	ed2d 8b02 	vpush	{d8}
 800f850:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f854:	f112 0f14 	cmn.w	r2, #20
 800f858:	9306      	str	r3, [sp, #24]
 800f85a:	9104      	str	r1, [sp, #16]
 800f85c:	4bc2      	ldr	r3, [pc, #776]	; (800fb68 <__kernel_rem_pio2+0x320>)
 800f85e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f860:	9009      	str	r0, [sp, #36]	; 0x24
 800f862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	9b06      	ldr	r3, [sp, #24]
 800f86a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f86e:	bfa8      	it	ge
 800f870:	1ed4      	subge	r4, r2, #3
 800f872:	9305      	str	r3, [sp, #20]
 800f874:	bfb2      	itee	lt
 800f876:	2400      	movlt	r4, #0
 800f878:	2318      	movge	r3, #24
 800f87a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f87e:	f06f 0317 	mvn.w	r3, #23
 800f882:	fb04 3303 	mla	r3, r4, r3, r3
 800f886:	eb03 0a02 	add.w	sl, r3, r2
 800f88a:	9b00      	ldr	r3, [sp, #0]
 800f88c:	9a05      	ldr	r2, [sp, #20]
 800f88e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800fb58 <__kernel_rem_pio2+0x310>
 800f892:	eb03 0802 	add.w	r8, r3, r2
 800f896:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f898:	1aa7      	subs	r7, r4, r2
 800f89a:	ae20      	add	r6, sp, #128	; 0x80
 800f89c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f8a0:	2500      	movs	r5, #0
 800f8a2:	4545      	cmp	r5, r8
 800f8a4:	dd13      	ble.n	800f8ce <__kernel_rem_pio2+0x86>
 800f8a6:	9b06      	ldr	r3, [sp, #24]
 800f8a8:	aa20      	add	r2, sp, #128	; 0x80
 800f8aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f8ae:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f8b2:	f04f 0800 	mov.w	r8, #0
 800f8b6:	9b00      	ldr	r3, [sp, #0]
 800f8b8:	4598      	cmp	r8, r3
 800f8ba:	dc31      	bgt.n	800f920 <__kernel_rem_pio2+0xd8>
 800f8bc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800fb58 <__kernel_rem_pio2+0x310>
 800f8c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f8c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f8c8:	462f      	mov	r7, r5
 800f8ca:	2600      	movs	r6, #0
 800f8cc:	e01b      	b.n	800f906 <__kernel_rem_pio2+0xbe>
 800f8ce:	42ef      	cmn	r7, r5
 800f8d0:	d407      	bmi.n	800f8e2 <__kernel_rem_pio2+0x9a>
 800f8d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f8d6:	f7f0 fe25 	bl	8000524 <__aeabi_i2d>
 800f8da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f8de:	3501      	adds	r5, #1
 800f8e0:	e7df      	b.n	800f8a2 <__kernel_rem_pio2+0x5a>
 800f8e2:	ec51 0b18 	vmov	r0, r1, d8
 800f8e6:	e7f8      	b.n	800f8da <__kernel_rem_pio2+0x92>
 800f8e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f8f0:	f7f0 fe82 	bl	80005f8 <__aeabi_dmul>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8fc:	f7f0 fcc6 	bl	800028c <__adddf3>
 800f900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f904:	3601      	adds	r6, #1
 800f906:	9b05      	ldr	r3, [sp, #20]
 800f908:	429e      	cmp	r6, r3
 800f90a:	f1a7 0708 	sub.w	r7, r7, #8
 800f90e:	ddeb      	ble.n	800f8e8 <__kernel_rem_pio2+0xa0>
 800f910:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f914:	f108 0801 	add.w	r8, r8, #1
 800f918:	ecab 7b02 	vstmia	fp!, {d7}
 800f91c:	3508      	adds	r5, #8
 800f91e:	e7ca      	b.n	800f8b6 <__kernel_rem_pio2+0x6e>
 800f920:	9b00      	ldr	r3, [sp, #0]
 800f922:	aa0c      	add	r2, sp, #48	; 0x30
 800f924:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f928:	930b      	str	r3, [sp, #44]	; 0x2c
 800f92a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f92c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f930:	9c00      	ldr	r4, [sp, #0]
 800f932:	930a      	str	r3, [sp, #40]	; 0x28
 800f934:	00e3      	lsls	r3, r4, #3
 800f936:	9308      	str	r3, [sp, #32]
 800f938:	ab98      	add	r3, sp, #608	; 0x260
 800f93a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f93e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f942:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800f946:	ab70      	add	r3, sp, #448	; 0x1c0
 800f948:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f94c:	46c3      	mov	fp, r8
 800f94e:	46a1      	mov	r9, r4
 800f950:	f1b9 0f00 	cmp.w	r9, #0
 800f954:	f1a5 0508 	sub.w	r5, r5, #8
 800f958:	dc77      	bgt.n	800fa4a <__kernel_rem_pio2+0x202>
 800f95a:	ec47 6b10 	vmov	d0, r6, r7
 800f95e:	4650      	mov	r0, sl
 800f960:	f000 fac2 	bl	800fee8 <scalbn>
 800f964:	ec57 6b10 	vmov	r6, r7, d0
 800f968:	2200      	movs	r2, #0
 800f96a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f96e:	ee10 0a10 	vmov	r0, s0
 800f972:	4639      	mov	r1, r7
 800f974:	f7f0 fe40 	bl	80005f8 <__aeabi_dmul>
 800f978:	ec41 0b10 	vmov	d0, r0, r1
 800f97c:	f7ff fa5c 	bl	800ee38 <floor>
 800f980:	4b7a      	ldr	r3, [pc, #488]	; (800fb6c <__kernel_rem_pio2+0x324>)
 800f982:	ec51 0b10 	vmov	r0, r1, d0
 800f986:	2200      	movs	r2, #0
 800f988:	f7f0 fe36 	bl	80005f8 <__aeabi_dmul>
 800f98c:	4602      	mov	r2, r0
 800f98e:	460b      	mov	r3, r1
 800f990:	4630      	mov	r0, r6
 800f992:	4639      	mov	r1, r7
 800f994:	f7f0 fc78 	bl	8000288 <__aeabi_dsub>
 800f998:	460f      	mov	r7, r1
 800f99a:	4606      	mov	r6, r0
 800f99c:	f7f1 f8dc 	bl	8000b58 <__aeabi_d2iz>
 800f9a0:	9002      	str	r0, [sp, #8]
 800f9a2:	f7f0 fdbf 	bl	8000524 <__aeabi_i2d>
 800f9a6:	4602      	mov	r2, r0
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	4639      	mov	r1, r7
 800f9ae:	f7f0 fc6b 	bl	8000288 <__aeabi_dsub>
 800f9b2:	f1ba 0f00 	cmp.w	sl, #0
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	460f      	mov	r7, r1
 800f9ba:	dd6d      	ble.n	800fa98 <__kernel_rem_pio2+0x250>
 800f9bc:	1e61      	subs	r1, r4, #1
 800f9be:	ab0c      	add	r3, sp, #48	; 0x30
 800f9c0:	9d02      	ldr	r5, [sp, #8]
 800f9c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f9c6:	f1ca 0018 	rsb	r0, sl, #24
 800f9ca:	fa43 f200 	asr.w	r2, r3, r0
 800f9ce:	4415      	add	r5, r2
 800f9d0:	4082      	lsls	r2, r0
 800f9d2:	1a9b      	subs	r3, r3, r2
 800f9d4:	aa0c      	add	r2, sp, #48	; 0x30
 800f9d6:	9502      	str	r5, [sp, #8]
 800f9d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f9dc:	f1ca 0217 	rsb	r2, sl, #23
 800f9e0:	fa43 fb02 	asr.w	fp, r3, r2
 800f9e4:	f1bb 0f00 	cmp.w	fp, #0
 800f9e8:	dd65      	ble.n	800fab6 <__kernel_rem_pio2+0x26e>
 800f9ea:	9b02      	ldr	r3, [sp, #8]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	9302      	str	r3, [sp, #8]
 800f9f2:	4615      	mov	r5, r2
 800f9f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f9f8:	4294      	cmp	r4, r2
 800f9fa:	f300 809f 	bgt.w	800fb3c <__kernel_rem_pio2+0x2f4>
 800f9fe:	f1ba 0f00 	cmp.w	sl, #0
 800fa02:	dd07      	ble.n	800fa14 <__kernel_rem_pio2+0x1cc>
 800fa04:	f1ba 0f01 	cmp.w	sl, #1
 800fa08:	f000 80c1 	beq.w	800fb8e <__kernel_rem_pio2+0x346>
 800fa0c:	f1ba 0f02 	cmp.w	sl, #2
 800fa10:	f000 80c7 	beq.w	800fba2 <__kernel_rem_pio2+0x35a>
 800fa14:	f1bb 0f02 	cmp.w	fp, #2
 800fa18:	d14d      	bne.n	800fab6 <__kernel_rem_pio2+0x26e>
 800fa1a:	4632      	mov	r2, r6
 800fa1c:	463b      	mov	r3, r7
 800fa1e:	4954      	ldr	r1, [pc, #336]	; (800fb70 <__kernel_rem_pio2+0x328>)
 800fa20:	2000      	movs	r0, #0
 800fa22:	f7f0 fc31 	bl	8000288 <__aeabi_dsub>
 800fa26:	4606      	mov	r6, r0
 800fa28:	460f      	mov	r7, r1
 800fa2a:	2d00      	cmp	r5, #0
 800fa2c:	d043      	beq.n	800fab6 <__kernel_rem_pio2+0x26e>
 800fa2e:	4650      	mov	r0, sl
 800fa30:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800fb60 <__kernel_rem_pio2+0x318>
 800fa34:	f000 fa58 	bl	800fee8 <scalbn>
 800fa38:	4630      	mov	r0, r6
 800fa3a:	4639      	mov	r1, r7
 800fa3c:	ec53 2b10 	vmov	r2, r3, d0
 800fa40:	f7f0 fc22 	bl	8000288 <__aeabi_dsub>
 800fa44:	4606      	mov	r6, r0
 800fa46:	460f      	mov	r7, r1
 800fa48:	e035      	b.n	800fab6 <__kernel_rem_pio2+0x26e>
 800fa4a:	4b4a      	ldr	r3, [pc, #296]	; (800fb74 <__kernel_rem_pio2+0x32c>)
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	4630      	mov	r0, r6
 800fa50:	4639      	mov	r1, r7
 800fa52:	f7f0 fdd1 	bl	80005f8 <__aeabi_dmul>
 800fa56:	f7f1 f87f 	bl	8000b58 <__aeabi_d2iz>
 800fa5a:	f7f0 fd63 	bl	8000524 <__aeabi_i2d>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	460b      	mov	r3, r1
 800fa62:	ec43 2b18 	vmov	d8, r2, r3
 800fa66:	4b44      	ldr	r3, [pc, #272]	; (800fb78 <__kernel_rem_pio2+0x330>)
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f7f0 fdc5 	bl	80005f8 <__aeabi_dmul>
 800fa6e:	4602      	mov	r2, r0
 800fa70:	460b      	mov	r3, r1
 800fa72:	4630      	mov	r0, r6
 800fa74:	4639      	mov	r1, r7
 800fa76:	f7f0 fc07 	bl	8000288 <__aeabi_dsub>
 800fa7a:	f7f1 f86d 	bl	8000b58 <__aeabi_d2iz>
 800fa7e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fa82:	f84b 0b04 	str.w	r0, [fp], #4
 800fa86:	ec51 0b18 	vmov	r0, r1, d8
 800fa8a:	f7f0 fbff 	bl	800028c <__adddf3>
 800fa8e:	f109 39ff 	add.w	r9, r9, #4294967295
 800fa92:	4606      	mov	r6, r0
 800fa94:	460f      	mov	r7, r1
 800fa96:	e75b      	b.n	800f950 <__kernel_rem_pio2+0x108>
 800fa98:	d106      	bne.n	800faa8 <__kernel_rem_pio2+0x260>
 800fa9a:	1e63      	subs	r3, r4, #1
 800fa9c:	aa0c      	add	r2, sp, #48	; 0x30
 800fa9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faa2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800faa6:	e79d      	b.n	800f9e4 <__kernel_rem_pio2+0x19c>
 800faa8:	4b34      	ldr	r3, [pc, #208]	; (800fb7c <__kernel_rem_pio2+0x334>)
 800faaa:	2200      	movs	r2, #0
 800faac:	f7f1 f82a 	bl	8000b04 <__aeabi_dcmpge>
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d140      	bne.n	800fb36 <__kernel_rem_pio2+0x2ee>
 800fab4:	4683      	mov	fp, r0
 800fab6:	2200      	movs	r2, #0
 800fab8:	2300      	movs	r3, #0
 800faba:	4630      	mov	r0, r6
 800fabc:	4639      	mov	r1, r7
 800fabe:	f7f1 f803 	bl	8000ac8 <__aeabi_dcmpeq>
 800fac2:	2800      	cmp	r0, #0
 800fac4:	f000 80c1 	beq.w	800fc4a <__kernel_rem_pio2+0x402>
 800fac8:	1e65      	subs	r5, r4, #1
 800faca:	462b      	mov	r3, r5
 800facc:	2200      	movs	r2, #0
 800face:	9900      	ldr	r1, [sp, #0]
 800fad0:	428b      	cmp	r3, r1
 800fad2:	da6d      	bge.n	800fbb0 <__kernel_rem_pio2+0x368>
 800fad4:	2a00      	cmp	r2, #0
 800fad6:	f000 808a 	beq.w	800fbee <__kernel_rem_pio2+0x3a6>
 800fada:	ab0c      	add	r3, sp, #48	; 0x30
 800fadc:	f1aa 0a18 	sub.w	sl, sl, #24
 800fae0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	f000 80ae 	beq.w	800fc46 <__kernel_rem_pio2+0x3fe>
 800faea:	4650      	mov	r0, sl
 800faec:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800fb60 <__kernel_rem_pio2+0x318>
 800faf0:	f000 f9fa 	bl	800fee8 <scalbn>
 800faf4:	1c6b      	adds	r3, r5, #1
 800faf6:	00da      	lsls	r2, r3, #3
 800faf8:	9205      	str	r2, [sp, #20]
 800fafa:	ec57 6b10 	vmov	r6, r7, d0
 800fafe:	aa70      	add	r2, sp, #448	; 0x1c0
 800fb00:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800fb74 <__kernel_rem_pio2+0x32c>
 800fb04:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800fb08:	462c      	mov	r4, r5
 800fb0a:	f04f 0800 	mov.w	r8, #0
 800fb0e:	2c00      	cmp	r4, #0
 800fb10:	f280 80d4 	bge.w	800fcbc <__kernel_rem_pio2+0x474>
 800fb14:	462c      	mov	r4, r5
 800fb16:	2c00      	cmp	r4, #0
 800fb18:	f2c0 8102 	blt.w	800fd20 <__kernel_rem_pio2+0x4d8>
 800fb1c:	4b18      	ldr	r3, [pc, #96]	; (800fb80 <__kernel_rem_pio2+0x338>)
 800fb1e:	461e      	mov	r6, r3
 800fb20:	ab70      	add	r3, sp, #448	; 0x1c0
 800fb22:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800fb26:	1b2b      	subs	r3, r5, r4
 800fb28:	f04f 0900 	mov.w	r9, #0
 800fb2c:	f04f 0a00 	mov.w	sl, #0
 800fb30:	2700      	movs	r7, #0
 800fb32:	9306      	str	r3, [sp, #24]
 800fb34:	e0e6      	b.n	800fd04 <__kernel_rem_pio2+0x4bc>
 800fb36:	f04f 0b02 	mov.w	fp, #2
 800fb3a:	e756      	b.n	800f9ea <__kernel_rem_pio2+0x1a2>
 800fb3c:	f8d8 3000 	ldr.w	r3, [r8]
 800fb40:	bb05      	cbnz	r5, 800fb84 <__kernel_rem_pio2+0x33c>
 800fb42:	b123      	cbz	r3, 800fb4e <__kernel_rem_pio2+0x306>
 800fb44:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fb48:	f8c8 3000 	str.w	r3, [r8]
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	3201      	adds	r2, #1
 800fb50:	f108 0804 	add.w	r8, r8, #4
 800fb54:	461d      	mov	r5, r3
 800fb56:	e74f      	b.n	800f9f8 <__kernel_rem_pio2+0x1b0>
	...
 800fb64:	3ff00000 	.word	0x3ff00000
 800fb68:	080123f8 	.word	0x080123f8
 800fb6c:	40200000 	.word	0x40200000
 800fb70:	3ff00000 	.word	0x3ff00000
 800fb74:	3e700000 	.word	0x3e700000
 800fb78:	41700000 	.word	0x41700000
 800fb7c:	3fe00000 	.word	0x3fe00000
 800fb80:	080123b8 	.word	0x080123b8
 800fb84:	1acb      	subs	r3, r1, r3
 800fb86:	f8c8 3000 	str.w	r3, [r8]
 800fb8a:	462b      	mov	r3, r5
 800fb8c:	e7df      	b.n	800fb4e <__kernel_rem_pio2+0x306>
 800fb8e:	1e62      	subs	r2, r4, #1
 800fb90:	ab0c      	add	r3, sp, #48	; 0x30
 800fb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb96:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fb9a:	a90c      	add	r1, sp, #48	; 0x30
 800fb9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fba0:	e738      	b.n	800fa14 <__kernel_rem_pio2+0x1cc>
 800fba2:	1e62      	subs	r2, r4, #1
 800fba4:	ab0c      	add	r3, sp, #48	; 0x30
 800fba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbaa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fbae:	e7f4      	b.n	800fb9a <__kernel_rem_pio2+0x352>
 800fbb0:	a90c      	add	r1, sp, #48	; 0x30
 800fbb2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	430a      	orrs	r2, r1
 800fbba:	e788      	b.n	800face <__kernel_rem_pio2+0x286>
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fbc2:	2900      	cmp	r1, #0
 800fbc4:	d0fa      	beq.n	800fbbc <__kernel_rem_pio2+0x374>
 800fbc6:	9a08      	ldr	r2, [sp, #32]
 800fbc8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800fbcc:	446a      	add	r2, sp
 800fbce:	3a98      	subs	r2, #152	; 0x98
 800fbd0:	9208      	str	r2, [sp, #32]
 800fbd2:	9a06      	ldr	r2, [sp, #24]
 800fbd4:	a920      	add	r1, sp, #128	; 0x80
 800fbd6:	18a2      	adds	r2, r4, r2
 800fbd8:	18e3      	adds	r3, r4, r3
 800fbda:	f104 0801 	add.w	r8, r4, #1
 800fbde:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800fbe2:	9302      	str	r3, [sp, #8]
 800fbe4:	9b02      	ldr	r3, [sp, #8]
 800fbe6:	4543      	cmp	r3, r8
 800fbe8:	da04      	bge.n	800fbf4 <__kernel_rem_pio2+0x3ac>
 800fbea:	461c      	mov	r4, r3
 800fbec:	e6a2      	b.n	800f934 <__kernel_rem_pio2+0xec>
 800fbee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	e7e4      	b.n	800fbbe <__kernel_rem_pio2+0x376>
 800fbf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbf6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fbfa:	f7f0 fc93 	bl	8000524 <__aeabi_i2d>
 800fbfe:	e8e5 0102 	strd	r0, r1, [r5], #8
 800fc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc04:	46ab      	mov	fp, r5
 800fc06:	461c      	mov	r4, r3
 800fc08:	f04f 0900 	mov.w	r9, #0
 800fc0c:	2600      	movs	r6, #0
 800fc0e:	2700      	movs	r7, #0
 800fc10:	9b05      	ldr	r3, [sp, #20]
 800fc12:	4599      	cmp	r9, r3
 800fc14:	dd06      	ble.n	800fc24 <__kernel_rem_pio2+0x3dc>
 800fc16:	9b08      	ldr	r3, [sp, #32]
 800fc18:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fc1c:	f108 0801 	add.w	r8, r8, #1
 800fc20:	9308      	str	r3, [sp, #32]
 800fc22:	e7df      	b.n	800fbe4 <__kernel_rem_pio2+0x39c>
 800fc24:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fc28:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fc2c:	f7f0 fce4 	bl	80005f8 <__aeabi_dmul>
 800fc30:	4602      	mov	r2, r0
 800fc32:	460b      	mov	r3, r1
 800fc34:	4630      	mov	r0, r6
 800fc36:	4639      	mov	r1, r7
 800fc38:	f7f0 fb28 	bl	800028c <__adddf3>
 800fc3c:	f109 0901 	add.w	r9, r9, #1
 800fc40:	4606      	mov	r6, r0
 800fc42:	460f      	mov	r7, r1
 800fc44:	e7e4      	b.n	800fc10 <__kernel_rem_pio2+0x3c8>
 800fc46:	3d01      	subs	r5, #1
 800fc48:	e747      	b.n	800fada <__kernel_rem_pio2+0x292>
 800fc4a:	ec47 6b10 	vmov	d0, r6, r7
 800fc4e:	f1ca 0000 	rsb	r0, sl, #0
 800fc52:	f000 f949 	bl	800fee8 <scalbn>
 800fc56:	ec57 6b10 	vmov	r6, r7, d0
 800fc5a:	4ba0      	ldr	r3, [pc, #640]	; (800fedc <__kernel_rem_pio2+0x694>)
 800fc5c:	ee10 0a10 	vmov	r0, s0
 800fc60:	2200      	movs	r2, #0
 800fc62:	4639      	mov	r1, r7
 800fc64:	f7f0 ff4e 	bl	8000b04 <__aeabi_dcmpge>
 800fc68:	b1f8      	cbz	r0, 800fcaa <__kernel_rem_pio2+0x462>
 800fc6a:	4b9d      	ldr	r3, [pc, #628]	; (800fee0 <__kernel_rem_pio2+0x698>)
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	4630      	mov	r0, r6
 800fc70:	4639      	mov	r1, r7
 800fc72:	f7f0 fcc1 	bl	80005f8 <__aeabi_dmul>
 800fc76:	f7f0 ff6f 	bl	8000b58 <__aeabi_d2iz>
 800fc7a:	4680      	mov	r8, r0
 800fc7c:	f7f0 fc52 	bl	8000524 <__aeabi_i2d>
 800fc80:	4b96      	ldr	r3, [pc, #600]	; (800fedc <__kernel_rem_pio2+0x694>)
 800fc82:	2200      	movs	r2, #0
 800fc84:	f7f0 fcb8 	bl	80005f8 <__aeabi_dmul>
 800fc88:	460b      	mov	r3, r1
 800fc8a:	4602      	mov	r2, r0
 800fc8c:	4639      	mov	r1, r7
 800fc8e:	4630      	mov	r0, r6
 800fc90:	f7f0 fafa 	bl	8000288 <__aeabi_dsub>
 800fc94:	f7f0 ff60 	bl	8000b58 <__aeabi_d2iz>
 800fc98:	1c65      	adds	r5, r4, #1
 800fc9a:	ab0c      	add	r3, sp, #48	; 0x30
 800fc9c:	f10a 0a18 	add.w	sl, sl, #24
 800fca0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fca4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800fca8:	e71f      	b.n	800faea <__kernel_rem_pio2+0x2a2>
 800fcaa:	4630      	mov	r0, r6
 800fcac:	4639      	mov	r1, r7
 800fcae:	f7f0 ff53 	bl	8000b58 <__aeabi_d2iz>
 800fcb2:	ab0c      	add	r3, sp, #48	; 0x30
 800fcb4:	4625      	mov	r5, r4
 800fcb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fcba:	e716      	b.n	800faea <__kernel_rem_pio2+0x2a2>
 800fcbc:	ab0c      	add	r3, sp, #48	; 0x30
 800fcbe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fcc2:	f7f0 fc2f 	bl	8000524 <__aeabi_i2d>
 800fcc6:	4632      	mov	r2, r6
 800fcc8:	463b      	mov	r3, r7
 800fcca:	f7f0 fc95 	bl	80005f8 <__aeabi_dmul>
 800fcce:	4642      	mov	r2, r8
 800fcd0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800fcd4:	464b      	mov	r3, r9
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	4639      	mov	r1, r7
 800fcda:	f7f0 fc8d 	bl	80005f8 <__aeabi_dmul>
 800fcde:	3c01      	subs	r4, #1
 800fce0:	4606      	mov	r6, r0
 800fce2:	460f      	mov	r7, r1
 800fce4:	e713      	b.n	800fb0e <__kernel_rem_pio2+0x2c6>
 800fce6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800fcea:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800fcee:	f7f0 fc83 	bl	80005f8 <__aeabi_dmul>
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	4648      	mov	r0, r9
 800fcf8:	4651      	mov	r1, sl
 800fcfa:	f7f0 fac7 	bl	800028c <__adddf3>
 800fcfe:	3701      	adds	r7, #1
 800fd00:	4681      	mov	r9, r0
 800fd02:	468a      	mov	sl, r1
 800fd04:	9b00      	ldr	r3, [sp, #0]
 800fd06:	429f      	cmp	r7, r3
 800fd08:	dc02      	bgt.n	800fd10 <__kernel_rem_pio2+0x4c8>
 800fd0a:	9b06      	ldr	r3, [sp, #24]
 800fd0c:	429f      	cmp	r7, r3
 800fd0e:	ddea      	ble.n	800fce6 <__kernel_rem_pio2+0x49e>
 800fd10:	9a06      	ldr	r2, [sp, #24]
 800fd12:	ab48      	add	r3, sp, #288	; 0x120
 800fd14:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800fd18:	e9c6 9a00 	strd	r9, sl, [r6]
 800fd1c:	3c01      	subs	r4, #1
 800fd1e:	e6fa      	b.n	800fb16 <__kernel_rem_pio2+0x2ce>
 800fd20:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800fd22:	2b02      	cmp	r3, #2
 800fd24:	dc0b      	bgt.n	800fd3e <__kernel_rem_pio2+0x4f6>
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	dc39      	bgt.n	800fd9e <__kernel_rem_pio2+0x556>
 800fd2a:	d05d      	beq.n	800fde8 <__kernel_rem_pio2+0x5a0>
 800fd2c:	9b02      	ldr	r3, [sp, #8]
 800fd2e:	f003 0007 	and.w	r0, r3, #7
 800fd32:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800fd36:	ecbd 8b02 	vpop	{d8}
 800fd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800fd40:	2b03      	cmp	r3, #3
 800fd42:	d1f3      	bne.n	800fd2c <__kernel_rem_pio2+0x4e4>
 800fd44:	9b05      	ldr	r3, [sp, #20]
 800fd46:	9500      	str	r5, [sp, #0]
 800fd48:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800fd4c:	eb0d 0403 	add.w	r4, sp, r3
 800fd50:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800fd54:	46a2      	mov	sl, r4
 800fd56:	9b00      	ldr	r3, [sp, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f1aa 0a08 	sub.w	sl, sl, #8
 800fd5e:	dc69      	bgt.n	800fe34 <__kernel_rem_pio2+0x5ec>
 800fd60:	46aa      	mov	sl, r5
 800fd62:	f1ba 0f01 	cmp.w	sl, #1
 800fd66:	f1a4 0408 	sub.w	r4, r4, #8
 800fd6a:	f300 8083 	bgt.w	800fe74 <__kernel_rem_pio2+0x62c>
 800fd6e:	9c05      	ldr	r4, [sp, #20]
 800fd70:	ab48      	add	r3, sp, #288	; 0x120
 800fd72:	441c      	add	r4, r3
 800fd74:	2000      	movs	r0, #0
 800fd76:	2100      	movs	r1, #0
 800fd78:	2d01      	cmp	r5, #1
 800fd7a:	f300 809a 	bgt.w	800feb2 <__kernel_rem_pio2+0x66a>
 800fd7e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800fd82:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800fd86:	f1bb 0f00 	cmp.w	fp, #0
 800fd8a:	f040 8098 	bne.w	800febe <__kernel_rem_pio2+0x676>
 800fd8e:	9b04      	ldr	r3, [sp, #16]
 800fd90:	e9c3 7800 	strd	r7, r8, [r3]
 800fd94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800fd98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fd9c:	e7c6      	b.n	800fd2c <__kernel_rem_pio2+0x4e4>
 800fd9e:	9e05      	ldr	r6, [sp, #20]
 800fda0:	ab48      	add	r3, sp, #288	; 0x120
 800fda2:	441e      	add	r6, r3
 800fda4:	462c      	mov	r4, r5
 800fda6:	2000      	movs	r0, #0
 800fda8:	2100      	movs	r1, #0
 800fdaa:	2c00      	cmp	r4, #0
 800fdac:	da33      	bge.n	800fe16 <__kernel_rem_pio2+0x5ce>
 800fdae:	f1bb 0f00 	cmp.w	fp, #0
 800fdb2:	d036      	beq.n	800fe22 <__kernel_rem_pio2+0x5da>
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdba:	9c04      	ldr	r4, [sp, #16]
 800fdbc:	e9c4 2300 	strd	r2, r3, [r4]
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800fdc8:	f7f0 fa5e 	bl	8000288 <__aeabi_dsub>
 800fdcc:	ae4a      	add	r6, sp, #296	; 0x128
 800fdce:	2401      	movs	r4, #1
 800fdd0:	42a5      	cmp	r5, r4
 800fdd2:	da29      	bge.n	800fe28 <__kernel_rem_pio2+0x5e0>
 800fdd4:	f1bb 0f00 	cmp.w	fp, #0
 800fdd8:	d002      	beq.n	800fde0 <__kernel_rem_pio2+0x598>
 800fdda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdde:	4619      	mov	r1, r3
 800fde0:	9b04      	ldr	r3, [sp, #16]
 800fde2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fde6:	e7a1      	b.n	800fd2c <__kernel_rem_pio2+0x4e4>
 800fde8:	9c05      	ldr	r4, [sp, #20]
 800fdea:	ab48      	add	r3, sp, #288	; 0x120
 800fdec:	441c      	add	r4, r3
 800fdee:	2000      	movs	r0, #0
 800fdf0:	2100      	movs	r1, #0
 800fdf2:	2d00      	cmp	r5, #0
 800fdf4:	da09      	bge.n	800fe0a <__kernel_rem_pio2+0x5c2>
 800fdf6:	f1bb 0f00 	cmp.w	fp, #0
 800fdfa:	d002      	beq.n	800fe02 <__kernel_rem_pio2+0x5ba>
 800fdfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe00:	4619      	mov	r1, r3
 800fe02:	9b04      	ldr	r3, [sp, #16]
 800fe04:	e9c3 0100 	strd	r0, r1, [r3]
 800fe08:	e790      	b.n	800fd2c <__kernel_rem_pio2+0x4e4>
 800fe0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fe0e:	f7f0 fa3d 	bl	800028c <__adddf3>
 800fe12:	3d01      	subs	r5, #1
 800fe14:	e7ed      	b.n	800fdf2 <__kernel_rem_pio2+0x5aa>
 800fe16:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800fe1a:	f7f0 fa37 	bl	800028c <__adddf3>
 800fe1e:	3c01      	subs	r4, #1
 800fe20:	e7c3      	b.n	800fdaa <__kernel_rem_pio2+0x562>
 800fe22:	4602      	mov	r2, r0
 800fe24:	460b      	mov	r3, r1
 800fe26:	e7c8      	b.n	800fdba <__kernel_rem_pio2+0x572>
 800fe28:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fe2c:	f7f0 fa2e 	bl	800028c <__adddf3>
 800fe30:	3401      	adds	r4, #1
 800fe32:	e7cd      	b.n	800fdd0 <__kernel_rem_pio2+0x588>
 800fe34:	e9da 8900 	ldrd	r8, r9, [sl]
 800fe38:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fe3c:	9b00      	ldr	r3, [sp, #0]
 800fe3e:	3b01      	subs	r3, #1
 800fe40:	9300      	str	r3, [sp, #0]
 800fe42:	4632      	mov	r2, r6
 800fe44:	463b      	mov	r3, r7
 800fe46:	4640      	mov	r0, r8
 800fe48:	4649      	mov	r1, r9
 800fe4a:	f7f0 fa1f 	bl	800028c <__adddf3>
 800fe4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fe52:	4602      	mov	r2, r0
 800fe54:	460b      	mov	r3, r1
 800fe56:	4640      	mov	r0, r8
 800fe58:	4649      	mov	r1, r9
 800fe5a:	f7f0 fa15 	bl	8000288 <__aeabi_dsub>
 800fe5e:	4632      	mov	r2, r6
 800fe60:	463b      	mov	r3, r7
 800fe62:	f7f0 fa13 	bl	800028c <__adddf3>
 800fe66:	ed9d 7b06 	vldr	d7, [sp, #24]
 800fe6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fe6e:	ed8a 7b00 	vstr	d7, [sl]
 800fe72:	e770      	b.n	800fd56 <__kernel_rem_pio2+0x50e>
 800fe74:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fe78:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800fe7c:	4640      	mov	r0, r8
 800fe7e:	4632      	mov	r2, r6
 800fe80:	463b      	mov	r3, r7
 800fe82:	4649      	mov	r1, r9
 800fe84:	f7f0 fa02 	bl	800028c <__adddf3>
 800fe88:	e9cd 0100 	strd	r0, r1, [sp]
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	460b      	mov	r3, r1
 800fe90:	4640      	mov	r0, r8
 800fe92:	4649      	mov	r1, r9
 800fe94:	f7f0 f9f8 	bl	8000288 <__aeabi_dsub>
 800fe98:	4632      	mov	r2, r6
 800fe9a:	463b      	mov	r3, r7
 800fe9c:	f7f0 f9f6 	bl	800028c <__adddf3>
 800fea0:	ed9d 7b00 	vldr	d7, [sp]
 800fea4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fea8:	ed84 7b00 	vstr	d7, [r4]
 800feac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800feb0:	e757      	b.n	800fd62 <__kernel_rem_pio2+0x51a>
 800feb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800feb6:	f7f0 f9e9 	bl	800028c <__adddf3>
 800feba:	3d01      	subs	r5, #1
 800febc:	e75c      	b.n	800fd78 <__kernel_rem_pio2+0x530>
 800febe:	9b04      	ldr	r3, [sp, #16]
 800fec0:	9a04      	ldr	r2, [sp, #16]
 800fec2:	601f      	str	r7, [r3, #0]
 800fec4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800fec8:	605c      	str	r4, [r3, #4]
 800feca:	609d      	str	r5, [r3, #8]
 800fecc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fed0:	60d3      	str	r3, [r2, #12]
 800fed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fed6:	6110      	str	r0, [r2, #16]
 800fed8:	6153      	str	r3, [r2, #20]
 800feda:	e727      	b.n	800fd2c <__kernel_rem_pio2+0x4e4>
 800fedc:	41700000 	.word	0x41700000
 800fee0:	3e700000 	.word	0x3e700000
 800fee4:	00000000 	.word	0x00000000

0800fee8 <scalbn>:
 800fee8:	b570      	push	{r4, r5, r6, lr}
 800feea:	ec55 4b10 	vmov	r4, r5, d0
 800feee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fef2:	4606      	mov	r6, r0
 800fef4:	462b      	mov	r3, r5
 800fef6:	b999      	cbnz	r1, 800ff20 <scalbn+0x38>
 800fef8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fefc:	4323      	orrs	r3, r4
 800fefe:	d03f      	beq.n	800ff80 <scalbn+0x98>
 800ff00:	4b35      	ldr	r3, [pc, #212]	; (800ffd8 <scalbn+0xf0>)
 800ff02:	4629      	mov	r1, r5
 800ff04:	ee10 0a10 	vmov	r0, s0
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f7f0 fb75 	bl	80005f8 <__aeabi_dmul>
 800ff0e:	4b33      	ldr	r3, [pc, #204]	; (800ffdc <scalbn+0xf4>)
 800ff10:	429e      	cmp	r6, r3
 800ff12:	4604      	mov	r4, r0
 800ff14:	460d      	mov	r5, r1
 800ff16:	da10      	bge.n	800ff3a <scalbn+0x52>
 800ff18:	a327      	add	r3, pc, #156	; (adr r3, 800ffb8 <scalbn+0xd0>)
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	e01f      	b.n	800ff60 <scalbn+0x78>
 800ff20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ff24:	4291      	cmp	r1, r2
 800ff26:	d10c      	bne.n	800ff42 <scalbn+0x5a>
 800ff28:	ee10 2a10 	vmov	r2, s0
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	4629      	mov	r1, r5
 800ff30:	f7f0 f9ac 	bl	800028c <__adddf3>
 800ff34:	4604      	mov	r4, r0
 800ff36:	460d      	mov	r5, r1
 800ff38:	e022      	b.n	800ff80 <scalbn+0x98>
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ff40:	3936      	subs	r1, #54	; 0x36
 800ff42:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ff46:	4296      	cmp	r6, r2
 800ff48:	dd0d      	ble.n	800ff66 <scalbn+0x7e>
 800ff4a:	2d00      	cmp	r5, #0
 800ff4c:	a11c      	add	r1, pc, #112	; (adr r1, 800ffc0 <scalbn+0xd8>)
 800ff4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff52:	da02      	bge.n	800ff5a <scalbn+0x72>
 800ff54:	a11c      	add	r1, pc, #112	; (adr r1, 800ffc8 <scalbn+0xe0>)
 800ff56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff5a:	a319      	add	r3, pc, #100	; (adr r3, 800ffc0 <scalbn+0xd8>)
 800ff5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff60:	f7f0 fb4a 	bl	80005f8 <__aeabi_dmul>
 800ff64:	e7e6      	b.n	800ff34 <scalbn+0x4c>
 800ff66:	1872      	adds	r2, r6, r1
 800ff68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ff6c:	428a      	cmp	r2, r1
 800ff6e:	dcec      	bgt.n	800ff4a <scalbn+0x62>
 800ff70:	2a00      	cmp	r2, #0
 800ff72:	dd08      	ble.n	800ff86 <scalbn+0x9e>
 800ff74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ff7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff80:	ec45 4b10 	vmov	d0, r4, r5
 800ff84:	bd70      	pop	{r4, r5, r6, pc}
 800ff86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ff8a:	da08      	bge.n	800ff9e <scalbn+0xb6>
 800ff8c:	2d00      	cmp	r5, #0
 800ff8e:	a10a      	add	r1, pc, #40	; (adr r1, 800ffb8 <scalbn+0xd0>)
 800ff90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff94:	dac0      	bge.n	800ff18 <scalbn+0x30>
 800ff96:	a10e      	add	r1, pc, #56	; (adr r1, 800ffd0 <scalbn+0xe8>)
 800ff98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff9c:	e7bc      	b.n	800ff18 <scalbn+0x30>
 800ff9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffa2:	3236      	adds	r2, #54	; 0x36
 800ffa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ffa8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ffac:	4620      	mov	r0, r4
 800ffae:	4b0c      	ldr	r3, [pc, #48]	; (800ffe0 <scalbn+0xf8>)
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	e7d5      	b.n	800ff60 <scalbn+0x78>
 800ffb4:	f3af 8000 	nop.w
 800ffb8:	c2f8f359 	.word	0xc2f8f359
 800ffbc:	01a56e1f 	.word	0x01a56e1f
 800ffc0:	8800759c 	.word	0x8800759c
 800ffc4:	7e37e43c 	.word	0x7e37e43c
 800ffc8:	8800759c 	.word	0x8800759c
 800ffcc:	fe37e43c 	.word	0xfe37e43c
 800ffd0:	c2f8f359 	.word	0xc2f8f359
 800ffd4:	81a56e1f 	.word	0x81a56e1f
 800ffd8:	43500000 	.word	0x43500000
 800ffdc:	ffff3cb0 	.word	0xffff3cb0
 800ffe0:	3c900000 	.word	0x3c900000

0800ffe4 <_init>:
 800ffe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffe6:	bf00      	nop
 800ffe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffea:	bc08      	pop	{r3}
 800ffec:	469e      	mov	lr, r3
 800ffee:	4770      	bx	lr

0800fff0 <_fini>:
 800fff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff2:	bf00      	nop
 800fff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fff6:	bc08      	pop	{r3}
 800fff8:	469e      	mov	lr, r3
 800fffa:	4770      	bx	lr
