
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000deac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001780  0800e040  0800e040  0001e040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7c0  0800f7c0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7c0  0800f7c0  0001f7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7c8  0800f7c8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7c8  0800f7c8  0001f7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7cc  0800f7cc  0001f7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f7d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a30  200001e8  0800f9b4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c18  0800f9b4  00020c18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153de  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ae  00000000  00000000  00035635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  000389e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d72  00000000  00000000  00039b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cce  00000000  00000000  0003a8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017545  00000000  00000000  0005d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8f81  00000000  00000000  00074add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006214  00000000  00000000  0013da60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00143c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e024 	.word	0x0800e024

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e024 	.word	0x0800e024

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <QMC_init>:
//code recuperer et fonctionnel, il utilise une fonction init, permettant d'initialiser le capteur correctement en ecrivant dans ces registres selon le datasheet,
//puis d'une fonction read, qui lit le capteur puis met à jour la structurede donnée

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2211      	movs	r2, #17
 8001008:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 800100a:	2301      	movs	r3, #1
 800100c:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2bc8      	cmp	r3, #200	; 0xc8
 8001018:	d107      	bne.n	800102a <QMC_init+0x3a>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	f043 030c 	orr.w	r3, r3, #12
 8001022:	b2da      	uxtb	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	711a      	strb	r2, [r3, #4]
 8001028:	e024      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d107      	bne.n	8001040 <QMC_init+0x50>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	b2da      	uxtb	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	711a      	strb	r2, [r3, #4]
 800103e:	e019      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b32      	cmp	r3, #50	; 0x32
 8001044:	d107      	bne.n	8001056 <QMC_init+0x66>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	711a      	strb	r2, [r3, #4]
 8001054:	e00e      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b0a      	cmp	r3, #10
 800105a:	d104      	bne.n	8001066 <QMC_init+0x76>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	791a      	ldrb	r2, [r3, #4]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	711a      	strb	r2, [r3, #4]
 8001064:	e006      	b.n	8001074 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	f043 030c 	orr.w	r3, r3, #12
 800106e:	b2da      	uxtb	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	220b      	movs	r2, #11
 800108a:	211a      	movs	r1, #26
 800108c:	f003 ff0e 	bl	8004eac <HAL_I2C_Mem_Write>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <QMC_init+0xaa>
 8001096:	2301      	movs	r3, #1
 8001098:	e014      	b.n	80010c4 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2364      	movs	r3, #100	; 0x64
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	3301      	adds	r3, #1
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	2209      	movs	r2, #9
 80010b2:	211a      	movs	r1, #26
 80010b4:	f003 fefa 	bl	8004eac <HAL_I2C_Mem_Write>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <QMC_init+0xd2>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <QMC_init+0xd4>

	return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010dc:	d104      	bne.n	80010e8 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e6:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_15){
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ee:	d104      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x2e>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010f8:	6013      	str	r3, [r2, #0]

	}
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000650 	.word	0x20000650
 800110c:	20000654 	.word	0x20000654

08001110 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800111e:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001128:	d922      	bls.n	8001170 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001132:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 800113c:	4413      	add	r3, r2
 800113e:	89fa      	ldrh	r2, [r7, #14]
 8001140:	4927      	ldr	r1, [pc, #156]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001142:	4618      	mov	r0, r3
 8001144:	f009 f885 	bl	800a252 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800114a:	2200      	movs	r2, #0
 800114c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001152:	1899      	adds	r1, r3, r2
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800115a:	461a      	mov	r2, r3
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 800115e:	f009 f878 	bl	800a252 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 800116c:	801a      	strh	r2, [r3, #0]
 800116e:	e01b      	b.n	80011a8 <HAL_UART_RxCpltCallback+0x98>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 8001178:	4413      	add	r3, r2
 800117a:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 800117c:	4614      	mov	r4, r2
 800117e:	469c      	mov	ip, r3
 8001180:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001184:	4665      	mov	r5, ip
 8001186:	4626      	mov	r6, r4
 8001188:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800118a:	6028      	str	r0, [r5, #0]
 800118c:	6069      	str	r1, [r5, #4]
 800118e:	60aa      	str	r2, [r5, #8]
 8001190:	60eb      	str	r3, [r5, #12]
 8001192:	3410      	adds	r4, #16
 8001194:	f10c 0c10 	add.w	ip, ip, #16
 8001198:	4574      	cmp	r4, lr
 800119a:	d1f3      	bne.n	8001184 <HAL_UART_RxCpltCallback+0x74>
				newPos = 64+oldPos; //update buffer position
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3340      	adds	r3, #64	; 0x40
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 80011a6:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_UART_RxCpltCallback+0xd4>)
 80011ae:	f005 fd01 	bl	8006bb4 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_UART_RxCpltCallback+0xd8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_UART_RxCpltCallback+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0204 	bic.w	r2, r2, #4
 80011c0:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80011c2:	2240      	movs	r2, #64	; 0x40
 80011c4:	4906      	ldr	r1, [pc, #24]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <HAL_UART_RxCpltCallback+0xd4>)
 80011c8:	f005 fcf4 	bl	8006bb4 <HAL_UART_Receive_DMA>
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d4:	200003ca 	.word	0x200003ca
 80011d8:	200003c8 	.word	0x200003c8
 80011dc:	2000040c 	.word	0x2000040c
 80011e0:	200003cc 	.word	0x200003cc
 80011e4:	200002f8 	.word	0x200002f8
 80011e8:	20000380 	.word	0x20000380

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f002 feb0 	bl	8003f56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f84d 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fa:	f000 f9c9 	bl	8001590 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fe:	f000 f9a9 	bl	8001554 <MX_DMA_Init>
  MX_I2C1_Init();
 8001202:	f000 f8cd 	bl	80013a0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001206:	f000 f90b 	bl	8001420 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800120a:	f000 f977 	bl	80014fc <MX_LPUART1_UART_Init>
  MX_LPTIM1_Init();
 800120e:	f000 f947 	bl	80014a0 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8001212:	f000 f893 	bl	800133c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

	ssd1306_Init();
 8001216:	f000 fe37 	bl	8001e88 <ssd1306_Init>
	HAL_Delay(100);
 800121a:	2064      	movs	r0, #100	; 0x64
 800121c:	f002 ff10 	bl	8004040 <HAL_Delay>
	ssd1306_Fill(Black);
 8001220:	2000      	movs	r0, #0
 8001222:	f000 fe9b 	bl	8001f5c <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);//start screen
 8001226:	2301      	movs	r3, #1
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <main+0x94>)
 8001232:	2120      	movs	r1, #32
 8001234:	2020      	movs	r0, #32
 8001236:	f001 f963 	bl	8002500 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();//demarrage des différents périphériques en i2c, qui ont besoin detre configuré
 800123a:	f000 fea7 	bl	8001f8c <ssd1306_UpdateScreen>
	QMC_init(&compasdata,&hi2c1,10);
 800123e:	220a      	movs	r2, #10
 8001240:	4910      	ldr	r1, [pc, #64]	; (8001284 <main+0x98>)
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <main+0x9c>)
 8001244:	f7ff fed4 	bl	8000ff0 <QMC_init>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);//pour l'instant le gps est toujours alimenté
 8001248:	2201      	movs	r2, #1
 800124a:	2102      	movs	r1, #2
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f003 fd60 	bl	8004d14 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001258:	f002 fef2 	bl	8004040 <HAL_Delay>
//
//	}



	HAL_UART_Abort(&hlpuart1);
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <main+0xa0>)
 800125e:	f005 fcf5 	bl	8006c4c <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//lancement du dma pour le gps
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	490a      	ldr	r1, [pc, #40]	; (8001290 <main+0xa4>)
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <main+0xa0>)
 8001268:	f005 fca4 	bl	8006bb4 <HAL_UART_Receive_DMA>

	ssd1306_Fill(Black);
 800126c:	2000      	movs	r0, #0
 800126e:	f000 fe75 	bl	8001f5c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001272:	f000 fe8b 	bl	8001f8c <ssd1306_UpdateScreen>

    /* USER CODE BEGIN 3 */



		statemachine();//on execute la machine à etat
 8001276:	f001 f9cf 	bl	8002618 <statemachine>
		ssd1306_UpdateScreen();//la machine a état ce sera occupe de mettre les choses necessaire dans le buffer du processeur necessaire a envoyer a l'ecran, il reste plus qu'a l'envoyer en i2c
 800127a:	f000 fe87 	bl	8001f8c <ssd1306_UpdateScreen>
		statemachine();//on execute la machine à etat
 800127e:	e7fa      	b.n	8001276 <main+0x8a>
 8001280:	0800e18c 	.word	0x0800e18c
 8001284:	20000218 	.word	0x20000218
 8001288:	20000aa8 	.word	0x20000aa8
 800128c:	200002f8 	.word	0x200002f8
 8001290:	200003cc 	.word	0x200003cc

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b096      	sub	sp, #88	; 0x58
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2244      	movs	r2, #68	; 0x44
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f008 feb9 	bl	800a01a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ba:	f004 fab7 	bl	800582c <HAL_PWREx_ControlVoltageScaling>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012c4:	f000 f9dc 	bl	8001680 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012c8:	2310      	movs	r3, #16
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012d4:	2360      	movs	r3, #96	; 0x60
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	2302      	movs	r3, #2
 80012da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012dc:	2301      	movs	r3, #1
 80012de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012e4:	2328      	movs	r3, #40	; 0x28
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012e8:	2307      	movs	r3, #7
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 faed 	bl	80058d8 <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001304:	f000 f9bc 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2303      	movs	r3, #3
 800130e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001314:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	2104      	movs	r1, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f004 feec 	bl	8006100 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800132e:	f000 f9a7 	bl	8001680 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3758      	adds	r7, #88	; 0x58
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2224      	movs	r2, #36	; 0x24
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f008 fe66 	bl	800a01a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_DAC1_Init+0x5c>)
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_DAC1_Init+0x60>)
 8001352:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001354:	4810      	ldr	r0, [pc, #64]	; (8001398 <MX_DAC1_Init+0x5c>)
 8001356:	f002 ffa8 	bl	80042aa <HAL_DAC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001360:	f000 f98e 	bl	8001680 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <MX_DAC1_Init+0x5c>)
 8001380:	f002 ffb5 	bl	80042ee <HAL_DAC_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800138a:	f000 f979 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000204 	.word	0x20000204
 800139c:	40007400 	.word	0x40007400

080013a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_I2C1_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <MX_I2C1_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <MX_I2C1_Init+0x7c>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_I2C1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_I2C1_Init+0x74>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_I2C1_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013da:	480e      	ldr	r0, [pc, #56]	; (8001414 <MX_I2C1_Init+0x74>)
 80013dc:	f003 fcca 	bl	8004d74 <HAL_I2C_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013e6:	f000 f94b 	bl	8001680 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ee:	f004 f8d5 	bl	800559c <HAL_I2CEx_ConfigAnalogFilter>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013f8:	f000 f942 	bl	8001680 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013fc:	2100      	movs	r1, #0
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_I2C1_Init+0x74>)
 8001400:	f004 f917 	bl	8005632 <HAL_I2CEx_ConfigDigitalFilter>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800140a:	f000 f939 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000218 	.word	0x20000218
 8001418:	40005400 	.word	0x40005400
 800141c:	00202538 	.word	0x00202538

08001420 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_I2C3_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <MX_I2C3_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00202538;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_I2C3_Init+0x74>)
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <MX_I2C3_Init+0x7c>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_I2C3_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_I2C3_Init+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_I2C3_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_I2C3_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_I2C3_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_I2C3_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_I2C3_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <MX_I2C3_Init+0x74>)
 800145c:	f003 fc8a 	bl	8004d74 <HAL_I2C_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001466:	f000 f90b 	bl	8001680 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146a:	2100      	movs	r1, #0
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <MX_I2C3_Init+0x74>)
 800146e:	f004 f895 	bl	800559c <HAL_I2CEx_ConfigAnalogFilter>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001478:	f000 f902 	bl	8001680 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_I2C3_Init+0x74>)
 8001480:	f004 f8d7 	bl	8005632 <HAL_I2CEx_ConfigDigitalFilter>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f8f9 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000026c 	.word	0x2000026c
 8001498:	40005c00 	.word	0x40005c00
 800149c:	00202538 	.word	0x00202538

080014a0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <MX_LPTIM1_Init+0x58>)
 80014a8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014b2:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80014b6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014be:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014da:	2200      	movs	r2, #0
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_LPTIM1_Init+0x54>)
 80014e0:	f004 f8f4 	bl	80056cc <HAL_LPTIM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80014ea:	f000 f8c9 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200002c0 	.word	0x200002c0
 80014f8:	40007c00 	.word	0x40007c00

080014fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <MX_LPUART1_UART_Init+0x54>)
 8001504:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001508:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800150c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_LPUART1_UART_Init+0x50>)
 800153a:	f005 faed 	bl	8006b18 <HAL_UART_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001544:	f000 f89c 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200002f8 	.word	0x200002f8
 8001550:	40008000 	.word	0x40008000

08001554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_DMA_Init+0x38>)
 800155c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <MX_DMA_Init+0x38>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6493      	str	r3, [r2, #72]	; 0x48
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_DMA_Init+0x38>)
 8001568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2045      	movs	r0, #69	; 0x45
 8001578:	f002 fe61 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 800157c:	2045      	movs	r0, #69	; 0x45
 800157e:	f002 fe7a 	bl	8004276 <HAL_NVIC_EnableIRQ>

}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b33      	ldr	r3, [pc, #204]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a32      	ldr	r2, [pc, #200]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a2c      	ldr	r2, [pc, #176]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a26      	ldr	r2, [pc, #152]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <MX_GPIO_Init+0xe4>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2102      	movs	r1, #2
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f003 fb8d 	bl	8004d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2101      	movs	r1, #1
 80015fe:	481e      	ldr	r0, [pc, #120]	; (8001678 <MX_GPIO_Init+0xe8>)
 8001600:	f003 fb88 	bl	8004d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001604:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800160e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001610:	2302      	movs	r3, #2
 8001612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	4818      	ldr	r0, [pc, #96]	; (800167c <MX_GPIO_Init+0xec>)
 800161c:	f003 fa10 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001620:	2302      	movs	r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f003 fa01 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163e:	2301      	movs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4619      	mov	r1, r3
 8001654:	4808      	ldr	r0, [pc, #32]	; (8001678 <MX_GPIO_Init+0xe8>)
 8001656:	f003 f9f3 	bl	8004a40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2028      	movs	r0, #40	; 0x28
 8001660:	f002 fded 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001664:	2028      	movs	r0, #40	; 0x28
 8001666:	f002 fe06 	bl	8004276 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800166a:	bf00      	nop
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	48000400 	.word	0x48000400
 800167c:	48000800 	.word	0x48000800

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>

0800168a <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe fdec 	bl	8000270 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	2b04      	cmp	r3, #4
 800169c:	d801      	bhi.n	80016a2 <gps_checksum+0x18>
 800169e:	2300      	movs	r3, #0
 80016a0:	e038      	b.n	8001714 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7fe fde4 	bl	8000270 <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	3b04      	subs	r3, #4
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7fe fddb 	bl	8000270 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	3b03      	subs	r3, #3
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e00a      	b.n	80016e6 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	4053      	eors	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	3301      	adds	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe fdc2 	bl	8000270 <strlen>
 80016ec:	4603      	mov	r3, r0
 80016ee:	1f5a      	subs	r2, r3, #5
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d8ec      	bhi.n	80016d0 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	2210      	movs	r2, #16
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f007 fcb2 	bl	8009068 <strtol>
 8001704:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	429a      	cmp	r2, r3
 800170c:	d101      	bne.n	8001712 <gps_checksum+0x88>
        return 1;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001712:	2300      	movs	r3, #0
    }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b0b7      	sub	sp, #220	; 0xdc
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	2264      	movs	r2, #100	; 0x64
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f008 fc70 	bl	800a01a <memset>
    char *marker = strtok(inputString, ",");
 800173a:	49c2      	ldr	r1, [pc, #776]	; (8001a44 <nmea_GPGGA+0x328>)
 800173c:	6838      	ldr	r0, [r7, #0]
 800173e:	f008 fc87 	bl	800a050 <strtok>
 8001742:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001746:	e027      	b.n	8001798 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001748:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800174c:	f7fe fd90 	bl	8000270 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001758:	1c63      	adds	r3, r4, #1
 800175a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800175e:	4610      	mov	r0, r2
 8001760:	f006 fcca 	bl	80080f8 <malloc>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	00a3      	lsls	r3, r4, #2
 800176a:	33d8      	adds	r3, #216	; 0xd8
 800176c:	443b      	add	r3, r7
 800176e:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001776:	3b01      	subs	r3, #1
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	33d8      	adds	r3, #216	; 0xd8
 800177c:	443b      	add	r3, r7
 800177e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001782:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001786:	4618      	mov	r0, r3
 8001788:	f008 fd5b 	bl	800a242 <strcpy>
        marker = strtok(NULL, ",");
 800178c:	49ad      	ldr	r1, [pc, #692]	; (8001a44 <nmea_GPGGA+0x328>)
 800178e:	2000      	movs	r0, #0
 8001790:	f008 fc5e 	bl	800a050 <strtok>
 8001794:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001798:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1d3      	bne.n	8001748 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 80017a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	332c      	adds	r3, #44	; 0x2c
 80017b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f008 fd42 	bl	800a242 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 80017be:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80017c2:	2b53      	cmp	r3, #83	; 0x53
 80017c4:	d004      	beq.n	80017d0 <nmea_GPGGA+0xb4>
 80017c6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80017ca:	2b4e      	cmp	r3, #78	; 0x4e
 80017cc:	f040 8159 	bne.w	8001a82 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017d6:	e010      	b.n	80017fa <nmea_GPGGA+0xde>
 80017d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017de:	4413      	add	r3, r2
 80017e0:	7819      	ldrb	r1, [r3, #0]
 80017e2:	f107 021c 	add.w	r2, r7, #28
 80017e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017ea:	4413      	add	r3, r2
 80017ec:	460a      	mov	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017f4:	3301      	adds	r3, #1
 80017f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017fe:	2b01      	cmp	r3, #1
 8001800:	ddea      	ble.n	80017d8 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001808:	e011      	b.n	800182e <nmea_GPGGA+0x112>
 800180a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800180c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001810:	3302      	adds	r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	f107 0214 	add.w	r2, r7, #20
 800181a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800181e:	4413      	add	r3, r2
 8001820:	460a      	mov	r2, r1
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001828:	3301      	adds	r3, #1
 800182a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800182e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001832:	2b05      	cmp	r3, #5
 8001834:	dde9      	ble.n	800180a <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	220a      	movs	r2, #10
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f007 fc12 	bl	8009068 <strtol>
 8001844:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f007 fb20 	bl	8008e94 <strtof>
 8001854:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001858:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001868:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001a48 <nmea_GPGGA+0x32c>
 800186c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	ee17 0a90 	vmov	r0, s15
 8001878:	f7fe fe66 	bl	8000548 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800188a:	e010      	b.n	80018ae <nmea_GPGGA+0x192>
 800188c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800188e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001892:	4413      	add	r3, r2
 8001894:	7819      	ldrb	r1, [r3, #0]
 8001896:	f107 0210 	add.w	r2, r7, #16
 800189a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800189e:	4413      	add	r3, r2
 80018a0:	460a      	mov	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018a8:	3301      	adds	r3, #1
 80018aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	ddea      	ble.n	800188c <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018bc:	e011      	b.n	80018e2 <nmea_GPGGA+0x1c6>
 80018be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018c4:	3303      	adds	r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	7819      	ldrb	r1, [r3, #0]
 80018ca:	f107 0208 	add.w	r2, r7, #8
 80018ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018d2:	4413      	add	r3, r2
 80018d4:	460a      	mov	r2, r1
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018dc:	3301      	adds	r3, #1
 80018de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	dde9      	ble.n	80018be <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	220a      	movs	r2, #10
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f007 fbb8 	bl	8009068 <strtol>
 80018f8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f007 fac6 	bl	8008e94 <strtof>
 8001908:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 800190c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001918:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 800191c:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001a48 <nmea_GPGGA+0x32c>
 8001920:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fe0c 	bl	8000548 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001944:	f7ff f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d176      	bne.n	8001a3c <nmea_GPGGA+0x320>
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800195a:	f7ff f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d16b      	bne.n	8001a3c <nmea_GPGGA+0x320>
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <nmea_GPGGA+0x330>)
 800196a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800196e:	f7ff f8b5 	bl	8000adc <__aeabi_dcmplt>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d061      	beq.n	8001a3c <nmea_GPGGA+0x320>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <nmea_GPGGA+0x334>)
 800197e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001982:	f7ff f8ab 	bl	8000adc <__aeabi_dcmplt>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d057      	beq.n	8001a3c <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001992:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 800199c:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80019a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80019ae:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80019b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f007 fa6d 	bl	8008e94 <strtof>
 80019ba:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80019be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80019c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d102      	bne.n	80019d2 <nmea_GPGGA+0x2b6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	e001      	b.n	80019d6 <nmea_GPGGA+0x2ba>
 80019d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80019da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019dc:	220a      	movs	r2, #10
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f007 fb41 	bl	8009068 <strtol>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80019ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ee:	220a      	movs	r2, #10
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 fb38 	bl	8009068 <strtol>
 80019f8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80019fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bfcc      	ite	gt
 8001a04:	2301      	movgt	r3, #1
 8001a06:	2300      	movle	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f007 fa3d 	bl	8008e94 <strtof>
 8001a1a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001a1e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d102      	bne.n	8001a32 <nmea_GPGGA+0x316>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	e001      	b.n	8001a36 <nmea_GPGGA+0x31a>
 8001a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001a3a:	e022      	b.n	8001a82 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a42:	e016      	b.n	8001a72 <nmea_GPGGA+0x356>
 8001a44:	0800e040 	.word	0x0800e040
 8001a48:	42700000 	.word	0x42700000
 8001a4c:	40568000 	.word	0x40568000
 8001a50:	40668000 	.word	0x40668000
 8001a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	33d8      	adds	r3, #216	; 0xd8
 8001a5c:	443b      	add	r3, r7
 8001a5e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f006 fb50 	bl	8008108 <free>
 8001a68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dbea      	blt.n	8001a54 <nmea_GPGGA+0x338>
            return 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e019      	b.n	8001ab6 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a88:	e00e      	b.n	8001aa8 <nmea_GPGGA+0x38c>
 8001a8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	33d8      	adds	r3, #216	; 0xd8
 8001a92:	443b      	add	r3, r7
 8001a94:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f006 fb35 	bl	8008108 <free>
 8001a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001aa8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001aac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbea      	blt.n	8001a8a <nmea_GPGGA+0x36e>
    return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	37dc      	adds	r7, #220	; 0xdc
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd90      	pop	{r4, r7, pc}
 8001abe:	bf00      	nop

08001ac0 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b0a3      	sub	sp, #140	; 0x8c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2264      	movs	r2, #100	; 0x64
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f008 fa9e 	bl	800a01a <memset>
    char *marker = strtok(inputString, ",");
 8001ade:	493b      	ldr	r1, [pc, #236]	; (8001bcc <nmea_GPGSA+0x10c>)
 8001ae0:	6838      	ldr	r0, [r7, #0]
 8001ae2:	f008 fab5 	bl	800a050 <strtok>
 8001ae6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001aea:	e027      	b.n	8001b3c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001aec:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001af0:	f7fe fbbe 	bl	8000270 <strlen>
 8001af4:	4603      	mov	r3, r0
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001afc:	1c63      	adds	r3, r4, #1
 8001afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b02:	4610      	mov	r0, r2
 8001b04:	f006 faf8 	bl	80080f8 <malloc>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	00a3      	lsls	r3, r4, #2
 8001b0e:	3388      	adds	r3, #136	; 0x88
 8001b10:	443b      	add	r3, r7
 8001b12:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3388      	adds	r3, #136	; 0x88
 8001b20:	443b      	add	r3, r7
 8001b22:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001b26:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f008 fb89 	bl	800a242 <strcpy>
        marker = strtok(NULL, ",");
 8001b30:	4926      	ldr	r1, [pc, #152]	; (8001bcc <nmea_GPGSA+0x10c>)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f008 fa8c 	bl	800a050 <strtok>
 8001b38:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1d3      	bne.n	8001aec <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	220a      	movs	r2, #10
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f007 fa8c 	bl	8009068 <strtol>
 8001b50:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	bfcc      	ite	gt
 8001b58:	2301      	movgt	r3, #1
 8001b5a:	2300      	movle	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001b68:	2303      	movs	r3, #3
 8001b6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b6c:	e00e      	b.n	8001b8c <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3388      	adds	r3, #136	; 0x88
 8001b74:	443b      	add	r3, r7
 8001b76:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b82:	3301      	adds	r3, #1
 8001b84:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b88:	3301      	adds	r3, #1
 8001b8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b8e:	2b0e      	cmp	r3, #14
 8001b90:	dded      	ble.n	8001b6e <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b9c:	e00b      	b.n	8001bb6 <nmea_GPGSA+0xf6>
 8001b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3388      	adds	r3, #136	; 0x88
 8001ba4:	443b      	add	r3, r7
 8001ba6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f006 faac 	bl	8008108 <free>
 8001bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	677b      	str	r3, [r7, #116]	; 0x74
 8001bb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbee      	blt.n	8001b9e <nmea_GPGSA+0xde>
    return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	378c      	adds	r7, #140	; 0x8c
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	0800e040 	.word	0x0800e040

08001bd0 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b0a1      	sub	sp, #132	; 0x84
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2264      	movs	r2, #100	; 0x64
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f008 fa17 	bl	800a01a <memset>
    char *marker = strtok(inputString, ",");
 8001bec:	4930      	ldr	r1, [pc, #192]	; (8001cb0 <nmea_GNRMC+0xe0>)
 8001bee:	6838      	ldr	r0, [r7, #0]
 8001bf0:	f008 fa2e 	bl	800a050 <strtok>
 8001bf4:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001bf6:	e021      	b.n	8001c3c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001bf8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001bfa:	f7fe fb39 	bl	8000270 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001c04:	1c63      	adds	r3, r4, #1
 8001c06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f006 fa75 	bl	80080f8 <malloc>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	00a3      	lsls	r3, r4, #2
 8001c14:	3380      	adds	r3, #128	; 0x80
 8001c16:	443b      	add	r3, r7
 8001c18:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	3380      	adds	r3, #128	; 0x80
 8001c24:	443b      	add	r3, r7
 8001c26:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001c2a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f008 fb08 	bl	800a242 <strcpy>
        marker = strtok(NULL, ",");
 8001c32:	491f      	ldr	r1, [pc, #124]	; (8001cb0 <nmea_GNRMC+0xe0>)
 8001c34:	2000      	movs	r0, #0
 8001c36:	f008 fa0b 	bl	800a050 <strtok>
 8001c3a:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1da      	bne.n	8001bf8 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 f924 	bl	8008e94 <strtof>
 8001c4c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001c50:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001c52:	f7fe fc79 	bl	8000548 <__aeabi_f2d>
 8001c56:	a314      	add	r3, pc, #80	; (adr r3, 8001ca8 <nmea_GNRMC+0xd8>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fdf6 	bl	800084c <__aeabi_ddiv>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffbe 	bl	8000be8 <__aeabi_d2f>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001c72:	2300      	movs	r3, #0
 8001c74:	677b      	str	r3, [r7, #116]	; 0x74
 8001c76:	e00b      	b.n	8001c90 <nmea_GNRMC+0xc0>
 8001c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3380      	adds	r3, #128	; 0x80
 8001c7e:	443b      	add	r3, r7
 8001c80:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f006 fa3f 	bl	8008108 <free>
 8001c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	677b      	str	r3, [r7, #116]	; 0x74
 8001c90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbef      	blt.n	8001c78 <nmea_GNRMC+0xa8>
    return 1;
 8001c98:	2301      	movs	r3, #1
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3784      	adds	r7, #132	; 0x84
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	be76c8b4 	.word	0xbe76c8b4
 8001cac:	3fff1a9f 	.word	0x3fff1a9f
 8001cb0:	0800e040 	.word	0x0800e040

08001cb4 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001cbe:	223c      	movs	r2, #60	; 0x3c
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	484e      	ldr	r0, [pc, #312]	; (8001dfc <nmea_parse+0x148>)
 8001cc4:	f008 f9a9 	bl	800a01a <memset>
    char * token = strtok(buffer, "$");
 8001cc8:	494d      	ldr	r1, [pc, #308]	; (8001e00 <nmea_parse+0x14c>)
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f008 f9c0 	bl	800a050 <strtok>
 8001cd0:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8001cd6:	e01d      	b.n	8001d14 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f7fe fac9 	bl	8000270 <strlen>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	693c      	ldr	r4, [r7, #16]
 8001ce4:	1c63      	adds	r3, r4, #1
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f006 fa05 	bl	80080f8 <malloc>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <nmea_parse+0x148>)
 8001cf4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <nmea_parse+0x148>)
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	6979      	ldr	r1, [r7, #20]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f008 fa9c 	bl	800a242 <strcpy>
        token = strtok(NULL, "$");
 8001d0a:	493d      	ldr	r1, [pc, #244]	; (8001e00 <nmea_parse+0x14c>)
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f008 f99f 	bl	800a050 <strtok>
 8001d12:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1de      	bne.n	8001cd8 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e052      	b.n	8001dc6 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8001d20:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <nmea_parse+0x148>)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	4936      	ldr	r1, [pc, #216]	; (8001e04 <nmea_parse+0x150>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f008 f9ec 	bl	800a108 <strstr>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d044      	beq.n	8001dc0 <nmea_parse+0x10c>
 8001d36:	4a31      	ldr	r2, [pc, #196]	; (8001dfc <nmea_parse+0x148>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fca3 	bl	800168a <gps_checksum>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03a      	beq.n	8001dc0 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <nmea_parse+0x148>)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	492d      	ldr	r1, [pc, #180]	; (8001e08 <nmea_parse+0x154>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f008 f9d7 	bl	800a108 <strstr>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <nmea_parse+0x148>)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ff30 	bl	8001bd0 <nmea_GNRMC>
 8001d70:	e026      	b.n	8001dc0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <nmea_parse+0x148>)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	4924      	ldr	r1, [pc, #144]	; (8001e0c <nmea_parse+0x158>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f008 f9c3 	bl	800a108 <strstr>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8001d88:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <nmea_parse+0x148>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fe94 	bl	8001ac0 <nmea_GPGSA>
 8001d98:	e012      	b.n	8001dc0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <nmea_parse+0x148>)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	491b      	ldr	r1, [pc, #108]	; (8001e10 <nmea_parse+0x15c>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f008 f9af 	bl	800a108 <strstr>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8001db0:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <nmea_parse+0x148>)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fcae 	bl	800171c <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dba8      	blt.n	8001d20 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	e009      	b.n	8001de8 <nmea_parse+0x134>
 8001dd4:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <nmea_parse+0x148>)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f006 f993 	bl	8008108 <free>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3301      	adds	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf1      	blt.n	8001dd4 <nmea_parse+0x120>


}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000065c 	.word	0x2000065c
 8001e00:	0800e044 	.word	0x0800e044
 8001e04:	0800e048 	.word	0x0800e048
 8001e08:	0800e04c 	.word	0x0800e04c
 8001e0c:	0800e054 	.word	0x0800e054
 8001e10:	0800e05c 	.word	0x0800e05c

08001e14 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af04      	add	r7, sp, #16
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	9302      	str	r3, [sp, #8]
 8001e34:	2301      	movs	r3, #1
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	1dfb      	adds	r3, r7, #7
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2178      	movs	r1, #120	; 0x78
 8001e42:	4803      	ldr	r0, [pc, #12]	; (8001e50 <ssd1306_WriteCommand+0x2c>)
 8001e44:	f003 f832 	bl	8004eac <HAL_I2C_Mem_Write>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2000026c 	.word	0x2000026c

08001e54 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af04      	add	r7, sp, #16
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f04f 32ff 	mov.w	r2, #4294967295
 8001e66:	9202      	str	r2, [sp, #8]
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	2240      	movs	r2, #64	; 0x40
 8001e72:	2178      	movs	r1, #120	; 0x78
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <ssd1306_WriteData+0x30>)
 8001e76:	f003 f819 	bl	8004eac <HAL_I2C_Mem_Write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000026c 	.word	0x2000026c

08001e88 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e8c:	f7ff ffc2 	bl	8001e14 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e90:	2064      	movs	r0, #100	; 0x64
 8001e92:	f002 f8d5 	bl	8004040 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 fba0 	bl	80025dc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e9c:	2020      	movs	r0, #32
 8001e9e:	f7ff ffc1 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff ffbe 	bl	8001e24 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ea8:	20b0      	movs	r0, #176	; 0xb0
 8001eaa:	f7ff ffbb 	bl	8001e24 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001eae:	20c8      	movs	r0, #200	; 0xc8
 8001eb0:	f7ff ffb8 	bl	8001e24 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff ffb5 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001eba:	2010      	movs	r0, #16
 8001ebc:	f7ff ffb2 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001ec0:	2040      	movs	r0, #64	; 0x40
 8001ec2:	f7ff ffaf 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001ec6:	20ff      	movs	r0, #255	; 0xff
 8001ec8:	f000 fb75 	bl	80025b6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ecc:	20a1      	movs	r0, #161	; 0xa1
 8001ece:	f7ff ffa9 	bl	8001e24 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ed2:	20a6      	movs	r0, #166	; 0xa6
 8001ed4:	f7ff ffa6 	bl	8001e24 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ed8:	20a8      	movs	r0, #168	; 0xa8
 8001eda:	f7ff ffa3 	bl	8001e24 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001ede:	203f      	movs	r0, #63	; 0x3f
 8001ee0:	f7ff ffa0 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ee4:	20a4      	movs	r0, #164	; 0xa4
 8001ee6:	f7ff ff9d 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001eea:	20d3      	movs	r0, #211	; 0xd3
 8001eec:	f7ff ff9a 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff ff97 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ef6:	20d5      	movs	r0, #213	; 0xd5
 8001ef8:	f7ff ff94 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001efc:	20f0      	movs	r0, #240	; 0xf0
 8001efe:	f7ff ff91 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f02:	20d9      	movs	r0, #217	; 0xd9
 8001f04:	f7ff ff8e 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001f08:	2022      	movs	r0, #34	; 0x22
 8001f0a:	f7ff ff8b 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001f0e:	20da      	movs	r0, #218	; 0xda
 8001f10:	f7ff ff88 	bl	8001e24 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001f14:	2012      	movs	r0, #18
 8001f16:	f7ff ff85 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f1a:	20db      	movs	r0, #219	; 0xdb
 8001f1c:	f7ff ff82 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f20:	2020      	movs	r0, #32
 8001f22:	f7ff ff7f 	bl	8001e24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f26:	208d      	movs	r0, #141	; 0x8d
 8001f28:	f7ff ff7c 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	f7ff ff79 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f32:	2001      	movs	r0, #1
 8001f34:	f000 fb52 	bl	80025dc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 f80f 	bl	8001f5c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f3e:	f000 f825 	bl	8001f8c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <ssd1306_Init+0xd0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <ssd1306_Init+0xd0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f4e:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <ssd1306_Init+0xd0>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	711a      	strb	r2, [r3, #4]
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000a98 	.word	0x20000a98

08001f5c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <ssd1306_Fill+0x14>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <ssd1306_Fill+0x16>
 8001f70:	23ff      	movs	r3, #255	; 0xff
 8001f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f76:	4619      	mov	r1, r3
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <ssd1306_Fill+0x2c>)
 8001f7a:	f008 f84e 	bl	800a01a <memset>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000698 	.word	0x20000698

08001f8c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	71fb      	strb	r3, [r7, #7]
 8001f96:	e016      	b.n	8001fc6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	3b50      	subs	r3, #80	; 0x50
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff40 	bl	8001e24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff ff3d 	bl	8001e24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001faa:	2010      	movs	r0, #16
 8001fac:	f7ff ff3a 	bl	8001e24 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <ssd1306_UpdateScreen+0x4c>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff4a 	bl	8001e54 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	71fb      	strb	r3, [r7, #7]
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	d9e5      	bls.n	8001f98 <ssd1306_UpdateScreen+0xc>
    }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000698 	.word	0x20000698

08001fdc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	71bb      	strb	r3, [r7, #6]
 8001fea:	4613      	mov	r3, r2
 8001fec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db3d      	blt.n	8002072 <ssd1306_DrawPixel+0x96>
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	2b3f      	cmp	r3, #63	; 0x3f
 8001ffa:	d83a      	bhi.n	8002072 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001ffc:	797b      	ldrb	r3, [r7, #5]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d11a      	bne.n	8002038 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002002:	79fa      	ldrb	r2, [r7, #7]
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	08db      	lsrs	r3, r3, #3
 8002008:	b2d8      	uxtb	r0, r3
 800200a:	4603      	mov	r3, r0
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	4413      	add	r3, r2
 8002010:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	b25a      	sxtb	r2, r3
 8002016:	79bb      	ldrb	r3, [r7, #6]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	b25b      	sxtb	r3, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	b259      	sxtb	r1, r3
 8002028:	79fa      	ldrb	r2, [r7, #7]
 800202a:	4603      	mov	r3, r0
 800202c:	01db      	lsls	r3, r3, #7
 800202e:	4413      	add	r3, r2
 8002030:	b2c9      	uxtb	r1, r1
 8002032:	4a13      	ldr	r2, [pc, #76]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 8002034:	54d1      	strb	r1, [r2, r3]
 8002036:	e01d      	b.n	8002074 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002038:	79fa      	ldrb	r2, [r7, #7]
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	b2d8      	uxtb	r0, r3
 8002040:	4603      	mov	r3, r0
 8002042:	01db      	lsls	r3, r3, #7
 8002044:	4413      	add	r3, r2
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	b25a      	sxtb	r2, r3
 800204c:	79bb      	ldrb	r3, [r7, #6]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	b25b      	sxtb	r3, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	b25b      	sxtb	r3, r3
 800205e:	4013      	ands	r3, r2
 8002060:	b259      	sxtb	r1, r3
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	4603      	mov	r3, r0
 8002066:	01db      	lsls	r3, r3, #7
 8002068:	4413      	add	r3, r2
 800206a:	b2c9      	uxtb	r1, r1
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <ssd1306_DrawPixel+0xa4>)
 800206e:	54d1      	strb	r1, [r2, r3]
 8002070:	e000      	b.n	8002074 <ssd1306_DrawPixel+0x98>
        return;
 8002072:	bf00      	nop
    }
}
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000698 	.word	0x20000698

08002084 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	4604      	mov	r4, r0
 800208c:	1d38      	adds	r0, r7, #4
 800208e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002092:	461a      	mov	r2, r3
 8002094:	4623      	mov	r3, r4
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	4613      	mov	r3, r2
 800209a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b1f      	cmp	r3, #31
 80020a0:	d902      	bls.n	80020a8 <ssd1306_WriteChar+0x24>
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b7e      	cmp	r3, #126	; 0x7e
 80020a6:	d901      	bls.n	80020ac <ssd1306_WriteChar+0x28>
        return 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e06d      	b.n	8002188 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <ssd1306_WriteChar+0x10c>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	793b      	ldrb	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	2b80      	cmp	r3, #128	; 0x80
 80020b8:	dc06      	bgt.n	80020c8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80020ba:	4b35      	ldr	r3, [pc, #212]	; (8002190 <ssd1306_WriteChar+0x10c>)
 80020bc:	885b      	ldrh	r3, [r3, #2]
 80020be:	461a      	mov	r2, r3
 80020c0:	797b      	ldrb	r3, [r7, #5]
 80020c2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020c4:	2b40      	cmp	r3, #64	; 0x40
 80020c6:	dd01      	ble.n	80020cc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e05d      	b.n	8002188 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	e04c      	b.n	800216c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	3b20      	subs	r3, #32
 80020d8:	7979      	ldrb	r1, [r7, #5]
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	440b      	add	r3, r1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e034      	b.n	800215c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d012      	beq.n	8002128 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002102:	4b23      	ldr	r3, [pc, #140]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4413      	add	r3, r2
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002112:	885b      	ldrh	r3, [r3, #2]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4413      	add	r3, r2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	7bba      	ldrb	r2, [r7, #14]
 8002120:	4619      	mov	r1, r3
 8002122:	f7ff ff5b 	bl	8001fdc <ssd1306_DrawPixel>
 8002126:	e016      	b.n	8002156 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <ssd1306_WriteChar+0x10c>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4413      	add	r3, r2
 8002134:	b2d8      	uxtb	r0, r3
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002138:	885b      	ldrh	r3, [r3, #2]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4413      	add	r3, r2
 8002142:	b2d9      	uxtb	r1, r3
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	f7ff ff43 	bl	8001fdc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	3301      	adds	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	793b      	ldrb	r3, [r7, #4]
 800215e:	461a      	mov	r2, r3
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4293      	cmp	r3, r2
 8002164:	d3c5      	bcc.n	80020f2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	797b      	ldrb	r3, [r7, #5]
 800216e:	461a      	mov	r2, r3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4293      	cmp	r3, r2
 8002174:	d3ad      	bcc.n	80020d2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002178:	881a      	ldrh	r2, [r3, #0]
 800217a:	793b      	ldrb	r3, [r7, #4]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4413      	add	r3, r2
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b03      	ldr	r3, [pc, #12]	; (8002190 <ssd1306_WriteChar+0x10c>)
 8002184:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3724      	adds	r7, #36	; 0x24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	20000a98 	.word	0x20000a98

08002194 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	1d38      	adds	r0, r7, #4
 800219e:	e880 0006 	stmia.w	r0, {r1, r2}
 80021a2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80021a4:	e012      	b.n	80021cc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	7818      	ldrb	r0, [r3, #0]
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	1d3a      	adds	r2, r7, #4
 80021ae:	ca06      	ldmia	r2, {r1, r2}
 80021b0:	f7ff ff68 	bl	8002084 <ssd1306_WriteChar>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d002      	beq.n	80021c6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	e008      	b.n	80021d8 <ssd1306_WriteString+0x44>
        }
        str++;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3301      	adds	r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e8      	bne.n	80021a6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	781b      	ldrb	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	460a      	mov	r2, r1
 80021ea:	71fb      	strb	r3, [r7, #7]
 80021ec:	4613      	mov	r3, r2
 80021ee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <ssd1306_SetCursor+0x2c>)
 80021f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <ssd1306_SetCursor+0x2c>)
 80021fe:	805a      	strh	r2, [r3, #2]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000a98 	.word	0x20000a98

08002210 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	4604      	mov	r4, r0
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	461a      	mov	r2, r3
 800221e:	4623      	mov	r3, r4
 8002220:	71fb      	strb	r3, [r7, #7]
 8002222:	4603      	mov	r3, r0
 8002224:	71bb      	strb	r3, [r7, #6]
 8002226:	460b      	mov	r3, r1
 8002228:	717b      	strb	r3, [r7, #5]
 800222a:	4613      	mov	r3, r2
 800222c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800222e:	797a      	ldrb	r2, [r7, #5]
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	bfb8      	it	lt
 8002238:	425b      	neglt	r3, r3
 800223a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800223c:	793a      	ldrb	r2, [r7, #4]
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	bfb8      	it	lt
 8002246:	425b      	neglt	r3, r3
 8002248:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800224a:	79fa      	ldrb	r2, [r7, #7]
 800224c:	797b      	ldrb	r3, [r7, #5]
 800224e:	429a      	cmp	r2, r3
 8002250:	d201      	bcs.n	8002256 <ssd1306_Line+0x46>
 8002252:	2301      	movs	r3, #1
 8002254:	e001      	b.n	800225a <ssd1306_Line+0x4a>
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800225c:	79ba      	ldrb	r2, [r7, #6]
 800225e:	793b      	ldrb	r3, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	d201      	bcs.n	8002268 <ssd1306_Line+0x58>
 8002264:	2301      	movs	r3, #1
 8002266:	e001      	b.n	800226c <ssd1306_Line+0x5c>
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
 800226c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002276:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800227a:	7939      	ldrb	r1, [r7, #4]
 800227c:	797b      	ldrb	r3, [r7, #5]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff feac 	bl	8001fdc <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002284:	e024      	b.n	80022d0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002286:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800228a:	79b9      	ldrb	r1, [r7, #6]
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fea4 	bl	8001fdc <ssd1306_DrawPixel>
        error2 = error * 2;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	425b      	negs	r3, r3
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dd08      	ble.n	80022b6 <ssd1306_Line+0xa6>
            error -= deltaY;
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	4413      	add	r3, r2
 80022b4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	da08      	bge.n	80022d0 <ssd1306_Line+0xc0>
            error += deltaX;
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	4413      	add	r3, r2
 80022c4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	79bb      	ldrb	r3, [r7, #6]
 80022cc:	4413      	add	r3, r2
 80022ce:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80022d0:	79fa      	ldrb	r2, [r7, #7]
 80022d2:	797b      	ldrb	r3, [r7, #5]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1d6      	bne.n	8002286 <ssd1306_Line+0x76>
 80022d8:	79ba      	ldrb	r2, [r7, #6]
 80022da:	793b      	ldrb	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1d2      	bne.n	8002286 <ssd1306_Line+0x76>
        }
    }
    return;
 80022e0:	bf00      	nop
}
 80022e2:	3724      	adds	r7, #36	; 0x24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}

080022e8 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4604      	mov	r4, r0
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4623      	mov	r3, r4
 80022f8:	71fb      	strb	r3, [r7, #7]
 80022fa:	4603      	mov	r3, r0
 80022fc:	71bb      	strb	r3, [r7, #6]
 80022fe:	460b      	mov	r3, r1
 8002300:	717b      	strb	r3, [r7, #5]
 8002302:	4613      	mov	r3, r2
 8002304:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002306:	797b      	ldrb	r3, [r7, #5]
 8002308:	425b      	negs	r3, r3
 800230a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002310:	797b      	ldrb	r3, [r7, #5]
 8002312:	f1c3 0301 	rsb	r3, r3, #1
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db65      	blt.n	80023ee <ssd1306_DrawCircle+0x106>
 8002322:	79bb      	ldrb	r3, [r7, #6]
 8002324:	2b3f      	cmp	r3, #63	; 0x3f
 8002326:	d862      	bhi.n	80023ee <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	79fa      	ldrb	r2, [r7, #7]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	b2d8      	uxtb	r0, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	79bb      	ldrb	r3, [r7, #6]
 8002338:	4413      	add	r3, r2
 800233a:	b2db      	uxtb	r3, r3
 800233c:	793a      	ldrb	r2, [r7, #4]
 800233e:	4619      	mov	r1, r3
 8002340:	f7ff fe4c 	bl	8001fdc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	4413      	add	r3, r2
 800234c:	b2d8      	uxtb	r0, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	79bb      	ldrb	r3, [r7, #6]
 8002354:	4413      	add	r3, r2
 8002356:	b2db      	uxtb	r3, r3
 8002358:	793a      	ldrb	r2, [r7, #4]
 800235a:	4619      	mov	r1, r3
 800235c:	f7ff fe3e 	bl	8001fdc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	4413      	add	r3, r2
 8002368:	b2d8      	uxtb	r0, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	79ba      	ldrb	r2, [r7, #6]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	793a      	ldrb	r2, [r7, #4]
 8002376:	4619      	mov	r1, r3
 8002378:	f7ff fe30 	bl	8001fdc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	79fa      	ldrb	r2, [r7, #7]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b2d8      	uxtb	r0, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	79ba      	ldrb	r2, [r7, #6]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	793a      	ldrb	r2, [r7, #4]
 8002392:	4619      	mov	r1, r3
 8002394:	f7ff fe22 	bl	8001fdc <ssd1306_DrawPixel>
        e2 = err;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dc13      	bgt.n	80023cc <ssd1306_DrawCircle+0xe4>
            y++;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	3301      	adds	r3, #1
 80023a8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	3301      	adds	r3, #1
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	425b      	negs	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d105      	bne.n	80023cc <ssd1306_DrawCircle+0xe4>
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	dc01      	bgt.n	80023cc <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	dd08      	ble.n	80023e6 <ssd1306_DrawCircle+0xfe>
            x++;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3301      	adds	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	3301      	adds	r3, #1
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	dd9d      	ble.n	8002328 <ssd1306_DrawCircle+0x40>

    return;
 80023ec:	e000      	b.n	80023f0 <ssd1306_DrawCircle+0x108>
        return;
 80023ee:	bf00      	nop
}
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}

080023f6 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80023f6:	b590      	push	{r4, r7, lr}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af02      	add	r7, sp, #8
 80023fc:	4604      	mov	r4, r0
 80023fe:	4608      	mov	r0, r1
 8002400:	4611      	mov	r1, r2
 8002402:	461a      	mov	r2, r3
 8002404:	4623      	mov	r3, r4
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	4603      	mov	r3, r0
 800240a:	71bb      	strb	r3, [r7, #6]
 800240c:	460b      	mov	r3, r1
 800240e:	717b      	strb	r3, [r7, #5]
 8002410:	4613      	mov	r3, r2
 8002412:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002414:	79bc      	ldrb	r4, [r7, #6]
 8002416:	797a      	ldrb	r2, [r7, #5]
 8002418:	79b9      	ldrb	r1, [r7, #6]
 800241a:	79f8      	ldrb	r0, [r7, #7]
 800241c:	7e3b      	ldrb	r3, [r7, #24]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	4623      	mov	r3, r4
 8002422:	f7ff fef5 	bl	8002210 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002426:	793c      	ldrb	r4, [r7, #4]
 8002428:	797a      	ldrb	r2, [r7, #5]
 800242a:	79b9      	ldrb	r1, [r7, #6]
 800242c:	7978      	ldrb	r0, [r7, #5]
 800242e:	7e3b      	ldrb	r3, [r7, #24]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	4623      	mov	r3, r4
 8002434:	f7ff feec 	bl	8002210 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002438:	793c      	ldrb	r4, [r7, #4]
 800243a:	79fa      	ldrb	r2, [r7, #7]
 800243c:	7939      	ldrb	r1, [r7, #4]
 800243e:	7978      	ldrb	r0, [r7, #5]
 8002440:	7e3b      	ldrb	r3, [r7, #24]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4623      	mov	r3, r4
 8002446:	f7ff fee3 	bl	8002210 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800244a:	79bc      	ldrb	r4, [r7, #6]
 800244c:	79fa      	ldrb	r2, [r7, #7]
 800244e:	7939      	ldrb	r1, [r7, #4]
 8002450:	79f8      	ldrb	r0, [r7, #7]
 8002452:	7e3b      	ldrb	r3, [r7, #24]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4623      	mov	r3, r4
 8002458:	f7ff feda 	bl	8002210 <ssd1306_Line>

    return;
 800245c:	bf00      	nop
}
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	4604      	mov	r4, r0
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	461a      	mov	r2, r3
 8002472:	4623      	mov	r3, r4
 8002474:	71fb      	strb	r3, [r7, #7]
 8002476:	4603      	mov	r3, r0
 8002478:	71bb      	strb	r3, [r7, #6]
 800247a:	460b      	mov	r3, r1
 800247c:	717b      	strb	r3, [r7, #5]
 800247e:	4613      	mov	r3, r2
 8002480:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002482:	79fa      	ldrb	r2, [r7, #7]
 8002484:	797b      	ldrb	r3, [r7, #5]
 8002486:	4293      	cmp	r3, r2
 8002488:	bf28      	it	cs
 800248a:	4613      	movcs	r3, r2
 800248c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800248e:	797a      	ldrb	r2, [r7, #5]
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	4293      	cmp	r3, r2
 8002494:	bf38      	it	cc
 8002496:	4613      	movcc	r3, r2
 8002498:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800249a:	79ba      	ldrb	r2, [r7, #6]
 800249c:	793b      	ldrb	r3, [r7, #4]
 800249e:	4293      	cmp	r3, r2
 80024a0:	bf28      	it	cs
 80024a2:	4613      	movcs	r3, r2
 80024a4:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80024a6:	793a      	ldrb	r2, [r7, #4]
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	4293      	cmp	r3, r2
 80024ac:	bf38      	it	cc
 80024ae:	4613      	movcc	r3, r2
 80024b0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80024b2:	7afb      	ldrb	r3, [r7, #11]
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e017      	b.n	80024e8 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80024b8:	7b7b      	ldrb	r3, [r7, #13]
 80024ba:	73bb      	strb	r3, [r7, #14]
 80024bc:	e009      	b.n	80024d2 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80024be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024c2:	7bf9      	ldrb	r1, [r7, #15]
 80024c4:	7bbb      	ldrb	r3, [r7, #14]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd88 	bl	8001fdc <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	3301      	adds	r3, #1
 80024d0:	73bb      	strb	r3, [r7, #14]
 80024d2:	7bba      	ldrb	r2, [r7, #14]
 80024d4:	7b3b      	ldrb	r3, [r7, #12]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d803      	bhi.n	80024e2 <ssd1306_FillRectangle+0x7e>
 80024da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	daed      	bge.n	80024be <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	3301      	adds	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	7abb      	ldrb	r3, [r7, #10]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d803      	bhi.n	80024f8 <ssd1306_FillRectangle+0x94>
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b3f      	cmp	r3, #63	; 0x3f
 80024f4:	d9e0      	bls.n	80024b8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
}
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd90      	pop	{r4, r7, pc}

08002500 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	603a      	str	r2, [r7, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
 800250e:	460b      	mov	r3, r1
 8002510:	71bb      	strb	r3, [r7, #6]
 8002512:	4613      	mov	r3, r2
 8002514:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002516:	797b      	ldrb	r3, [r7, #5]
 8002518:	3307      	adds	r3, #7
 800251a:	2b00      	cmp	r3, #0
 800251c:	da00      	bge.n	8002520 <ssd1306_DrawBitmap+0x20>
 800251e:	3307      	adds	r3, #7
 8002520:	10db      	asrs	r3, r3, #3
 8002522:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db3e      	blt.n	80025ae <ssd1306_DrawBitmap+0xae>
 8002530:	79bb      	ldrb	r3, [r7, #6]
 8002532:	2b3f      	cmp	r3, #63	; 0x3f
 8002534:	d83b      	bhi.n	80025ae <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002536:	2300      	movs	r3, #0
 8002538:	73bb      	strb	r3, [r7, #14]
 800253a:	e033      	b.n	80025a4 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800253c:	2300      	movs	r3, #0
 800253e:	737b      	strb	r3, [r7, #13]
 8002540:	e026      	b.n	8002590 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002542:	7b7b      	ldrb	r3, [r7, #13]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	e00d      	b.n	8002570 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	7b7a      	ldrb	r2, [r7, #13]
 8002560:	08d2      	lsrs	r2, r2, #3
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	4413      	add	r3, r2
 8002566:	461a      	mov	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4413      	add	r3, r2
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002574:	2b00      	cmp	r3, #0
 8002576:	da08      	bge.n	800258a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002578:	79fa      	ldrb	r2, [r7, #7]
 800257a:	7b7b      	ldrb	r3, [r7, #13]
 800257c:	4413      	add	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	7f3a      	ldrb	r2, [r7, #28]
 8002582:	79b9      	ldrb	r1, [r7, #6]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fd29 	bl	8001fdc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800258a:	7b7b      	ldrb	r3, [r7, #13]
 800258c:	3301      	adds	r3, #1
 800258e:	737b      	strb	r3, [r7, #13]
 8002590:	7b7a      	ldrb	r2, [r7, #13]
 8002592:	797b      	ldrb	r3, [r7, #5]
 8002594:	429a      	cmp	r2, r3
 8002596:	d3d4      	bcc.n	8002542 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002598:	7bbb      	ldrb	r3, [r7, #14]
 800259a:	3301      	adds	r3, #1
 800259c:	73bb      	strb	r3, [r7, #14]
 800259e:	79bb      	ldrb	r3, [r7, #6]
 80025a0:	3301      	adds	r3, #1
 80025a2:	71bb      	strb	r3, [r7, #6]
 80025a4:	7bba      	ldrb	r2, [r7, #14]
 80025a6:	7e3b      	ldrb	r3, [r7, #24]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3c7      	bcc.n	800253c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80025ac:	e000      	b.n	80025b0 <ssd1306_DrawBitmap+0xb0>
        return;
 80025ae:	bf00      	nop
}
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80025c0:	2381      	movs	r3, #129	; 0x81
 80025c2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fc2c 	bl	8001e24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fc28 	bl	8001e24 <ssd1306_WriteCommand>
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80025ec:	23af      	movs	r3, #175	; 0xaf
 80025ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <ssd1306_SetDisplayOn+0x38>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	715a      	strb	r2, [r3, #5]
 80025f6:	e004      	b.n	8002602 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80025f8:	23ae      	movs	r3, #174	; 0xae
 80025fa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <ssd1306_SetDisplayOn+0x38>)
 80025fe:	2200      	movs	r2, #0
 8002600:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fc0d 	bl	8001e24 <ssd1306_WriteCommand>
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000a98 	.word	0x20000a98

08002618 <statemachine>:
		};



//le code qui permet d'avoir les ecran de donnée que l'on souhaite, changeable a souhait on peut d'ailleur rajouter des état ou rajouter des fonctionnalité au sein de chaque état, pas encore décidé de la version définitive.
void statemachine(void){
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	ed2d 8b02 	vpush	{d8}
 800261e:	b09d      	sub	sp, #116	; 0x74
 8002620:	af04      	add	r7, sp, #16
	switch(state){
 8002622:	4baf      	ldr	r3, [pc, #700]	; (80028e0 <statemachine+0x2c8>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b03      	cmp	r3, #3
 8002628:	f201 813b 	bhi.w	80038a2 <statemachine+0x128a>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <statemachine+0x1c>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002645 	.word	0x08002645
 8002638:	08002c3d 	.word	0x08002c3d
 800263c:	080030d5 	.word	0x080030d5
 8002640:	08003731 	.word	0x08003731
	 case STATE_SPEED:
				  ssd1306_Fill(Black);
 8002644:	2000      	movs	r0, #0
 8002646:	f7ff fc89 	bl	8001f5c <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 800264a:	2120      	movs	r1, #32
 800264c:	2020      	movs	r0, #32
 800264e:	f7ff fdc7 	bl	80021e0 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8002652:	49a4      	ldr	r1, [pc, #656]	; (80028e4 <statemachine+0x2cc>)
 8002654:	48a4      	ldr	r0, [pc, #656]	; (80028e8 <statemachine+0x2d0>)
 8002656:	f7ff fb2d 	bl	8001cb4 <nmea_parse>
				 if(myData.speed>=vitmax){
 800265a:	4ba3      	ldr	r3, [pc, #652]	; (80028e8 <statemachine+0x2d0>)
 800265c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002660:	4ba2      	ldr	r3, [pc, #648]	; (80028ec <statemachine+0x2d4>)
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	db03      	blt.n	8002678 <statemachine+0x60>
									 vitmax=myData.speed;
 8002670:	4b9d      	ldr	r3, [pc, #628]	; (80028e8 <statemachine+0x2d0>)
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	4a9d      	ldr	r2, [pc, #628]	; (80028ec <statemachine+0x2d4>)
 8002676:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	65fb      	str	r3, [r7, #92]	; 0x5c
								 float sec=0;
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	65bb      	str	r3, [r7, #88]	; 0x58
								 if (myData.speed!=0){
 8002684:	4b98      	ldr	r3, [pc, #608]	; (80028e8 <statemachine+0x2d0>)
 8002686:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800268a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800268e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002692:	d00d      	beq.n	80026b0 <statemachine+0x98>
									 pace=1000/(60*myData.speed);//ici on convertie la vitesse en m/s en un pace en mim/Km on ecarte les erreure possite comme la division par 0
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <statemachine+0x2d0>)
 8002696:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800269a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80028f0 <statemachine+0x2d8>
 800269e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026a2:	eddf 6a94 	vldr	s13, [pc, #592]	; 80028f4 <statemachine+0x2dc>
 80026a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026aa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 80026ae:	e001      	b.n	80026b4 <statemachine+0x9c>
								 }
								 else {
									 pace=9999;//en cas de division par 0, techniquement le temps devient infini mais ce n'est pas intérréssant
 80026b0:	4b91      	ldr	r3, [pc, #580]	; (80028f8 <statemachine+0x2e0>)
 80026b2:	65fb      	str	r3, [r7, #92]	; 0x5c
								 }

								 if((pace-floor(pace))>=0.60){//conversion en minute
 80026b4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026b6:	f7fd ff47 	bl	8000548 <__aeabi_f2d>
 80026ba:	4604      	mov	r4, r0
 80026bc:	460d      	mov	r5, r1
 80026be:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026c0:	f7fd ff42 	bl	8000548 <__aeabi_f2d>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	ec43 2b10 	vmov	d0, r2, r3
 80026cc:	f00a fb10 	bl	800ccf0 <floor>
 80026d0:	ec53 2b10 	vmov	r2, r3, d0
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd fdd6 	bl	8000288 <__aeabi_dsub>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	a37a      	add	r3, pc, #488	; (adr r3, 80028d0 <statemachine+0x2b8>)
 80026e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ea:	f7fe fa0b 	bl	8000b04 <__aeabi_dcmpge>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d02c      	beq.n	800274e <statemachine+0x136>
									 pace=pace+1;
 80026f4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002700:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
									 sec=(pace-floor(pace))-0.60;
 8002704:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002706:	f7fd ff1f 	bl	8000548 <__aeabi_f2d>
 800270a:	4604      	mov	r4, r0
 800270c:	460d      	mov	r5, r1
 800270e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002710:	f7fd ff1a 	bl	8000548 <__aeabi_f2d>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	ec43 2b10 	vmov	d0, r2, r3
 800271c:	f00a fae8 	bl	800ccf0 <floor>
 8002720:	ec53 2b10 	vmov	r2, r3, d0
 8002724:	4620      	mov	r0, r4
 8002726:	4629      	mov	r1, r5
 8002728:	f7fd fdae 	bl	8000288 <__aeabi_dsub>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	a366      	add	r3, pc, #408	; (adr r3, 80028d0 <statemachine+0x2b8>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fd fda5 	bl	8000288 <__aeabi_dsub>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe fa4f 	bl	8000be8 <__aeabi_d2f>
 800274a:	4603      	mov	r3, r0
 800274c:	65bb      	str	r3, [r7, #88]	; 0x58
								 }
								 if(pace<0.60){
 800274e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002750:	f7fd fefa 	bl	8000548 <__aeabi_f2d>
 8002754:	a35e      	add	r3, pc, #376	; (adr r3, 80028d0 <statemachine+0x2b8>)
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	f7fe f9bf 	bl	8000adc <__aeabi_dcmplt>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <statemachine+0x150>
									 sec=pace;
 8002764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002766:	65bb      	str	r3, [r7, #88]	; 0x58
								 }

				  switch(spdstate){
 8002768:	4b64      	ldr	r3, [pc, #400]	; (80028fc <statemachine+0x2e4>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b02      	cmp	r3, #2
 800276e:	f000 816b 	beq.w	8002a48 <statemachine+0x430>
 8002772:	2b02      	cmp	r3, #2
 8002774:	f300 8228 	bgt.w	8002bc8 <statemachine+0x5b0>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <statemachine+0x16c>
 800277c:	2b01      	cmp	r3, #1
 800277e:	f000 80cf 	beq.w	8002920 <statemachine+0x308>
 8002782:	e221      	b.n	8002bc8 <statemachine+0x5b0>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002784:	4b58      	ldr	r3, [pc, #352]	; (80028e8 <statemachine+0x2d0>)
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	2b01      	cmp	r3, #1
 800278a:	d176      	bne.n	800287a <statemachine+0x262>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 800278c:	2014      	movs	r0, #20
 800278e:	f005 fcb3 	bl	80080f8 <malloc>
 8002792:	4603      	mov	r3, r0
 8002794:	603b      	str	r3, [r7, #0]
					 				 						snprintf(str,15, "MaxSPD=%.1f",vitmax*3.6);//amélioration possible la stocker en eeprom
 8002796:	4b55      	ldr	r3, [pc, #340]	; (80028ec <statemachine+0x2d4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fed4 	bl	8000548 <__aeabi_f2d>
 80027a0:	a34d      	add	r3, pc, #308	; (adr r3, 80028d8 <statemachine+0x2c0>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff27 	bl	80005f8 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	e9cd 2300 	strd	r2, r3, [sp]
 80027b2:	4a53      	ldr	r2, [pc, #332]	; (8002900 <statemachine+0x2e8>)
 80027b4:	210f      	movs	r1, #15
 80027b6:	6838      	ldr	r0, [r7, #0]
 80027b8:	f007 fb98 	bl	8009eec <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 80027bc:	2120      	movs	r1, #32
 80027be:	2020      	movs	r0, #32
 80027c0:	f7ff fd0e 	bl	80021e0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80027c4:	4a4f      	ldr	r2, [pc, #316]	; (8002904 <statemachine+0x2ec>)
 80027c6:	2301      	movs	r3, #1
 80027c8:	ca06      	ldmia	r2, {r1, r2}
 80027ca:	6838      	ldr	r0, [r7, #0]
 80027cc:	f7ff fce2 	bl	8002194 <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80027d0:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <statemachine+0x2d0>)
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd feb7 	bl	8000548 <__aeabi_f2d>
 80027da:	a33f      	add	r3, pc, #252	; (adr r3, 80028d8 <statemachine+0x2c0>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f7fd ff0a 	bl	80005f8 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	e9cd 2300 	strd	r2, r3, [sp]
 80027ec:	4a46      	ldr	r2, [pc, #280]	; (8002908 <statemachine+0x2f0>)
 80027ee:	210f      	movs	r1, #15
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	f007 fb7b 	bl	8009eec <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 80027f6:	212a      	movs	r1, #42	; 0x2a
 80027f8:	2020      	movs	r0, #32
 80027fa:	f7ff fcf1 	bl	80021e0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80027fe:	4a41      	ldr	r2, [pc, #260]	; (8002904 <statemachine+0x2ec>)
 8002800:	2301      	movs	r3, #1
 8002802:	ca06      	ldmia	r2, {r1, r2}
 8002804:	6838      	ldr	r0, [r7, #0]
 8002806:	f7ff fcc5 	bl	8002194 <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec*100));//affichage au format minute puis seconde
 800280a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800280c:	f7fd fe9c 	bl	8000548 <__aeabi_f2d>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	ec43 2b10 	vmov	d0, r2, r3
 8002818:	f00a fa6a 	bl	800ccf0 <floor>
 800281c:	eeb0 8a40 	vmov.f32	s16, s0
 8002820:	eef0 8a60 	vmov.f32	s17, s1
 8002824:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002828:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800290c <statemachine+0x2f4>
 800282c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002830:	ee17 0a90 	vmov	r0, s15
 8002834:	f7fd fe88 	bl	8000548 <__aeabi_f2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	ec43 2b10 	vmov	d0, r2, r3
 8002840:	f00a fa56 	bl	800ccf0 <floor>
 8002844:	eeb0 7a40 	vmov.f32	s14, s0
 8002848:	eef0 7a60 	vmov.f32	s15, s1
 800284c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002850:	ed8d 8b00 	vstr	d8, [sp]
 8002854:	4a2e      	ldr	r2, [pc, #184]	; (8002910 <statemachine+0x2f8>)
 8002856:	210f      	movs	r1, #15
 8002858:	6838      	ldr	r0, [r7, #0]
 800285a:	f007 fb47 	bl	8009eec <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 800285e:	2134      	movs	r1, #52	; 0x34
 8002860:	2020      	movs	r0, #32
 8002862:	f7ff fcbd 	bl	80021e0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002866:	4a27      	ldr	r2, [pc, #156]	; (8002904 <statemachine+0x2ec>)
 8002868:	2301      	movs	r3, #1
 800286a:	ca06      	ldmia	r2, {r1, r2}
 800286c:	6838      	ldr	r0, [r7, #0]
 800286e:	f7ff fc91 	bl	8002194 <ssd1306_WriteString>
					 				 						free(str);
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	f005 fc48 	bl	8008108 <free>
 8002878:	e01b      	b.n	80028b2 <statemachine+0x29a>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 800287a:	2014      	movs	r0, #20
 800287c:	f005 fc3c 	bl	80080f8 <malloc>
 8002880:	4603      	mov	r3, r0
 8002882:	607b      	str	r3, [r7, #4]
					 				 						ssd1306_SetCursor(32, 32);
 8002884:	2120      	movs	r1, #32
 8002886:	2020      	movs	r0, #32
 8002888:	f7ff fcaa 	bl	80021e0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <statemachine+0x2ec>)
 800288e:	2301      	movs	r3, #1
 8002890:	ca06      	ldmia	r2, {r1, r2}
 8002892:	4820      	ldr	r0, [pc, #128]	; (8002914 <statemachine+0x2fc>)
 8002894:	f7ff fc7e 	bl	8002194 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	2020      	movs	r0, #32
 800289c:	f7ff fca0 	bl	80021e0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80028a0:	4a18      	ldr	r2, [pc, #96]	; (8002904 <statemachine+0x2ec>)
 80028a2:	2301      	movs	r3, #1
 80028a4:	ca06      	ldmia	r2, {r1, r2}
 80028a6:	481c      	ldr	r0, [pc, #112]	; (8002918 <statemachine+0x300>)
 80028a8:	f7ff fc74 	bl	8002194 <ssd1306_WriteString>
					 				 						free(str);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f005 fc2b 	bl	8008108 <free>
					 				 					}
					 if(BTN_B>=1){
 80028b2:	4b1a      	ldr	r3, [pc, #104]	; (800291c <statemachine+0x304>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f340 8181 	ble.w	8002bbe <statemachine+0x5a6>
					 					 				 					spdstate++;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <statemachine+0x2e4>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <statemachine+0x2e4>)
 80028c6:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <statemachine+0x304>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 80028ce:	e176      	b.n	8002bbe <statemachine+0x5a6>
 80028d0:	33333333 	.word	0x33333333
 80028d4:	3fe33333 	.word	0x3fe33333
 80028d8:	cccccccd 	.word	0xcccccccd
 80028dc:	400ccccc 	.word	0x400ccccc
 80028e0:	20000658 	.word	0x20000658
 80028e4:	2000040c 	.word	0x2000040c
 80028e8:	20000610 	.word	0x20000610
 80028ec:	20000aa0 	.word	0x20000aa0
 80028f0:	42700000 	.word	0x42700000
 80028f4:	447a0000 	.word	0x447a0000
 80028f8:	461c3c00 	.word	0x461c3c00
 80028fc:	2000065a 	.word	0x2000065a
 8002900:	0800e064 	.word	0x0800e064
 8002904:	20000000 	.word	0x20000000
 8002908:	0800e070 	.word	0x0800e070
 800290c:	42c80000 	.word	0x42c80000
 8002910:	0800e078 	.word	0x0800e078
 8002914:	0800e08c 	.word	0x0800e08c
 8002918:	0800e094 	.word	0x0800e094
 800291c:	20000654 	.word	0x20000654
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002920:	4bb7      	ldr	r3, [pc, #732]	; (8002c00 <statemachine+0x5e8>)
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	2b01      	cmp	r3, #1
 8002926:	d164      	bne.n	80029f2 <statemachine+0x3da>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8002928:	2014      	movs	r0, #20
 800292a:	f005 fbe5 	bl	80080f8 <malloc>
 800292e:	4603      	mov	r3, r0
 8002930:	60bb      	str	r3, [r7, #8]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8002932:	4bb3      	ldr	r3, [pc, #716]	; (8002c00 <statemachine+0x5e8>)
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fe06 	bl	8000548 <__aeabi_f2d>
 800293c:	a3ac      	add	r3, pc, #688	; (adr r3, 8002bf0 <statemachine+0x5d8>)
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	f7fd fe59 	bl	80005f8 <__aeabi_dmul>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	e9cd 2300 	strd	r2, r3, [sp]
 800294e:	4aad      	ldr	r2, [pc, #692]	; (8002c04 <statemachine+0x5ec>)
 8002950:	210f      	movs	r1, #15
 8002952:	68b8      	ldr	r0, [r7, #8]
 8002954:	f007 faca 	bl	8009eec <sniprintf>
					 				 						ssd1306_SetCursor(32, 55);
 8002958:	2137      	movs	r1, #55	; 0x37
 800295a:	2020      	movs	r0, #32
 800295c:	f7ff fc40 	bl	80021e0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002960:	4aa9      	ldr	r2, [pc, #676]	; (8002c08 <statemachine+0x5f0>)
 8002962:	2301      	movs	r3, #1
 8002964:	ca06      	ldmia	r2, {r1, r2}
 8002966:	68b8      	ldr	r0, [r7, #8]
 8002968:	f7ff fc14 	bl	8002194 <ssd1306_WriteString>
					 				 						ssd1306_FillRectangle(32, 41, 95-floor(1+exp(-myData.speed)), 55, White);
 800296c:	4ba4      	ldr	r3, [pc, #656]	; (8002c00 <statemachine+0x5e8>)
 800296e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002972:	eef1 7a67 	vneg.f32	s15, s15
 8002976:	ee17 3a90 	vmov	r3, s15
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fde4 	bl	8000548 <__aeabi_f2d>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	ec43 2b10 	vmov	d0, r2, r3
 8002988:	f00a f8b2 	bl	800caf0 <exp>
 800298c:	ec51 0b10 	vmov	r0, r1, d0
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	4b9d      	ldr	r3, [pc, #628]	; (8002c0c <statemachine+0x5f4>)
 8002996:	f7fd fc79 	bl	800028c <__adddf3>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	ec43 2b17 	vmov	d7, r2, r3
 80029a2:	eeb0 0a47 	vmov.f32	s0, s14
 80029a6:	eef0 0a67 	vmov.f32	s1, s15
 80029aa:	f00a f9a1 	bl	800ccf0 <floor>
 80029ae:	ec53 2b10 	vmov	r2, r3, d0
 80029b2:	a191      	add	r1, pc, #580	; (adr r1, 8002bf8 <statemachine+0x5e0>)
 80029b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029b8:	f7fd fc66 	bl	8000288 <__aeabi_dsub>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fe f8f0 	bl	8000ba8 <__aeabi_d2uiz>
 80029c8:	4603      	mov	r3, r0
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	2301      	movs	r3, #1
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2337      	movs	r3, #55	; 0x37
 80029d2:	2129      	movs	r1, #41	; 0x29
 80029d4:	2020      	movs	r0, #32
 80029d6:	f7ff fd45 	bl	8002464 <ssd1306_FillRectangle>
					 				 						ssd1306_DrawRectangle(32, 41, 95, 55, White);
 80029da:	2301      	movs	r3, #1
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2337      	movs	r3, #55	; 0x37
 80029e0:	225f      	movs	r2, #95	; 0x5f
 80029e2:	2129      	movs	r1, #41	; 0x29
 80029e4:	2020      	movs	r0, #32
 80029e6:	f7ff fd06 	bl	80023f6 <ssd1306_DrawRectangle>

					 				 						free(str);
 80029ea:	68b8      	ldr	r0, [r7, #8]
 80029ec:	f005 fb8c 	bl	8008108 <free>
 80029f0:	e01b      	b.n	8002a2a <statemachine+0x412>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 80029f2:	2014      	movs	r0, #20
 80029f4:	f005 fb80 	bl	80080f8 <malloc>
 80029f8:	4603      	mov	r3, r0
 80029fa:	60fb      	str	r3, [r7, #12]
					 				 						ssd1306_SetCursor(32, 32);
 80029fc:	2120      	movs	r1, #32
 80029fe:	2020      	movs	r0, #32
 8002a00:	f7ff fbee 	bl	80021e0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 8002a04:	4a80      	ldr	r2, [pc, #512]	; (8002c08 <statemachine+0x5f0>)
 8002a06:	2301      	movs	r3, #1
 8002a08:	ca06      	ldmia	r2, {r1, r2}
 8002a0a:	4881      	ldr	r0, [pc, #516]	; (8002c10 <statemachine+0x5f8>)
 8002a0c:	f7ff fbc2 	bl	8002194 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	2020      	movs	r0, #32
 8002a14:	f7ff fbe4 	bl	80021e0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002a18:	4a7b      	ldr	r2, [pc, #492]	; (8002c08 <statemachine+0x5f0>)
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	ca06      	ldmia	r2, {r1, r2}
 8002a1e:	487d      	ldr	r0, [pc, #500]	; (8002c14 <statemachine+0x5fc>)
 8002a20:	f7ff fbb8 	bl	8002194 <ssd1306_WriteString>
					 				 						free(str);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f005 fb6f 	bl	8008108 <free>
					 				 					}
					 if(BTN_B>=1){
 8002a2a:	4b7b      	ldr	r3, [pc, #492]	; (8002c18 <statemachine+0x600>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f340 80c7 	ble.w	8002bc2 <statemachine+0x5aa>
					 				 					spdstate++;
 8002a34:	4b79      	ldr	r3, [pc, #484]	; (8002c1c <statemachine+0x604>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b77      	ldr	r3, [pc, #476]	; (8002c1c <statemachine+0x604>)
 8002a3e:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 8002a40:	4b75      	ldr	r3, [pc, #468]	; (8002c18 <statemachine+0x600>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 8002a46:	e0bc      	b.n	8002bc2 <statemachine+0x5aa>
				 case STATE_GRAPH:
					 ssd1306_DrawRectangle(32, 41, 95, 53, White);
 8002a48:	2301      	movs	r3, #1
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2335      	movs	r3, #53	; 0x35
 8002a4e:	225f      	movs	r2, #95	; 0x5f
 8002a50:	2129      	movs	r1, #41	; 0x29
 8002a52:	2020      	movs	r0, #32
 8002a54:	f7ff fccf 	bl	80023f6 <ssd1306_DrawRectangle>
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002a58:	4b69      	ldr	r3, [pc, #420]	; (8002c00 <statemachine+0x5e8>)
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d17b      	bne.n	8002b58 <statemachine+0x540>
					 				 						float spdsumhandler=0;
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	657b      	str	r3, [r7, #84]	; 0x54
					 				 						int spdindex=0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	653b      	str	r3, [r7, #80]	; 0x50
					 				 						while(spdindex<10){
 8002a6a:	e027      	b.n	8002abc <statemachine+0x4a4>
					 				 							spdsumhandler=spdsumhandler+(myData.speed)*3.6;
 8002a6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002a6e:	f7fd fd6b 	bl	8000548 <__aeabi_f2d>
 8002a72:	4604      	mov	r4, r0
 8002a74:	460d      	mov	r5, r1
 8002a76:	4b62      	ldr	r3, [pc, #392]	; (8002c00 <statemachine+0x5e8>)
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fd64 	bl	8000548 <__aeabi_f2d>
 8002a80:	a35b      	add	r3, pc, #364	; (adr r3, 8002bf0 <statemachine+0x5d8>)
 8002a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a86:	f7fd fdb7 	bl	80005f8 <__aeabi_dmul>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4620      	mov	r0, r4
 8002a90:	4629      	mov	r1, r5
 8002a92:	f7fd fbfb 	bl	800028c <__adddf3>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f7fe f8a3 	bl	8000be8 <__aeabi_d2f>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	657b      	str	r3, [r7, #84]	; 0x54
					 				 							nmea_parse(&myData, DataBuffer);
 8002aa6:	495e      	ldr	r1, [pc, #376]	; (8002c20 <statemachine+0x608>)
 8002aa8:	4855      	ldr	r0, [pc, #340]	; (8002c00 <statemachine+0x5e8>)
 8002aaa:	f7ff f903 	bl	8001cb4 <nmea_parse>
					 				 							HAL_Delay(1000);
 8002aae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ab2:	f001 fac5 	bl	8004040 <HAL_Delay>
					 				 							spdindex++;
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab8:	3301      	adds	r3, #1
 8002aba:	653b      	str	r3, [r7, #80]	; 0x50
					 				 						while(spdindex<10){
 8002abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002abe:	2b09      	cmp	r3, #9
 8002ac0:	ddd4      	ble.n	8002a6c <statemachine+0x454>

					 				 						}
					 				 						spdindex=0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	653b      	str	r3, [r7, #80]	; 0x50
					 				 						spdsumhandler=spdsumhandler/10;
 8002ac6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002aca:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

					 				 						if(graphindex<32){
 8002ad6:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <statemachine+0x60c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b1f      	cmp	r3, #31
 8002adc:	dc58      	bgt.n	8002b90 <statemachine+0x578>
					 				 							ssd1306_FillRectangle(32+2*graphindex, 41, 32+2*graphindex, 41+floor(12*(vitmax/spdsumhandler)), White);
 8002ade:	4b51      	ldr	r3, [pc, #324]	; (8002c24 <statemachine+0x60c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3310      	adds	r3, #16
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	b2dc      	uxtb	r4, r3
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <statemachine+0x60c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3310      	adds	r3, #16
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	b2dd      	uxtb	r5, r3
 8002af6:	4b4c      	ldr	r3, [pc, #304]	; (8002c28 <statemachine+0x610>)
 8002af8:	edd3 6a00 	vldr	s13, [r3]
 8002afc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b04:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0c:	ee17 0a90 	vmov	r0, s15
 8002b10:	f7fd fd1a 	bl	8000548 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	ec43 2b10 	vmov	d0, r2, r3
 8002b1c:	f00a f8e8 	bl	800ccf0 <floor>
 8002b20:	ec51 0b10 	vmov	r0, r1, d0
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	4b40      	ldr	r3, [pc, #256]	; (8002c2c <statemachine+0x614>)
 8002b2a:	f7fd fbaf 	bl	800028c <__adddf3>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	f7fe f837 	bl	8000ba8 <__aeabi_d2uiz>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2201      	movs	r2, #1
 8002b40:	9200      	str	r2, [sp, #0]
 8002b42:	462a      	mov	r2, r5
 8002b44:	2129      	movs	r1, #41	; 0x29
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff fc8c 	bl	8002464 <ssd1306_FillRectangle>
					 				 							graphindex++;
 8002b4c:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <statemachine+0x60c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	4a34      	ldr	r2, [pc, #208]	; (8002c24 <statemachine+0x60c>)
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e01b      	b.n	8002b90 <statemachine+0x578>
					 				 						}
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002b58:	2014      	movs	r0, #20
 8002b5a:	f005 facd 	bl	80080f8 <malloc>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	613b      	str	r3, [r7, #16]
					 				 						ssd1306_SetCursor(32, 32);
 8002b62:	2120      	movs	r1, #32
 8002b64:	2020      	movs	r0, #32
 8002b66:	f7ff fb3b 	bl	80021e0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Graph", Font_6x8, White);
 8002b6a:	4a27      	ldr	r2, [pc, #156]	; (8002c08 <statemachine+0x5f0>)
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	ca06      	ldmia	r2, {r1, r2}
 8002b70:	482f      	ldr	r0, [pc, #188]	; (8002c30 <statemachine+0x618>)
 8002b72:	f7ff fb0f 	bl	8002194 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	2020      	movs	r0, #32
 8002b7a:	f7ff fb31 	bl	80021e0 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002b7e:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <statemachine+0x5f0>)
 8002b80:	2301      	movs	r3, #1
 8002b82:	ca06      	ldmia	r2, {r1, r2}
 8002b84:	4823      	ldr	r0, [pc, #140]	; (8002c14 <statemachine+0x5fc>)
 8002b86:	f7ff fb05 	bl	8002194 <ssd1306_WriteString>
					 				 						free(str);
 8002b8a:	6938      	ldr	r0, [r7, #16]
 8002b8c:	f005 fabc 	bl	8008108 <free>
					 				 					}
					 if(BTN_B>=1){
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <statemachine+0x600>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	dd16      	ble.n	8002bc6 <statemachine+0x5ae>
					 					 				 					spdstate--;
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <statemachine+0x604>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <statemachine+0x604>)
 8002ba2:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <statemachine+0x604>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <statemachine+0x604>)
 8002bae:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8002bb0:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <statemachine+0x600>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
					 					 				 					graphindex=0;
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <statemachine+0x60c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8002bbc:	e003      	b.n	8002bc6 <statemachine+0x5ae>
					 break;
 8002bbe:	bf00      	nop
 8002bc0:	e002      	b.n	8002bc8 <statemachine+0x5b0>
					 break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <statemachine+0x5b0>
					 break;
 8002bc6:	bf00      	nop


				 }

				 	if(BTN_A>=1){
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <statemachine+0x61c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f340 8660 	ble.w	8003892 <statemachine+0x127a>
				 					state++;
 8002bd2:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <statemachine+0x620>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <statemachine+0x620>)
 8002bdc:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <statemachine+0x61c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
				 					graphindex=0;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <statemachine+0x60c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 8002bea:	f000 be52 	b.w	8003892 <statemachine+0x127a>
 8002bee:	bf00      	nop
 8002bf0:	cccccccd 	.word	0xcccccccd
 8002bf4:	400ccccc 	.word	0x400ccccc
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	4057c000 	.word	0x4057c000
 8002c00:	20000610 	.word	0x20000610
 8002c04:	0800e070 	.word	0x0800e070
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	3ff00000 	.word	0x3ff00000
 8002c10:	0800e0a0 	.word	0x0800e0a0
 8002c14:	0800e094 	.word	0x0800e094
 8002c18:	20000654 	.word	0x20000654
 8002c1c:	2000065a 	.word	0x2000065a
 8002c20:	2000040c 	.word	0x2000040c
 8002c24:	20000aa4 	.word	0x20000aa4
 8002c28:	20000aa0 	.word	0x20000aa0
 8002c2c:	40448000 	.word	0x40448000
 8002c30:	0800e0a8 	.word	0x0800e0a8
 8002c34:	20000650 	.word	0x20000650
 8002c38:	20000658 	.word	0x20000658


	case STATE_POS:
			  ssd1306_Fill(Black);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7ff f98d 	bl	8001f5c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8002c42:	49af      	ldr	r1, [pc, #700]	; (8002f00 <statemachine+0x8e8>)
 8002c44:	48af      	ldr	r0, [pc, #700]	; (8002f04 <statemachine+0x8ec>)
 8002c46:	f7ff f835 	bl	8001cb4 <nmea_parse>
			  switch(posstate){
 8002c4a:	4baf      	ldr	r3, [pc, #700]	; (8002f08 <statemachine+0x8f0>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	f200 8231 	bhi.w	80030b6 <statemachine+0xa9e>
 8002c54:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <statemachine+0x644>)
 8002c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5a:	bf00      	nop
 8002c5c:	08002c6d 	.word	0x08002c6d
 8002c60:	08002d69 	.word	0x08002d69
 8002c64:	08002e5f 	.word	0x08002e5f
 8002c68:	08002f8f 	.word	0x08002f8f

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8002c6c:	4ba5      	ldr	r3, [pc, #660]	; (8002f04 <statemachine+0x8ec>)
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d14e      	bne.n	8002d12 <statemachine+0x6fa>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002c74:	2014      	movs	r0, #20
 8002c76:	f005 fa3f 	bl	80080f8 <malloc>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	617b      	str	r3, [r7, #20]
				  						ssd1306_SetCursor(32, 32);
 8002c7e:	2120      	movs	r1, #32
 8002c80:	2020      	movs	r0, #32
 8002c82:	f7ff faad 	bl	80021e0 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8002c86:	4aa1      	ldr	r2, [pc, #644]	; (8002f0c <statemachine+0x8f4>)
 8002c88:	210f      	movs	r1, #15
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f007 f92e 	bl	8009eec <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002c90:	4a9f      	ldr	r2, [pc, #636]	; (8002f10 <statemachine+0x8f8>)
 8002c92:	2301      	movs	r3, #1
 8002c94:	ca06      	ldmia	r2, {r1, r2}
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff fa7c 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002c9c:	4b99      	ldr	r3, [pc, #612]	; (8002f04 <statemachine+0x8ec>)
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	e9cd 2300 	strd	r2, r3, [sp]
 8002ca6:	4a9b      	ldr	r2, [pc, #620]	; (8002f14 <statemachine+0x8fc>)
 8002ca8:	210f      	movs	r1, #15
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f007 f91e 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002cb0:	2128      	movs	r1, #40	; 0x28
 8002cb2:	2020      	movs	r0, #32
 8002cb4:	f7ff fa94 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002cb8:	4a95      	ldr	r2, [pc, #596]	; (8002f10 <statemachine+0x8f8>)
 8002cba:	2301      	movs	r3, #1
 8002cbc:	ca06      	ldmia	r2, {r1, r2}
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff fa68 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8002cc4:	4a94      	ldr	r2, [pc, #592]	; (8002f18 <statemachine+0x900>)
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	6978      	ldr	r0, [r7, #20]
 8002cca:	f007 f90f 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002cce:	2130      	movs	r1, #48	; 0x30
 8002cd0:	2020      	movs	r0, #32
 8002cd2:	f7ff fa85 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002cd6:	4a8e      	ldr	r2, [pc, #568]	; (8002f10 <statemachine+0x8f8>)
 8002cd8:	2301      	movs	r3, #1
 8002cda:	ca06      	ldmia	r2, {r1, r2}
 8002cdc:	6978      	ldr	r0, [r7, #20]
 8002cde:	f7ff fa59 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <statemachine+0x8ec>)
 8002ce4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ce8:	e9cd 2300 	strd	r2, r3, [sp]
 8002cec:	4a89      	ldr	r2, [pc, #548]	; (8002f14 <statemachine+0x8fc>)
 8002cee:	210f      	movs	r1, #15
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f007 f8fb 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002cf6:	2138      	movs	r1, #56	; 0x38
 8002cf8:	2020      	movs	r0, #32
 8002cfa:	f7ff fa71 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002cfe:	4a84      	ldr	r2, [pc, #528]	; (8002f10 <statemachine+0x8f8>)
 8002d00:	2301      	movs	r3, #1
 8002d02:	ca06      	ldmia	r2, {r1, r2}
 8002d04:	6978      	ldr	r0, [r7, #20]
 8002d06:	f7ff fa45 	bl	8002194 <ssd1306_WriteString>
				  						free(str);
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f005 f9fc 	bl	8008108 <free>
 8002d10:	e01b      	b.n	8002d4a <statemachine+0x732>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002d12:	2014      	movs	r0, #20
 8002d14:	f005 f9f0 	bl	80080f8 <malloc>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	61bb      	str	r3, [r7, #24]
				  						ssd1306_SetCursor(32, 32);
 8002d1c:	2120      	movs	r1, #32
 8002d1e:	2020      	movs	r0, #32
 8002d20:	f7ff fa5e 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8002d24:	4a7a      	ldr	r2, [pc, #488]	; (8002f10 <statemachine+0x8f8>)
 8002d26:	2301      	movs	r3, #1
 8002d28:	ca06      	ldmia	r2, {r1, r2}
 8002d2a:	487c      	ldr	r0, [pc, #496]	; (8002f1c <statemachine+0x904>)
 8002d2c:	f7ff fa32 	bl	8002194 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	2020      	movs	r0, #32
 8002d34:	f7ff fa54 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002d38:	4a75      	ldr	r2, [pc, #468]	; (8002f10 <statemachine+0x8f8>)
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	ca06      	ldmia	r2, {r1, r2}
 8002d3e:	4878      	ldr	r0, [pc, #480]	; (8002f20 <statemachine+0x908>)
 8002d40:	f7ff fa28 	bl	8002194 <ssd1306_WriteString>
				  						free(str);
 8002d44:	69b8      	ldr	r0, [r7, #24]
 8002d46:	f005 f9df 	bl	8008108 <free>
				  					}
				  if(BTN_B>=1){
 8002d4a:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <statemachine+0x90c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f340 81aa 	ble.w	80030a8 <statemachine+0xa90>
					  posstate++;
 8002d54:	4b6c      	ldr	r3, [pc, #432]	; (8002f08 <statemachine+0x8f0>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <statemachine+0x8f0>)
 8002d5e:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8002d60:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <statemachine+0x90c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]





				  break;
 8002d66:	e19f      	b.n	80030a8 <statemachine+0xa90>
			  case STATE_LAT:
				  if(myData.fix == 1){
 8002d68:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <statemachine+0x8ec>)
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d14b      	bne.n	8002e08 <statemachine+0x7f0>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002d70:	2014      	movs	r0, #20
 8002d72:	f005 f9c1 	bl	80080f8 <malloc>
 8002d76:	4603      	mov	r3, r0
 8002d78:	61fb      	str	r3, [r7, #28]
				  						ssd1306_SetCursor(32, 32);
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	2020      	movs	r0, #32
 8002d7e:	f7ff fa2f 	bl	80021e0 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 8002d82:	4a69      	ldr	r2, [pc, #420]	; (8002f28 <statemachine+0x910>)
 8002d84:	210f      	movs	r1, #15
 8002d86:	69f8      	ldr	r0, [r7, #28]
 8002d88:	f007 f8b0 	bl	8009eec <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002d8c:	4a60      	ldr	r2, [pc, #384]	; (8002f10 <statemachine+0x8f8>)
 8002d8e:	2301      	movs	r3, #1
 8002d90:	ca06      	ldmia	r2, {r1, r2}
 8002d92:	69f8      	ldr	r0, [r7, #28]
 8002d94:	f7ff f9fe 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002d98:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <statemachine+0x8ec>)
 8002d9a:	7a1b      	ldrb	r3, [r3, #8]
 8002d9c:	4a63      	ldr	r2, [pc, #396]	; (8002f2c <statemachine+0x914>)
 8002d9e:	210f      	movs	r1, #15
 8002da0:	69f8      	ldr	r0, [r7, #28]
 8002da2:	f007 f8a3 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002da6:	2128      	movs	r1, #40	; 0x28
 8002da8:	2020      	movs	r0, #32
 8002daa:	f7ff fa19 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002dae:	4a58      	ldr	r2, [pc, #352]	; (8002f10 <statemachine+0x8f8>)
 8002db0:	2301      	movs	r3, #1
 8002db2:	ca06      	ldmia	r2, {r1, r2}
 8002db4:	69f8      	ldr	r0, [r7, #28]
 8002db6:	f7ff f9ed 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 8002dba:	4a54      	ldr	r2, [pc, #336]	; (8002f0c <statemachine+0x8f4>)
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	69f8      	ldr	r0, [r7, #28]
 8002dc0:	f007 f894 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002dc4:	2130      	movs	r1, #48	; 0x30
 8002dc6:	2020      	movs	r0, #32
 8002dc8:	f7ff fa0a 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002dcc:	4a50      	ldr	r2, [pc, #320]	; (8002f10 <statemachine+0x8f8>)
 8002dce:	2301      	movs	r3, #1
 8002dd0:	ca06      	ldmia	r2, {r1, r2}
 8002dd2:	69f8      	ldr	r0, [r7, #28]
 8002dd4:	f7ff f9de 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8002dd8:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <statemachine+0x8ec>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	e9cd 2300 	strd	r2, r3, [sp]
 8002de2:	4a4c      	ldr	r2, [pc, #304]	; (8002f14 <statemachine+0x8fc>)
 8002de4:	210f      	movs	r1, #15
 8002de6:	69f8      	ldr	r0, [r7, #28]
 8002de8:	f007 f880 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002dec:	2138      	movs	r1, #56	; 0x38
 8002dee:	2020      	movs	r0, #32
 8002df0:	f7ff f9f6 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002df4:	4a46      	ldr	r2, [pc, #280]	; (8002f10 <statemachine+0x8f8>)
 8002df6:	2301      	movs	r3, #1
 8002df8:	ca06      	ldmia	r2, {r1, r2}
 8002dfa:	69f8      	ldr	r0, [r7, #28]
 8002dfc:	f7ff f9ca 	bl	8002194 <ssd1306_WriteString>
				  						free(str);
 8002e00:	69f8      	ldr	r0, [r7, #28]
 8002e02:	f005 f981 	bl	8008108 <free>
 8002e06:	e01b      	b.n	8002e40 <statemachine+0x828>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002e08:	2014      	movs	r0, #20
 8002e0a:	f005 f975 	bl	80080f8 <malloc>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 8002e12:	2120      	movs	r1, #32
 8002e14:	2020      	movs	r0, #32
 8002e16:	f7ff f9e3 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 8002e1a:	4a3d      	ldr	r2, [pc, #244]	; (8002f10 <statemachine+0x8f8>)
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	ca06      	ldmia	r2, {r1, r2}
 8002e20:	4843      	ldr	r0, [pc, #268]	; (8002f30 <statemachine+0x918>)
 8002e22:	f7ff f9b7 	bl	8002194 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	2020      	movs	r0, #32
 8002e2a:	f7ff f9d9 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002e2e:	4a38      	ldr	r2, [pc, #224]	; (8002f10 <statemachine+0x8f8>)
 8002e30:	2301      	movs	r3, #1
 8002e32:	ca06      	ldmia	r2, {r1, r2}
 8002e34:	483a      	ldr	r0, [pc, #232]	; (8002f20 <statemachine+0x908>)
 8002e36:	f7ff f9ad 	bl	8002194 <ssd1306_WriteString>
				  						free(str);
 8002e3a:	6a38      	ldr	r0, [r7, #32]
 8002e3c:	f005 f964 	bl	8008108 <free>
				  					}
				  if(BTN_B>=1){
 8002e40:	4b38      	ldr	r3, [pc, #224]	; (8002f24 <statemachine+0x90c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f340 8131 	ble.w	80030ac <statemachine+0xa94>
				  					  posstate++;
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <statemachine+0x8f0>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <statemachine+0x8f0>)
 8002e54:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8002e56:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <statemachine+0x90c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 8002e5c:	e126      	b.n	80030ac <statemachine+0xa94>
			  case STATE_LONG:
				  if(myData.fix == 1){
 8002e5e:	4b29      	ldr	r3, [pc, #164]	; (8002f04 <statemachine+0x8ec>)
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d168      	bne.n	8002f38 <statemachine+0x920>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002e66:	2014      	movs	r0, #20
 8002e68:	f005 f946 	bl	80080f8 <malloc>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 8002e70:	2120      	movs	r1, #32
 8002e72:	2020      	movs	r0, #32
 8002e74:	f7ff f9b4 	bl	80021e0 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 8002e78:	4a2e      	ldr	r2, [pc, #184]	; (8002f34 <statemachine+0x91c>)
 8002e7a:	210f      	movs	r1, #15
 8002e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e7e:	f007 f835 	bl	8009eec <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002e82:	4a23      	ldr	r2, [pc, #140]	; (8002f10 <statemachine+0x8f8>)
 8002e84:	2301      	movs	r3, #1
 8002e86:	ca06      	ldmia	r2, {r1, r2}
 8002e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e8a:	f7ff f983 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <statemachine+0x8ec>)
 8002e90:	7e1b      	ldrb	r3, [r3, #24]
 8002e92:	4a26      	ldr	r2, [pc, #152]	; (8002f2c <statemachine+0x914>)
 8002e94:	210f      	movs	r1, #15
 8002e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e98:	f007 f828 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002e9c:	2128      	movs	r1, #40	; 0x28
 8002e9e:	2020      	movs	r0, #32
 8002ea0:	f7ff f99e 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002ea4:	4a1a      	ldr	r2, [pc, #104]	; (8002f10 <statemachine+0x8f8>)
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	ca06      	ldmia	r2, {r1, r2}
 8002eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eac:	f7ff f972 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8002eb0:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <statemachine+0x900>)
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eb6:	f007 f819 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002eba:	2130      	movs	r1, #48	; 0x30
 8002ebc:	2020      	movs	r0, #32
 8002ebe:	f7ff f98f 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <statemachine+0x8f8>)
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	ca06      	ldmia	r2, {r1, r2}
 8002ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eca:	f7ff f963 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <statemachine+0x8ec>)
 8002ed0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ed4:	e9cd 2300 	strd	r2, r3, [sp]
 8002ed8:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <statemachine+0x8fc>)
 8002eda:	210f      	movs	r1, #15
 8002edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ede:	f007 f805 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002ee2:	2138      	movs	r1, #56	; 0x38
 8002ee4:	2020      	movs	r0, #32
 8002ee6:	f7ff f97b 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <statemachine+0x8f8>)
 8002eec:	2301      	movs	r3, #1
 8002eee:	ca06      	ldmia	r2, {r1, r2}
 8002ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ef2:	f7ff f94f 	bl	8002194 <ssd1306_WriteString>
				  						free(str);
 8002ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ef8:	f005 f906 	bl	8008108 <free>
 8002efc:	e038      	b.n	8002f70 <statemachine+0x958>
 8002efe:	bf00      	nop
 8002f00:	2000040c 	.word	0x2000040c
 8002f04:	20000610 	.word	0x20000610
 8002f08:	2000065b 	.word	0x2000065b
 8002f0c:	0800e0b0 	.word	0x0800e0b0
 8002f10:	20000000 	.word	0x20000000
 8002f14:	0800e0bc 	.word	0x0800e0bc
 8002f18:	0800e0c4 	.word	0x0800e0c4
 8002f1c:	0800e0d0 	.word	0x0800e0d0
 8002f20:	0800e094 	.word	0x0800e094
 8002f24:	20000654 	.word	0x20000654
 8002f28:	0800e0d8 	.word	0x0800e0d8
 8002f2c:	0800e0e4 	.word	0x0800e0e4
 8002f30:	0800e0e8 	.word	0x0800e0e8
 8002f34:	0800e0f0 	.word	0x0800e0f0
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002f38:	2014      	movs	r0, #20
 8002f3a:	f005 f8dd 	bl	80080f8 <malloc>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 8002f42:	2120      	movs	r1, #32
 8002f44:	2020      	movs	r0, #32
 8002f46:	f7ff f94b 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8002f4a:	4a8d      	ldr	r2, [pc, #564]	; (8003180 <statemachine+0xb68>)
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	ca06      	ldmia	r2, {r1, r2}
 8002f50:	488c      	ldr	r0, [pc, #560]	; (8003184 <statemachine+0xb6c>)
 8002f52:	f7ff f91f 	bl	8002194 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	2020      	movs	r0, #32
 8002f5a:	f7ff f941 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002f5e:	4a88      	ldr	r2, [pc, #544]	; (8003180 <statemachine+0xb68>)
 8002f60:	2301      	movs	r3, #1
 8002f62:	ca06      	ldmia	r2, {r1, r2}
 8002f64:	4888      	ldr	r0, [pc, #544]	; (8003188 <statemachine+0xb70>)
 8002f66:	f7ff f915 	bl	8002194 <ssd1306_WriteString>
				  						free(str);
 8002f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f6c:	f005 f8cc 	bl	8008108 <free>
				  					}
				  if(BTN_B>=1){
 8002f70:	4b86      	ldr	r3, [pc, #536]	; (800318c <statemachine+0xb74>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f340 809b 	ble.w	80030b0 <statemachine+0xa98>
				  					  posstate++;
 8002f7a:	4b85      	ldr	r3, [pc, #532]	; (8003190 <statemachine+0xb78>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b83      	ldr	r3, [pc, #524]	; (8003190 <statemachine+0xb78>)
 8002f84:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8002f86:	4b81      	ldr	r3, [pc, #516]	; (800318c <statemachine+0xb74>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 8002f8c:	e090      	b.n	80030b0 <statemachine+0xa98>
			  case STATE_ALT:
				  if(myData.fix == 1){
 8002f8e:	4b81      	ldr	r3, [pc, #516]	; (8003194 <statemachine+0xb7c>)
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d152      	bne.n	800303c <statemachine+0xa24>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002f96:	2014      	movs	r0, #20
 8002f98:	f005 f8ae 	bl	80080f8 <malloc>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	2020      	movs	r0, #32
 8002fa4:	f7ff f91c 	bl	80021e0 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 8002fa8:	4a7b      	ldr	r2, [pc, #492]	; (8003198 <statemachine+0xb80>)
 8002faa:	210f      	movs	r1, #15
 8002fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fae:	f006 ff9d 	bl	8009eec <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002fb2:	4a73      	ldr	r2, [pc, #460]	; (8003180 <statemachine+0xb68>)
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	ca06      	ldmia	r2, {r1, r2}
 8002fb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fba:	f7ff f8eb 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002fbe:	4b75      	ldr	r3, [pc, #468]	; (8003194 <statemachine+0xb7c>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fac0 	bl	8000548 <__aeabi_f2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	e9cd 2300 	strd	r2, r3, [sp]
 8002fd0:	4a72      	ldr	r2, [pc, #456]	; (800319c <statemachine+0xb84>)
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fd6:	f006 ff89 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002fda:	2128      	movs	r1, #40	; 0x28
 8002fdc:	2020      	movs	r0, #32
 8002fde:	f7ff f8ff 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002fe2:	4a67      	ldr	r2, [pc, #412]	; (8003180 <statemachine+0xb68>)
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	ca06      	ldmia	r2, {r1, r2}
 8002fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fea:	f7ff f8d3 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 8002fee:	4a6c      	ldr	r2, [pc, #432]	; (80031a0 <statemachine+0xb88>)
 8002ff0:	210f      	movs	r1, #15
 8002ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ff4:	f006 ff7a 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002ff8:	2130      	movs	r1, #48	; 0x30
 8002ffa:	2020      	movs	r0, #32
 8002ffc:	f7ff f8f0 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003000:	4a5f      	ldr	r2, [pc, #380]	; (8003180 <statemachine+0xb68>)
 8003002:	2301      	movs	r3, #1
 8003004:	ca06      	ldmia	r2, {r1, r2}
 8003006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003008:	f7ff f8c4 	bl	8002194 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 800300c:	4b61      	ldr	r3, [pc, #388]	; (8003194 <statemachine+0xb7c>)
 800300e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003012:	e9cd 2300 	strd	r2, r3, [sp]
 8003016:	4a63      	ldr	r2, [pc, #396]	; (80031a4 <statemachine+0xb8c>)
 8003018:	210f      	movs	r1, #15
 800301a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800301c:	f006 ff66 	bl	8009eec <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003020:	2138      	movs	r1, #56	; 0x38
 8003022:	2020      	movs	r0, #32
 8003024:	f7ff f8dc 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003028:	4a55      	ldr	r2, [pc, #340]	; (8003180 <statemachine+0xb68>)
 800302a:	2301      	movs	r3, #1
 800302c:	ca06      	ldmia	r2, {r1, r2}
 800302e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003030:	f7ff f8b0 	bl	8002194 <ssd1306_WriteString>
				  						free(str);
 8003034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003036:	f005 f867 	bl	8008108 <free>
 800303a:	e01b      	b.n	8003074 <statemachine+0xa5c>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 800303c:	2014      	movs	r0, #20
 800303e:	f005 f85b 	bl	80080f8 <malloc>
 8003042:	4603      	mov	r3, r0
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 8003046:	2120      	movs	r1, #32
 8003048:	2020      	movs	r0, #32
 800304a:	f7ff f8c9 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 800304e:	4a4c      	ldr	r2, [pc, #304]	; (8003180 <statemachine+0xb68>)
 8003050:	2301      	movs	r3, #1
 8003052:	ca06      	ldmia	r2, {r1, r2}
 8003054:	4854      	ldr	r0, [pc, #336]	; (80031a8 <statemachine+0xb90>)
 8003056:	f7ff f89d 	bl	8002194 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	2020      	movs	r0, #32
 800305e:	f7ff f8bf 	bl	80021e0 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003062:	4a47      	ldr	r2, [pc, #284]	; (8003180 <statemachine+0xb68>)
 8003064:	2301      	movs	r3, #1
 8003066:	ca06      	ldmia	r2, {r1, r2}
 8003068:	4847      	ldr	r0, [pc, #284]	; (8003188 <statemachine+0xb70>)
 800306a:	f7ff f893 	bl	8002194 <ssd1306_WriteString>
				  						free(str);
 800306e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003070:	f005 f84a 	bl	8008108 <free>
				  					}
				  if(BTN_B>=1){
 8003074:	4b45      	ldr	r3, [pc, #276]	; (800318c <statemachine+0xb74>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	dd1b      	ble.n	80030b4 <statemachine+0xa9c>
				  					posstate--;
 800307c:	4b44      	ldr	r3, [pc, #272]	; (8003190 <statemachine+0xb78>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	3b01      	subs	r3, #1
 8003082:	b2da      	uxtb	r2, r3
 8003084:	4b42      	ldr	r3, [pc, #264]	; (8003190 <statemachine+0xb78>)
 8003086:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003088:	4b41      	ldr	r3, [pc, #260]	; (8003190 <statemachine+0xb78>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	3b01      	subs	r3, #1
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <statemachine+0xb78>)
 8003092:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003094:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <statemachine+0xb78>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	4b3c      	ldr	r3, [pc, #240]	; (8003190 <statemachine+0xb78>)
 800309e:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 80030a0:	4b3a      	ldr	r3, [pc, #232]	; (800318c <statemachine+0xb74>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 80030a6:	e005      	b.n	80030b4 <statemachine+0xa9c>
				  break;
 80030a8:	bf00      	nop
 80030aa:	e004      	b.n	80030b6 <statemachine+0xa9e>
				  break;
 80030ac:	bf00      	nop
 80030ae:	e002      	b.n	80030b6 <statemachine+0xa9e>
				  break;
 80030b0:	bf00      	nop
 80030b2:	e000      	b.n	80030b6 <statemachine+0xa9e>
				  break;
 80030b4:	bf00      	nop
			  }

					if(BTN_A>=1){
 80030b6:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <statemachine+0xb94>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f340 83eb 	ble.w	8003896 <statemachine+0x127e>
							state++;
 80030c0:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <statemachine+0xb98>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <statemachine+0xb98>)
 80030ca:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80030cc:	4b37      	ldr	r3, [pc, #220]	; (80031ac <statemachine+0xb94>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
						}
			  break;
 80030d2:	e3e0      	b.n	8003896 <statemachine+0x127e>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 80030d4:	2000      	movs	r0, #0
 80030d6:	f7fe ff41 	bl	8001f5c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80030da:	4936      	ldr	r1, [pc, #216]	; (80031b4 <statemachine+0xb9c>)
 80030dc:	482d      	ldr	r0, [pc, #180]	; (8003194 <statemachine+0xb7c>)
 80030de:	f7fe fde9 	bl	8001cb4 <nmea_parse>
			  ssd1306_SetCursor(32, 32);
 80030e2:	2120      	movs	r1, #32
 80030e4:	2020      	movs	r0, #32
 80030e6:	f7ff f87b 	bl	80021e0 <ssd1306_SetCursor>
			  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 80030ea:	4a25      	ldr	r2, [pc, #148]	; (8003180 <statemachine+0xb68>)
 80030ec:	2301      	movs	r3, #1
 80030ee:	ca06      	ldmia	r2, {r1, r2}
 80030f0:	4831      	ldr	r0, [pc, #196]	; (80031b8 <statemachine+0xba0>)
 80030f2:	f7ff f84f 	bl	8002194 <ssd1306_WriteString>
			  int heure=0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	64fb      	str	r3, [r7, #76]	; 0x4c
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <statemachine+0xb7c>)
 80030fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	461a      	mov	r2, r3
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <statemachine+0xb7c>)
 8003110:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	4413      	add	r3, r2
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
			  if((heure+2)>=24){
 800311c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311e:	2b15      	cmp	r3, #21
 8003120:	dd03      	ble.n	800312a <statemachine+0xb12>
				  heure=heure-22;
 8003122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003124:	3b16      	subs	r3, #22
 8003126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003128:	e002      	b.n	8003130 <statemachine+0xb18>
			  }
			  else{
				  heure=heure+2;
 800312a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312c:	3302      	adds	r3, #2
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
			  }

			  if(myData.fix == 1){
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <statemachine+0xb7c>)
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 82d3 	bne.w	80036e0 <statemachine+0x10c8>

				  switch(hrstate){
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <statemachine+0xba4>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <statemachine+0xb30>
 8003142:	2b01      	cmp	r3, #1
 8003144:	d07d      	beq.n	8003242 <statemachine+0xc2a>
 8003146:	e2e1      	b.n	800370c <statemachine+0x10f4>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 8003148:	2014      	movs	r0, #20
 800314a:	f004 ffd5 	bl	80080f8 <malloc>
 800314e:	4603      	mov	r3, r0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
					 ssd1306_SetCursor(34, 42);
 8003152:	212a      	movs	r1, #42	; 0x2a
 8003154:	2022      	movs	r0, #34	; 0x22
 8003156:	f7ff f843 	bl	80021e0 <ssd1306_SetCursor>
					 if(heure>=10){
 800315a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315c:	2b09      	cmp	r3, #9
 800315e:	dd31      	ble.n	80031c4 <statemachine+0xbac>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <statemachine+0xb7c>)
 8003162:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003166:	461a      	mov	r2, r3
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <statemachine+0xb7c>)
 800316a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	9200      	str	r2, [sp, #0]
 8003172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003174:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <statemachine+0xba8>)
 8003176:	210f      	movs	r1, #15
 8003178:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800317a:	f006 feb7 	bl	8009eec <sniprintf>
 800317e:	e030      	b.n	80031e2 <statemachine+0xbca>
 8003180:	20000000 	.word	0x20000000
 8003184:	0800e0fc 	.word	0x0800e0fc
 8003188:	0800e094 	.word	0x0800e094
 800318c:	20000654 	.word	0x20000654
 8003190:	2000065b 	.word	0x2000065b
 8003194:	20000610 	.word	0x20000610
 8003198:	0800e104 	.word	0x0800e104
 800319c:	0800e110 	.word	0x0800e110
 80031a0:	0800e118 	.word	0x0800e118
 80031a4:	0800e0bc 	.word	0x0800e0bc
 80031a8:	0800e124 	.word	0x0800e124
 80031ac:	20000650 	.word	0x20000650
 80031b0:	20000658 	.word	0x20000658
 80031b4:	2000040c 	.word	0x2000040c
 80031b8:	0800e12c 	.word	0x0800e12c
 80031bc:	20000659 	.word	0x20000659
 80031c0:	0800e138 	.word	0x0800e138
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 80031c4:	4bb6      	ldr	r3, [pc, #728]	; (80034a0 <statemachine+0xe88>)
 80031c6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80031ca:	461a      	mov	r2, r3
 80031cc:	4bb4      	ldr	r3, [pc, #720]	; (80034a0 <statemachine+0xe88>)
 80031ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	9200      	str	r2, [sp, #0]
 80031d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d8:	4ab2      	ldr	r2, [pc, #712]	; (80034a4 <statemachine+0xe8c>)
 80031da:	210f      	movs	r1, #15
 80031dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031de:	f006 fe85 	bl	8009eec <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 80031e2:	4ab1      	ldr	r2, [pc, #708]	; (80034a8 <statemachine+0xe90>)
 80031e4:	2301      	movs	r3, #1
 80031e6:	ca06      	ldmia	r2, {r1, r2}
 80031e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031ea:	f7fe ffd3 	bl	8002194 <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 80031ee:	2134      	movs	r1, #52	; 0x34
 80031f0:	2022      	movs	r0, #34	; 0x22
 80031f2:	f7fe fff5 	bl	80021e0 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 80031f6:	4baa      	ldr	r3, [pc, #680]	; (80034a0 <statemachine+0xe88>)
 80031f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031fc:	461a      	mov	r2, r3
 80031fe:	4ba8      	ldr	r3, [pc, #672]	; (80034a0 <statemachine+0xe88>)
 8003200:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	4aa8      	ldr	r2, [pc, #672]	; (80034ac <statemachine+0xe94>)
 800320a:	210f      	movs	r1, #15
 800320c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800320e:	f006 fe6d 	bl	8009eec <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 8003212:	4aa7      	ldr	r2, [pc, #668]	; (80034b0 <statemachine+0xe98>)
 8003214:	2301      	movs	r3, #1
 8003216:	ca06      	ldmia	r2, {r1, r2}
 8003218:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800321a:	f7fe ffbb 	bl	8002194 <ssd1306_WriteString>
					free(str);
 800321e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003220:	f004 ff72 	bl	8008108 <free>
					if(BTN_B>=1){
 8003224:	4ba3      	ldr	r3, [pc, #652]	; (80034b4 <statemachine+0xe9c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f340 826c 	ble.w	8003706 <statemachine+0x10ee>
												hrstate++;
 800322e:	4ba2      	ldr	r3, [pc, #648]	; (80034b8 <statemachine+0xea0>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4ba0      	ldr	r3, [pc, #640]	; (80034b8 <statemachine+0xea0>)
 8003238:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 800323a:	4b9e      	ldr	r3, [pc, #632]	; (80034b4 <statemachine+0xe9c>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
											}




					  break;
 8003240:	e261      	b.n	8003706 <statemachine+0x10ee>
				  case STATE_OLD:
					  if(heure>12){
 8003242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003244:	2b0c      	cmp	r3, #12
 8003246:	dd02      	ble.n	800324e <statemachine+0xc36>
						  heure=heure-12;
 8003248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800324a:	3b0c      	subs	r3, #12
 800324c:	64fb      	str	r3, [r7, #76]	; 0x4c
					  }
					  int minute=0;
 800324e:	2300      	movs	r3, #0
 8003250:	63bb      	str	r3, [r7, #56]	; 0x38
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8003252:	4b93      	ldr	r3, [pc, #588]	; (80034a0 <statemachine+0xe88>)
 8003254:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	461a      	mov	r2, r3
 8003266:	4b8e      	ldr	r3, [pc, #568]	; (80034a0 <statemachine+0xe88>)
 8003268:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	4413      	add	r3, r2
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
					  ssd1306_DrawCircle(64, 48, 12, White);
 8003274:	2301      	movs	r3, #1
 8003276:	220c      	movs	r2, #12
 8003278:	2130      	movs	r1, #48	; 0x30
 800327a:	2040      	movs	r0, #64	; 0x40
 800327c:	f7ff f834 	bl	80022e8 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 8003280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003282:	f1c3 0303 	rsb	r3, r3, #3
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f94c 	bl	8000524 <__aeabi_i2d>
 800328c:	a382      	add	r3, pc, #520	; (adr r3, 8003498 <statemachine+0xe80>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	f7fd f9b1 	bl	80005f8 <__aeabi_dmul>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4610      	mov	r0, r2
 800329c:	4619      	mov	r1, r3
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	4b86      	ldr	r3, [pc, #536]	; (80034bc <statemachine+0xea4>)
 80032a4:	f7fd fad2 	bl	800084c <__aeabi_ddiv>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	ec43 2b17 	vmov	d7, r2, r3
 80032b0:	eeb0 0a47 	vmov.f32	s0, s14
 80032b4:	eef0 0a67 	vmov.f32	s1, s15
 80032b8:	f009 fc62 	bl	800cb80 <cos>
 80032bc:	ec51 0b10 	vmov	r0, r1, d0
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	4b7d      	ldr	r3, [pc, #500]	; (80034bc <statemachine+0xea4>)
 80032c6:	f7fd f997 	bl	80005f8 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	ec43 2b17 	vmov	d7, r2, r3
 80032d2:	eeb0 0a47 	vmov.f32	s0, s14
 80032d6:	eef0 0a67 	vmov.f32	s1, s15
 80032da:	f009 fd09 	bl	800ccf0 <floor>
 80032de:	ec51 0b10 	vmov	r0, r1, d0
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <statemachine+0xea8>)
 80032e8:	f7fc ffd0 	bl	800028c <__adddf3>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	f7fd fc58 	bl	8000ba8 <__aeabi_d2uiz>
 80032f8:	4603      	mov	r3, r0
 80032fa:	b2dc      	uxtb	r4, r3
 80032fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fe:	f1c3 0303 	rsb	r3, r3, #3
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd f90e 	bl	8000524 <__aeabi_i2d>
 8003308:	a363      	add	r3, pc, #396	; (adr r3, 8003498 <statemachine+0xe80>)
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	f7fd f973 	bl	80005f8 <__aeabi_dmul>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	4b67      	ldr	r3, [pc, #412]	; (80034bc <statemachine+0xea4>)
 8003320:	f7fd fa94 	bl	800084c <__aeabi_ddiv>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	ec43 2b17 	vmov	d7, r2, r3
 800332c:	eeb0 0a47 	vmov.f32	s0, s14
 8003330:	eef0 0a67 	vmov.f32	s1, s15
 8003334:	f009 fc78 	bl	800cc28 <sin>
 8003338:	ec51 0b10 	vmov	r0, r1, d0
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	4b5e      	ldr	r3, [pc, #376]	; (80034bc <statemachine+0xea4>)
 8003342:	f7fd f959 	bl	80005f8 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	ec43 2b17 	vmov	d7, r2, r3
 800334e:	eeb0 0a47 	vmov.f32	s0, s14
 8003352:	eef0 0a67 	vmov.f32	s1, s15
 8003356:	f009 fccb 	bl	800ccf0 <floor>
 800335a:	ec53 2b10 	vmov	r2, r3, d0
 800335e:	f04f 0000 	mov.w	r0, #0
 8003362:	4958      	ldr	r1, [pc, #352]	; (80034c4 <statemachine+0xeac>)
 8003364:	f7fc ff90 	bl	8000288 <__aeabi_dsub>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	f7fd fc1a 	bl	8000ba8 <__aeabi_d2uiz>
 8003374:	4603      	mov	r3, r0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2201      	movs	r2, #1
 800337a:	9200      	str	r2, [sp, #0]
 800337c:	4622      	mov	r2, r4
 800337e:	2130      	movs	r1, #48	; 0x30
 8003380:	2040      	movs	r0, #64	; 0x40
 8003382:	f7fe ff45 	bl	8002210 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	f1c3 030f 	rsb	r3, r3, #15
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd f8c9 	bl	8000524 <__aeabi_i2d>
 8003392:	a341      	add	r3, pc, #260	; (adr r3, 8003498 <statemachine+0xe80>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f7fd f92e 	bl	80005f8 <__aeabi_dmul>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <statemachine+0xeb0>)
 80033aa:	f7fd fa4f 	bl	800084c <__aeabi_ddiv>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	ec43 2b17 	vmov	d7, r2, r3
 80033b6:	eeb0 0a47 	vmov.f32	s0, s14
 80033ba:	eef0 0a67 	vmov.f32	s1, s15
 80033be:	f009 fbdf 	bl	800cb80 <cos>
 80033c2:	ec51 0b10 	vmov	r0, r1, d0
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	4b40      	ldr	r3, [pc, #256]	; (80034cc <statemachine+0xeb4>)
 80033cc:	f7fd f914 	bl	80005f8 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	ec43 2b17 	vmov	d7, r2, r3
 80033d8:	eeb0 0a47 	vmov.f32	s0, s14
 80033dc:	eef0 0a67 	vmov.f32	s1, s15
 80033e0:	f009 fc86 	bl	800ccf0 <floor>
 80033e4:	ec51 0b10 	vmov	r0, r1, d0
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <statemachine+0xea8>)
 80033ee:	f7fc ff4d 	bl	800028c <__adddf3>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f7fd fbd5 	bl	8000ba8 <__aeabi_d2uiz>
 80033fe:	4603      	mov	r3, r0
 8003400:	b2dc      	uxtb	r4, r3
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	f1c3 030f 	rsb	r3, r3, #15
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd f88b 	bl	8000524 <__aeabi_i2d>
 800340e:	a322      	add	r3, pc, #136	; (adr r3, 8003498 <statemachine+0xe80>)
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f7fd f8f0 	bl	80005f8 <__aeabi_dmul>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <statemachine+0xeb0>)
 8003426:	f7fd fa11 	bl	800084c <__aeabi_ddiv>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	ec43 2b17 	vmov	d7, r2, r3
 8003432:	eeb0 0a47 	vmov.f32	s0, s14
 8003436:	eef0 0a67 	vmov.f32	s1, s15
 800343a:	f009 fbf5 	bl	800cc28 <sin>
 800343e:	ec51 0b10 	vmov	r0, r1, d0
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	4b21      	ldr	r3, [pc, #132]	; (80034cc <statemachine+0xeb4>)
 8003448:	f7fd f8d6 	bl	80005f8 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	ec43 2b17 	vmov	d7, r2, r3
 8003454:	eeb0 0a47 	vmov.f32	s0, s14
 8003458:	eef0 0a67 	vmov.f32	s1, s15
 800345c:	f009 fc48 	bl	800ccf0 <floor>
 8003460:	ec53 2b10 	vmov	r2, r3, d0
 8003464:	f04f 0000 	mov.w	r0, #0
 8003468:	4916      	ldr	r1, [pc, #88]	; (80034c4 <statemachine+0xeac>)
 800346a:	f7fc ff0d 	bl	8000288 <__aeabi_dsub>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7fd fb97 	bl	8000ba8 <__aeabi_d2uiz>
 800347a:	4603      	mov	r3, r0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2201      	movs	r2, #1
 8003480:	9200      	str	r2, [sp, #0]
 8003482:	4622      	mov	r2, r4
 8003484:	2130      	movs	r1, #48	; 0x30
 8003486:	2040      	movs	r0, #64	; 0x40
 8003488:	f7fe fec2 	bl	8002210 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 800348c:	2300      	movs	r3, #0
 800348e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003490:	e114      	b.n	80036bc <statemachine+0x10a4>
 8003492:	bf00      	nop
 8003494:	f3af 8000 	nop.w
 8003498:	54442d18 	.word	0x54442d18
 800349c:	400921fb 	.word	0x400921fb
 80034a0:	20000610 	.word	0x20000610
 80034a4:	0800e140 	.word	0x0800e140
 80034a8:	20000008 	.word	0x20000008
 80034ac:	0800e14c 	.word	0x0800e14c
 80034b0:	20000000 	.word	0x20000000
 80034b4:	20000654 	.word	0x20000654
 80034b8:	20000659 	.word	0x20000659
 80034bc:	40180000 	.word	0x40180000
 80034c0:	40500000 	.word	0x40500000
 80034c4:	40480000 	.word	0x40480000
 80034c8:	403e0000 	.word	0x403e0000
 80034cc:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 80034d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80034d2:	f7fd f827 	bl	8000524 <__aeabi_i2d>
 80034d6:	a3c6      	add	r3, pc, #792	; (adr r3, 80037f0 <statemachine+0x11d8>)
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f7fd f88c 	bl	80005f8 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	4bc2      	ldr	r3, [pc, #776]	; (80037f8 <statemachine+0x11e0>)
 80034ee:	f7fd f9ad 	bl	800084c <__aeabi_ddiv>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	ec43 2b17 	vmov	d7, r2, r3
 80034fa:	eeb0 0a47 	vmov.f32	s0, s14
 80034fe:	eef0 0a67 	vmov.f32	s1, s15
 8003502:	f009 fb3d 	bl	800cb80 <cos>
 8003506:	ec51 0b10 	vmov	r0, r1, d0
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	4bbb      	ldr	r3, [pc, #748]	; (80037fc <statemachine+0x11e4>)
 8003510:	f7fd f872 	bl	80005f8 <__aeabi_dmul>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	ec43 2b17 	vmov	d7, r2, r3
 800351c:	eeb0 0a47 	vmov.f32	s0, s14
 8003520:	eef0 0a67 	vmov.f32	s1, s15
 8003524:	f009 fbe4 	bl	800ccf0 <floor>
 8003528:	ec51 0b10 	vmov	r0, r1, d0
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	4bb3      	ldr	r3, [pc, #716]	; (8003800 <statemachine+0x11e8>)
 8003532:	f7fc feab 	bl	800028c <__adddf3>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	f7fd fb33 	bl	8000ba8 <__aeabi_d2uiz>
 8003542:	4603      	mov	r3, r0
 8003544:	b2dc      	uxtb	r4, r3
 8003546:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003548:	f7fc ffec 	bl	8000524 <__aeabi_i2d>
 800354c:	a3a8      	add	r3, pc, #672	; (adr r3, 80037f0 <statemachine+0x11d8>)
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f7fd f851 	bl	80005f8 <__aeabi_dmul>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	4ba5      	ldr	r3, [pc, #660]	; (80037f8 <statemachine+0x11e0>)
 8003564:	f7fd f972 	bl	800084c <__aeabi_ddiv>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	ec43 2b17 	vmov	d7, r2, r3
 8003570:	eeb0 0a47 	vmov.f32	s0, s14
 8003574:	eef0 0a67 	vmov.f32	s1, s15
 8003578:	f009 fb56 	bl	800cc28 <sin>
 800357c:	ec51 0b10 	vmov	r0, r1, d0
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	4b9d      	ldr	r3, [pc, #628]	; (80037fc <statemachine+0x11e4>)
 8003586:	f7fd f837 	bl	80005f8 <__aeabi_dmul>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	ec43 2b17 	vmov	d7, r2, r3
 8003592:	eeb0 0a47 	vmov.f32	s0, s14
 8003596:	eef0 0a67 	vmov.f32	s1, s15
 800359a:	f009 fba9 	bl	800ccf0 <floor>
 800359e:	ec51 0b10 	vmov	r0, r1, d0
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	4b97      	ldr	r3, [pc, #604]	; (8003804 <statemachine+0x11ec>)
 80035a8:	f7fc fe70 	bl	800028c <__adddf3>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	f7fd faf8 	bl	8000ba8 <__aeabi_d2uiz>
 80035b8:	4603      	mov	r3, r0
 80035ba:	b2dd      	uxtb	r5, r3
 80035bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80035be:	f7fc ffb1 	bl	8000524 <__aeabi_i2d>
 80035c2:	a38b      	add	r3, pc, #556	; (adr r3, 80037f0 <statemachine+0x11d8>)
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f7fd f816 	bl	80005f8 <__aeabi_dmul>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	4b87      	ldr	r3, [pc, #540]	; (80037f8 <statemachine+0x11e0>)
 80035da:	f7fd f937 	bl	800084c <__aeabi_ddiv>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	ec43 2b17 	vmov	d7, r2, r3
 80035e6:	eeb0 0a47 	vmov.f32	s0, s14
 80035ea:	eef0 0a67 	vmov.f32	s1, s15
 80035ee:	f009 fac7 	bl	800cb80 <cos>
 80035f2:	ec51 0b10 	vmov	r0, r1, d0
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	4b83      	ldr	r3, [pc, #524]	; (8003808 <statemachine+0x11f0>)
 80035fc:	f7fc fffc 	bl	80005f8 <__aeabi_dmul>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	ec43 2b17 	vmov	d7, r2, r3
 8003608:	eeb0 0a47 	vmov.f32	s0, s14
 800360c:	eef0 0a67 	vmov.f32	s1, s15
 8003610:	f009 fb6e 	bl	800ccf0 <floor>
 8003614:	ec51 0b10 	vmov	r0, r1, d0
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	4b78      	ldr	r3, [pc, #480]	; (8003800 <statemachine+0x11e8>)
 800361e:	f7fc fe35 	bl	800028c <__adddf3>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	f7fd fabd 	bl	8000ba8 <__aeabi_d2uiz>
 800362e:	4603      	mov	r3, r0
 8003630:	b2de      	uxtb	r6, r3
 8003632:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003634:	f7fc ff76 	bl	8000524 <__aeabi_i2d>
 8003638:	a36d      	add	r3, pc, #436	; (adr r3, 80037f0 <statemachine+0x11d8>)
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f7fc ffdb 	bl	80005f8 <__aeabi_dmul>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <statemachine+0x11e0>)
 8003650:	f7fd f8fc 	bl	800084c <__aeabi_ddiv>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	ec43 2b17 	vmov	d7, r2, r3
 800365c:	eeb0 0a47 	vmov.f32	s0, s14
 8003660:	eef0 0a67 	vmov.f32	s1, s15
 8003664:	f009 fae0 	bl	800cc28 <sin>
 8003668:	ec51 0b10 	vmov	r0, r1, d0
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	4b65      	ldr	r3, [pc, #404]	; (8003808 <statemachine+0x11f0>)
 8003672:	f7fc ffc1 	bl	80005f8 <__aeabi_dmul>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	ec43 2b17 	vmov	d7, r2, r3
 800367e:	eeb0 0a47 	vmov.f32	s0, s14
 8003682:	eef0 0a67 	vmov.f32	s1, s15
 8003686:	f009 fb33 	bl	800ccf0 <floor>
 800368a:	ec51 0b10 	vmov	r0, r1, d0
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	4b5c      	ldr	r3, [pc, #368]	; (8003804 <statemachine+0x11ec>)
 8003694:	f7fc fdfa 	bl	800028c <__adddf3>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	f7fd fa82 	bl	8000ba8 <__aeabi_d2uiz>
 80036a4:	4603      	mov	r3, r0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2201      	movs	r2, #1
 80036aa:	9200      	str	r2, [sp, #0]
 80036ac:	4632      	mov	r2, r6
 80036ae:	4629      	mov	r1, r5
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7fe fdad 	bl	8002210 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80036b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b8:	3301      	adds	r3, #1
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80036bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	f77f af06 	ble.w	80034d0 <statemachine+0xeb8>
					  }
					  if(BTN_B>=1){
 80036c4:	4b51      	ldr	r3, [pc, #324]	; (800380c <statemachine+0x11f4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	dd1e      	ble.n	800370a <statemachine+0x10f2>
					  	hrstate--;
 80036cc:	4b50      	ldr	r3, [pc, #320]	; (8003810 <statemachine+0x11f8>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <statemachine+0x11f8>)
 80036d6:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 80036d8:	4b4c      	ldr	r3, [pc, #304]	; (800380c <statemachine+0x11f4>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
					  }


					  break;
 80036de:	e014      	b.n	800370a <statemachine+0x10f2>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 80036e0:	2014      	movs	r0, #20
 80036e2:	f004 fd09 	bl	80080f8 <malloc>
 80036e6:	4603      	mov	r3, r0
 80036e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			  			 						ssd1306_SetCursor(32, 44);
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	2020      	movs	r0, #32
 80036ee:	f7fe fd77 	bl	80021e0 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80036f2:	4a48      	ldr	r2, [pc, #288]	; (8003814 <statemachine+0x11fc>)
 80036f4:	2301      	movs	r3, #1
 80036f6:	ca06      	ldmia	r2, {r1, r2}
 80036f8:	4847      	ldr	r0, [pc, #284]	; (8003818 <statemachine+0x1200>)
 80036fa:	f7fe fd4b 	bl	8002194 <ssd1306_WriteString>
			  			 						free(str);
 80036fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003700:	f004 fd02 	bl	8008108 <free>
 8003704:	e002      	b.n	800370c <statemachine+0x10f4>
					  break;
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <statemachine+0x10f4>
					  break;
 800370a:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 800370c:	4b43      	ldr	r3, [pc, #268]	; (800381c <statemachine+0x1204>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f340 80c2 	ble.w	800389a <statemachine+0x1282>
			  		state++;
 8003716:	4b42      	ldr	r3, [pc, #264]	; (8003820 <statemachine+0x1208>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	3301      	adds	r3, #1
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4b40      	ldr	r3, [pc, #256]	; (8003820 <statemachine+0x1208>)
 8003720:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <statemachine+0x1204>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8003728:	4b38      	ldr	r3, [pc, #224]	; (800380c <statemachine+0x11f4>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 800372e:	e0b4      	b.n	800389a <statemachine+0x1282>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8003730:	2000      	movs	r0, #0
 8003732:	f7fe fc13 	bl	8001f5c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003736:	493b      	ldr	r1, [pc, #236]	; (8003824 <statemachine+0x120c>)
 8003738:	483b      	ldr	r0, [pc, #236]	; (8003828 <statemachine+0x1210>)
 800373a:	f7fe fabb 	bl	8001cb4 <nmea_parse>
			  if(BTN_B==0){
 800373e:	4b33      	ldr	r3, [pc, #204]	; (800380c <statemachine+0x11f4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d178      	bne.n	8003838 <statemachine+0x1220>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003746:	4b38      	ldr	r3, [pc, #224]	; (8003828 <statemachine+0x1210>)
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	2b01      	cmp	r3, #1
 800374c:	d131      	bne.n	80037b2 <statemachine+0x119a>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 800374e:	2014      	movs	r0, #20
 8003750:	f004 fcd2 	bl	80080f8 <malloc>
 8003754:	4603      	mov	r3, r0
 8003756:	643b      	str	r3, [r7, #64]	; 0x40
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8003758:	4b33      	ldr	r3, [pc, #204]	; (8003828 <statemachine+0x1210>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc fef3 	bl	8000548 <__aeabi_f2d>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	e9cd 2300 	strd	r2, r3, [sp]
 800376a:	4a30      	ldr	r2, [pc, #192]	; (800382c <statemachine+0x1214>)
 800376c:	210f      	movs	r1, #15
 800376e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003770:	f006 fbbc 	bl	8009eec <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 8003774:	2120      	movs	r1, #32
 8003776:	2020      	movs	r0, #32
 8003778:	f7fe fd32 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 800377c:	4a25      	ldr	r2, [pc, #148]	; (8003814 <statemachine+0x11fc>)
 800377e:	2301      	movs	r3, #1
 8003780:	ca06      	ldmia	r2, {r1, r2}
 8003782:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003784:	f7fe fd06 	bl	8002194 <ssd1306_WriteString>
			 			 						snprintf(str,15, "SatNb :%d",myData.satelliteCount);
 8003788:	4b27      	ldr	r3, [pc, #156]	; (8003828 <statemachine+0x1210>)
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	4a28      	ldr	r2, [pc, #160]	; (8003830 <statemachine+0x1218>)
 800378e:	210f      	movs	r1, #15
 8003790:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003792:	f006 fbab 	bl	8009eec <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 8003796:	212a      	movs	r1, #42	; 0x2a
 8003798:	2020      	movs	r0, #32
 800379a:	f7fe fd21 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 800379e:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <statemachine+0x11fc>)
 80037a0:	2301      	movs	r3, #1
 80037a2:	ca06      	ldmia	r2, {r1, r2}
 80037a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80037a6:	f7fe fcf5 	bl	8002194 <ssd1306_WriteString>
			 			 						free(str);
 80037aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80037ac:	f004 fcac 	bl	8008108 <free>
 80037b0:	e055      	b.n	800385e <statemachine+0x1246>
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 80037b2:	2014      	movs	r0, #20
 80037b4:	f004 fca0 	bl	80080f8 <malloc>
 80037b8:	4603      	mov	r3, r0
 80037ba:	647b      	str	r3, [r7, #68]	; 0x44
			 			 						ssd1306_SetCursor(32, 32);
 80037bc:	2120      	movs	r1, #32
 80037be:	2020      	movs	r0, #32
 80037c0:	f7fe fd0e 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 80037c4:	4a13      	ldr	r2, [pc, #76]	; (8003814 <statemachine+0x11fc>)
 80037c6:	2301      	movs	r3, #1
 80037c8:	ca06      	ldmia	r2, {r1, r2}
 80037ca:	481a      	ldr	r0, [pc, #104]	; (8003834 <statemachine+0x121c>)
 80037cc:	f7fe fce2 	bl	8002194 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 44);
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	2020      	movs	r0, #32
 80037d4:	f7fe fd04 	bl	80021e0 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80037d8:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <statemachine+0x11fc>)
 80037da:	2301      	movs	r3, #1
 80037dc:	ca06      	ldmia	r2, {r1, r2}
 80037de:	480e      	ldr	r0, [pc, #56]	; (8003818 <statemachine+0x1200>)
 80037e0:	f7fe fcd8 	bl	8002194 <ssd1306_WriteString>
			 			 						free(str);
 80037e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80037e6:	f004 fc8f 	bl	8008108 <free>
 80037ea:	e038      	b.n	800385e <statemachine+0x1246>
 80037ec:	f3af 8000 	nop.w
 80037f0:	54442d18 	.word	0x54442d18
 80037f4:	400921fb 	.word	0x400921fb
 80037f8:	40180000 	.word	0x40180000
 80037fc:	40240000 	.word	0x40240000
 8003800:	40500000 	.word	0x40500000
 8003804:	40480000 	.word	0x40480000
 8003808:	40280000 	.word	0x40280000
 800380c:	20000654 	.word	0x20000654
 8003810:	20000659 	.word	0x20000659
 8003814:	20000000 	.word	0x20000000
 8003818:	0800e094 	.word	0x0800e094
 800381c:	20000650 	.word	0x20000650
 8003820:	20000658 	.word	0x20000658
 8003824:	2000040c 	.word	0x2000040c
 8003828:	20000610 	.word	0x20000610
 800382c:	0800e158 	.word	0x0800e158
 8003830:	0800e164 	.word	0x0800e164
 8003834:	0800e170 	.word	0x0800e170
			 			 					}
			  }
			  else{
			  		ssd1306_DrawBitmap(32, 32, speciale, 64, 64, White);
 8003838:	2301      	movs	r3, #1
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	2340      	movs	r3, #64	; 0x40
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2340      	movs	r3, #64	; 0x40
 8003842:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <statemachine+0x1298>)
 8003844:	2120      	movs	r1, #32
 8003846:	2020      	movs	r0, #32
 8003848:	f7fe fe5a 	bl	8002500 <ssd1306_DrawBitmap>
			  		ssd1306_UpdateScreen();//easter egg
 800384c:	f7fe fb9e 	bl	8001f8c <ssd1306_UpdateScreen>
			  		HAL_Delay(1500);
 8003850:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003854:	f000 fbf4 	bl	8004040 <HAL_Delay>
			  		BTN_B=0;
 8003858:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <statemachine+0x129c>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
			  		}
			  if(BTN_A>=1){
 800385e:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <statemachine+0x12a0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	dd1b      	ble.n	800389e <statemachine+0x1286>
			  		state--;
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <statemachine+0x12a4>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	3b01      	subs	r3, #1
 800386c:	b2da      	uxtb	r2, r3
 800386e:	4b13      	ldr	r3, [pc, #76]	; (80038bc <statemachine+0x12a4>)
 8003870:	701a      	strb	r2, [r3, #0]
			  		state--;
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <statemachine+0x12a4>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	3b01      	subs	r3, #1
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <statemachine+0x12a4>)
 800387c:	701a      	strb	r2, [r3, #0]
			  		state--;
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <statemachine+0x12a4>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	3b01      	subs	r3, #1
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <statemachine+0x12a4>)
 8003888:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <statemachine+0x12a0>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8003890:	e005      	b.n	800389e <statemachine+0x1286>
				  break;
 8003892:	bf00      	nop
 8003894:	e004      	b.n	80038a0 <statemachine+0x1288>
			  break;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <statemachine+0x1288>
			  break;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <statemachine+0x1288>
			  break;
 800389e:	bf00      	nop
//
//		  		}
//		  		 break;
	}

return ;
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
}
 80038a4:	3764      	adds	r7, #100	; 0x64
 80038a6:	46bd      	mov	sp, r7
 80038a8:	ecbd 8b02 	vpop	{d8}
 80038ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ae:	bf00      	nop
 80038b0:	0800efe8 	.word	0x0800efe8
 80038b4:	20000654 	.word	0x20000654
 80038b8:	20000650 	.word	0x20000650
 80038bc:	20000658 	.word	0x20000658

080038c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <HAL_MspInit+0x44>)
 80038c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ca:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <HAL_MspInit+0x44>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6613      	str	r3, [r2, #96]	; 0x60
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <HAL_MspInit+0x44>)
 80038d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_MspInit+0x44>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	4a08      	ldr	r2, [pc, #32]	; (8003904 <HAL_MspInit+0x44>)
 80038e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6593      	str	r3, [r2, #88]	; 0x58
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_MspInit+0x44>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000

08003908 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a15      	ldr	r2, [pc, #84]	; (800397c <HAL_DAC_MspInit+0x74>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d124      	bne.n	8003974 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_DAC_MspInit+0x78>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	4a14      	ldr	r2, [pc, #80]	; (8003980 <HAL_DAC_MspInit+0x78>)
 8003930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003934:	6593      	str	r3, [r2, #88]	; 0x58
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_DAC_MspInit+0x78>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_DAC_MspInit+0x78>)
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_DAC_MspInit+0x78>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_DAC_MspInit+0x78>)
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800395a:	2310      	movs	r3, #16
 800395c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800395e:	2303      	movs	r3, #3
 8003960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003966:	f107 0314 	add.w	r3, r7, #20
 800396a:	4619      	mov	r1, r3
 800396c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003970:	f001 f866 	bl	8004a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003974:	bf00      	nop
 8003976:	3728      	adds	r7, #40	; 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40007400 	.word	0x40007400
 8003980:	40021000 	.word	0x40021000

08003984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b0a2      	sub	sp, #136	; 0x88
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800399c:	f107 0320 	add.w	r3, r7, #32
 80039a0:	2254      	movs	r2, #84	; 0x54
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f006 fb38 	bl	800a01a <memset>
  if(hi2c->Instance==I2C1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a4f      	ldr	r2, [pc, #316]	; (8003aec <HAL_I2C_MspInit+0x168>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d13a      	bne.n	8003a2a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80039b4:	2340      	movs	r3, #64	; 0x40
 80039b6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80039b8:	2300      	movs	r3, #0
 80039ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039bc:	f107 0320 	add.w	r3, r7, #32
 80039c0:	4618      	mov	r0, r3
 80039c2:	f002 fdc1 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80039cc:	f7fd fe58 	bl	8001680 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d0:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	4a46      	ldr	r2, [pc, #280]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039dc:	4b44      	ldr	r3, [pc, #272]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039ec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ee:	2312      	movs	r3, #18
 80039f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f6:	2303      	movs	r3, #3
 80039f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039fc:	2304      	movs	r3, #4
 80039fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a06:	4619      	mov	r1, r3
 8003a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a0c:	f001 f818 	bl	8004a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a10:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	4a36      	ldr	r2, [pc, #216]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1c:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003a28:	e05c      	b.n	8003ae4 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a31      	ldr	r2, [pc, #196]	; (8003af4 <HAL_I2C_MspInit+0x170>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d157      	bne.n	8003ae4 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a38:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a3e:	f107 0320 	add.w	r3, r7, #32
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 fd80 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8003a4e:	f7fd fe17 	bl	8001680 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a52:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a56:	4a26      	ldr	r2, [pc, #152]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6a:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	4a20      	ldr	r2, [pc, #128]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a76:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a86:	2312      	movs	r3, #18
 8003a88:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a94:	2304      	movs	r3, #4
 8003a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aa4:	f000 ffcc 	bl	8004a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aac:	2312      	movs	r3, #18
 8003aae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003aba:	2304      	movs	r3, #4
 8003abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	480c      	ldr	r0, [pc, #48]	; (8003af8 <HAL_I2C_MspInit+0x174>)
 8003ac8:	f000 ffba 	bl	8004a40 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003ad2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_I2C_MspInit+0x16c>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	3788      	adds	r7, #136	; 0x88
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40005400 	.word	0x40005400
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40005c00 	.word	0x40005c00
 8003af8:	48000400 	.word	0x48000400

08003afc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b098      	sub	sp, #96	; 0x60
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b04:	f107 030c 	add.w	r3, r7, #12
 8003b08:	2254      	movs	r2, #84	; 0x54
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f006 fa84 	bl	800a01a <memset>
  if(hlptim->Instance==LPTIM1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a11      	ldr	r2, [pc, #68]	; (8003b5c <HAL_LPTIM_MspInit+0x60>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d11a      	bne.n	8003b52 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b20:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 fd0c 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8003b36:	f7fd fda3 	bl	8001680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_LPTIM_MspInit+0x64>)
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <HAL_LPTIM_MspInit+0x64>)
 8003b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b44:	6593      	str	r3, [r2, #88]	; 0x58
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_LPTIM_MspInit+0x64>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003b52:	bf00      	nop
 8003b54:	3760      	adds	r7, #96	; 0x60
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40007c00 	.word	0x40007c00
 8003b60:	40021000 	.word	0x40021000

08003b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b09e      	sub	sp, #120	; 0x78
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b7c:	f107 0310 	add.w	r3, r7, #16
 8003b80:	2254      	movs	r2, #84	; 0x54
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f006 fa48 	bl	800a01a <memset>
  if(huart->Instance==LPUART1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a38      	ldr	r2, [pc, #224]	; (8003c70 <HAL_UART_MspInit+0x10c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d168      	bne.n	8003c66 <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003b94:	2320      	movs	r3, #32
 8003b96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b9c:	f107 0310 	add.w	r3, r7, #16
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f002 fcd1 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003bac:	f7fd fd68 	bl	8001680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003bb0:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <HAL_UART_MspInit+0x110>)
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb4:	4a2f      	ldr	r2, [pc, #188]	; (8003c74 <HAL_UART_MspInit+0x110>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <HAL_UART_MspInit+0x110>)
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <HAL_UART_MspInit+0x110>)
 8003bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bcc:	4a29      	ldr	r2, [pc, #164]	; (8003c74 <HAL_UART_MspInit+0x110>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_UART_MspInit+0x110>)
 8003bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003be0:	230c      	movs	r3, #12
 8003be2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bec:	2303      	movs	r3, #3
 8003bee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bfe:	f000 ff1f 	bl	8004a40 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c04:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <HAL_UART_MspInit+0x118>)
 8003c06:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c0e:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c14:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_CIRCULAR;
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c2e:	2220      	movs	r2, #32
 8003c30:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8003c3a:	480f      	ldr	r0, [pc, #60]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c3c:	f000 fc7e 	bl	800453c <HAL_DMA_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003c46:	f7fd fd1b 	bl	8001680 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart_rx);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c4e:	675a      	str	r2, [r3, #116]	; 0x74
 8003c50:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <HAL_UART_MspInit+0x114>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2046      	movs	r0, #70	; 0x46
 8003c5c:	f000 faef 	bl	800423e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003c60:	2046      	movs	r0, #70	; 0x46
 8003c62:	f000 fb08 	bl	8004276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003c66:	bf00      	nop
 8003c68:	3778      	adds	r7, #120	; 0x78
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40008000 	.word	0x40008000
 8003c74:	40021000 	.word	0x40021000
 8003c78:	20000380 	.word	0x20000380
 8003c7c:	40020480 	.word	0x40020480

08003c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c84:	e7fe      	b.n	8003c84 <NMI_Handler+0x4>
	...

08003c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_Fill(Black);
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f7fe f965 	bl	8001f5c <ssd1306_Fill>
	  ssd1306_SetCursor(33, 36);
 8003c92:	2124      	movs	r1, #36	; 0x24
 8003c94:	2021      	movs	r0, #33	; 0x21
 8003c96:	f7fe faa3 	bl	80021e0 <ssd1306_SetCursor>
	  ssd1306_WriteString("rincee en", Font_6x8, White);
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <HardFault_Handler+0x38>)
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	ca06      	ldmia	r2, {r1, r2}
 8003ca0:	4808      	ldr	r0, [pc, #32]	; (8003cc4 <HardFault_Handler+0x3c>)
 8003ca2:	f7fe fa77 	bl	8002194 <ssd1306_WriteString>
	  ssd1306_SetCursor(33, 46);
 8003ca6:	212e      	movs	r1, #46	; 0x2e
 8003ca8:	2021      	movs	r0, #33	; 0x21
 8003caa:	f7fe fa99 	bl	80021e0 <ssd1306_SetCursor>
	  ssd1306_WriteString("code", Font_6x8, White);
 8003cae:	4a04      	ldr	r2, [pc, #16]	; (8003cc0 <HardFault_Handler+0x38>)
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	ca06      	ldmia	r2, {r1, r2}
 8003cb4:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <HardFault_Handler+0x40>)
 8003cb6:	f7fe fa6d 	bl	8002194 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8003cba:	f7fe f967 	bl	8001f8c <ssd1306_UpdateScreen>
	  ssd1306_Fill(Black);
 8003cbe:	e7e5      	b.n	8003c8c <HardFault_Handler+0x4>
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	0800e178 	.word	0x0800e178
 8003cc8:	0800e184 	.word	0x0800e184

08003ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cd0:	e7fe      	b.n	8003cd0 <MemManage_Handler+0x4>

08003cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cd6:	e7fe      	b.n	8003cd6 <BusFault_Handler+0x4>

08003cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cdc:	e7fe      	b.n	8003cdc <UsageFault_Handler+0x4>

08003cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d0c:	f000 f978 	bl	8004000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003d18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d1c:	f001 f812 	bl	8004d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003d20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003d24:	f001 f80e 	bl	8004d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8003d30:	4802      	ldr	r0, [pc, #8]	; (8003d3c <DMA2_Channel7_IRQHandler+0x10>)
 8003d32:	f000 fd9a 	bl	800486a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000380 	.word	0x20000380

08003d40 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003d44:	4802      	ldr	r0, [pc, #8]	; (8003d50 <LPUART1_IRQHandler+0x10>)
 8003d46:	f003 f87d 	bl	8006e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200002f8 	.word	0x200002f8

08003d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return 1;
 8003d58:	2301      	movs	r3, #1
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <_kill>:

int _kill(int pid, int sig)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d6e:	f006 fa3b 	bl	800a1e8 <__errno>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2216      	movs	r2, #22
 8003d76:	601a      	str	r2, [r3, #0]
  return -1;
 8003d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <_exit>:

void _exit (int status)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ffe7 	bl	8003d64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d96:	e7fe      	b.n	8003d96 <_exit+0x12>

08003d98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e00a      	b.n	8003dc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003daa:	f3af 8000 	nop.w
 8003dae:	4601      	mov	r1, r0
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	60ba      	str	r2, [r7, #8]
 8003db6:	b2ca      	uxtb	r2, r1
 8003db8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	dbf0      	blt.n	8003daa <_read+0x12>
  }

  return len;
 8003dc8:	687b      	ldr	r3, [r7, #4]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e009      	b.n	8003df8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	60ba      	str	r2, [r7, #8]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3301      	adds	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	dbf1      	blt.n	8003de4 <_write+0x12>
  }
  return len;
 8003e00:	687b      	ldr	r3, [r7, #4]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_close>:

int _close(int file)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e32:	605a      	str	r2, [r3, #4]
  return 0;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_isatty>:

int _isatty(int file)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e4a:	2301      	movs	r3, #1
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e7c:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <_sbrk+0x5c>)
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <_sbrk+0x60>)
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e88:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <_sbrk+0x64>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <_sbrk+0x64>)
 8003e92:	4a12      	ldr	r2, [pc, #72]	; (8003edc <_sbrk+0x68>)
 8003e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <_sbrk+0x64>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d207      	bcs.n	8003eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ea4:	f006 f9a0 	bl	800a1e8 <__errno>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	220c      	movs	r2, #12
 8003eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	e009      	b.n	8003ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <_sbrk+0x64>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eba:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <_sbrk+0x64>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	4a05      	ldr	r2, [pc, #20]	; (8003ed8 <_sbrk+0x64>)
 8003ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20010000 	.word	0x20010000
 8003ed4:	00000400 	.word	0x00000400
 8003ed8:	20000ac4 	.word	0x20000ac4
 8003edc:	20000c18 	.word	0x20000c18

08003ee0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <SystemInit+0x20>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <SystemInit+0x20>)
 8003eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <Reset_Handler>:
 8003f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f3c <LoopForever+0x2>
 8003f08:	f7ff ffea 	bl	8003ee0 <SystemInit>
 8003f0c:	480c      	ldr	r0, [pc, #48]	; (8003f40 <LoopForever+0x6>)
 8003f0e:	490d      	ldr	r1, [pc, #52]	; (8003f44 <LoopForever+0xa>)
 8003f10:	4a0d      	ldr	r2, [pc, #52]	; (8003f48 <LoopForever+0xe>)
 8003f12:	2300      	movs	r3, #0
 8003f14:	e002      	b.n	8003f1c <LoopCopyDataInit>

08003f16 <CopyDataInit>:
 8003f16:	58d4      	ldr	r4, [r2, r3]
 8003f18:	50c4      	str	r4, [r0, r3]
 8003f1a:	3304      	adds	r3, #4

08003f1c <LoopCopyDataInit>:
 8003f1c:	18c4      	adds	r4, r0, r3
 8003f1e:	428c      	cmp	r4, r1
 8003f20:	d3f9      	bcc.n	8003f16 <CopyDataInit>
 8003f22:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <LoopForever+0x12>)
 8003f24:	4c0a      	ldr	r4, [pc, #40]	; (8003f50 <LoopForever+0x16>)
 8003f26:	2300      	movs	r3, #0
 8003f28:	e001      	b.n	8003f2e <LoopFillZerobss>

08003f2a <FillZerobss>:
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	3204      	adds	r2, #4

08003f2e <LoopFillZerobss>:
 8003f2e:	42a2      	cmp	r2, r4
 8003f30:	d3fb      	bcc.n	8003f2a <FillZerobss>
 8003f32:	f006 f95f 	bl	800a1f4 <__libc_init_array>
 8003f36:	f7fd f959 	bl	80011ec <main>

08003f3a <LoopForever>:
 8003f3a:	e7fe      	b.n	8003f3a <LoopForever>
 8003f3c:	20010000 	.word	0x20010000
 8003f40:	20000000 	.word	0x20000000
 8003f44:	200001e4 	.word	0x200001e4
 8003f48:	0800f7d0 	.word	0x0800f7d0
 8003f4c:	200001e8 	.word	0x200001e8
 8003f50:	20000c18 	.word	0x20000c18

08003f54 <ADC1_IRQHandler>:
 8003f54:	e7fe      	b.n	8003f54 <ADC1_IRQHandler>

08003f56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f60:	2003      	movs	r0, #3
 8003f62:	f000 f961 	bl	8004228 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f66:	200f      	movs	r0, #15
 8003f68:	f000 f80e 	bl	8003f88 <HAL_InitTick>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	71fb      	strb	r3, [r7, #7]
 8003f76:	e001      	b.n	8003f7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f78:	f7ff fca2 	bl	80038c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003f94:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <HAL_InitTick+0x6c>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d023      	beq.n	8003fe4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003f9c:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_InitTick+0x70>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <HAL_InitTick+0x6c>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f96d 	bl	8004292 <HAL_SYSTICK_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b0f      	cmp	r3, #15
 8003fc2:	d809      	bhi.n	8003fd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fcc:	f000 f937 	bl	800423e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fd0:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <HAL_InitTick+0x74>)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e007      	b.n	8003fe8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	e004      	b.n	8003fe8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
 8003fe2:	e001      	b.n	8003fe8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000018 	.word	0x20000018
 8003ff8:	20000010 	.word	0x20000010
 8003ffc:	20000014 	.word	0x20000014

08004000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_IncTick+0x20>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_IncTick+0x24>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4413      	add	r3, r2
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <HAL_IncTick+0x24>)
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000018 	.word	0x20000018
 8004024:	20000ac8 	.word	0x20000ac8

08004028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return uwTick;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_GetTick+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000ac8 	.word	0x20000ac8

08004040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004048:	f7ff ffee 	bl	8004028 <HAL_GetTick>
 800404c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d005      	beq.n	8004066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <HAL_Delay+0x44>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004066:	bf00      	nop
 8004068:	f7ff ffde 	bl	8004028 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	429a      	cmp	r2, r3
 8004076:	d8f7      	bhi.n	8004068 <HAL_Delay+0x28>
  {
  }
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000018 	.word	0x20000018

08004088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <__NVIC_SetPriorityGrouping+0x44>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040a4:	4013      	ands	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ba:	4a04      	ldr	r2, [pc, #16]	; (80040cc <__NVIC_SetPriorityGrouping+0x44>)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	60d3      	str	r3, [r2, #12]
}
 80040c0:	bf00      	nop
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <__NVIC_GetPriorityGrouping+0x18>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	0a1b      	lsrs	r3, r3, #8
 80040da:	f003 0307 	and.w	r3, r3, #7
}
 80040de:	4618      	mov	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	db0b      	blt.n	8004116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	f003 021f 	and.w	r2, r3, #31
 8004104:	4907      	ldr	r1, [pc, #28]	; (8004124 <__NVIC_EnableIRQ+0x38>)
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2001      	movs	r0, #1
 800410e:	fa00 f202 	lsl.w	r2, r0, r2
 8004112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	e000e100 	.word	0xe000e100

08004128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	6039      	str	r1, [r7, #0]
 8004132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004138:	2b00      	cmp	r3, #0
 800413a:	db0a      	blt.n	8004152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	b2da      	uxtb	r2, r3
 8004140:	490c      	ldr	r1, [pc, #48]	; (8004174 <__NVIC_SetPriority+0x4c>)
 8004142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004146:	0112      	lsls	r2, r2, #4
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	440b      	add	r3, r1
 800414c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004150:	e00a      	b.n	8004168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4908      	ldr	r1, [pc, #32]	; (8004178 <__NVIC_SetPriority+0x50>)
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	3b04      	subs	r3, #4
 8004160:	0112      	lsls	r2, r2, #4
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	440b      	add	r3, r1
 8004166:	761a      	strb	r2, [r3, #24]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	e000e100 	.word	0xe000e100
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f1c3 0307 	rsb	r3, r3, #7
 8004196:	2b04      	cmp	r3, #4
 8004198:	bf28      	it	cs
 800419a:	2304      	movcs	r3, #4
 800419c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3304      	adds	r3, #4
 80041a2:	2b06      	cmp	r3, #6
 80041a4:	d902      	bls.n	80041ac <NVIC_EncodePriority+0x30>
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3b03      	subs	r3, #3
 80041aa:	e000      	b.n	80041ae <NVIC_EncodePriority+0x32>
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43da      	mvns	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	401a      	ands	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c4:	f04f 31ff 	mov.w	r1, #4294967295
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	43d9      	mvns	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d4:	4313      	orrs	r3, r2
         );
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3724      	adds	r7, #36	; 0x24
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f4:	d301      	bcc.n	80041fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041f6:	2301      	movs	r3, #1
 80041f8:	e00f      	b.n	800421a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <SysTick_Config+0x40>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3b01      	subs	r3, #1
 8004200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004202:	210f      	movs	r1, #15
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	f7ff ff8e 	bl	8004128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <SysTick_Config+0x40>)
 800420e:	2200      	movs	r2, #0
 8004210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <SysTick_Config+0x40>)
 8004214:	2207      	movs	r2, #7
 8004216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	e000e010 	.word	0xe000e010

08004228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff29 	bl	8004088 <__NVIC_SetPriorityGrouping>
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	4603      	mov	r3, r0
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004250:	f7ff ff3e 	bl	80040d0 <__NVIC_GetPriorityGrouping>
 8004254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	6978      	ldr	r0, [r7, #20]
 800425c:	f7ff ff8e 	bl	800417c <NVIC_EncodePriority>
 8004260:	4602      	mov	r2, r0
 8004262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ff5d 	bl	8004128 <__NVIC_SetPriority>
}
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	4603      	mov	r3, r0
 800427e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff31 	bl	80040ec <__NVIC_EnableIRQ>
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ffa2 	bl	80041e4 <SysTick_Config>
 80042a0:	4603      	mov	r3, r0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e014      	b.n	80042e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	791b      	ldrb	r3, [r3, #4]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d105      	bne.n	80042d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff fb1b 	bl	8003908 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b088      	sub	sp, #32
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	795b      	ldrb	r3, [r3, #5]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_DAC_ConfigChannel+0x1c>
 8004306:	2302      	movs	r3, #2
 8004308:	e114      	b.n	8004534 <HAL_DAC_ConfigChannel+0x246>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2202      	movs	r2, #2
 8004314:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b04      	cmp	r3, #4
 800431c:	f040 8081 	bne.w	8004422 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004320:	f7ff fe82 	bl	8004028 <HAL_GetTick>
 8004324:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d140      	bne.n	80043ae <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800432c:	e018      	b.n	8004360 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800432e:	f7ff fe7b 	bl	8004028 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d911      	bls.n	8004360 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f043 0208 	orr.w	r2, r3, #8
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2203      	movs	r2, #3
 800435a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0e9      	b.n	8004534 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1df      	bne.n	800432e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800436e:	2001      	movs	r0, #1
 8004370:	f7ff fe66 	bl	8004040 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	6992      	ldr	r2, [r2, #24]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
 800437e:	e023      	b.n	80043c8 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004380:	f7ff fe52 	bl	8004028 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d90f      	bls.n	80043ae <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004394:	2b00      	cmp	r3, #0
 8004396:	da0a      	bge.n	80043ae <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f043 0208 	orr.w	r2, r3, #8
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2203      	movs	r2, #3
 80043a8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0c2      	b.n	8004534 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	dbe3      	blt.n	8004380 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80043b8:	2001      	movs	r0, #1
 80043ba:	f7ff fe41 	bl	8004040 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	6992      	ldr	r2, [r2, #24]
 80043c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80043d8:	fa01 f303 	lsl.w	r3, r1, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	ea02 0103 	and.w	r1, r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	409a      	lsls	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	21ff      	movs	r1, #255	; 0xff
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	ea02 0103 	and.w	r1, r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	409a      	lsls	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d11d      	bne.n	8004466 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	221f      	movs	r2, #31
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2207      	movs	r2, #7
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4013      	ands	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	431a      	orrs	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6819      	ldr	r1, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43da      	mvns	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	400a      	ands	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	f640 72fc 	movw	r2, #4092	; 0xffc
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	22c0      	movs	r2, #192	; 0xc0
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43da      	mvns	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	400a      	ands	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e098      	b.n	8004680 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	4b4d      	ldr	r3, [pc, #308]	; (800468c <HAL_DMA_Init+0x150>)
 8004556:	429a      	cmp	r2, r3
 8004558:	d80f      	bhi.n	800457a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	4b4b      	ldr	r3, [pc, #300]	; (8004690 <HAL_DMA_Init+0x154>)
 8004562:	4413      	add	r3, r2
 8004564:	4a4b      	ldr	r2, [pc, #300]	; (8004694 <HAL_DMA_Init+0x158>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	009a      	lsls	r2, r3, #2
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a48      	ldr	r2, [pc, #288]	; (8004698 <HAL_DMA_Init+0x15c>)
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
 8004578:	e00e      	b.n	8004598 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	4b46      	ldr	r3, [pc, #280]	; (800469c <HAL_DMA_Init+0x160>)
 8004582:	4413      	add	r3, r2
 8004584:	4a43      	ldr	r2, [pc, #268]	; (8004694 <HAL_DMA_Init+0x158>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	009a      	lsls	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a42      	ldr	r2, [pc, #264]	; (80046a0 <HAL_DMA_Init+0x164>)
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80045ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80045bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f2:	d039      	beq.n	8004668 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	4a27      	ldr	r2, [pc, #156]	; (8004698 <HAL_DMA_Init+0x15c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d11a      	bne.n	8004634 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80045fe:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <HAL_DMA_Init+0x168>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f003 031c 	and.w	r3, r3, #28
 800460a:	210f      	movs	r1, #15
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	4924      	ldr	r1, [pc, #144]	; (80046a4 <HAL_DMA_Init+0x168>)
 8004614:	4013      	ands	r3, r2
 8004616:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004618:	4b22      	ldr	r3, [pc, #136]	; (80046a4 <HAL_DMA_Init+0x168>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004624:	f003 031c 	and.w	r3, r3, #28
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	491d      	ldr	r1, [pc, #116]	; (80046a4 <HAL_DMA_Init+0x168>)
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
 8004632:	e019      	b.n	8004668 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004634:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <HAL_DMA_Init+0x16c>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	f003 031c 	and.w	r3, r3, #28
 8004640:	210f      	movs	r1, #15
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	4917      	ldr	r1, [pc, #92]	; (80046a8 <HAL_DMA_Init+0x16c>)
 800464a:	4013      	ands	r3, r2
 800464c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800464e:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <HAL_DMA_Init+0x16c>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	f003 031c 	and.w	r3, r3, #28
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	4911      	ldr	r1, [pc, #68]	; (80046a8 <HAL_DMA_Init+0x16c>)
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	40020407 	.word	0x40020407
 8004690:	bffdfff8 	.word	0xbffdfff8
 8004694:	cccccccd 	.word	0xcccccccd
 8004698:	40020000 	.word	0x40020000
 800469c:	bffdfbf8 	.word	0xbffdfbf8
 80046a0:	40020400 	.word	0x40020400
 80046a4:	400200a8 	.word	0x400200a8
 80046a8:	400204a8 	.word	0x400204a8

080046ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_DMA_Start_IT+0x20>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e04b      	b.n	8004764 <HAL_DMA_Start_IT+0xb8>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d13a      	bne.n	8004756 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f96b 	bl	80049e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 020e 	orr.w	r2, r2, #14
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e00f      	b.n	8004744 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0204 	bic.w	r2, r2, #4
 8004732:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 020a 	orr.w	r2, r2, #10
 8004742:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e005      	b.n	8004762 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800475e:	2302      	movs	r3, #2
 8004760:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d008      	beq.n	8004796 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2204      	movs	r2, #4
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e022      	b.n	80047dc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 020e 	bic.w	r2, r2, #14
 80047a4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	f003 021c 	and.w	r2, r3, #28
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2101      	movs	r1, #1
 80047c4:	fa01 f202 	lsl.w	r2, r1, r2
 80047c8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d005      	beq.n	800480c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2204      	movs	r2, #4
 8004804:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
 800480a:	e029      	b.n	8004860 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 020e 	bic.w	r2, r2, #14
 800481a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0201 	bic.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	f003 021c 	and.w	r2, r3, #28
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f202 	lsl.w	r2, r1, r2
 800483e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
    }
  }
  return status;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	f003 031c 	and.w	r3, r3, #28
 800488a:	2204      	movs	r2, #4
 800488c:	409a      	lsls	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4013      	ands	r3, r2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d026      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x7a>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d021      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0204 	bic.w	r2, r2, #4
 80048bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	f003 021c 	and.w	r2, r3, #28
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2104      	movs	r1, #4
 80048cc:	fa01 f202 	lsl.w	r2, r1, r2
 80048d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d071      	beq.n	80049be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048e2:	e06c      	b.n	80049be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e8:	f003 031c 	and.w	r3, r3, #28
 80048ec:	2202      	movs	r2, #2
 80048ee:	409a      	lsls	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02e      	beq.n	8004956 <HAL_DMA_IRQHandler+0xec>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d029      	beq.n	8004956 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 020a 	bic.w	r2, r2, #10
 800491e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	f003 021c 	and.w	r2, r3, #28
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	2102      	movs	r1, #2
 8004936:	fa01 f202 	lsl.w	r2, r1, r2
 800493a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d038      	beq.n	80049be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004954:	e033      	b.n	80049be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	f003 031c 	and.w	r3, r3, #28
 800495e:	2208      	movs	r2, #8
 8004960:	409a      	lsls	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d02a      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x156>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d025      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 020e 	bic.w	r2, r2, #14
 8004982:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004988:	f003 021c 	and.w	r2, r3, #28
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	2101      	movs	r1, #1
 8004992:	fa01 f202 	lsl.w	r2, r1, r2
 8004996:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
}
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	f003 021c 	and.w	r2, r3, #28
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2101      	movs	r1, #1
 80049fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004a00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d108      	bne.n	8004a24 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a22:	e007      	b.n	8004a34 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a4e:	e148      	b.n	8004ce2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	2101      	movs	r1, #1
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 813a 	beq.w	8004cdc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d005      	beq.n	8004a80 <HAL_GPIO_Init+0x40>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d130      	bne.n	8004ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	f003 0201 	and.w	r2, r3, #1
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d017      	beq.n	8004b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	2203      	movs	r2, #3
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d123      	bne.n	8004b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	08da      	lsrs	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3208      	adds	r2, #8
 8004b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	220f      	movs	r2, #15
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43db      	mvns	r3, r3
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	08da      	lsrs	r2, r3, #3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3208      	adds	r2, #8
 8004b6c:	6939      	ldr	r1, [r7, #16]
 8004b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43db      	mvns	r3, r3
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4013      	ands	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 0203 	and.w	r2, r3, #3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8094 	beq.w	8004cdc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bb4:	4b52      	ldr	r3, [pc, #328]	; (8004d00 <HAL_GPIO_Init+0x2c0>)
 8004bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb8:	4a51      	ldr	r2, [pc, #324]	; (8004d00 <HAL_GPIO_Init+0x2c0>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	6613      	str	r3, [r2, #96]	; 0x60
 8004bc0:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <HAL_GPIO_Init+0x2c0>)
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004bcc:	4a4d      	ldr	r2, [pc, #308]	; (8004d04 <HAL_GPIO_Init+0x2c4>)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	089b      	lsrs	r3, r3, #2
 8004bd2:	3302      	adds	r3, #2
 8004bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	220f      	movs	r2, #15
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bf6:	d00d      	beq.n	8004c14 <HAL_GPIO_Init+0x1d4>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a43      	ldr	r2, [pc, #268]	; (8004d08 <HAL_GPIO_Init+0x2c8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <HAL_GPIO_Init+0x1d0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a42      	ldr	r2, [pc, #264]	; (8004d0c <HAL_GPIO_Init+0x2cc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d101      	bne.n	8004c0c <HAL_GPIO_Init+0x1cc>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e004      	b.n	8004c16 <HAL_GPIO_Init+0x1d6>
 8004c0c:	2307      	movs	r3, #7
 8004c0e:	e002      	b.n	8004c16 <HAL_GPIO_Init+0x1d6>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_GPIO_Init+0x1d6>
 8004c14:	2300      	movs	r3, #0
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	f002 0203 	and.w	r2, r2, #3
 8004c1c:	0092      	lsls	r2, r2, #2
 8004c1e:	4093      	lsls	r3, r2
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c26:	4937      	ldr	r1, [pc, #220]	; (8004d04 <HAL_GPIO_Init+0x2c4>)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <HAL_GPIO_Init+0x2d0>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c58:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <HAL_GPIO_Init+0x2d0>)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c5e:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <HAL_GPIO_Init+0x2d0>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c82:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <HAL_GPIO_Init+0x2d0>)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c88:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <HAL_GPIO_Init+0x2d0>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	43db      	mvns	r3, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cac:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_GPIO_Init+0x2d0>)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004cb2:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <HAL_GPIO_Init+0x2d0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cd6:	4a0e      	ldr	r2, [pc, #56]	; (8004d10 <HAL_GPIO_Init+0x2d0>)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f47f aeaf 	bne.w	8004a50 <HAL_GPIO_Init+0x10>
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40010000 	.word	0x40010000
 8004d08:	48000400 	.word	0x48000400
 8004d0c:	48000800 	.word	0x48000800
 8004d10:	40010400 	.word	0x40010400

08004d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
 8004d20:	4613      	mov	r3, r2
 8004d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d24:	787b      	ldrb	r3, [r7, #1]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d2a:	887a      	ldrh	r2, [r7, #2]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d30:	e002      	b.n	8004d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d4e:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d006      	beq.n	8004d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d5a:	4a05      	ldr	r2, [pc, #20]	; (8004d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fc f9b2 	bl	80010cc <HAL_GPIO_EXTI_Callback>
  }
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40010400 	.word	0x40010400

08004d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e08d      	b.n	8004ea2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fe fdf2 	bl	8003984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2224      	movs	r2, #36	; 0x24
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d107      	bne.n	8004dee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dea:	609a      	str	r2, [r3, #8]
 8004dec:	e006      	b.n	8004dfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004dfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d108      	bne.n	8004e16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e12:	605a      	str	r2, [r3, #4]
 8004e14:	e007      	b.n	8004e26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69d9      	ldr	r1, [r3, #28]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1a      	ldr	r2, [r3, #32]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	817b      	strh	r3, [r7, #10]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	813b      	strh	r3, [r7, #8]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	f040 80f9 	bne.w	80050c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_I2C_Mem_Write+0x34>
 8004eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d105      	bne.n	8004eec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0ed      	b.n	80050c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_I2C_Mem_Write+0x4e>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0e6      	b.n	80050c8 <HAL_I2C_Mem_Write+0x21c>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f02:	f7ff f891 	bl	8004028 <HAL_GetTick>
 8004f06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2319      	movs	r3, #25
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f955 	bl	80051c4 <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0d1      	b.n	80050c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2221      	movs	r2, #33	; 0x21
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2240      	movs	r2, #64	; 0x40
 8004f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a3a      	ldr	r2, [r7, #32]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f4c:	88f8      	ldrh	r0, [r7, #6]
 8004f4e:	893a      	ldrh	r2, [r7, #8]
 8004f50:	8979      	ldrh	r1, [r7, #10]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f8b9 	bl	80050d4 <I2C_RequestMemoryWrite>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0a9      	b.n	80050c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2bff      	cmp	r3, #255	; 0xff
 8004f7c:	d90e      	bls.n	8004f9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	22ff      	movs	r2, #255	; 0xff
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	8979      	ldrh	r1, [r7, #10]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 facf 	bl	8005538 <I2C_TransferConfig>
 8004f9a:	e00f      	b.n	8004fbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	8979      	ldrh	r1, [r7, #10]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fabe 	bl	8005538 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f94e 	bl	8005262 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e07b      	b.n	80050c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d034      	beq.n	8005074 <HAL_I2C_Mem_Write+0x1c8>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	2b00      	cmp	r3, #0
 8005010:	d130      	bne.n	8005074 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	2200      	movs	r2, #0
 800501a:	2180      	movs	r1, #128	; 0x80
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f8d1 	bl	80051c4 <I2C_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e04d      	b.n	80050c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	2bff      	cmp	r3, #255	; 0xff
 8005034:	d90e      	bls.n	8005054 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	22ff      	movs	r2, #255	; 0xff
 800503a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	b2da      	uxtb	r2, r3
 8005042:	8979      	ldrh	r1, [r7, #10]
 8005044:	2300      	movs	r3, #0
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fa73 	bl	8005538 <I2C_TransferConfig>
 8005052:	e00f      	b.n	8005074 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	b2da      	uxtb	r2, r3
 8005064:	8979      	ldrh	r1, [r7, #10]
 8005066:	2300      	movs	r3, #0
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fa62 	bl	8005538 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d19e      	bne.n	8004fbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f934 	bl	80052f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e01a      	b.n	80050c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2220      	movs	r2, #32
 8005098:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6859      	ldr	r1, [r3, #4]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <HAL_I2C_Mem_Write+0x224>)
 80050a6:	400b      	ands	r3, r1
 80050a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	fe00e800 	.word	0xfe00e800

080050d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	4608      	mov	r0, r1
 80050de:	4611      	mov	r1, r2
 80050e0:	461a      	mov	r2, r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	817b      	strh	r3, [r7, #10]
 80050e6:	460b      	mov	r3, r1
 80050e8:	813b      	strh	r3, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	8979      	ldrh	r1, [r7, #10]
 80050f4:	4b20      	ldr	r3, [pc, #128]	; (8005178 <I2C_RequestMemoryWrite+0xa4>)
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 fa1b 	bl	8005538 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	69b9      	ldr	r1, [r7, #24]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f8ab 	bl	8005262 <I2C_WaitOnTXISFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e02c      	b.n	8005170 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d105      	bne.n	8005128 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800511c:	893b      	ldrh	r3, [r7, #8]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
 8005126:	e015      	b.n	8005154 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005128:	893b      	ldrh	r3, [r7, #8]
 800512a:	0a1b      	lsrs	r3, r3, #8
 800512c:	b29b      	uxth	r3, r3
 800512e:	b2da      	uxtb	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	69b9      	ldr	r1, [r7, #24]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f891 	bl	8005262 <I2C_WaitOnTXISFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e012      	b.n	8005170 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800514a:	893b      	ldrh	r3, [r7, #8]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2200      	movs	r2, #0
 800515c:	2180      	movs	r1, #128	; 0x80
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f830 	bl	80051c4 <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	80002000 	.word	0x80002000

0800517c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d103      	bne.n	800519a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d007      	beq.n	80051b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	619a      	str	r2, [r3, #24]
  }
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	4613      	mov	r3, r2
 80051d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d4:	e031      	b.n	800523a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d02d      	beq.n	800523a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051de:	f7fe ff23 	bl	8004028 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d302      	bcc.n	80051f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d122      	bne.n	800523a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4013      	ands	r3, r2
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	bf0c      	ite	eq
 8005204:	2301      	moveq	r3, #1
 8005206:	2300      	movne	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	429a      	cmp	r2, r3
 8005210:	d113      	bne.n	800523a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	f043 0220 	orr.w	r2, r3, #32
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e00f      	b.n	800525a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4013      	ands	r3, r2
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	429a      	cmp	r2, r3
 8005248:	bf0c      	ite	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	2300      	movne	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	461a      	mov	r2, r3
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	429a      	cmp	r2, r3
 8005256:	d0be      	beq.n	80051d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800526e:	e033      	b.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f87f 	bl	8005378 <I2C_IsErrorOccurred>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e031      	b.n	80052e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d025      	beq.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528c:	f7fe fecc 	bl	8004028 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	429a      	cmp	r2, r3
 800529a:	d302      	bcc.n	80052a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d11a      	bne.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d013      	beq.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e007      	b.n	80052e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d1c4      	bne.n	8005270 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052fc:	e02f      	b.n	800535e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f838 	bl	8005378 <I2C_IsErrorOccurred>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e02d      	b.n	800536e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005312:	f7fe fe89 	bl	8004028 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	429a      	cmp	r2, r3
 8005320:	d302      	bcc.n	8005328 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11a      	bne.n	800535e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b20      	cmp	r3, #32
 8005334:	d013      	beq.n	800535e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	f043 0220 	orr.w	r2, r3, #32
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e007      	b.n	800536e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b20      	cmp	r3, #32
 800536a:	d1c8      	bne.n	80052fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d068      	beq.n	8005476 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2210      	movs	r2, #16
 80053aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053ac:	e049      	b.n	8005442 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d045      	beq.n	8005442 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053b6:	f7fe fe37 	bl	8004028 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <I2C_IsErrorOccurred+0x54>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d13a      	bne.n	8005442 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ee:	d121      	bne.n	8005434 <I2C_IsErrorOccurred+0xbc>
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f6:	d01d      	beq.n	8005434 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d01a      	beq.n	8005434 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800540c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800540e:	f7fe fe0b 	bl	8004028 <HAL_GetTick>
 8005412:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005414:	e00e      	b.n	8005434 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005416:	f7fe fe07 	bl	8004028 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b19      	cmp	r3, #25
 8005422:	d907      	bls.n	8005434 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	f043 0320 	orr.w	r3, r3, #32
 800542a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005432:	e006      	b.n	8005442 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f003 0320 	and.w	r3, r3, #32
 800543e:	2b20      	cmp	r3, #32
 8005440:	d1e9      	bne.n	8005416 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b20      	cmp	r3, #32
 800544e:	d003      	beq.n	8005458 <I2C_IsErrorOccurred+0xe0>
 8005450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0aa      	beq.n	80053ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800545c:	2b00      	cmp	r3, #0
 800545e:	d103      	bne.n	8005468 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2220      	movs	r2, #32
 8005466:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	f043 0304 	orr.w	r3, r3, #4
 800546e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00b      	beq.n	80054a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005498:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	f043 0308 	orr.w	r3, r3, #8
 80054b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	f043 0302 	orr.w	r3, r3, #2
 80054d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80054e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01c      	beq.n	8005526 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7ff fe45 	bl	800517c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <I2C_IsErrorOccurred+0x1bc>)
 80054fe:	400b      	ands	r3, r1
 8005500:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800552a:	4618      	mov	r0, r3
 800552c:	3728      	adds	r7, #40	; 0x28
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	fe00e800 	.word	0xfe00e800

08005538 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	817b      	strh	r3, [r7, #10]
 8005546:	4613      	mov	r3, r2
 8005548:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800554a:	897b      	ldrh	r3, [r7, #10]
 800554c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005550:	7a7b      	ldrb	r3, [r7, #9]
 8005552:	041b      	lsls	r3, r3, #16
 8005554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005558:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	4313      	orrs	r3, r2
 8005562:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005566:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	0d5b      	lsrs	r3, r3, #21
 8005572:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005576:	4b08      	ldr	r3, [pc, #32]	; (8005598 <I2C_TransferConfig+0x60>)
 8005578:	430b      	orrs	r3, r1
 800557a:	43db      	mvns	r3, r3
 800557c:	ea02 0103 	and.w	r1, r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	03ff63ff 	.word	0x03ff63ff

0800559c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d138      	bne.n	8005624 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055bc:	2302      	movs	r3, #2
 80055be:	e032      	b.n	8005626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2224      	movs	r2, #36	; 0x24
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e000      	b.n	8005626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
  }
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b20      	cmp	r3, #32
 8005646:	d139      	bne.n	80056bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005652:	2302      	movs	r3, #2
 8005654:	e033      	b.n	80056be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2224      	movs	r2, #36	; 0x24
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005684:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e000      	b.n	80056be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
  }
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e08f      	b.n	80057fe <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fe f9ff 	bl	8003afc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d004      	beq.n	8005720 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800571e:	d103      	bne.n	8005728 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 031e 	bic.w	r3, r3, #30
 8005726:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005730:	4293      	cmp	r3, r2
 8005732:	d005      	beq.n	8005740 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800573a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800573e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4b31      	ldr	r3, [pc, #196]	; (8005808 <HAL_LPTIM_Init+0x13c>)
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005750:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005756:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800575c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8005762:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d107      	bne.n	8005782 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800577a:	4313      	orrs	r3, r2
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d004      	beq.n	8005794 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005792:	d107      	bne.n	80057a4 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800579c:	4313      	orrs	r3, r2
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00a      	beq.n	80057c6 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80057b8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80057be:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a0e      	ldr	r2, [pc, #56]	; (800580c <HAL_LPTIM_Init+0x140>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	621a      	str	r2, [r3, #32]
 80057e8:	e004      	b.n	80057f4 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057f2:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	ff19f1fe 	.word	0xff19f1fe
 800580c:	40007c00 	.word	0x40007c00

08005810 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <HAL_PWREx_GetVoltageRange+0x18>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800581c:	4618      	mov	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40007000 	.word	0x40007000

0800582c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800583a:	d130      	bne.n	800589e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800583c:	4b23      	ldr	r3, [pc, #140]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005848:	d038      	beq.n	80058bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800584a:	4b20      	ldr	r3, [pc, #128]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005852:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005854:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005858:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800585a:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2232      	movs	r2, #50	; 0x32
 8005860:	fb02 f303 	mul.w	r3, r2, r3
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0c9b      	lsrs	r3, r3, #18
 800586c:	3301      	adds	r3, #1
 800586e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005870:	e002      	b.n	8005878 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3b01      	subs	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005878:	4b14      	ldr	r3, [pc, #80]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005884:	d102      	bne.n	800588c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f2      	bne.n	8005872 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800588c:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005898:	d110      	bne.n	80058bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e00f      	b.n	80058be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	d007      	beq.n	80058bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058ac:	4b07      	ldr	r3, [pc, #28]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058b4:	4a05      	ldr	r2, [pc, #20]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40007000 	.word	0x40007000
 80058d0:	20000010 	.word	0x20000010
 80058d4:	431bde83 	.word	0x431bde83

080058d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f000 bc02 	b.w	80060f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ec:	4b96      	ldr	r3, [pc, #600]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 030c 	and.w	r3, r3, #12
 80058f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058f6:	4b94      	ldr	r3, [pc, #592]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80e4 	beq.w	8005ad6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <HAL_RCC_OscConfig+0x4c>
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b0c      	cmp	r3, #12
 8005918:	f040 808b 	bne.w	8005a32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b01      	cmp	r3, #1
 8005920:	f040 8087 	bne.w	8005a32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005924:	4b88      	ldr	r3, [pc, #544]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_RCC_OscConfig+0x64>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e3d9      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	4b81      	ldr	r3, [pc, #516]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <HAL_RCC_OscConfig+0x7e>
 800594c:	4b7e      	ldr	r3, [pc, #504]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005954:	e005      	b.n	8005962 <HAL_RCC_OscConfig+0x8a>
 8005956:	4b7c      	ldr	r3, [pc, #496]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005962:	4293      	cmp	r3, r2
 8005964:	d223      	bcs.n	80059ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fd8c 	bl	8006488 <RCC_SetFlashLatencyFromMSIRange>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e3ba      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800597a:	4b73      	ldr	r3, [pc, #460]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a72      	ldr	r2, [pc, #456]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005980:	f043 0308 	orr.w	r3, r3, #8
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	4b70      	ldr	r3, [pc, #448]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	496d      	ldr	r1, [pc, #436]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005994:	4313      	orrs	r3, r2
 8005996:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005998:	4b6b      	ldr	r3, [pc, #428]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	4968      	ldr	r1, [pc, #416]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	604b      	str	r3, [r1, #4]
 80059ac:	e025      	b.n	80059fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059ae:	4b66      	ldr	r3, [pc, #408]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a65      	ldr	r2, [pc, #404]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 80059b4:	f043 0308 	orr.w	r3, r3, #8
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b63      	ldr	r3, [pc, #396]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	4960      	ldr	r1, [pc, #384]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059cc:	4b5e      	ldr	r3, [pc, #376]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	495b      	ldr	r1, [pc, #364]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fd4c 	bl	8006488 <RCC_SetFlashLatencyFromMSIRange>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e37a      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059fa:	f000 fc81 	bl	8006300 <HAL_RCC_GetSysClockFreq>
 80059fe:	4602      	mov	r2, r0
 8005a00:	4b51      	ldr	r3, [pc, #324]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	4950      	ldr	r1, [pc, #320]	; (8005b4c <HAL_RCC_OscConfig+0x274>)
 8005a0c:	5ccb      	ldrb	r3, [r1, r3]
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	fa22 f303 	lsr.w	r3, r2, r3
 8005a16:	4a4e      	ldr	r2, [pc, #312]	; (8005b50 <HAL_RCC_OscConfig+0x278>)
 8005a18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a1a:	4b4e      	ldr	r3, [pc, #312]	; (8005b54 <HAL_RCC_OscConfig+0x27c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe fab2 	bl	8003f88 <HAL_InitTick>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d052      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	e35e      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d032      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a3a:	4b43      	ldr	r3, [pc, #268]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a42      	ldr	r2, [pc, #264]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005a40:	f043 0301 	orr.w	r3, r3, #1
 8005a44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a46:	f7fe faef 	bl	8004028 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a4e:	f7fe faeb 	bl	8004028 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e347      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a60:	4b39      	ldr	r3, [pc, #228]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a6c:	4b36      	ldr	r3, [pc, #216]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a35      	ldr	r2, [pc, #212]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005a72:	f043 0308 	orr.w	r3, r3, #8
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	4b33      	ldr	r3, [pc, #204]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	4930      	ldr	r1, [pc, #192]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	492b      	ldr	r1, [pc, #172]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	604b      	str	r3, [r1, #4]
 8005a9e:	e01a      	b.n	8005ad6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005aa0:	4b29      	ldr	r3, [pc, #164]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a28      	ldr	r2, [pc, #160]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005aac:	f7fe fabc 	bl	8004028 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ab4:	f7fe fab8 	bl	8004028 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e314      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ac6:	4b20      	ldr	r3, [pc, #128]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x1dc>
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ad4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d073      	beq.n	8005bca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d005      	beq.n	8005af4 <HAL_RCC_OscConfig+0x21c>
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b0c      	cmp	r3, #12
 8005aec:	d10e      	bne.n	8005b0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d10b      	bne.n	8005b0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af4:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d063      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x2f0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d15f      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e2f1      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b14:	d106      	bne.n	8005b24 <HAL_RCC_OscConfig+0x24c>
 8005b16:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a0b      	ldr	r2, [pc, #44]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e025      	b.n	8005b70 <HAL_RCC_OscConfig+0x298>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b2c:	d114      	bne.n	8005b58 <HAL_RCC_OscConfig+0x280>
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a05      	ldr	r2, [pc, #20]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	4b03      	ldr	r3, [pc, #12]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a02      	ldr	r2, [pc, #8]	; (8005b48 <HAL_RCC_OscConfig+0x270>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e013      	b.n	8005b70 <HAL_RCC_OscConfig+0x298>
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	0800f0e8 	.word	0x0800f0e8
 8005b50:	20000010 	.word	0x20000010
 8005b54:	20000014 	.word	0x20000014
 8005b58:	4ba0      	ldr	r3, [pc, #640]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a9f      	ldr	r2, [pc, #636]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	4b9d      	ldr	r3, [pc, #628]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a9c      	ldr	r2, [pc, #624]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d013      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fe fa56 	bl	8004028 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b80:	f7fe fa52 	bl	8004028 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b64      	cmp	r3, #100	; 0x64
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e2ae      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b92:	4b92      	ldr	r3, [pc, #584]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0x2a8>
 8005b9e:	e014      	b.n	8005bca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fe fa42 	bl	8004028 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ba8:	f7fe fa3e 	bl	8004028 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b64      	cmp	r3, #100	; 0x64
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e29a      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bba:	4b88      	ldr	r3, [pc, #544]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x2d0>
 8005bc6:	e000      	b.n	8005bca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d060      	beq.n	8005c98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d005      	beq.n	8005be8 <HAL_RCC_OscConfig+0x310>
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b0c      	cmp	r3, #12
 8005be0:	d119      	bne.n	8005c16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d116      	bne.n	8005c16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005be8:	4b7c      	ldr	r3, [pc, #496]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d005      	beq.n	8005c00 <HAL_RCC_OscConfig+0x328>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e277      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c00:	4b76      	ldr	r3, [pc, #472]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	061b      	lsls	r3, r3, #24
 8005c0e:	4973      	ldr	r1, [pc, #460]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c14:	e040      	b.n	8005c98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d023      	beq.n	8005c66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c1e:	4b6f      	ldr	r3, [pc, #444]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a6e      	ldr	r2, [pc, #440]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2a:	f7fe f9fd 	bl	8004028 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c32:	f7fe f9f9 	bl	8004028 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e255      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c44:	4b65      	ldr	r3, [pc, #404]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c50:	4b62      	ldr	r3, [pc, #392]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	061b      	lsls	r3, r3, #24
 8005c5e:	495f      	ldr	r1, [pc, #380]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	604b      	str	r3, [r1, #4]
 8005c64:	e018      	b.n	8005c98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c66:	4b5d      	ldr	r3, [pc, #372]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a5c      	ldr	r2, [pc, #368]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c72:	f7fe f9d9 	bl	8004028 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c7a:	f7fe f9d5 	bl	8004028 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e231      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c8c:	4b53      	ldr	r3, [pc, #332]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f0      	bne.n	8005c7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d03c      	beq.n	8005d1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01c      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cac:	4b4b      	ldr	r3, [pc, #300]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb2:	4a4a      	ldr	r2, [pc, #296]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbc:	f7fe f9b4 	bl	8004028 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc4:	f7fe f9b0 	bl	8004028 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e20c      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cd6:	4b41      	ldr	r3, [pc, #260]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0ef      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x3ec>
 8005ce4:	e01b      	b.n	8005d1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ce6:	4b3d      	ldr	r3, [pc, #244]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cec:	4a3b      	ldr	r2, [pc, #236]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005cee:	f023 0301 	bic.w	r3, r3, #1
 8005cf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf6:	f7fe f997 	bl	8004028 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cfe:	f7fe f993 	bl	8004028 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e1ef      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d10:	4b32      	ldr	r3, [pc, #200]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1ef      	bne.n	8005cfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 80a6 	beq.w	8005e78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d30:	4b2a      	ldr	r3, [pc, #168]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10d      	bne.n	8005d58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3c:	4b27      	ldr	r3, [pc, #156]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d40:	4a26      	ldr	r2, [pc, #152]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d46:	6593      	str	r3, [r2, #88]	; 0x58
 8005d48:	4b24      	ldr	r3, [pc, #144]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d54:	2301      	movs	r3, #1
 8005d56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d58:	4b21      	ldr	r3, [pc, #132]	; (8005de0 <HAL_RCC_OscConfig+0x508>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d118      	bne.n	8005d96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d64:	4b1e      	ldr	r3, [pc, #120]	; (8005de0 <HAL_RCC_OscConfig+0x508>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <HAL_RCC_OscConfig+0x508>)
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d70:	f7fe f95a 	bl	8004028 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d78:	f7fe f956 	bl	8004028 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e1b2      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d8a:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <HAL_RCC_OscConfig+0x508>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0f0      	beq.n	8005d78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d108      	bne.n	8005db0 <HAL_RCC_OscConfig+0x4d8>
 8005d9e:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da4:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dae:	e029      	b.n	8005e04 <HAL_RCC_OscConfig+0x52c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	2b05      	cmp	r3, #5
 8005db6:	d115      	bne.n	8005de4 <HAL_RCC_OscConfig+0x50c>
 8005db8:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbe:	4a07      	ldr	r2, [pc, #28]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005dc0:	f043 0304 	orr.w	r3, r3, #4
 8005dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dc8:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dce:	4a03      	ldr	r2, [pc, #12]	; (8005ddc <HAL_RCC_OscConfig+0x504>)
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dd8:	e014      	b.n	8005e04 <HAL_RCC_OscConfig+0x52c>
 8005dda:	bf00      	nop
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	40007000 	.word	0x40007000
 8005de4:	4b9a      	ldr	r3, [pc, #616]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	4a99      	ldr	r2, [pc, #612]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005df4:	4b96      	ldr	r3, [pc, #600]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	4a95      	ldr	r2, [pc, #596]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005dfc:	f023 0304 	bic.w	r3, r3, #4
 8005e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d016      	beq.n	8005e3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0c:	f7fe f90c 	bl	8004028 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e12:	e00a      	b.n	8005e2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e14:	f7fe f908 	bl	8004028 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e162      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e2a:	4b89      	ldr	r3, [pc, #548]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0ed      	beq.n	8005e14 <HAL_RCC_OscConfig+0x53c>
 8005e38:	e015      	b.n	8005e66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3a:	f7fe f8f5 	bl	8004028 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e40:	e00a      	b.n	8005e58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e42:	f7fe f8f1 	bl	8004028 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e14b      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e58:	4b7d      	ldr	r3, [pc, #500]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1ed      	bne.n	8005e42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e66:	7ffb      	ldrb	r3, [r7, #31]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d105      	bne.n	8005e78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e6c:	4b78      	ldr	r3, [pc, #480]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e70:	4a77      	ldr	r2, [pc, #476]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d03c      	beq.n	8005efe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01c      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e8c:	4b70      	ldr	r3, [pc, #448]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e92:	4a6f      	ldr	r2, [pc, #444]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9c:	f7fe f8c4 	bl	8004028 <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ea2:	e008      	b.n	8005eb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ea4:	f7fe f8c0 	bl	8004028 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e11c      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eb6:	4b66      	ldr	r3, [pc, #408]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ef      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x5cc>
 8005ec4:	e01b      	b.n	8005efe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ec6:	4b62      	ldr	r3, [pc, #392]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ecc:	4a60      	ldr	r2, [pc, #384]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005ece:	f023 0301 	bic.w	r3, r3, #1
 8005ed2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed6:	f7fe f8a7 	bl	8004028 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ede:	f7fe f8a3 	bl	8004028 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e0ff      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ef0:	4b57      	ldr	r3, [pc, #348]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1ef      	bne.n	8005ede <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80f3 	beq.w	80060ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	f040 80c9 	bne.w	80060a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f12:	4b4f      	ldr	r3, [pc, #316]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f003 0203 	and.w	r2, r3, #3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d12c      	bne.n	8005f80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	3b01      	subs	r3, #1
 8005f32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d123      	bne.n	8005f80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d11b      	bne.n	8005f80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d113      	bne.n	8005f80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	3b01      	subs	r3, #1
 8005f66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d109      	bne.n	8005f80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d06b      	beq.n	8006058 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b0c      	cmp	r3, #12
 8005f84:	d062      	beq.n	800604c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f86:	4b32      	ldr	r3, [pc, #200]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e0ac      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f96:	4b2e      	ldr	r3, [pc, #184]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a2d      	ldr	r2, [pc, #180]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fa0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fa2:	f7fe f841 	bl	8004028 <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005faa:	f7fe f83d 	bl	8004028 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e099      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fbc:	4b24      	ldr	r3, [pc, #144]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1f0      	bne.n	8005faa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fc8:	4b21      	ldr	r3, [pc, #132]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	4b21      	ldr	r3, [pc, #132]	; (8006054 <HAL_RCC_OscConfig+0x77c>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005fd8:	3a01      	subs	r2, #1
 8005fda:	0112      	lsls	r2, r2, #4
 8005fdc:	4311      	orrs	r1, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fe2:	0212      	lsls	r2, r2, #8
 8005fe4:	4311      	orrs	r1, r2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fea:	0852      	lsrs	r2, r2, #1
 8005fec:	3a01      	subs	r2, #1
 8005fee:	0552      	lsls	r2, r2, #21
 8005ff0:	4311      	orrs	r1, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ff6:	0852      	lsrs	r2, r2, #1
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	0652      	lsls	r2, r2, #25
 8005ffc:	4311      	orrs	r1, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006002:	06d2      	lsls	r2, r2, #27
 8006004:	430a      	orrs	r2, r1
 8006006:	4912      	ldr	r1, [pc, #72]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8006008:	4313      	orrs	r3, r2
 800600a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800600c:	4b10      	ldr	r3, [pc, #64]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0f      	ldr	r2, [pc, #60]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8006012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006016:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006018:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a0c      	ldr	r2, [pc, #48]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 800601e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006022:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006024:	f7fe f800 	bl	8004028 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602c:	f7fd fffc 	bl	8004028 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e058      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800603e:	4b04      	ldr	r3, [pc, #16]	; (8006050 <HAL_RCC_OscConfig+0x778>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800604a:	e050      	b.n	80060ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e04f      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
 8006050:	40021000 	.word	0x40021000
 8006054:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006058:	4b27      	ldr	r3, [pc, #156]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d144      	bne.n	80060ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a23      	ldr	r2, [pc, #140]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 800606a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800606e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006070:	4b21      	ldr	r3, [pc, #132]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4a20      	ldr	r2, [pc, #128]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 8006076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800607a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800607c:	f7fd ffd4 	bl	8004028 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006084:	f7fd ffd0 	bl	8004028 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e02c      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006096:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f0      	beq.n	8006084 <HAL_RCC_OscConfig+0x7ac>
 80060a2:	e024      	b.n	80060ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	2b0c      	cmp	r3, #12
 80060a8:	d01f      	beq.n	80060ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060aa:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a12      	ldr	r2, [pc, #72]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 80060b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fd ffb7 	bl	8004028 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060be:	f7fd ffb3 	bl	8004028 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e00f      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060d0:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	4905      	ldr	r1, [pc, #20]	; (80060f8 <HAL_RCC_OscConfig+0x820>)
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_RCC_OscConfig+0x824>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	60cb      	str	r3, [r1, #12]
 80060e8:	e001      	b.n	80060ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40021000 	.word	0x40021000
 80060fc:	feeefffc 	.word	0xfeeefffc

08006100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0e7      	b.n	80062e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006114:	4b75      	ldr	r3, [pc, #468]	; (80062ec <HAL_RCC_ClockConfig+0x1ec>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d910      	bls.n	8006144 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006122:	4b72      	ldr	r3, [pc, #456]	; (80062ec <HAL_RCC_ClockConfig+0x1ec>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f023 0207 	bic.w	r2, r3, #7
 800612a:	4970      	ldr	r1, [pc, #448]	; (80062ec <HAL_RCC_ClockConfig+0x1ec>)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	4313      	orrs	r3, r2
 8006130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006132:	4b6e      	ldr	r3, [pc, #440]	; (80062ec <HAL_RCC_ClockConfig+0x1ec>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0cf      	b.n	80062e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d010      	beq.n	8006172 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	4b66      	ldr	r3, [pc, #408]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800615c:	429a      	cmp	r2, r3
 800615e:	d908      	bls.n	8006172 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006160:	4b63      	ldr	r3, [pc, #396]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4960      	ldr	r1, [pc, #384]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d04c      	beq.n	8006218 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d107      	bne.n	8006196 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006186:	4b5a      	ldr	r3, [pc, #360]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d121      	bne.n	80061d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e0a6      	b.n	80062e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d107      	bne.n	80061ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800619e:	4b54      	ldr	r3, [pc, #336]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d115      	bne.n	80061d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e09a      	b.n	80062e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d107      	bne.n	80061c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061b6:	4b4e      	ldr	r3, [pc, #312]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e08e      	b.n	80062e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061c6:	4b4a      	ldr	r3, [pc, #296]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e086      	b.n	80062e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061d6:	4b46      	ldr	r3, [pc, #280]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f023 0203 	bic.w	r2, r3, #3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	4943      	ldr	r1, [pc, #268]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061e8:	f7fd ff1e 	bl	8004028 <HAL_GetTick>
 80061ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ee:	e00a      	b.n	8006206 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061f0:	f7fd ff1a 	bl	8004028 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80061fe:	4293      	cmp	r3, r2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e06e      	b.n	80062e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006206:	4b3a      	ldr	r3, [pc, #232]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 020c 	and.w	r2, r3, #12
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	429a      	cmp	r2, r3
 8006216:	d1eb      	bne.n	80061f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d010      	beq.n	8006246 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	4b31      	ldr	r3, [pc, #196]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006230:	429a      	cmp	r2, r3
 8006232:	d208      	bcs.n	8006246 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006234:	4b2e      	ldr	r3, [pc, #184]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	492b      	ldr	r1, [pc, #172]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006242:	4313      	orrs	r3, r2
 8006244:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006246:	4b29      	ldr	r3, [pc, #164]	; (80062ec <HAL_RCC_ClockConfig+0x1ec>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d210      	bcs.n	8006276 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006254:	4b25      	ldr	r3, [pc, #148]	; (80062ec <HAL_RCC_ClockConfig+0x1ec>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f023 0207 	bic.w	r2, r3, #7
 800625c:	4923      	ldr	r1, [pc, #140]	; (80062ec <HAL_RCC_ClockConfig+0x1ec>)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	4313      	orrs	r3, r2
 8006262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006264:	4b21      	ldr	r3, [pc, #132]	; (80062ec <HAL_RCC_ClockConfig+0x1ec>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d001      	beq.n	8006276 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e036      	b.n	80062e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d008      	beq.n	8006294 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006282:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	4918      	ldr	r1, [pc, #96]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006290:	4313      	orrs	r3, r2
 8006292:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d009      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062a0:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	4910      	ldr	r1, [pc, #64]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062b4:	f000 f824 	bl	8006300 <HAL_RCC_GetSysClockFreq>
 80062b8:	4602      	mov	r2, r0
 80062ba:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <HAL_RCC_ClockConfig+0x1f0>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	091b      	lsrs	r3, r3, #4
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	490b      	ldr	r1, [pc, #44]	; (80062f4 <HAL_RCC_ClockConfig+0x1f4>)
 80062c6:	5ccb      	ldrb	r3, [r1, r3]
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	fa22 f303 	lsr.w	r3, r2, r3
 80062d0:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <HAL_RCC_ClockConfig+0x1f8>)
 80062d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062d4:	4b09      	ldr	r3, [pc, #36]	; (80062fc <HAL_RCC_ClockConfig+0x1fc>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fd fe55 	bl	8003f88 <HAL_InitTick>
 80062de:	4603      	mov	r3, r0
 80062e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80062e2:	7afb      	ldrb	r3, [r7, #11]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40022000 	.word	0x40022000
 80062f0:	40021000 	.word	0x40021000
 80062f4:	0800f0e8 	.word	0x0800f0e8
 80062f8:	20000010 	.word	0x20000010
 80062fc:	20000014 	.word	0x20000014

08006300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006300:	b480      	push	{r7}
 8006302:	b089      	sub	sp, #36	; 0x24
 8006304:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	2300      	movs	r3, #0
 800630c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800630e:	4b3e      	ldr	r3, [pc, #248]	; (8006408 <HAL_RCC_GetSysClockFreq+0x108>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 030c 	and.w	r3, r3, #12
 8006316:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006318:	4b3b      	ldr	r3, [pc, #236]	; (8006408 <HAL_RCC_GetSysClockFreq+0x108>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0303 	and.w	r3, r3, #3
 8006320:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <HAL_RCC_GetSysClockFreq+0x34>
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	2b0c      	cmp	r3, #12
 800632c:	d121      	bne.n	8006372 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d11e      	bne.n	8006372 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006334:	4b34      	ldr	r3, [pc, #208]	; (8006408 <HAL_RCC_GetSysClockFreq+0x108>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b00      	cmp	r3, #0
 800633e:	d107      	bne.n	8006350 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006340:	4b31      	ldr	r3, [pc, #196]	; (8006408 <HAL_RCC_GetSysClockFreq+0x108>)
 8006342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006346:	0a1b      	lsrs	r3, r3, #8
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	e005      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <HAL_RCC_GetSysClockFreq+0x108>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	091b      	lsrs	r3, r3, #4
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800635c:	4a2b      	ldr	r2, [pc, #172]	; (800640c <HAL_RCC_GetSysClockFreq+0x10c>)
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006364:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10d      	bne.n	8006388 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006370:	e00a      	b.n	8006388 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b04      	cmp	r3, #4
 8006376:	d102      	bne.n	800637e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006378:	4b25      	ldr	r3, [pc, #148]	; (8006410 <HAL_RCC_GetSysClockFreq+0x110>)
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	e004      	b.n	8006388 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b08      	cmp	r3, #8
 8006382:	d101      	bne.n	8006388 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006384:	4b23      	ldr	r3, [pc, #140]	; (8006414 <HAL_RCC_GetSysClockFreq+0x114>)
 8006386:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	2b0c      	cmp	r3, #12
 800638c:	d134      	bne.n	80063f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800638e:	4b1e      	ldr	r3, [pc, #120]	; (8006408 <HAL_RCC_GetSysClockFreq+0x108>)
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d003      	beq.n	80063a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d003      	beq.n	80063ac <HAL_RCC_GetSysClockFreq+0xac>
 80063a4:	e005      	b.n	80063b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80063a6:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <HAL_RCC_GetSysClockFreq+0x110>)
 80063a8:	617b      	str	r3, [r7, #20]
      break;
 80063aa:	e005      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80063ac:	4b19      	ldr	r3, [pc, #100]	; (8006414 <HAL_RCC_GetSysClockFreq+0x114>)
 80063ae:	617b      	str	r3, [r7, #20]
      break;
 80063b0:	e002      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	617b      	str	r3, [r7, #20]
      break;
 80063b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063b8:	4b13      	ldr	r3, [pc, #76]	; (8006408 <HAL_RCC_GetSysClockFreq+0x108>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	3301      	adds	r3, #1
 80063c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80063c6:	4b10      	ldr	r3, [pc, #64]	; (8006408 <HAL_RCC_GetSysClockFreq+0x108>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	fb03 f202 	mul.w	r2, r3, r2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063de:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <HAL_RCC_GetSysClockFreq+0x108>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	0e5b      	lsrs	r3, r3, #25
 80063e4:	f003 0303 	and.w	r3, r3, #3
 80063e8:	3301      	adds	r3, #1
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80063f8:	69bb      	ldr	r3, [r7, #24]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3724      	adds	r7, #36	; 0x24
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40021000 	.word	0x40021000
 800640c:	0800f100 	.word	0x0800f100
 8006410:	00f42400 	.word	0x00f42400
 8006414:	007a1200 	.word	0x007a1200

08006418 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800641c:	4b03      	ldr	r3, [pc, #12]	; (800642c <HAL_RCC_GetHCLKFreq+0x14>)
 800641e:	681b      	ldr	r3, [r3, #0]
}
 8006420:	4618      	mov	r0, r3
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000010 	.word	0x20000010

08006430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006434:	f7ff fff0 	bl	8006418 <HAL_RCC_GetHCLKFreq>
 8006438:	4602      	mov	r2, r0
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <HAL_RCC_GetPCLK1Freq+0x24>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	4904      	ldr	r1, [pc, #16]	; (8006458 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006446:	5ccb      	ldrb	r3, [r1, r3]
 8006448:	f003 031f 	and.w	r3, r3, #31
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006450:	4618      	mov	r0, r3
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40021000 	.word	0x40021000
 8006458:	0800f0f8 	.word	0x0800f0f8

0800645c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006460:	f7ff ffda 	bl	8006418 <HAL_RCC_GetHCLKFreq>
 8006464:	4602      	mov	r2, r0
 8006466:	4b06      	ldr	r3, [pc, #24]	; (8006480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	0adb      	lsrs	r3, r3, #11
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	4904      	ldr	r1, [pc, #16]	; (8006484 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006472:	5ccb      	ldrb	r3, [r1, r3]
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800647c:	4618      	mov	r0, r3
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40021000 	.word	0x40021000
 8006484:	0800f0f8 	.word	0x0800f0f8

08006488 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006490:	2300      	movs	r3, #0
 8006492:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006494:	4b2a      	ldr	r3, [pc, #168]	; (8006540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064a0:	f7ff f9b6 	bl	8005810 <HAL_PWREx_GetVoltageRange>
 80064a4:	6178      	str	r0, [r7, #20]
 80064a6:	e014      	b.n	80064d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064a8:	4b25      	ldr	r3, [pc, #148]	; (8006540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ac:	4a24      	ldr	r2, [pc, #144]	; (8006540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b2:	6593      	str	r3, [r2, #88]	; 0x58
 80064b4:	4b22      	ldr	r3, [pc, #136]	; (8006540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064c0:	f7ff f9a6 	bl	8005810 <HAL_PWREx_GetVoltageRange>
 80064c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064c6:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ca:	4a1d      	ldr	r2, [pc, #116]	; (8006540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d8:	d10b      	bne.n	80064f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b80      	cmp	r3, #128	; 0x80
 80064de:	d919      	bls.n	8006514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2ba0      	cmp	r3, #160	; 0xa0
 80064e4:	d902      	bls.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064e6:	2302      	movs	r3, #2
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	e013      	b.n	8006514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064ec:	2301      	movs	r3, #1
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	e010      	b.n	8006514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b80      	cmp	r3, #128	; 0x80
 80064f6:	d902      	bls.n	80064fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80064f8:	2303      	movs	r3, #3
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	e00a      	b.n	8006514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d102      	bne.n	800650a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006504:	2302      	movs	r3, #2
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	e004      	b.n	8006514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b70      	cmp	r3, #112	; 0x70
 800650e:	d101      	bne.n	8006514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006510:	2301      	movs	r3, #1
 8006512:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006514:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f023 0207 	bic.w	r2, r3, #7
 800651c:	4909      	ldr	r1, [pc, #36]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	429a      	cmp	r2, r3
 8006530:	d001      	beq.n	8006536 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40021000 	.word	0x40021000
 8006544:	40022000 	.word	0x40022000

08006548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006550:	2300      	movs	r3, #0
 8006552:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006554:	2300      	movs	r3, #0
 8006556:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006560:	2b00      	cmp	r3, #0
 8006562:	d031      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006568:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800656c:	d01a      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800656e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006572:	d814      	bhi.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006578:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800657c:	d10f      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800657e:	4b5d      	ldr	r3, [pc, #372]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	4a5c      	ldr	r2, [pc, #368]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006588:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800658a:	e00c      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3304      	adds	r3, #4
 8006590:	2100      	movs	r1, #0
 8006592:	4618      	mov	r0, r3
 8006594:	f000 f9ce 	bl	8006934 <RCCEx_PLLSAI1_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800659c:	e003      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	74fb      	strb	r3, [r7, #19]
      break;
 80065a2:	e000      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80065a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a6:	7cfb      	ldrb	r3, [r7, #19]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10b      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065ac:	4b51      	ldr	r3, [pc, #324]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	494e      	ldr	r1, [pc, #312]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80065c2:	e001      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c4:	7cfb      	ldrb	r3, [r7, #19]
 80065c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 809e 	beq.w	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065d6:	2300      	movs	r3, #0
 80065d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065da:	4b46      	ldr	r3, [pc, #280]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e000      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80065ea:	2300      	movs	r3, #0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00d      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065f0:	4b40      	ldr	r3, [pc, #256]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f4:	4a3f      	ldr	r2, [pc, #252]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fa:	6593      	str	r3, [r2, #88]	; 0x58
 80065fc:	4b3d      	ldr	r3, [pc, #244]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006604:	60bb      	str	r3, [r7, #8]
 8006606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006608:	2301      	movs	r3, #1
 800660a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800660c:	4b3a      	ldr	r3, [pc, #232]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a39      	ldr	r2, [pc, #228]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006618:	f7fd fd06 	bl	8004028 <HAL_GetTick>
 800661c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800661e:	e009      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006620:	f7fd fd02 	bl	8004028 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d902      	bls.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	74fb      	strb	r3, [r7, #19]
        break;
 8006632:	e005      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006634:	4b30      	ldr	r3, [pc, #192]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0ef      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006640:	7cfb      	ldrb	r3, [r7, #19]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d15a      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006646:	4b2b      	ldr	r3, [pc, #172]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006650:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01e      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	429a      	cmp	r2, r3
 8006660:	d019      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006662:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800666e:	4b21      	ldr	r3, [pc, #132]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006674:	4a1f      	ldr	r2, [pc, #124]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800667a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800667e:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006684:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800668a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800668e:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d016      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a0:	f7fd fcc2 	bl	8004028 <HAL_GetTick>
 80066a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066a6:	e00b      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066a8:	f7fd fcbe 	bl	8004028 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d902      	bls.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	74fb      	strb	r3, [r7, #19]
            break;
 80066be:	e006      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0ec      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80066ce:	7cfb      	ldrb	r3, [r7, #19]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066d4:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e2:	4904      	ldr	r1, [pc, #16]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80066ea:	e009      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066ec:	7cfb      	ldrb	r3, [r7, #19]
 80066ee:	74bb      	strb	r3, [r7, #18]
 80066f0:	e006      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80066f2:	bf00      	nop
 80066f4:	40021000 	.word	0x40021000
 80066f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fc:	7cfb      	ldrb	r3, [r7, #19]
 80066fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006700:	7c7b      	ldrb	r3, [r7, #17]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d105      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006706:	4b8a      	ldr	r3, [pc, #552]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	4a89      	ldr	r2, [pc, #548]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800670c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006710:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800671e:	4b84      	ldr	r3, [pc, #528]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006724:	f023 0203 	bic.w	r2, r3, #3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	4980      	ldr	r1, [pc, #512]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800672e:	4313      	orrs	r3, r2
 8006730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006740:	4b7b      	ldr	r3, [pc, #492]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006746:	f023 020c 	bic.w	r2, r3, #12
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	4978      	ldr	r1, [pc, #480]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006750:	4313      	orrs	r3, r2
 8006752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006762:	4b73      	ldr	r3, [pc, #460]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006768:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	496f      	ldr	r1, [pc, #444]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006784:	4b6a      	ldr	r3, [pc, #424]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	4967      	ldr	r1, [pc, #412]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067a6:	4b62      	ldr	r3, [pc, #392]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	495e      	ldr	r1, [pc, #376]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067c8:	4b59      	ldr	r3, [pc, #356]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	4956      	ldr	r1, [pc, #344]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067ea:	4b51      	ldr	r3, [pc, #324]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	494d      	ldr	r1, [pc, #308]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d028      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800680c:	4b48      	ldr	r3, [pc, #288]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	4945      	ldr	r1, [pc, #276]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800681c:	4313      	orrs	r3, r2
 800681e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800682a:	d106      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800682c:	4b40      	ldr	r3, [pc, #256]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	4a3f      	ldr	r2, [pc, #252]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006836:	60d3      	str	r3, [r2, #12]
 8006838:	e011      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006842:	d10c      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3304      	adds	r3, #4
 8006848:	2101      	movs	r1, #1
 800684a:	4618      	mov	r0, r3
 800684c:	f000 f872 	bl	8006934 <RCCEx_PLLSAI1_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006854:	7cfb      	ldrb	r3, [r7, #19]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800685a:	7cfb      	ldrb	r3, [r7, #19]
 800685c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d028      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800686a:	4b31      	ldr	r3, [pc, #196]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800686c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006870:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006878:	492d      	ldr	r1, [pc, #180]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800687a:	4313      	orrs	r3, r2
 800687c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006888:	d106      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800688a:	4b29      	ldr	r3, [pc, #164]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	4a28      	ldr	r2, [pc, #160]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006894:	60d3      	str	r3, [r2, #12]
 8006896:	e011      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068a0:	d10c      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3304      	adds	r3, #4
 80068a6:	2101      	movs	r1, #1
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f843 	bl	8006934 <RCCEx_PLLSAI1_Config>
 80068ae:	4603      	mov	r3, r0
 80068b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068b2:	7cfb      	ldrb	r3, [r7, #19]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80068b8:	7cfb      	ldrb	r3, [r7, #19]
 80068ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01c      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068c8:	4b19      	ldr	r3, [pc, #100]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d6:	4916      	ldr	r1, [pc, #88]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068e6:	d10c      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	2102      	movs	r1, #2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 f820 	bl	8006934 <RCCEx_PLLSAI1_Config>
 80068f4:	4603      	mov	r3, r0
 80068f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068f8:	7cfb      	ldrb	r3, [r7, #19]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80068fe:	7cfb      	ldrb	r3, [r7, #19]
 8006900:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800690e:	4b08      	ldr	r3, [pc, #32]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006914:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691c:	4904      	ldr	r1, [pc, #16]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800691e:	4313      	orrs	r3, r2
 8006920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006924:	7cbb      	ldrb	r3, [r7, #18]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	40021000 	.word	0x40021000

08006934 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006942:	4b74      	ldr	r3, [pc, #464]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800694e:	4b71      	ldr	r3, [pc, #452]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0203 	and.w	r2, r3, #3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d10d      	bne.n	800697a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
       ||
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006966:	4b6b      	ldr	r3, [pc, #428]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	091b      	lsrs	r3, r3, #4
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
       ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d047      	beq.n	8006a0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
 800697e:	e044      	b.n	8006a0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b03      	cmp	r3, #3
 8006986:	d018      	beq.n	80069ba <RCCEx_PLLSAI1_Config+0x86>
 8006988:	2b03      	cmp	r3, #3
 800698a:	d825      	bhi.n	80069d8 <RCCEx_PLLSAI1_Config+0xa4>
 800698c:	2b01      	cmp	r3, #1
 800698e:	d002      	beq.n	8006996 <RCCEx_PLLSAI1_Config+0x62>
 8006990:	2b02      	cmp	r3, #2
 8006992:	d009      	beq.n	80069a8 <RCCEx_PLLSAI1_Config+0x74>
 8006994:	e020      	b.n	80069d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006996:	4b5f      	ldr	r3, [pc, #380]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d11d      	bne.n	80069de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069a6:	e01a      	b.n	80069de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069a8:	4b5a      	ldr	r3, [pc, #360]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d116      	bne.n	80069e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069b8:	e013      	b.n	80069e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069ba:	4b56      	ldr	r3, [pc, #344]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10f      	bne.n	80069e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069c6:	4b53      	ldr	r3, [pc, #332]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069d6:	e006      	b.n	80069e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
      break;
 80069dc:	e004      	b.n	80069e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069de:	bf00      	nop
 80069e0:	e002      	b.n	80069e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069e2:	bf00      	nop
 80069e4:	e000      	b.n	80069e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10d      	bne.n	8006a0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069ee:	4b49      	ldr	r3, [pc, #292]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6819      	ldr	r1, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	430b      	orrs	r3, r1
 8006a04:	4943      	ldr	r1, [pc, #268]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d17c      	bne.n	8006b0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a10:	4b40      	ldr	r3, [pc, #256]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a3f      	ldr	r2, [pc, #252]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a1c:	f7fd fb04 	bl	8004028 <HAL_GetTick>
 8006a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a22:	e009      	b.n	8006a38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a24:	f7fd fb00 	bl	8004028 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d902      	bls.n	8006a38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	73fb      	strb	r3, [r7, #15]
        break;
 8006a36:	e005      	b.n	8006a44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a38:	4b36      	ldr	r3, [pc, #216]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1ef      	bne.n	8006a24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d15f      	bne.n	8006b0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d110      	bne.n	8006a72 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a50:	4b30      	ldr	r3, [pc, #192]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006a58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6892      	ldr	r2, [r2, #8]
 8006a60:	0211      	lsls	r1, r2, #8
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	68d2      	ldr	r2, [r2, #12]
 8006a66:	06d2      	lsls	r2, r2, #27
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	492a      	ldr	r1, [pc, #168]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	610b      	str	r3, [r1, #16]
 8006a70:	e027      	b.n	8006ac2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d112      	bne.n	8006a9e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a78:	4b26      	ldr	r3, [pc, #152]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6892      	ldr	r2, [r2, #8]
 8006a88:	0211      	lsls	r1, r2, #8
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6912      	ldr	r2, [r2, #16]
 8006a8e:	0852      	lsrs	r2, r2, #1
 8006a90:	3a01      	subs	r2, #1
 8006a92:	0552      	lsls	r2, r2, #21
 8006a94:	430a      	orrs	r2, r1
 8006a96:	491f      	ldr	r1, [pc, #124]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	610b      	str	r3, [r1, #16]
 8006a9c:	e011      	b.n	8006ac2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a9e:	4b1d      	ldr	r3, [pc, #116]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006aa6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6892      	ldr	r2, [r2, #8]
 8006aae:	0211      	lsls	r1, r2, #8
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6952      	ldr	r2, [r2, #20]
 8006ab4:	0852      	lsrs	r2, r2, #1
 8006ab6:	3a01      	subs	r2, #1
 8006ab8:	0652      	lsls	r2, r2, #25
 8006aba:	430a      	orrs	r2, r1
 8006abc:	4915      	ldr	r1, [pc, #84]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006ac2:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a13      	ldr	r2, [pc, #76]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006acc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ace:	f7fd faab 	bl	8004028 <HAL_GetTick>
 8006ad2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ad4:	e009      	b.n	8006aea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ad6:	f7fd faa7 	bl	8004028 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d902      	bls.n	8006aea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	73fb      	strb	r3, [r7, #15]
          break;
 8006ae8:	e005      	b.n	8006af6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aea:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0ef      	beq.n	8006ad6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006afe:	691a      	ldr	r2, [r3, #16]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	4903      	ldr	r1, [pc, #12]	; (8006b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40021000 	.word	0x40021000

08006b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e040      	b.n	8006bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fd f812 	bl	8003b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2224      	movs	r2, #36	; 0x24
 8006b44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0201 	bic.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 feb0 	bl	80078c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fc81 	bl	800746c <UART_SetConfig>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e01b      	b.n	8006bac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 ff2f 	bl	8007a08 <UART_CheckIdleState>
 8006baa:	4603      	mov	r3, r0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	; 0x28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d137      	bne.n	8006c3c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_UART_Receive_DMA+0x24>
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e030      	b.n	8006c3e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a18      	ldr	r2, [pc, #96]	; (8006c48 <HAL_UART_Receive_DMA+0x94>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d01f      	beq.n	8006c2c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d018      	beq.n	8006c2c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	613b      	str	r3, [r7, #16]
   return(result);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	623b      	str	r3, [r7, #32]
 8006c1a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	69f9      	ldr	r1, [r7, #28]
 8006c1e:	6a3a      	ldr	r2, [r7, #32]
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e6      	bne.n	8006bfa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c2c:	88fb      	ldrh	r3, [r7, #6]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 fff8 	bl	8007c28 <UART_Start_Receive_DMA>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	e000      	b.n	8006c3e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c3c:	2302      	movs	r3, #2
  }
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3728      	adds	r7, #40	; 0x28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	40008000 	.word	0x40008000

08006c4c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b0a0      	sub	sp, #128	; 0x80
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c64:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8006c68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c74:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006c78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e6      	bne.n	8006c54 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ca6:	657a      	str	r2, [r7, #84]	; 0x54
 8006ca8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006cac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e5      	bne.n	8006c86 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d118      	bne.n	8006cf4 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	f023 0310 	bic.w	r3, r3, #16
 8006cd6:	677b      	str	r3, [r7, #116]	; 0x74
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ce2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e6      	bne.n	8006cc2 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	2b80      	cmp	r3, #128	; 0x80
 8006d00:	d137      	bne.n	8006d72 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3308      	adds	r3, #8
 8006d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d18:	673b      	str	r3, [r7, #112]	; 0x70
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3308      	adds	r3, #8
 8006d20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e5      	bne.n	8006d02 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d019      	beq.n	8006d72 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d42:	2200      	movs	r2, #0
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fd fd0e 	bl	800476c <HAL_DMA_Abort>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00d      	beq.n	8006d72 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fd fe34 	bl	80049c8 <HAL_DMA_GetError>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d105      	bne.n	8006d72 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2210      	movs	r2, #16
 8006d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e063      	b.n	8006e3a <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d137      	bne.n	8006df0 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3308      	adds	r3, #8
 8006d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006da0:	61ba      	str	r2, [r7, #24]
 8006da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6979      	ldr	r1, [r7, #20]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	613b      	str	r3, [r7, #16]
   return(result);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e5      	bne.n	8006d80 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d019      	beq.n	8006df0 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fd fccf 	bl	800476c <HAL_DMA_Abort>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00d      	beq.n	8006df0 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fd fdf5 	bl	80049c8 <HAL_DMA_GetError>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d105      	bne.n	8006df0 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2210      	movs	r2, #16
 8006de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e024      	b.n	8006e3a <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	220f      	movs	r2, #15
 8006e06:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	8b1b      	ldrh	r3, [r3, #24]
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0208 	orr.w	r2, r2, #8
 8006e18:	b292      	uxth	r2, r2
 8006e1a:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3780      	adds	r7, #128	; 0x80
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b0ba      	sub	sp, #232	; 0xe8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e72:	4013      	ands	r3, r2
 8006e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d115      	bne.n	8006eac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00f      	beq.n	8006eac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e90:	f003 0320 	and.w	r3, r3, #32
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d009      	beq.n	8006eac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 82ae 	beq.w	80073fe <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
      }
      return;
 8006eaa:	e2a8      	b.n	80073fe <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 8117 	beq.w	80070e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ec2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ec6:	4b85      	ldr	r3, [pc, #532]	; (80070dc <HAL_UART_IRQHandler+0x298>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 810a 	beq.w	80070e4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d011      	beq.n	8006f00 <HAL_UART_IRQHandler+0xbc>
 8006edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2201      	movs	r2, #1
 8006eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef6:	f043 0201 	orr.w	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d011      	beq.n	8006f30 <HAL_UART_IRQHandler+0xec>
 8006f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f26:	f043 0204 	orr.w	r2, r3, #4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d011      	beq.n	8006f60 <HAL_UART_IRQHandler+0x11c>
 8006f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f56:	f043 0202 	orr.w	r2, r3, #2
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d017      	beq.n	8006f9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f92:	f043 0208 	orr.w	r2, r3, #8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <HAL_UART_IRQHandler+0x18a>
 8006fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc4:	f043 0220 	orr.w	r2, r3, #32
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8214 	beq.w	8007402 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00d      	beq.n	8007002 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007008:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d005      	beq.n	8007026 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800701a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800701e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007022:	2b00      	cmp	r3, #0
 8007024:	d04f      	beq.n	80070c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fec4 	bl	8007db4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d141      	bne.n	80070be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3308      	adds	r3, #8
 8007040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3308      	adds	r3, #8
 8007062:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007066:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800706a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007072:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800707e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1d9      	bne.n	800703a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708a:	2b00      	cmp	r3, #0
 800708c:	d013      	beq.n	80070b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007092:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <HAL_UART_IRQHandler+0x29c>)
 8007094:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709a:	4618      	mov	r0, r3
 800709c:	f7fd fba4 	bl	80047e8 <HAL_DMA_Abort_IT>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d017      	beq.n	80070d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b4:	e00f      	b.n	80070d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f9c2 	bl	8007440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070bc:	e00b      	b.n	80070d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f9be 	bl	8007440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c4:	e007      	b.n	80070d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f9ba 	bl	8007440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80070d4:	e195      	b.n	8007402 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d6:	bf00      	nop
    return;
 80070d8:	e193      	b.n	8007402 <HAL_UART_IRQHandler+0x5be>
 80070da:	bf00      	nop
 80070dc:	04000120 	.word	0x04000120
 80070e0:	08008065 	.word	0x08008065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	f040 814e 	bne.w	800738a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f2:	f003 0310 	and.w	r3, r3, #16
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8147 	beq.w	800738a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8140 	beq.w	800738a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2210      	movs	r2, #16
 8007110:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	f040 80b8 	bne.w	8007292 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800712e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 8167 	beq.w	8007406 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800713e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007142:	429a      	cmp	r2, r3
 8007144:	f080 815f 	bcs.w	8007406 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800714e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	f040 8086 	bne.w	8007270 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800717c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800718e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007192:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800719a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1da      	bne.n	8007164 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3308      	adds	r3, #8
 80071b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3308      	adds	r3, #8
 80071ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e1      	bne.n	80071ae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800720e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007210:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007214:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800721c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e3      	bne.n	80071ea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800723e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007240:	f023 0310 	bic.w	r3, r3, #16
 8007244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007252:	65bb      	str	r3, [r7, #88]	; 0x58
 8007254:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e4      	bne.n	8007230 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800726a:	4618      	mov	r0, r3
 800726c:	f7fd fa7e 	bl	800476c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007282:	b29b      	uxth	r3, r3
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	b29b      	uxth	r3, r3
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8e2 	bl	8007454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007290:	e0b9      	b.n	8007406 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800729e:	b29b      	uxth	r3, r3
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80ab 	beq.w	800740a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80072b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 80a6 	beq.w	800740a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072e0:	647b      	str	r3, [r7, #68]	; 0x44
 80072e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e4      	bne.n	80072be <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3308      	adds	r3, #8
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	623b      	str	r3, [r7, #32]
   return(result);
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3308      	adds	r3, #8
 8007314:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007318:	633a      	str	r2, [r7, #48]	; 0x30
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800731e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e3      	bne.n	80072f4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	60fb      	str	r3, [r7, #12]
   return(result);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f023 0310 	bic.w	r3, r3, #16
 8007354:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	69b9      	ldr	r1, [r7, #24]
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	617b      	str	r3, [r7, #20]
   return(result);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e4      	bne.n	8007340 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800737c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f866 	bl	8007454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007388:	e03f      	b.n	800740a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800738a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00e      	beq.n	80073b4 <HAL_UART_IRQHandler+0x570>
 8007396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800739a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d008      	beq.n	80073b4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80073aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fe99 	bl	80080e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073b2:	e02d      	b.n	8007410 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80073b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00e      	beq.n	80073de <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80073c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d008      	beq.n	80073de <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01c      	beq.n	800740e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
    }
    return;
 80073dc:	e017      	b.n	800740e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d012      	beq.n	8007410 <HAL_UART_IRQHandler+0x5cc>
 80073ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00c      	beq.n	8007410 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fe4a 	bl	8008090 <UART_EndTransmit_IT>
    return;
 80073fc:	e008      	b.n	8007410 <HAL_UART_IRQHandler+0x5cc>
      return;
 80073fe:	bf00      	nop
 8007400:	e006      	b.n	8007410 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007402:	bf00      	nop
 8007404:	e004      	b.n	8007410 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007406:	bf00      	nop
 8007408:	e002      	b.n	8007410 <HAL_UART_IRQHandler+0x5cc>
      return;
 800740a:	bf00      	nop
 800740c:	e000      	b.n	8007410 <HAL_UART_IRQHandler+0x5cc>
    return;
 800740e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007410:	37e8      	adds	r7, #232	; 0xe8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop

08007418 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800746c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007470:	b08a      	sub	sp, #40	; 0x28
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	431a      	orrs	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	431a      	orrs	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	4313      	orrs	r3, r2
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4bb4      	ldr	r3, [pc, #720]	; (800776c <UART_SetConfig+0x300>)
 800749c:	4013      	ands	r3, r2
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074a4:	430b      	orrs	r3, r1
 80074a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4aa9      	ldr	r2, [pc, #676]	; (8007770 <UART_SetConfig+0x304>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d004      	beq.n	80074d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d4:	4313      	orrs	r3, r2
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e8:	430a      	orrs	r2, r1
 80074ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4aa0      	ldr	r2, [pc, #640]	; (8007774 <UART_SetConfig+0x308>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d126      	bne.n	8007544 <UART_SetConfig+0xd8>
 80074f6:	4ba0      	ldr	r3, [pc, #640]	; (8007778 <UART_SetConfig+0x30c>)
 80074f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	2b03      	cmp	r3, #3
 8007502:	d81b      	bhi.n	800753c <UART_SetConfig+0xd0>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <UART_SetConfig+0xa0>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	0800751d 	.word	0x0800751d
 8007510:	0800752d 	.word	0x0800752d
 8007514:	08007525 	.word	0x08007525
 8007518:	08007535 	.word	0x08007535
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007522:	e080      	b.n	8007626 <UART_SetConfig+0x1ba>
 8007524:	2302      	movs	r3, #2
 8007526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800752a:	e07c      	b.n	8007626 <UART_SetConfig+0x1ba>
 800752c:	2304      	movs	r3, #4
 800752e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007532:	e078      	b.n	8007626 <UART_SetConfig+0x1ba>
 8007534:	2308      	movs	r3, #8
 8007536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800753a:	e074      	b.n	8007626 <UART_SetConfig+0x1ba>
 800753c:	2310      	movs	r3, #16
 800753e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007542:	e070      	b.n	8007626 <UART_SetConfig+0x1ba>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a8c      	ldr	r2, [pc, #560]	; (800777c <UART_SetConfig+0x310>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d138      	bne.n	80075c0 <UART_SetConfig+0x154>
 800754e:	4b8a      	ldr	r3, [pc, #552]	; (8007778 <UART_SetConfig+0x30c>)
 8007550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007554:	f003 030c 	and.w	r3, r3, #12
 8007558:	2b0c      	cmp	r3, #12
 800755a:	d82d      	bhi.n	80075b8 <UART_SetConfig+0x14c>
 800755c:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <UART_SetConfig+0xf8>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	08007599 	.word	0x08007599
 8007568:	080075b9 	.word	0x080075b9
 800756c:	080075b9 	.word	0x080075b9
 8007570:	080075b9 	.word	0x080075b9
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080075b9 	.word	0x080075b9
 800757c:	080075b9 	.word	0x080075b9
 8007580:	080075b9 	.word	0x080075b9
 8007584:	080075a1 	.word	0x080075a1
 8007588:	080075b9 	.word	0x080075b9
 800758c:	080075b9 	.word	0x080075b9
 8007590:	080075b9 	.word	0x080075b9
 8007594:	080075b1 	.word	0x080075b1
 8007598:	2300      	movs	r3, #0
 800759a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800759e:	e042      	b.n	8007626 <UART_SetConfig+0x1ba>
 80075a0:	2302      	movs	r3, #2
 80075a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075a6:	e03e      	b.n	8007626 <UART_SetConfig+0x1ba>
 80075a8:	2304      	movs	r3, #4
 80075aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ae:	e03a      	b.n	8007626 <UART_SetConfig+0x1ba>
 80075b0:	2308      	movs	r3, #8
 80075b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075b6:	e036      	b.n	8007626 <UART_SetConfig+0x1ba>
 80075b8:	2310      	movs	r3, #16
 80075ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075be:	e032      	b.n	8007626 <UART_SetConfig+0x1ba>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a6a      	ldr	r2, [pc, #424]	; (8007770 <UART_SetConfig+0x304>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d12a      	bne.n	8007620 <UART_SetConfig+0x1b4>
 80075ca:	4b6b      	ldr	r3, [pc, #428]	; (8007778 <UART_SetConfig+0x30c>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075d8:	d01a      	beq.n	8007610 <UART_SetConfig+0x1a4>
 80075da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075de:	d81b      	bhi.n	8007618 <UART_SetConfig+0x1ac>
 80075e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e4:	d00c      	beq.n	8007600 <UART_SetConfig+0x194>
 80075e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ea:	d815      	bhi.n	8007618 <UART_SetConfig+0x1ac>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <UART_SetConfig+0x18c>
 80075f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f4:	d008      	beq.n	8007608 <UART_SetConfig+0x19c>
 80075f6:	e00f      	b.n	8007618 <UART_SetConfig+0x1ac>
 80075f8:	2300      	movs	r3, #0
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075fe:	e012      	b.n	8007626 <UART_SetConfig+0x1ba>
 8007600:	2302      	movs	r3, #2
 8007602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007606:	e00e      	b.n	8007626 <UART_SetConfig+0x1ba>
 8007608:	2304      	movs	r3, #4
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800760e:	e00a      	b.n	8007626 <UART_SetConfig+0x1ba>
 8007610:	2308      	movs	r3, #8
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007616:	e006      	b.n	8007626 <UART_SetConfig+0x1ba>
 8007618:	2310      	movs	r3, #16
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800761e:	e002      	b.n	8007626 <UART_SetConfig+0x1ba>
 8007620:	2310      	movs	r3, #16
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a51      	ldr	r2, [pc, #324]	; (8007770 <UART_SetConfig+0x304>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d17a      	bne.n	8007726 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007634:	2b08      	cmp	r3, #8
 8007636:	d824      	bhi.n	8007682 <UART_SetConfig+0x216>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <UART_SetConfig+0x1d4>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007665 	.word	0x08007665
 8007644:	08007683 	.word	0x08007683
 8007648:	0800766d 	.word	0x0800766d
 800764c:	08007683 	.word	0x08007683
 8007650:	08007673 	.word	0x08007673
 8007654:	08007683 	.word	0x08007683
 8007658:	08007683 	.word	0x08007683
 800765c:	08007683 	.word	0x08007683
 8007660:	0800767b 	.word	0x0800767b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007664:	f7fe fee4 	bl	8006430 <HAL_RCC_GetPCLK1Freq>
 8007668:	61f8      	str	r0, [r7, #28]
        break;
 800766a:	e010      	b.n	800768e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800766c:	4b44      	ldr	r3, [pc, #272]	; (8007780 <UART_SetConfig+0x314>)
 800766e:	61fb      	str	r3, [r7, #28]
        break;
 8007670:	e00d      	b.n	800768e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007672:	f7fe fe45 	bl	8006300 <HAL_RCC_GetSysClockFreq>
 8007676:	61f8      	str	r0, [r7, #28]
        break;
 8007678:	e009      	b.n	800768e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800767a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800767e:	61fb      	str	r3, [r7, #28]
        break;
 8007680:	e005      	b.n	800768e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800768c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 8107 	beq.w	80078a4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	4413      	add	r3, r2
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d305      	bcc.n	80076b2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d903      	bls.n	80076ba <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076b8:	e0f4      	b.n	80078a4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	2200      	movs	r2, #0
 80076be:	461c      	mov	r4, r3
 80076c0:	4615      	mov	r5, r2
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	022b      	lsls	r3, r5, #8
 80076cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80076d0:	0222      	lsls	r2, r4, #8
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	6849      	ldr	r1, [r1, #4]
 80076d6:	0849      	lsrs	r1, r1, #1
 80076d8:	2000      	movs	r0, #0
 80076da:	4688      	mov	r8, r1
 80076dc:	4681      	mov	r9, r0
 80076de:	eb12 0a08 	adds.w	sl, r2, r8
 80076e2:	eb43 0b09 	adc.w	fp, r3, r9
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f4:	4650      	mov	r0, sl
 80076f6:	4659      	mov	r1, fp
 80076f8:	f7f9 fac6 	bl	8000c88 <__aeabi_uldivmod>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4613      	mov	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800770a:	d308      	bcc.n	800771e <UART_SetConfig+0x2b2>
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007712:	d204      	bcs.n	800771e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	60da      	str	r2, [r3, #12]
 800771c:	e0c2      	b.n	80078a4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007724:	e0be      	b.n	80078a4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800772e:	d16a      	bne.n	8007806 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007734:	2b08      	cmp	r3, #8
 8007736:	d834      	bhi.n	80077a2 <UART_SetConfig+0x336>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <UART_SetConfig+0x2d4>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007765 	.word	0x08007765
 8007744:	08007785 	.word	0x08007785
 8007748:	0800778d 	.word	0x0800778d
 800774c:	080077a3 	.word	0x080077a3
 8007750:	08007793 	.word	0x08007793
 8007754:	080077a3 	.word	0x080077a3
 8007758:	080077a3 	.word	0x080077a3
 800775c:	080077a3 	.word	0x080077a3
 8007760:	0800779b 	.word	0x0800779b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007764:	f7fe fe64 	bl	8006430 <HAL_RCC_GetPCLK1Freq>
 8007768:	61f8      	str	r0, [r7, #28]
        break;
 800776a:	e020      	b.n	80077ae <UART_SetConfig+0x342>
 800776c:	efff69f3 	.word	0xefff69f3
 8007770:	40008000 	.word	0x40008000
 8007774:	40013800 	.word	0x40013800
 8007778:	40021000 	.word	0x40021000
 800777c:	40004400 	.word	0x40004400
 8007780:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007784:	f7fe fe6a 	bl	800645c <HAL_RCC_GetPCLK2Freq>
 8007788:	61f8      	str	r0, [r7, #28]
        break;
 800778a:	e010      	b.n	80077ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800778c:	4b4c      	ldr	r3, [pc, #304]	; (80078c0 <UART_SetConfig+0x454>)
 800778e:	61fb      	str	r3, [r7, #28]
        break;
 8007790:	e00d      	b.n	80077ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007792:	f7fe fdb5 	bl	8006300 <HAL_RCC_GetSysClockFreq>
 8007796:	61f8      	str	r0, [r7, #28]
        break;
 8007798:	e009      	b.n	80077ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800779e:	61fb      	str	r3, [r7, #28]
        break;
 80077a0:	e005      	b.n	80077ae <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80077ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d077      	beq.n	80078a4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	005a      	lsls	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	441a      	add	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b0f      	cmp	r3, #15
 80077ce:	d916      	bls.n	80077fe <UART_SetConfig+0x392>
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d6:	d212      	bcs.n	80077fe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f023 030f 	bic.w	r3, r3, #15
 80077e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	085b      	lsrs	r3, r3, #1
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	8afb      	ldrh	r3, [r7, #22]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	8afa      	ldrh	r2, [r7, #22]
 80077fa:	60da      	str	r2, [r3, #12]
 80077fc:	e052      	b.n	80078a4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007804:	e04e      	b.n	80078a4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007806:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800780a:	2b08      	cmp	r3, #8
 800780c:	d827      	bhi.n	800785e <UART_SetConfig+0x3f2>
 800780e:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <UART_SetConfig+0x3a8>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007839 	.word	0x08007839
 8007818:	08007841 	.word	0x08007841
 800781c:	08007849 	.word	0x08007849
 8007820:	0800785f 	.word	0x0800785f
 8007824:	0800784f 	.word	0x0800784f
 8007828:	0800785f 	.word	0x0800785f
 800782c:	0800785f 	.word	0x0800785f
 8007830:	0800785f 	.word	0x0800785f
 8007834:	08007857 	.word	0x08007857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007838:	f7fe fdfa 	bl	8006430 <HAL_RCC_GetPCLK1Freq>
 800783c:	61f8      	str	r0, [r7, #28]
        break;
 800783e:	e014      	b.n	800786a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007840:	f7fe fe0c 	bl	800645c <HAL_RCC_GetPCLK2Freq>
 8007844:	61f8      	str	r0, [r7, #28]
        break;
 8007846:	e010      	b.n	800786a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007848:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <UART_SetConfig+0x454>)
 800784a:	61fb      	str	r3, [r7, #28]
        break;
 800784c:	e00d      	b.n	800786a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800784e:	f7fe fd57 	bl	8006300 <HAL_RCC_GetSysClockFreq>
 8007852:	61f8      	str	r0, [r7, #28]
        break;
 8007854:	e009      	b.n	800786a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800785a:	61fb      	str	r3, [r7, #28]
        break;
 800785c:	e005      	b.n	800786a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007868:	bf00      	nop
    }

    if (pclk != 0U)
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d019      	beq.n	80078a4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	085a      	lsrs	r2, r3, #1
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	441a      	add	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007882:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b0f      	cmp	r3, #15
 8007888:	d909      	bls.n	800789e <UART_SetConfig+0x432>
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007890:	d205      	bcs.n	800789e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60da      	str	r2, [r3, #12]
 800789c:	e002      	b.n	80078a4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3728      	adds	r7, #40	; 0x28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078be:	bf00      	nop
 80078c0:	00f42400 	.word	0x00f42400

080078c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	f003 0304 	and.w	r3, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01a      	beq.n	80079da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c2:	d10a      	bne.n	80079da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	605a      	str	r2, [r3, #4]
  }
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b098      	sub	sp, #96	; 0x60
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a18:	f7fc fb06 	bl	8004028 <HAL_GetTick>
 8007a1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d12e      	bne.n	8007a8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a34:	2200      	movs	r2, #0
 8007a36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f88c 	bl	8007b58 <UART_WaitOnFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d021      	beq.n	8007a8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a64:	647b      	str	r3, [r7, #68]	; 0x44
 8007a66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e6      	bne.n	8007a46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e062      	b.n	8007b50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d149      	bne.n	8007b2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f856 	bl	8007b58 <UART_WaitOnFlagUntilTimeout>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d03c      	beq.n	8007b2c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	623b      	str	r3, [r7, #32]
   return(result);
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e6      	bne.n	8007ab2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0301 	bic.w	r3, r3, #1
 8007afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3308      	adds	r3, #8
 8007b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b04:	61fa      	str	r2, [r7, #28]
 8007b06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	69b9      	ldr	r1, [r7, #24]
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	617b      	str	r3, [r7, #20]
   return(result);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e5      	bne.n	8007ae4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e011      	b.n	8007b50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3758      	adds	r7, #88	; 0x58
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	4613      	mov	r3, r2
 8007b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b68:	e049      	b.n	8007bfe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b70:	d045      	beq.n	8007bfe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b72:	f7fc fa59 	bl	8004028 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d302      	bcc.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e048      	b.n	8007c1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d031      	beq.n	8007bfe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d110      	bne.n	8007bca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2208      	movs	r2, #8
 8007bae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f8ff 	bl	8007db4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2208      	movs	r2, #8
 8007bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e029      	b.n	8007c1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd8:	d111      	bne.n	8007bfe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f8e5 	bl	8007db4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e00f      	b.n	8007c1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69da      	ldr	r2, [r3, #28]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4013      	ands	r3, r2
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	bf0c      	ite	eq
 8007c0e:	2301      	moveq	r3, #1
 8007c10:	2300      	movne	r3, #0
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	461a      	mov	r2, r3
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d0a6      	beq.n	8007b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b096      	sub	sp, #88	; 0x58
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	88fa      	ldrh	r2, [r7, #6]
 8007c40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2222      	movs	r2, #34	; 0x22
 8007c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d028      	beq.n	8007cae <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c60:	4a3e      	ldr	r2, [pc, #248]	; (8007d5c <UART_Start_Receive_DMA+0x134>)
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c68:	4a3d      	ldr	r2, [pc, #244]	; (8007d60 <UART_Start_Receive_DMA+0x138>)
 8007c6a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c70:	4a3c      	ldr	r2, [pc, #240]	; (8007d64 <UART_Start_Receive_DMA+0x13c>)
 8007c72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c78:	2200      	movs	r2, #0
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3324      	adds	r3, #36	; 0x24
 8007c86:	4619      	mov	r1, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	88fb      	ldrh	r3, [r7, #6]
 8007c90:	f7fc fd0c 	bl	80046ac <HAL_DMA_Start_IT>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d009      	beq.n	8007cae <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2210      	movs	r2, #16
 8007c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e051      	b.n	8007d52 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d018      	beq.n	8007ce8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cca:	657b      	str	r3, [r7, #84]	; 0x54
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cd6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e6      	bne.n	8007cb6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3308      	adds	r3, #8
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d08:	637a      	str	r2, [r7, #52]	; 0x34
 8007d0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e5      	bne.n	8007ce8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3308      	adds	r3, #8
 8007d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3308      	adds	r3, #8
 8007d3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d3c:	623a      	str	r2, [r7, #32]
 8007d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	69f9      	ldr	r1, [r7, #28]
 8007d42:	6a3a      	ldr	r2, [r7, #32]
 8007d44:	e841 2300 	strex	r3, r2, [r1]
 8007d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e5      	bne.n	8007d1c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3758      	adds	r7, #88	; 0x58
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	08007e7d 	.word	0x08007e7d
 8007d60:	08007fa9 	.word	0x08007fa9
 8007d64:	08007fe7 	.word	0x08007fe7

08007d68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b089      	sub	sp, #36	; 0x24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d84:	61fb      	str	r3, [r7, #28]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6979      	ldr	r1, [r7, #20]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e6      	bne.n	8007d70 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007da8:	bf00      	nop
 8007daa:	3724      	adds	r7, #36	; 0x24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b095      	sub	sp, #84	; 0x54
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dda:	643b      	str	r3, [r7, #64]	; 0x40
 8007ddc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e6      	bne.n	8007dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3308      	adds	r3, #8
 8007df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e5      	bne.n	8007dee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d118      	bne.n	8007e5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f023 0310 	bic.w	r3, r3, #16
 8007e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e48:	61bb      	str	r3, [r7, #24]
 8007e4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6979      	ldr	r1, [r7, #20]
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	613b      	str	r3, [r7, #16]
   return(result);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e6      	bne.n	8007e2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e70:	bf00      	nop
 8007e72:	3754      	adds	r7, #84	; 0x54
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b09c      	sub	sp, #112	; 0x70
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e88:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0320 	and.w	r3, r3, #32
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d171      	bne.n	8007f7c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ec0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e6      	bne.n	8007ea0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee4:	f023 0301 	bic.w	r3, r3, #1
 8007ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8007eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ef2:	647a      	str	r2, [r7, #68]	; 0x44
 8007ef4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e5      	bne.n	8007ed2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	623b      	str	r3, [r7, #32]
   return(result);
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3308      	adds	r3, #8
 8007f24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f26:	633a      	str	r2, [r7, #48]	; 0x30
 8007f28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e5      	bne.n	8007f06 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d118      	bne.n	8007f7c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0310 	bic.w	r3, r3, #16
 8007f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	69b9      	ldr	r1, [r7, #24]
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	617b      	str	r3, [r7, #20]
   return(result);
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e6      	bne.n	8007f4a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7e:	2200      	movs	r2, #0
 8007f80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d107      	bne.n	8007f9a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f90:	4619      	mov	r1, r3
 8007f92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f94:	f7ff fa5e 	bl	8007454 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f98:	e002      	b.n	8007fa0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007f9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f9c:	f7f9 f8b8 	bl	8001110 <HAL_UART_RxCpltCallback>
}
 8007fa0:	bf00      	nop
 8007fa2:	3770      	adds	r7, #112	; 0x70
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d109      	bne.n	8007fd8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fca:	085b      	lsrs	r3, r3, #1
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	4619      	mov	r1, r3
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fa3f 	bl	8007454 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fd6:	e002      	b.n	8007fde <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff fa27 	bl	800742c <HAL_UART_RxHalfCpltCallback>
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b086      	sub	sp, #24
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008000:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800c:	2b80      	cmp	r3, #128	; 0x80
 800800e:	d109      	bne.n	8008024 <UART_DMAError+0x3e>
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2b21      	cmp	r3, #33	; 0x21
 8008014:	d106      	bne.n	8008024 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2200      	movs	r2, #0
 800801a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800801e:	6978      	ldr	r0, [r7, #20]
 8008020:	f7ff fea2 	bl	8007d68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802e:	2b40      	cmp	r3, #64	; 0x40
 8008030:	d109      	bne.n	8008046 <UART_DMAError+0x60>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b22      	cmp	r3, #34	; 0x22
 8008036:	d106      	bne.n	8008046 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2200      	movs	r2, #0
 800803c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008040:	6978      	ldr	r0, [r7, #20]
 8008042:	f7ff feb7 	bl	8007db4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800804c:	f043 0210 	orr.w	r2, r3, #16
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008056:	6978      	ldr	r0, [r7, #20]
 8008058:	f7ff f9f2 	bl	8007440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800805c:	bf00      	nop
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff f9dc 	bl	8007440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ac:	61fb      	str	r3, [r7, #28]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	6979      	ldr	r1, [r7, #20]
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	613b      	str	r3, [r7, #16]
   return(result);
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e6      	bne.n	8008098 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff f99e 	bl	8007418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080dc:	bf00      	nop
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <malloc>:
 80080f8:	4b02      	ldr	r3, [pc, #8]	; (8008104 <malloc+0xc>)
 80080fa:	4601      	mov	r1, r0
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	f000 b82b 	b.w	8008158 <_malloc_r>
 8008102:	bf00      	nop
 8008104:	200001e0 	.word	0x200001e0

08008108 <free>:
 8008108:	4b02      	ldr	r3, [pc, #8]	; (8008114 <free+0xc>)
 800810a:	4601      	mov	r1, r0
 800810c:	6818      	ldr	r0, [r3, #0]
 800810e:	f002 bf55 	b.w	800afbc <_free_r>
 8008112:	bf00      	nop
 8008114:	200001e0 	.word	0x200001e0

08008118 <sbrk_aligned>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	4e0e      	ldr	r6, [pc, #56]	; (8008154 <sbrk_aligned+0x3c>)
 800811c:	460c      	mov	r4, r1
 800811e:	6831      	ldr	r1, [r6, #0]
 8008120:	4605      	mov	r5, r0
 8008122:	b911      	cbnz	r1, 800812a <sbrk_aligned+0x12>
 8008124:	f002 f83e 	bl	800a1a4 <_sbrk_r>
 8008128:	6030      	str	r0, [r6, #0]
 800812a:	4621      	mov	r1, r4
 800812c:	4628      	mov	r0, r5
 800812e:	f002 f839 	bl	800a1a4 <_sbrk_r>
 8008132:	1c43      	adds	r3, r0, #1
 8008134:	d00a      	beq.n	800814c <sbrk_aligned+0x34>
 8008136:	1cc4      	adds	r4, r0, #3
 8008138:	f024 0403 	bic.w	r4, r4, #3
 800813c:	42a0      	cmp	r0, r4
 800813e:	d007      	beq.n	8008150 <sbrk_aligned+0x38>
 8008140:	1a21      	subs	r1, r4, r0
 8008142:	4628      	mov	r0, r5
 8008144:	f002 f82e 	bl	800a1a4 <_sbrk_r>
 8008148:	3001      	adds	r0, #1
 800814a:	d101      	bne.n	8008150 <sbrk_aligned+0x38>
 800814c:	f04f 34ff 	mov.w	r4, #4294967295
 8008150:	4620      	mov	r0, r4
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	20000ad0 	.word	0x20000ad0

08008158 <_malloc_r>:
 8008158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800815c:	1ccd      	adds	r5, r1, #3
 800815e:	f025 0503 	bic.w	r5, r5, #3
 8008162:	3508      	adds	r5, #8
 8008164:	2d0c      	cmp	r5, #12
 8008166:	bf38      	it	cc
 8008168:	250c      	movcc	r5, #12
 800816a:	2d00      	cmp	r5, #0
 800816c:	4607      	mov	r7, r0
 800816e:	db01      	blt.n	8008174 <_malloc_r+0x1c>
 8008170:	42a9      	cmp	r1, r5
 8008172:	d905      	bls.n	8008180 <_malloc_r+0x28>
 8008174:	230c      	movs	r3, #12
 8008176:	603b      	str	r3, [r7, #0]
 8008178:	2600      	movs	r6, #0
 800817a:	4630      	mov	r0, r6
 800817c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008180:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008254 <_malloc_r+0xfc>
 8008184:	f000 f868 	bl	8008258 <__malloc_lock>
 8008188:	f8d8 3000 	ldr.w	r3, [r8]
 800818c:	461c      	mov	r4, r3
 800818e:	bb5c      	cbnz	r4, 80081e8 <_malloc_r+0x90>
 8008190:	4629      	mov	r1, r5
 8008192:	4638      	mov	r0, r7
 8008194:	f7ff ffc0 	bl	8008118 <sbrk_aligned>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	4604      	mov	r4, r0
 800819c:	d155      	bne.n	800824a <_malloc_r+0xf2>
 800819e:	f8d8 4000 	ldr.w	r4, [r8]
 80081a2:	4626      	mov	r6, r4
 80081a4:	2e00      	cmp	r6, #0
 80081a6:	d145      	bne.n	8008234 <_malloc_r+0xdc>
 80081a8:	2c00      	cmp	r4, #0
 80081aa:	d048      	beq.n	800823e <_malloc_r+0xe6>
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	4631      	mov	r1, r6
 80081b0:	4638      	mov	r0, r7
 80081b2:	eb04 0903 	add.w	r9, r4, r3
 80081b6:	f001 fff5 	bl	800a1a4 <_sbrk_r>
 80081ba:	4581      	cmp	r9, r0
 80081bc:	d13f      	bne.n	800823e <_malloc_r+0xe6>
 80081be:	6821      	ldr	r1, [r4, #0]
 80081c0:	1a6d      	subs	r5, r5, r1
 80081c2:	4629      	mov	r1, r5
 80081c4:	4638      	mov	r0, r7
 80081c6:	f7ff ffa7 	bl	8008118 <sbrk_aligned>
 80081ca:	3001      	adds	r0, #1
 80081cc:	d037      	beq.n	800823e <_malloc_r+0xe6>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	442b      	add	r3, r5
 80081d2:	6023      	str	r3, [r4, #0]
 80081d4:	f8d8 3000 	ldr.w	r3, [r8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d038      	beq.n	800824e <_malloc_r+0xf6>
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	42a2      	cmp	r2, r4
 80081e0:	d12b      	bne.n	800823a <_malloc_r+0xe2>
 80081e2:	2200      	movs	r2, #0
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	e00f      	b.n	8008208 <_malloc_r+0xb0>
 80081e8:	6822      	ldr	r2, [r4, #0]
 80081ea:	1b52      	subs	r2, r2, r5
 80081ec:	d41f      	bmi.n	800822e <_malloc_r+0xd6>
 80081ee:	2a0b      	cmp	r2, #11
 80081f0:	d917      	bls.n	8008222 <_malloc_r+0xca>
 80081f2:	1961      	adds	r1, r4, r5
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	6025      	str	r5, [r4, #0]
 80081f8:	bf18      	it	ne
 80081fa:	6059      	strne	r1, [r3, #4]
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	bf08      	it	eq
 8008200:	f8c8 1000 	streq.w	r1, [r8]
 8008204:	5162      	str	r2, [r4, r5]
 8008206:	604b      	str	r3, [r1, #4]
 8008208:	4638      	mov	r0, r7
 800820a:	f104 060b 	add.w	r6, r4, #11
 800820e:	f000 f829 	bl	8008264 <__malloc_unlock>
 8008212:	f026 0607 	bic.w	r6, r6, #7
 8008216:	1d23      	adds	r3, r4, #4
 8008218:	1af2      	subs	r2, r6, r3
 800821a:	d0ae      	beq.n	800817a <_malloc_r+0x22>
 800821c:	1b9b      	subs	r3, r3, r6
 800821e:	50a3      	str	r3, [r4, r2]
 8008220:	e7ab      	b.n	800817a <_malloc_r+0x22>
 8008222:	42a3      	cmp	r3, r4
 8008224:	6862      	ldr	r2, [r4, #4]
 8008226:	d1dd      	bne.n	80081e4 <_malloc_r+0x8c>
 8008228:	f8c8 2000 	str.w	r2, [r8]
 800822c:	e7ec      	b.n	8008208 <_malloc_r+0xb0>
 800822e:	4623      	mov	r3, r4
 8008230:	6864      	ldr	r4, [r4, #4]
 8008232:	e7ac      	b.n	800818e <_malloc_r+0x36>
 8008234:	4634      	mov	r4, r6
 8008236:	6876      	ldr	r6, [r6, #4]
 8008238:	e7b4      	b.n	80081a4 <_malloc_r+0x4c>
 800823a:	4613      	mov	r3, r2
 800823c:	e7cc      	b.n	80081d8 <_malloc_r+0x80>
 800823e:	230c      	movs	r3, #12
 8008240:	603b      	str	r3, [r7, #0]
 8008242:	4638      	mov	r0, r7
 8008244:	f000 f80e 	bl	8008264 <__malloc_unlock>
 8008248:	e797      	b.n	800817a <_malloc_r+0x22>
 800824a:	6025      	str	r5, [r4, #0]
 800824c:	e7dc      	b.n	8008208 <_malloc_r+0xb0>
 800824e:	605b      	str	r3, [r3, #4]
 8008250:	deff      	udf	#255	; 0xff
 8008252:	bf00      	nop
 8008254:	20000acc 	.word	0x20000acc

08008258 <__malloc_lock>:
 8008258:	4801      	ldr	r0, [pc, #4]	; (8008260 <__malloc_lock+0x8>)
 800825a:	f001 bff0 	b.w	800a23e <__retarget_lock_acquire_recursive>
 800825e:	bf00      	nop
 8008260:	20000c14 	.word	0x20000c14

08008264 <__malloc_unlock>:
 8008264:	4801      	ldr	r0, [pc, #4]	; (800826c <__malloc_unlock+0x8>)
 8008266:	f001 bfeb 	b.w	800a240 <__retarget_lock_release_recursive>
 800826a:	bf00      	nop
 800826c:	20000c14 	.word	0x20000c14

08008270 <sulp>:
 8008270:	b570      	push	{r4, r5, r6, lr}
 8008272:	4604      	mov	r4, r0
 8008274:	460d      	mov	r5, r1
 8008276:	ec45 4b10 	vmov	d0, r4, r5
 800827a:	4616      	mov	r6, r2
 800827c:	f003 fdc0 	bl	800be00 <__ulp>
 8008280:	ec51 0b10 	vmov	r0, r1, d0
 8008284:	b17e      	cbz	r6, 80082a6 <sulp+0x36>
 8008286:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800828a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800828e:	2b00      	cmp	r3, #0
 8008290:	dd09      	ble.n	80082a6 <sulp+0x36>
 8008292:	051b      	lsls	r3, r3, #20
 8008294:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008298:	2400      	movs	r4, #0
 800829a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800829e:	4622      	mov	r2, r4
 80082a0:	462b      	mov	r3, r5
 80082a2:	f7f8 f9a9 	bl	80005f8 <__aeabi_dmul>
 80082a6:	bd70      	pop	{r4, r5, r6, pc}

080082a8 <_strtod_l>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	ed2d 8b02 	vpush	{d8}
 80082b0:	b09b      	sub	sp, #108	; 0x6c
 80082b2:	4604      	mov	r4, r0
 80082b4:	9213      	str	r2, [sp, #76]	; 0x4c
 80082b6:	2200      	movs	r2, #0
 80082b8:	9216      	str	r2, [sp, #88]	; 0x58
 80082ba:	460d      	mov	r5, r1
 80082bc:	f04f 0800 	mov.w	r8, #0
 80082c0:	f04f 0900 	mov.w	r9, #0
 80082c4:	460a      	mov	r2, r1
 80082c6:	9215      	str	r2, [sp, #84]	; 0x54
 80082c8:	7811      	ldrb	r1, [r2, #0]
 80082ca:	292b      	cmp	r1, #43	; 0x2b
 80082cc:	d04c      	beq.n	8008368 <_strtod_l+0xc0>
 80082ce:	d83a      	bhi.n	8008346 <_strtod_l+0x9e>
 80082d0:	290d      	cmp	r1, #13
 80082d2:	d834      	bhi.n	800833e <_strtod_l+0x96>
 80082d4:	2908      	cmp	r1, #8
 80082d6:	d834      	bhi.n	8008342 <_strtod_l+0x9a>
 80082d8:	2900      	cmp	r1, #0
 80082da:	d03d      	beq.n	8008358 <_strtod_l+0xb0>
 80082dc:	2200      	movs	r2, #0
 80082de:	920a      	str	r2, [sp, #40]	; 0x28
 80082e0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80082e2:	7832      	ldrb	r2, [r6, #0]
 80082e4:	2a30      	cmp	r2, #48	; 0x30
 80082e6:	f040 80b4 	bne.w	8008452 <_strtod_l+0x1aa>
 80082ea:	7872      	ldrb	r2, [r6, #1]
 80082ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80082f0:	2a58      	cmp	r2, #88	; 0x58
 80082f2:	d170      	bne.n	80083d6 <_strtod_l+0x12e>
 80082f4:	9302      	str	r3, [sp, #8]
 80082f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	ab16      	add	r3, sp, #88	; 0x58
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	4a8e      	ldr	r2, [pc, #568]	; (8008538 <_strtod_l+0x290>)
 8008300:	ab17      	add	r3, sp, #92	; 0x5c
 8008302:	a915      	add	r1, sp, #84	; 0x54
 8008304:	4620      	mov	r0, r4
 8008306:	f002 ff0d 	bl	800b124 <__gethex>
 800830a:	f010 070f 	ands.w	r7, r0, #15
 800830e:	4605      	mov	r5, r0
 8008310:	d005      	beq.n	800831e <_strtod_l+0x76>
 8008312:	2f06      	cmp	r7, #6
 8008314:	d12a      	bne.n	800836c <_strtod_l+0xc4>
 8008316:	3601      	adds	r6, #1
 8008318:	2300      	movs	r3, #0
 800831a:	9615      	str	r6, [sp, #84]	; 0x54
 800831c:	930a      	str	r3, [sp, #40]	; 0x28
 800831e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008320:	2b00      	cmp	r3, #0
 8008322:	f040 857f 	bne.w	8008e24 <_strtod_l+0xb7c>
 8008326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008328:	b1db      	cbz	r3, 8008362 <_strtod_l+0xba>
 800832a:	4642      	mov	r2, r8
 800832c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008330:	ec43 2b10 	vmov	d0, r2, r3
 8008334:	b01b      	add	sp, #108	; 0x6c
 8008336:	ecbd 8b02 	vpop	{d8}
 800833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833e:	2920      	cmp	r1, #32
 8008340:	d1cc      	bne.n	80082dc <_strtod_l+0x34>
 8008342:	3201      	adds	r2, #1
 8008344:	e7bf      	b.n	80082c6 <_strtod_l+0x1e>
 8008346:	292d      	cmp	r1, #45	; 0x2d
 8008348:	d1c8      	bne.n	80082dc <_strtod_l+0x34>
 800834a:	2101      	movs	r1, #1
 800834c:	910a      	str	r1, [sp, #40]	; 0x28
 800834e:	1c51      	adds	r1, r2, #1
 8008350:	9115      	str	r1, [sp, #84]	; 0x54
 8008352:	7852      	ldrb	r2, [r2, #1]
 8008354:	2a00      	cmp	r2, #0
 8008356:	d1c3      	bne.n	80082e0 <_strtod_l+0x38>
 8008358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800835a:	9515      	str	r5, [sp, #84]	; 0x54
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 855f 	bne.w	8008e20 <_strtod_l+0xb78>
 8008362:	4642      	mov	r2, r8
 8008364:	464b      	mov	r3, r9
 8008366:	e7e3      	b.n	8008330 <_strtod_l+0x88>
 8008368:	2100      	movs	r1, #0
 800836a:	e7ef      	b.n	800834c <_strtod_l+0xa4>
 800836c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800836e:	b13a      	cbz	r2, 8008380 <_strtod_l+0xd8>
 8008370:	2135      	movs	r1, #53	; 0x35
 8008372:	a818      	add	r0, sp, #96	; 0x60
 8008374:	f003 fe41 	bl	800bffa <__copybits>
 8008378:	9916      	ldr	r1, [sp, #88]	; 0x58
 800837a:	4620      	mov	r0, r4
 800837c:	f003 fa14 	bl	800b7a8 <_Bfree>
 8008380:	3f01      	subs	r7, #1
 8008382:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008384:	2f04      	cmp	r7, #4
 8008386:	d806      	bhi.n	8008396 <_strtod_l+0xee>
 8008388:	e8df f007 	tbb	[pc, r7]
 800838c:	201d0314 	.word	0x201d0314
 8008390:	14          	.byte	0x14
 8008391:	00          	.byte	0x00
 8008392:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008396:	05e9      	lsls	r1, r5, #23
 8008398:	bf48      	it	mi
 800839a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800839e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083a2:	0d1b      	lsrs	r3, r3, #20
 80083a4:	051b      	lsls	r3, r3, #20
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1b9      	bne.n	800831e <_strtod_l+0x76>
 80083aa:	f001 ff1d 	bl	800a1e8 <__errno>
 80083ae:	2322      	movs	r3, #34	; 0x22
 80083b0:	6003      	str	r3, [r0, #0]
 80083b2:	e7b4      	b.n	800831e <_strtod_l+0x76>
 80083b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80083b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80083bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80083c4:	e7e7      	b.n	8008396 <_strtod_l+0xee>
 80083c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008540 <_strtod_l+0x298>
 80083ca:	e7e4      	b.n	8008396 <_strtod_l+0xee>
 80083cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80083d0:	f04f 38ff 	mov.w	r8, #4294967295
 80083d4:	e7df      	b.n	8008396 <_strtod_l+0xee>
 80083d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	9215      	str	r2, [sp, #84]	; 0x54
 80083dc:	785b      	ldrb	r3, [r3, #1]
 80083de:	2b30      	cmp	r3, #48	; 0x30
 80083e0:	d0f9      	beq.n	80083d6 <_strtod_l+0x12e>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d09b      	beq.n	800831e <_strtod_l+0x76>
 80083e6:	2301      	movs	r3, #1
 80083e8:	f04f 0a00 	mov.w	sl, #0
 80083ec:	9304      	str	r3, [sp, #16]
 80083ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80083f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80083f6:	46d3      	mov	fp, sl
 80083f8:	220a      	movs	r2, #10
 80083fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80083fc:	7806      	ldrb	r6, [r0, #0]
 80083fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008402:	b2d9      	uxtb	r1, r3
 8008404:	2909      	cmp	r1, #9
 8008406:	d926      	bls.n	8008456 <_strtod_l+0x1ae>
 8008408:	494c      	ldr	r1, [pc, #304]	; (800853c <_strtod_l+0x294>)
 800840a:	2201      	movs	r2, #1
 800840c:	f001 fe0d 	bl	800a02a <strncmp>
 8008410:	2800      	cmp	r0, #0
 8008412:	d030      	beq.n	8008476 <_strtod_l+0x1ce>
 8008414:	2000      	movs	r0, #0
 8008416:	4632      	mov	r2, r6
 8008418:	9005      	str	r0, [sp, #20]
 800841a:	465e      	mov	r6, fp
 800841c:	4603      	mov	r3, r0
 800841e:	2a65      	cmp	r2, #101	; 0x65
 8008420:	d001      	beq.n	8008426 <_strtod_l+0x17e>
 8008422:	2a45      	cmp	r2, #69	; 0x45
 8008424:	d113      	bne.n	800844e <_strtod_l+0x1a6>
 8008426:	b91e      	cbnz	r6, 8008430 <_strtod_l+0x188>
 8008428:	9a04      	ldr	r2, [sp, #16]
 800842a:	4302      	orrs	r2, r0
 800842c:	d094      	beq.n	8008358 <_strtod_l+0xb0>
 800842e:	2600      	movs	r6, #0
 8008430:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008432:	1c6a      	adds	r2, r5, #1
 8008434:	9215      	str	r2, [sp, #84]	; 0x54
 8008436:	786a      	ldrb	r2, [r5, #1]
 8008438:	2a2b      	cmp	r2, #43	; 0x2b
 800843a:	d074      	beq.n	8008526 <_strtod_l+0x27e>
 800843c:	2a2d      	cmp	r2, #45	; 0x2d
 800843e:	d078      	beq.n	8008532 <_strtod_l+0x28a>
 8008440:	f04f 0c00 	mov.w	ip, #0
 8008444:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008448:	2909      	cmp	r1, #9
 800844a:	d97f      	bls.n	800854c <_strtod_l+0x2a4>
 800844c:	9515      	str	r5, [sp, #84]	; 0x54
 800844e:	2700      	movs	r7, #0
 8008450:	e09e      	b.n	8008590 <_strtod_l+0x2e8>
 8008452:	2300      	movs	r3, #0
 8008454:	e7c8      	b.n	80083e8 <_strtod_l+0x140>
 8008456:	f1bb 0f08 	cmp.w	fp, #8
 800845a:	bfd8      	it	le
 800845c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800845e:	f100 0001 	add.w	r0, r0, #1
 8008462:	bfda      	itte	le
 8008464:	fb02 3301 	mlale	r3, r2, r1, r3
 8008468:	9309      	strle	r3, [sp, #36]	; 0x24
 800846a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800846e:	f10b 0b01 	add.w	fp, fp, #1
 8008472:	9015      	str	r0, [sp, #84]	; 0x54
 8008474:	e7c1      	b.n	80083fa <_strtod_l+0x152>
 8008476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	9215      	str	r2, [sp, #84]	; 0x54
 800847c:	785a      	ldrb	r2, [r3, #1]
 800847e:	f1bb 0f00 	cmp.w	fp, #0
 8008482:	d037      	beq.n	80084f4 <_strtod_l+0x24c>
 8008484:	9005      	str	r0, [sp, #20]
 8008486:	465e      	mov	r6, fp
 8008488:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800848c:	2b09      	cmp	r3, #9
 800848e:	d912      	bls.n	80084b6 <_strtod_l+0x20e>
 8008490:	2301      	movs	r3, #1
 8008492:	e7c4      	b.n	800841e <_strtod_l+0x176>
 8008494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	9215      	str	r2, [sp, #84]	; 0x54
 800849a:	785a      	ldrb	r2, [r3, #1]
 800849c:	3001      	adds	r0, #1
 800849e:	2a30      	cmp	r2, #48	; 0x30
 80084a0:	d0f8      	beq.n	8008494 <_strtod_l+0x1ec>
 80084a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80084a6:	2b08      	cmp	r3, #8
 80084a8:	f200 84c1 	bhi.w	8008e2e <_strtod_l+0xb86>
 80084ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ae:	9005      	str	r0, [sp, #20]
 80084b0:	2000      	movs	r0, #0
 80084b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084b4:	4606      	mov	r6, r0
 80084b6:	3a30      	subs	r2, #48	; 0x30
 80084b8:	f100 0301 	add.w	r3, r0, #1
 80084bc:	d014      	beq.n	80084e8 <_strtod_l+0x240>
 80084be:	9905      	ldr	r1, [sp, #20]
 80084c0:	4419      	add	r1, r3
 80084c2:	9105      	str	r1, [sp, #20]
 80084c4:	4633      	mov	r3, r6
 80084c6:	eb00 0c06 	add.w	ip, r0, r6
 80084ca:	210a      	movs	r1, #10
 80084cc:	4563      	cmp	r3, ip
 80084ce:	d113      	bne.n	80084f8 <_strtod_l+0x250>
 80084d0:	1833      	adds	r3, r6, r0
 80084d2:	2b08      	cmp	r3, #8
 80084d4:	f106 0601 	add.w	r6, r6, #1
 80084d8:	4406      	add	r6, r0
 80084da:	dc1a      	bgt.n	8008512 <_strtod_l+0x26a>
 80084dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084de:	230a      	movs	r3, #10
 80084e0:	fb03 2301 	mla	r3, r3, r1, r2
 80084e4:	9309      	str	r3, [sp, #36]	; 0x24
 80084e6:	2300      	movs	r3, #0
 80084e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084ea:	1c51      	adds	r1, r2, #1
 80084ec:	9115      	str	r1, [sp, #84]	; 0x54
 80084ee:	7852      	ldrb	r2, [r2, #1]
 80084f0:	4618      	mov	r0, r3
 80084f2:	e7c9      	b.n	8008488 <_strtod_l+0x1e0>
 80084f4:	4658      	mov	r0, fp
 80084f6:	e7d2      	b.n	800849e <_strtod_l+0x1f6>
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	f103 0301 	add.w	r3, r3, #1
 80084fe:	dc03      	bgt.n	8008508 <_strtod_l+0x260>
 8008500:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008502:	434f      	muls	r7, r1
 8008504:	9709      	str	r7, [sp, #36]	; 0x24
 8008506:	e7e1      	b.n	80084cc <_strtod_l+0x224>
 8008508:	2b10      	cmp	r3, #16
 800850a:	bfd8      	it	le
 800850c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008510:	e7dc      	b.n	80084cc <_strtod_l+0x224>
 8008512:	2e10      	cmp	r6, #16
 8008514:	bfdc      	itt	le
 8008516:	230a      	movle	r3, #10
 8008518:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800851c:	e7e3      	b.n	80084e6 <_strtod_l+0x23e>
 800851e:	2300      	movs	r3, #0
 8008520:	9305      	str	r3, [sp, #20]
 8008522:	2301      	movs	r3, #1
 8008524:	e780      	b.n	8008428 <_strtod_l+0x180>
 8008526:	f04f 0c00 	mov.w	ip, #0
 800852a:	1caa      	adds	r2, r5, #2
 800852c:	9215      	str	r2, [sp, #84]	; 0x54
 800852e:	78aa      	ldrb	r2, [r5, #2]
 8008530:	e788      	b.n	8008444 <_strtod_l+0x19c>
 8008532:	f04f 0c01 	mov.w	ip, #1
 8008536:	e7f8      	b.n	800852a <_strtod_l+0x282>
 8008538:	0800f134 	.word	0x0800f134
 800853c:	0800f130 	.word	0x0800f130
 8008540:	7ff00000 	.word	0x7ff00000
 8008544:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008546:	1c51      	adds	r1, r2, #1
 8008548:	9115      	str	r1, [sp, #84]	; 0x54
 800854a:	7852      	ldrb	r2, [r2, #1]
 800854c:	2a30      	cmp	r2, #48	; 0x30
 800854e:	d0f9      	beq.n	8008544 <_strtod_l+0x29c>
 8008550:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008554:	2908      	cmp	r1, #8
 8008556:	f63f af7a 	bhi.w	800844e <_strtod_l+0x1a6>
 800855a:	3a30      	subs	r2, #48	; 0x30
 800855c:	9208      	str	r2, [sp, #32]
 800855e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008560:	920c      	str	r2, [sp, #48]	; 0x30
 8008562:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008564:	1c57      	adds	r7, r2, #1
 8008566:	9715      	str	r7, [sp, #84]	; 0x54
 8008568:	7852      	ldrb	r2, [r2, #1]
 800856a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800856e:	f1be 0f09 	cmp.w	lr, #9
 8008572:	d938      	bls.n	80085e6 <_strtod_l+0x33e>
 8008574:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008576:	1a7f      	subs	r7, r7, r1
 8008578:	2f08      	cmp	r7, #8
 800857a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800857e:	dc03      	bgt.n	8008588 <_strtod_l+0x2e0>
 8008580:	9908      	ldr	r1, [sp, #32]
 8008582:	428f      	cmp	r7, r1
 8008584:	bfa8      	it	ge
 8008586:	460f      	movge	r7, r1
 8008588:	f1bc 0f00 	cmp.w	ip, #0
 800858c:	d000      	beq.n	8008590 <_strtod_l+0x2e8>
 800858e:	427f      	negs	r7, r7
 8008590:	2e00      	cmp	r6, #0
 8008592:	d14f      	bne.n	8008634 <_strtod_l+0x38c>
 8008594:	9904      	ldr	r1, [sp, #16]
 8008596:	4301      	orrs	r1, r0
 8008598:	f47f aec1 	bne.w	800831e <_strtod_l+0x76>
 800859c:	2b00      	cmp	r3, #0
 800859e:	f47f aedb 	bne.w	8008358 <_strtod_l+0xb0>
 80085a2:	2a69      	cmp	r2, #105	; 0x69
 80085a4:	d029      	beq.n	80085fa <_strtod_l+0x352>
 80085a6:	dc26      	bgt.n	80085f6 <_strtod_l+0x34e>
 80085a8:	2a49      	cmp	r2, #73	; 0x49
 80085aa:	d026      	beq.n	80085fa <_strtod_l+0x352>
 80085ac:	2a4e      	cmp	r2, #78	; 0x4e
 80085ae:	f47f aed3 	bne.w	8008358 <_strtod_l+0xb0>
 80085b2:	499b      	ldr	r1, [pc, #620]	; (8008820 <_strtod_l+0x578>)
 80085b4:	a815      	add	r0, sp, #84	; 0x54
 80085b6:	f002 fff5 	bl	800b5a4 <__match>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	f43f aecc 	beq.w	8008358 <_strtod_l+0xb0>
 80085c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b28      	cmp	r3, #40	; 0x28
 80085c6:	d12f      	bne.n	8008628 <_strtod_l+0x380>
 80085c8:	4996      	ldr	r1, [pc, #600]	; (8008824 <_strtod_l+0x57c>)
 80085ca:	aa18      	add	r2, sp, #96	; 0x60
 80085cc:	a815      	add	r0, sp, #84	; 0x54
 80085ce:	f002 fffd 	bl	800b5cc <__hexnan>
 80085d2:	2805      	cmp	r0, #5
 80085d4:	d128      	bne.n	8008628 <_strtod_l+0x380>
 80085d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80085e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80085e4:	e69b      	b.n	800831e <_strtod_l+0x76>
 80085e6:	9f08      	ldr	r7, [sp, #32]
 80085e8:	210a      	movs	r1, #10
 80085ea:	fb01 2107 	mla	r1, r1, r7, r2
 80085ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80085f2:	9208      	str	r2, [sp, #32]
 80085f4:	e7b5      	b.n	8008562 <_strtod_l+0x2ba>
 80085f6:	2a6e      	cmp	r2, #110	; 0x6e
 80085f8:	e7d9      	b.n	80085ae <_strtod_l+0x306>
 80085fa:	498b      	ldr	r1, [pc, #556]	; (8008828 <_strtod_l+0x580>)
 80085fc:	a815      	add	r0, sp, #84	; 0x54
 80085fe:	f002 ffd1 	bl	800b5a4 <__match>
 8008602:	2800      	cmp	r0, #0
 8008604:	f43f aea8 	beq.w	8008358 <_strtod_l+0xb0>
 8008608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800860a:	4988      	ldr	r1, [pc, #544]	; (800882c <_strtod_l+0x584>)
 800860c:	3b01      	subs	r3, #1
 800860e:	a815      	add	r0, sp, #84	; 0x54
 8008610:	9315      	str	r3, [sp, #84]	; 0x54
 8008612:	f002 ffc7 	bl	800b5a4 <__match>
 8008616:	b910      	cbnz	r0, 800861e <_strtod_l+0x376>
 8008618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800861a:	3301      	adds	r3, #1
 800861c:	9315      	str	r3, [sp, #84]	; 0x54
 800861e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800883c <_strtod_l+0x594>
 8008622:	f04f 0800 	mov.w	r8, #0
 8008626:	e67a      	b.n	800831e <_strtod_l+0x76>
 8008628:	4881      	ldr	r0, [pc, #516]	; (8008830 <_strtod_l+0x588>)
 800862a:	f001 fe21 	bl	800a270 <nan>
 800862e:	ec59 8b10 	vmov	r8, r9, d0
 8008632:	e674      	b.n	800831e <_strtod_l+0x76>
 8008634:	9b05      	ldr	r3, [sp, #20]
 8008636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008638:	1afb      	subs	r3, r7, r3
 800863a:	f1bb 0f00 	cmp.w	fp, #0
 800863e:	bf08      	it	eq
 8008640:	46b3      	moveq	fp, r6
 8008642:	2e10      	cmp	r6, #16
 8008644:	9308      	str	r3, [sp, #32]
 8008646:	4635      	mov	r5, r6
 8008648:	bfa8      	it	ge
 800864a:	2510      	movge	r5, #16
 800864c:	f7f7 ff5a 	bl	8000504 <__aeabi_ui2d>
 8008650:	2e09      	cmp	r6, #9
 8008652:	4680      	mov	r8, r0
 8008654:	4689      	mov	r9, r1
 8008656:	dd13      	ble.n	8008680 <_strtod_l+0x3d8>
 8008658:	4b76      	ldr	r3, [pc, #472]	; (8008834 <_strtod_l+0x58c>)
 800865a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800865e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008662:	f7f7 ffc9 	bl	80005f8 <__aeabi_dmul>
 8008666:	4680      	mov	r8, r0
 8008668:	4650      	mov	r0, sl
 800866a:	4689      	mov	r9, r1
 800866c:	f7f7 ff4a 	bl	8000504 <__aeabi_ui2d>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4640      	mov	r0, r8
 8008676:	4649      	mov	r1, r9
 8008678:	f7f7 fe08 	bl	800028c <__adddf3>
 800867c:	4680      	mov	r8, r0
 800867e:	4689      	mov	r9, r1
 8008680:	2e0f      	cmp	r6, #15
 8008682:	dc38      	bgt.n	80086f6 <_strtod_l+0x44e>
 8008684:	9b08      	ldr	r3, [sp, #32]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f43f ae49 	beq.w	800831e <_strtod_l+0x76>
 800868c:	dd24      	ble.n	80086d8 <_strtod_l+0x430>
 800868e:	2b16      	cmp	r3, #22
 8008690:	dc0b      	bgt.n	80086aa <_strtod_l+0x402>
 8008692:	4968      	ldr	r1, [pc, #416]	; (8008834 <_strtod_l+0x58c>)
 8008694:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800869c:	4642      	mov	r2, r8
 800869e:	464b      	mov	r3, r9
 80086a0:	f7f7 ffaa 	bl	80005f8 <__aeabi_dmul>
 80086a4:	4680      	mov	r8, r0
 80086a6:	4689      	mov	r9, r1
 80086a8:	e639      	b.n	800831e <_strtod_l+0x76>
 80086aa:	9a08      	ldr	r2, [sp, #32]
 80086ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80086b0:	4293      	cmp	r3, r2
 80086b2:	db20      	blt.n	80086f6 <_strtod_l+0x44e>
 80086b4:	4c5f      	ldr	r4, [pc, #380]	; (8008834 <_strtod_l+0x58c>)
 80086b6:	f1c6 060f 	rsb	r6, r6, #15
 80086ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80086be:	4642      	mov	r2, r8
 80086c0:	464b      	mov	r3, r9
 80086c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086c6:	f7f7 ff97 	bl	80005f8 <__aeabi_dmul>
 80086ca:	9b08      	ldr	r3, [sp, #32]
 80086cc:	1b9e      	subs	r6, r3, r6
 80086ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80086d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80086d6:	e7e3      	b.n	80086a0 <_strtod_l+0x3f8>
 80086d8:	9b08      	ldr	r3, [sp, #32]
 80086da:	3316      	adds	r3, #22
 80086dc:	db0b      	blt.n	80086f6 <_strtod_l+0x44e>
 80086de:	9b05      	ldr	r3, [sp, #20]
 80086e0:	1bdf      	subs	r7, r3, r7
 80086e2:	4b54      	ldr	r3, [pc, #336]	; (8008834 <_strtod_l+0x58c>)
 80086e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80086e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ec:	4640      	mov	r0, r8
 80086ee:	4649      	mov	r1, r9
 80086f0:	f7f8 f8ac 	bl	800084c <__aeabi_ddiv>
 80086f4:	e7d6      	b.n	80086a4 <_strtod_l+0x3fc>
 80086f6:	9b08      	ldr	r3, [sp, #32]
 80086f8:	1b75      	subs	r5, r6, r5
 80086fa:	441d      	add	r5, r3
 80086fc:	2d00      	cmp	r5, #0
 80086fe:	dd70      	ble.n	80087e2 <_strtod_l+0x53a>
 8008700:	f015 030f 	ands.w	r3, r5, #15
 8008704:	d00a      	beq.n	800871c <_strtod_l+0x474>
 8008706:	494b      	ldr	r1, [pc, #300]	; (8008834 <_strtod_l+0x58c>)
 8008708:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800870c:	4642      	mov	r2, r8
 800870e:	464b      	mov	r3, r9
 8008710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008714:	f7f7 ff70 	bl	80005f8 <__aeabi_dmul>
 8008718:	4680      	mov	r8, r0
 800871a:	4689      	mov	r9, r1
 800871c:	f035 050f 	bics.w	r5, r5, #15
 8008720:	d04d      	beq.n	80087be <_strtod_l+0x516>
 8008722:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008726:	dd22      	ble.n	800876e <_strtod_l+0x4c6>
 8008728:	2500      	movs	r5, #0
 800872a:	46ab      	mov	fp, r5
 800872c:	9509      	str	r5, [sp, #36]	; 0x24
 800872e:	9505      	str	r5, [sp, #20]
 8008730:	2322      	movs	r3, #34	; 0x22
 8008732:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800883c <_strtod_l+0x594>
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	f04f 0800 	mov.w	r8, #0
 800873c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873e:	2b00      	cmp	r3, #0
 8008740:	f43f aded 	beq.w	800831e <_strtod_l+0x76>
 8008744:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008746:	4620      	mov	r0, r4
 8008748:	f003 f82e 	bl	800b7a8 <_Bfree>
 800874c:	9905      	ldr	r1, [sp, #20]
 800874e:	4620      	mov	r0, r4
 8008750:	f003 f82a 	bl	800b7a8 <_Bfree>
 8008754:	4659      	mov	r1, fp
 8008756:	4620      	mov	r0, r4
 8008758:	f003 f826 	bl	800b7a8 <_Bfree>
 800875c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800875e:	4620      	mov	r0, r4
 8008760:	f003 f822 	bl	800b7a8 <_Bfree>
 8008764:	4629      	mov	r1, r5
 8008766:	4620      	mov	r0, r4
 8008768:	f003 f81e 	bl	800b7a8 <_Bfree>
 800876c:	e5d7      	b.n	800831e <_strtod_l+0x76>
 800876e:	4b32      	ldr	r3, [pc, #200]	; (8008838 <_strtod_l+0x590>)
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	2300      	movs	r3, #0
 8008774:	112d      	asrs	r5, r5, #4
 8008776:	4640      	mov	r0, r8
 8008778:	4649      	mov	r1, r9
 800877a:	469a      	mov	sl, r3
 800877c:	2d01      	cmp	r5, #1
 800877e:	dc21      	bgt.n	80087c4 <_strtod_l+0x51c>
 8008780:	b10b      	cbz	r3, 8008786 <_strtod_l+0x4de>
 8008782:	4680      	mov	r8, r0
 8008784:	4689      	mov	r9, r1
 8008786:	492c      	ldr	r1, [pc, #176]	; (8008838 <_strtod_l+0x590>)
 8008788:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800878c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008790:	4642      	mov	r2, r8
 8008792:	464b      	mov	r3, r9
 8008794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008798:	f7f7 ff2e 	bl	80005f8 <__aeabi_dmul>
 800879c:	4b27      	ldr	r3, [pc, #156]	; (800883c <_strtod_l+0x594>)
 800879e:	460a      	mov	r2, r1
 80087a0:	400b      	ands	r3, r1
 80087a2:	4927      	ldr	r1, [pc, #156]	; (8008840 <_strtod_l+0x598>)
 80087a4:	428b      	cmp	r3, r1
 80087a6:	4680      	mov	r8, r0
 80087a8:	d8be      	bhi.n	8008728 <_strtod_l+0x480>
 80087aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80087ae:	428b      	cmp	r3, r1
 80087b0:	bf86      	itte	hi
 80087b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008844 <_strtod_l+0x59c>
 80087b6:	f04f 38ff 	movhi.w	r8, #4294967295
 80087ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80087be:	2300      	movs	r3, #0
 80087c0:	9304      	str	r3, [sp, #16]
 80087c2:	e07b      	b.n	80088bc <_strtod_l+0x614>
 80087c4:	07ea      	lsls	r2, r5, #31
 80087c6:	d505      	bpl.n	80087d4 <_strtod_l+0x52c>
 80087c8:	9b04      	ldr	r3, [sp, #16]
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 ff13 	bl	80005f8 <__aeabi_dmul>
 80087d2:	2301      	movs	r3, #1
 80087d4:	9a04      	ldr	r2, [sp, #16]
 80087d6:	3208      	adds	r2, #8
 80087d8:	f10a 0a01 	add.w	sl, sl, #1
 80087dc:	106d      	asrs	r5, r5, #1
 80087de:	9204      	str	r2, [sp, #16]
 80087e0:	e7cc      	b.n	800877c <_strtod_l+0x4d4>
 80087e2:	d0ec      	beq.n	80087be <_strtod_l+0x516>
 80087e4:	426d      	negs	r5, r5
 80087e6:	f015 020f 	ands.w	r2, r5, #15
 80087ea:	d00a      	beq.n	8008802 <_strtod_l+0x55a>
 80087ec:	4b11      	ldr	r3, [pc, #68]	; (8008834 <_strtod_l+0x58c>)
 80087ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087f2:	4640      	mov	r0, r8
 80087f4:	4649      	mov	r1, r9
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f8 f827 	bl	800084c <__aeabi_ddiv>
 80087fe:	4680      	mov	r8, r0
 8008800:	4689      	mov	r9, r1
 8008802:	112d      	asrs	r5, r5, #4
 8008804:	d0db      	beq.n	80087be <_strtod_l+0x516>
 8008806:	2d1f      	cmp	r5, #31
 8008808:	dd1e      	ble.n	8008848 <_strtod_l+0x5a0>
 800880a:	2500      	movs	r5, #0
 800880c:	46ab      	mov	fp, r5
 800880e:	9509      	str	r5, [sp, #36]	; 0x24
 8008810:	9505      	str	r5, [sp, #20]
 8008812:	2322      	movs	r3, #34	; 0x22
 8008814:	f04f 0800 	mov.w	r8, #0
 8008818:	f04f 0900 	mov.w	r9, #0
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	e78d      	b.n	800873c <_strtod_l+0x494>
 8008820:	0800f296 	.word	0x0800f296
 8008824:	0800f148 	.word	0x0800f148
 8008828:	0800f28e 	.word	0x0800f28e
 800882c:	0800f37a 	.word	0x0800f37a
 8008830:	0800f376 	.word	0x0800f376
 8008834:	0800f4d0 	.word	0x0800f4d0
 8008838:	0800f4a8 	.word	0x0800f4a8
 800883c:	7ff00000 	.word	0x7ff00000
 8008840:	7ca00000 	.word	0x7ca00000
 8008844:	7fefffff 	.word	0x7fefffff
 8008848:	f015 0310 	ands.w	r3, r5, #16
 800884c:	bf18      	it	ne
 800884e:	236a      	movne	r3, #106	; 0x6a
 8008850:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008bf4 <_strtod_l+0x94c>
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	4640      	mov	r0, r8
 8008858:	4649      	mov	r1, r9
 800885a:	2300      	movs	r3, #0
 800885c:	07ea      	lsls	r2, r5, #31
 800885e:	d504      	bpl.n	800886a <_strtod_l+0x5c2>
 8008860:	e9da 2300 	ldrd	r2, r3, [sl]
 8008864:	f7f7 fec8 	bl	80005f8 <__aeabi_dmul>
 8008868:	2301      	movs	r3, #1
 800886a:	106d      	asrs	r5, r5, #1
 800886c:	f10a 0a08 	add.w	sl, sl, #8
 8008870:	d1f4      	bne.n	800885c <_strtod_l+0x5b4>
 8008872:	b10b      	cbz	r3, 8008878 <_strtod_l+0x5d0>
 8008874:	4680      	mov	r8, r0
 8008876:	4689      	mov	r9, r1
 8008878:	9b04      	ldr	r3, [sp, #16]
 800887a:	b1bb      	cbz	r3, 80088ac <_strtod_l+0x604>
 800887c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008880:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008884:	2b00      	cmp	r3, #0
 8008886:	4649      	mov	r1, r9
 8008888:	dd10      	ble.n	80088ac <_strtod_l+0x604>
 800888a:	2b1f      	cmp	r3, #31
 800888c:	f340 811e 	ble.w	8008acc <_strtod_l+0x824>
 8008890:	2b34      	cmp	r3, #52	; 0x34
 8008892:	bfde      	ittt	le
 8008894:	f04f 33ff 	movle.w	r3, #4294967295
 8008898:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800889c:	4093      	lslle	r3, r2
 800889e:	f04f 0800 	mov.w	r8, #0
 80088a2:	bfcc      	ite	gt
 80088a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80088a8:	ea03 0901 	andle.w	r9, r3, r1
 80088ac:	2200      	movs	r2, #0
 80088ae:	2300      	movs	r3, #0
 80088b0:	4640      	mov	r0, r8
 80088b2:	4649      	mov	r1, r9
 80088b4:	f7f8 f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d1a6      	bne.n	800880a <_strtod_l+0x562>
 80088bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088c2:	4633      	mov	r3, r6
 80088c4:	465a      	mov	r2, fp
 80088c6:	4620      	mov	r0, r4
 80088c8:	f002 ffd6 	bl	800b878 <__s2b>
 80088cc:	9009      	str	r0, [sp, #36]	; 0x24
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f43f af2a 	beq.w	8008728 <_strtod_l+0x480>
 80088d4:	9a08      	ldr	r2, [sp, #32]
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	2a00      	cmp	r2, #0
 80088da:	eba3 0307 	sub.w	r3, r3, r7
 80088de:	bfa8      	it	ge
 80088e0:	2300      	movge	r3, #0
 80088e2:	930c      	str	r3, [sp, #48]	; 0x30
 80088e4:	2500      	movs	r5, #0
 80088e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80088ea:	9312      	str	r3, [sp, #72]	; 0x48
 80088ec:	46ab      	mov	fp, r5
 80088ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f0:	4620      	mov	r0, r4
 80088f2:	6859      	ldr	r1, [r3, #4]
 80088f4:	f002 ff18 	bl	800b728 <_Balloc>
 80088f8:	9005      	str	r0, [sp, #20]
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f43f af18 	beq.w	8008730 <_strtod_l+0x488>
 8008900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	3202      	adds	r2, #2
 8008906:	f103 010c 	add.w	r1, r3, #12
 800890a:	0092      	lsls	r2, r2, #2
 800890c:	300c      	adds	r0, #12
 800890e:	f001 fca0 	bl	800a252 <memcpy>
 8008912:	ec49 8b10 	vmov	d0, r8, r9
 8008916:	aa18      	add	r2, sp, #96	; 0x60
 8008918:	a917      	add	r1, sp, #92	; 0x5c
 800891a:	4620      	mov	r0, r4
 800891c:	f003 fae0 	bl	800bee0 <__d2b>
 8008920:	ec49 8b18 	vmov	d8, r8, r9
 8008924:	9016      	str	r0, [sp, #88]	; 0x58
 8008926:	2800      	cmp	r0, #0
 8008928:	f43f af02 	beq.w	8008730 <_strtod_l+0x488>
 800892c:	2101      	movs	r1, #1
 800892e:	4620      	mov	r0, r4
 8008930:	f003 f83a 	bl	800b9a8 <__i2b>
 8008934:	4683      	mov	fp, r0
 8008936:	2800      	cmp	r0, #0
 8008938:	f43f aefa 	beq.w	8008730 <_strtod_l+0x488>
 800893c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800893e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008940:	2e00      	cmp	r6, #0
 8008942:	bfab      	itete	ge
 8008944:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008946:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008948:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800894a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800894e:	bfac      	ite	ge
 8008950:	eb06 0a03 	addge.w	sl, r6, r3
 8008954:	1b9f      	sublt	r7, r3, r6
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	1af6      	subs	r6, r6, r3
 800895a:	4416      	add	r6, r2
 800895c:	4ba0      	ldr	r3, [pc, #640]	; (8008be0 <_strtod_l+0x938>)
 800895e:	3e01      	subs	r6, #1
 8008960:	429e      	cmp	r6, r3
 8008962:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008966:	f280 80c4 	bge.w	8008af2 <_strtod_l+0x84a>
 800896a:	1b9b      	subs	r3, r3, r6
 800896c:	2b1f      	cmp	r3, #31
 800896e:	eba2 0203 	sub.w	r2, r2, r3
 8008972:	f04f 0101 	mov.w	r1, #1
 8008976:	f300 80b0 	bgt.w	8008ada <_strtod_l+0x832>
 800897a:	fa01 f303 	lsl.w	r3, r1, r3
 800897e:	930e      	str	r3, [sp, #56]	; 0x38
 8008980:	2300      	movs	r3, #0
 8008982:	930d      	str	r3, [sp, #52]	; 0x34
 8008984:	eb0a 0602 	add.w	r6, sl, r2
 8008988:	9b04      	ldr	r3, [sp, #16]
 800898a:	45b2      	cmp	sl, r6
 800898c:	4417      	add	r7, r2
 800898e:	441f      	add	r7, r3
 8008990:	4653      	mov	r3, sl
 8008992:	bfa8      	it	ge
 8008994:	4633      	movge	r3, r6
 8008996:	42bb      	cmp	r3, r7
 8008998:	bfa8      	it	ge
 800899a:	463b      	movge	r3, r7
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfc2      	ittt	gt
 80089a0:	1af6      	subgt	r6, r6, r3
 80089a2:	1aff      	subgt	r7, r7, r3
 80089a4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80089a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	dd17      	ble.n	80089de <_strtod_l+0x736>
 80089ae:	4659      	mov	r1, fp
 80089b0:	461a      	mov	r2, r3
 80089b2:	4620      	mov	r0, r4
 80089b4:	f003 f8b8 	bl	800bb28 <__pow5mult>
 80089b8:	4683      	mov	fp, r0
 80089ba:	2800      	cmp	r0, #0
 80089bc:	f43f aeb8 	beq.w	8008730 <_strtod_l+0x488>
 80089c0:	4601      	mov	r1, r0
 80089c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80089c4:	4620      	mov	r0, r4
 80089c6:	f003 f805 	bl	800b9d4 <__multiply>
 80089ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f43f aeaf 	beq.w	8008730 <_strtod_l+0x488>
 80089d2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089d4:	4620      	mov	r0, r4
 80089d6:	f002 fee7 	bl	800b7a8 <_Bfree>
 80089da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089dc:	9316      	str	r3, [sp, #88]	; 0x58
 80089de:	2e00      	cmp	r6, #0
 80089e0:	f300 808c 	bgt.w	8008afc <_strtod_l+0x854>
 80089e4:	9b08      	ldr	r3, [sp, #32]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dd08      	ble.n	80089fc <_strtod_l+0x754>
 80089ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089ec:	9905      	ldr	r1, [sp, #20]
 80089ee:	4620      	mov	r0, r4
 80089f0:	f003 f89a 	bl	800bb28 <__pow5mult>
 80089f4:	9005      	str	r0, [sp, #20]
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f43f ae9a 	beq.w	8008730 <_strtod_l+0x488>
 80089fc:	2f00      	cmp	r7, #0
 80089fe:	dd08      	ble.n	8008a12 <_strtod_l+0x76a>
 8008a00:	9905      	ldr	r1, [sp, #20]
 8008a02:	463a      	mov	r2, r7
 8008a04:	4620      	mov	r0, r4
 8008a06:	f003 f8e9 	bl	800bbdc <__lshift>
 8008a0a:	9005      	str	r0, [sp, #20]
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f43f ae8f 	beq.w	8008730 <_strtod_l+0x488>
 8008a12:	f1ba 0f00 	cmp.w	sl, #0
 8008a16:	dd08      	ble.n	8008a2a <_strtod_l+0x782>
 8008a18:	4659      	mov	r1, fp
 8008a1a:	4652      	mov	r2, sl
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f003 f8dd 	bl	800bbdc <__lshift>
 8008a22:	4683      	mov	fp, r0
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f43f ae83 	beq.w	8008730 <_strtod_l+0x488>
 8008a2a:	9a05      	ldr	r2, [sp, #20]
 8008a2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f003 f95c 	bl	800bcec <__mdiff>
 8008a34:	4605      	mov	r5, r0
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f43f ae7a 	beq.w	8008730 <_strtod_l+0x488>
 8008a3c:	68c3      	ldr	r3, [r0, #12]
 8008a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a40:	2300      	movs	r3, #0
 8008a42:	60c3      	str	r3, [r0, #12]
 8008a44:	4659      	mov	r1, fp
 8008a46:	f003 f935 	bl	800bcb4 <__mcmp>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	da60      	bge.n	8008b10 <_strtod_l+0x868>
 8008a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a50:	ea53 0308 	orrs.w	r3, r3, r8
 8008a54:	f040 8084 	bne.w	8008b60 <_strtod_l+0x8b8>
 8008a58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d17f      	bne.n	8008b60 <_strtod_l+0x8b8>
 8008a60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a64:	0d1b      	lsrs	r3, r3, #20
 8008a66:	051b      	lsls	r3, r3, #20
 8008a68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a6c:	d978      	bls.n	8008b60 <_strtod_l+0x8b8>
 8008a6e:	696b      	ldr	r3, [r5, #20]
 8008a70:	b913      	cbnz	r3, 8008a78 <_strtod_l+0x7d0>
 8008a72:	692b      	ldr	r3, [r5, #16]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	dd73      	ble.n	8008b60 <_strtod_l+0x8b8>
 8008a78:	4629      	mov	r1, r5
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f003 f8ad 	bl	800bbdc <__lshift>
 8008a82:	4659      	mov	r1, fp
 8008a84:	4605      	mov	r5, r0
 8008a86:	f003 f915 	bl	800bcb4 <__mcmp>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	dd68      	ble.n	8008b60 <_strtod_l+0x8b8>
 8008a8e:	9904      	ldr	r1, [sp, #16]
 8008a90:	4a54      	ldr	r2, [pc, #336]	; (8008be4 <_strtod_l+0x93c>)
 8008a92:	464b      	mov	r3, r9
 8008a94:	2900      	cmp	r1, #0
 8008a96:	f000 8084 	beq.w	8008ba2 <_strtod_l+0x8fa>
 8008a9a:	ea02 0109 	and.w	r1, r2, r9
 8008a9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008aa2:	dc7e      	bgt.n	8008ba2 <_strtod_l+0x8fa>
 8008aa4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008aa8:	f77f aeb3 	ble.w	8008812 <_strtod_l+0x56a>
 8008aac:	4b4e      	ldr	r3, [pc, #312]	; (8008be8 <_strtod_l+0x940>)
 8008aae:	4640      	mov	r0, r8
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f7f7 fda0 	bl	80005f8 <__aeabi_dmul>
 8008ab8:	4b4a      	ldr	r3, [pc, #296]	; (8008be4 <_strtod_l+0x93c>)
 8008aba:	400b      	ands	r3, r1
 8008abc:	4680      	mov	r8, r0
 8008abe:	4689      	mov	r9, r1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f47f ae3f 	bne.w	8008744 <_strtod_l+0x49c>
 8008ac6:	2322      	movs	r3, #34	; 0x22
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	e63b      	b.n	8008744 <_strtod_l+0x49c>
 8008acc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad4:	ea03 0808 	and.w	r8, r3, r8
 8008ad8:	e6e8      	b.n	80088ac <_strtod_l+0x604>
 8008ada:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008ade:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008ae2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008ae6:	36e2      	adds	r6, #226	; 0xe2
 8008ae8:	fa01 f306 	lsl.w	r3, r1, r6
 8008aec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008af0:	e748      	b.n	8008984 <_strtod_l+0x6dc>
 8008af2:	2100      	movs	r1, #0
 8008af4:	2301      	movs	r3, #1
 8008af6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008afa:	e743      	b.n	8008984 <_strtod_l+0x6dc>
 8008afc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008afe:	4632      	mov	r2, r6
 8008b00:	4620      	mov	r0, r4
 8008b02:	f003 f86b 	bl	800bbdc <__lshift>
 8008b06:	9016      	str	r0, [sp, #88]	; 0x58
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	f47f af6b 	bne.w	80089e4 <_strtod_l+0x73c>
 8008b0e:	e60f      	b.n	8008730 <_strtod_l+0x488>
 8008b10:	46ca      	mov	sl, r9
 8008b12:	d171      	bne.n	8008bf8 <_strtod_l+0x950>
 8008b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b1a:	b352      	cbz	r2, 8008b72 <_strtod_l+0x8ca>
 8008b1c:	4a33      	ldr	r2, [pc, #204]	; (8008bec <_strtod_l+0x944>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d12a      	bne.n	8008b78 <_strtod_l+0x8d0>
 8008b22:	9b04      	ldr	r3, [sp, #16]
 8008b24:	4641      	mov	r1, r8
 8008b26:	b1fb      	cbz	r3, 8008b68 <_strtod_l+0x8c0>
 8008b28:	4b2e      	ldr	r3, [pc, #184]	; (8008be4 <_strtod_l+0x93c>)
 8008b2a:	ea09 0303 	and.w	r3, r9, r3
 8008b2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b32:	f04f 32ff 	mov.w	r2, #4294967295
 8008b36:	d81a      	bhi.n	8008b6e <_strtod_l+0x8c6>
 8008b38:	0d1b      	lsrs	r3, r3, #20
 8008b3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b42:	4299      	cmp	r1, r3
 8008b44:	d118      	bne.n	8008b78 <_strtod_l+0x8d0>
 8008b46:	4b2a      	ldr	r3, [pc, #168]	; (8008bf0 <_strtod_l+0x948>)
 8008b48:	459a      	cmp	sl, r3
 8008b4a:	d102      	bne.n	8008b52 <_strtod_l+0x8aa>
 8008b4c:	3101      	adds	r1, #1
 8008b4e:	f43f adef 	beq.w	8008730 <_strtod_l+0x488>
 8008b52:	4b24      	ldr	r3, [pc, #144]	; (8008be4 <_strtod_l+0x93c>)
 8008b54:	ea0a 0303 	and.w	r3, sl, r3
 8008b58:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008b5c:	f04f 0800 	mov.w	r8, #0
 8008b60:	9b04      	ldr	r3, [sp, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1a2      	bne.n	8008aac <_strtod_l+0x804>
 8008b66:	e5ed      	b.n	8008744 <_strtod_l+0x49c>
 8008b68:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6c:	e7e9      	b.n	8008b42 <_strtod_l+0x89a>
 8008b6e:	4613      	mov	r3, r2
 8008b70:	e7e7      	b.n	8008b42 <_strtod_l+0x89a>
 8008b72:	ea53 0308 	orrs.w	r3, r3, r8
 8008b76:	d08a      	beq.n	8008a8e <_strtod_l+0x7e6>
 8008b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b7a:	b1e3      	cbz	r3, 8008bb6 <_strtod_l+0x90e>
 8008b7c:	ea13 0f0a 	tst.w	r3, sl
 8008b80:	d0ee      	beq.n	8008b60 <_strtod_l+0x8b8>
 8008b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b84:	9a04      	ldr	r2, [sp, #16]
 8008b86:	4640      	mov	r0, r8
 8008b88:	4649      	mov	r1, r9
 8008b8a:	b1c3      	cbz	r3, 8008bbe <_strtod_l+0x916>
 8008b8c:	f7ff fb70 	bl	8008270 <sulp>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	ec51 0b18 	vmov	r0, r1, d8
 8008b98:	f7f7 fb78 	bl	800028c <__adddf3>
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	4689      	mov	r9, r1
 8008ba0:	e7de      	b.n	8008b60 <_strtod_l+0x8b8>
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ba8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008bac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008bb0:	f04f 38ff 	mov.w	r8, #4294967295
 8008bb4:	e7d4      	b.n	8008b60 <_strtod_l+0x8b8>
 8008bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb8:	ea13 0f08 	tst.w	r3, r8
 8008bbc:	e7e0      	b.n	8008b80 <_strtod_l+0x8d8>
 8008bbe:	f7ff fb57 	bl	8008270 <sulp>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	ec51 0b18 	vmov	r0, r1, d8
 8008bca:	f7f7 fb5d 	bl	8000288 <__aeabi_dsub>
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	4689      	mov	r9, r1
 8008bd6:	f7f7 ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d0c0      	beq.n	8008b60 <_strtod_l+0x8b8>
 8008bde:	e618      	b.n	8008812 <_strtod_l+0x56a>
 8008be0:	fffffc02 	.word	0xfffffc02
 8008be4:	7ff00000 	.word	0x7ff00000
 8008be8:	39500000 	.word	0x39500000
 8008bec:	000fffff 	.word	0x000fffff
 8008bf0:	7fefffff 	.word	0x7fefffff
 8008bf4:	0800f160 	.word	0x0800f160
 8008bf8:	4659      	mov	r1, fp
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f003 f9ca 	bl	800bf94 <__ratio>
 8008c00:	ec57 6b10 	vmov	r6, r7, d0
 8008c04:	ee10 0a10 	vmov	r0, s0
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c0e:	4639      	mov	r1, r7
 8008c10:	f7f7 ff6e 	bl	8000af0 <__aeabi_dcmple>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d071      	beq.n	8008cfc <_strtod_l+0xa54>
 8008c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d17c      	bne.n	8008d18 <_strtod_l+0xa70>
 8008c1e:	f1b8 0f00 	cmp.w	r8, #0
 8008c22:	d15a      	bne.n	8008cda <_strtod_l+0xa32>
 8008c24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d15d      	bne.n	8008ce8 <_strtod_l+0xa40>
 8008c2c:	4b90      	ldr	r3, [pc, #576]	; (8008e70 <_strtod_l+0xbc8>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	f7f7 ff52 	bl	8000adc <__aeabi_dcmplt>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d15c      	bne.n	8008cf6 <_strtod_l+0xa4e>
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	4b8c      	ldr	r3, [pc, #560]	; (8008e74 <_strtod_l+0xbcc>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	f7f7 fcd8 	bl	80005f8 <__aeabi_dmul>
 8008c48:	4606      	mov	r6, r0
 8008c4a:	460f      	mov	r7, r1
 8008c4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008c50:	9606      	str	r6, [sp, #24]
 8008c52:	9307      	str	r3, [sp, #28]
 8008c54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008c5c:	4b86      	ldr	r3, [pc, #536]	; (8008e78 <_strtod_l+0xbd0>)
 8008c5e:	ea0a 0303 	and.w	r3, sl, r3
 8008c62:	930d      	str	r3, [sp, #52]	; 0x34
 8008c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c66:	4b85      	ldr	r3, [pc, #532]	; (8008e7c <_strtod_l+0xbd4>)
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	f040 8090 	bne.w	8008d8e <_strtod_l+0xae6>
 8008c6e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008c72:	ec49 8b10 	vmov	d0, r8, r9
 8008c76:	f003 f8c3 	bl	800be00 <__ulp>
 8008c7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c7e:	ec51 0b10 	vmov	r0, r1, d0
 8008c82:	f7f7 fcb9 	bl	80005f8 <__aeabi_dmul>
 8008c86:	4642      	mov	r2, r8
 8008c88:	464b      	mov	r3, r9
 8008c8a:	f7f7 faff 	bl	800028c <__adddf3>
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4979      	ldr	r1, [pc, #484]	; (8008e78 <_strtod_l+0xbd0>)
 8008c92:	4a7b      	ldr	r2, [pc, #492]	; (8008e80 <_strtod_l+0xbd8>)
 8008c94:	4019      	ands	r1, r3
 8008c96:	4291      	cmp	r1, r2
 8008c98:	4680      	mov	r8, r0
 8008c9a:	d944      	bls.n	8008d26 <_strtod_l+0xa7e>
 8008c9c:	ee18 2a90 	vmov	r2, s17
 8008ca0:	4b78      	ldr	r3, [pc, #480]	; (8008e84 <_strtod_l+0xbdc>)
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d104      	bne.n	8008cb0 <_strtod_l+0xa08>
 8008ca6:	ee18 3a10 	vmov	r3, s16
 8008caa:	3301      	adds	r3, #1
 8008cac:	f43f ad40 	beq.w	8008730 <_strtod_l+0x488>
 8008cb0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008e84 <_strtod_l+0xbdc>
 8008cb4:	f04f 38ff 	mov.w	r8, #4294967295
 8008cb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f002 fd74 	bl	800b7a8 <_Bfree>
 8008cc0:	9905      	ldr	r1, [sp, #20]
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f002 fd70 	bl	800b7a8 <_Bfree>
 8008cc8:	4659      	mov	r1, fp
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f002 fd6c 	bl	800b7a8 <_Bfree>
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f002 fd68 	bl	800b7a8 <_Bfree>
 8008cd8:	e609      	b.n	80088ee <_strtod_l+0x646>
 8008cda:	f1b8 0f01 	cmp.w	r8, #1
 8008cde:	d103      	bne.n	8008ce8 <_strtod_l+0xa40>
 8008ce0:	f1b9 0f00 	cmp.w	r9, #0
 8008ce4:	f43f ad95 	beq.w	8008812 <_strtod_l+0x56a>
 8008ce8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008e40 <_strtod_l+0xb98>
 8008cec:	4f60      	ldr	r7, [pc, #384]	; (8008e70 <_strtod_l+0xbc8>)
 8008cee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cf2:	2600      	movs	r6, #0
 8008cf4:	e7ae      	b.n	8008c54 <_strtod_l+0x9ac>
 8008cf6:	4f5f      	ldr	r7, [pc, #380]	; (8008e74 <_strtod_l+0xbcc>)
 8008cf8:	2600      	movs	r6, #0
 8008cfa:	e7a7      	b.n	8008c4c <_strtod_l+0x9a4>
 8008cfc:	4b5d      	ldr	r3, [pc, #372]	; (8008e74 <_strtod_l+0xbcc>)
 8008cfe:	4630      	mov	r0, r6
 8008d00:	4639      	mov	r1, r7
 8008d02:	2200      	movs	r2, #0
 8008d04:	f7f7 fc78 	bl	80005f8 <__aeabi_dmul>
 8008d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	460f      	mov	r7, r1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d09c      	beq.n	8008c4c <_strtod_l+0x9a4>
 8008d12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d16:	e79d      	b.n	8008c54 <_strtod_l+0x9ac>
 8008d18:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008e48 <_strtod_l+0xba0>
 8008d1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d20:	ec57 6b17 	vmov	r6, r7, d7
 8008d24:	e796      	b.n	8008c54 <_strtod_l+0x9ac>
 8008d26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008d2a:	9b04      	ldr	r3, [sp, #16]
 8008d2c:	46ca      	mov	sl, r9
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1c2      	bne.n	8008cb8 <_strtod_l+0xa10>
 8008d32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d38:	0d1b      	lsrs	r3, r3, #20
 8008d3a:	051b      	lsls	r3, r3, #20
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d1bb      	bne.n	8008cb8 <_strtod_l+0xa10>
 8008d40:	4630      	mov	r0, r6
 8008d42:	4639      	mov	r1, r7
 8008d44:	f7f7 ffb8 	bl	8000cb8 <__aeabi_d2lz>
 8008d48:	f7f7 fc28 	bl	800059c <__aeabi_l2d>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7f7 fa98 	bl	8000288 <__aeabi_dsub>
 8008d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d5e:	ea43 0308 	orr.w	r3, r3, r8
 8008d62:	4313      	orrs	r3, r2
 8008d64:	4606      	mov	r6, r0
 8008d66:	460f      	mov	r7, r1
 8008d68:	d054      	beq.n	8008e14 <_strtod_l+0xb6c>
 8008d6a:	a339      	add	r3, pc, #228	; (adr r3, 8008e50 <_strtod_l+0xba8>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 feb4 	bl	8000adc <__aeabi_dcmplt>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f47f ace5 	bne.w	8008744 <_strtod_l+0x49c>
 8008d7a:	a337      	add	r3, pc, #220	; (adr r3, 8008e58 <_strtod_l+0xbb0>)
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	4630      	mov	r0, r6
 8008d82:	4639      	mov	r1, r7
 8008d84:	f7f7 fec8 	bl	8000b18 <__aeabi_dcmpgt>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d095      	beq.n	8008cb8 <_strtod_l+0xa10>
 8008d8c:	e4da      	b.n	8008744 <_strtod_l+0x49c>
 8008d8e:	9b04      	ldr	r3, [sp, #16]
 8008d90:	b333      	cbz	r3, 8008de0 <_strtod_l+0xb38>
 8008d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d98:	d822      	bhi.n	8008de0 <_strtod_l+0xb38>
 8008d9a:	a331      	add	r3, pc, #196	; (adr r3, 8008e60 <_strtod_l+0xbb8>)
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	f7f7 fea4 	bl	8000af0 <__aeabi_dcmple>
 8008da8:	b1a0      	cbz	r0, 8008dd4 <_strtod_l+0xb2c>
 8008daa:	4639      	mov	r1, r7
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7f7 fefb 	bl	8000ba8 <__aeabi_d2uiz>
 8008db2:	2801      	cmp	r0, #1
 8008db4:	bf38      	it	cc
 8008db6:	2001      	movcc	r0, #1
 8008db8:	f7f7 fba4 	bl	8000504 <__aeabi_ui2d>
 8008dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	bb23      	cbnz	r3, 8008e0e <_strtod_l+0xb66>
 8008dc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dc8:	9010      	str	r0, [sp, #64]	; 0x40
 8008dca:	9311      	str	r3, [sp, #68]	; 0x44
 8008dcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008dd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8008de0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008de4:	eeb0 0a48 	vmov.f32	s0, s16
 8008de8:	eef0 0a68 	vmov.f32	s1, s17
 8008dec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008df0:	f003 f806 	bl	800be00 <__ulp>
 8008df4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008df8:	ec53 2b10 	vmov	r2, r3, d0
 8008dfc:	f7f7 fbfc 	bl	80005f8 <__aeabi_dmul>
 8008e00:	ec53 2b18 	vmov	r2, r3, d8
 8008e04:	f7f7 fa42 	bl	800028c <__adddf3>
 8008e08:	4680      	mov	r8, r0
 8008e0a:	4689      	mov	r9, r1
 8008e0c:	e78d      	b.n	8008d2a <_strtod_l+0xa82>
 8008e0e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008e12:	e7db      	b.n	8008dcc <_strtod_l+0xb24>
 8008e14:	a314      	add	r3, pc, #80	; (adr r3, 8008e68 <_strtod_l+0xbc0>)
 8008e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1a:	f7f7 fe5f 	bl	8000adc <__aeabi_dcmplt>
 8008e1e:	e7b3      	b.n	8008d88 <_strtod_l+0xae0>
 8008e20:	2300      	movs	r3, #0
 8008e22:	930a      	str	r3, [sp, #40]	; 0x28
 8008e24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	f7ff ba7c 	b.w	8008326 <_strtod_l+0x7e>
 8008e2e:	2a65      	cmp	r2, #101	; 0x65
 8008e30:	f43f ab75 	beq.w	800851e <_strtod_l+0x276>
 8008e34:	2a45      	cmp	r2, #69	; 0x45
 8008e36:	f43f ab72 	beq.w	800851e <_strtod_l+0x276>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	f7ff bbaa 	b.w	8008594 <_strtod_l+0x2ec>
 8008e40:	00000000 	.word	0x00000000
 8008e44:	bff00000 	.word	0xbff00000
 8008e48:	00000000 	.word	0x00000000
 8008e4c:	3ff00000 	.word	0x3ff00000
 8008e50:	94a03595 	.word	0x94a03595
 8008e54:	3fdfffff 	.word	0x3fdfffff
 8008e58:	35afe535 	.word	0x35afe535
 8008e5c:	3fe00000 	.word	0x3fe00000
 8008e60:	ffc00000 	.word	0xffc00000
 8008e64:	41dfffff 	.word	0x41dfffff
 8008e68:	94a03595 	.word	0x94a03595
 8008e6c:	3fcfffff 	.word	0x3fcfffff
 8008e70:	3ff00000 	.word	0x3ff00000
 8008e74:	3fe00000 	.word	0x3fe00000
 8008e78:	7ff00000 	.word	0x7ff00000
 8008e7c:	7fe00000 	.word	0x7fe00000
 8008e80:	7c9fffff 	.word	0x7c9fffff
 8008e84:	7fefffff 	.word	0x7fefffff

08008e88 <_strtod_r>:
 8008e88:	4b01      	ldr	r3, [pc, #4]	; (8008e90 <_strtod_r+0x8>)
 8008e8a:	f7ff ba0d 	b.w	80082a8 <_strtod_l>
 8008e8e:	bf00      	nop
 8008e90:	20000028 	.word	0x20000028

08008e94 <strtof>:
 8008e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008f5c <strtof+0xc8>
 8008e9c:	4b2a      	ldr	r3, [pc, #168]	; (8008f48 <strtof+0xb4>)
 8008e9e:	460a      	mov	r2, r1
 8008ea0:	ed2d 8b02 	vpush	{d8}
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	f8d8 0000 	ldr.w	r0, [r8]
 8008eaa:	f7ff f9fd 	bl	80082a8 <_strtod_l>
 8008eae:	ec55 4b10 	vmov	r4, r5, d0
 8008eb2:	ee10 2a10 	vmov	r2, s0
 8008eb6:	ee10 0a10 	vmov	r0, s0
 8008eba:	462b      	mov	r3, r5
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	f7f7 fe35 	bl	8000b2c <__aeabi_dcmpun>
 8008ec2:	b190      	cbz	r0, 8008eea <strtof+0x56>
 8008ec4:	2d00      	cmp	r5, #0
 8008ec6:	4821      	ldr	r0, [pc, #132]	; (8008f4c <strtof+0xb8>)
 8008ec8:	da09      	bge.n	8008ede <strtof+0x4a>
 8008eca:	f001 f9d9 	bl	800a280 <nanf>
 8008ece:	eeb1 8a40 	vneg.f32	s16, s0
 8008ed2:	eeb0 0a48 	vmov.f32	s0, s16
 8008ed6:	ecbd 8b02 	vpop	{d8}
 8008eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ede:	ecbd 8b02 	vpop	{d8}
 8008ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee6:	f001 b9cb 	b.w	800a280 <nanf>
 8008eea:	4620      	mov	r0, r4
 8008eec:	4629      	mov	r1, r5
 8008eee:	f7f7 fe7b 	bl	8000be8 <__aeabi_d2f>
 8008ef2:	ee08 0a10 	vmov	s16, r0
 8008ef6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008f50 <strtof+0xbc>
 8008efa:	eeb0 7ac8 	vabs.f32	s14, s16
 8008efe:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f06:	dd11      	ble.n	8008f2c <strtof+0x98>
 8008f08:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008f0c:	4b11      	ldr	r3, [pc, #68]	; (8008f54 <strtof+0xc0>)
 8008f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f12:	4620      	mov	r0, r4
 8008f14:	4639      	mov	r1, r7
 8008f16:	f7f7 fe09 	bl	8000b2c <__aeabi_dcmpun>
 8008f1a:	b980      	cbnz	r0, 8008f3e <strtof+0xaa>
 8008f1c:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <strtof+0xc0>)
 8008f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f22:	4620      	mov	r0, r4
 8008f24:	4639      	mov	r1, r7
 8008f26:	f7f7 fde3 	bl	8000af0 <__aeabi_dcmple>
 8008f2a:	b940      	cbnz	r0, 8008f3e <strtof+0xaa>
 8008f2c:	ee18 3a10 	vmov	r3, s16
 8008f30:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008f34:	d1cd      	bne.n	8008ed2 <strtof+0x3e>
 8008f36:	4b08      	ldr	r3, [pc, #32]	; (8008f58 <strtof+0xc4>)
 8008f38:	402b      	ands	r3, r5
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0c9      	beq.n	8008ed2 <strtof+0x3e>
 8008f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f42:	2222      	movs	r2, #34	; 0x22
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	e7c4      	b.n	8008ed2 <strtof+0x3e>
 8008f48:	20000028 	.word	0x20000028
 8008f4c:	0800f376 	.word	0x0800f376
 8008f50:	7f7fffff 	.word	0x7f7fffff
 8008f54:	7fefffff 	.word	0x7fefffff
 8008f58:	7ff00000 	.word	0x7ff00000
 8008f5c:	200001e0 	.word	0x200001e0

08008f60 <_strtol_l.constprop.0>:
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f66:	d001      	beq.n	8008f6c <_strtol_l.constprop.0+0xc>
 8008f68:	2b24      	cmp	r3, #36	; 0x24
 8008f6a:	d906      	bls.n	8008f7a <_strtol_l.constprop.0+0x1a>
 8008f6c:	f001 f93c 	bl	800a1e8 <__errno>
 8008f70:	2316      	movs	r3, #22
 8008f72:	6003      	str	r3, [r0, #0]
 8008f74:	2000      	movs	r0, #0
 8008f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009060 <_strtol_l.constprop.0+0x100>
 8008f7e:	460d      	mov	r5, r1
 8008f80:	462e      	mov	r6, r5
 8008f82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f86:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008f8a:	f017 0708 	ands.w	r7, r7, #8
 8008f8e:	d1f7      	bne.n	8008f80 <_strtol_l.constprop.0+0x20>
 8008f90:	2c2d      	cmp	r4, #45	; 0x2d
 8008f92:	d132      	bne.n	8008ffa <_strtol_l.constprop.0+0x9a>
 8008f94:	782c      	ldrb	r4, [r5, #0]
 8008f96:	2701      	movs	r7, #1
 8008f98:	1cb5      	adds	r5, r6, #2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d05b      	beq.n	8009056 <_strtol_l.constprop.0+0xf6>
 8008f9e:	2b10      	cmp	r3, #16
 8008fa0:	d109      	bne.n	8008fb6 <_strtol_l.constprop.0+0x56>
 8008fa2:	2c30      	cmp	r4, #48	; 0x30
 8008fa4:	d107      	bne.n	8008fb6 <_strtol_l.constprop.0+0x56>
 8008fa6:	782c      	ldrb	r4, [r5, #0]
 8008fa8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008fac:	2c58      	cmp	r4, #88	; 0x58
 8008fae:	d14d      	bne.n	800904c <_strtol_l.constprop.0+0xec>
 8008fb0:	786c      	ldrb	r4, [r5, #1]
 8008fb2:	2310      	movs	r3, #16
 8008fb4:	3502      	adds	r5, #2
 8008fb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008fba:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fbe:	f04f 0e00 	mov.w	lr, #0
 8008fc2:	fbb8 f9f3 	udiv	r9, r8, r3
 8008fc6:	4676      	mov	r6, lr
 8008fc8:	fb03 8a19 	mls	sl, r3, r9, r8
 8008fcc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008fd0:	f1bc 0f09 	cmp.w	ip, #9
 8008fd4:	d816      	bhi.n	8009004 <_strtol_l.constprop.0+0xa4>
 8008fd6:	4664      	mov	r4, ip
 8008fd8:	42a3      	cmp	r3, r4
 8008fda:	dd24      	ble.n	8009026 <_strtol_l.constprop.0+0xc6>
 8008fdc:	f1be 3fff 	cmp.w	lr, #4294967295
 8008fe0:	d008      	beq.n	8008ff4 <_strtol_l.constprop.0+0x94>
 8008fe2:	45b1      	cmp	r9, r6
 8008fe4:	d31c      	bcc.n	8009020 <_strtol_l.constprop.0+0xc0>
 8008fe6:	d101      	bne.n	8008fec <_strtol_l.constprop.0+0x8c>
 8008fe8:	45a2      	cmp	sl, r4
 8008fea:	db19      	blt.n	8009020 <_strtol_l.constprop.0+0xc0>
 8008fec:	fb06 4603 	mla	r6, r6, r3, r4
 8008ff0:	f04f 0e01 	mov.w	lr, #1
 8008ff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ff8:	e7e8      	b.n	8008fcc <_strtol_l.constprop.0+0x6c>
 8008ffa:	2c2b      	cmp	r4, #43	; 0x2b
 8008ffc:	bf04      	itt	eq
 8008ffe:	782c      	ldrbeq	r4, [r5, #0]
 8009000:	1cb5      	addeq	r5, r6, #2
 8009002:	e7ca      	b.n	8008f9a <_strtol_l.constprop.0+0x3a>
 8009004:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009008:	f1bc 0f19 	cmp.w	ip, #25
 800900c:	d801      	bhi.n	8009012 <_strtol_l.constprop.0+0xb2>
 800900e:	3c37      	subs	r4, #55	; 0x37
 8009010:	e7e2      	b.n	8008fd8 <_strtol_l.constprop.0+0x78>
 8009012:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009016:	f1bc 0f19 	cmp.w	ip, #25
 800901a:	d804      	bhi.n	8009026 <_strtol_l.constprop.0+0xc6>
 800901c:	3c57      	subs	r4, #87	; 0x57
 800901e:	e7db      	b.n	8008fd8 <_strtol_l.constprop.0+0x78>
 8009020:	f04f 3eff 	mov.w	lr, #4294967295
 8009024:	e7e6      	b.n	8008ff4 <_strtol_l.constprop.0+0x94>
 8009026:	f1be 3fff 	cmp.w	lr, #4294967295
 800902a:	d105      	bne.n	8009038 <_strtol_l.constprop.0+0xd8>
 800902c:	2322      	movs	r3, #34	; 0x22
 800902e:	6003      	str	r3, [r0, #0]
 8009030:	4646      	mov	r6, r8
 8009032:	b942      	cbnz	r2, 8009046 <_strtol_l.constprop.0+0xe6>
 8009034:	4630      	mov	r0, r6
 8009036:	e79e      	b.n	8008f76 <_strtol_l.constprop.0+0x16>
 8009038:	b107      	cbz	r7, 800903c <_strtol_l.constprop.0+0xdc>
 800903a:	4276      	negs	r6, r6
 800903c:	2a00      	cmp	r2, #0
 800903e:	d0f9      	beq.n	8009034 <_strtol_l.constprop.0+0xd4>
 8009040:	f1be 0f00 	cmp.w	lr, #0
 8009044:	d000      	beq.n	8009048 <_strtol_l.constprop.0+0xe8>
 8009046:	1e69      	subs	r1, r5, #1
 8009048:	6011      	str	r1, [r2, #0]
 800904a:	e7f3      	b.n	8009034 <_strtol_l.constprop.0+0xd4>
 800904c:	2430      	movs	r4, #48	; 0x30
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1b1      	bne.n	8008fb6 <_strtol_l.constprop.0+0x56>
 8009052:	2308      	movs	r3, #8
 8009054:	e7af      	b.n	8008fb6 <_strtol_l.constprop.0+0x56>
 8009056:	2c30      	cmp	r4, #48	; 0x30
 8009058:	d0a5      	beq.n	8008fa6 <_strtol_l.constprop.0+0x46>
 800905a:	230a      	movs	r3, #10
 800905c:	e7ab      	b.n	8008fb6 <_strtol_l.constprop.0+0x56>
 800905e:	bf00      	nop
 8009060:	0800f189 	.word	0x0800f189

08009064 <_strtol_r>:
 8009064:	f7ff bf7c 	b.w	8008f60 <_strtol_l.constprop.0>

08009068 <strtol>:
 8009068:	4613      	mov	r3, r2
 800906a:	460a      	mov	r2, r1
 800906c:	4601      	mov	r1, r0
 800906e:	4802      	ldr	r0, [pc, #8]	; (8009078 <strtol+0x10>)
 8009070:	6800      	ldr	r0, [r0, #0]
 8009072:	f7ff bf75 	b.w	8008f60 <_strtol_l.constprop.0>
 8009076:	bf00      	nop
 8009078:	200001e0 	.word	0x200001e0

0800907c <__cvt>:
 800907c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	ec55 4b10 	vmov	r4, r5, d0
 8009084:	2d00      	cmp	r5, #0
 8009086:	460e      	mov	r6, r1
 8009088:	4619      	mov	r1, r3
 800908a:	462b      	mov	r3, r5
 800908c:	bfbb      	ittet	lt
 800908e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009092:	461d      	movlt	r5, r3
 8009094:	2300      	movge	r3, #0
 8009096:	232d      	movlt	r3, #45	; 0x2d
 8009098:	700b      	strb	r3, [r1, #0]
 800909a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800909c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090a0:	4691      	mov	r9, r2
 80090a2:	f023 0820 	bic.w	r8, r3, #32
 80090a6:	bfbc      	itt	lt
 80090a8:	4622      	movlt	r2, r4
 80090aa:	4614      	movlt	r4, r2
 80090ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090b0:	d005      	beq.n	80090be <__cvt+0x42>
 80090b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090b6:	d100      	bne.n	80090ba <__cvt+0x3e>
 80090b8:	3601      	adds	r6, #1
 80090ba:	2102      	movs	r1, #2
 80090bc:	e000      	b.n	80090c0 <__cvt+0x44>
 80090be:	2103      	movs	r1, #3
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	ab02      	add	r3, sp, #8
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	ec45 4b10 	vmov	d0, r4, r5
 80090cc:	4653      	mov	r3, sl
 80090ce:	4632      	mov	r2, r6
 80090d0:	f001 f982 	bl	800a3d8 <_dtoa_r>
 80090d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80090d8:	4607      	mov	r7, r0
 80090da:	d102      	bne.n	80090e2 <__cvt+0x66>
 80090dc:	f019 0f01 	tst.w	r9, #1
 80090e0:	d022      	beq.n	8009128 <__cvt+0xac>
 80090e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090e6:	eb07 0906 	add.w	r9, r7, r6
 80090ea:	d110      	bne.n	800910e <__cvt+0x92>
 80090ec:	783b      	ldrb	r3, [r7, #0]
 80090ee:	2b30      	cmp	r3, #48	; 0x30
 80090f0:	d10a      	bne.n	8009108 <__cvt+0x8c>
 80090f2:	2200      	movs	r2, #0
 80090f4:	2300      	movs	r3, #0
 80090f6:	4620      	mov	r0, r4
 80090f8:	4629      	mov	r1, r5
 80090fa:	f7f7 fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 80090fe:	b918      	cbnz	r0, 8009108 <__cvt+0x8c>
 8009100:	f1c6 0601 	rsb	r6, r6, #1
 8009104:	f8ca 6000 	str.w	r6, [sl]
 8009108:	f8da 3000 	ldr.w	r3, [sl]
 800910c:	4499      	add	r9, r3
 800910e:	2200      	movs	r2, #0
 8009110:	2300      	movs	r3, #0
 8009112:	4620      	mov	r0, r4
 8009114:	4629      	mov	r1, r5
 8009116:	f7f7 fcd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800911a:	b108      	cbz	r0, 8009120 <__cvt+0xa4>
 800911c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009120:	2230      	movs	r2, #48	; 0x30
 8009122:	9b03      	ldr	r3, [sp, #12]
 8009124:	454b      	cmp	r3, r9
 8009126:	d307      	bcc.n	8009138 <__cvt+0xbc>
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800912c:	1bdb      	subs	r3, r3, r7
 800912e:	4638      	mov	r0, r7
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	b004      	add	sp, #16
 8009134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009138:	1c59      	adds	r1, r3, #1
 800913a:	9103      	str	r1, [sp, #12]
 800913c:	701a      	strb	r2, [r3, #0]
 800913e:	e7f0      	b.n	8009122 <__cvt+0xa6>

08009140 <__exponent>:
 8009140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009142:	4603      	mov	r3, r0
 8009144:	2900      	cmp	r1, #0
 8009146:	bfb8      	it	lt
 8009148:	4249      	neglt	r1, r1
 800914a:	f803 2b02 	strb.w	r2, [r3], #2
 800914e:	bfb4      	ite	lt
 8009150:	222d      	movlt	r2, #45	; 0x2d
 8009152:	222b      	movge	r2, #43	; 0x2b
 8009154:	2909      	cmp	r1, #9
 8009156:	7042      	strb	r2, [r0, #1]
 8009158:	dd2a      	ble.n	80091b0 <__exponent+0x70>
 800915a:	f10d 0207 	add.w	r2, sp, #7
 800915e:	4617      	mov	r7, r2
 8009160:	260a      	movs	r6, #10
 8009162:	4694      	mov	ip, r2
 8009164:	fb91 f5f6 	sdiv	r5, r1, r6
 8009168:	fb06 1415 	mls	r4, r6, r5, r1
 800916c:	3430      	adds	r4, #48	; 0x30
 800916e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009172:	460c      	mov	r4, r1
 8009174:	2c63      	cmp	r4, #99	; 0x63
 8009176:	f102 32ff 	add.w	r2, r2, #4294967295
 800917a:	4629      	mov	r1, r5
 800917c:	dcf1      	bgt.n	8009162 <__exponent+0x22>
 800917e:	3130      	adds	r1, #48	; 0x30
 8009180:	f1ac 0402 	sub.w	r4, ip, #2
 8009184:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009188:	1c41      	adds	r1, r0, #1
 800918a:	4622      	mov	r2, r4
 800918c:	42ba      	cmp	r2, r7
 800918e:	d30a      	bcc.n	80091a6 <__exponent+0x66>
 8009190:	f10d 0209 	add.w	r2, sp, #9
 8009194:	eba2 020c 	sub.w	r2, r2, ip
 8009198:	42bc      	cmp	r4, r7
 800919a:	bf88      	it	hi
 800919c:	2200      	movhi	r2, #0
 800919e:	4413      	add	r3, r2
 80091a0:	1a18      	subs	r0, r3, r0
 80091a2:	b003      	add	sp, #12
 80091a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80091aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80091ae:	e7ed      	b.n	800918c <__exponent+0x4c>
 80091b0:	2330      	movs	r3, #48	; 0x30
 80091b2:	3130      	adds	r1, #48	; 0x30
 80091b4:	7083      	strb	r3, [r0, #2]
 80091b6:	70c1      	strb	r1, [r0, #3]
 80091b8:	1d03      	adds	r3, r0, #4
 80091ba:	e7f1      	b.n	80091a0 <__exponent+0x60>

080091bc <_printf_float>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	ed2d 8b02 	vpush	{d8}
 80091c4:	b08d      	sub	sp, #52	; 0x34
 80091c6:	460c      	mov	r4, r1
 80091c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80091cc:	4616      	mov	r6, r2
 80091ce:	461f      	mov	r7, r3
 80091d0:	4605      	mov	r5, r0
 80091d2:	f000 ffaf 	bl	800a134 <_localeconv_r>
 80091d6:	f8d0 a000 	ldr.w	sl, [r0]
 80091da:	4650      	mov	r0, sl
 80091dc:	f7f7 f848 	bl	8000270 <strlen>
 80091e0:	2300      	movs	r3, #0
 80091e2:	930a      	str	r3, [sp, #40]	; 0x28
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	9305      	str	r3, [sp, #20]
 80091e8:	f8d8 3000 	ldr.w	r3, [r8]
 80091ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80091f0:	3307      	adds	r3, #7
 80091f2:	f023 0307 	bic.w	r3, r3, #7
 80091f6:	f103 0208 	add.w	r2, r3, #8
 80091fa:	f8c8 2000 	str.w	r2, [r8]
 80091fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009202:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009206:	9307      	str	r3, [sp, #28]
 8009208:	f8cd 8018 	str.w	r8, [sp, #24]
 800920c:	ee08 0a10 	vmov	s16, r0
 8009210:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009218:	4b9e      	ldr	r3, [pc, #632]	; (8009494 <_printf_float+0x2d8>)
 800921a:	f04f 32ff 	mov.w	r2, #4294967295
 800921e:	f7f7 fc85 	bl	8000b2c <__aeabi_dcmpun>
 8009222:	bb88      	cbnz	r0, 8009288 <_printf_float+0xcc>
 8009224:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009228:	4b9a      	ldr	r3, [pc, #616]	; (8009494 <_printf_float+0x2d8>)
 800922a:	f04f 32ff 	mov.w	r2, #4294967295
 800922e:	f7f7 fc5f 	bl	8000af0 <__aeabi_dcmple>
 8009232:	bb48      	cbnz	r0, 8009288 <_printf_float+0xcc>
 8009234:	2200      	movs	r2, #0
 8009236:	2300      	movs	r3, #0
 8009238:	4640      	mov	r0, r8
 800923a:	4649      	mov	r1, r9
 800923c:	f7f7 fc4e 	bl	8000adc <__aeabi_dcmplt>
 8009240:	b110      	cbz	r0, 8009248 <_printf_float+0x8c>
 8009242:	232d      	movs	r3, #45	; 0x2d
 8009244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009248:	4a93      	ldr	r2, [pc, #588]	; (8009498 <_printf_float+0x2dc>)
 800924a:	4b94      	ldr	r3, [pc, #592]	; (800949c <_printf_float+0x2e0>)
 800924c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009250:	bf94      	ite	ls
 8009252:	4690      	movls	r8, r2
 8009254:	4698      	movhi	r8, r3
 8009256:	2303      	movs	r3, #3
 8009258:	6123      	str	r3, [r4, #16]
 800925a:	9b05      	ldr	r3, [sp, #20]
 800925c:	f023 0304 	bic.w	r3, r3, #4
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	f04f 0900 	mov.w	r9, #0
 8009266:	9700      	str	r7, [sp, #0]
 8009268:	4633      	mov	r3, r6
 800926a:	aa0b      	add	r2, sp, #44	; 0x2c
 800926c:	4621      	mov	r1, r4
 800926e:	4628      	mov	r0, r5
 8009270:	f000 f9da 	bl	8009628 <_printf_common>
 8009274:	3001      	adds	r0, #1
 8009276:	f040 8090 	bne.w	800939a <_printf_float+0x1de>
 800927a:	f04f 30ff 	mov.w	r0, #4294967295
 800927e:	b00d      	add	sp, #52	; 0x34
 8009280:	ecbd 8b02 	vpop	{d8}
 8009284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009288:	4642      	mov	r2, r8
 800928a:	464b      	mov	r3, r9
 800928c:	4640      	mov	r0, r8
 800928e:	4649      	mov	r1, r9
 8009290:	f7f7 fc4c 	bl	8000b2c <__aeabi_dcmpun>
 8009294:	b140      	cbz	r0, 80092a8 <_printf_float+0xec>
 8009296:	464b      	mov	r3, r9
 8009298:	2b00      	cmp	r3, #0
 800929a:	bfbc      	itt	lt
 800929c:	232d      	movlt	r3, #45	; 0x2d
 800929e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092a2:	4a7f      	ldr	r2, [pc, #508]	; (80094a0 <_printf_float+0x2e4>)
 80092a4:	4b7f      	ldr	r3, [pc, #508]	; (80094a4 <_printf_float+0x2e8>)
 80092a6:	e7d1      	b.n	800924c <_printf_float+0x90>
 80092a8:	6863      	ldr	r3, [r4, #4]
 80092aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80092ae:	9206      	str	r2, [sp, #24]
 80092b0:	1c5a      	adds	r2, r3, #1
 80092b2:	d13f      	bne.n	8009334 <_printf_float+0x178>
 80092b4:	2306      	movs	r3, #6
 80092b6:	6063      	str	r3, [r4, #4]
 80092b8:	9b05      	ldr	r3, [sp, #20]
 80092ba:	6861      	ldr	r1, [r4, #4]
 80092bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80092c0:	2300      	movs	r3, #0
 80092c2:	9303      	str	r3, [sp, #12]
 80092c4:	ab0a      	add	r3, sp, #40	; 0x28
 80092c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80092ca:	ab09      	add	r3, sp, #36	; 0x24
 80092cc:	ec49 8b10 	vmov	d0, r8, r9
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	6022      	str	r2, [r4, #0]
 80092d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092d8:	4628      	mov	r0, r5
 80092da:	f7ff fecf 	bl	800907c <__cvt>
 80092de:	9b06      	ldr	r3, [sp, #24]
 80092e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092e2:	2b47      	cmp	r3, #71	; 0x47
 80092e4:	4680      	mov	r8, r0
 80092e6:	d108      	bne.n	80092fa <_printf_float+0x13e>
 80092e8:	1cc8      	adds	r0, r1, #3
 80092ea:	db02      	blt.n	80092f2 <_printf_float+0x136>
 80092ec:	6863      	ldr	r3, [r4, #4]
 80092ee:	4299      	cmp	r1, r3
 80092f0:	dd41      	ble.n	8009376 <_printf_float+0x1ba>
 80092f2:	f1ab 0302 	sub.w	r3, fp, #2
 80092f6:	fa5f fb83 	uxtb.w	fp, r3
 80092fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092fe:	d820      	bhi.n	8009342 <_printf_float+0x186>
 8009300:	3901      	subs	r1, #1
 8009302:	465a      	mov	r2, fp
 8009304:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009308:	9109      	str	r1, [sp, #36]	; 0x24
 800930a:	f7ff ff19 	bl	8009140 <__exponent>
 800930e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009310:	1813      	adds	r3, r2, r0
 8009312:	2a01      	cmp	r2, #1
 8009314:	4681      	mov	r9, r0
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	dc02      	bgt.n	8009320 <_printf_float+0x164>
 800931a:	6822      	ldr	r2, [r4, #0]
 800931c:	07d2      	lsls	r2, r2, #31
 800931e:	d501      	bpl.n	8009324 <_printf_float+0x168>
 8009320:	3301      	adds	r3, #1
 8009322:	6123      	str	r3, [r4, #16]
 8009324:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009328:	2b00      	cmp	r3, #0
 800932a:	d09c      	beq.n	8009266 <_printf_float+0xaa>
 800932c:	232d      	movs	r3, #45	; 0x2d
 800932e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009332:	e798      	b.n	8009266 <_printf_float+0xaa>
 8009334:	9a06      	ldr	r2, [sp, #24]
 8009336:	2a47      	cmp	r2, #71	; 0x47
 8009338:	d1be      	bne.n	80092b8 <_printf_float+0xfc>
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1bc      	bne.n	80092b8 <_printf_float+0xfc>
 800933e:	2301      	movs	r3, #1
 8009340:	e7b9      	b.n	80092b6 <_printf_float+0xfa>
 8009342:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009346:	d118      	bne.n	800937a <_printf_float+0x1be>
 8009348:	2900      	cmp	r1, #0
 800934a:	6863      	ldr	r3, [r4, #4]
 800934c:	dd0b      	ble.n	8009366 <_printf_float+0x1aa>
 800934e:	6121      	str	r1, [r4, #16]
 8009350:	b913      	cbnz	r3, 8009358 <_printf_float+0x19c>
 8009352:	6822      	ldr	r2, [r4, #0]
 8009354:	07d0      	lsls	r0, r2, #31
 8009356:	d502      	bpl.n	800935e <_printf_float+0x1a2>
 8009358:	3301      	adds	r3, #1
 800935a:	440b      	add	r3, r1
 800935c:	6123      	str	r3, [r4, #16]
 800935e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009360:	f04f 0900 	mov.w	r9, #0
 8009364:	e7de      	b.n	8009324 <_printf_float+0x168>
 8009366:	b913      	cbnz	r3, 800936e <_printf_float+0x1b2>
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	07d2      	lsls	r2, r2, #31
 800936c:	d501      	bpl.n	8009372 <_printf_float+0x1b6>
 800936e:	3302      	adds	r3, #2
 8009370:	e7f4      	b.n	800935c <_printf_float+0x1a0>
 8009372:	2301      	movs	r3, #1
 8009374:	e7f2      	b.n	800935c <_printf_float+0x1a0>
 8009376:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800937a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800937c:	4299      	cmp	r1, r3
 800937e:	db05      	blt.n	800938c <_printf_float+0x1d0>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	6121      	str	r1, [r4, #16]
 8009384:	07d8      	lsls	r0, r3, #31
 8009386:	d5ea      	bpl.n	800935e <_printf_float+0x1a2>
 8009388:	1c4b      	adds	r3, r1, #1
 800938a:	e7e7      	b.n	800935c <_printf_float+0x1a0>
 800938c:	2900      	cmp	r1, #0
 800938e:	bfd4      	ite	le
 8009390:	f1c1 0202 	rsble	r2, r1, #2
 8009394:	2201      	movgt	r2, #1
 8009396:	4413      	add	r3, r2
 8009398:	e7e0      	b.n	800935c <_printf_float+0x1a0>
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	055a      	lsls	r2, r3, #21
 800939e:	d407      	bmi.n	80093b0 <_printf_float+0x1f4>
 80093a0:	6923      	ldr	r3, [r4, #16]
 80093a2:	4642      	mov	r2, r8
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	3001      	adds	r0, #1
 80093ac:	d12c      	bne.n	8009408 <_printf_float+0x24c>
 80093ae:	e764      	b.n	800927a <_printf_float+0xbe>
 80093b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093b4:	f240 80e0 	bls.w	8009578 <_printf_float+0x3bc>
 80093b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093bc:	2200      	movs	r2, #0
 80093be:	2300      	movs	r3, #0
 80093c0:	f7f7 fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d034      	beq.n	8009432 <_printf_float+0x276>
 80093c8:	4a37      	ldr	r2, [pc, #220]	; (80094a8 <_printf_float+0x2ec>)
 80093ca:	2301      	movs	r3, #1
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	f43f af51 	beq.w	800927a <_printf_float+0xbe>
 80093d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093dc:	429a      	cmp	r2, r3
 80093de:	db02      	blt.n	80093e6 <_printf_float+0x22a>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	07d8      	lsls	r0, r3, #31
 80093e4:	d510      	bpl.n	8009408 <_printf_float+0x24c>
 80093e6:	ee18 3a10 	vmov	r3, s16
 80093ea:	4652      	mov	r2, sl
 80093ec:	4631      	mov	r1, r6
 80093ee:	4628      	mov	r0, r5
 80093f0:	47b8      	blx	r7
 80093f2:	3001      	adds	r0, #1
 80093f4:	f43f af41 	beq.w	800927a <_printf_float+0xbe>
 80093f8:	f04f 0800 	mov.w	r8, #0
 80093fc:	f104 091a 	add.w	r9, r4, #26
 8009400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009402:	3b01      	subs	r3, #1
 8009404:	4543      	cmp	r3, r8
 8009406:	dc09      	bgt.n	800941c <_printf_float+0x260>
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	079b      	lsls	r3, r3, #30
 800940c:	f100 8107 	bmi.w	800961e <_printf_float+0x462>
 8009410:	68e0      	ldr	r0, [r4, #12]
 8009412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009414:	4298      	cmp	r0, r3
 8009416:	bfb8      	it	lt
 8009418:	4618      	movlt	r0, r3
 800941a:	e730      	b.n	800927e <_printf_float+0xc2>
 800941c:	2301      	movs	r3, #1
 800941e:	464a      	mov	r2, r9
 8009420:	4631      	mov	r1, r6
 8009422:	4628      	mov	r0, r5
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	f43f af27 	beq.w	800927a <_printf_float+0xbe>
 800942c:	f108 0801 	add.w	r8, r8, #1
 8009430:	e7e6      	b.n	8009400 <_printf_float+0x244>
 8009432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009434:	2b00      	cmp	r3, #0
 8009436:	dc39      	bgt.n	80094ac <_printf_float+0x2f0>
 8009438:	4a1b      	ldr	r2, [pc, #108]	; (80094a8 <_printf_float+0x2ec>)
 800943a:	2301      	movs	r3, #1
 800943c:	4631      	mov	r1, r6
 800943e:	4628      	mov	r0, r5
 8009440:	47b8      	blx	r7
 8009442:	3001      	adds	r0, #1
 8009444:	f43f af19 	beq.w	800927a <_printf_float+0xbe>
 8009448:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800944c:	4313      	orrs	r3, r2
 800944e:	d102      	bne.n	8009456 <_printf_float+0x29a>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	07d9      	lsls	r1, r3, #31
 8009454:	d5d8      	bpl.n	8009408 <_printf_float+0x24c>
 8009456:	ee18 3a10 	vmov	r3, s16
 800945a:	4652      	mov	r2, sl
 800945c:	4631      	mov	r1, r6
 800945e:	4628      	mov	r0, r5
 8009460:	47b8      	blx	r7
 8009462:	3001      	adds	r0, #1
 8009464:	f43f af09 	beq.w	800927a <_printf_float+0xbe>
 8009468:	f04f 0900 	mov.w	r9, #0
 800946c:	f104 0a1a 	add.w	sl, r4, #26
 8009470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009472:	425b      	negs	r3, r3
 8009474:	454b      	cmp	r3, r9
 8009476:	dc01      	bgt.n	800947c <_printf_float+0x2c0>
 8009478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800947a:	e792      	b.n	80093a2 <_printf_float+0x1e6>
 800947c:	2301      	movs	r3, #1
 800947e:	4652      	mov	r2, sl
 8009480:	4631      	mov	r1, r6
 8009482:	4628      	mov	r0, r5
 8009484:	47b8      	blx	r7
 8009486:	3001      	adds	r0, #1
 8009488:	f43f aef7 	beq.w	800927a <_printf_float+0xbe>
 800948c:	f109 0901 	add.w	r9, r9, #1
 8009490:	e7ee      	b.n	8009470 <_printf_float+0x2b4>
 8009492:	bf00      	nop
 8009494:	7fefffff 	.word	0x7fefffff
 8009498:	0800f289 	.word	0x0800f289
 800949c:	0800f28d 	.word	0x0800f28d
 80094a0:	0800f291 	.word	0x0800f291
 80094a4:	0800f295 	.word	0x0800f295
 80094a8:	0800f299 	.word	0x0800f299
 80094ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094b0:	429a      	cmp	r2, r3
 80094b2:	bfa8      	it	ge
 80094b4:	461a      	movge	r2, r3
 80094b6:	2a00      	cmp	r2, #0
 80094b8:	4691      	mov	r9, r2
 80094ba:	dc37      	bgt.n	800952c <_printf_float+0x370>
 80094bc:	f04f 0b00 	mov.w	fp, #0
 80094c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094c4:	f104 021a 	add.w	r2, r4, #26
 80094c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094ca:	9305      	str	r3, [sp, #20]
 80094cc:	eba3 0309 	sub.w	r3, r3, r9
 80094d0:	455b      	cmp	r3, fp
 80094d2:	dc33      	bgt.n	800953c <_printf_float+0x380>
 80094d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094d8:	429a      	cmp	r2, r3
 80094da:	db3b      	blt.n	8009554 <_printf_float+0x398>
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	07da      	lsls	r2, r3, #31
 80094e0:	d438      	bmi.n	8009554 <_printf_float+0x398>
 80094e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094e6:	eba2 0903 	sub.w	r9, r2, r3
 80094ea:	9b05      	ldr	r3, [sp, #20]
 80094ec:	1ad2      	subs	r2, r2, r3
 80094ee:	4591      	cmp	r9, r2
 80094f0:	bfa8      	it	ge
 80094f2:	4691      	movge	r9, r2
 80094f4:	f1b9 0f00 	cmp.w	r9, #0
 80094f8:	dc35      	bgt.n	8009566 <_printf_float+0x3aa>
 80094fa:	f04f 0800 	mov.w	r8, #0
 80094fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009502:	f104 0a1a 	add.w	sl, r4, #26
 8009506:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800950a:	1a9b      	subs	r3, r3, r2
 800950c:	eba3 0309 	sub.w	r3, r3, r9
 8009510:	4543      	cmp	r3, r8
 8009512:	f77f af79 	ble.w	8009408 <_printf_float+0x24c>
 8009516:	2301      	movs	r3, #1
 8009518:	4652      	mov	r2, sl
 800951a:	4631      	mov	r1, r6
 800951c:	4628      	mov	r0, r5
 800951e:	47b8      	blx	r7
 8009520:	3001      	adds	r0, #1
 8009522:	f43f aeaa 	beq.w	800927a <_printf_float+0xbe>
 8009526:	f108 0801 	add.w	r8, r8, #1
 800952a:	e7ec      	b.n	8009506 <_printf_float+0x34a>
 800952c:	4613      	mov	r3, r2
 800952e:	4631      	mov	r1, r6
 8009530:	4642      	mov	r2, r8
 8009532:	4628      	mov	r0, r5
 8009534:	47b8      	blx	r7
 8009536:	3001      	adds	r0, #1
 8009538:	d1c0      	bne.n	80094bc <_printf_float+0x300>
 800953a:	e69e      	b.n	800927a <_printf_float+0xbe>
 800953c:	2301      	movs	r3, #1
 800953e:	4631      	mov	r1, r6
 8009540:	4628      	mov	r0, r5
 8009542:	9205      	str	r2, [sp, #20]
 8009544:	47b8      	blx	r7
 8009546:	3001      	adds	r0, #1
 8009548:	f43f ae97 	beq.w	800927a <_printf_float+0xbe>
 800954c:	9a05      	ldr	r2, [sp, #20]
 800954e:	f10b 0b01 	add.w	fp, fp, #1
 8009552:	e7b9      	b.n	80094c8 <_printf_float+0x30c>
 8009554:	ee18 3a10 	vmov	r3, s16
 8009558:	4652      	mov	r2, sl
 800955a:	4631      	mov	r1, r6
 800955c:	4628      	mov	r0, r5
 800955e:	47b8      	blx	r7
 8009560:	3001      	adds	r0, #1
 8009562:	d1be      	bne.n	80094e2 <_printf_float+0x326>
 8009564:	e689      	b.n	800927a <_printf_float+0xbe>
 8009566:	9a05      	ldr	r2, [sp, #20]
 8009568:	464b      	mov	r3, r9
 800956a:	4442      	add	r2, r8
 800956c:	4631      	mov	r1, r6
 800956e:	4628      	mov	r0, r5
 8009570:	47b8      	blx	r7
 8009572:	3001      	adds	r0, #1
 8009574:	d1c1      	bne.n	80094fa <_printf_float+0x33e>
 8009576:	e680      	b.n	800927a <_printf_float+0xbe>
 8009578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800957a:	2a01      	cmp	r2, #1
 800957c:	dc01      	bgt.n	8009582 <_printf_float+0x3c6>
 800957e:	07db      	lsls	r3, r3, #31
 8009580:	d53a      	bpl.n	80095f8 <_printf_float+0x43c>
 8009582:	2301      	movs	r3, #1
 8009584:	4642      	mov	r2, r8
 8009586:	4631      	mov	r1, r6
 8009588:	4628      	mov	r0, r5
 800958a:	47b8      	blx	r7
 800958c:	3001      	adds	r0, #1
 800958e:	f43f ae74 	beq.w	800927a <_printf_float+0xbe>
 8009592:	ee18 3a10 	vmov	r3, s16
 8009596:	4652      	mov	r2, sl
 8009598:	4631      	mov	r1, r6
 800959a:	4628      	mov	r0, r5
 800959c:	47b8      	blx	r7
 800959e:	3001      	adds	r0, #1
 80095a0:	f43f ae6b 	beq.w	800927a <_printf_float+0xbe>
 80095a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095a8:	2200      	movs	r2, #0
 80095aa:	2300      	movs	r3, #0
 80095ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80095b0:	f7f7 fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80095b4:	b9d8      	cbnz	r0, 80095ee <_printf_float+0x432>
 80095b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80095ba:	f108 0201 	add.w	r2, r8, #1
 80095be:	4631      	mov	r1, r6
 80095c0:	4628      	mov	r0, r5
 80095c2:	47b8      	blx	r7
 80095c4:	3001      	adds	r0, #1
 80095c6:	d10e      	bne.n	80095e6 <_printf_float+0x42a>
 80095c8:	e657      	b.n	800927a <_printf_float+0xbe>
 80095ca:	2301      	movs	r3, #1
 80095cc:	4652      	mov	r2, sl
 80095ce:	4631      	mov	r1, r6
 80095d0:	4628      	mov	r0, r5
 80095d2:	47b8      	blx	r7
 80095d4:	3001      	adds	r0, #1
 80095d6:	f43f ae50 	beq.w	800927a <_printf_float+0xbe>
 80095da:	f108 0801 	add.w	r8, r8, #1
 80095de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e0:	3b01      	subs	r3, #1
 80095e2:	4543      	cmp	r3, r8
 80095e4:	dcf1      	bgt.n	80095ca <_printf_float+0x40e>
 80095e6:	464b      	mov	r3, r9
 80095e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80095ec:	e6da      	b.n	80093a4 <_printf_float+0x1e8>
 80095ee:	f04f 0800 	mov.w	r8, #0
 80095f2:	f104 0a1a 	add.w	sl, r4, #26
 80095f6:	e7f2      	b.n	80095de <_printf_float+0x422>
 80095f8:	2301      	movs	r3, #1
 80095fa:	4642      	mov	r2, r8
 80095fc:	e7df      	b.n	80095be <_printf_float+0x402>
 80095fe:	2301      	movs	r3, #1
 8009600:	464a      	mov	r2, r9
 8009602:	4631      	mov	r1, r6
 8009604:	4628      	mov	r0, r5
 8009606:	47b8      	blx	r7
 8009608:	3001      	adds	r0, #1
 800960a:	f43f ae36 	beq.w	800927a <_printf_float+0xbe>
 800960e:	f108 0801 	add.w	r8, r8, #1
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009616:	1a5b      	subs	r3, r3, r1
 8009618:	4543      	cmp	r3, r8
 800961a:	dcf0      	bgt.n	80095fe <_printf_float+0x442>
 800961c:	e6f8      	b.n	8009410 <_printf_float+0x254>
 800961e:	f04f 0800 	mov.w	r8, #0
 8009622:	f104 0919 	add.w	r9, r4, #25
 8009626:	e7f4      	b.n	8009612 <_printf_float+0x456>

08009628 <_printf_common>:
 8009628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800962c:	4616      	mov	r6, r2
 800962e:	4699      	mov	r9, r3
 8009630:	688a      	ldr	r2, [r1, #8]
 8009632:	690b      	ldr	r3, [r1, #16]
 8009634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009638:	4293      	cmp	r3, r2
 800963a:	bfb8      	it	lt
 800963c:	4613      	movlt	r3, r2
 800963e:	6033      	str	r3, [r6, #0]
 8009640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009644:	4607      	mov	r7, r0
 8009646:	460c      	mov	r4, r1
 8009648:	b10a      	cbz	r2, 800964e <_printf_common+0x26>
 800964a:	3301      	adds	r3, #1
 800964c:	6033      	str	r3, [r6, #0]
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	0699      	lsls	r1, r3, #26
 8009652:	bf42      	ittt	mi
 8009654:	6833      	ldrmi	r3, [r6, #0]
 8009656:	3302      	addmi	r3, #2
 8009658:	6033      	strmi	r3, [r6, #0]
 800965a:	6825      	ldr	r5, [r4, #0]
 800965c:	f015 0506 	ands.w	r5, r5, #6
 8009660:	d106      	bne.n	8009670 <_printf_common+0x48>
 8009662:	f104 0a19 	add.w	sl, r4, #25
 8009666:	68e3      	ldr	r3, [r4, #12]
 8009668:	6832      	ldr	r2, [r6, #0]
 800966a:	1a9b      	subs	r3, r3, r2
 800966c:	42ab      	cmp	r3, r5
 800966e:	dc26      	bgt.n	80096be <_printf_common+0x96>
 8009670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009674:	1e13      	subs	r3, r2, #0
 8009676:	6822      	ldr	r2, [r4, #0]
 8009678:	bf18      	it	ne
 800967a:	2301      	movne	r3, #1
 800967c:	0692      	lsls	r2, r2, #26
 800967e:	d42b      	bmi.n	80096d8 <_printf_common+0xb0>
 8009680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009684:	4649      	mov	r1, r9
 8009686:	4638      	mov	r0, r7
 8009688:	47c0      	blx	r8
 800968a:	3001      	adds	r0, #1
 800968c:	d01e      	beq.n	80096cc <_printf_common+0xa4>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	6922      	ldr	r2, [r4, #16]
 8009692:	f003 0306 	and.w	r3, r3, #6
 8009696:	2b04      	cmp	r3, #4
 8009698:	bf02      	ittt	eq
 800969a:	68e5      	ldreq	r5, [r4, #12]
 800969c:	6833      	ldreq	r3, [r6, #0]
 800969e:	1aed      	subeq	r5, r5, r3
 80096a0:	68a3      	ldr	r3, [r4, #8]
 80096a2:	bf0c      	ite	eq
 80096a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096a8:	2500      	movne	r5, #0
 80096aa:	4293      	cmp	r3, r2
 80096ac:	bfc4      	itt	gt
 80096ae:	1a9b      	subgt	r3, r3, r2
 80096b0:	18ed      	addgt	r5, r5, r3
 80096b2:	2600      	movs	r6, #0
 80096b4:	341a      	adds	r4, #26
 80096b6:	42b5      	cmp	r5, r6
 80096b8:	d11a      	bne.n	80096f0 <_printf_common+0xc8>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e008      	b.n	80096d0 <_printf_common+0xa8>
 80096be:	2301      	movs	r3, #1
 80096c0:	4652      	mov	r2, sl
 80096c2:	4649      	mov	r1, r9
 80096c4:	4638      	mov	r0, r7
 80096c6:	47c0      	blx	r8
 80096c8:	3001      	adds	r0, #1
 80096ca:	d103      	bne.n	80096d4 <_printf_common+0xac>
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d4:	3501      	adds	r5, #1
 80096d6:	e7c6      	b.n	8009666 <_printf_common+0x3e>
 80096d8:	18e1      	adds	r1, r4, r3
 80096da:	1c5a      	adds	r2, r3, #1
 80096dc:	2030      	movs	r0, #48	; 0x30
 80096de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096e2:	4422      	add	r2, r4
 80096e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096ec:	3302      	adds	r3, #2
 80096ee:	e7c7      	b.n	8009680 <_printf_common+0x58>
 80096f0:	2301      	movs	r3, #1
 80096f2:	4622      	mov	r2, r4
 80096f4:	4649      	mov	r1, r9
 80096f6:	4638      	mov	r0, r7
 80096f8:	47c0      	blx	r8
 80096fa:	3001      	adds	r0, #1
 80096fc:	d0e6      	beq.n	80096cc <_printf_common+0xa4>
 80096fe:	3601      	adds	r6, #1
 8009700:	e7d9      	b.n	80096b6 <_printf_common+0x8e>
	...

08009704 <_printf_i>:
 8009704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	7e0f      	ldrb	r7, [r1, #24]
 800970a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800970c:	2f78      	cmp	r7, #120	; 0x78
 800970e:	4691      	mov	r9, r2
 8009710:	4680      	mov	r8, r0
 8009712:	460c      	mov	r4, r1
 8009714:	469a      	mov	sl, r3
 8009716:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800971a:	d807      	bhi.n	800972c <_printf_i+0x28>
 800971c:	2f62      	cmp	r7, #98	; 0x62
 800971e:	d80a      	bhi.n	8009736 <_printf_i+0x32>
 8009720:	2f00      	cmp	r7, #0
 8009722:	f000 80d4 	beq.w	80098ce <_printf_i+0x1ca>
 8009726:	2f58      	cmp	r7, #88	; 0x58
 8009728:	f000 80c0 	beq.w	80098ac <_printf_i+0x1a8>
 800972c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009734:	e03a      	b.n	80097ac <_printf_i+0xa8>
 8009736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800973a:	2b15      	cmp	r3, #21
 800973c:	d8f6      	bhi.n	800972c <_printf_i+0x28>
 800973e:	a101      	add	r1, pc, #4	; (adr r1, 8009744 <_printf_i+0x40>)
 8009740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009744:	0800979d 	.word	0x0800979d
 8009748:	080097b1 	.word	0x080097b1
 800974c:	0800972d 	.word	0x0800972d
 8009750:	0800972d 	.word	0x0800972d
 8009754:	0800972d 	.word	0x0800972d
 8009758:	0800972d 	.word	0x0800972d
 800975c:	080097b1 	.word	0x080097b1
 8009760:	0800972d 	.word	0x0800972d
 8009764:	0800972d 	.word	0x0800972d
 8009768:	0800972d 	.word	0x0800972d
 800976c:	0800972d 	.word	0x0800972d
 8009770:	080098b5 	.word	0x080098b5
 8009774:	080097dd 	.word	0x080097dd
 8009778:	0800986f 	.word	0x0800986f
 800977c:	0800972d 	.word	0x0800972d
 8009780:	0800972d 	.word	0x0800972d
 8009784:	080098d7 	.word	0x080098d7
 8009788:	0800972d 	.word	0x0800972d
 800978c:	080097dd 	.word	0x080097dd
 8009790:	0800972d 	.word	0x0800972d
 8009794:	0800972d 	.word	0x0800972d
 8009798:	08009877 	.word	0x08009877
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	1d1a      	adds	r2, r3, #4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	602a      	str	r2, [r5, #0]
 80097a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097ac:	2301      	movs	r3, #1
 80097ae:	e09f      	b.n	80098f0 <_printf_i+0x1ec>
 80097b0:	6820      	ldr	r0, [r4, #0]
 80097b2:	682b      	ldr	r3, [r5, #0]
 80097b4:	0607      	lsls	r7, r0, #24
 80097b6:	f103 0104 	add.w	r1, r3, #4
 80097ba:	6029      	str	r1, [r5, #0]
 80097bc:	d501      	bpl.n	80097c2 <_printf_i+0xbe>
 80097be:	681e      	ldr	r6, [r3, #0]
 80097c0:	e003      	b.n	80097ca <_printf_i+0xc6>
 80097c2:	0646      	lsls	r6, r0, #25
 80097c4:	d5fb      	bpl.n	80097be <_printf_i+0xba>
 80097c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	da03      	bge.n	80097d6 <_printf_i+0xd2>
 80097ce:	232d      	movs	r3, #45	; 0x2d
 80097d0:	4276      	negs	r6, r6
 80097d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d6:	485a      	ldr	r0, [pc, #360]	; (8009940 <_printf_i+0x23c>)
 80097d8:	230a      	movs	r3, #10
 80097da:	e012      	b.n	8009802 <_printf_i+0xfe>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	6820      	ldr	r0, [r4, #0]
 80097e0:	1d19      	adds	r1, r3, #4
 80097e2:	6029      	str	r1, [r5, #0]
 80097e4:	0605      	lsls	r5, r0, #24
 80097e6:	d501      	bpl.n	80097ec <_printf_i+0xe8>
 80097e8:	681e      	ldr	r6, [r3, #0]
 80097ea:	e002      	b.n	80097f2 <_printf_i+0xee>
 80097ec:	0641      	lsls	r1, r0, #25
 80097ee:	d5fb      	bpl.n	80097e8 <_printf_i+0xe4>
 80097f0:	881e      	ldrh	r6, [r3, #0]
 80097f2:	4853      	ldr	r0, [pc, #332]	; (8009940 <_printf_i+0x23c>)
 80097f4:	2f6f      	cmp	r7, #111	; 0x6f
 80097f6:	bf0c      	ite	eq
 80097f8:	2308      	moveq	r3, #8
 80097fa:	230a      	movne	r3, #10
 80097fc:	2100      	movs	r1, #0
 80097fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009802:	6865      	ldr	r5, [r4, #4]
 8009804:	60a5      	str	r5, [r4, #8]
 8009806:	2d00      	cmp	r5, #0
 8009808:	bfa2      	ittt	ge
 800980a:	6821      	ldrge	r1, [r4, #0]
 800980c:	f021 0104 	bicge.w	r1, r1, #4
 8009810:	6021      	strge	r1, [r4, #0]
 8009812:	b90e      	cbnz	r6, 8009818 <_printf_i+0x114>
 8009814:	2d00      	cmp	r5, #0
 8009816:	d04b      	beq.n	80098b0 <_printf_i+0x1ac>
 8009818:	4615      	mov	r5, r2
 800981a:	fbb6 f1f3 	udiv	r1, r6, r3
 800981e:	fb03 6711 	mls	r7, r3, r1, r6
 8009822:	5dc7      	ldrb	r7, [r0, r7]
 8009824:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009828:	4637      	mov	r7, r6
 800982a:	42bb      	cmp	r3, r7
 800982c:	460e      	mov	r6, r1
 800982e:	d9f4      	bls.n	800981a <_printf_i+0x116>
 8009830:	2b08      	cmp	r3, #8
 8009832:	d10b      	bne.n	800984c <_printf_i+0x148>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	07de      	lsls	r6, r3, #31
 8009838:	d508      	bpl.n	800984c <_printf_i+0x148>
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	6861      	ldr	r1, [r4, #4]
 800983e:	4299      	cmp	r1, r3
 8009840:	bfde      	ittt	le
 8009842:	2330      	movle	r3, #48	; 0x30
 8009844:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009848:	f105 35ff 	addle.w	r5, r5, #4294967295
 800984c:	1b52      	subs	r2, r2, r5
 800984e:	6122      	str	r2, [r4, #16]
 8009850:	f8cd a000 	str.w	sl, [sp]
 8009854:	464b      	mov	r3, r9
 8009856:	aa03      	add	r2, sp, #12
 8009858:	4621      	mov	r1, r4
 800985a:	4640      	mov	r0, r8
 800985c:	f7ff fee4 	bl	8009628 <_printf_common>
 8009860:	3001      	adds	r0, #1
 8009862:	d14a      	bne.n	80098fa <_printf_i+0x1f6>
 8009864:	f04f 30ff 	mov.w	r0, #4294967295
 8009868:	b004      	add	sp, #16
 800986a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	f043 0320 	orr.w	r3, r3, #32
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	4833      	ldr	r0, [pc, #204]	; (8009944 <_printf_i+0x240>)
 8009878:	2778      	movs	r7, #120	; 0x78
 800987a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	6829      	ldr	r1, [r5, #0]
 8009882:	061f      	lsls	r7, r3, #24
 8009884:	f851 6b04 	ldr.w	r6, [r1], #4
 8009888:	d402      	bmi.n	8009890 <_printf_i+0x18c>
 800988a:	065f      	lsls	r7, r3, #25
 800988c:	bf48      	it	mi
 800988e:	b2b6      	uxthmi	r6, r6
 8009890:	07df      	lsls	r7, r3, #31
 8009892:	bf48      	it	mi
 8009894:	f043 0320 	orrmi.w	r3, r3, #32
 8009898:	6029      	str	r1, [r5, #0]
 800989a:	bf48      	it	mi
 800989c:	6023      	strmi	r3, [r4, #0]
 800989e:	b91e      	cbnz	r6, 80098a8 <_printf_i+0x1a4>
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	f023 0320 	bic.w	r3, r3, #32
 80098a6:	6023      	str	r3, [r4, #0]
 80098a8:	2310      	movs	r3, #16
 80098aa:	e7a7      	b.n	80097fc <_printf_i+0xf8>
 80098ac:	4824      	ldr	r0, [pc, #144]	; (8009940 <_printf_i+0x23c>)
 80098ae:	e7e4      	b.n	800987a <_printf_i+0x176>
 80098b0:	4615      	mov	r5, r2
 80098b2:	e7bd      	b.n	8009830 <_printf_i+0x12c>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	6826      	ldr	r6, [r4, #0]
 80098b8:	6961      	ldr	r1, [r4, #20]
 80098ba:	1d18      	adds	r0, r3, #4
 80098bc:	6028      	str	r0, [r5, #0]
 80098be:	0635      	lsls	r5, r6, #24
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	d501      	bpl.n	80098c8 <_printf_i+0x1c4>
 80098c4:	6019      	str	r1, [r3, #0]
 80098c6:	e002      	b.n	80098ce <_printf_i+0x1ca>
 80098c8:	0670      	lsls	r0, r6, #25
 80098ca:	d5fb      	bpl.n	80098c4 <_printf_i+0x1c0>
 80098cc:	8019      	strh	r1, [r3, #0]
 80098ce:	2300      	movs	r3, #0
 80098d0:	6123      	str	r3, [r4, #16]
 80098d2:	4615      	mov	r5, r2
 80098d4:	e7bc      	b.n	8009850 <_printf_i+0x14c>
 80098d6:	682b      	ldr	r3, [r5, #0]
 80098d8:	1d1a      	adds	r2, r3, #4
 80098da:	602a      	str	r2, [r5, #0]
 80098dc:	681d      	ldr	r5, [r3, #0]
 80098de:	6862      	ldr	r2, [r4, #4]
 80098e0:	2100      	movs	r1, #0
 80098e2:	4628      	mov	r0, r5
 80098e4:	f7f6 fc74 	bl	80001d0 <memchr>
 80098e8:	b108      	cbz	r0, 80098ee <_printf_i+0x1ea>
 80098ea:	1b40      	subs	r0, r0, r5
 80098ec:	6060      	str	r0, [r4, #4]
 80098ee:	6863      	ldr	r3, [r4, #4]
 80098f0:	6123      	str	r3, [r4, #16]
 80098f2:	2300      	movs	r3, #0
 80098f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098f8:	e7aa      	b.n	8009850 <_printf_i+0x14c>
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	462a      	mov	r2, r5
 80098fe:	4649      	mov	r1, r9
 8009900:	4640      	mov	r0, r8
 8009902:	47d0      	blx	sl
 8009904:	3001      	adds	r0, #1
 8009906:	d0ad      	beq.n	8009864 <_printf_i+0x160>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	079b      	lsls	r3, r3, #30
 800990c:	d413      	bmi.n	8009936 <_printf_i+0x232>
 800990e:	68e0      	ldr	r0, [r4, #12]
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	4298      	cmp	r0, r3
 8009914:	bfb8      	it	lt
 8009916:	4618      	movlt	r0, r3
 8009918:	e7a6      	b.n	8009868 <_printf_i+0x164>
 800991a:	2301      	movs	r3, #1
 800991c:	4632      	mov	r2, r6
 800991e:	4649      	mov	r1, r9
 8009920:	4640      	mov	r0, r8
 8009922:	47d0      	blx	sl
 8009924:	3001      	adds	r0, #1
 8009926:	d09d      	beq.n	8009864 <_printf_i+0x160>
 8009928:	3501      	adds	r5, #1
 800992a:	68e3      	ldr	r3, [r4, #12]
 800992c:	9903      	ldr	r1, [sp, #12]
 800992e:	1a5b      	subs	r3, r3, r1
 8009930:	42ab      	cmp	r3, r5
 8009932:	dcf2      	bgt.n	800991a <_printf_i+0x216>
 8009934:	e7eb      	b.n	800990e <_printf_i+0x20a>
 8009936:	2500      	movs	r5, #0
 8009938:	f104 0619 	add.w	r6, r4, #25
 800993c:	e7f5      	b.n	800992a <_printf_i+0x226>
 800993e:	bf00      	nop
 8009940:	0800f29b 	.word	0x0800f29b
 8009944:	0800f2ac 	.word	0x0800f2ac

08009948 <_scanf_float>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	b087      	sub	sp, #28
 800994e:	4617      	mov	r7, r2
 8009950:	9303      	str	r3, [sp, #12]
 8009952:	688b      	ldr	r3, [r1, #8]
 8009954:	1e5a      	subs	r2, r3, #1
 8009956:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800995a:	bf83      	ittte	hi
 800995c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009960:	195b      	addhi	r3, r3, r5
 8009962:	9302      	strhi	r3, [sp, #8]
 8009964:	2300      	movls	r3, #0
 8009966:	bf86      	itte	hi
 8009968:	f240 135d 	movwhi	r3, #349	; 0x15d
 800996c:	608b      	strhi	r3, [r1, #8]
 800996e:	9302      	strls	r3, [sp, #8]
 8009970:	680b      	ldr	r3, [r1, #0]
 8009972:	468b      	mov	fp, r1
 8009974:	2500      	movs	r5, #0
 8009976:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800997a:	f84b 3b1c 	str.w	r3, [fp], #28
 800997e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009982:	4680      	mov	r8, r0
 8009984:	460c      	mov	r4, r1
 8009986:	465e      	mov	r6, fp
 8009988:	46aa      	mov	sl, r5
 800998a:	46a9      	mov	r9, r5
 800998c:	9501      	str	r5, [sp, #4]
 800998e:	68a2      	ldr	r2, [r4, #8]
 8009990:	b152      	cbz	r2, 80099a8 <_scanf_float+0x60>
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b4e      	cmp	r3, #78	; 0x4e
 8009998:	d864      	bhi.n	8009a64 <_scanf_float+0x11c>
 800999a:	2b40      	cmp	r3, #64	; 0x40
 800999c:	d83c      	bhi.n	8009a18 <_scanf_float+0xd0>
 800999e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80099a2:	b2c8      	uxtb	r0, r1
 80099a4:	280e      	cmp	r0, #14
 80099a6:	d93a      	bls.n	8009a1e <_scanf_float+0xd6>
 80099a8:	f1b9 0f00 	cmp.w	r9, #0
 80099ac:	d003      	beq.n	80099b6 <_scanf_float+0x6e>
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099ba:	f1ba 0f01 	cmp.w	sl, #1
 80099be:	f200 8113 	bhi.w	8009be8 <_scanf_float+0x2a0>
 80099c2:	455e      	cmp	r6, fp
 80099c4:	f200 8105 	bhi.w	8009bd2 <_scanf_float+0x28a>
 80099c8:	2501      	movs	r5, #1
 80099ca:	4628      	mov	r0, r5
 80099cc:	b007      	add	sp, #28
 80099ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80099d6:	2a0d      	cmp	r2, #13
 80099d8:	d8e6      	bhi.n	80099a8 <_scanf_float+0x60>
 80099da:	a101      	add	r1, pc, #4	; (adr r1, 80099e0 <_scanf_float+0x98>)
 80099dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80099e0:	08009b1f 	.word	0x08009b1f
 80099e4:	080099a9 	.word	0x080099a9
 80099e8:	080099a9 	.word	0x080099a9
 80099ec:	080099a9 	.word	0x080099a9
 80099f0:	08009b7f 	.word	0x08009b7f
 80099f4:	08009b57 	.word	0x08009b57
 80099f8:	080099a9 	.word	0x080099a9
 80099fc:	080099a9 	.word	0x080099a9
 8009a00:	08009b2d 	.word	0x08009b2d
 8009a04:	080099a9 	.word	0x080099a9
 8009a08:	080099a9 	.word	0x080099a9
 8009a0c:	080099a9 	.word	0x080099a9
 8009a10:	080099a9 	.word	0x080099a9
 8009a14:	08009ae5 	.word	0x08009ae5
 8009a18:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009a1c:	e7db      	b.n	80099d6 <_scanf_float+0x8e>
 8009a1e:	290e      	cmp	r1, #14
 8009a20:	d8c2      	bhi.n	80099a8 <_scanf_float+0x60>
 8009a22:	a001      	add	r0, pc, #4	; (adr r0, 8009a28 <_scanf_float+0xe0>)
 8009a24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009a28:	08009ad7 	.word	0x08009ad7
 8009a2c:	080099a9 	.word	0x080099a9
 8009a30:	08009ad7 	.word	0x08009ad7
 8009a34:	08009b6b 	.word	0x08009b6b
 8009a38:	080099a9 	.word	0x080099a9
 8009a3c:	08009a85 	.word	0x08009a85
 8009a40:	08009ac1 	.word	0x08009ac1
 8009a44:	08009ac1 	.word	0x08009ac1
 8009a48:	08009ac1 	.word	0x08009ac1
 8009a4c:	08009ac1 	.word	0x08009ac1
 8009a50:	08009ac1 	.word	0x08009ac1
 8009a54:	08009ac1 	.word	0x08009ac1
 8009a58:	08009ac1 	.word	0x08009ac1
 8009a5c:	08009ac1 	.word	0x08009ac1
 8009a60:	08009ac1 	.word	0x08009ac1
 8009a64:	2b6e      	cmp	r3, #110	; 0x6e
 8009a66:	d809      	bhi.n	8009a7c <_scanf_float+0x134>
 8009a68:	2b60      	cmp	r3, #96	; 0x60
 8009a6a:	d8b2      	bhi.n	80099d2 <_scanf_float+0x8a>
 8009a6c:	2b54      	cmp	r3, #84	; 0x54
 8009a6e:	d077      	beq.n	8009b60 <_scanf_float+0x218>
 8009a70:	2b59      	cmp	r3, #89	; 0x59
 8009a72:	d199      	bne.n	80099a8 <_scanf_float+0x60>
 8009a74:	2d07      	cmp	r5, #7
 8009a76:	d197      	bne.n	80099a8 <_scanf_float+0x60>
 8009a78:	2508      	movs	r5, #8
 8009a7a:	e029      	b.n	8009ad0 <_scanf_float+0x188>
 8009a7c:	2b74      	cmp	r3, #116	; 0x74
 8009a7e:	d06f      	beq.n	8009b60 <_scanf_float+0x218>
 8009a80:	2b79      	cmp	r3, #121	; 0x79
 8009a82:	e7f6      	b.n	8009a72 <_scanf_float+0x12a>
 8009a84:	6821      	ldr	r1, [r4, #0]
 8009a86:	05c8      	lsls	r0, r1, #23
 8009a88:	d51a      	bpl.n	8009ac0 <_scanf_float+0x178>
 8009a8a:	9b02      	ldr	r3, [sp, #8]
 8009a8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009a90:	6021      	str	r1, [r4, #0]
 8009a92:	f109 0901 	add.w	r9, r9, #1
 8009a96:	b11b      	cbz	r3, 8009aa0 <_scanf_float+0x158>
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	3201      	adds	r2, #1
 8009a9c:	9302      	str	r3, [sp, #8]
 8009a9e:	60a2      	str	r2, [r4, #8]
 8009aa0:	68a3      	ldr	r3, [r4, #8]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	60a3      	str	r3, [r4, #8]
 8009aa6:	6923      	ldr	r3, [r4, #16]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	6123      	str	r3, [r4, #16]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	607b      	str	r3, [r7, #4]
 8009ab4:	f340 8084 	ble.w	8009bc0 <_scanf_float+0x278>
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	3301      	adds	r3, #1
 8009abc:	603b      	str	r3, [r7, #0]
 8009abe:	e766      	b.n	800998e <_scanf_float+0x46>
 8009ac0:	eb1a 0f05 	cmn.w	sl, r5
 8009ac4:	f47f af70 	bne.w	80099a8 <_scanf_float+0x60>
 8009ac8:	6822      	ldr	r2, [r4, #0]
 8009aca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009ace:	6022      	str	r2, [r4, #0]
 8009ad0:	f806 3b01 	strb.w	r3, [r6], #1
 8009ad4:	e7e4      	b.n	8009aa0 <_scanf_float+0x158>
 8009ad6:	6822      	ldr	r2, [r4, #0]
 8009ad8:	0610      	lsls	r0, r2, #24
 8009ada:	f57f af65 	bpl.w	80099a8 <_scanf_float+0x60>
 8009ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ae2:	e7f4      	b.n	8009ace <_scanf_float+0x186>
 8009ae4:	f1ba 0f00 	cmp.w	sl, #0
 8009ae8:	d10e      	bne.n	8009b08 <_scanf_float+0x1c0>
 8009aea:	f1b9 0f00 	cmp.w	r9, #0
 8009aee:	d10e      	bne.n	8009b0e <_scanf_float+0x1c6>
 8009af0:	6822      	ldr	r2, [r4, #0]
 8009af2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009af6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009afa:	d108      	bne.n	8009b0e <_scanf_float+0x1c6>
 8009afc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009b00:	6022      	str	r2, [r4, #0]
 8009b02:	f04f 0a01 	mov.w	sl, #1
 8009b06:	e7e3      	b.n	8009ad0 <_scanf_float+0x188>
 8009b08:	f1ba 0f02 	cmp.w	sl, #2
 8009b0c:	d055      	beq.n	8009bba <_scanf_float+0x272>
 8009b0e:	2d01      	cmp	r5, #1
 8009b10:	d002      	beq.n	8009b18 <_scanf_float+0x1d0>
 8009b12:	2d04      	cmp	r5, #4
 8009b14:	f47f af48 	bne.w	80099a8 <_scanf_float+0x60>
 8009b18:	3501      	adds	r5, #1
 8009b1a:	b2ed      	uxtb	r5, r5
 8009b1c:	e7d8      	b.n	8009ad0 <_scanf_float+0x188>
 8009b1e:	f1ba 0f01 	cmp.w	sl, #1
 8009b22:	f47f af41 	bne.w	80099a8 <_scanf_float+0x60>
 8009b26:	f04f 0a02 	mov.w	sl, #2
 8009b2a:	e7d1      	b.n	8009ad0 <_scanf_float+0x188>
 8009b2c:	b97d      	cbnz	r5, 8009b4e <_scanf_float+0x206>
 8009b2e:	f1b9 0f00 	cmp.w	r9, #0
 8009b32:	f47f af3c 	bne.w	80099ae <_scanf_float+0x66>
 8009b36:	6822      	ldr	r2, [r4, #0]
 8009b38:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009b3c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009b40:	f47f af39 	bne.w	80099b6 <_scanf_float+0x6e>
 8009b44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009b48:	6022      	str	r2, [r4, #0]
 8009b4a:	2501      	movs	r5, #1
 8009b4c:	e7c0      	b.n	8009ad0 <_scanf_float+0x188>
 8009b4e:	2d03      	cmp	r5, #3
 8009b50:	d0e2      	beq.n	8009b18 <_scanf_float+0x1d0>
 8009b52:	2d05      	cmp	r5, #5
 8009b54:	e7de      	b.n	8009b14 <_scanf_float+0x1cc>
 8009b56:	2d02      	cmp	r5, #2
 8009b58:	f47f af26 	bne.w	80099a8 <_scanf_float+0x60>
 8009b5c:	2503      	movs	r5, #3
 8009b5e:	e7b7      	b.n	8009ad0 <_scanf_float+0x188>
 8009b60:	2d06      	cmp	r5, #6
 8009b62:	f47f af21 	bne.w	80099a8 <_scanf_float+0x60>
 8009b66:	2507      	movs	r5, #7
 8009b68:	e7b2      	b.n	8009ad0 <_scanf_float+0x188>
 8009b6a:	6822      	ldr	r2, [r4, #0]
 8009b6c:	0591      	lsls	r1, r2, #22
 8009b6e:	f57f af1b 	bpl.w	80099a8 <_scanf_float+0x60>
 8009b72:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009b76:	6022      	str	r2, [r4, #0]
 8009b78:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b7c:	e7a8      	b.n	8009ad0 <_scanf_float+0x188>
 8009b7e:	6822      	ldr	r2, [r4, #0]
 8009b80:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009b84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009b88:	d006      	beq.n	8009b98 <_scanf_float+0x250>
 8009b8a:	0550      	lsls	r0, r2, #21
 8009b8c:	f57f af0c 	bpl.w	80099a8 <_scanf_float+0x60>
 8009b90:	f1b9 0f00 	cmp.w	r9, #0
 8009b94:	f43f af0f 	beq.w	80099b6 <_scanf_float+0x6e>
 8009b98:	0591      	lsls	r1, r2, #22
 8009b9a:	bf58      	it	pl
 8009b9c:	9901      	ldrpl	r1, [sp, #4]
 8009b9e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ba2:	bf58      	it	pl
 8009ba4:	eba9 0101 	subpl.w	r1, r9, r1
 8009ba8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009bac:	bf58      	it	pl
 8009bae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009bb2:	6022      	str	r2, [r4, #0]
 8009bb4:	f04f 0900 	mov.w	r9, #0
 8009bb8:	e78a      	b.n	8009ad0 <_scanf_float+0x188>
 8009bba:	f04f 0a03 	mov.w	sl, #3
 8009bbe:	e787      	b.n	8009ad0 <_scanf_float+0x188>
 8009bc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	4798      	blx	r3
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	f43f aedf 	beq.w	800998e <_scanf_float+0x46>
 8009bd0:	e6ea      	b.n	80099a8 <_scanf_float+0x60>
 8009bd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009bda:	463a      	mov	r2, r7
 8009bdc:	4640      	mov	r0, r8
 8009bde:	4798      	blx	r3
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	6123      	str	r3, [r4, #16]
 8009be6:	e6ec      	b.n	80099c2 <_scanf_float+0x7a>
 8009be8:	1e6b      	subs	r3, r5, #1
 8009bea:	2b06      	cmp	r3, #6
 8009bec:	d825      	bhi.n	8009c3a <_scanf_float+0x2f2>
 8009bee:	2d02      	cmp	r5, #2
 8009bf0:	d836      	bhi.n	8009c60 <_scanf_float+0x318>
 8009bf2:	455e      	cmp	r6, fp
 8009bf4:	f67f aee8 	bls.w	80099c8 <_scanf_float+0x80>
 8009bf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bfc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c00:	463a      	mov	r2, r7
 8009c02:	4640      	mov	r0, r8
 8009c04:	4798      	blx	r3
 8009c06:	6923      	ldr	r3, [r4, #16]
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	6123      	str	r3, [r4, #16]
 8009c0c:	e7f1      	b.n	8009bf2 <_scanf_float+0x2aa>
 8009c0e:	9802      	ldr	r0, [sp, #8]
 8009c10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c14:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009c18:	9002      	str	r0, [sp, #8]
 8009c1a:	463a      	mov	r2, r7
 8009c1c:	4640      	mov	r0, r8
 8009c1e:	4798      	blx	r3
 8009c20:	6923      	ldr	r3, [r4, #16]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	6123      	str	r3, [r4, #16]
 8009c26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c2a:	fa5f fa8a 	uxtb.w	sl, sl
 8009c2e:	f1ba 0f02 	cmp.w	sl, #2
 8009c32:	d1ec      	bne.n	8009c0e <_scanf_float+0x2c6>
 8009c34:	3d03      	subs	r5, #3
 8009c36:	b2ed      	uxtb	r5, r5
 8009c38:	1b76      	subs	r6, r6, r5
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	05da      	lsls	r2, r3, #23
 8009c3e:	d52f      	bpl.n	8009ca0 <_scanf_float+0x358>
 8009c40:	055b      	lsls	r3, r3, #21
 8009c42:	d510      	bpl.n	8009c66 <_scanf_float+0x31e>
 8009c44:	455e      	cmp	r6, fp
 8009c46:	f67f aebf 	bls.w	80099c8 <_scanf_float+0x80>
 8009c4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c52:	463a      	mov	r2, r7
 8009c54:	4640      	mov	r0, r8
 8009c56:	4798      	blx	r3
 8009c58:	6923      	ldr	r3, [r4, #16]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	6123      	str	r3, [r4, #16]
 8009c5e:	e7f1      	b.n	8009c44 <_scanf_float+0x2fc>
 8009c60:	46aa      	mov	sl, r5
 8009c62:	9602      	str	r6, [sp, #8]
 8009c64:	e7df      	b.n	8009c26 <_scanf_float+0x2de>
 8009c66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009c6a:	6923      	ldr	r3, [r4, #16]
 8009c6c:	2965      	cmp	r1, #101	; 0x65
 8009c6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c72:	f106 35ff 	add.w	r5, r6, #4294967295
 8009c76:	6123      	str	r3, [r4, #16]
 8009c78:	d00c      	beq.n	8009c94 <_scanf_float+0x34c>
 8009c7a:	2945      	cmp	r1, #69	; 0x45
 8009c7c:	d00a      	beq.n	8009c94 <_scanf_float+0x34c>
 8009c7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c82:	463a      	mov	r2, r7
 8009c84:	4640      	mov	r0, r8
 8009c86:	4798      	blx	r3
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	1eb5      	subs	r5, r6, #2
 8009c92:	6123      	str	r3, [r4, #16]
 8009c94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c98:	463a      	mov	r2, r7
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	4798      	blx	r3
 8009c9e:	462e      	mov	r6, r5
 8009ca0:	6825      	ldr	r5, [r4, #0]
 8009ca2:	f015 0510 	ands.w	r5, r5, #16
 8009ca6:	d158      	bne.n	8009d5a <_scanf_float+0x412>
 8009ca8:	7035      	strb	r5, [r6, #0]
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cb4:	d11c      	bne.n	8009cf0 <_scanf_float+0x3a8>
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	454b      	cmp	r3, r9
 8009cba:	eba3 0209 	sub.w	r2, r3, r9
 8009cbe:	d124      	bne.n	8009d0a <_scanf_float+0x3c2>
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4659      	mov	r1, fp
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	f7ff f8df 	bl	8008e88 <_strtod_r>
 8009cca:	9b03      	ldr	r3, [sp, #12]
 8009ccc:	6821      	ldr	r1, [r4, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f011 0f02 	tst.w	r1, #2
 8009cd4:	ec57 6b10 	vmov	r6, r7, d0
 8009cd8:	f103 0204 	add.w	r2, r3, #4
 8009cdc:	d020      	beq.n	8009d20 <_scanf_float+0x3d8>
 8009cde:	9903      	ldr	r1, [sp, #12]
 8009ce0:	600a      	str	r2, [r1, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	e9c3 6700 	strd	r6, r7, [r3]
 8009ce8:	68e3      	ldr	r3, [r4, #12]
 8009cea:	3301      	adds	r3, #1
 8009cec:	60e3      	str	r3, [r4, #12]
 8009cee:	e66c      	b.n	80099ca <_scanf_float+0x82>
 8009cf0:	9b04      	ldr	r3, [sp, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0e4      	beq.n	8009cc0 <_scanf_float+0x378>
 8009cf6:	9905      	ldr	r1, [sp, #20]
 8009cf8:	230a      	movs	r3, #10
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	4640      	mov	r0, r8
 8009d00:	f7ff f9b0 	bl	8009064 <_strtol_r>
 8009d04:	9b04      	ldr	r3, [sp, #16]
 8009d06:	9e05      	ldr	r6, [sp, #20]
 8009d08:	1ac2      	subs	r2, r0, r3
 8009d0a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009d0e:	429e      	cmp	r6, r3
 8009d10:	bf28      	it	cs
 8009d12:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009d16:	4912      	ldr	r1, [pc, #72]	; (8009d60 <_scanf_float+0x418>)
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f000 f91b 	bl	8009f54 <siprintf>
 8009d1e:	e7cf      	b.n	8009cc0 <_scanf_float+0x378>
 8009d20:	f011 0f04 	tst.w	r1, #4
 8009d24:	9903      	ldr	r1, [sp, #12]
 8009d26:	600a      	str	r2, [r1, #0]
 8009d28:	d1db      	bne.n	8009ce2 <_scanf_float+0x39a>
 8009d2a:	f8d3 8000 	ldr.w	r8, [r3]
 8009d2e:	ee10 2a10 	vmov	r2, s0
 8009d32:	ee10 0a10 	vmov	r0, s0
 8009d36:	463b      	mov	r3, r7
 8009d38:	4639      	mov	r1, r7
 8009d3a:	f7f6 fef7 	bl	8000b2c <__aeabi_dcmpun>
 8009d3e:	b128      	cbz	r0, 8009d4c <_scanf_float+0x404>
 8009d40:	4808      	ldr	r0, [pc, #32]	; (8009d64 <_scanf_float+0x41c>)
 8009d42:	f000 fa9d 	bl	800a280 <nanf>
 8009d46:	ed88 0a00 	vstr	s0, [r8]
 8009d4a:	e7cd      	b.n	8009ce8 <_scanf_float+0x3a0>
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	4639      	mov	r1, r7
 8009d50:	f7f6 ff4a 	bl	8000be8 <__aeabi_d2f>
 8009d54:	f8c8 0000 	str.w	r0, [r8]
 8009d58:	e7c6      	b.n	8009ce8 <_scanf_float+0x3a0>
 8009d5a:	2500      	movs	r5, #0
 8009d5c:	e635      	b.n	80099ca <_scanf_float+0x82>
 8009d5e:	bf00      	nop
 8009d60:	0800f2bd 	.word	0x0800f2bd
 8009d64:	0800f376 	.word	0x0800f376

08009d68 <std>:
 8009d68:	2300      	movs	r3, #0
 8009d6a:	b510      	push	{r4, lr}
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d76:	6083      	str	r3, [r0, #8]
 8009d78:	8181      	strh	r1, [r0, #12]
 8009d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d7c:	81c2      	strh	r2, [r0, #14]
 8009d7e:	6183      	str	r3, [r0, #24]
 8009d80:	4619      	mov	r1, r3
 8009d82:	2208      	movs	r2, #8
 8009d84:	305c      	adds	r0, #92	; 0x5c
 8009d86:	f000 f948 	bl	800a01a <memset>
 8009d8a:	4b0d      	ldr	r3, [pc, #52]	; (8009dc0 <std+0x58>)
 8009d8c:	6263      	str	r3, [r4, #36]	; 0x24
 8009d8e:	4b0d      	ldr	r3, [pc, #52]	; (8009dc4 <std+0x5c>)
 8009d90:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d92:	4b0d      	ldr	r3, [pc, #52]	; (8009dc8 <std+0x60>)
 8009d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d96:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <std+0x64>)
 8009d98:	6323      	str	r3, [r4, #48]	; 0x30
 8009d9a:	4b0d      	ldr	r3, [pc, #52]	; (8009dd0 <std+0x68>)
 8009d9c:	6224      	str	r4, [r4, #32]
 8009d9e:	429c      	cmp	r4, r3
 8009da0:	d006      	beq.n	8009db0 <std+0x48>
 8009da2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009da6:	4294      	cmp	r4, r2
 8009da8:	d002      	beq.n	8009db0 <std+0x48>
 8009daa:	33d0      	adds	r3, #208	; 0xd0
 8009dac:	429c      	cmp	r4, r3
 8009dae:	d105      	bne.n	8009dbc <std+0x54>
 8009db0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009db8:	f000 ba40 	b.w	800a23c <__retarget_lock_init_recursive>
 8009dbc:	bd10      	pop	{r4, pc}
 8009dbe:	bf00      	nop
 8009dc0:	08009f95 	.word	0x08009f95
 8009dc4:	08009fb7 	.word	0x08009fb7
 8009dc8:	08009fef 	.word	0x08009fef
 8009dcc:	0800a013 	.word	0x0800a013
 8009dd0:	20000ad4 	.word	0x20000ad4

08009dd4 <stdio_exit_handler>:
 8009dd4:	4a02      	ldr	r2, [pc, #8]	; (8009de0 <stdio_exit_handler+0xc>)
 8009dd6:	4903      	ldr	r1, [pc, #12]	; (8009de4 <stdio_exit_handler+0x10>)
 8009dd8:	4803      	ldr	r0, [pc, #12]	; (8009de8 <stdio_exit_handler+0x14>)
 8009dda:	f000 b869 	b.w	8009eb0 <_fwalk_sglue>
 8009dde:	bf00      	nop
 8009de0:	2000001c 	.word	0x2000001c
 8009de4:	0800c459 	.word	0x0800c459
 8009de8:	20000194 	.word	0x20000194

08009dec <cleanup_stdio>:
 8009dec:	6841      	ldr	r1, [r0, #4]
 8009dee:	4b0c      	ldr	r3, [pc, #48]	; (8009e20 <cleanup_stdio+0x34>)
 8009df0:	4299      	cmp	r1, r3
 8009df2:	b510      	push	{r4, lr}
 8009df4:	4604      	mov	r4, r0
 8009df6:	d001      	beq.n	8009dfc <cleanup_stdio+0x10>
 8009df8:	f002 fb2e 	bl	800c458 <_fflush_r>
 8009dfc:	68a1      	ldr	r1, [r4, #8]
 8009dfe:	4b09      	ldr	r3, [pc, #36]	; (8009e24 <cleanup_stdio+0x38>)
 8009e00:	4299      	cmp	r1, r3
 8009e02:	d002      	beq.n	8009e0a <cleanup_stdio+0x1e>
 8009e04:	4620      	mov	r0, r4
 8009e06:	f002 fb27 	bl	800c458 <_fflush_r>
 8009e0a:	68e1      	ldr	r1, [r4, #12]
 8009e0c:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <cleanup_stdio+0x3c>)
 8009e0e:	4299      	cmp	r1, r3
 8009e10:	d004      	beq.n	8009e1c <cleanup_stdio+0x30>
 8009e12:	4620      	mov	r0, r4
 8009e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e18:	f002 bb1e 	b.w	800c458 <_fflush_r>
 8009e1c:	bd10      	pop	{r4, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000ad4 	.word	0x20000ad4
 8009e24:	20000b3c 	.word	0x20000b3c
 8009e28:	20000ba4 	.word	0x20000ba4

08009e2c <global_stdio_init.part.0>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <global_stdio_init.part.0+0x30>)
 8009e30:	4c0b      	ldr	r4, [pc, #44]	; (8009e60 <global_stdio_init.part.0+0x34>)
 8009e32:	4a0c      	ldr	r2, [pc, #48]	; (8009e64 <global_stdio_init.part.0+0x38>)
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	4620      	mov	r0, r4
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2104      	movs	r1, #4
 8009e3c:	f7ff ff94 	bl	8009d68 <std>
 8009e40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009e44:	2201      	movs	r2, #1
 8009e46:	2109      	movs	r1, #9
 8009e48:	f7ff ff8e 	bl	8009d68 <std>
 8009e4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009e50:	2202      	movs	r2, #2
 8009e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e56:	2112      	movs	r1, #18
 8009e58:	f7ff bf86 	b.w	8009d68 <std>
 8009e5c:	20000c0c 	.word	0x20000c0c
 8009e60:	20000ad4 	.word	0x20000ad4
 8009e64:	08009dd5 	.word	0x08009dd5

08009e68 <__sfp_lock_acquire>:
 8009e68:	4801      	ldr	r0, [pc, #4]	; (8009e70 <__sfp_lock_acquire+0x8>)
 8009e6a:	f000 b9e8 	b.w	800a23e <__retarget_lock_acquire_recursive>
 8009e6e:	bf00      	nop
 8009e70:	20000c15 	.word	0x20000c15

08009e74 <__sfp_lock_release>:
 8009e74:	4801      	ldr	r0, [pc, #4]	; (8009e7c <__sfp_lock_release+0x8>)
 8009e76:	f000 b9e3 	b.w	800a240 <__retarget_lock_release_recursive>
 8009e7a:	bf00      	nop
 8009e7c:	20000c15 	.word	0x20000c15

08009e80 <__sinit>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	4604      	mov	r4, r0
 8009e84:	f7ff fff0 	bl	8009e68 <__sfp_lock_acquire>
 8009e88:	6a23      	ldr	r3, [r4, #32]
 8009e8a:	b11b      	cbz	r3, 8009e94 <__sinit+0x14>
 8009e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e90:	f7ff bff0 	b.w	8009e74 <__sfp_lock_release>
 8009e94:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <__sinit+0x28>)
 8009e96:	6223      	str	r3, [r4, #32]
 8009e98:	4b04      	ldr	r3, [pc, #16]	; (8009eac <__sinit+0x2c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1f5      	bne.n	8009e8c <__sinit+0xc>
 8009ea0:	f7ff ffc4 	bl	8009e2c <global_stdio_init.part.0>
 8009ea4:	e7f2      	b.n	8009e8c <__sinit+0xc>
 8009ea6:	bf00      	nop
 8009ea8:	08009ded 	.word	0x08009ded
 8009eac:	20000c0c 	.word	0x20000c0c

08009eb0 <_fwalk_sglue>:
 8009eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	4688      	mov	r8, r1
 8009eb8:	4614      	mov	r4, r2
 8009eba:	2600      	movs	r6, #0
 8009ebc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ec0:	f1b9 0901 	subs.w	r9, r9, #1
 8009ec4:	d505      	bpl.n	8009ed2 <_fwalk_sglue+0x22>
 8009ec6:	6824      	ldr	r4, [r4, #0]
 8009ec8:	2c00      	cmp	r4, #0
 8009eca:	d1f7      	bne.n	8009ebc <_fwalk_sglue+0xc>
 8009ecc:	4630      	mov	r0, r6
 8009ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed2:	89ab      	ldrh	r3, [r5, #12]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d907      	bls.n	8009ee8 <_fwalk_sglue+0x38>
 8009ed8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009edc:	3301      	adds	r3, #1
 8009ede:	d003      	beq.n	8009ee8 <_fwalk_sglue+0x38>
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	47c0      	blx	r8
 8009ee6:	4306      	orrs	r6, r0
 8009ee8:	3568      	adds	r5, #104	; 0x68
 8009eea:	e7e9      	b.n	8009ec0 <_fwalk_sglue+0x10>

08009eec <sniprintf>:
 8009eec:	b40c      	push	{r2, r3}
 8009eee:	b530      	push	{r4, r5, lr}
 8009ef0:	4b17      	ldr	r3, [pc, #92]	; (8009f50 <sniprintf+0x64>)
 8009ef2:	1e0c      	subs	r4, r1, #0
 8009ef4:	681d      	ldr	r5, [r3, #0]
 8009ef6:	b09d      	sub	sp, #116	; 0x74
 8009ef8:	da08      	bge.n	8009f0c <sniprintf+0x20>
 8009efa:	238b      	movs	r3, #139	; 0x8b
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295
 8009f02:	b01d      	add	sp, #116	; 0x74
 8009f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f08:	b002      	add	sp, #8
 8009f0a:	4770      	bx	lr
 8009f0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f14:	bf14      	ite	ne
 8009f16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f1a:	4623      	moveq	r3, r4
 8009f1c:	9304      	str	r3, [sp, #16]
 8009f1e:	9307      	str	r3, [sp, #28]
 8009f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f24:	9002      	str	r0, [sp, #8]
 8009f26:	9006      	str	r0, [sp, #24]
 8009f28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f2e:	ab21      	add	r3, sp, #132	; 0x84
 8009f30:	a902      	add	r1, sp, #8
 8009f32:	4628      	mov	r0, r5
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	f002 f90b 	bl	800c150 <_svfiprintf_r>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	bfbc      	itt	lt
 8009f3e:	238b      	movlt	r3, #139	; 0x8b
 8009f40:	602b      	strlt	r3, [r5, #0]
 8009f42:	2c00      	cmp	r4, #0
 8009f44:	d0dd      	beq.n	8009f02 <sniprintf+0x16>
 8009f46:	9b02      	ldr	r3, [sp, #8]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	701a      	strb	r2, [r3, #0]
 8009f4c:	e7d9      	b.n	8009f02 <sniprintf+0x16>
 8009f4e:	bf00      	nop
 8009f50:	200001e0 	.word	0x200001e0

08009f54 <siprintf>:
 8009f54:	b40e      	push	{r1, r2, r3}
 8009f56:	b500      	push	{lr}
 8009f58:	b09c      	sub	sp, #112	; 0x70
 8009f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8009f5c:	9002      	str	r0, [sp, #8]
 8009f5e:	9006      	str	r0, [sp, #24]
 8009f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f64:	4809      	ldr	r0, [pc, #36]	; (8009f8c <siprintf+0x38>)
 8009f66:	9107      	str	r1, [sp, #28]
 8009f68:	9104      	str	r1, [sp, #16]
 8009f6a:	4909      	ldr	r1, [pc, #36]	; (8009f90 <siprintf+0x3c>)
 8009f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f70:	9105      	str	r1, [sp, #20]
 8009f72:	6800      	ldr	r0, [r0, #0]
 8009f74:	9301      	str	r3, [sp, #4]
 8009f76:	a902      	add	r1, sp, #8
 8009f78:	f002 f8ea 	bl	800c150 <_svfiprintf_r>
 8009f7c:	9b02      	ldr	r3, [sp, #8]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	b01c      	add	sp, #112	; 0x70
 8009f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f88:	b003      	add	sp, #12
 8009f8a:	4770      	bx	lr
 8009f8c:	200001e0 	.word	0x200001e0
 8009f90:	ffff0208 	.word	0xffff0208

08009f94 <__sread>:
 8009f94:	b510      	push	{r4, lr}
 8009f96:	460c      	mov	r4, r1
 8009f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f9c:	f000 f8f0 	bl	800a180 <_read_r>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	bfab      	itete	ge
 8009fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8009fa8:	181b      	addge	r3, r3, r0
 8009faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fae:	bfac      	ite	ge
 8009fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fb2:	81a3      	strhlt	r3, [r4, #12]
 8009fb4:	bd10      	pop	{r4, pc}

08009fb6 <__swrite>:
 8009fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fba:	461f      	mov	r7, r3
 8009fbc:	898b      	ldrh	r3, [r1, #12]
 8009fbe:	05db      	lsls	r3, r3, #23
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	4616      	mov	r6, r2
 8009fc6:	d505      	bpl.n	8009fd4 <__swrite+0x1e>
 8009fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fcc:	2302      	movs	r3, #2
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f000 f8c4 	bl	800a15c <_lseek_r>
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	463b      	mov	r3, r7
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fea:	f000 b8eb 	b.w	800a1c4 <_write_r>

08009fee <__sseek>:
 8009fee:	b510      	push	{r4, lr}
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff6:	f000 f8b1 	bl	800a15c <_lseek_r>
 8009ffa:	1c43      	adds	r3, r0, #1
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	bf15      	itete	ne
 800a000:	6560      	strne	r0, [r4, #84]	; 0x54
 800a002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a00a:	81a3      	strheq	r3, [r4, #12]
 800a00c:	bf18      	it	ne
 800a00e:	81a3      	strhne	r3, [r4, #12]
 800a010:	bd10      	pop	{r4, pc}

0800a012 <__sclose>:
 800a012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a016:	f000 b891 	b.w	800a13c <_close_r>

0800a01a <memset>:
 800a01a:	4402      	add	r2, r0
 800a01c:	4603      	mov	r3, r0
 800a01e:	4293      	cmp	r3, r2
 800a020:	d100      	bne.n	800a024 <memset+0xa>
 800a022:	4770      	bx	lr
 800a024:	f803 1b01 	strb.w	r1, [r3], #1
 800a028:	e7f9      	b.n	800a01e <memset+0x4>

0800a02a <strncmp>:
 800a02a:	b510      	push	{r4, lr}
 800a02c:	b16a      	cbz	r2, 800a04a <strncmp+0x20>
 800a02e:	3901      	subs	r1, #1
 800a030:	1884      	adds	r4, r0, r2
 800a032:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a036:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d103      	bne.n	800a046 <strncmp+0x1c>
 800a03e:	42a0      	cmp	r0, r4
 800a040:	d001      	beq.n	800a046 <strncmp+0x1c>
 800a042:	2a00      	cmp	r2, #0
 800a044:	d1f5      	bne.n	800a032 <strncmp+0x8>
 800a046:	1ad0      	subs	r0, r2, r3
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	4610      	mov	r0, r2
 800a04c:	e7fc      	b.n	800a048 <strncmp+0x1e>
	...

0800a050 <strtok>:
 800a050:	4b16      	ldr	r3, [pc, #88]	; (800a0ac <strtok+0x5c>)
 800a052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a054:	681e      	ldr	r6, [r3, #0]
 800a056:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a058:	4605      	mov	r5, r0
 800a05a:	b9fc      	cbnz	r4, 800a09c <strtok+0x4c>
 800a05c:	2050      	movs	r0, #80	; 0x50
 800a05e:	9101      	str	r1, [sp, #4]
 800a060:	f7fe f84a 	bl	80080f8 <malloc>
 800a064:	9901      	ldr	r1, [sp, #4]
 800a066:	6470      	str	r0, [r6, #68]	; 0x44
 800a068:	4602      	mov	r2, r0
 800a06a:	b920      	cbnz	r0, 800a076 <strtok+0x26>
 800a06c:	4b10      	ldr	r3, [pc, #64]	; (800a0b0 <strtok+0x60>)
 800a06e:	4811      	ldr	r0, [pc, #68]	; (800a0b4 <strtok+0x64>)
 800a070:	215b      	movs	r1, #91	; 0x5b
 800a072:	f000 f90b 	bl	800a28c <__assert_func>
 800a076:	e9c0 4400 	strd	r4, r4, [r0]
 800a07a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a07e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a082:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a086:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a08a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a08e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a092:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a096:	6184      	str	r4, [r0, #24]
 800a098:	7704      	strb	r4, [r0, #28]
 800a09a:	6244      	str	r4, [r0, #36]	; 0x24
 800a09c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a09e:	2301      	movs	r3, #1
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	b002      	add	sp, #8
 800a0a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0a8:	f000 b806 	b.w	800a0b8 <__strtok_r>
 800a0ac:	200001e0 	.word	0x200001e0
 800a0b0:	0800f2c2 	.word	0x0800f2c2
 800a0b4:	0800f2d9 	.word	0x0800f2d9

0800a0b8 <__strtok_r>:
 800a0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ba:	b908      	cbnz	r0, 800a0c0 <__strtok_r+0x8>
 800a0bc:	6810      	ldr	r0, [r2, #0]
 800a0be:	b188      	cbz	r0, 800a0e4 <__strtok_r+0x2c>
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a0c8:	460f      	mov	r7, r1
 800a0ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a0ce:	b91e      	cbnz	r6, 800a0d8 <__strtok_r+0x20>
 800a0d0:	b965      	cbnz	r5, 800a0ec <__strtok_r+0x34>
 800a0d2:	6015      	str	r5, [r2, #0]
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	e005      	b.n	800a0e4 <__strtok_r+0x2c>
 800a0d8:	42b5      	cmp	r5, r6
 800a0da:	d1f6      	bne.n	800a0ca <__strtok_r+0x12>
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1f0      	bne.n	800a0c2 <__strtok_r+0xa>
 800a0e0:	6014      	str	r4, [r2, #0]
 800a0e2:	7003      	strb	r3, [r0, #0]
 800a0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e6:	461c      	mov	r4, r3
 800a0e8:	e00c      	b.n	800a104 <__strtok_r+0x4c>
 800a0ea:	b915      	cbnz	r5, 800a0f2 <__strtok_r+0x3a>
 800a0ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0f0:	460e      	mov	r6, r1
 800a0f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a0f6:	42ab      	cmp	r3, r5
 800a0f8:	d1f7      	bne.n	800a0ea <__strtok_r+0x32>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0f3      	beq.n	800a0e6 <__strtok_r+0x2e>
 800a0fe:	2300      	movs	r3, #0
 800a100:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a104:	6014      	str	r4, [r2, #0]
 800a106:	e7ed      	b.n	800a0e4 <__strtok_r+0x2c>

0800a108 <strstr>:
 800a108:	780a      	ldrb	r2, [r1, #0]
 800a10a:	b570      	push	{r4, r5, r6, lr}
 800a10c:	b96a      	cbnz	r2, 800a12a <strstr+0x22>
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	429a      	cmp	r2, r3
 800a112:	d109      	bne.n	800a128 <strstr+0x20>
 800a114:	460c      	mov	r4, r1
 800a116:	4605      	mov	r5, r0
 800a118:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0f6      	beq.n	800a10e <strstr+0x6>
 800a120:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a124:	429e      	cmp	r6, r3
 800a126:	d0f7      	beq.n	800a118 <strstr+0x10>
 800a128:	3001      	adds	r0, #1
 800a12a:	7803      	ldrb	r3, [r0, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1ef      	bne.n	800a110 <strstr+0x8>
 800a130:	4618      	mov	r0, r3
 800a132:	e7ec      	b.n	800a10e <strstr+0x6>

0800a134 <_localeconv_r>:
 800a134:	4800      	ldr	r0, [pc, #0]	; (800a138 <_localeconv_r+0x4>)
 800a136:	4770      	bx	lr
 800a138:	20000118 	.word	0x20000118

0800a13c <_close_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d06      	ldr	r5, [pc, #24]	; (800a158 <_close_r+0x1c>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	602b      	str	r3, [r5, #0]
 800a148:	f7f9 fe5f 	bl	8003e0a <_close>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_close_r+0x1a>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_close_r+0x1a>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	20000c10 	.word	0x20000c10

0800a15c <_lseek_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d07      	ldr	r5, [pc, #28]	; (800a17c <_lseek_r+0x20>)
 800a160:	4604      	mov	r4, r0
 800a162:	4608      	mov	r0, r1
 800a164:	4611      	mov	r1, r2
 800a166:	2200      	movs	r2, #0
 800a168:	602a      	str	r2, [r5, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	f7f9 fe74 	bl	8003e58 <_lseek>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d102      	bne.n	800a17a <_lseek_r+0x1e>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	b103      	cbz	r3, 800a17a <_lseek_r+0x1e>
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	20000c10 	.word	0x20000c10

0800a180 <_read_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	4d07      	ldr	r5, [pc, #28]	; (800a1a0 <_read_r+0x20>)
 800a184:	4604      	mov	r4, r0
 800a186:	4608      	mov	r0, r1
 800a188:	4611      	mov	r1, r2
 800a18a:	2200      	movs	r2, #0
 800a18c:	602a      	str	r2, [r5, #0]
 800a18e:	461a      	mov	r2, r3
 800a190:	f7f9 fe02 	bl	8003d98 <_read>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_read_r+0x1e>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_read_r+0x1e>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	20000c10 	.word	0x20000c10

0800a1a4 <_sbrk_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d06      	ldr	r5, [pc, #24]	; (800a1c0 <_sbrk_r+0x1c>)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	602b      	str	r3, [r5, #0]
 800a1b0:	f7f9 fe60 	bl	8003e74 <_sbrk>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_sbrk_r+0x1a>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_sbrk_r+0x1a>
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	20000c10 	.word	0x20000c10

0800a1c4 <_write_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	4d07      	ldr	r5, [pc, #28]	; (800a1e4 <_write_r+0x20>)
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	4608      	mov	r0, r1
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	602a      	str	r2, [r5, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	f7f9 fdfd 	bl	8003dd2 <_write>
 800a1d8:	1c43      	adds	r3, r0, #1
 800a1da:	d102      	bne.n	800a1e2 <_write_r+0x1e>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	b103      	cbz	r3, 800a1e2 <_write_r+0x1e>
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	20000c10 	.word	0x20000c10

0800a1e8 <__errno>:
 800a1e8:	4b01      	ldr	r3, [pc, #4]	; (800a1f0 <__errno+0x8>)
 800a1ea:	6818      	ldr	r0, [r3, #0]
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	200001e0 	.word	0x200001e0

0800a1f4 <__libc_init_array>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	4d0d      	ldr	r5, [pc, #52]	; (800a22c <__libc_init_array+0x38>)
 800a1f8:	4c0d      	ldr	r4, [pc, #52]	; (800a230 <__libc_init_array+0x3c>)
 800a1fa:	1b64      	subs	r4, r4, r5
 800a1fc:	10a4      	asrs	r4, r4, #2
 800a1fe:	2600      	movs	r6, #0
 800a200:	42a6      	cmp	r6, r4
 800a202:	d109      	bne.n	800a218 <__libc_init_array+0x24>
 800a204:	4d0b      	ldr	r5, [pc, #44]	; (800a234 <__libc_init_array+0x40>)
 800a206:	4c0c      	ldr	r4, [pc, #48]	; (800a238 <__libc_init_array+0x44>)
 800a208:	f003 ff0c 	bl	800e024 <_init>
 800a20c:	1b64      	subs	r4, r4, r5
 800a20e:	10a4      	asrs	r4, r4, #2
 800a210:	2600      	movs	r6, #0
 800a212:	42a6      	cmp	r6, r4
 800a214:	d105      	bne.n	800a222 <__libc_init_array+0x2e>
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	f855 3b04 	ldr.w	r3, [r5], #4
 800a21c:	4798      	blx	r3
 800a21e:	3601      	adds	r6, #1
 800a220:	e7ee      	b.n	800a200 <__libc_init_array+0xc>
 800a222:	f855 3b04 	ldr.w	r3, [r5], #4
 800a226:	4798      	blx	r3
 800a228:	3601      	adds	r6, #1
 800a22a:	e7f2      	b.n	800a212 <__libc_init_array+0x1e>
 800a22c:	0800f7c8 	.word	0x0800f7c8
 800a230:	0800f7c8 	.word	0x0800f7c8
 800a234:	0800f7c8 	.word	0x0800f7c8
 800a238:	0800f7cc 	.word	0x0800f7cc

0800a23c <__retarget_lock_init_recursive>:
 800a23c:	4770      	bx	lr

0800a23e <__retarget_lock_acquire_recursive>:
 800a23e:	4770      	bx	lr

0800a240 <__retarget_lock_release_recursive>:
 800a240:	4770      	bx	lr

0800a242 <strcpy>:
 800a242:	4603      	mov	r3, r0
 800a244:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a248:	f803 2b01 	strb.w	r2, [r3], #1
 800a24c:	2a00      	cmp	r2, #0
 800a24e:	d1f9      	bne.n	800a244 <strcpy+0x2>
 800a250:	4770      	bx	lr

0800a252 <memcpy>:
 800a252:	440a      	add	r2, r1
 800a254:	4291      	cmp	r1, r2
 800a256:	f100 33ff 	add.w	r3, r0, #4294967295
 800a25a:	d100      	bne.n	800a25e <memcpy+0xc>
 800a25c:	4770      	bx	lr
 800a25e:	b510      	push	{r4, lr}
 800a260:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a264:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a268:	4291      	cmp	r1, r2
 800a26a:	d1f9      	bne.n	800a260 <memcpy+0xe>
 800a26c:	bd10      	pop	{r4, pc}
	...

0800a270 <nan>:
 800a270:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a278 <nan+0x8>
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	00000000 	.word	0x00000000
 800a27c:	7ff80000 	.word	0x7ff80000

0800a280 <nanf>:
 800a280:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a288 <nanf+0x8>
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	7fc00000 	.word	0x7fc00000

0800a28c <__assert_func>:
 800a28c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a28e:	4614      	mov	r4, r2
 800a290:	461a      	mov	r2, r3
 800a292:	4b09      	ldr	r3, [pc, #36]	; (800a2b8 <__assert_func+0x2c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4605      	mov	r5, r0
 800a298:	68d8      	ldr	r0, [r3, #12]
 800a29a:	b14c      	cbz	r4, 800a2b0 <__assert_func+0x24>
 800a29c:	4b07      	ldr	r3, [pc, #28]	; (800a2bc <__assert_func+0x30>)
 800a29e:	9100      	str	r1, [sp, #0]
 800a2a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2a4:	4906      	ldr	r1, [pc, #24]	; (800a2c0 <__assert_func+0x34>)
 800a2a6:	462b      	mov	r3, r5
 800a2a8:	f002 f8fe 	bl	800c4a8 <fiprintf>
 800a2ac:	f002 f928 	bl	800c500 <abort>
 800a2b0:	4b04      	ldr	r3, [pc, #16]	; (800a2c4 <__assert_func+0x38>)
 800a2b2:	461c      	mov	r4, r3
 800a2b4:	e7f3      	b.n	800a29e <__assert_func+0x12>
 800a2b6:	bf00      	nop
 800a2b8:	200001e0 	.word	0x200001e0
 800a2bc:	0800f33b 	.word	0x0800f33b
 800a2c0:	0800f348 	.word	0x0800f348
 800a2c4:	0800f376 	.word	0x0800f376

0800a2c8 <quorem>:
 800a2c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	6903      	ldr	r3, [r0, #16]
 800a2ce:	690c      	ldr	r4, [r1, #16]
 800a2d0:	42a3      	cmp	r3, r4
 800a2d2:	4607      	mov	r7, r0
 800a2d4:	db7e      	blt.n	800a3d4 <quorem+0x10c>
 800a2d6:	3c01      	subs	r4, #1
 800a2d8:	f101 0814 	add.w	r8, r1, #20
 800a2dc:	f100 0514 	add.w	r5, r0, #20
 800a2e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2fa:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2fe:	d331      	bcc.n	800a364 <quorem+0x9c>
 800a300:	f04f 0e00 	mov.w	lr, #0
 800a304:	4640      	mov	r0, r8
 800a306:	46ac      	mov	ip, r5
 800a308:	46f2      	mov	sl, lr
 800a30a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a30e:	b293      	uxth	r3, r2
 800a310:	fb06 e303 	mla	r3, r6, r3, lr
 800a314:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a318:	0c1a      	lsrs	r2, r3, #16
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	ebaa 0303 	sub.w	r3, sl, r3
 800a320:	f8dc a000 	ldr.w	sl, [ip]
 800a324:	fa13 f38a 	uxtah	r3, r3, sl
 800a328:	fb06 220e 	mla	r2, r6, lr, r2
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	9b00      	ldr	r3, [sp, #0]
 800a330:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a334:	b292      	uxth	r2, r2
 800a336:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a33a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a33e:	f8bd 3000 	ldrh.w	r3, [sp]
 800a342:	4581      	cmp	r9, r0
 800a344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a348:	f84c 3b04 	str.w	r3, [ip], #4
 800a34c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a350:	d2db      	bcs.n	800a30a <quorem+0x42>
 800a352:	f855 300b 	ldr.w	r3, [r5, fp]
 800a356:	b92b      	cbnz	r3, 800a364 <quorem+0x9c>
 800a358:	9b01      	ldr	r3, [sp, #4]
 800a35a:	3b04      	subs	r3, #4
 800a35c:	429d      	cmp	r5, r3
 800a35e:	461a      	mov	r2, r3
 800a360:	d32c      	bcc.n	800a3bc <quorem+0xf4>
 800a362:	613c      	str	r4, [r7, #16]
 800a364:	4638      	mov	r0, r7
 800a366:	f001 fca5 	bl	800bcb4 <__mcmp>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	db22      	blt.n	800a3b4 <quorem+0xec>
 800a36e:	3601      	adds	r6, #1
 800a370:	4629      	mov	r1, r5
 800a372:	2000      	movs	r0, #0
 800a374:	f858 2b04 	ldr.w	r2, [r8], #4
 800a378:	f8d1 c000 	ldr.w	ip, [r1]
 800a37c:	b293      	uxth	r3, r2
 800a37e:	1ac3      	subs	r3, r0, r3
 800a380:	0c12      	lsrs	r2, r2, #16
 800a382:	fa13 f38c 	uxtah	r3, r3, ip
 800a386:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a38a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a38e:	b29b      	uxth	r3, r3
 800a390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a394:	45c1      	cmp	r9, r8
 800a396:	f841 3b04 	str.w	r3, [r1], #4
 800a39a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a39e:	d2e9      	bcs.n	800a374 <quorem+0xac>
 800a3a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3a8:	b922      	cbnz	r2, 800a3b4 <quorem+0xec>
 800a3aa:	3b04      	subs	r3, #4
 800a3ac:	429d      	cmp	r5, r3
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	d30a      	bcc.n	800a3c8 <quorem+0x100>
 800a3b2:	613c      	str	r4, [r7, #16]
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	b003      	add	sp, #12
 800a3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3bc:	6812      	ldr	r2, [r2, #0]
 800a3be:	3b04      	subs	r3, #4
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	d1ce      	bne.n	800a362 <quorem+0x9a>
 800a3c4:	3c01      	subs	r4, #1
 800a3c6:	e7c9      	b.n	800a35c <quorem+0x94>
 800a3c8:	6812      	ldr	r2, [r2, #0]
 800a3ca:	3b04      	subs	r3, #4
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	d1f0      	bne.n	800a3b2 <quorem+0xea>
 800a3d0:	3c01      	subs	r4, #1
 800a3d2:	e7eb      	b.n	800a3ac <quorem+0xe4>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	e7ee      	b.n	800a3b6 <quorem+0xee>

0800a3d8 <_dtoa_r>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	ed2d 8b04 	vpush	{d8-d9}
 800a3e0:	69c5      	ldr	r5, [r0, #28]
 800a3e2:	b093      	sub	sp, #76	; 0x4c
 800a3e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a3e8:	ec57 6b10 	vmov	r6, r7, d0
 800a3ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a3f0:	9107      	str	r1, [sp, #28]
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	920a      	str	r2, [sp, #40]	; 0x28
 800a3f6:	930d      	str	r3, [sp, #52]	; 0x34
 800a3f8:	b975      	cbnz	r5, 800a418 <_dtoa_r+0x40>
 800a3fa:	2010      	movs	r0, #16
 800a3fc:	f7fd fe7c 	bl	80080f8 <malloc>
 800a400:	4602      	mov	r2, r0
 800a402:	61e0      	str	r0, [r4, #28]
 800a404:	b920      	cbnz	r0, 800a410 <_dtoa_r+0x38>
 800a406:	4bae      	ldr	r3, [pc, #696]	; (800a6c0 <_dtoa_r+0x2e8>)
 800a408:	21ef      	movs	r1, #239	; 0xef
 800a40a:	48ae      	ldr	r0, [pc, #696]	; (800a6c4 <_dtoa_r+0x2ec>)
 800a40c:	f7ff ff3e 	bl	800a28c <__assert_func>
 800a410:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a414:	6005      	str	r5, [r0, #0]
 800a416:	60c5      	str	r5, [r0, #12]
 800a418:	69e3      	ldr	r3, [r4, #28]
 800a41a:	6819      	ldr	r1, [r3, #0]
 800a41c:	b151      	cbz	r1, 800a434 <_dtoa_r+0x5c>
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	604a      	str	r2, [r1, #4]
 800a422:	2301      	movs	r3, #1
 800a424:	4093      	lsls	r3, r2
 800a426:	608b      	str	r3, [r1, #8]
 800a428:	4620      	mov	r0, r4
 800a42a:	f001 f9bd 	bl	800b7a8 <_Bfree>
 800a42e:	69e3      	ldr	r3, [r4, #28]
 800a430:	2200      	movs	r2, #0
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	1e3b      	subs	r3, r7, #0
 800a436:	bfbb      	ittet	lt
 800a438:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a43c:	9303      	strlt	r3, [sp, #12]
 800a43e:	2300      	movge	r3, #0
 800a440:	2201      	movlt	r2, #1
 800a442:	bfac      	ite	ge
 800a444:	f8c8 3000 	strge.w	r3, [r8]
 800a448:	f8c8 2000 	strlt.w	r2, [r8]
 800a44c:	4b9e      	ldr	r3, [pc, #632]	; (800a6c8 <_dtoa_r+0x2f0>)
 800a44e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a452:	ea33 0308 	bics.w	r3, r3, r8
 800a456:	d11b      	bne.n	800a490 <_dtoa_r+0xb8>
 800a458:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a45a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a464:	4333      	orrs	r3, r6
 800a466:	f000 8593 	beq.w	800af90 <_dtoa_r+0xbb8>
 800a46a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a46c:	b963      	cbnz	r3, 800a488 <_dtoa_r+0xb0>
 800a46e:	4b97      	ldr	r3, [pc, #604]	; (800a6cc <_dtoa_r+0x2f4>)
 800a470:	e027      	b.n	800a4c2 <_dtoa_r+0xea>
 800a472:	4b97      	ldr	r3, [pc, #604]	; (800a6d0 <_dtoa_r+0x2f8>)
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	3308      	adds	r3, #8
 800a478:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	9800      	ldr	r0, [sp, #0]
 800a47e:	b013      	add	sp, #76	; 0x4c
 800a480:	ecbd 8b04 	vpop	{d8-d9}
 800a484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a488:	4b90      	ldr	r3, [pc, #576]	; (800a6cc <_dtoa_r+0x2f4>)
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	3303      	adds	r3, #3
 800a48e:	e7f3      	b.n	800a478 <_dtoa_r+0xa0>
 800a490:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a494:	2200      	movs	r2, #0
 800a496:	ec51 0b17 	vmov	r0, r1, d7
 800a49a:	eeb0 8a47 	vmov.f32	s16, s14
 800a49e:	eef0 8a67 	vmov.f32	s17, s15
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f7f6 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4a8:	4681      	mov	r9, r0
 800a4aa:	b160      	cbz	r0, 800a4c6 <_dtoa_r+0xee>
 800a4ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 8568 	beq.w	800af8a <_dtoa_r+0xbb2>
 800a4ba:	4b86      	ldr	r3, [pc, #536]	; (800a6d4 <_dtoa_r+0x2fc>)
 800a4bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	e7da      	b.n	800a47c <_dtoa_r+0xa4>
 800a4c6:	aa10      	add	r2, sp, #64	; 0x40
 800a4c8:	a911      	add	r1, sp, #68	; 0x44
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	eeb0 0a48 	vmov.f32	s0, s16
 800a4d0:	eef0 0a68 	vmov.f32	s1, s17
 800a4d4:	f001 fd04 	bl	800bee0 <__d2b>
 800a4d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a4dc:	4682      	mov	sl, r0
 800a4de:	2d00      	cmp	r5, #0
 800a4e0:	d07f      	beq.n	800a5e2 <_dtoa_r+0x20a>
 800a4e2:	ee18 3a90 	vmov	r3, s17
 800a4e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a4ee:	ec51 0b18 	vmov	r0, r1, d8
 800a4f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a4f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a4fe:	4619      	mov	r1, r3
 800a500:	2200      	movs	r2, #0
 800a502:	4b75      	ldr	r3, [pc, #468]	; (800a6d8 <_dtoa_r+0x300>)
 800a504:	f7f5 fec0 	bl	8000288 <__aeabi_dsub>
 800a508:	a367      	add	r3, pc, #412	; (adr r3, 800a6a8 <_dtoa_r+0x2d0>)
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	f7f6 f873 	bl	80005f8 <__aeabi_dmul>
 800a512:	a367      	add	r3, pc, #412	; (adr r3, 800a6b0 <_dtoa_r+0x2d8>)
 800a514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a518:	f7f5 feb8 	bl	800028c <__adddf3>
 800a51c:	4606      	mov	r6, r0
 800a51e:	4628      	mov	r0, r5
 800a520:	460f      	mov	r7, r1
 800a522:	f7f5 ffff 	bl	8000524 <__aeabi_i2d>
 800a526:	a364      	add	r3, pc, #400	; (adr r3, 800a6b8 <_dtoa_r+0x2e0>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	f7f6 f864 	bl	80005f8 <__aeabi_dmul>
 800a530:	4602      	mov	r2, r0
 800a532:	460b      	mov	r3, r1
 800a534:	4630      	mov	r0, r6
 800a536:	4639      	mov	r1, r7
 800a538:	f7f5 fea8 	bl	800028c <__adddf3>
 800a53c:	4606      	mov	r6, r0
 800a53e:	460f      	mov	r7, r1
 800a540:	f7f6 fb0a 	bl	8000b58 <__aeabi_d2iz>
 800a544:	2200      	movs	r2, #0
 800a546:	4683      	mov	fp, r0
 800a548:	2300      	movs	r3, #0
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f6 fac5 	bl	8000adc <__aeabi_dcmplt>
 800a552:	b148      	cbz	r0, 800a568 <_dtoa_r+0x190>
 800a554:	4658      	mov	r0, fp
 800a556:	f7f5 ffe5 	bl	8000524 <__aeabi_i2d>
 800a55a:	4632      	mov	r2, r6
 800a55c:	463b      	mov	r3, r7
 800a55e:	f7f6 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a562:	b908      	cbnz	r0, 800a568 <_dtoa_r+0x190>
 800a564:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a568:	f1bb 0f16 	cmp.w	fp, #22
 800a56c:	d857      	bhi.n	800a61e <_dtoa_r+0x246>
 800a56e:	4b5b      	ldr	r3, [pc, #364]	; (800a6dc <_dtoa_r+0x304>)
 800a570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	ec51 0b18 	vmov	r0, r1, d8
 800a57c:	f7f6 faae 	bl	8000adc <__aeabi_dcmplt>
 800a580:	2800      	cmp	r0, #0
 800a582:	d04e      	beq.n	800a622 <_dtoa_r+0x24a>
 800a584:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a588:	2300      	movs	r3, #0
 800a58a:	930c      	str	r3, [sp, #48]	; 0x30
 800a58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a58e:	1b5b      	subs	r3, r3, r5
 800a590:	1e5a      	subs	r2, r3, #1
 800a592:	bf45      	ittet	mi
 800a594:	f1c3 0301 	rsbmi	r3, r3, #1
 800a598:	9305      	strmi	r3, [sp, #20]
 800a59a:	2300      	movpl	r3, #0
 800a59c:	2300      	movmi	r3, #0
 800a59e:	9206      	str	r2, [sp, #24]
 800a5a0:	bf54      	ite	pl
 800a5a2:	9305      	strpl	r3, [sp, #20]
 800a5a4:	9306      	strmi	r3, [sp, #24]
 800a5a6:	f1bb 0f00 	cmp.w	fp, #0
 800a5aa:	db3c      	blt.n	800a626 <_dtoa_r+0x24e>
 800a5ac:	9b06      	ldr	r3, [sp, #24]
 800a5ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a5b2:	445b      	add	r3, fp
 800a5b4:	9306      	str	r3, [sp, #24]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	9308      	str	r3, [sp, #32]
 800a5ba:	9b07      	ldr	r3, [sp, #28]
 800a5bc:	2b09      	cmp	r3, #9
 800a5be:	d868      	bhi.n	800a692 <_dtoa_r+0x2ba>
 800a5c0:	2b05      	cmp	r3, #5
 800a5c2:	bfc4      	itt	gt
 800a5c4:	3b04      	subgt	r3, #4
 800a5c6:	9307      	strgt	r3, [sp, #28]
 800a5c8:	9b07      	ldr	r3, [sp, #28]
 800a5ca:	f1a3 0302 	sub.w	r3, r3, #2
 800a5ce:	bfcc      	ite	gt
 800a5d0:	2500      	movgt	r5, #0
 800a5d2:	2501      	movle	r5, #1
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	f200 8085 	bhi.w	800a6e4 <_dtoa_r+0x30c>
 800a5da:	e8df f003 	tbb	[pc, r3]
 800a5de:	3b2e      	.short	0x3b2e
 800a5e0:	5839      	.short	0x5839
 800a5e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a5e6:	441d      	add	r5, r3
 800a5e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a5ec:	2b20      	cmp	r3, #32
 800a5ee:	bfc1      	itttt	gt
 800a5f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a5f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a5fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a600:	bfd6      	itet	le
 800a602:	f1c3 0320 	rsble	r3, r3, #32
 800a606:	ea48 0003 	orrgt.w	r0, r8, r3
 800a60a:	fa06 f003 	lslle.w	r0, r6, r3
 800a60e:	f7f5 ff79 	bl	8000504 <__aeabi_ui2d>
 800a612:	2201      	movs	r2, #1
 800a614:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a618:	3d01      	subs	r5, #1
 800a61a:	920e      	str	r2, [sp, #56]	; 0x38
 800a61c:	e76f      	b.n	800a4fe <_dtoa_r+0x126>
 800a61e:	2301      	movs	r3, #1
 800a620:	e7b3      	b.n	800a58a <_dtoa_r+0x1b2>
 800a622:	900c      	str	r0, [sp, #48]	; 0x30
 800a624:	e7b2      	b.n	800a58c <_dtoa_r+0x1b4>
 800a626:	9b05      	ldr	r3, [sp, #20]
 800a628:	eba3 030b 	sub.w	r3, r3, fp
 800a62c:	9305      	str	r3, [sp, #20]
 800a62e:	f1cb 0300 	rsb	r3, fp, #0
 800a632:	9308      	str	r3, [sp, #32]
 800a634:	2300      	movs	r3, #0
 800a636:	930b      	str	r3, [sp, #44]	; 0x2c
 800a638:	e7bf      	b.n	800a5ba <_dtoa_r+0x1e2>
 800a63a:	2300      	movs	r3, #0
 800a63c:	9309      	str	r3, [sp, #36]	; 0x24
 800a63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a640:	2b00      	cmp	r3, #0
 800a642:	dc52      	bgt.n	800a6ea <_dtoa_r+0x312>
 800a644:	2301      	movs	r3, #1
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	9304      	str	r3, [sp, #16]
 800a64a:	461a      	mov	r2, r3
 800a64c:	920a      	str	r2, [sp, #40]	; 0x28
 800a64e:	e00b      	b.n	800a668 <_dtoa_r+0x290>
 800a650:	2301      	movs	r3, #1
 800a652:	e7f3      	b.n	800a63c <_dtoa_r+0x264>
 800a654:	2300      	movs	r3, #0
 800a656:	9309      	str	r3, [sp, #36]	; 0x24
 800a658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65a:	445b      	add	r3, fp
 800a65c:	9301      	str	r3, [sp, #4]
 800a65e:	3301      	adds	r3, #1
 800a660:	2b01      	cmp	r3, #1
 800a662:	9304      	str	r3, [sp, #16]
 800a664:	bfb8      	it	lt
 800a666:	2301      	movlt	r3, #1
 800a668:	69e0      	ldr	r0, [r4, #28]
 800a66a:	2100      	movs	r1, #0
 800a66c:	2204      	movs	r2, #4
 800a66e:	f102 0614 	add.w	r6, r2, #20
 800a672:	429e      	cmp	r6, r3
 800a674:	d93d      	bls.n	800a6f2 <_dtoa_r+0x31a>
 800a676:	6041      	str	r1, [r0, #4]
 800a678:	4620      	mov	r0, r4
 800a67a:	f001 f855 	bl	800b728 <_Balloc>
 800a67e:	9000      	str	r0, [sp, #0]
 800a680:	2800      	cmp	r0, #0
 800a682:	d139      	bne.n	800a6f8 <_dtoa_r+0x320>
 800a684:	4b16      	ldr	r3, [pc, #88]	; (800a6e0 <_dtoa_r+0x308>)
 800a686:	4602      	mov	r2, r0
 800a688:	f240 11af 	movw	r1, #431	; 0x1af
 800a68c:	e6bd      	b.n	800a40a <_dtoa_r+0x32>
 800a68e:	2301      	movs	r3, #1
 800a690:	e7e1      	b.n	800a656 <_dtoa_r+0x27e>
 800a692:	2501      	movs	r5, #1
 800a694:	2300      	movs	r3, #0
 800a696:	9307      	str	r3, [sp, #28]
 800a698:	9509      	str	r5, [sp, #36]	; 0x24
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295
 800a69e:	9301      	str	r3, [sp, #4]
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2312      	movs	r3, #18
 800a6a6:	e7d1      	b.n	800a64c <_dtoa_r+0x274>
 800a6a8:	636f4361 	.word	0x636f4361
 800a6ac:	3fd287a7 	.word	0x3fd287a7
 800a6b0:	8b60c8b3 	.word	0x8b60c8b3
 800a6b4:	3fc68a28 	.word	0x3fc68a28
 800a6b8:	509f79fb 	.word	0x509f79fb
 800a6bc:	3fd34413 	.word	0x3fd34413
 800a6c0:	0800f2c2 	.word	0x0800f2c2
 800a6c4:	0800f384 	.word	0x0800f384
 800a6c8:	7ff00000 	.word	0x7ff00000
 800a6cc:	0800f380 	.word	0x0800f380
 800a6d0:	0800f377 	.word	0x0800f377
 800a6d4:	0800f29a 	.word	0x0800f29a
 800a6d8:	3ff80000 	.word	0x3ff80000
 800a6dc:	0800f4d0 	.word	0x0800f4d0
 800a6e0:	0800f3dc 	.word	0x0800f3dc
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e8:	e7d7      	b.n	800a69a <_dtoa_r+0x2c2>
 800a6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ec:	9301      	str	r3, [sp, #4]
 800a6ee:	9304      	str	r3, [sp, #16]
 800a6f0:	e7ba      	b.n	800a668 <_dtoa_r+0x290>
 800a6f2:	3101      	adds	r1, #1
 800a6f4:	0052      	lsls	r2, r2, #1
 800a6f6:	e7ba      	b.n	800a66e <_dtoa_r+0x296>
 800a6f8:	69e3      	ldr	r3, [r4, #28]
 800a6fa:	9a00      	ldr	r2, [sp, #0]
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	9b04      	ldr	r3, [sp, #16]
 800a700:	2b0e      	cmp	r3, #14
 800a702:	f200 80a8 	bhi.w	800a856 <_dtoa_r+0x47e>
 800a706:	2d00      	cmp	r5, #0
 800a708:	f000 80a5 	beq.w	800a856 <_dtoa_r+0x47e>
 800a70c:	f1bb 0f00 	cmp.w	fp, #0
 800a710:	dd38      	ble.n	800a784 <_dtoa_r+0x3ac>
 800a712:	4bc0      	ldr	r3, [pc, #768]	; (800aa14 <_dtoa_r+0x63c>)
 800a714:	f00b 020f 	and.w	r2, fp, #15
 800a718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a71c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a720:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a724:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a728:	d019      	beq.n	800a75e <_dtoa_r+0x386>
 800a72a:	4bbb      	ldr	r3, [pc, #748]	; (800aa18 <_dtoa_r+0x640>)
 800a72c:	ec51 0b18 	vmov	r0, r1, d8
 800a730:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a734:	f7f6 f88a 	bl	800084c <__aeabi_ddiv>
 800a738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a73c:	f008 080f 	and.w	r8, r8, #15
 800a740:	2503      	movs	r5, #3
 800a742:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aa18 <_dtoa_r+0x640>
 800a746:	f1b8 0f00 	cmp.w	r8, #0
 800a74a:	d10a      	bne.n	800a762 <_dtoa_r+0x38a>
 800a74c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a750:	4632      	mov	r2, r6
 800a752:	463b      	mov	r3, r7
 800a754:	f7f6 f87a 	bl	800084c <__aeabi_ddiv>
 800a758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a75c:	e02b      	b.n	800a7b6 <_dtoa_r+0x3de>
 800a75e:	2502      	movs	r5, #2
 800a760:	e7ef      	b.n	800a742 <_dtoa_r+0x36a>
 800a762:	f018 0f01 	tst.w	r8, #1
 800a766:	d008      	beq.n	800a77a <_dtoa_r+0x3a2>
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a770:	f7f5 ff42 	bl	80005f8 <__aeabi_dmul>
 800a774:	3501      	adds	r5, #1
 800a776:	4606      	mov	r6, r0
 800a778:	460f      	mov	r7, r1
 800a77a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a77e:	f109 0908 	add.w	r9, r9, #8
 800a782:	e7e0      	b.n	800a746 <_dtoa_r+0x36e>
 800a784:	f000 809f 	beq.w	800a8c6 <_dtoa_r+0x4ee>
 800a788:	f1cb 0600 	rsb	r6, fp, #0
 800a78c:	4ba1      	ldr	r3, [pc, #644]	; (800aa14 <_dtoa_r+0x63c>)
 800a78e:	4fa2      	ldr	r7, [pc, #648]	; (800aa18 <_dtoa_r+0x640>)
 800a790:	f006 020f 	and.w	r2, r6, #15
 800a794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	ec51 0b18 	vmov	r0, r1, d8
 800a7a0:	f7f5 ff2a 	bl	80005f8 <__aeabi_dmul>
 800a7a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7a8:	1136      	asrs	r6, r6, #4
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	2502      	movs	r5, #2
 800a7ae:	2e00      	cmp	r6, #0
 800a7b0:	d17e      	bne.n	800a8b0 <_dtoa_r+0x4d8>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1d0      	bne.n	800a758 <_dtoa_r+0x380>
 800a7b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 8084 	beq.w	800a8ca <_dtoa_r+0x4f2>
 800a7c2:	4b96      	ldr	r3, [pc, #600]	; (800aa1c <_dtoa_r+0x644>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	f7f6 f987 	bl	8000adc <__aeabi_dcmplt>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d07b      	beq.n	800a8ca <_dtoa_r+0x4f2>
 800a7d2:	9b04      	ldr	r3, [sp, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d078      	beq.n	800a8ca <_dtoa_r+0x4f2>
 800a7d8:	9b01      	ldr	r3, [sp, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dd39      	ble.n	800a852 <_dtoa_r+0x47a>
 800a7de:	4b90      	ldr	r3, [pc, #576]	; (800aa20 <_dtoa_r+0x648>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	f7f5 ff07 	bl	80005f8 <__aeabi_dmul>
 800a7ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7ee:	9e01      	ldr	r6, [sp, #4]
 800a7f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a7f4:	3501      	adds	r5, #1
 800a7f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	f7f5 fe92 	bl	8000524 <__aeabi_i2d>
 800a800:	4642      	mov	r2, r8
 800a802:	464b      	mov	r3, r9
 800a804:	f7f5 fef8 	bl	80005f8 <__aeabi_dmul>
 800a808:	4b86      	ldr	r3, [pc, #536]	; (800aa24 <_dtoa_r+0x64c>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	f7f5 fd3e 	bl	800028c <__adddf3>
 800a810:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a818:	9303      	str	r3, [sp, #12]
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	d158      	bne.n	800a8d0 <_dtoa_r+0x4f8>
 800a81e:	4b82      	ldr	r3, [pc, #520]	; (800aa28 <_dtoa_r+0x650>)
 800a820:	2200      	movs	r2, #0
 800a822:	4640      	mov	r0, r8
 800a824:	4649      	mov	r1, r9
 800a826:	f7f5 fd2f 	bl	8000288 <__aeabi_dsub>
 800a82a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a82e:	4680      	mov	r8, r0
 800a830:	4689      	mov	r9, r1
 800a832:	f7f6 f971 	bl	8000b18 <__aeabi_dcmpgt>
 800a836:	2800      	cmp	r0, #0
 800a838:	f040 8296 	bne.w	800ad68 <_dtoa_r+0x990>
 800a83c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a840:	4640      	mov	r0, r8
 800a842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a846:	4649      	mov	r1, r9
 800a848:	f7f6 f948 	bl	8000adc <__aeabi_dcmplt>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f040 8289 	bne.w	800ad64 <_dtoa_r+0x98c>
 800a852:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f2c0 814e 	blt.w	800aafa <_dtoa_r+0x722>
 800a85e:	f1bb 0f0e 	cmp.w	fp, #14
 800a862:	f300 814a 	bgt.w	800aafa <_dtoa_r+0x722>
 800a866:	4b6b      	ldr	r3, [pc, #428]	; (800aa14 <_dtoa_r+0x63c>)
 800a868:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a872:	2b00      	cmp	r3, #0
 800a874:	f280 80dc 	bge.w	800aa30 <_dtoa_r+0x658>
 800a878:	9b04      	ldr	r3, [sp, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f300 80d8 	bgt.w	800aa30 <_dtoa_r+0x658>
 800a880:	f040 826f 	bne.w	800ad62 <_dtoa_r+0x98a>
 800a884:	4b68      	ldr	r3, [pc, #416]	; (800aa28 <_dtoa_r+0x650>)
 800a886:	2200      	movs	r2, #0
 800a888:	4640      	mov	r0, r8
 800a88a:	4649      	mov	r1, r9
 800a88c:	f7f5 feb4 	bl	80005f8 <__aeabi_dmul>
 800a890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a894:	f7f6 f936 	bl	8000b04 <__aeabi_dcmpge>
 800a898:	9e04      	ldr	r6, [sp, #16]
 800a89a:	4637      	mov	r7, r6
 800a89c:	2800      	cmp	r0, #0
 800a89e:	f040 8245 	bne.w	800ad2c <_dtoa_r+0x954>
 800a8a2:	9d00      	ldr	r5, [sp, #0]
 800a8a4:	2331      	movs	r3, #49	; 0x31
 800a8a6:	f805 3b01 	strb.w	r3, [r5], #1
 800a8aa:	f10b 0b01 	add.w	fp, fp, #1
 800a8ae:	e241      	b.n	800ad34 <_dtoa_r+0x95c>
 800a8b0:	07f2      	lsls	r2, r6, #31
 800a8b2:	d505      	bpl.n	800a8c0 <_dtoa_r+0x4e8>
 800a8b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8b8:	f7f5 fe9e 	bl	80005f8 <__aeabi_dmul>
 800a8bc:	3501      	adds	r5, #1
 800a8be:	2301      	movs	r3, #1
 800a8c0:	1076      	asrs	r6, r6, #1
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	e773      	b.n	800a7ae <_dtoa_r+0x3d6>
 800a8c6:	2502      	movs	r5, #2
 800a8c8:	e775      	b.n	800a7b6 <_dtoa_r+0x3de>
 800a8ca:	9e04      	ldr	r6, [sp, #16]
 800a8cc:	465f      	mov	r7, fp
 800a8ce:	e792      	b.n	800a7f6 <_dtoa_r+0x41e>
 800a8d0:	9900      	ldr	r1, [sp, #0]
 800a8d2:	4b50      	ldr	r3, [pc, #320]	; (800aa14 <_dtoa_r+0x63c>)
 800a8d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8d8:	4431      	add	r1, r6
 800a8da:	9102      	str	r1, [sp, #8]
 800a8dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8de:	eeb0 9a47 	vmov.f32	s18, s14
 800a8e2:	eef0 9a67 	vmov.f32	s19, s15
 800a8e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a8ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8ee:	2900      	cmp	r1, #0
 800a8f0:	d044      	beq.n	800a97c <_dtoa_r+0x5a4>
 800a8f2:	494e      	ldr	r1, [pc, #312]	; (800aa2c <_dtoa_r+0x654>)
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	f7f5 ffa9 	bl	800084c <__aeabi_ddiv>
 800a8fa:	ec53 2b19 	vmov	r2, r3, d9
 800a8fe:	f7f5 fcc3 	bl	8000288 <__aeabi_dsub>
 800a902:	9d00      	ldr	r5, [sp, #0]
 800a904:	ec41 0b19 	vmov	d9, r0, r1
 800a908:	4649      	mov	r1, r9
 800a90a:	4640      	mov	r0, r8
 800a90c:	f7f6 f924 	bl	8000b58 <__aeabi_d2iz>
 800a910:	4606      	mov	r6, r0
 800a912:	f7f5 fe07 	bl	8000524 <__aeabi_i2d>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4640      	mov	r0, r8
 800a91c:	4649      	mov	r1, r9
 800a91e:	f7f5 fcb3 	bl	8000288 <__aeabi_dsub>
 800a922:	3630      	adds	r6, #48	; 0x30
 800a924:	f805 6b01 	strb.w	r6, [r5], #1
 800a928:	ec53 2b19 	vmov	r2, r3, d9
 800a92c:	4680      	mov	r8, r0
 800a92e:	4689      	mov	r9, r1
 800a930:	f7f6 f8d4 	bl	8000adc <__aeabi_dcmplt>
 800a934:	2800      	cmp	r0, #0
 800a936:	d164      	bne.n	800aa02 <_dtoa_r+0x62a>
 800a938:	4642      	mov	r2, r8
 800a93a:	464b      	mov	r3, r9
 800a93c:	4937      	ldr	r1, [pc, #220]	; (800aa1c <_dtoa_r+0x644>)
 800a93e:	2000      	movs	r0, #0
 800a940:	f7f5 fca2 	bl	8000288 <__aeabi_dsub>
 800a944:	ec53 2b19 	vmov	r2, r3, d9
 800a948:	f7f6 f8c8 	bl	8000adc <__aeabi_dcmplt>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	f040 80b6 	bne.w	800aabe <_dtoa_r+0x6e6>
 800a952:	9b02      	ldr	r3, [sp, #8]
 800a954:	429d      	cmp	r5, r3
 800a956:	f43f af7c 	beq.w	800a852 <_dtoa_r+0x47a>
 800a95a:	4b31      	ldr	r3, [pc, #196]	; (800aa20 <_dtoa_r+0x648>)
 800a95c:	ec51 0b19 	vmov	r0, r1, d9
 800a960:	2200      	movs	r2, #0
 800a962:	f7f5 fe49 	bl	80005f8 <__aeabi_dmul>
 800a966:	4b2e      	ldr	r3, [pc, #184]	; (800aa20 <_dtoa_r+0x648>)
 800a968:	ec41 0b19 	vmov	d9, r0, r1
 800a96c:	2200      	movs	r2, #0
 800a96e:	4640      	mov	r0, r8
 800a970:	4649      	mov	r1, r9
 800a972:	f7f5 fe41 	bl	80005f8 <__aeabi_dmul>
 800a976:	4680      	mov	r8, r0
 800a978:	4689      	mov	r9, r1
 800a97a:	e7c5      	b.n	800a908 <_dtoa_r+0x530>
 800a97c:	ec51 0b17 	vmov	r0, r1, d7
 800a980:	f7f5 fe3a 	bl	80005f8 <__aeabi_dmul>
 800a984:	9b02      	ldr	r3, [sp, #8]
 800a986:	9d00      	ldr	r5, [sp, #0]
 800a988:	930f      	str	r3, [sp, #60]	; 0x3c
 800a98a:	ec41 0b19 	vmov	d9, r0, r1
 800a98e:	4649      	mov	r1, r9
 800a990:	4640      	mov	r0, r8
 800a992:	f7f6 f8e1 	bl	8000b58 <__aeabi_d2iz>
 800a996:	4606      	mov	r6, r0
 800a998:	f7f5 fdc4 	bl	8000524 <__aeabi_i2d>
 800a99c:	3630      	adds	r6, #48	; 0x30
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	f7f5 fc6f 	bl	8000288 <__aeabi_dsub>
 800a9aa:	f805 6b01 	strb.w	r6, [r5], #1
 800a9ae:	9b02      	ldr	r3, [sp, #8]
 800a9b0:	429d      	cmp	r5, r3
 800a9b2:	4680      	mov	r8, r0
 800a9b4:	4689      	mov	r9, r1
 800a9b6:	f04f 0200 	mov.w	r2, #0
 800a9ba:	d124      	bne.n	800aa06 <_dtoa_r+0x62e>
 800a9bc:	4b1b      	ldr	r3, [pc, #108]	; (800aa2c <_dtoa_r+0x654>)
 800a9be:	ec51 0b19 	vmov	r0, r1, d9
 800a9c2:	f7f5 fc63 	bl	800028c <__adddf3>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4640      	mov	r0, r8
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	f7f6 f8a3 	bl	8000b18 <__aeabi_dcmpgt>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d173      	bne.n	800aabe <_dtoa_r+0x6e6>
 800a9d6:	ec53 2b19 	vmov	r2, r3, d9
 800a9da:	4914      	ldr	r1, [pc, #80]	; (800aa2c <_dtoa_r+0x654>)
 800a9dc:	2000      	movs	r0, #0
 800a9de:	f7f5 fc53 	bl	8000288 <__aeabi_dsub>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	4649      	mov	r1, r9
 800a9ea:	f7f6 f877 	bl	8000adc <__aeabi_dcmplt>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	f43f af2f 	beq.w	800a852 <_dtoa_r+0x47a>
 800a9f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a9f6:	1e6b      	subs	r3, r5, #1
 800a9f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9fe:	2b30      	cmp	r3, #48	; 0x30
 800aa00:	d0f8      	beq.n	800a9f4 <_dtoa_r+0x61c>
 800aa02:	46bb      	mov	fp, r7
 800aa04:	e04a      	b.n	800aa9c <_dtoa_r+0x6c4>
 800aa06:	4b06      	ldr	r3, [pc, #24]	; (800aa20 <_dtoa_r+0x648>)
 800aa08:	f7f5 fdf6 	bl	80005f8 <__aeabi_dmul>
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	4689      	mov	r9, r1
 800aa10:	e7bd      	b.n	800a98e <_dtoa_r+0x5b6>
 800aa12:	bf00      	nop
 800aa14:	0800f4d0 	.word	0x0800f4d0
 800aa18:	0800f4a8 	.word	0x0800f4a8
 800aa1c:	3ff00000 	.word	0x3ff00000
 800aa20:	40240000 	.word	0x40240000
 800aa24:	401c0000 	.word	0x401c0000
 800aa28:	40140000 	.word	0x40140000
 800aa2c:	3fe00000 	.word	0x3fe00000
 800aa30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa34:	9d00      	ldr	r5, [sp, #0]
 800aa36:	4642      	mov	r2, r8
 800aa38:	464b      	mov	r3, r9
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	f7f5 ff05 	bl	800084c <__aeabi_ddiv>
 800aa42:	f7f6 f889 	bl	8000b58 <__aeabi_d2iz>
 800aa46:	9001      	str	r0, [sp, #4]
 800aa48:	f7f5 fd6c 	bl	8000524 <__aeabi_i2d>
 800aa4c:	4642      	mov	r2, r8
 800aa4e:	464b      	mov	r3, r9
 800aa50:	f7f5 fdd2 	bl	80005f8 <__aeabi_dmul>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4630      	mov	r0, r6
 800aa5a:	4639      	mov	r1, r7
 800aa5c:	f7f5 fc14 	bl	8000288 <__aeabi_dsub>
 800aa60:	9e01      	ldr	r6, [sp, #4]
 800aa62:	9f04      	ldr	r7, [sp, #16]
 800aa64:	3630      	adds	r6, #48	; 0x30
 800aa66:	f805 6b01 	strb.w	r6, [r5], #1
 800aa6a:	9e00      	ldr	r6, [sp, #0]
 800aa6c:	1bae      	subs	r6, r5, r6
 800aa6e:	42b7      	cmp	r7, r6
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	d134      	bne.n	800aae0 <_dtoa_r+0x708>
 800aa76:	f7f5 fc09 	bl	800028c <__adddf3>
 800aa7a:	4642      	mov	r2, r8
 800aa7c:	464b      	mov	r3, r9
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460f      	mov	r7, r1
 800aa82:	f7f6 f849 	bl	8000b18 <__aeabi_dcmpgt>
 800aa86:	b9c8      	cbnz	r0, 800aabc <_dtoa_r+0x6e4>
 800aa88:	4642      	mov	r2, r8
 800aa8a:	464b      	mov	r3, r9
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	f7f6 f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa94:	b110      	cbz	r0, 800aa9c <_dtoa_r+0x6c4>
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	07db      	lsls	r3, r3, #31
 800aa9a:	d40f      	bmi.n	800aabc <_dtoa_r+0x6e4>
 800aa9c:	4651      	mov	r1, sl
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f000 fe82 	bl	800b7a8 <_Bfree>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aaa8:	702b      	strb	r3, [r5, #0]
 800aaaa:	f10b 0301 	add.w	r3, fp, #1
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f43f ace2 	beq.w	800a47c <_dtoa_r+0xa4>
 800aab8:	601d      	str	r5, [r3, #0]
 800aaba:	e4df      	b.n	800a47c <_dtoa_r+0xa4>
 800aabc:	465f      	mov	r7, fp
 800aabe:	462b      	mov	r3, r5
 800aac0:	461d      	mov	r5, r3
 800aac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aac6:	2a39      	cmp	r2, #57	; 0x39
 800aac8:	d106      	bne.n	800aad8 <_dtoa_r+0x700>
 800aaca:	9a00      	ldr	r2, [sp, #0]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d1f7      	bne.n	800aac0 <_dtoa_r+0x6e8>
 800aad0:	9900      	ldr	r1, [sp, #0]
 800aad2:	2230      	movs	r2, #48	; 0x30
 800aad4:	3701      	adds	r7, #1
 800aad6:	700a      	strb	r2, [r1, #0]
 800aad8:	781a      	ldrb	r2, [r3, #0]
 800aada:	3201      	adds	r2, #1
 800aadc:	701a      	strb	r2, [r3, #0]
 800aade:	e790      	b.n	800aa02 <_dtoa_r+0x62a>
 800aae0:	4ba3      	ldr	r3, [pc, #652]	; (800ad70 <_dtoa_r+0x998>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	f7f5 fd88 	bl	80005f8 <__aeabi_dmul>
 800aae8:	2200      	movs	r2, #0
 800aaea:	2300      	movs	r3, #0
 800aaec:	4606      	mov	r6, r0
 800aaee:	460f      	mov	r7, r1
 800aaf0:	f7f5 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d09e      	beq.n	800aa36 <_dtoa_r+0x65e>
 800aaf8:	e7d0      	b.n	800aa9c <_dtoa_r+0x6c4>
 800aafa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aafc:	2a00      	cmp	r2, #0
 800aafe:	f000 80ca 	beq.w	800ac96 <_dtoa_r+0x8be>
 800ab02:	9a07      	ldr	r2, [sp, #28]
 800ab04:	2a01      	cmp	r2, #1
 800ab06:	f300 80ad 	bgt.w	800ac64 <_dtoa_r+0x88c>
 800ab0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab0c:	2a00      	cmp	r2, #0
 800ab0e:	f000 80a5 	beq.w	800ac5c <_dtoa_r+0x884>
 800ab12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab16:	9e08      	ldr	r6, [sp, #32]
 800ab18:	9d05      	ldr	r5, [sp, #20]
 800ab1a:	9a05      	ldr	r2, [sp, #20]
 800ab1c:	441a      	add	r2, r3
 800ab1e:	9205      	str	r2, [sp, #20]
 800ab20:	9a06      	ldr	r2, [sp, #24]
 800ab22:	2101      	movs	r1, #1
 800ab24:	441a      	add	r2, r3
 800ab26:	4620      	mov	r0, r4
 800ab28:	9206      	str	r2, [sp, #24]
 800ab2a:	f000 ff3d 	bl	800b9a8 <__i2b>
 800ab2e:	4607      	mov	r7, r0
 800ab30:	b165      	cbz	r5, 800ab4c <_dtoa_r+0x774>
 800ab32:	9b06      	ldr	r3, [sp, #24]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	dd09      	ble.n	800ab4c <_dtoa_r+0x774>
 800ab38:	42ab      	cmp	r3, r5
 800ab3a:	9a05      	ldr	r2, [sp, #20]
 800ab3c:	bfa8      	it	ge
 800ab3e:	462b      	movge	r3, r5
 800ab40:	1ad2      	subs	r2, r2, r3
 800ab42:	9205      	str	r2, [sp, #20]
 800ab44:	9a06      	ldr	r2, [sp, #24]
 800ab46:	1aed      	subs	r5, r5, r3
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	9306      	str	r3, [sp, #24]
 800ab4c:	9b08      	ldr	r3, [sp, #32]
 800ab4e:	b1f3      	cbz	r3, 800ab8e <_dtoa_r+0x7b6>
 800ab50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f000 80a3 	beq.w	800ac9e <_dtoa_r+0x8c6>
 800ab58:	2e00      	cmp	r6, #0
 800ab5a:	dd10      	ble.n	800ab7e <_dtoa_r+0x7a6>
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	4632      	mov	r2, r6
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 ffe1 	bl	800bb28 <__pow5mult>
 800ab66:	4652      	mov	r2, sl
 800ab68:	4601      	mov	r1, r0
 800ab6a:	4607      	mov	r7, r0
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f000 ff31 	bl	800b9d4 <__multiply>
 800ab72:	4651      	mov	r1, sl
 800ab74:	4680      	mov	r8, r0
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 fe16 	bl	800b7a8 <_Bfree>
 800ab7c:	46c2      	mov	sl, r8
 800ab7e:	9b08      	ldr	r3, [sp, #32]
 800ab80:	1b9a      	subs	r2, r3, r6
 800ab82:	d004      	beq.n	800ab8e <_dtoa_r+0x7b6>
 800ab84:	4651      	mov	r1, sl
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 ffce 	bl	800bb28 <__pow5mult>
 800ab8c:	4682      	mov	sl, r0
 800ab8e:	2101      	movs	r1, #1
 800ab90:	4620      	mov	r0, r4
 800ab92:	f000 ff09 	bl	800b9a8 <__i2b>
 800ab96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	f340 8081 	ble.w	800aca2 <_dtoa_r+0x8ca>
 800aba0:	461a      	mov	r2, r3
 800aba2:	4601      	mov	r1, r0
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 ffbf 	bl	800bb28 <__pow5mult>
 800abaa:	9b07      	ldr	r3, [sp, #28]
 800abac:	2b01      	cmp	r3, #1
 800abae:	4606      	mov	r6, r0
 800abb0:	dd7a      	ble.n	800aca8 <_dtoa_r+0x8d0>
 800abb2:	f04f 0800 	mov.w	r8, #0
 800abb6:	6933      	ldr	r3, [r6, #16]
 800abb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800abbc:	6918      	ldr	r0, [r3, #16]
 800abbe:	f000 fea5 	bl	800b90c <__hi0bits>
 800abc2:	f1c0 0020 	rsb	r0, r0, #32
 800abc6:	9b06      	ldr	r3, [sp, #24]
 800abc8:	4418      	add	r0, r3
 800abca:	f010 001f 	ands.w	r0, r0, #31
 800abce:	f000 8094 	beq.w	800acfa <_dtoa_r+0x922>
 800abd2:	f1c0 0320 	rsb	r3, r0, #32
 800abd6:	2b04      	cmp	r3, #4
 800abd8:	f340 8085 	ble.w	800ace6 <_dtoa_r+0x90e>
 800abdc:	9b05      	ldr	r3, [sp, #20]
 800abde:	f1c0 001c 	rsb	r0, r0, #28
 800abe2:	4403      	add	r3, r0
 800abe4:	9305      	str	r3, [sp, #20]
 800abe6:	9b06      	ldr	r3, [sp, #24]
 800abe8:	4403      	add	r3, r0
 800abea:	4405      	add	r5, r0
 800abec:	9306      	str	r3, [sp, #24]
 800abee:	9b05      	ldr	r3, [sp, #20]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	dd05      	ble.n	800ac00 <_dtoa_r+0x828>
 800abf4:	4651      	mov	r1, sl
 800abf6:	461a      	mov	r2, r3
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 ffef 	bl	800bbdc <__lshift>
 800abfe:	4682      	mov	sl, r0
 800ac00:	9b06      	ldr	r3, [sp, #24]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	dd05      	ble.n	800ac12 <_dtoa_r+0x83a>
 800ac06:	4631      	mov	r1, r6
 800ac08:	461a      	mov	r2, r3
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f000 ffe6 	bl	800bbdc <__lshift>
 800ac10:	4606      	mov	r6, r0
 800ac12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d072      	beq.n	800acfe <_dtoa_r+0x926>
 800ac18:	4631      	mov	r1, r6
 800ac1a:	4650      	mov	r0, sl
 800ac1c:	f001 f84a 	bl	800bcb4 <__mcmp>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	da6c      	bge.n	800acfe <_dtoa_r+0x926>
 800ac24:	2300      	movs	r3, #0
 800ac26:	4651      	mov	r1, sl
 800ac28:	220a      	movs	r2, #10
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 fdde 	bl	800b7ec <__multadd>
 800ac30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac32:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac36:	4682      	mov	sl, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 81b0 	beq.w	800af9e <_dtoa_r+0xbc6>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	4639      	mov	r1, r7
 800ac42:	220a      	movs	r2, #10
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 fdd1 	bl	800b7ec <__multadd>
 800ac4a:	9b01      	ldr	r3, [sp, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	4607      	mov	r7, r0
 800ac50:	f300 8096 	bgt.w	800ad80 <_dtoa_r+0x9a8>
 800ac54:	9b07      	ldr	r3, [sp, #28]
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	dc59      	bgt.n	800ad0e <_dtoa_r+0x936>
 800ac5a:	e091      	b.n	800ad80 <_dtoa_r+0x9a8>
 800ac5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac62:	e758      	b.n	800ab16 <_dtoa_r+0x73e>
 800ac64:	9b04      	ldr	r3, [sp, #16]
 800ac66:	1e5e      	subs	r6, r3, #1
 800ac68:	9b08      	ldr	r3, [sp, #32]
 800ac6a:	42b3      	cmp	r3, r6
 800ac6c:	bfbf      	itttt	lt
 800ac6e:	9b08      	ldrlt	r3, [sp, #32]
 800ac70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ac72:	9608      	strlt	r6, [sp, #32]
 800ac74:	1af3      	sublt	r3, r6, r3
 800ac76:	bfb4      	ite	lt
 800ac78:	18d2      	addlt	r2, r2, r3
 800ac7a:	1b9e      	subge	r6, r3, r6
 800ac7c:	9b04      	ldr	r3, [sp, #16]
 800ac7e:	bfbc      	itt	lt
 800ac80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ac82:	2600      	movlt	r6, #0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bfb7      	itett	lt
 800ac88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ac8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ac90:	1a9d      	sublt	r5, r3, r2
 800ac92:	2300      	movlt	r3, #0
 800ac94:	e741      	b.n	800ab1a <_dtoa_r+0x742>
 800ac96:	9e08      	ldr	r6, [sp, #32]
 800ac98:	9d05      	ldr	r5, [sp, #20]
 800ac9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac9c:	e748      	b.n	800ab30 <_dtoa_r+0x758>
 800ac9e:	9a08      	ldr	r2, [sp, #32]
 800aca0:	e770      	b.n	800ab84 <_dtoa_r+0x7ac>
 800aca2:	9b07      	ldr	r3, [sp, #28]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	dc19      	bgt.n	800acdc <_dtoa_r+0x904>
 800aca8:	9b02      	ldr	r3, [sp, #8]
 800acaa:	b9bb      	cbnz	r3, 800acdc <_dtoa_r+0x904>
 800acac:	9b03      	ldr	r3, [sp, #12]
 800acae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acb2:	b99b      	cbnz	r3, 800acdc <_dtoa_r+0x904>
 800acb4:	9b03      	ldr	r3, [sp, #12]
 800acb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acba:	0d1b      	lsrs	r3, r3, #20
 800acbc:	051b      	lsls	r3, r3, #20
 800acbe:	b183      	cbz	r3, 800ace2 <_dtoa_r+0x90a>
 800acc0:	9b05      	ldr	r3, [sp, #20]
 800acc2:	3301      	adds	r3, #1
 800acc4:	9305      	str	r3, [sp, #20]
 800acc6:	9b06      	ldr	r3, [sp, #24]
 800acc8:	3301      	adds	r3, #1
 800acca:	9306      	str	r3, [sp, #24]
 800accc:	f04f 0801 	mov.w	r8, #1
 800acd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f47f af6f 	bne.w	800abb6 <_dtoa_r+0x7de>
 800acd8:	2001      	movs	r0, #1
 800acda:	e774      	b.n	800abc6 <_dtoa_r+0x7ee>
 800acdc:	f04f 0800 	mov.w	r8, #0
 800ace0:	e7f6      	b.n	800acd0 <_dtoa_r+0x8f8>
 800ace2:	4698      	mov	r8, r3
 800ace4:	e7f4      	b.n	800acd0 <_dtoa_r+0x8f8>
 800ace6:	d082      	beq.n	800abee <_dtoa_r+0x816>
 800ace8:	9a05      	ldr	r2, [sp, #20]
 800acea:	331c      	adds	r3, #28
 800acec:	441a      	add	r2, r3
 800acee:	9205      	str	r2, [sp, #20]
 800acf0:	9a06      	ldr	r2, [sp, #24]
 800acf2:	441a      	add	r2, r3
 800acf4:	441d      	add	r5, r3
 800acf6:	9206      	str	r2, [sp, #24]
 800acf8:	e779      	b.n	800abee <_dtoa_r+0x816>
 800acfa:	4603      	mov	r3, r0
 800acfc:	e7f4      	b.n	800ace8 <_dtoa_r+0x910>
 800acfe:	9b04      	ldr	r3, [sp, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	dc37      	bgt.n	800ad74 <_dtoa_r+0x99c>
 800ad04:	9b07      	ldr	r3, [sp, #28]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	dd34      	ble.n	800ad74 <_dtoa_r+0x99c>
 800ad0a:	9b04      	ldr	r3, [sp, #16]
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	9b01      	ldr	r3, [sp, #4]
 800ad10:	b963      	cbnz	r3, 800ad2c <_dtoa_r+0x954>
 800ad12:	4631      	mov	r1, r6
 800ad14:	2205      	movs	r2, #5
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 fd68 	bl	800b7ec <__multadd>
 800ad1c:	4601      	mov	r1, r0
 800ad1e:	4606      	mov	r6, r0
 800ad20:	4650      	mov	r0, sl
 800ad22:	f000 ffc7 	bl	800bcb4 <__mcmp>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f73f adbb 	bgt.w	800a8a2 <_dtoa_r+0x4ca>
 800ad2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad2e:	9d00      	ldr	r5, [sp, #0]
 800ad30:	ea6f 0b03 	mvn.w	fp, r3
 800ad34:	f04f 0800 	mov.w	r8, #0
 800ad38:	4631      	mov	r1, r6
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 fd34 	bl	800b7a8 <_Bfree>
 800ad40:	2f00      	cmp	r7, #0
 800ad42:	f43f aeab 	beq.w	800aa9c <_dtoa_r+0x6c4>
 800ad46:	f1b8 0f00 	cmp.w	r8, #0
 800ad4a:	d005      	beq.n	800ad58 <_dtoa_r+0x980>
 800ad4c:	45b8      	cmp	r8, r7
 800ad4e:	d003      	beq.n	800ad58 <_dtoa_r+0x980>
 800ad50:	4641      	mov	r1, r8
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 fd28 	bl	800b7a8 <_Bfree>
 800ad58:	4639      	mov	r1, r7
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 fd24 	bl	800b7a8 <_Bfree>
 800ad60:	e69c      	b.n	800aa9c <_dtoa_r+0x6c4>
 800ad62:	2600      	movs	r6, #0
 800ad64:	4637      	mov	r7, r6
 800ad66:	e7e1      	b.n	800ad2c <_dtoa_r+0x954>
 800ad68:	46bb      	mov	fp, r7
 800ad6a:	4637      	mov	r7, r6
 800ad6c:	e599      	b.n	800a8a2 <_dtoa_r+0x4ca>
 800ad6e:	bf00      	nop
 800ad70:	40240000 	.word	0x40240000
 800ad74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 80c8 	beq.w	800af0c <_dtoa_r+0xb34>
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	2d00      	cmp	r5, #0
 800ad82:	dd05      	ble.n	800ad90 <_dtoa_r+0x9b8>
 800ad84:	4639      	mov	r1, r7
 800ad86:	462a      	mov	r2, r5
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 ff27 	bl	800bbdc <__lshift>
 800ad8e:	4607      	mov	r7, r0
 800ad90:	f1b8 0f00 	cmp.w	r8, #0
 800ad94:	d05b      	beq.n	800ae4e <_dtoa_r+0xa76>
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 fcc5 	bl	800b728 <_Balloc>
 800ad9e:	4605      	mov	r5, r0
 800ada0:	b928      	cbnz	r0, 800adae <_dtoa_r+0x9d6>
 800ada2:	4b83      	ldr	r3, [pc, #524]	; (800afb0 <_dtoa_r+0xbd8>)
 800ada4:	4602      	mov	r2, r0
 800ada6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800adaa:	f7ff bb2e 	b.w	800a40a <_dtoa_r+0x32>
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	3202      	adds	r2, #2
 800adb2:	0092      	lsls	r2, r2, #2
 800adb4:	f107 010c 	add.w	r1, r7, #12
 800adb8:	300c      	adds	r0, #12
 800adba:	f7ff fa4a 	bl	800a252 <memcpy>
 800adbe:	2201      	movs	r2, #1
 800adc0:	4629      	mov	r1, r5
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 ff0a 	bl	800bbdc <__lshift>
 800adc8:	9b00      	ldr	r3, [sp, #0]
 800adca:	3301      	adds	r3, #1
 800adcc:	9304      	str	r3, [sp, #16]
 800adce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800add2:	4413      	add	r3, r2
 800add4:	9308      	str	r3, [sp, #32]
 800add6:	9b02      	ldr	r3, [sp, #8]
 800add8:	f003 0301 	and.w	r3, r3, #1
 800addc:	46b8      	mov	r8, r7
 800adde:	9306      	str	r3, [sp, #24]
 800ade0:	4607      	mov	r7, r0
 800ade2:	9b04      	ldr	r3, [sp, #16]
 800ade4:	4631      	mov	r1, r6
 800ade6:	3b01      	subs	r3, #1
 800ade8:	4650      	mov	r0, sl
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	f7ff fa6c 	bl	800a2c8 <quorem>
 800adf0:	4641      	mov	r1, r8
 800adf2:	9002      	str	r0, [sp, #8]
 800adf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800adf8:	4650      	mov	r0, sl
 800adfa:	f000 ff5b 	bl	800bcb4 <__mcmp>
 800adfe:	463a      	mov	r2, r7
 800ae00:	9005      	str	r0, [sp, #20]
 800ae02:	4631      	mov	r1, r6
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 ff71 	bl	800bcec <__mdiff>
 800ae0a:	68c2      	ldr	r2, [r0, #12]
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	bb02      	cbnz	r2, 800ae52 <_dtoa_r+0xa7a>
 800ae10:	4601      	mov	r1, r0
 800ae12:	4650      	mov	r0, sl
 800ae14:	f000 ff4e 	bl	800bcb4 <__mcmp>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae20:	f000 fcc2 	bl	800b7a8 <_Bfree>
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae28:	9d04      	ldr	r5, [sp, #16]
 800ae2a:	ea43 0102 	orr.w	r1, r3, r2
 800ae2e:	9b06      	ldr	r3, [sp, #24]
 800ae30:	4319      	orrs	r1, r3
 800ae32:	d110      	bne.n	800ae56 <_dtoa_r+0xa7e>
 800ae34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae38:	d029      	beq.n	800ae8e <_dtoa_r+0xab6>
 800ae3a:	9b05      	ldr	r3, [sp, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dd02      	ble.n	800ae46 <_dtoa_r+0xa6e>
 800ae40:	9b02      	ldr	r3, [sp, #8]
 800ae42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ae46:	9b01      	ldr	r3, [sp, #4]
 800ae48:	f883 9000 	strb.w	r9, [r3]
 800ae4c:	e774      	b.n	800ad38 <_dtoa_r+0x960>
 800ae4e:	4638      	mov	r0, r7
 800ae50:	e7ba      	b.n	800adc8 <_dtoa_r+0x9f0>
 800ae52:	2201      	movs	r2, #1
 800ae54:	e7e1      	b.n	800ae1a <_dtoa_r+0xa42>
 800ae56:	9b05      	ldr	r3, [sp, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	db04      	blt.n	800ae66 <_dtoa_r+0xa8e>
 800ae5c:	9907      	ldr	r1, [sp, #28]
 800ae5e:	430b      	orrs	r3, r1
 800ae60:	9906      	ldr	r1, [sp, #24]
 800ae62:	430b      	orrs	r3, r1
 800ae64:	d120      	bne.n	800aea8 <_dtoa_r+0xad0>
 800ae66:	2a00      	cmp	r2, #0
 800ae68:	dded      	ble.n	800ae46 <_dtoa_r+0xa6e>
 800ae6a:	4651      	mov	r1, sl
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 feb4 	bl	800bbdc <__lshift>
 800ae74:	4631      	mov	r1, r6
 800ae76:	4682      	mov	sl, r0
 800ae78:	f000 ff1c 	bl	800bcb4 <__mcmp>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	dc03      	bgt.n	800ae88 <_dtoa_r+0xab0>
 800ae80:	d1e1      	bne.n	800ae46 <_dtoa_r+0xa6e>
 800ae82:	f019 0f01 	tst.w	r9, #1
 800ae86:	d0de      	beq.n	800ae46 <_dtoa_r+0xa6e>
 800ae88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae8c:	d1d8      	bne.n	800ae40 <_dtoa_r+0xa68>
 800ae8e:	9a01      	ldr	r2, [sp, #4]
 800ae90:	2339      	movs	r3, #57	; 0x39
 800ae92:	7013      	strb	r3, [r2, #0]
 800ae94:	462b      	mov	r3, r5
 800ae96:	461d      	mov	r5, r3
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae9e:	2a39      	cmp	r2, #57	; 0x39
 800aea0:	d06c      	beq.n	800af7c <_dtoa_r+0xba4>
 800aea2:	3201      	adds	r2, #1
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	e747      	b.n	800ad38 <_dtoa_r+0x960>
 800aea8:	2a00      	cmp	r2, #0
 800aeaa:	dd07      	ble.n	800aebc <_dtoa_r+0xae4>
 800aeac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aeb0:	d0ed      	beq.n	800ae8e <_dtoa_r+0xab6>
 800aeb2:	9a01      	ldr	r2, [sp, #4]
 800aeb4:	f109 0301 	add.w	r3, r9, #1
 800aeb8:	7013      	strb	r3, [r2, #0]
 800aeba:	e73d      	b.n	800ad38 <_dtoa_r+0x960>
 800aebc:	9b04      	ldr	r3, [sp, #16]
 800aebe:	9a08      	ldr	r2, [sp, #32]
 800aec0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d043      	beq.n	800af50 <_dtoa_r+0xb78>
 800aec8:	4651      	mov	r1, sl
 800aeca:	2300      	movs	r3, #0
 800aecc:	220a      	movs	r2, #10
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 fc8c 	bl	800b7ec <__multadd>
 800aed4:	45b8      	cmp	r8, r7
 800aed6:	4682      	mov	sl, r0
 800aed8:	f04f 0300 	mov.w	r3, #0
 800aedc:	f04f 020a 	mov.w	r2, #10
 800aee0:	4641      	mov	r1, r8
 800aee2:	4620      	mov	r0, r4
 800aee4:	d107      	bne.n	800aef6 <_dtoa_r+0xb1e>
 800aee6:	f000 fc81 	bl	800b7ec <__multadd>
 800aeea:	4680      	mov	r8, r0
 800aeec:	4607      	mov	r7, r0
 800aeee:	9b04      	ldr	r3, [sp, #16]
 800aef0:	3301      	adds	r3, #1
 800aef2:	9304      	str	r3, [sp, #16]
 800aef4:	e775      	b.n	800ade2 <_dtoa_r+0xa0a>
 800aef6:	f000 fc79 	bl	800b7ec <__multadd>
 800aefa:	4639      	mov	r1, r7
 800aefc:	4680      	mov	r8, r0
 800aefe:	2300      	movs	r3, #0
 800af00:	220a      	movs	r2, #10
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fc72 	bl	800b7ec <__multadd>
 800af08:	4607      	mov	r7, r0
 800af0a:	e7f0      	b.n	800aeee <_dtoa_r+0xb16>
 800af0c:	9b04      	ldr	r3, [sp, #16]
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	9d00      	ldr	r5, [sp, #0]
 800af12:	4631      	mov	r1, r6
 800af14:	4650      	mov	r0, sl
 800af16:	f7ff f9d7 	bl	800a2c8 <quorem>
 800af1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800af1e:	9b00      	ldr	r3, [sp, #0]
 800af20:	f805 9b01 	strb.w	r9, [r5], #1
 800af24:	1aea      	subs	r2, r5, r3
 800af26:	9b01      	ldr	r3, [sp, #4]
 800af28:	4293      	cmp	r3, r2
 800af2a:	dd07      	ble.n	800af3c <_dtoa_r+0xb64>
 800af2c:	4651      	mov	r1, sl
 800af2e:	2300      	movs	r3, #0
 800af30:	220a      	movs	r2, #10
 800af32:	4620      	mov	r0, r4
 800af34:	f000 fc5a 	bl	800b7ec <__multadd>
 800af38:	4682      	mov	sl, r0
 800af3a:	e7ea      	b.n	800af12 <_dtoa_r+0xb3a>
 800af3c:	9b01      	ldr	r3, [sp, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	bfc8      	it	gt
 800af42:	461d      	movgt	r5, r3
 800af44:	9b00      	ldr	r3, [sp, #0]
 800af46:	bfd8      	it	le
 800af48:	2501      	movle	r5, #1
 800af4a:	441d      	add	r5, r3
 800af4c:	f04f 0800 	mov.w	r8, #0
 800af50:	4651      	mov	r1, sl
 800af52:	2201      	movs	r2, #1
 800af54:	4620      	mov	r0, r4
 800af56:	f000 fe41 	bl	800bbdc <__lshift>
 800af5a:	4631      	mov	r1, r6
 800af5c:	4682      	mov	sl, r0
 800af5e:	f000 fea9 	bl	800bcb4 <__mcmp>
 800af62:	2800      	cmp	r0, #0
 800af64:	dc96      	bgt.n	800ae94 <_dtoa_r+0xabc>
 800af66:	d102      	bne.n	800af6e <_dtoa_r+0xb96>
 800af68:	f019 0f01 	tst.w	r9, #1
 800af6c:	d192      	bne.n	800ae94 <_dtoa_r+0xabc>
 800af6e:	462b      	mov	r3, r5
 800af70:	461d      	mov	r5, r3
 800af72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af76:	2a30      	cmp	r2, #48	; 0x30
 800af78:	d0fa      	beq.n	800af70 <_dtoa_r+0xb98>
 800af7a:	e6dd      	b.n	800ad38 <_dtoa_r+0x960>
 800af7c:	9a00      	ldr	r2, [sp, #0]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d189      	bne.n	800ae96 <_dtoa_r+0xabe>
 800af82:	f10b 0b01 	add.w	fp, fp, #1
 800af86:	2331      	movs	r3, #49	; 0x31
 800af88:	e796      	b.n	800aeb8 <_dtoa_r+0xae0>
 800af8a:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <_dtoa_r+0xbdc>)
 800af8c:	f7ff ba99 	b.w	800a4c2 <_dtoa_r+0xea>
 800af90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af92:	2b00      	cmp	r3, #0
 800af94:	f47f aa6d 	bne.w	800a472 <_dtoa_r+0x9a>
 800af98:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <_dtoa_r+0xbe0>)
 800af9a:	f7ff ba92 	b.w	800a4c2 <_dtoa_r+0xea>
 800af9e:	9b01      	ldr	r3, [sp, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	dcb5      	bgt.n	800af10 <_dtoa_r+0xb38>
 800afa4:	9b07      	ldr	r3, [sp, #28]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	f73f aeb1 	bgt.w	800ad0e <_dtoa_r+0x936>
 800afac:	e7b0      	b.n	800af10 <_dtoa_r+0xb38>
 800afae:	bf00      	nop
 800afb0:	0800f3dc 	.word	0x0800f3dc
 800afb4:	0800f299 	.word	0x0800f299
 800afb8:	0800f377 	.word	0x0800f377

0800afbc <_free_r>:
 800afbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afbe:	2900      	cmp	r1, #0
 800afc0:	d044      	beq.n	800b04c <_free_r+0x90>
 800afc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afc6:	9001      	str	r0, [sp, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f1a1 0404 	sub.w	r4, r1, #4
 800afce:	bfb8      	it	lt
 800afd0:	18e4      	addlt	r4, r4, r3
 800afd2:	f7fd f941 	bl	8008258 <__malloc_lock>
 800afd6:	4a1e      	ldr	r2, [pc, #120]	; (800b050 <_free_r+0x94>)
 800afd8:	9801      	ldr	r0, [sp, #4]
 800afda:	6813      	ldr	r3, [r2, #0]
 800afdc:	b933      	cbnz	r3, 800afec <_free_r+0x30>
 800afde:	6063      	str	r3, [r4, #4]
 800afe0:	6014      	str	r4, [r2, #0]
 800afe2:	b003      	add	sp, #12
 800afe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afe8:	f7fd b93c 	b.w	8008264 <__malloc_unlock>
 800afec:	42a3      	cmp	r3, r4
 800afee:	d908      	bls.n	800b002 <_free_r+0x46>
 800aff0:	6825      	ldr	r5, [r4, #0]
 800aff2:	1961      	adds	r1, r4, r5
 800aff4:	428b      	cmp	r3, r1
 800aff6:	bf01      	itttt	eq
 800aff8:	6819      	ldreq	r1, [r3, #0]
 800affa:	685b      	ldreq	r3, [r3, #4]
 800affc:	1949      	addeq	r1, r1, r5
 800affe:	6021      	streq	r1, [r4, #0]
 800b000:	e7ed      	b.n	800afde <_free_r+0x22>
 800b002:	461a      	mov	r2, r3
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	b10b      	cbz	r3, 800b00c <_free_r+0x50>
 800b008:	42a3      	cmp	r3, r4
 800b00a:	d9fa      	bls.n	800b002 <_free_r+0x46>
 800b00c:	6811      	ldr	r1, [r2, #0]
 800b00e:	1855      	adds	r5, r2, r1
 800b010:	42a5      	cmp	r5, r4
 800b012:	d10b      	bne.n	800b02c <_free_r+0x70>
 800b014:	6824      	ldr	r4, [r4, #0]
 800b016:	4421      	add	r1, r4
 800b018:	1854      	adds	r4, r2, r1
 800b01a:	42a3      	cmp	r3, r4
 800b01c:	6011      	str	r1, [r2, #0]
 800b01e:	d1e0      	bne.n	800afe2 <_free_r+0x26>
 800b020:	681c      	ldr	r4, [r3, #0]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	6053      	str	r3, [r2, #4]
 800b026:	440c      	add	r4, r1
 800b028:	6014      	str	r4, [r2, #0]
 800b02a:	e7da      	b.n	800afe2 <_free_r+0x26>
 800b02c:	d902      	bls.n	800b034 <_free_r+0x78>
 800b02e:	230c      	movs	r3, #12
 800b030:	6003      	str	r3, [r0, #0]
 800b032:	e7d6      	b.n	800afe2 <_free_r+0x26>
 800b034:	6825      	ldr	r5, [r4, #0]
 800b036:	1961      	adds	r1, r4, r5
 800b038:	428b      	cmp	r3, r1
 800b03a:	bf04      	itt	eq
 800b03c:	6819      	ldreq	r1, [r3, #0]
 800b03e:	685b      	ldreq	r3, [r3, #4]
 800b040:	6063      	str	r3, [r4, #4]
 800b042:	bf04      	itt	eq
 800b044:	1949      	addeq	r1, r1, r5
 800b046:	6021      	streq	r1, [r4, #0]
 800b048:	6054      	str	r4, [r2, #4]
 800b04a:	e7ca      	b.n	800afe2 <_free_r+0x26>
 800b04c:	b003      	add	sp, #12
 800b04e:	bd30      	pop	{r4, r5, pc}
 800b050:	20000acc 	.word	0x20000acc

0800b054 <rshift>:
 800b054:	6903      	ldr	r3, [r0, #16]
 800b056:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b05a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b05e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b062:	f100 0414 	add.w	r4, r0, #20
 800b066:	dd45      	ble.n	800b0f4 <rshift+0xa0>
 800b068:	f011 011f 	ands.w	r1, r1, #31
 800b06c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b070:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b074:	d10c      	bne.n	800b090 <rshift+0x3c>
 800b076:	f100 0710 	add.w	r7, r0, #16
 800b07a:	4629      	mov	r1, r5
 800b07c:	42b1      	cmp	r1, r6
 800b07e:	d334      	bcc.n	800b0ea <rshift+0x96>
 800b080:	1a9b      	subs	r3, r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	1eea      	subs	r2, r5, #3
 800b086:	4296      	cmp	r6, r2
 800b088:	bf38      	it	cc
 800b08a:	2300      	movcc	r3, #0
 800b08c:	4423      	add	r3, r4
 800b08e:	e015      	b.n	800b0bc <rshift+0x68>
 800b090:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b094:	f1c1 0820 	rsb	r8, r1, #32
 800b098:	40cf      	lsrs	r7, r1
 800b09a:	f105 0e04 	add.w	lr, r5, #4
 800b09e:	46a1      	mov	r9, r4
 800b0a0:	4576      	cmp	r6, lr
 800b0a2:	46f4      	mov	ip, lr
 800b0a4:	d815      	bhi.n	800b0d2 <rshift+0x7e>
 800b0a6:	1a9a      	subs	r2, r3, r2
 800b0a8:	0092      	lsls	r2, r2, #2
 800b0aa:	3a04      	subs	r2, #4
 800b0ac:	3501      	adds	r5, #1
 800b0ae:	42ae      	cmp	r6, r5
 800b0b0:	bf38      	it	cc
 800b0b2:	2200      	movcc	r2, #0
 800b0b4:	18a3      	adds	r3, r4, r2
 800b0b6:	50a7      	str	r7, [r4, r2]
 800b0b8:	b107      	cbz	r7, 800b0bc <rshift+0x68>
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	1b1a      	subs	r2, r3, r4
 800b0be:	42a3      	cmp	r3, r4
 800b0c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b0c4:	bf08      	it	eq
 800b0c6:	2300      	moveq	r3, #0
 800b0c8:	6102      	str	r2, [r0, #16]
 800b0ca:	bf08      	it	eq
 800b0cc:	6143      	streq	r3, [r0, #20]
 800b0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0d2:	f8dc c000 	ldr.w	ip, [ip]
 800b0d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b0da:	ea4c 0707 	orr.w	r7, ip, r7
 800b0de:	f849 7b04 	str.w	r7, [r9], #4
 800b0e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0e6:	40cf      	lsrs	r7, r1
 800b0e8:	e7da      	b.n	800b0a0 <rshift+0x4c>
 800b0ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0f2:	e7c3      	b.n	800b07c <rshift+0x28>
 800b0f4:	4623      	mov	r3, r4
 800b0f6:	e7e1      	b.n	800b0bc <rshift+0x68>

0800b0f8 <__hexdig_fun>:
 800b0f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0fc:	2b09      	cmp	r3, #9
 800b0fe:	d802      	bhi.n	800b106 <__hexdig_fun+0xe>
 800b100:	3820      	subs	r0, #32
 800b102:	b2c0      	uxtb	r0, r0
 800b104:	4770      	bx	lr
 800b106:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	d801      	bhi.n	800b112 <__hexdig_fun+0x1a>
 800b10e:	3847      	subs	r0, #71	; 0x47
 800b110:	e7f7      	b.n	800b102 <__hexdig_fun+0xa>
 800b112:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b116:	2b05      	cmp	r3, #5
 800b118:	d801      	bhi.n	800b11e <__hexdig_fun+0x26>
 800b11a:	3827      	subs	r0, #39	; 0x27
 800b11c:	e7f1      	b.n	800b102 <__hexdig_fun+0xa>
 800b11e:	2000      	movs	r0, #0
 800b120:	4770      	bx	lr
	...

0800b124 <__gethex>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	4617      	mov	r7, r2
 800b12a:	680a      	ldr	r2, [r1, #0]
 800b12c:	b085      	sub	sp, #20
 800b12e:	f102 0b02 	add.w	fp, r2, #2
 800b132:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b136:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b13a:	4681      	mov	r9, r0
 800b13c:	468a      	mov	sl, r1
 800b13e:	9302      	str	r3, [sp, #8]
 800b140:	32fe      	adds	r2, #254	; 0xfe
 800b142:	eb02 030b 	add.w	r3, r2, fp
 800b146:	46d8      	mov	r8, fp
 800b148:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	2830      	cmp	r0, #48	; 0x30
 800b150:	d0f7      	beq.n	800b142 <__gethex+0x1e>
 800b152:	f7ff ffd1 	bl	800b0f8 <__hexdig_fun>
 800b156:	4604      	mov	r4, r0
 800b158:	2800      	cmp	r0, #0
 800b15a:	d138      	bne.n	800b1ce <__gethex+0xaa>
 800b15c:	49a7      	ldr	r1, [pc, #668]	; (800b3fc <__gethex+0x2d8>)
 800b15e:	2201      	movs	r2, #1
 800b160:	4640      	mov	r0, r8
 800b162:	f7fe ff62 	bl	800a02a <strncmp>
 800b166:	4606      	mov	r6, r0
 800b168:	2800      	cmp	r0, #0
 800b16a:	d169      	bne.n	800b240 <__gethex+0x11c>
 800b16c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b170:	465d      	mov	r5, fp
 800b172:	f7ff ffc1 	bl	800b0f8 <__hexdig_fun>
 800b176:	2800      	cmp	r0, #0
 800b178:	d064      	beq.n	800b244 <__gethex+0x120>
 800b17a:	465a      	mov	r2, fp
 800b17c:	7810      	ldrb	r0, [r2, #0]
 800b17e:	2830      	cmp	r0, #48	; 0x30
 800b180:	4690      	mov	r8, r2
 800b182:	f102 0201 	add.w	r2, r2, #1
 800b186:	d0f9      	beq.n	800b17c <__gethex+0x58>
 800b188:	f7ff ffb6 	bl	800b0f8 <__hexdig_fun>
 800b18c:	2301      	movs	r3, #1
 800b18e:	fab0 f480 	clz	r4, r0
 800b192:	0964      	lsrs	r4, r4, #5
 800b194:	465e      	mov	r6, fp
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	4642      	mov	r2, r8
 800b19a:	4615      	mov	r5, r2
 800b19c:	3201      	adds	r2, #1
 800b19e:	7828      	ldrb	r0, [r5, #0]
 800b1a0:	f7ff ffaa 	bl	800b0f8 <__hexdig_fun>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d1f8      	bne.n	800b19a <__gethex+0x76>
 800b1a8:	4994      	ldr	r1, [pc, #592]	; (800b3fc <__gethex+0x2d8>)
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	f7fe ff3c 	bl	800a02a <strncmp>
 800b1b2:	b978      	cbnz	r0, 800b1d4 <__gethex+0xb0>
 800b1b4:	b946      	cbnz	r6, 800b1c8 <__gethex+0xa4>
 800b1b6:	1c6e      	adds	r6, r5, #1
 800b1b8:	4632      	mov	r2, r6
 800b1ba:	4615      	mov	r5, r2
 800b1bc:	3201      	adds	r2, #1
 800b1be:	7828      	ldrb	r0, [r5, #0]
 800b1c0:	f7ff ff9a 	bl	800b0f8 <__hexdig_fun>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d1f8      	bne.n	800b1ba <__gethex+0x96>
 800b1c8:	1b73      	subs	r3, r6, r5
 800b1ca:	009e      	lsls	r6, r3, #2
 800b1cc:	e004      	b.n	800b1d8 <__gethex+0xb4>
 800b1ce:	2400      	movs	r4, #0
 800b1d0:	4626      	mov	r6, r4
 800b1d2:	e7e1      	b.n	800b198 <__gethex+0x74>
 800b1d4:	2e00      	cmp	r6, #0
 800b1d6:	d1f7      	bne.n	800b1c8 <__gethex+0xa4>
 800b1d8:	782b      	ldrb	r3, [r5, #0]
 800b1da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1de:	2b50      	cmp	r3, #80	; 0x50
 800b1e0:	d13d      	bne.n	800b25e <__gethex+0x13a>
 800b1e2:	786b      	ldrb	r3, [r5, #1]
 800b1e4:	2b2b      	cmp	r3, #43	; 0x2b
 800b1e6:	d02f      	beq.n	800b248 <__gethex+0x124>
 800b1e8:	2b2d      	cmp	r3, #45	; 0x2d
 800b1ea:	d031      	beq.n	800b250 <__gethex+0x12c>
 800b1ec:	1c69      	adds	r1, r5, #1
 800b1ee:	f04f 0b00 	mov.w	fp, #0
 800b1f2:	7808      	ldrb	r0, [r1, #0]
 800b1f4:	f7ff ff80 	bl	800b0f8 <__hexdig_fun>
 800b1f8:	1e42      	subs	r2, r0, #1
 800b1fa:	b2d2      	uxtb	r2, r2
 800b1fc:	2a18      	cmp	r2, #24
 800b1fe:	d82e      	bhi.n	800b25e <__gethex+0x13a>
 800b200:	f1a0 0210 	sub.w	r2, r0, #16
 800b204:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b208:	f7ff ff76 	bl	800b0f8 <__hexdig_fun>
 800b20c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b210:	fa5f fc8c 	uxtb.w	ip, ip
 800b214:	f1bc 0f18 	cmp.w	ip, #24
 800b218:	d91d      	bls.n	800b256 <__gethex+0x132>
 800b21a:	f1bb 0f00 	cmp.w	fp, #0
 800b21e:	d000      	beq.n	800b222 <__gethex+0xfe>
 800b220:	4252      	negs	r2, r2
 800b222:	4416      	add	r6, r2
 800b224:	f8ca 1000 	str.w	r1, [sl]
 800b228:	b1dc      	cbz	r4, 800b262 <__gethex+0x13e>
 800b22a:	9b01      	ldr	r3, [sp, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	bf14      	ite	ne
 800b230:	f04f 0800 	movne.w	r8, #0
 800b234:	f04f 0806 	moveq.w	r8, #6
 800b238:	4640      	mov	r0, r8
 800b23a:	b005      	add	sp, #20
 800b23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b240:	4645      	mov	r5, r8
 800b242:	4626      	mov	r6, r4
 800b244:	2401      	movs	r4, #1
 800b246:	e7c7      	b.n	800b1d8 <__gethex+0xb4>
 800b248:	f04f 0b00 	mov.w	fp, #0
 800b24c:	1ca9      	adds	r1, r5, #2
 800b24e:	e7d0      	b.n	800b1f2 <__gethex+0xce>
 800b250:	f04f 0b01 	mov.w	fp, #1
 800b254:	e7fa      	b.n	800b24c <__gethex+0x128>
 800b256:	230a      	movs	r3, #10
 800b258:	fb03 0002 	mla	r0, r3, r2, r0
 800b25c:	e7d0      	b.n	800b200 <__gethex+0xdc>
 800b25e:	4629      	mov	r1, r5
 800b260:	e7e0      	b.n	800b224 <__gethex+0x100>
 800b262:	eba5 0308 	sub.w	r3, r5, r8
 800b266:	3b01      	subs	r3, #1
 800b268:	4621      	mov	r1, r4
 800b26a:	2b07      	cmp	r3, #7
 800b26c:	dc0a      	bgt.n	800b284 <__gethex+0x160>
 800b26e:	4648      	mov	r0, r9
 800b270:	f000 fa5a 	bl	800b728 <_Balloc>
 800b274:	4604      	mov	r4, r0
 800b276:	b940      	cbnz	r0, 800b28a <__gethex+0x166>
 800b278:	4b61      	ldr	r3, [pc, #388]	; (800b400 <__gethex+0x2dc>)
 800b27a:	4602      	mov	r2, r0
 800b27c:	21e4      	movs	r1, #228	; 0xe4
 800b27e:	4861      	ldr	r0, [pc, #388]	; (800b404 <__gethex+0x2e0>)
 800b280:	f7ff f804 	bl	800a28c <__assert_func>
 800b284:	3101      	adds	r1, #1
 800b286:	105b      	asrs	r3, r3, #1
 800b288:	e7ef      	b.n	800b26a <__gethex+0x146>
 800b28a:	f100 0a14 	add.w	sl, r0, #20
 800b28e:	2300      	movs	r3, #0
 800b290:	495a      	ldr	r1, [pc, #360]	; (800b3fc <__gethex+0x2d8>)
 800b292:	f8cd a004 	str.w	sl, [sp, #4]
 800b296:	469b      	mov	fp, r3
 800b298:	45a8      	cmp	r8, r5
 800b29a:	d342      	bcc.n	800b322 <__gethex+0x1fe>
 800b29c:	9801      	ldr	r0, [sp, #4]
 800b29e:	f840 bb04 	str.w	fp, [r0], #4
 800b2a2:	eba0 000a 	sub.w	r0, r0, sl
 800b2a6:	1080      	asrs	r0, r0, #2
 800b2a8:	6120      	str	r0, [r4, #16]
 800b2aa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b2ae:	4658      	mov	r0, fp
 800b2b0:	f000 fb2c 	bl	800b90c <__hi0bits>
 800b2b4:	683d      	ldr	r5, [r7, #0]
 800b2b6:	eba8 0000 	sub.w	r0, r8, r0
 800b2ba:	42a8      	cmp	r0, r5
 800b2bc:	dd59      	ble.n	800b372 <__gethex+0x24e>
 800b2be:	eba0 0805 	sub.w	r8, r0, r5
 800b2c2:	4641      	mov	r1, r8
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f000 febb 	bl	800c040 <__any_on>
 800b2ca:	4683      	mov	fp, r0
 800b2cc:	b1b8      	cbz	r0, 800b2fe <__gethex+0x1da>
 800b2ce:	f108 33ff 	add.w	r3, r8, #4294967295
 800b2d2:	1159      	asrs	r1, r3, #5
 800b2d4:	f003 021f 	and.w	r2, r3, #31
 800b2d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b2dc:	f04f 0b01 	mov.w	fp, #1
 800b2e0:	fa0b f202 	lsl.w	r2, fp, r2
 800b2e4:	420a      	tst	r2, r1
 800b2e6:	d00a      	beq.n	800b2fe <__gethex+0x1da>
 800b2e8:	455b      	cmp	r3, fp
 800b2ea:	dd06      	ble.n	800b2fa <__gethex+0x1d6>
 800b2ec:	f1a8 0102 	sub.w	r1, r8, #2
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 fea5 	bl	800c040 <__any_on>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d138      	bne.n	800b36c <__gethex+0x248>
 800b2fa:	f04f 0b02 	mov.w	fp, #2
 800b2fe:	4641      	mov	r1, r8
 800b300:	4620      	mov	r0, r4
 800b302:	f7ff fea7 	bl	800b054 <rshift>
 800b306:	4446      	add	r6, r8
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	42b3      	cmp	r3, r6
 800b30c:	da41      	bge.n	800b392 <__gethex+0x26e>
 800b30e:	4621      	mov	r1, r4
 800b310:	4648      	mov	r0, r9
 800b312:	f000 fa49 	bl	800b7a8 <_Bfree>
 800b316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b318:	2300      	movs	r3, #0
 800b31a:	6013      	str	r3, [r2, #0]
 800b31c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b320:	e78a      	b.n	800b238 <__gethex+0x114>
 800b322:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b326:	2a2e      	cmp	r2, #46	; 0x2e
 800b328:	d014      	beq.n	800b354 <__gethex+0x230>
 800b32a:	2b20      	cmp	r3, #32
 800b32c:	d106      	bne.n	800b33c <__gethex+0x218>
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	f843 bb04 	str.w	fp, [r3], #4
 800b334:	f04f 0b00 	mov.w	fp, #0
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	465b      	mov	r3, fp
 800b33c:	7828      	ldrb	r0, [r5, #0]
 800b33e:	9303      	str	r3, [sp, #12]
 800b340:	f7ff feda 	bl	800b0f8 <__hexdig_fun>
 800b344:	9b03      	ldr	r3, [sp, #12]
 800b346:	f000 000f 	and.w	r0, r0, #15
 800b34a:	4098      	lsls	r0, r3
 800b34c:	ea4b 0b00 	orr.w	fp, fp, r0
 800b350:	3304      	adds	r3, #4
 800b352:	e7a1      	b.n	800b298 <__gethex+0x174>
 800b354:	45a8      	cmp	r8, r5
 800b356:	d8e8      	bhi.n	800b32a <__gethex+0x206>
 800b358:	2201      	movs	r2, #1
 800b35a:	4628      	mov	r0, r5
 800b35c:	9303      	str	r3, [sp, #12]
 800b35e:	f7fe fe64 	bl	800a02a <strncmp>
 800b362:	4926      	ldr	r1, [pc, #152]	; (800b3fc <__gethex+0x2d8>)
 800b364:	9b03      	ldr	r3, [sp, #12]
 800b366:	2800      	cmp	r0, #0
 800b368:	d1df      	bne.n	800b32a <__gethex+0x206>
 800b36a:	e795      	b.n	800b298 <__gethex+0x174>
 800b36c:	f04f 0b03 	mov.w	fp, #3
 800b370:	e7c5      	b.n	800b2fe <__gethex+0x1da>
 800b372:	da0b      	bge.n	800b38c <__gethex+0x268>
 800b374:	eba5 0800 	sub.w	r8, r5, r0
 800b378:	4621      	mov	r1, r4
 800b37a:	4642      	mov	r2, r8
 800b37c:	4648      	mov	r0, r9
 800b37e:	f000 fc2d 	bl	800bbdc <__lshift>
 800b382:	eba6 0608 	sub.w	r6, r6, r8
 800b386:	4604      	mov	r4, r0
 800b388:	f100 0a14 	add.w	sl, r0, #20
 800b38c:	f04f 0b00 	mov.w	fp, #0
 800b390:	e7ba      	b.n	800b308 <__gethex+0x1e4>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	42b3      	cmp	r3, r6
 800b396:	dd73      	ble.n	800b480 <__gethex+0x35c>
 800b398:	1b9e      	subs	r6, r3, r6
 800b39a:	42b5      	cmp	r5, r6
 800b39c:	dc34      	bgt.n	800b408 <__gethex+0x2e4>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d023      	beq.n	800b3ec <__gethex+0x2c8>
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	d025      	beq.n	800b3f4 <__gethex+0x2d0>
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d115      	bne.n	800b3d8 <__gethex+0x2b4>
 800b3ac:	42b5      	cmp	r5, r6
 800b3ae:	d113      	bne.n	800b3d8 <__gethex+0x2b4>
 800b3b0:	2d01      	cmp	r5, #1
 800b3b2:	d10b      	bne.n	800b3cc <__gethex+0x2a8>
 800b3b4:	9a02      	ldr	r2, [sp, #8]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	6123      	str	r3, [r4, #16]
 800b3be:	f8ca 3000 	str.w	r3, [sl]
 800b3c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3c4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b3c8:	601c      	str	r4, [r3, #0]
 800b3ca:	e735      	b.n	800b238 <__gethex+0x114>
 800b3cc:	1e69      	subs	r1, r5, #1
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f000 fe36 	bl	800c040 <__any_on>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d1ed      	bne.n	800b3b4 <__gethex+0x290>
 800b3d8:	4621      	mov	r1, r4
 800b3da:	4648      	mov	r0, r9
 800b3dc:	f000 f9e4 	bl	800b7a8 <_Bfree>
 800b3e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b3ea:	e725      	b.n	800b238 <__gethex+0x114>
 800b3ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1f2      	bne.n	800b3d8 <__gethex+0x2b4>
 800b3f2:	e7df      	b.n	800b3b4 <__gethex+0x290>
 800b3f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1dc      	bne.n	800b3b4 <__gethex+0x290>
 800b3fa:	e7ed      	b.n	800b3d8 <__gethex+0x2b4>
 800b3fc:	0800f130 	.word	0x0800f130
 800b400:	0800f3dc 	.word	0x0800f3dc
 800b404:	0800f3ed 	.word	0x0800f3ed
 800b408:	f106 38ff 	add.w	r8, r6, #4294967295
 800b40c:	f1bb 0f00 	cmp.w	fp, #0
 800b410:	d133      	bne.n	800b47a <__gethex+0x356>
 800b412:	f1b8 0f00 	cmp.w	r8, #0
 800b416:	d004      	beq.n	800b422 <__gethex+0x2fe>
 800b418:	4641      	mov	r1, r8
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 fe10 	bl	800c040 <__any_on>
 800b420:	4683      	mov	fp, r0
 800b422:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b426:	2301      	movs	r3, #1
 800b428:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b42c:	f008 081f 	and.w	r8, r8, #31
 800b430:	fa03 f308 	lsl.w	r3, r3, r8
 800b434:	4213      	tst	r3, r2
 800b436:	4631      	mov	r1, r6
 800b438:	4620      	mov	r0, r4
 800b43a:	bf18      	it	ne
 800b43c:	f04b 0b02 	orrne.w	fp, fp, #2
 800b440:	1bad      	subs	r5, r5, r6
 800b442:	f7ff fe07 	bl	800b054 <rshift>
 800b446:	687e      	ldr	r6, [r7, #4]
 800b448:	f04f 0802 	mov.w	r8, #2
 800b44c:	f1bb 0f00 	cmp.w	fp, #0
 800b450:	d04a      	beq.n	800b4e8 <__gethex+0x3c4>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b02      	cmp	r3, #2
 800b456:	d016      	beq.n	800b486 <__gethex+0x362>
 800b458:	2b03      	cmp	r3, #3
 800b45a:	d018      	beq.n	800b48e <__gethex+0x36a>
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d109      	bne.n	800b474 <__gethex+0x350>
 800b460:	f01b 0f02 	tst.w	fp, #2
 800b464:	d006      	beq.n	800b474 <__gethex+0x350>
 800b466:	f8da 3000 	ldr.w	r3, [sl]
 800b46a:	ea4b 0b03 	orr.w	fp, fp, r3
 800b46e:	f01b 0f01 	tst.w	fp, #1
 800b472:	d10f      	bne.n	800b494 <__gethex+0x370>
 800b474:	f048 0810 	orr.w	r8, r8, #16
 800b478:	e036      	b.n	800b4e8 <__gethex+0x3c4>
 800b47a:	f04f 0b01 	mov.w	fp, #1
 800b47e:	e7d0      	b.n	800b422 <__gethex+0x2fe>
 800b480:	f04f 0801 	mov.w	r8, #1
 800b484:	e7e2      	b.n	800b44c <__gethex+0x328>
 800b486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b488:	f1c3 0301 	rsb	r3, r3, #1
 800b48c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b48e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b490:	2b00      	cmp	r3, #0
 800b492:	d0ef      	beq.n	800b474 <__gethex+0x350>
 800b494:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b498:	f104 0214 	add.w	r2, r4, #20
 800b49c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b4a0:	9301      	str	r3, [sp, #4]
 800b4a2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	4694      	mov	ip, r2
 800b4aa:	f852 1b04 	ldr.w	r1, [r2], #4
 800b4ae:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b4b2:	d01e      	beq.n	800b4f2 <__gethex+0x3ce>
 800b4b4:	3101      	adds	r1, #1
 800b4b6:	f8cc 1000 	str.w	r1, [ip]
 800b4ba:	f1b8 0f02 	cmp.w	r8, #2
 800b4be:	f104 0214 	add.w	r2, r4, #20
 800b4c2:	d13d      	bne.n	800b540 <__gethex+0x41c>
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	42ab      	cmp	r3, r5
 800b4ca:	d10b      	bne.n	800b4e4 <__gethex+0x3c0>
 800b4cc:	1169      	asrs	r1, r5, #5
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	f005 051f 	and.w	r5, r5, #31
 800b4d4:	fa03 f505 	lsl.w	r5, r3, r5
 800b4d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4dc:	421d      	tst	r5, r3
 800b4de:	bf18      	it	ne
 800b4e0:	f04f 0801 	movne.w	r8, #1
 800b4e4:	f048 0820 	orr.w	r8, r8, #32
 800b4e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ea:	601c      	str	r4, [r3, #0]
 800b4ec:	9b02      	ldr	r3, [sp, #8]
 800b4ee:	601e      	str	r6, [r3, #0]
 800b4f0:	e6a2      	b.n	800b238 <__gethex+0x114>
 800b4f2:	4290      	cmp	r0, r2
 800b4f4:	f842 3c04 	str.w	r3, [r2, #-4]
 800b4f8:	d8d6      	bhi.n	800b4a8 <__gethex+0x384>
 800b4fa:	68a2      	ldr	r2, [r4, #8]
 800b4fc:	4593      	cmp	fp, r2
 800b4fe:	db17      	blt.n	800b530 <__gethex+0x40c>
 800b500:	6861      	ldr	r1, [r4, #4]
 800b502:	4648      	mov	r0, r9
 800b504:	3101      	adds	r1, #1
 800b506:	f000 f90f 	bl	800b728 <_Balloc>
 800b50a:	4682      	mov	sl, r0
 800b50c:	b918      	cbnz	r0, 800b516 <__gethex+0x3f2>
 800b50e:	4b1b      	ldr	r3, [pc, #108]	; (800b57c <__gethex+0x458>)
 800b510:	4602      	mov	r2, r0
 800b512:	2184      	movs	r1, #132	; 0x84
 800b514:	e6b3      	b.n	800b27e <__gethex+0x15a>
 800b516:	6922      	ldr	r2, [r4, #16]
 800b518:	3202      	adds	r2, #2
 800b51a:	f104 010c 	add.w	r1, r4, #12
 800b51e:	0092      	lsls	r2, r2, #2
 800b520:	300c      	adds	r0, #12
 800b522:	f7fe fe96 	bl	800a252 <memcpy>
 800b526:	4621      	mov	r1, r4
 800b528:	4648      	mov	r0, r9
 800b52a:	f000 f93d 	bl	800b7a8 <_Bfree>
 800b52e:	4654      	mov	r4, sl
 800b530:	6922      	ldr	r2, [r4, #16]
 800b532:	1c51      	adds	r1, r2, #1
 800b534:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b538:	6121      	str	r1, [r4, #16]
 800b53a:	2101      	movs	r1, #1
 800b53c:	6151      	str	r1, [r2, #20]
 800b53e:	e7bc      	b.n	800b4ba <__gethex+0x396>
 800b540:	6921      	ldr	r1, [r4, #16]
 800b542:	4559      	cmp	r1, fp
 800b544:	dd0b      	ble.n	800b55e <__gethex+0x43a>
 800b546:	2101      	movs	r1, #1
 800b548:	4620      	mov	r0, r4
 800b54a:	f7ff fd83 	bl	800b054 <rshift>
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	3601      	adds	r6, #1
 800b552:	42b3      	cmp	r3, r6
 800b554:	f6ff aedb 	blt.w	800b30e <__gethex+0x1ea>
 800b558:	f04f 0801 	mov.w	r8, #1
 800b55c:	e7c2      	b.n	800b4e4 <__gethex+0x3c0>
 800b55e:	f015 051f 	ands.w	r5, r5, #31
 800b562:	d0f9      	beq.n	800b558 <__gethex+0x434>
 800b564:	9b01      	ldr	r3, [sp, #4]
 800b566:	441a      	add	r2, r3
 800b568:	f1c5 0520 	rsb	r5, r5, #32
 800b56c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b570:	f000 f9cc 	bl	800b90c <__hi0bits>
 800b574:	42a8      	cmp	r0, r5
 800b576:	dbe6      	blt.n	800b546 <__gethex+0x422>
 800b578:	e7ee      	b.n	800b558 <__gethex+0x434>
 800b57a:	bf00      	nop
 800b57c:	0800f3dc 	.word	0x0800f3dc

0800b580 <L_shift>:
 800b580:	f1c2 0208 	rsb	r2, r2, #8
 800b584:	0092      	lsls	r2, r2, #2
 800b586:	b570      	push	{r4, r5, r6, lr}
 800b588:	f1c2 0620 	rsb	r6, r2, #32
 800b58c:	6843      	ldr	r3, [r0, #4]
 800b58e:	6804      	ldr	r4, [r0, #0]
 800b590:	fa03 f506 	lsl.w	r5, r3, r6
 800b594:	432c      	orrs	r4, r5
 800b596:	40d3      	lsrs	r3, r2
 800b598:	6004      	str	r4, [r0, #0]
 800b59a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b59e:	4288      	cmp	r0, r1
 800b5a0:	d3f4      	bcc.n	800b58c <L_shift+0xc>
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}

0800b5a4 <__match>:
 800b5a4:	b530      	push	{r4, r5, lr}
 800b5a6:	6803      	ldr	r3, [r0, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ae:	b914      	cbnz	r4, 800b5b6 <__match+0x12>
 800b5b0:	6003      	str	r3, [r0, #0]
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	bd30      	pop	{r4, r5, pc}
 800b5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b5be:	2d19      	cmp	r5, #25
 800b5c0:	bf98      	it	ls
 800b5c2:	3220      	addls	r2, #32
 800b5c4:	42a2      	cmp	r2, r4
 800b5c6:	d0f0      	beq.n	800b5aa <__match+0x6>
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e7f3      	b.n	800b5b4 <__match+0x10>

0800b5cc <__hexnan>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	680b      	ldr	r3, [r1, #0]
 800b5d2:	6801      	ldr	r1, [r0, #0]
 800b5d4:	115e      	asrs	r6, r3, #5
 800b5d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5da:	f013 031f 	ands.w	r3, r3, #31
 800b5de:	b087      	sub	sp, #28
 800b5e0:	bf18      	it	ne
 800b5e2:	3604      	addne	r6, #4
 800b5e4:	2500      	movs	r5, #0
 800b5e6:	1f37      	subs	r7, r6, #4
 800b5e8:	4682      	mov	sl, r0
 800b5ea:	4690      	mov	r8, r2
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5f2:	46b9      	mov	r9, r7
 800b5f4:	463c      	mov	r4, r7
 800b5f6:	9502      	str	r5, [sp, #8]
 800b5f8:	46ab      	mov	fp, r5
 800b5fa:	784a      	ldrb	r2, [r1, #1]
 800b5fc:	1c4b      	adds	r3, r1, #1
 800b5fe:	9303      	str	r3, [sp, #12]
 800b600:	b342      	cbz	r2, 800b654 <__hexnan+0x88>
 800b602:	4610      	mov	r0, r2
 800b604:	9105      	str	r1, [sp, #20]
 800b606:	9204      	str	r2, [sp, #16]
 800b608:	f7ff fd76 	bl	800b0f8 <__hexdig_fun>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d14f      	bne.n	800b6b0 <__hexnan+0xe4>
 800b610:	9a04      	ldr	r2, [sp, #16]
 800b612:	9905      	ldr	r1, [sp, #20]
 800b614:	2a20      	cmp	r2, #32
 800b616:	d818      	bhi.n	800b64a <__hexnan+0x7e>
 800b618:	9b02      	ldr	r3, [sp, #8]
 800b61a:	459b      	cmp	fp, r3
 800b61c:	dd13      	ble.n	800b646 <__hexnan+0x7a>
 800b61e:	454c      	cmp	r4, r9
 800b620:	d206      	bcs.n	800b630 <__hexnan+0x64>
 800b622:	2d07      	cmp	r5, #7
 800b624:	dc04      	bgt.n	800b630 <__hexnan+0x64>
 800b626:	462a      	mov	r2, r5
 800b628:	4649      	mov	r1, r9
 800b62a:	4620      	mov	r0, r4
 800b62c:	f7ff ffa8 	bl	800b580 <L_shift>
 800b630:	4544      	cmp	r4, r8
 800b632:	d950      	bls.n	800b6d6 <__hexnan+0x10a>
 800b634:	2300      	movs	r3, #0
 800b636:	f1a4 0904 	sub.w	r9, r4, #4
 800b63a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b63e:	f8cd b008 	str.w	fp, [sp, #8]
 800b642:	464c      	mov	r4, r9
 800b644:	461d      	mov	r5, r3
 800b646:	9903      	ldr	r1, [sp, #12]
 800b648:	e7d7      	b.n	800b5fa <__hexnan+0x2e>
 800b64a:	2a29      	cmp	r2, #41	; 0x29
 800b64c:	d155      	bne.n	800b6fa <__hexnan+0x12e>
 800b64e:	3102      	adds	r1, #2
 800b650:	f8ca 1000 	str.w	r1, [sl]
 800b654:	f1bb 0f00 	cmp.w	fp, #0
 800b658:	d04f      	beq.n	800b6fa <__hexnan+0x12e>
 800b65a:	454c      	cmp	r4, r9
 800b65c:	d206      	bcs.n	800b66c <__hexnan+0xa0>
 800b65e:	2d07      	cmp	r5, #7
 800b660:	dc04      	bgt.n	800b66c <__hexnan+0xa0>
 800b662:	462a      	mov	r2, r5
 800b664:	4649      	mov	r1, r9
 800b666:	4620      	mov	r0, r4
 800b668:	f7ff ff8a 	bl	800b580 <L_shift>
 800b66c:	4544      	cmp	r4, r8
 800b66e:	d934      	bls.n	800b6da <__hexnan+0x10e>
 800b670:	f1a8 0204 	sub.w	r2, r8, #4
 800b674:	4623      	mov	r3, r4
 800b676:	f853 1b04 	ldr.w	r1, [r3], #4
 800b67a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b67e:	429f      	cmp	r7, r3
 800b680:	d2f9      	bcs.n	800b676 <__hexnan+0xaa>
 800b682:	1b3b      	subs	r3, r7, r4
 800b684:	f023 0303 	bic.w	r3, r3, #3
 800b688:	3304      	adds	r3, #4
 800b68a:	3e03      	subs	r6, #3
 800b68c:	3401      	adds	r4, #1
 800b68e:	42a6      	cmp	r6, r4
 800b690:	bf38      	it	cc
 800b692:	2304      	movcc	r3, #4
 800b694:	4443      	add	r3, r8
 800b696:	2200      	movs	r2, #0
 800b698:	f843 2b04 	str.w	r2, [r3], #4
 800b69c:	429f      	cmp	r7, r3
 800b69e:	d2fb      	bcs.n	800b698 <__hexnan+0xcc>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	b91b      	cbnz	r3, 800b6ac <__hexnan+0xe0>
 800b6a4:	4547      	cmp	r7, r8
 800b6a6:	d126      	bne.n	800b6f6 <__hexnan+0x12a>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	603b      	str	r3, [r7, #0]
 800b6ac:	2005      	movs	r0, #5
 800b6ae:	e025      	b.n	800b6fc <__hexnan+0x130>
 800b6b0:	3501      	adds	r5, #1
 800b6b2:	2d08      	cmp	r5, #8
 800b6b4:	f10b 0b01 	add.w	fp, fp, #1
 800b6b8:	dd06      	ble.n	800b6c8 <__hexnan+0xfc>
 800b6ba:	4544      	cmp	r4, r8
 800b6bc:	d9c3      	bls.n	800b646 <__hexnan+0x7a>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6c4:	2501      	movs	r5, #1
 800b6c6:	3c04      	subs	r4, #4
 800b6c8:	6822      	ldr	r2, [r4, #0]
 800b6ca:	f000 000f 	and.w	r0, r0, #15
 800b6ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b6d2:	6020      	str	r0, [r4, #0]
 800b6d4:	e7b7      	b.n	800b646 <__hexnan+0x7a>
 800b6d6:	2508      	movs	r5, #8
 800b6d8:	e7b5      	b.n	800b646 <__hexnan+0x7a>
 800b6da:	9b01      	ldr	r3, [sp, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d0df      	beq.n	800b6a0 <__hexnan+0xd4>
 800b6e0:	f1c3 0320 	rsb	r3, r3, #32
 800b6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e8:	40da      	lsrs	r2, r3
 800b6ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b6f4:	e7d4      	b.n	800b6a0 <__hexnan+0xd4>
 800b6f6:	3f04      	subs	r7, #4
 800b6f8:	e7d2      	b.n	800b6a0 <__hexnan+0xd4>
 800b6fa:	2004      	movs	r0, #4
 800b6fc:	b007      	add	sp, #28
 800b6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b702 <__ascii_mbtowc>:
 800b702:	b082      	sub	sp, #8
 800b704:	b901      	cbnz	r1, 800b708 <__ascii_mbtowc+0x6>
 800b706:	a901      	add	r1, sp, #4
 800b708:	b142      	cbz	r2, 800b71c <__ascii_mbtowc+0x1a>
 800b70a:	b14b      	cbz	r3, 800b720 <__ascii_mbtowc+0x1e>
 800b70c:	7813      	ldrb	r3, [r2, #0]
 800b70e:	600b      	str	r3, [r1, #0]
 800b710:	7812      	ldrb	r2, [r2, #0]
 800b712:	1e10      	subs	r0, r2, #0
 800b714:	bf18      	it	ne
 800b716:	2001      	movne	r0, #1
 800b718:	b002      	add	sp, #8
 800b71a:	4770      	bx	lr
 800b71c:	4610      	mov	r0, r2
 800b71e:	e7fb      	b.n	800b718 <__ascii_mbtowc+0x16>
 800b720:	f06f 0001 	mvn.w	r0, #1
 800b724:	e7f8      	b.n	800b718 <__ascii_mbtowc+0x16>
	...

0800b728 <_Balloc>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	69c6      	ldr	r6, [r0, #28]
 800b72c:	4604      	mov	r4, r0
 800b72e:	460d      	mov	r5, r1
 800b730:	b976      	cbnz	r6, 800b750 <_Balloc+0x28>
 800b732:	2010      	movs	r0, #16
 800b734:	f7fc fce0 	bl	80080f8 <malloc>
 800b738:	4602      	mov	r2, r0
 800b73a:	61e0      	str	r0, [r4, #28]
 800b73c:	b920      	cbnz	r0, 800b748 <_Balloc+0x20>
 800b73e:	4b18      	ldr	r3, [pc, #96]	; (800b7a0 <_Balloc+0x78>)
 800b740:	4818      	ldr	r0, [pc, #96]	; (800b7a4 <_Balloc+0x7c>)
 800b742:	216b      	movs	r1, #107	; 0x6b
 800b744:	f7fe fda2 	bl	800a28c <__assert_func>
 800b748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b74c:	6006      	str	r6, [r0, #0]
 800b74e:	60c6      	str	r6, [r0, #12]
 800b750:	69e6      	ldr	r6, [r4, #28]
 800b752:	68f3      	ldr	r3, [r6, #12]
 800b754:	b183      	cbz	r3, 800b778 <_Balloc+0x50>
 800b756:	69e3      	ldr	r3, [r4, #28]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b75e:	b9b8      	cbnz	r0, 800b790 <_Balloc+0x68>
 800b760:	2101      	movs	r1, #1
 800b762:	fa01 f605 	lsl.w	r6, r1, r5
 800b766:	1d72      	adds	r2, r6, #5
 800b768:	0092      	lsls	r2, r2, #2
 800b76a:	4620      	mov	r0, r4
 800b76c:	f000 fecf 	bl	800c50e <_calloc_r>
 800b770:	b160      	cbz	r0, 800b78c <_Balloc+0x64>
 800b772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b776:	e00e      	b.n	800b796 <_Balloc+0x6e>
 800b778:	2221      	movs	r2, #33	; 0x21
 800b77a:	2104      	movs	r1, #4
 800b77c:	4620      	mov	r0, r4
 800b77e:	f000 fec6 	bl	800c50e <_calloc_r>
 800b782:	69e3      	ldr	r3, [r4, #28]
 800b784:	60f0      	str	r0, [r6, #12]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e4      	bne.n	800b756 <_Balloc+0x2e>
 800b78c:	2000      	movs	r0, #0
 800b78e:	bd70      	pop	{r4, r5, r6, pc}
 800b790:	6802      	ldr	r2, [r0, #0]
 800b792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b796:	2300      	movs	r3, #0
 800b798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b79c:	e7f7      	b.n	800b78e <_Balloc+0x66>
 800b79e:	bf00      	nop
 800b7a0:	0800f2c2 	.word	0x0800f2c2
 800b7a4:	0800f44d 	.word	0x0800f44d

0800b7a8 <_Bfree>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	69c6      	ldr	r6, [r0, #28]
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	b976      	cbnz	r6, 800b7d0 <_Bfree+0x28>
 800b7b2:	2010      	movs	r0, #16
 800b7b4:	f7fc fca0 	bl	80080f8 <malloc>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	61e8      	str	r0, [r5, #28]
 800b7bc:	b920      	cbnz	r0, 800b7c8 <_Bfree+0x20>
 800b7be:	4b09      	ldr	r3, [pc, #36]	; (800b7e4 <_Bfree+0x3c>)
 800b7c0:	4809      	ldr	r0, [pc, #36]	; (800b7e8 <_Bfree+0x40>)
 800b7c2:	218f      	movs	r1, #143	; 0x8f
 800b7c4:	f7fe fd62 	bl	800a28c <__assert_func>
 800b7c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7cc:	6006      	str	r6, [r0, #0]
 800b7ce:	60c6      	str	r6, [r0, #12]
 800b7d0:	b13c      	cbz	r4, 800b7e2 <_Bfree+0x3a>
 800b7d2:	69eb      	ldr	r3, [r5, #28]
 800b7d4:	6862      	ldr	r2, [r4, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7dc:	6021      	str	r1, [r4, #0]
 800b7de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	0800f2c2 	.word	0x0800f2c2
 800b7e8:	0800f44d 	.word	0x0800f44d

0800b7ec <__multadd>:
 800b7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f0:	690d      	ldr	r5, [r1, #16]
 800b7f2:	4607      	mov	r7, r0
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	461e      	mov	r6, r3
 800b7f8:	f101 0c14 	add.w	ip, r1, #20
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	f8dc 3000 	ldr.w	r3, [ip]
 800b802:	b299      	uxth	r1, r3
 800b804:	fb02 6101 	mla	r1, r2, r1, r6
 800b808:	0c1e      	lsrs	r6, r3, #16
 800b80a:	0c0b      	lsrs	r3, r1, #16
 800b80c:	fb02 3306 	mla	r3, r2, r6, r3
 800b810:	b289      	uxth	r1, r1
 800b812:	3001      	adds	r0, #1
 800b814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b818:	4285      	cmp	r5, r0
 800b81a:	f84c 1b04 	str.w	r1, [ip], #4
 800b81e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b822:	dcec      	bgt.n	800b7fe <__multadd+0x12>
 800b824:	b30e      	cbz	r6, 800b86a <__multadd+0x7e>
 800b826:	68a3      	ldr	r3, [r4, #8]
 800b828:	42ab      	cmp	r3, r5
 800b82a:	dc19      	bgt.n	800b860 <__multadd+0x74>
 800b82c:	6861      	ldr	r1, [r4, #4]
 800b82e:	4638      	mov	r0, r7
 800b830:	3101      	adds	r1, #1
 800b832:	f7ff ff79 	bl	800b728 <_Balloc>
 800b836:	4680      	mov	r8, r0
 800b838:	b928      	cbnz	r0, 800b846 <__multadd+0x5a>
 800b83a:	4602      	mov	r2, r0
 800b83c:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <__multadd+0x84>)
 800b83e:	480d      	ldr	r0, [pc, #52]	; (800b874 <__multadd+0x88>)
 800b840:	21ba      	movs	r1, #186	; 0xba
 800b842:	f7fe fd23 	bl	800a28c <__assert_func>
 800b846:	6922      	ldr	r2, [r4, #16]
 800b848:	3202      	adds	r2, #2
 800b84a:	f104 010c 	add.w	r1, r4, #12
 800b84e:	0092      	lsls	r2, r2, #2
 800b850:	300c      	adds	r0, #12
 800b852:	f7fe fcfe 	bl	800a252 <memcpy>
 800b856:	4621      	mov	r1, r4
 800b858:	4638      	mov	r0, r7
 800b85a:	f7ff ffa5 	bl	800b7a8 <_Bfree>
 800b85e:	4644      	mov	r4, r8
 800b860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b864:	3501      	adds	r5, #1
 800b866:	615e      	str	r6, [r3, #20]
 800b868:	6125      	str	r5, [r4, #16]
 800b86a:	4620      	mov	r0, r4
 800b86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b870:	0800f3dc 	.word	0x0800f3dc
 800b874:	0800f44d 	.word	0x0800f44d

0800b878 <__s2b>:
 800b878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b87c:	460c      	mov	r4, r1
 800b87e:	4615      	mov	r5, r2
 800b880:	461f      	mov	r7, r3
 800b882:	2209      	movs	r2, #9
 800b884:	3308      	adds	r3, #8
 800b886:	4606      	mov	r6, r0
 800b888:	fb93 f3f2 	sdiv	r3, r3, r2
 800b88c:	2100      	movs	r1, #0
 800b88e:	2201      	movs	r2, #1
 800b890:	429a      	cmp	r2, r3
 800b892:	db09      	blt.n	800b8a8 <__s2b+0x30>
 800b894:	4630      	mov	r0, r6
 800b896:	f7ff ff47 	bl	800b728 <_Balloc>
 800b89a:	b940      	cbnz	r0, 800b8ae <__s2b+0x36>
 800b89c:	4602      	mov	r2, r0
 800b89e:	4b19      	ldr	r3, [pc, #100]	; (800b904 <__s2b+0x8c>)
 800b8a0:	4819      	ldr	r0, [pc, #100]	; (800b908 <__s2b+0x90>)
 800b8a2:	21d3      	movs	r1, #211	; 0xd3
 800b8a4:	f7fe fcf2 	bl	800a28c <__assert_func>
 800b8a8:	0052      	lsls	r2, r2, #1
 800b8aa:	3101      	adds	r1, #1
 800b8ac:	e7f0      	b.n	800b890 <__s2b+0x18>
 800b8ae:	9b08      	ldr	r3, [sp, #32]
 800b8b0:	6143      	str	r3, [r0, #20]
 800b8b2:	2d09      	cmp	r5, #9
 800b8b4:	f04f 0301 	mov.w	r3, #1
 800b8b8:	6103      	str	r3, [r0, #16]
 800b8ba:	dd16      	ble.n	800b8ea <__s2b+0x72>
 800b8bc:	f104 0909 	add.w	r9, r4, #9
 800b8c0:	46c8      	mov	r8, r9
 800b8c2:	442c      	add	r4, r5
 800b8c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8c8:	4601      	mov	r1, r0
 800b8ca:	3b30      	subs	r3, #48	; 0x30
 800b8cc:	220a      	movs	r2, #10
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f7ff ff8c 	bl	800b7ec <__multadd>
 800b8d4:	45a0      	cmp	r8, r4
 800b8d6:	d1f5      	bne.n	800b8c4 <__s2b+0x4c>
 800b8d8:	f1a5 0408 	sub.w	r4, r5, #8
 800b8dc:	444c      	add	r4, r9
 800b8de:	1b2d      	subs	r5, r5, r4
 800b8e0:	1963      	adds	r3, r4, r5
 800b8e2:	42bb      	cmp	r3, r7
 800b8e4:	db04      	blt.n	800b8f0 <__s2b+0x78>
 800b8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ea:	340a      	adds	r4, #10
 800b8ec:	2509      	movs	r5, #9
 800b8ee:	e7f6      	b.n	800b8de <__s2b+0x66>
 800b8f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	3b30      	subs	r3, #48	; 0x30
 800b8f8:	220a      	movs	r2, #10
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f7ff ff76 	bl	800b7ec <__multadd>
 800b900:	e7ee      	b.n	800b8e0 <__s2b+0x68>
 800b902:	bf00      	nop
 800b904:	0800f3dc 	.word	0x0800f3dc
 800b908:	0800f44d 	.word	0x0800f44d

0800b90c <__hi0bits>:
 800b90c:	0c03      	lsrs	r3, r0, #16
 800b90e:	041b      	lsls	r3, r3, #16
 800b910:	b9d3      	cbnz	r3, 800b948 <__hi0bits+0x3c>
 800b912:	0400      	lsls	r0, r0, #16
 800b914:	2310      	movs	r3, #16
 800b916:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b91a:	bf04      	itt	eq
 800b91c:	0200      	lsleq	r0, r0, #8
 800b91e:	3308      	addeq	r3, #8
 800b920:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b924:	bf04      	itt	eq
 800b926:	0100      	lsleq	r0, r0, #4
 800b928:	3304      	addeq	r3, #4
 800b92a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b92e:	bf04      	itt	eq
 800b930:	0080      	lsleq	r0, r0, #2
 800b932:	3302      	addeq	r3, #2
 800b934:	2800      	cmp	r0, #0
 800b936:	db05      	blt.n	800b944 <__hi0bits+0x38>
 800b938:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b93c:	f103 0301 	add.w	r3, r3, #1
 800b940:	bf08      	it	eq
 800b942:	2320      	moveq	r3, #32
 800b944:	4618      	mov	r0, r3
 800b946:	4770      	bx	lr
 800b948:	2300      	movs	r3, #0
 800b94a:	e7e4      	b.n	800b916 <__hi0bits+0xa>

0800b94c <__lo0bits>:
 800b94c:	6803      	ldr	r3, [r0, #0]
 800b94e:	f013 0207 	ands.w	r2, r3, #7
 800b952:	d00c      	beq.n	800b96e <__lo0bits+0x22>
 800b954:	07d9      	lsls	r1, r3, #31
 800b956:	d422      	bmi.n	800b99e <__lo0bits+0x52>
 800b958:	079a      	lsls	r2, r3, #30
 800b95a:	bf49      	itett	mi
 800b95c:	085b      	lsrmi	r3, r3, #1
 800b95e:	089b      	lsrpl	r3, r3, #2
 800b960:	6003      	strmi	r3, [r0, #0]
 800b962:	2201      	movmi	r2, #1
 800b964:	bf5c      	itt	pl
 800b966:	6003      	strpl	r3, [r0, #0]
 800b968:	2202      	movpl	r2, #2
 800b96a:	4610      	mov	r0, r2
 800b96c:	4770      	bx	lr
 800b96e:	b299      	uxth	r1, r3
 800b970:	b909      	cbnz	r1, 800b976 <__lo0bits+0x2a>
 800b972:	0c1b      	lsrs	r3, r3, #16
 800b974:	2210      	movs	r2, #16
 800b976:	b2d9      	uxtb	r1, r3
 800b978:	b909      	cbnz	r1, 800b97e <__lo0bits+0x32>
 800b97a:	3208      	adds	r2, #8
 800b97c:	0a1b      	lsrs	r3, r3, #8
 800b97e:	0719      	lsls	r1, r3, #28
 800b980:	bf04      	itt	eq
 800b982:	091b      	lsreq	r3, r3, #4
 800b984:	3204      	addeq	r2, #4
 800b986:	0799      	lsls	r1, r3, #30
 800b988:	bf04      	itt	eq
 800b98a:	089b      	lsreq	r3, r3, #2
 800b98c:	3202      	addeq	r2, #2
 800b98e:	07d9      	lsls	r1, r3, #31
 800b990:	d403      	bmi.n	800b99a <__lo0bits+0x4e>
 800b992:	085b      	lsrs	r3, r3, #1
 800b994:	f102 0201 	add.w	r2, r2, #1
 800b998:	d003      	beq.n	800b9a2 <__lo0bits+0x56>
 800b99a:	6003      	str	r3, [r0, #0]
 800b99c:	e7e5      	b.n	800b96a <__lo0bits+0x1e>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	e7e3      	b.n	800b96a <__lo0bits+0x1e>
 800b9a2:	2220      	movs	r2, #32
 800b9a4:	e7e1      	b.n	800b96a <__lo0bits+0x1e>
	...

0800b9a8 <__i2b>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	f7ff febb 	bl	800b728 <_Balloc>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	b928      	cbnz	r0, 800b9c2 <__i2b+0x1a>
 800b9b6:	4b05      	ldr	r3, [pc, #20]	; (800b9cc <__i2b+0x24>)
 800b9b8:	4805      	ldr	r0, [pc, #20]	; (800b9d0 <__i2b+0x28>)
 800b9ba:	f240 1145 	movw	r1, #325	; 0x145
 800b9be:	f7fe fc65 	bl	800a28c <__assert_func>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	6144      	str	r4, [r0, #20]
 800b9c6:	6103      	str	r3, [r0, #16]
 800b9c8:	bd10      	pop	{r4, pc}
 800b9ca:	bf00      	nop
 800b9cc:	0800f3dc 	.word	0x0800f3dc
 800b9d0:	0800f44d 	.word	0x0800f44d

0800b9d4 <__multiply>:
 800b9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	4691      	mov	r9, r2
 800b9da:	690a      	ldr	r2, [r1, #16]
 800b9dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	bfb8      	it	lt
 800b9e4:	460b      	movlt	r3, r1
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	bfbc      	itt	lt
 800b9ea:	464c      	movlt	r4, r9
 800b9ec:	4699      	movlt	r9, r3
 800b9ee:	6927      	ldr	r7, [r4, #16]
 800b9f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9f4:	68a3      	ldr	r3, [r4, #8]
 800b9f6:	6861      	ldr	r1, [r4, #4]
 800b9f8:	eb07 060a 	add.w	r6, r7, sl
 800b9fc:	42b3      	cmp	r3, r6
 800b9fe:	b085      	sub	sp, #20
 800ba00:	bfb8      	it	lt
 800ba02:	3101      	addlt	r1, #1
 800ba04:	f7ff fe90 	bl	800b728 <_Balloc>
 800ba08:	b930      	cbnz	r0, 800ba18 <__multiply+0x44>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	4b44      	ldr	r3, [pc, #272]	; (800bb20 <__multiply+0x14c>)
 800ba0e:	4845      	ldr	r0, [pc, #276]	; (800bb24 <__multiply+0x150>)
 800ba10:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ba14:	f7fe fc3a 	bl	800a28c <__assert_func>
 800ba18:	f100 0514 	add.w	r5, r0, #20
 800ba1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba20:	462b      	mov	r3, r5
 800ba22:	2200      	movs	r2, #0
 800ba24:	4543      	cmp	r3, r8
 800ba26:	d321      	bcc.n	800ba6c <__multiply+0x98>
 800ba28:	f104 0314 	add.w	r3, r4, #20
 800ba2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba30:	f109 0314 	add.w	r3, r9, #20
 800ba34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba38:	9202      	str	r2, [sp, #8]
 800ba3a:	1b3a      	subs	r2, r7, r4
 800ba3c:	3a15      	subs	r2, #21
 800ba3e:	f022 0203 	bic.w	r2, r2, #3
 800ba42:	3204      	adds	r2, #4
 800ba44:	f104 0115 	add.w	r1, r4, #21
 800ba48:	428f      	cmp	r7, r1
 800ba4a:	bf38      	it	cc
 800ba4c:	2204      	movcc	r2, #4
 800ba4e:	9201      	str	r2, [sp, #4]
 800ba50:	9a02      	ldr	r2, [sp, #8]
 800ba52:	9303      	str	r3, [sp, #12]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d80c      	bhi.n	800ba72 <__multiply+0x9e>
 800ba58:	2e00      	cmp	r6, #0
 800ba5a:	dd03      	ble.n	800ba64 <__multiply+0x90>
 800ba5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d05b      	beq.n	800bb1c <__multiply+0x148>
 800ba64:	6106      	str	r6, [r0, #16]
 800ba66:	b005      	add	sp, #20
 800ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6c:	f843 2b04 	str.w	r2, [r3], #4
 800ba70:	e7d8      	b.n	800ba24 <__multiply+0x50>
 800ba72:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba76:	f1ba 0f00 	cmp.w	sl, #0
 800ba7a:	d024      	beq.n	800bac6 <__multiply+0xf2>
 800ba7c:	f104 0e14 	add.w	lr, r4, #20
 800ba80:	46a9      	mov	r9, r5
 800ba82:	f04f 0c00 	mov.w	ip, #0
 800ba86:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba8a:	f8d9 1000 	ldr.w	r1, [r9]
 800ba8e:	fa1f fb82 	uxth.w	fp, r2
 800ba92:	b289      	uxth	r1, r1
 800ba94:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba9c:	f8d9 2000 	ldr.w	r2, [r9]
 800baa0:	4461      	add	r1, ip
 800baa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800baa6:	fb0a c20b 	mla	r2, sl, fp, ip
 800baaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800baae:	b289      	uxth	r1, r1
 800bab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bab4:	4577      	cmp	r7, lr
 800bab6:	f849 1b04 	str.w	r1, [r9], #4
 800baba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800babe:	d8e2      	bhi.n	800ba86 <__multiply+0xb2>
 800bac0:	9a01      	ldr	r2, [sp, #4]
 800bac2:	f845 c002 	str.w	ip, [r5, r2]
 800bac6:	9a03      	ldr	r2, [sp, #12]
 800bac8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bacc:	3304      	adds	r3, #4
 800bace:	f1b9 0f00 	cmp.w	r9, #0
 800bad2:	d021      	beq.n	800bb18 <__multiply+0x144>
 800bad4:	6829      	ldr	r1, [r5, #0]
 800bad6:	f104 0c14 	add.w	ip, r4, #20
 800bada:	46ae      	mov	lr, r5
 800badc:	f04f 0a00 	mov.w	sl, #0
 800bae0:	f8bc b000 	ldrh.w	fp, [ip]
 800bae4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bae8:	fb09 220b 	mla	r2, r9, fp, r2
 800baec:	4452      	add	r2, sl
 800baee:	b289      	uxth	r1, r1
 800baf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800baf4:	f84e 1b04 	str.w	r1, [lr], #4
 800baf8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bafc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb00:	f8be 1000 	ldrh.w	r1, [lr]
 800bb04:	fb09 110a 	mla	r1, r9, sl, r1
 800bb08:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bb0c:	4567      	cmp	r7, ip
 800bb0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb12:	d8e5      	bhi.n	800bae0 <__multiply+0x10c>
 800bb14:	9a01      	ldr	r2, [sp, #4]
 800bb16:	50a9      	str	r1, [r5, r2]
 800bb18:	3504      	adds	r5, #4
 800bb1a:	e799      	b.n	800ba50 <__multiply+0x7c>
 800bb1c:	3e01      	subs	r6, #1
 800bb1e:	e79b      	b.n	800ba58 <__multiply+0x84>
 800bb20:	0800f3dc 	.word	0x0800f3dc
 800bb24:	0800f44d 	.word	0x0800f44d

0800bb28 <__pow5mult>:
 800bb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb2c:	4615      	mov	r5, r2
 800bb2e:	f012 0203 	ands.w	r2, r2, #3
 800bb32:	4606      	mov	r6, r0
 800bb34:	460f      	mov	r7, r1
 800bb36:	d007      	beq.n	800bb48 <__pow5mult+0x20>
 800bb38:	4c25      	ldr	r4, [pc, #148]	; (800bbd0 <__pow5mult+0xa8>)
 800bb3a:	3a01      	subs	r2, #1
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb42:	f7ff fe53 	bl	800b7ec <__multadd>
 800bb46:	4607      	mov	r7, r0
 800bb48:	10ad      	asrs	r5, r5, #2
 800bb4a:	d03d      	beq.n	800bbc8 <__pow5mult+0xa0>
 800bb4c:	69f4      	ldr	r4, [r6, #28]
 800bb4e:	b97c      	cbnz	r4, 800bb70 <__pow5mult+0x48>
 800bb50:	2010      	movs	r0, #16
 800bb52:	f7fc fad1 	bl	80080f8 <malloc>
 800bb56:	4602      	mov	r2, r0
 800bb58:	61f0      	str	r0, [r6, #28]
 800bb5a:	b928      	cbnz	r0, 800bb68 <__pow5mult+0x40>
 800bb5c:	4b1d      	ldr	r3, [pc, #116]	; (800bbd4 <__pow5mult+0xac>)
 800bb5e:	481e      	ldr	r0, [pc, #120]	; (800bbd8 <__pow5mult+0xb0>)
 800bb60:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bb64:	f7fe fb92 	bl	800a28c <__assert_func>
 800bb68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb6c:	6004      	str	r4, [r0, #0]
 800bb6e:	60c4      	str	r4, [r0, #12]
 800bb70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bb74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb78:	b94c      	cbnz	r4, 800bb8e <__pow5mult+0x66>
 800bb7a:	f240 2171 	movw	r1, #625	; 0x271
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f7ff ff12 	bl	800b9a8 <__i2b>
 800bb84:	2300      	movs	r3, #0
 800bb86:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	6003      	str	r3, [r0, #0]
 800bb8e:	f04f 0900 	mov.w	r9, #0
 800bb92:	07eb      	lsls	r3, r5, #31
 800bb94:	d50a      	bpl.n	800bbac <__pow5mult+0x84>
 800bb96:	4639      	mov	r1, r7
 800bb98:	4622      	mov	r2, r4
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7ff ff1a 	bl	800b9d4 <__multiply>
 800bba0:	4639      	mov	r1, r7
 800bba2:	4680      	mov	r8, r0
 800bba4:	4630      	mov	r0, r6
 800bba6:	f7ff fdff 	bl	800b7a8 <_Bfree>
 800bbaa:	4647      	mov	r7, r8
 800bbac:	106d      	asrs	r5, r5, #1
 800bbae:	d00b      	beq.n	800bbc8 <__pow5mult+0xa0>
 800bbb0:	6820      	ldr	r0, [r4, #0]
 800bbb2:	b938      	cbnz	r0, 800bbc4 <__pow5mult+0x9c>
 800bbb4:	4622      	mov	r2, r4
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f7ff ff0b 	bl	800b9d4 <__multiply>
 800bbbe:	6020      	str	r0, [r4, #0]
 800bbc0:	f8c0 9000 	str.w	r9, [r0]
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	e7e4      	b.n	800bb92 <__pow5mult+0x6a>
 800bbc8:	4638      	mov	r0, r7
 800bbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbce:	bf00      	nop
 800bbd0:	0800f598 	.word	0x0800f598
 800bbd4:	0800f2c2 	.word	0x0800f2c2
 800bbd8:	0800f44d 	.word	0x0800f44d

0800bbdc <__lshift>:
 800bbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	6849      	ldr	r1, [r1, #4]
 800bbe4:	6923      	ldr	r3, [r4, #16]
 800bbe6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbea:	68a3      	ldr	r3, [r4, #8]
 800bbec:	4607      	mov	r7, r0
 800bbee:	4691      	mov	r9, r2
 800bbf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbf4:	f108 0601 	add.w	r6, r8, #1
 800bbf8:	42b3      	cmp	r3, r6
 800bbfa:	db0b      	blt.n	800bc14 <__lshift+0x38>
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7ff fd93 	bl	800b728 <_Balloc>
 800bc02:	4605      	mov	r5, r0
 800bc04:	b948      	cbnz	r0, 800bc1a <__lshift+0x3e>
 800bc06:	4602      	mov	r2, r0
 800bc08:	4b28      	ldr	r3, [pc, #160]	; (800bcac <__lshift+0xd0>)
 800bc0a:	4829      	ldr	r0, [pc, #164]	; (800bcb0 <__lshift+0xd4>)
 800bc0c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bc10:	f7fe fb3c 	bl	800a28c <__assert_func>
 800bc14:	3101      	adds	r1, #1
 800bc16:	005b      	lsls	r3, r3, #1
 800bc18:	e7ee      	b.n	800bbf8 <__lshift+0x1c>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f100 0114 	add.w	r1, r0, #20
 800bc20:	f100 0210 	add.w	r2, r0, #16
 800bc24:	4618      	mov	r0, r3
 800bc26:	4553      	cmp	r3, sl
 800bc28:	db33      	blt.n	800bc92 <__lshift+0xb6>
 800bc2a:	6920      	ldr	r0, [r4, #16]
 800bc2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc30:	f104 0314 	add.w	r3, r4, #20
 800bc34:	f019 091f 	ands.w	r9, r9, #31
 800bc38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc40:	d02b      	beq.n	800bc9a <__lshift+0xbe>
 800bc42:	f1c9 0e20 	rsb	lr, r9, #32
 800bc46:	468a      	mov	sl, r1
 800bc48:	2200      	movs	r2, #0
 800bc4a:	6818      	ldr	r0, [r3, #0]
 800bc4c:	fa00 f009 	lsl.w	r0, r0, r9
 800bc50:	4310      	orrs	r0, r2
 800bc52:	f84a 0b04 	str.w	r0, [sl], #4
 800bc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5a:	459c      	cmp	ip, r3
 800bc5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc60:	d8f3      	bhi.n	800bc4a <__lshift+0x6e>
 800bc62:	ebac 0304 	sub.w	r3, ip, r4
 800bc66:	3b15      	subs	r3, #21
 800bc68:	f023 0303 	bic.w	r3, r3, #3
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	f104 0015 	add.w	r0, r4, #21
 800bc72:	4584      	cmp	ip, r0
 800bc74:	bf38      	it	cc
 800bc76:	2304      	movcc	r3, #4
 800bc78:	50ca      	str	r2, [r1, r3]
 800bc7a:	b10a      	cbz	r2, 800bc80 <__lshift+0xa4>
 800bc7c:	f108 0602 	add.w	r6, r8, #2
 800bc80:	3e01      	subs	r6, #1
 800bc82:	4638      	mov	r0, r7
 800bc84:	612e      	str	r6, [r5, #16]
 800bc86:	4621      	mov	r1, r4
 800bc88:	f7ff fd8e 	bl	800b7a8 <_Bfree>
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc92:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc96:	3301      	adds	r3, #1
 800bc98:	e7c5      	b.n	800bc26 <__lshift+0x4a>
 800bc9a:	3904      	subs	r1, #4
 800bc9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bca0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bca4:	459c      	cmp	ip, r3
 800bca6:	d8f9      	bhi.n	800bc9c <__lshift+0xc0>
 800bca8:	e7ea      	b.n	800bc80 <__lshift+0xa4>
 800bcaa:	bf00      	nop
 800bcac:	0800f3dc 	.word	0x0800f3dc
 800bcb0:	0800f44d 	.word	0x0800f44d

0800bcb4 <__mcmp>:
 800bcb4:	b530      	push	{r4, r5, lr}
 800bcb6:	6902      	ldr	r2, [r0, #16]
 800bcb8:	690c      	ldr	r4, [r1, #16]
 800bcba:	1b12      	subs	r2, r2, r4
 800bcbc:	d10e      	bne.n	800bcdc <__mcmp+0x28>
 800bcbe:	f100 0314 	add.w	r3, r0, #20
 800bcc2:	3114      	adds	r1, #20
 800bcc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bcc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bccc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bcd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bcd4:	42a5      	cmp	r5, r4
 800bcd6:	d003      	beq.n	800bce0 <__mcmp+0x2c>
 800bcd8:	d305      	bcc.n	800bce6 <__mcmp+0x32>
 800bcda:	2201      	movs	r2, #1
 800bcdc:	4610      	mov	r0, r2
 800bcde:	bd30      	pop	{r4, r5, pc}
 800bce0:	4283      	cmp	r3, r0
 800bce2:	d3f3      	bcc.n	800bccc <__mcmp+0x18>
 800bce4:	e7fa      	b.n	800bcdc <__mcmp+0x28>
 800bce6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcea:	e7f7      	b.n	800bcdc <__mcmp+0x28>

0800bcec <__mdiff>:
 800bcec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	460c      	mov	r4, r1
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	4690      	mov	r8, r2
 800bcfa:	f7ff ffdb 	bl	800bcb4 <__mcmp>
 800bcfe:	1e05      	subs	r5, r0, #0
 800bd00:	d110      	bne.n	800bd24 <__mdiff+0x38>
 800bd02:	4629      	mov	r1, r5
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7ff fd0f 	bl	800b728 <_Balloc>
 800bd0a:	b930      	cbnz	r0, 800bd1a <__mdiff+0x2e>
 800bd0c:	4b3a      	ldr	r3, [pc, #232]	; (800bdf8 <__mdiff+0x10c>)
 800bd0e:	4602      	mov	r2, r0
 800bd10:	f240 2137 	movw	r1, #567	; 0x237
 800bd14:	4839      	ldr	r0, [pc, #228]	; (800bdfc <__mdiff+0x110>)
 800bd16:	f7fe fab9 	bl	800a28c <__assert_func>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	bfa4      	itt	ge
 800bd26:	4643      	movge	r3, r8
 800bd28:	46a0      	movge	r8, r4
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd30:	bfa6      	itte	ge
 800bd32:	461c      	movge	r4, r3
 800bd34:	2500      	movge	r5, #0
 800bd36:	2501      	movlt	r5, #1
 800bd38:	f7ff fcf6 	bl	800b728 <_Balloc>
 800bd3c:	b920      	cbnz	r0, 800bd48 <__mdiff+0x5c>
 800bd3e:	4b2e      	ldr	r3, [pc, #184]	; (800bdf8 <__mdiff+0x10c>)
 800bd40:	4602      	mov	r2, r0
 800bd42:	f240 2145 	movw	r1, #581	; 0x245
 800bd46:	e7e5      	b.n	800bd14 <__mdiff+0x28>
 800bd48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd4c:	6926      	ldr	r6, [r4, #16]
 800bd4e:	60c5      	str	r5, [r0, #12]
 800bd50:	f104 0914 	add.w	r9, r4, #20
 800bd54:	f108 0514 	add.w	r5, r8, #20
 800bd58:	f100 0e14 	add.w	lr, r0, #20
 800bd5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd64:	f108 0210 	add.w	r2, r8, #16
 800bd68:	46f2      	mov	sl, lr
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd74:	fa11 f88b 	uxtah	r8, r1, fp
 800bd78:	b299      	uxth	r1, r3
 800bd7a:	0c1b      	lsrs	r3, r3, #16
 800bd7c:	eba8 0801 	sub.w	r8, r8, r1
 800bd80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd84:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd88:	fa1f f888 	uxth.w	r8, r8
 800bd8c:	1419      	asrs	r1, r3, #16
 800bd8e:	454e      	cmp	r6, r9
 800bd90:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd94:	f84a 3b04 	str.w	r3, [sl], #4
 800bd98:	d8e8      	bhi.n	800bd6c <__mdiff+0x80>
 800bd9a:	1b33      	subs	r3, r6, r4
 800bd9c:	3b15      	subs	r3, #21
 800bd9e:	f023 0303 	bic.w	r3, r3, #3
 800bda2:	3304      	adds	r3, #4
 800bda4:	3415      	adds	r4, #21
 800bda6:	42a6      	cmp	r6, r4
 800bda8:	bf38      	it	cc
 800bdaa:	2304      	movcc	r3, #4
 800bdac:	441d      	add	r5, r3
 800bdae:	4473      	add	r3, lr
 800bdb0:	469e      	mov	lr, r3
 800bdb2:	462e      	mov	r6, r5
 800bdb4:	4566      	cmp	r6, ip
 800bdb6:	d30e      	bcc.n	800bdd6 <__mdiff+0xea>
 800bdb8:	f10c 0203 	add.w	r2, ip, #3
 800bdbc:	1b52      	subs	r2, r2, r5
 800bdbe:	f022 0203 	bic.w	r2, r2, #3
 800bdc2:	3d03      	subs	r5, #3
 800bdc4:	45ac      	cmp	ip, r5
 800bdc6:	bf38      	it	cc
 800bdc8:	2200      	movcc	r2, #0
 800bdca:	4413      	add	r3, r2
 800bdcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bdd0:	b17a      	cbz	r2, 800bdf2 <__mdiff+0x106>
 800bdd2:	6107      	str	r7, [r0, #16]
 800bdd4:	e7a4      	b.n	800bd20 <__mdiff+0x34>
 800bdd6:	f856 8b04 	ldr.w	r8, [r6], #4
 800bdda:	fa11 f288 	uxtah	r2, r1, r8
 800bdde:	1414      	asrs	r4, r2, #16
 800bde0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bde4:	b292      	uxth	r2, r2
 800bde6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bdea:	f84e 2b04 	str.w	r2, [lr], #4
 800bdee:	1421      	asrs	r1, r4, #16
 800bdf0:	e7e0      	b.n	800bdb4 <__mdiff+0xc8>
 800bdf2:	3f01      	subs	r7, #1
 800bdf4:	e7ea      	b.n	800bdcc <__mdiff+0xe0>
 800bdf6:	bf00      	nop
 800bdf8:	0800f3dc 	.word	0x0800f3dc
 800bdfc:	0800f44d 	.word	0x0800f44d

0800be00 <__ulp>:
 800be00:	b082      	sub	sp, #8
 800be02:	ed8d 0b00 	vstr	d0, [sp]
 800be06:	9a01      	ldr	r2, [sp, #4]
 800be08:	4b0f      	ldr	r3, [pc, #60]	; (800be48 <__ulp+0x48>)
 800be0a:	4013      	ands	r3, r2
 800be0c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800be10:	2b00      	cmp	r3, #0
 800be12:	dc08      	bgt.n	800be26 <__ulp+0x26>
 800be14:	425b      	negs	r3, r3
 800be16:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800be1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be1e:	da04      	bge.n	800be2a <__ulp+0x2a>
 800be20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be24:	4113      	asrs	r3, r2
 800be26:	2200      	movs	r2, #0
 800be28:	e008      	b.n	800be3c <__ulp+0x3c>
 800be2a:	f1a2 0314 	sub.w	r3, r2, #20
 800be2e:	2b1e      	cmp	r3, #30
 800be30:	bfda      	itte	le
 800be32:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800be36:	40da      	lsrle	r2, r3
 800be38:	2201      	movgt	r2, #1
 800be3a:	2300      	movs	r3, #0
 800be3c:	4619      	mov	r1, r3
 800be3e:	4610      	mov	r0, r2
 800be40:	ec41 0b10 	vmov	d0, r0, r1
 800be44:	b002      	add	sp, #8
 800be46:	4770      	bx	lr
 800be48:	7ff00000 	.word	0x7ff00000

0800be4c <__b2d>:
 800be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be50:	6906      	ldr	r6, [r0, #16]
 800be52:	f100 0814 	add.w	r8, r0, #20
 800be56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be5a:	1f37      	subs	r7, r6, #4
 800be5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be60:	4610      	mov	r0, r2
 800be62:	f7ff fd53 	bl	800b90c <__hi0bits>
 800be66:	f1c0 0320 	rsb	r3, r0, #32
 800be6a:	280a      	cmp	r0, #10
 800be6c:	600b      	str	r3, [r1, #0]
 800be6e:	491b      	ldr	r1, [pc, #108]	; (800bedc <__b2d+0x90>)
 800be70:	dc15      	bgt.n	800be9e <__b2d+0x52>
 800be72:	f1c0 0c0b 	rsb	ip, r0, #11
 800be76:	fa22 f30c 	lsr.w	r3, r2, ip
 800be7a:	45b8      	cmp	r8, r7
 800be7c:	ea43 0501 	orr.w	r5, r3, r1
 800be80:	bf34      	ite	cc
 800be82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be86:	2300      	movcs	r3, #0
 800be88:	3015      	adds	r0, #21
 800be8a:	fa02 f000 	lsl.w	r0, r2, r0
 800be8e:	fa23 f30c 	lsr.w	r3, r3, ip
 800be92:	4303      	orrs	r3, r0
 800be94:	461c      	mov	r4, r3
 800be96:	ec45 4b10 	vmov	d0, r4, r5
 800be9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be9e:	45b8      	cmp	r8, r7
 800bea0:	bf3a      	itte	cc
 800bea2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bea6:	f1a6 0708 	subcc.w	r7, r6, #8
 800beaa:	2300      	movcs	r3, #0
 800beac:	380b      	subs	r0, #11
 800beae:	d012      	beq.n	800bed6 <__b2d+0x8a>
 800beb0:	f1c0 0120 	rsb	r1, r0, #32
 800beb4:	fa23 f401 	lsr.w	r4, r3, r1
 800beb8:	4082      	lsls	r2, r0
 800beba:	4322      	orrs	r2, r4
 800bebc:	4547      	cmp	r7, r8
 800bebe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bec2:	bf8c      	ite	hi
 800bec4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bec8:	2200      	movls	r2, #0
 800beca:	4083      	lsls	r3, r0
 800becc:	40ca      	lsrs	r2, r1
 800bece:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bed2:	4313      	orrs	r3, r2
 800bed4:	e7de      	b.n	800be94 <__b2d+0x48>
 800bed6:	ea42 0501 	orr.w	r5, r2, r1
 800beda:	e7db      	b.n	800be94 <__b2d+0x48>
 800bedc:	3ff00000 	.word	0x3ff00000

0800bee0 <__d2b>:
 800bee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bee4:	460f      	mov	r7, r1
 800bee6:	2101      	movs	r1, #1
 800bee8:	ec59 8b10 	vmov	r8, r9, d0
 800beec:	4616      	mov	r6, r2
 800beee:	f7ff fc1b 	bl	800b728 <_Balloc>
 800bef2:	4604      	mov	r4, r0
 800bef4:	b930      	cbnz	r0, 800bf04 <__d2b+0x24>
 800bef6:	4602      	mov	r2, r0
 800bef8:	4b24      	ldr	r3, [pc, #144]	; (800bf8c <__d2b+0xac>)
 800befa:	4825      	ldr	r0, [pc, #148]	; (800bf90 <__d2b+0xb0>)
 800befc:	f240 310f 	movw	r1, #783	; 0x30f
 800bf00:	f7fe f9c4 	bl	800a28c <__assert_func>
 800bf04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf0c:	bb2d      	cbnz	r5, 800bf5a <__d2b+0x7a>
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	f1b8 0300 	subs.w	r3, r8, #0
 800bf14:	d026      	beq.n	800bf64 <__d2b+0x84>
 800bf16:	4668      	mov	r0, sp
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	f7ff fd17 	bl	800b94c <__lo0bits>
 800bf1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf22:	b1e8      	cbz	r0, 800bf60 <__d2b+0x80>
 800bf24:	f1c0 0320 	rsb	r3, r0, #32
 800bf28:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	40c2      	lsrs	r2, r0
 800bf30:	6163      	str	r3, [r4, #20]
 800bf32:	9201      	str	r2, [sp, #4]
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	61a3      	str	r3, [r4, #24]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	bf14      	ite	ne
 800bf3c:	2202      	movne	r2, #2
 800bf3e:	2201      	moveq	r2, #1
 800bf40:	6122      	str	r2, [r4, #16]
 800bf42:	b1bd      	cbz	r5, 800bf74 <__d2b+0x94>
 800bf44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf48:	4405      	add	r5, r0
 800bf4a:	603d      	str	r5, [r7, #0]
 800bf4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf50:	6030      	str	r0, [r6, #0]
 800bf52:	4620      	mov	r0, r4
 800bf54:	b003      	add	sp, #12
 800bf56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf5e:	e7d6      	b.n	800bf0e <__d2b+0x2e>
 800bf60:	6161      	str	r1, [r4, #20]
 800bf62:	e7e7      	b.n	800bf34 <__d2b+0x54>
 800bf64:	a801      	add	r0, sp, #4
 800bf66:	f7ff fcf1 	bl	800b94c <__lo0bits>
 800bf6a:	9b01      	ldr	r3, [sp, #4]
 800bf6c:	6163      	str	r3, [r4, #20]
 800bf6e:	3020      	adds	r0, #32
 800bf70:	2201      	movs	r2, #1
 800bf72:	e7e5      	b.n	800bf40 <__d2b+0x60>
 800bf74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf7c:	6038      	str	r0, [r7, #0]
 800bf7e:	6918      	ldr	r0, [r3, #16]
 800bf80:	f7ff fcc4 	bl	800b90c <__hi0bits>
 800bf84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf88:	e7e2      	b.n	800bf50 <__d2b+0x70>
 800bf8a:	bf00      	nop
 800bf8c:	0800f3dc 	.word	0x0800f3dc
 800bf90:	0800f44d 	.word	0x0800f44d

0800bf94 <__ratio>:
 800bf94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf98:	4688      	mov	r8, r1
 800bf9a:	4669      	mov	r1, sp
 800bf9c:	4681      	mov	r9, r0
 800bf9e:	f7ff ff55 	bl	800be4c <__b2d>
 800bfa2:	a901      	add	r1, sp, #4
 800bfa4:	4640      	mov	r0, r8
 800bfa6:	ec55 4b10 	vmov	r4, r5, d0
 800bfaa:	f7ff ff4f 	bl	800be4c <__b2d>
 800bfae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bfb6:	eba3 0c02 	sub.w	ip, r3, r2
 800bfba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bfbe:	1a9b      	subs	r3, r3, r2
 800bfc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bfc4:	ec51 0b10 	vmov	r0, r1, d0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	bfd6      	itet	le
 800bfcc:	460a      	movle	r2, r1
 800bfce:	462a      	movgt	r2, r5
 800bfd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfd4:	468b      	mov	fp, r1
 800bfd6:	462f      	mov	r7, r5
 800bfd8:	bfd4      	ite	le
 800bfda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bfde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	ee10 2a10 	vmov	r2, s0
 800bfe8:	465b      	mov	r3, fp
 800bfea:	4639      	mov	r1, r7
 800bfec:	f7f4 fc2e 	bl	800084c <__aeabi_ddiv>
 800bff0:	ec41 0b10 	vmov	d0, r0, r1
 800bff4:	b003      	add	sp, #12
 800bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bffa <__copybits>:
 800bffa:	3901      	subs	r1, #1
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	1149      	asrs	r1, r1, #5
 800c000:	6914      	ldr	r4, [r2, #16]
 800c002:	3101      	adds	r1, #1
 800c004:	f102 0314 	add.w	r3, r2, #20
 800c008:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c00c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c010:	1f05      	subs	r5, r0, #4
 800c012:	42a3      	cmp	r3, r4
 800c014:	d30c      	bcc.n	800c030 <__copybits+0x36>
 800c016:	1aa3      	subs	r3, r4, r2
 800c018:	3b11      	subs	r3, #17
 800c01a:	f023 0303 	bic.w	r3, r3, #3
 800c01e:	3211      	adds	r2, #17
 800c020:	42a2      	cmp	r2, r4
 800c022:	bf88      	it	hi
 800c024:	2300      	movhi	r3, #0
 800c026:	4418      	add	r0, r3
 800c028:	2300      	movs	r3, #0
 800c02a:	4288      	cmp	r0, r1
 800c02c:	d305      	bcc.n	800c03a <__copybits+0x40>
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	f853 6b04 	ldr.w	r6, [r3], #4
 800c034:	f845 6f04 	str.w	r6, [r5, #4]!
 800c038:	e7eb      	b.n	800c012 <__copybits+0x18>
 800c03a:	f840 3b04 	str.w	r3, [r0], #4
 800c03e:	e7f4      	b.n	800c02a <__copybits+0x30>

0800c040 <__any_on>:
 800c040:	f100 0214 	add.w	r2, r0, #20
 800c044:	6900      	ldr	r0, [r0, #16]
 800c046:	114b      	asrs	r3, r1, #5
 800c048:	4298      	cmp	r0, r3
 800c04a:	b510      	push	{r4, lr}
 800c04c:	db11      	blt.n	800c072 <__any_on+0x32>
 800c04e:	dd0a      	ble.n	800c066 <__any_on+0x26>
 800c050:	f011 011f 	ands.w	r1, r1, #31
 800c054:	d007      	beq.n	800c066 <__any_on+0x26>
 800c056:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c05a:	fa24 f001 	lsr.w	r0, r4, r1
 800c05e:	fa00 f101 	lsl.w	r1, r0, r1
 800c062:	428c      	cmp	r4, r1
 800c064:	d10b      	bne.n	800c07e <__any_on+0x3e>
 800c066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d803      	bhi.n	800c076 <__any_on+0x36>
 800c06e:	2000      	movs	r0, #0
 800c070:	bd10      	pop	{r4, pc}
 800c072:	4603      	mov	r3, r0
 800c074:	e7f7      	b.n	800c066 <__any_on+0x26>
 800c076:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c07a:	2900      	cmp	r1, #0
 800c07c:	d0f5      	beq.n	800c06a <__any_on+0x2a>
 800c07e:	2001      	movs	r0, #1
 800c080:	e7f6      	b.n	800c070 <__any_on+0x30>

0800c082 <__ascii_wctomb>:
 800c082:	b149      	cbz	r1, 800c098 <__ascii_wctomb+0x16>
 800c084:	2aff      	cmp	r2, #255	; 0xff
 800c086:	bf85      	ittet	hi
 800c088:	238a      	movhi	r3, #138	; 0x8a
 800c08a:	6003      	strhi	r3, [r0, #0]
 800c08c:	700a      	strbls	r2, [r1, #0]
 800c08e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c092:	bf98      	it	ls
 800c094:	2001      	movls	r0, #1
 800c096:	4770      	bx	lr
 800c098:	4608      	mov	r0, r1
 800c09a:	4770      	bx	lr

0800c09c <__ssputs_r>:
 800c09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a0:	688e      	ldr	r6, [r1, #8]
 800c0a2:	461f      	mov	r7, r3
 800c0a4:	42be      	cmp	r6, r7
 800c0a6:	680b      	ldr	r3, [r1, #0]
 800c0a8:	4682      	mov	sl, r0
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	4690      	mov	r8, r2
 800c0ae:	d82c      	bhi.n	800c10a <__ssputs_r+0x6e>
 800c0b0:	898a      	ldrh	r2, [r1, #12]
 800c0b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0b6:	d026      	beq.n	800c106 <__ssputs_r+0x6a>
 800c0b8:	6965      	ldr	r5, [r4, #20]
 800c0ba:	6909      	ldr	r1, [r1, #16]
 800c0bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0c0:	eba3 0901 	sub.w	r9, r3, r1
 800c0c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0c8:	1c7b      	adds	r3, r7, #1
 800c0ca:	444b      	add	r3, r9
 800c0cc:	106d      	asrs	r5, r5, #1
 800c0ce:	429d      	cmp	r5, r3
 800c0d0:	bf38      	it	cc
 800c0d2:	461d      	movcc	r5, r3
 800c0d4:	0553      	lsls	r3, r2, #21
 800c0d6:	d527      	bpl.n	800c128 <__ssputs_r+0x8c>
 800c0d8:	4629      	mov	r1, r5
 800c0da:	f7fc f83d 	bl	8008158 <_malloc_r>
 800c0de:	4606      	mov	r6, r0
 800c0e0:	b360      	cbz	r0, 800c13c <__ssputs_r+0xa0>
 800c0e2:	6921      	ldr	r1, [r4, #16]
 800c0e4:	464a      	mov	r2, r9
 800c0e6:	f7fe f8b4 	bl	800a252 <memcpy>
 800c0ea:	89a3      	ldrh	r3, [r4, #12]
 800c0ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f4:	81a3      	strh	r3, [r4, #12]
 800c0f6:	6126      	str	r6, [r4, #16]
 800c0f8:	6165      	str	r5, [r4, #20]
 800c0fa:	444e      	add	r6, r9
 800c0fc:	eba5 0509 	sub.w	r5, r5, r9
 800c100:	6026      	str	r6, [r4, #0]
 800c102:	60a5      	str	r5, [r4, #8]
 800c104:	463e      	mov	r6, r7
 800c106:	42be      	cmp	r6, r7
 800c108:	d900      	bls.n	800c10c <__ssputs_r+0x70>
 800c10a:	463e      	mov	r6, r7
 800c10c:	6820      	ldr	r0, [r4, #0]
 800c10e:	4632      	mov	r2, r6
 800c110:	4641      	mov	r1, r8
 800c112:	f000 f9db 	bl	800c4cc <memmove>
 800c116:	68a3      	ldr	r3, [r4, #8]
 800c118:	1b9b      	subs	r3, r3, r6
 800c11a:	60a3      	str	r3, [r4, #8]
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	4433      	add	r3, r6
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	2000      	movs	r0, #0
 800c124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c128:	462a      	mov	r2, r5
 800c12a:	f000 fa06 	bl	800c53a <_realloc_r>
 800c12e:	4606      	mov	r6, r0
 800c130:	2800      	cmp	r0, #0
 800c132:	d1e0      	bne.n	800c0f6 <__ssputs_r+0x5a>
 800c134:	6921      	ldr	r1, [r4, #16]
 800c136:	4650      	mov	r0, sl
 800c138:	f7fe ff40 	bl	800afbc <_free_r>
 800c13c:	230c      	movs	r3, #12
 800c13e:	f8ca 3000 	str.w	r3, [sl]
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	f04f 30ff 	mov.w	r0, #4294967295
 800c14e:	e7e9      	b.n	800c124 <__ssputs_r+0x88>

0800c150 <_svfiprintf_r>:
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	4698      	mov	r8, r3
 800c156:	898b      	ldrh	r3, [r1, #12]
 800c158:	061b      	lsls	r3, r3, #24
 800c15a:	b09d      	sub	sp, #116	; 0x74
 800c15c:	4607      	mov	r7, r0
 800c15e:	460d      	mov	r5, r1
 800c160:	4614      	mov	r4, r2
 800c162:	d50e      	bpl.n	800c182 <_svfiprintf_r+0x32>
 800c164:	690b      	ldr	r3, [r1, #16]
 800c166:	b963      	cbnz	r3, 800c182 <_svfiprintf_r+0x32>
 800c168:	2140      	movs	r1, #64	; 0x40
 800c16a:	f7fb fff5 	bl	8008158 <_malloc_r>
 800c16e:	6028      	str	r0, [r5, #0]
 800c170:	6128      	str	r0, [r5, #16]
 800c172:	b920      	cbnz	r0, 800c17e <_svfiprintf_r+0x2e>
 800c174:	230c      	movs	r3, #12
 800c176:	603b      	str	r3, [r7, #0]
 800c178:	f04f 30ff 	mov.w	r0, #4294967295
 800c17c:	e0d0      	b.n	800c320 <_svfiprintf_r+0x1d0>
 800c17e:	2340      	movs	r3, #64	; 0x40
 800c180:	616b      	str	r3, [r5, #20]
 800c182:	2300      	movs	r3, #0
 800c184:	9309      	str	r3, [sp, #36]	; 0x24
 800c186:	2320      	movs	r3, #32
 800c188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c18c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c190:	2330      	movs	r3, #48	; 0x30
 800c192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c338 <_svfiprintf_r+0x1e8>
 800c196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c19a:	f04f 0901 	mov.w	r9, #1
 800c19e:	4623      	mov	r3, r4
 800c1a0:	469a      	mov	sl, r3
 800c1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1a6:	b10a      	cbz	r2, 800c1ac <_svfiprintf_r+0x5c>
 800c1a8:	2a25      	cmp	r2, #37	; 0x25
 800c1aa:	d1f9      	bne.n	800c1a0 <_svfiprintf_r+0x50>
 800c1ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c1b0:	d00b      	beq.n	800c1ca <_svfiprintf_r+0x7a>
 800c1b2:	465b      	mov	r3, fp
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	f7ff ff6f 	bl	800c09c <__ssputs_r>
 800c1be:	3001      	adds	r0, #1
 800c1c0:	f000 80a9 	beq.w	800c316 <_svfiprintf_r+0x1c6>
 800c1c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1c6:	445a      	add	r2, fp
 800c1c8:	9209      	str	r2, [sp, #36]	; 0x24
 800c1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 80a1 	beq.w	800c316 <_svfiprintf_r+0x1c6>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1de:	f10a 0a01 	add.w	sl, sl, #1
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	9307      	str	r3, [sp, #28]
 800c1e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1ea:	931a      	str	r3, [sp, #104]	; 0x68
 800c1ec:	4654      	mov	r4, sl
 800c1ee:	2205      	movs	r2, #5
 800c1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f4:	4850      	ldr	r0, [pc, #320]	; (800c338 <_svfiprintf_r+0x1e8>)
 800c1f6:	f7f3 ffeb 	bl	80001d0 <memchr>
 800c1fa:	9a04      	ldr	r2, [sp, #16]
 800c1fc:	b9d8      	cbnz	r0, 800c236 <_svfiprintf_r+0xe6>
 800c1fe:	06d0      	lsls	r0, r2, #27
 800c200:	bf44      	itt	mi
 800c202:	2320      	movmi	r3, #32
 800c204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c208:	0711      	lsls	r1, r2, #28
 800c20a:	bf44      	itt	mi
 800c20c:	232b      	movmi	r3, #43	; 0x2b
 800c20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c212:	f89a 3000 	ldrb.w	r3, [sl]
 800c216:	2b2a      	cmp	r3, #42	; 0x2a
 800c218:	d015      	beq.n	800c246 <_svfiprintf_r+0xf6>
 800c21a:	9a07      	ldr	r2, [sp, #28]
 800c21c:	4654      	mov	r4, sl
 800c21e:	2000      	movs	r0, #0
 800c220:	f04f 0c0a 	mov.w	ip, #10
 800c224:	4621      	mov	r1, r4
 800c226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c22a:	3b30      	subs	r3, #48	; 0x30
 800c22c:	2b09      	cmp	r3, #9
 800c22e:	d94d      	bls.n	800c2cc <_svfiprintf_r+0x17c>
 800c230:	b1b0      	cbz	r0, 800c260 <_svfiprintf_r+0x110>
 800c232:	9207      	str	r2, [sp, #28]
 800c234:	e014      	b.n	800c260 <_svfiprintf_r+0x110>
 800c236:	eba0 0308 	sub.w	r3, r0, r8
 800c23a:	fa09 f303 	lsl.w	r3, r9, r3
 800c23e:	4313      	orrs	r3, r2
 800c240:	9304      	str	r3, [sp, #16]
 800c242:	46a2      	mov	sl, r4
 800c244:	e7d2      	b.n	800c1ec <_svfiprintf_r+0x9c>
 800c246:	9b03      	ldr	r3, [sp, #12]
 800c248:	1d19      	adds	r1, r3, #4
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	9103      	str	r1, [sp, #12]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	bfbb      	ittet	lt
 800c252:	425b      	neglt	r3, r3
 800c254:	f042 0202 	orrlt.w	r2, r2, #2
 800c258:	9307      	strge	r3, [sp, #28]
 800c25a:	9307      	strlt	r3, [sp, #28]
 800c25c:	bfb8      	it	lt
 800c25e:	9204      	strlt	r2, [sp, #16]
 800c260:	7823      	ldrb	r3, [r4, #0]
 800c262:	2b2e      	cmp	r3, #46	; 0x2e
 800c264:	d10c      	bne.n	800c280 <_svfiprintf_r+0x130>
 800c266:	7863      	ldrb	r3, [r4, #1]
 800c268:	2b2a      	cmp	r3, #42	; 0x2a
 800c26a:	d134      	bne.n	800c2d6 <_svfiprintf_r+0x186>
 800c26c:	9b03      	ldr	r3, [sp, #12]
 800c26e:	1d1a      	adds	r2, r3, #4
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	9203      	str	r2, [sp, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	bfb8      	it	lt
 800c278:	f04f 33ff 	movlt.w	r3, #4294967295
 800c27c:	3402      	adds	r4, #2
 800c27e:	9305      	str	r3, [sp, #20]
 800c280:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c348 <_svfiprintf_r+0x1f8>
 800c284:	7821      	ldrb	r1, [r4, #0]
 800c286:	2203      	movs	r2, #3
 800c288:	4650      	mov	r0, sl
 800c28a:	f7f3 ffa1 	bl	80001d0 <memchr>
 800c28e:	b138      	cbz	r0, 800c2a0 <_svfiprintf_r+0x150>
 800c290:	9b04      	ldr	r3, [sp, #16]
 800c292:	eba0 000a 	sub.w	r0, r0, sl
 800c296:	2240      	movs	r2, #64	; 0x40
 800c298:	4082      	lsls	r2, r0
 800c29a:	4313      	orrs	r3, r2
 800c29c:	3401      	adds	r4, #1
 800c29e:	9304      	str	r3, [sp, #16]
 800c2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a4:	4825      	ldr	r0, [pc, #148]	; (800c33c <_svfiprintf_r+0x1ec>)
 800c2a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2aa:	2206      	movs	r2, #6
 800c2ac:	f7f3 ff90 	bl	80001d0 <memchr>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d038      	beq.n	800c326 <_svfiprintf_r+0x1d6>
 800c2b4:	4b22      	ldr	r3, [pc, #136]	; (800c340 <_svfiprintf_r+0x1f0>)
 800c2b6:	bb1b      	cbnz	r3, 800c300 <_svfiprintf_r+0x1b0>
 800c2b8:	9b03      	ldr	r3, [sp, #12]
 800c2ba:	3307      	adds	r3, #7
 800c2bc:	f023 0307 	bic.w	r3, r3, #7
 800c2c0:	3308      	adds	r3, #8
 800c2c2:	9303      	str	r3, [sp, #12]
 800c2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c6:	4433      	add	r3, r6
 800c2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ca:	e768      	b.n	800c19e <_svfiprintf_r+0x4e>
 800c2cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	2001      	movs	r0, #1
 800c2d4:	e7a6      	b.n	800c224 <_svfiprintf_r+0xd4>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	3401      	adds	r4, #1
 800c2da:	9305      	str	r3, [sp, #20]
 800c2dc:	4619      	mov	r1, r3
 800c2de:	f04f 0c0a 	mov.w	ip, #10
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2e8:	3a30      	subs	r2, #48	; 0x30
 800c2ea:	2a09      	cmp	r2, #9
 800c2ec:	d903      	bls.n	800c2f6 <_svfiprintf_r+0x1a6>
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0c6      	beq.n	800c280 <_svfiprintf_r+0x130>
 800c2f2:	9105      	str	r1, [sp, #20]
 800c2f4:	e7c4      	b.n	800c280 <_svfiprintf_r+0x130>
 800c2f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e7f0      	b.n	800c2e2 <_svfiprintf_r+0x192>
 800c300:	ab03      	add	r3, sp, #12
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	462a      	mov	r2, r5
 800c306:	4b0f      	ldr	r3, [pc, #60]	; (800c344 <_svfiprintf_r+0x1f4>)
 800c308:	a904      	add	r1, sp, #16
 800c30a:	4638      	mov	r0, r7
 800c30c:	f7fc ff56 	bl	80091bc <_printf_float>
 800c310:	1c42      	adds	r2, r0, #1
 800c312:	4606      	mov	r6, r0
 800c314:	d1d6      	bne.n	800c2c4 <_svfiprintf_r+0x174>
 800c316:	89ab      	ldrh	r3, [r5, #12]
 800c318:	065b      	lsls	r3, r3, #25
 800c31a:	f53f af2d 	bmi.w	800c178 <_svfiprintf_r+0x28>
 800c31e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c320:	b01d      	add	sp, #116	; 0x74
 800c322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c326:	ab03      	add	r3, sp, #12
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	462a      	mov	r2, r5
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <_svfiprintf_r+0x1f4>)
 800c32e:	a904      	add	r1, sp, #16
 800c330:	4638      	mov	r0, r7
 800c332:	f7fd f9e7 	bl	8009704 <_printf_i>
 800c336:	e7eb      	b.n	800c310 <_svfiprintf_r+0x1c0>
 800c338:	0800f5a4 	.word	0x0800f5a4
 800c33c:	0800f5ae 	.word	0x0800f5ae
 800c340:	080091bd 	.word	0x080091bd
 800c344:	0800c09d 	.word	0x0800c09d
 800c348:	0800f5aa 	.word	0x0800f5aa

0800c34c <__sflush_r>:
 800c34c:	898a      	ldrh	r2, [r1, #12]
 800c34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c352:	4605      	mov	r5, r0
 800c354:	0710      	lsls	r0, r2, #28
 800c356:	460c      	mov	r4, r1
 800c358:	d458      	bmi.n	800c40c <__sflush_r+0xc0>
 800c35a:	684b      	ldr	r3, [r1, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	dc05      	bgt.n	800c36c <__sflush_r+0x20>
 800c360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c362:	2b00      	cmp	r3, #0
 800c364:	dc02      	bgt.n	800c36c <__sflush_r+0x20>
 800c366:	2000      	movs	r0, #0
 800c368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c36c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c36e:	2e00      	cmp	r6, #0
 800c370:	d0f9      	beq.n	800c366 <__sflush_r+0x1a>
 800c372:	2300      	movs	r3, #0
 800c374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c378:	682f      	ldr	r7, [r5, #0]
 800c37a:	6a21      	ldr	r1, [r4, #32]
 800c37c:	602b      	str	r3, [r5, #0]
 800c37e:	d032      	beq.n	800c3e6 <__sflush_r+0x9a>
 800c380:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	075a      	lsls	r2, r3, #29
 800c386:	d505      	bpl.n	800c394 <__sflush_r+0x48>
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	1ac0      	subs	r0, r0, r3
 800c38c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c38e:	b10b      	cbz	r3, 800c394 <__sflush_r+0x48>
 800c390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c392:	1ac0      	subs	r0, r0, r3
 800c394:	2300      	movs	r3, #0
 800c396:	4602      	mov	r2, r0
 800c398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c39a:	6a21      	ldr	r1, [r4, #32]
 800c39c:	4628      	mov	r0, r5
 800c39e:	47b0      	blx	r6
 800c3a0:	1c43      	adds	r3, r0, #1
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	d106      	bne.n	800c3b4 <__sflush_r+0x68>
 800c3a6:	6829      	ldr	r1, [r5, #0]
 800c3a8:	291d      	cmp	r1, #29
 800c3aa:	d82b      	bhi.n	800c404 <__sflush_r+0xb8>
 800c3ac:	4a29      	ldr	r2, [pc, #164]	; (800c454 <__sflush_r+0x108>)
 800c3ae:	410a      	asrs	r2, r1
 800c3b0:	07d6      	lsls	r6, r2, #31
 800c3b2:	d427      	bmi.n	800c404 <__sflush_r+0xb8>
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	6062      	str	r2, [r4, #4]
 800c3b8:	04d9      	lsls	r1, r3, #19
 800c3ba:	6922      	ldr	r2, [r4, #16]
 800c3bc:	6022      	str	r2, [r4, #0]
 800c3be:	d504      	bpl.n	800c3ca <__sflush_r+0x7e>
 800c3c0:	1c42      	adds	r2, r0, #1
 800c3c2:	d101      	bne.n	800c3c8 <__sflush_r+0x7c>
 800c3c4:	682b      	ldr	r3, [r5, #0]
 800c3c6:	b903      	cbnz	r3, 800c3ca <__sflush_r+0x7e>
 800c3c8:	6560      	str	r0, [r4, #84]	; 0x54
 800c3ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3cc:	602f      	str	r7, [r5, #0]
 800c3ce:	2900      	cmp	r1, #0
 800c3d0:	d0c9      	beq.n	800c366 <__sflush_r+0x1a>
 800c3d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3d6:	4299      	cmp	r1, r3
 800c3d8:	d002      	beq.n	800c3e0 <__sflush_r+0x94>
 800c3da:	4628      	mov	r0, r5
 800c3dc:	f7fe fdee 	bl	800afbc <_free_r>
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	6360      	str	r0, [r4, #52]	; 0x34
 800c3e4:	e7c0      	b.n	800c368 <__sflush_r+0x1c>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	47b0      	blx	r6
 800c3ec:	1c41      	adds	r1, r0, #1
 800c3ee:	d1c8      	bne.n	800c382 <__sflush_r+0x36>
 800c3f0:	682b      	ldr	r3, [r5, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0c5      	beq.n	800c382 <__sflush_r+0x36>
 800c3f6:	2b1d      	cmp	r3, #29
 800c3f8:	d001      	beq.n	800c3fe <__sflush_r+0xb2>
 800c3fa:	2b16      	cmp	r3, #22
 800c3fc:	d101      	bne.n	800c402 <__sflush_r+0xb6>
 800c3fe:	602f      	str	r7, [r5, #0]
 800c400:	e7b1      	b.n	800c366 <__sflush_r+0x1a>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c408:	81a3      	strh	r3, [r4, #12]
 800c40a:	e7ad      	b.n	800c368 <__sflush_r+0x1c>
 800c40c:	690f      	ldr	r7, [r1, #16]
 800c40e:	2f00      	cmp	r7, #0
 800c410:	d0a9      	beq.n	800c366 <__sflush_r+0x1a>
 800c412:	0793      	lsls	r3, r2, #30
 800c414:	680e      	ldr	r6, [r1, #0]
 800c416:	bf08      	it	eq
 800c418:	694b      	ldreq	r3, [r1, #20]
 800c41a:	600f      	str	r7, [r1, #0]
 800c41c:	bf18      	it	ne
 800c41e:	2300      	movne	r3, #0
 800c420:	eba6 0807 	sub.w	r8, r6, r7
 800c424:	608b      	str	r3, [r1, #8]
 800c426:	f1b8 0f00 	cmp.w	r8, #0
 800c42a:	dd9c      	ble.n	800c366 <__sflush_r+0x1a>
 800c42c:	6a21      	ldr	r1, [r4, #32]
 800c42e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c430:	4643      	mov	r3, r8
 800c432:	463a      	mov	r2, r7
 800c434:	4628      	mov	r0, r5
 800c436:	47b0      	blx	r6
 800c438:	2800      	cmp	r0, #0
 800c43a:	dc06      	bgt.n	800c44a <__sflush_r+0xfe>
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c442:	81a3      	strh	r3, [r4, #12]
 800c444:	f04f 30ff 	mov.w	r0, #4294967295
 800c448:	e78e      	b.n	800c368 <__sflush_r+0x1c>
 800c44a:	4407      	add	r7, r0
 800c44c:	eba8 0800 	sub.w	r8, r8, r0
 800c450:	e7e9      	b.n	800c426 <__sflush_r+0xda>
 800c452:	bf00      	nop
 800c454:	dfbffffe 	.word	0xdfbffffe

0800c458 <_fflush_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	690b      	ldr	r3, [r1, #16]
 800c45c:	4605      	mov	r5, r0
 800c45e:	460c      	mov	r4, r1
 800c460:	b913      	cbnz	r3, 800c468 <_fflush_r+0x10>
 800c462:	2500      	movs	r5, #0
 800c464:	4628      	mov	r0, r5
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	b118      	cbz	r0, 800c472 <_fflush_r+0x1a>
 800c46a:	6a03      	ldr	r3, [r0, #32]
 800c46c:	b90b      	cbnz	r3, 800c472 <_fflush_r+0x1a>
 800c46e:	f7fd fd07 	bl	8009e80 <__sinit>
 800c472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d0f3      	beq.n	800c462 <_fflush_r+0xa>
 800c47a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c47c:	07d0      	lsls	r0, r2, #31
 800c47e:	d404      	bmi.n	800c48a <_fflush_r+0x32>
 800c480:	0599      	lsls	r1, r3, #22
 800c482:	d402      	bmi.n	800c48a <_fflush_r+0x32>
 800c484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c486:	f7fd feda 	bl	800a23e <__retarget_lock_acquire_recursive>
 800c48a:	4628      	mov	r0, r5
 800c48c:	4621      	mov	r1, r4
 800c48e:	f7ff ff5d 	bl	800c34c <__sflush_r>
 800c492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c494:	07da      	lsls	r2, r3, #31
 800c496:	4605      	mov	r5, r0
 800c498:	d4e4      	bmi.n	800c464 <_fflush_r+0xc>
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	059b      	lsls	r3, r3, #22
 800c49e:	d4e1      	bmi.n	800c464 <_fflush_r+0xc>
 800c4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4a2:	f7fd fecd 	bl	800a240 <__retarget_lock_release_recursive>
 800c4a6:	e7dd      	b.n	800c464 <_fflush_r+0xc>

0800c4a8 <fiprintf>:
 800c4a8:	b40e      	push	{r1, r2, r3}
 800c4aa:	b503      	push	{r0, r1, lr}
 800c4ac:	4601      	mov	r1, r0
 800c4ae:	ab03      	add	r3, sp, #12
 800c4b0:	4805      	ldr	r0, [pc, #20]	; (800c4c8 <fiprintf+0x20>)
 800c4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b6:	6800      	ldr	r0, [r0, #0]
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	f000 f897 	bl	800c5ec <_vfiprintf_r>
 800c4be:	b002      	add	sp, #8
 800c4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4c4:	b003      	add	sp, #12
 800c4c6:	4770      	bx	lr
 800c4c8:	200001e0 	.word	0x200001e0

0800c4cc <memmove>:
 800c4cc:	4288      	cmp	r0, r1
 800c4ce:	b510      	push	{r4, lr}
 800c4d0:	eb01 0402 	add.w	r4, r1, r2
 800c4d4:	d902      	bls.n	800c4dc <memmove+0x10>
 800c4d6:	4284      	cmp	r4, r0
 800c4d8:	4623      	mov	r3, r4
 800c4da:	d807      	bhi.n	800c4ec <memmove+0x20>
 800c4dc:	1e43      	subs	r3, r0, #1
 800c4de:	42a1      	cmp	r1, r4
 800c4e0:	d008      	beq.n	800c4f4 <memmove+0x28>
 800c4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4ea:	e7f8      	b.n	800c4de <memmove+0x12>
 800c4ec:	4402      	add	r2, r0
 800c4ee:	4601      	mov	r1, r0
 800c4f0:	428a      	cmp	r2, r1
 800c4f2:	d100      	bne.n	800c4f6 <memmove+0x2a>
 800c4f4:	bd10      	pop	{r4, pc}
 800c4f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4fe:	e7f7      	b.n	800c4f0 <memmove+0x24>

0800c500 <abort>:
 800c500:	b508      	push	{r3, lr}
 800c502:	2006      	movs	r0, #6
 800c504:	f000 fa4a 	bl	800c99c <raise>
 800c508:	2001      	movs	r0, #1
 800c50a:	f7f7 fc3b 	bl	8003d84 <_exit>

0800c50e <_calloc_r>:
 800c50e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c510:	fba1 2402 	umull	r2, r4, r1, r2
 800c514:	b94c      	cbnz	r4, 800c52a <_calloc_r+0x1c>
 800c516:	4611      	mov	r1, r2
 800c518:	9201      	str	r2, [sp, #4]
 800c51a:	f7fb fe1d 	bl	8008158 <_malloc_r>
 800c51e:	9a01      	ldr	r2, [sp, #4]
 800c520:	4605      	mov	r5, r0
 800c522:	b930      	cbnz	r0, 800c532 <_calloc_r+0x24>
 800c524:	4628      	mov	r0, r5
 800c526:	b003      	add	sp, #12
 800c528:	bd30      	pop	{r4, r5, pc}
 800c52a:	220c      	movs	r2, #12
 800c52c:	6002      	str	r2, [r0, #0]
 800c52e:	2500      	movs	r5, #0
 800c530:	e7f8      	b.n	800c524 <_calloc_r+0x16>
 800c532:	4621      	mov	r1, r4
 800c534:	f7fd fd71 	bl	800a01a <memset>
 800c538:	e7f4      	b.n	800c524 <_calloc_r+0x16>

0800c53a <_realloc_r>:
 800c53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53e:	4680      	mov	r8, r0
 800c540:	4614      	mov	r4, r2
 800c542:	460e      	mov	r6, r1
 800c544:	b921      	cbnz	r1, 800c550 <_realloc_r+0x16>
 800c546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c54a:	4611      	mov	r1, r2
 800c54c:	f7fb be04 	b.w	8008158 <_malloc_r>
 800c550:	b92a      	cbnz	r2, 800c55e <_realloc_r+0x24>
 800c552:	f7fe fd33 	bl	800afbc <_free_r>
 800c556:	4625      	mov	r5, r4
 800c558:	4628      	mov	r0, r5
 800c55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c55e:	f000 fa39 	bl	800c9d4 <_malloc_usable_size_r>
 800c562:	4284      	cmp	r4, r0
 800c564:	4607      	mov	r7, r0
 800c566:	d802      	bhi.n	800c56e <_realloc_r+0x34>
 800c568:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c56c:	d812      	bhi.n	800c594 <_realloc_r+0x5a>
 800c56e:	4621      	mov	r1, r4
 800c570:	4640      	mov	r0, r8
 800c572:	f7fb fdf1 	bl	8008158 <_malloc_r>
 800c576:	4605      	mov	r5, r0
 800c578:	2800      	cmp	r0, #0
 800c57a:	d0ed      	beq.n	800c558 <_realloc_r+0x1e>
 800c57c:	42bc      	cmp	r4, r7
 800c57e:	4622      	mov	r2, r4
 800c580:	4631      	mov	r1, r6
 800c582:	bf28      	it	cs
 800c584:	463a      	movcs	r2, r7
 800c586:	f7fd fe64 	bl	800a252 <memcpy>
 800c58a:	4631      	mov	r1, r6
 800c58c:	4640      	mov	r0, r8
 800c58e:	f7fe fd15 	bl	800afbc <_free_r>
 800c592:	e7e1      	b.n	800c558 <_realloc_r+0x1e>
 800c594:	4635      	mov	r5, r6
 800c596:	e7df      	b.n	800c558 <_realloc_r+0x1e>

0800c598 <__sfputc_r>:
 800c598:	6893      	ldr	r3, [r2, #8]
 800c59a:	3b01      	subs	r3, #1
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	b410      	push	{r4}
 800c5a0:	6093      	str	r3, [r2, #8]
 800c5a2:	da08      	bge.n	800c5b6 <__sfputc_r+0x1e>
 800c5a4:	6994      	ldr	r4, [r2, #24]
 800c5a6:	42a3      	cmp	r3, r4
 800c5a8:	db01      	blt.n	800c5ae <__sfputc_r+0x16>
 800c5aa:	290a      	cmp	r1, #10
 800c5ac:	d103      	bne.n	800c5b6 <__sfputc_r+0x1e>
 800c5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5b2:	f000 b935 	b.w	800c820 <__swbuf_r>
 800c5b6:	6813      	ldr	r3, [r2, #0]
 800c5b8:	1c58      	adds	r0, r3, #1
 800c5ba:	6010      	str	r0, [r2, #0]
 800c5bc:	7019      	strb	r1, [r3, #0]
 800c5be:	4608      	mov	r0, r1
 800c5c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <__sfputs_r>:
 800c5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	460f      	mov	r7, r1
 800c5cc:	4614      	mov	r4, r2
 800c5ce:	18d5      	adds	r5, r2, r3
 800c5d0:	42ac      	cmp	r4, r5
 800c5d2:	d101      	bne.n	800c5d8 <__sfputs_r+0x12>
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	e007      	b.n	800c5e8 <__sfputs_r+0x22>
 800c5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5dc:	463a      	mov	r2, r7
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7ff ffda 	bl	800c598 <__sfputc_r>
 800c5e4:	1c43      	adds	r3, r0, #1
 800c5e6:	d1f3      	bne.n	800c5d0 <__sfputs_r+0xa>
 800c5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5ec <_vfiprintf_r>:
 800c5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f0:	460d      	mov	r5, r1
 800c5f2:	b09d      	sub	sp, #116	; 0x74
 800c5f4:	4614      	mov	r4, r2
 800c5f6:	4698      	mov	r8, r3
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	b118      	cbz	r0, 800c604 <_vfiprintf_r+0x18>
 800c5fc:	6a03      	ldr	r3, [r0, #32]
 800c5fe:	b90b      	cbnz	r3, 800c604 <_vfiprintf_r+0x18>
 800c600:	f7fd fc3e 	bl	8009e80 <__sinit>
 800c604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c606:	07d9      	lsls	r1, r3, #31
 800c608:	d405      	bmi.n	800c616 <_vfiprintf_r+0x2a>
 800c60a:	89ab      	ldrh	r3, [r5, #12]
 800c60c:	059a      	lsls	r2, r3, #22
 800c60e:	d402      	bmi.n	800c616 <_vfiprintf_r+0x2a>
 800c610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c612:	f7fd fe14 	bl	800a23e <__retarget_lock_acquire_recursive>
 800c616:	89ab      	ldrh	r3, [r5, #12]
 800c618:	071b      	lsls	r3, r3, #28
 800c61a:	d501      	bpl.n	800c620 <_vfiprintf_r+0x34>
 800c61c:	692b      	ldr	r3, [r5, #16]
 800c61e:	b99b      	cbnz	r3, 800c648 <_vfiprintf_r+0x5c>
 800c620:	4629      	mov	r1, r5
 800c622:	4630      	mov	r0, r6
 800c624:	f000 f93a 	bl	800c89c <__swsetup_r>
 800c628:	b170      	cbz	r0, 800c648 <_vfiprintf_r+0x5c>
 800c62a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c62c:	07dc      	lsls	r4, r3, #31
 800c62e:	d504      	bpl.n	800c63a <_vfiprintf_r+0x4e>
 800c630:	f04f 30ff 	mov.w	r0, #4294967295
 800c634:	b01d      	add	sp, #116	; 0x74
 800c636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63a:	89ab      	ldrh	r3, [r5, #12]
 800c63c:	0598      	lsls	r0, r3, #22
 800c63e:	d4f7      	bmi.n	800c630 <_vfiprintf_r+0x44>
 800c640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c642:	f7fd fdfd 	bl	800a240 <__retarget_lock_release_recursive>
 800c646:	e7f3      	b.n	800c630 <_vfiprintf_r+0x44>
 800c648:	2300      	movs	r3, #0
 800c64a:	9309      	str	r3, [sp, #36]	; 0x24
 800c64c:	2320      	movs	r3, #32
 800c64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c652:	f8cd 800c 	str.w	r8, [sp, #12]
 800c656:	2330      	movs	r3, #48	; 0x30
 800c658:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c80c <_vfiprintf_r+0x220>
 800c65c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c660:	f04f 0901 	mov.w	r9, #1
 800c664:	4623      	mov	r3, r4
 800c666:	469a      	mov	sl, r3
 800c668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c66c:	b10a      	cbz	r2, 800c672 <_vfiprintf_r+0x86>
 800c66e:	2a25      	cmp	r2, #37	; 0x25
 800c670:	d1f9      	bne.n	800c666 <_vfiprintf_r+0x7a>
 800c672:	ebba 0b04 	subs.w	fp, sl, r4
 800c676:	d00b      	beq.n	800c690 <_vfiprintf_r+0xa4>
 800c678:	465b      	mov	r3, fp
 800c67a:	4622      	mov	r2, r4
 800c67c:	4629      	mov	r1, r5
 800c67e:	4630      	mov	r0, r6
 800c680:	f7ff ffa1 	bl	800c5c6 <__sfputs_r>
 800c684:	3001      	adds	r0, #1
 800c686:	f000 80a9 	beq.w	800c7dc <_vfiprintf_r+0x1f0>
 800c68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c68c:	445a      	add	r2, fp
 800c68e:	9209      	str	r2, [sp, #36]	; 0x24
 800c690:	f89a 3000 	ldrb.w	r3, [sl]
 800c694:	2b00      	cmp	r3, #0
 800c696:	f000 80a1 	beq.w	800c7dc <_vfiprintf_r+0x1f0>
 800c69a:	2300      	movs	r3, #0
 800c69c:	f04f 32ff 	mov.w	r2, #4294967295
 800c6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6a4:	f10a 0a01 	add.w	sl, sl, #1
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	9307      	str	r3, [sp, #28]
 800c6ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6b0:	931a      	str	r3, [sp, #104]	; 0x68
 800c6b2:	4654      	mov	r4, sl
 800c6b4:	2205      	movs	r2, #5
 800c6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ba:	4854      	ldr	r0, [pc, #336]	; (800c80c <_vfiprintf_r+0x220>)
 800c6bc:	f7f3 fd88 	bl	80001d0 <memchr>
 800c6c0:	9a04      	ldr	r2, [sp, #16]
 800c6c2:	b9d8      	cbnz	r0, 800c6fc <_vfiprintf_r+0x110>
 800c6c4:	06d1      	lsls	r1, r2, #27
 800c6c6:	bf44      	itt	mi
 800c6c8:	2320      	movmi	r3, #32
 800c6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ce:	0713      	lsls	r3, r2, #28
 800c6d0:	bf44      	itt	mi
 800c6d2:	232b      	movmi	r3, #43	; 0x2b
 800c6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c6de:	d015      	beq.n	800c70c <_vfiprintf_r+0x120>
 800c6e0:	9a07      	ldr	r2, [sp, #28]
 800c6e2:	4654      	mov	r4, sl
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	f04f 0c0a 	mov.w	ip, #10
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6f0:	3b30      	subs	r3, #48	; 0x30
 800c6f2:	2b09      	cmp	r3, #9
 800c6f4:	d94d      	bls.n	800c792 <_vfiprintf_r+0x1a6>
 800c6f6:	b1b0      	cbz	r0, 800c726 <_vfiprintf_r+0x13a>
 800c6f8:	9207      	str	r2, [sp, #28]
 800c6fa:	e014      	b.n	800c726 <_vfiprintf_r+0x13a>
 800c6fc:	eba0 0308 	sub.w	r3, r0, r8
 800c700:	fa09 f303 	lsl.w	r3, r9, r3
 800c704:	4313      	orrs	r3, r2
 800c706:	9304      	str	r3, [sp, #16]
 800c708:	46a2      	mov	sl, r4
 800c70a:	e7d2      	b.n	800c6b2 <_vfiprintf_r+0xc6>
 800c70c:	9b03      	ldr	r3, [sp, #12]
 800c70e:	1d19      	adds	r1, r3, #4
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	9103      	str	r1, [sp, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	bfbb      	ittet	lt
 800c718:	425b      	neglt	r3, r3
 800c71a:	f042 0202 	orrlt.w	r2, r2, #2
 800c71e:	9307      	strge	r3, [sp, #28]
 800c720:	9307      	strlt	r3, [sp, #28]
 800c722:	bfb8      	it	lt
 800c724:	9204      	strlt	r2, [sp, #16]
 800c726:	7823      	ldrb	r3, [r4, #0]
 800c728:	2b2e      	cmp	r3, #46	; 0x2e
 800c72a:	d10c      	bne.n	800c746 <_vfiprintf_r+0x15a>
 800c72c:	7863      	ldrb	r3, [r4, #1]
 800c72e:	2b2a      	cmp	r3, #42	; 0x2a
 800c730:	d134      	bne.n	800c79c <_vfiprintf_r+0x1b0>
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	1d1a      	adds	r2, r3, #4
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	9203      	str	r2, [sp, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	bfb8      	it	lt
 800c73e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c742:	3402      	adds	r4, #2
 800c744:	9305      	str	r3, [sp, #20]
 800c746:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c81c <_vfiprintf_r+0x230>
 800c74a:	7821      	ldrb	r1, [r4, #0]
 800c74c:	2203      	movs	r2, #3
 800c74e:	4650      	mov	r0, sl
 800c750:	f7f3 fd3e 	bl	80001d0 <memchr>
 800c754:	b138      	cbz	r0, 800c766 <_vfiprintf_r+0x17a>
 800c756:	9b04      	ldr	r3, [sp, #16]
 800c758:	eba0 000a 	sub.w	r0, r0, sl
 800c75c:	2240      	movs	r2, #64	; 0x40
 800c75e:	4082      	lsls	r2, r0
 800c760:	4313      	orrs	r3, r2
 800c762:	3401      	adds	r4, #1
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c76a:	4829      	ldr	r0, [pc, #164]	; (800c810 <_vfiprintf_r+0x224>)
 800c76c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c770:	2206      	movs	r2, #6
 800c772:	f7f3 fd2d 	bl	80001d0 <memchr>
 800c776:	2800      	cmp	r0, #0
 800c778:	d03f      	beq.n	800c7fa <_vfiprintf_r+0x20e>
 800c77a:	4b26      	ldr	r3, [pc, #152]	; (800c814 <_vfiprintf_r+0x228>)
 800c77c:	bb1b      	cbnz	r3, 800c7c6 <_vfiprintf_r+0x1da>
 800c77e:	9b03      	ldr	r3, [sp, #12]
 800c780:	3307      	adds	r3, #7
 800c782:	f023 0307 	bic.w	r3, r3, #7
 800c786:	3308      	adds	r3, #8
 800c788:	9303      	str	r3, [sp, #12]
 800c78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c78c:	443b      	add	r3, r7
 800c78e:	9309      	str	r3, [sp, #36]	; 0x24
 800c790:	e768      	b.n	800c664 <_vfiprintf_r+0x78>
 800c792:	fb0c 3202 	mla	r2, ip, r2, r3
 800c796:	460c      	mov	r4, r1
 800c798:	2001      	movs	r0, #1
 800c79a:	e7a6      	b.n	800c6ea <_vfiprintf_r+0xfe>
 800c79c:	2300      	movs	r3, #0
 800c79e:	3401      	adds	r4, #1
 800c7a0:	9305      	str	r3, [sp, #20]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	f04f 0c0a 	mov.w	ip, #10
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ae:	3a30      	subs	r2, #48	; 0x30
 800c7b0:	2a09      	cmp	r2, #9
 800c7b2:	d903      	bls.n	800c7bc <_vfiprintf_r+0x1d0>
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d0c6      	beq.n	800c746 <_vfiprintf_r+0x15a>
 800c7b8:	9105      	str	r1, [sp, #20]
 800c7ba:	e7c4      	b.n	800c746 <_vfiprintf_r+0x15a>
 800c7bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	e7f0      	b.n	800c7a8 <_vfiprintf_r+0x1bc>
 800c7c6:	ab03      	add	r3, sp, #12
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	462a      	mov	r2, r5
 800c7cc:	4b12      	ldr	r3, [pc, #72]	; (800c818 <_vfiprintf_r+0x22c>)
 800c7ce:	a904      	add	r1, sp, #16
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f7fc fcf3 	bl	80091bc <_printf_float>
 800c7d6:	4607      	mov	r7, r0
 800c7d8:	1c78      	adds	r0, r7, #1
 800c7da:	d1d6      	bne.n	800c78a <_vfiprintf_r+0x19e>
 800c7dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7de:	07d9      	lsls	r1, r3, #31
 800c7e0:	d405      	bmi.n	800c7ee <_vfiprintf_r+0x202>
 800c7e2:	89ab      	ldrh	r3, [r5, #12]
 800c7e4:	059a      	lsls	r2, r3, #22
 800c7e6:	d402      	bmi.n	800c7ee <_vfiprintf_r+0x202>
 800c7e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ea:	f7fd fd29 	bl	800a240 <__retarget_lock_release_recursive>
 800c7ee:	89ab      	ldrh	r3, [r5, #12]
 800c7f0:	065b      	lsls	r3, r3, #25
 800c7f2:	f53f af1d 	bmi.w	800c630 <_vfiprintf_r+0x44>
 800c7f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7f8:	e71c      	b.n	800c634 <_vfiprintf_r+0x48>
 800c7fa:	ab03      	add	r3, sp, #12
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	462a      	mov	r2, r5
 800c800:	4b05      	ldr	r3, [pc, #20]	; (800c818 <_vfiprintf_r+0x22c>)
 800c802:	a904      	add	r1, sp, #16
 800c804:	4630      	mov	r0, r6
 800c806:	f7fc ff7d 	bl	8009704 <_printf_i>
 800c80a:	e7e4      	b.n	800c7d6 <_vfiprintf_r+0x1ea>
 800c80c:	0800f5a4 	.word	0x0800f5a4
 800c810:	0800f5ae 	.word	0x0800f5ae
 800c814:	080091bd 	.word	0x080091bd
 800c818:	0800c5c7 	.word	0x0800c5c7
 800c81c:	0800f5aa 	.word	0x0800f5aa

0800c820 <__swbuf_r>:
 800c820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c822:	460e      	mov	r6, r1
 800c824:	4614      	mov	r4, r2
 800c826:	4605      	mov	r5, r0
 800c828:	b118      	cbz	r0, 800c832 <__swbuf_r+0x12>
 800c82a:	6a03      	ldr	r3, [r0, #32]
 800c82c:	b90b      	cbnz	r3, 800c832 <__swbuf_r+0x12>
 800c82e:	f7fd fb27 	bl	8009e80 <__sinit>
 800c832:	69a3      	ldr	r3, [r4, #24]
 800c834:	60a3      	str	r3, [r4, #8]
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	071a      	lsls	r2, r3, #28
 800c83a:	d525      	bpl.n	800c888 <__swbuf_r+0x68>
 800c83c:	6923      	ldr	r3, [r4, #16]
 800c83e:	b31b      	cbz	r3, 800c888 <__swbuf_r+0x68>
 800c840:	6823      	ldr	r3, [r4, #0]
 800c842:	6922      	ldr	r2, [r4, #16]
 800c844:	1a98      	subs	r0, r3, r2
 800c846:	6963      	ldr	r3, [r4, #20]
 800c848:	b2f6      	uxtb	r6, r6
 800c84a:	4283      	cmp	r3, r0
 800c84c:	4637      	mov	r7, r6
 800c84e:	dc04      	bgt.n	800c85a <__swbuf_r+0x3a>
 800c850:	4621      	mov	r1, r4
 800c852:	4628      	mov	r0, r5
 800c854:	f7ff fe00 	bl	800c458 <_fflush_r>
 800c858:	b9e0      	cbnz	r0, 800c894 <__swbuf_r+0x74>
 800c85a:	68a3      	ldr	r3, [r4, #8]
 800c85c:	3b01      	subs	r3, #1
 800c85e:	60a3      	str	r3, [r4, #8]
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	1c5a      	adds	r2, r3, #1
 800c864:	6022      	str	r2, [r4, #0]
 800c866:	701e      	strb	r6, [r3, #0]
 800c868:	6962      	ldr	r2, [r4, #20]
 800c86a:	1c43      	adds	r3, r0, #1
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d004      	beq.n	800c87a <__swbuf_r+0x5a>
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	07db      	lsls	r3, r3, #31
 800c874:	d506      	bpl.n	800c884 <__swbuf_r+0x64>
 800c876:	2e0a      	cmp	r6, #10
 800c878:	d104      	bne.n	800c884 <__swbuf_r+0x64>
 800c87a:	4621      	mov	r1, r4
 800c87c:	4628      	mov	r0, r5
 800c87e:	f7ff fdeb 	bl	800c458 <_fflush_r>
 800c882:	b938      	cbnz	r0, 800c894 <__swbuf_r+0x74>
 800c884:	4638      	mov	r0, r7
 800c886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c888:	4621      	mov	r1, r4
 800c88a:	4628      	mov	r0, r5
 800c88c:	f000 f806 	bl	800c89c <__swsetup_r>
 800c890:	2800      	cmp	r0, #0
 800c892:	d0d5      	beq.n	800c840 <__swbuf_r+0x20>
 800c894:	f04f 37ff 	mov.w	r7, #4294967295
 800c898:	e7f4      	b.n	800c884 <__swbuf_r+0x64>
	...

0800c89c <__swsetup_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	4b2a      	ldr	r3, [pc, #168]	; (800c948 <__swsetup_r+0xac>)
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	6818      	ldr	r0, [r3, #0]
 800c8a4:	460c      	mov	r4, r1
 800c8a6:	b118      	cbz	r0, 800c8b0 <__swsetup_r+0x14>
 800c8a8:	6a03      	ldr	r3, [r0, #32]
 800c8aa:	b90b      	cbnz	r3, 800c8b0 <__swsetup_r+0x14>
 800c8ac:	f7fd fae8 	bl	8009e80 <__sinit>
 800c8b0:	89a3      	ldrh	r3, [r4, #12]
 800c8b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8b6:	0718      	lsls	r0, r3, #28
 800c8b8:	d422      	bmi.n	800c900 <__swsetup_r+0x64>
 800c8ba:	06d9      	lsls	r1, r3, #27
 800c8bc:	d407      	bmi.n	800c8ce <__swsetup_r+0x32>
 800c8be:	2309      	movs	r3, #9
 800c8c0:	602b      	str	r3, [r5, #0]
 800c8c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8c6:	81a3      	strh	r3, [r4, #12]
 800c8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8cc:	e034      	b.n	800c938 <__swsetup_r+0x9c>
 800c8ce:	0758      	lsls	r0, r3, #29
 800c8d0:	d512      	bpl.n	800c8f8 <__swsetup_r+0x5c>
 800c8d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8d4:	b141      	cbz	r1, 800c8e8 <__swsetup_r+0x4c>
 800c8d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8da:	4299      	cmp	r1, r3
 800c8dc:	d002      	beq.n	800c8e4 <__swsetup_r+0x48>
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f7fe fb6c 	bl	800afbc <_free_r>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	6363      	str	r3, [r4, #52]	; 0x34
 800c8e8:	89a3      	ldrh	r3, [r4, #12]
 800c8ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8ee:	81a3      	strh	r3, [r4, #12]
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	6063      	str	r3, [r4, #4]
 800c8f4:	6923      	ldr	r3, [r4, #16]
 800c8f6:	6023      	str	r3, [r4, #0]
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	f043 0308 	orr.w	r3, r3, #8
 800c8fe:	81a3      	strh	r3, [r4, #12]
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	b94b      	cbnz	r3, 800c918 <__swsetup_r+0x7c>
 800c904:	89a3      	ldrh	r3, [r4, #12]
 800c906:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c90a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c90e:	d003      	beq.n	800c918 <__swsetup_r+0x7c>
 800c910:	4621      	mov	r1, r4
 800c912:	4628      	mov	r0, r5
 800c914:	f000 f88c 	bl	800ca30 <__smakebuf_r>
 800c918:	89a0      	ldrh	r0, [r4, #12]
 800c91a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c91e:	f010 0301 	ands.w	r3, r0, #1
 800c922:	d00a      	beq.n	800c93a <__swsetup_r+0x9e>
 800c924:	2300      	movs	r3, #0
 800c926:	60a3      	str	r3, [r4, #8]
 800c928:	6963      	ldr	r3, [r4, #20]
 800c92a:	425b      	negs	r3, r3
 800c92c:	61a3      	str	r3, [r4, #24]
 800c92e:	6923      	ldr	r3, [r4, #16]
 800c930:	b943      	cbnz	r3, 800c944 <__swsetup_r+0xa8>
 800c932:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c936:	d1c4      	bne.n	800c8c2 <__swsetup_r+0x26>
 800c938:	bd38      	pop	{r3, r4, r5, pc}
 800c93a:	0781      	lsls	r1, r0, #30
 800c93c:	bf58      	it	pl
 800c93e:	6963      	ldrpl	r3, [r4, #20]
 800c940:	60a3      	str	r3, [r4, #8]
 800c942:	e7f4      	b.n	800c92e <__swsetup_r+0x92>
 800c944:	2000      	movs	r0, #0
 800c946:	e7f7      	b.n	800c938 <__swsetup_r+0x9c>
 800c948:	200001e0 	.word	0x200001e0

0800c94c <_raise_r>:
 800c94c:	291f      	cmp	r1, #31
 800c94e:	b538      	push	{r3, r4, r5, lr}
 800c950:	4604      	mov	r4, r0
 800c952:	460d      	mov	r5, r1
 800c954:	d904      	bls.n	800c960 <_raise_r+0x14>
 800c956:	2316      	movs	r3, #22
 800c958:	6003      	str	r3, [r0, #0]
 800c95a:	f04f 30ff 	mov.w	r0, #4294967295
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c962:	b112      	cbz	r2, 800c96a <_raise_r+0x1e>
 800c964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c968:	b94b      	cbnz	r3, 800c97e <_raise_r+0x32>
 800c96a:	4620      	mov	r0, r4
 800c96c:	f000 f830 	bl	800c9d0 <_getpid_r>
 800c970:	462a      	mov	r2, r5
 800c972:	4601      	mov	r1, r0
 800c974:	4620      	mov	r0, r4
 800c976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c97a:	f000 b817 	b.w	800c9ac <_kill_r>
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d00a      	beq.n	800c998 <_raise_r+0x4c>
 800c982:	1c59      	adds	r1, r3, #1
 800c984:	d103      	bne.n	800c98e <_raise_r+0x42>
 800c986:	2316      	movs	r3, #22
 800c988:	6003      	str	r3, [r0, #0]
 800c98a:	2001      	movs	r0, #1
 800c98c:	e7e7      	b.n	800c95e <_raise_r+0x12>
 800c98e:	2400      	movs	r4, #0
 800c990:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c994:	4628      	mov	r0, r5
 800c996:	4798      	blx	r3
 800c998:	2000      	movs	r0, #0
 800c99a:	e7e0      	b.n	800c95e <_raise_r+0x12>

0800c99c <raise>:
 800c99c:	4b02      	ldr	r3, [pc, #8]	; (800c9a8 <raise+0xc>)
 800c99e:	4601      	mov	r1, r0
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	f7ff bfd3 	b.w	800c94c <_raise_r>
 800c9a6:	bf00      	nop
 800c9a8:	200001e0 	.word	0x200001e0

0800c9ac <_kill_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	4d07      	ldr	r5, [pc, #28]	; (800c9cc <_kill_r+0x20>)
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	4608      	mov	r0, r1
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	602b      	str	r3, [r5, #0]
 800c9ba:	f7f7 f9d3 	bl	8003d64 <_kill>
 800c9be:	1c43      	adds	r3, r0, #1
 800c9c0:	d102      	bne.n	800c9c8 <_kill_r+0x1c>
 800c9c2:	682b      	ldr	r3, [r5, #0]
 800c9c4:	b103      	cbz	r3, 800c9c8 <_kill_r+0x1c>
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ca:	bf00      	nop
 800c9cc:	20000c10 	.word	0x20000c10

0800c9d0 <_getpid_r>:
 800c9d0:	f7f7 b9c0 	b.w	8003d54 <_getpid>

0800c9d4 <_malloc_usable_size_r>:
 800c9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9d8:	1f18      	subs	r0, r3, #4
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	bfbc      	itt	lt
 800c9de:	580b      	ldrlt	r3, [r1, r0]
 800c9e0:	18c0      	addlt	r0, r0, r3
 800c9e2:	4770      	bx	lr

0800c9e4 <__swhatbuf_r>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ec:	2900      	cmp	r1, #0
 800c9ee:	b096      	sub	sp, #88	; 0x58
 800c9f0:	4615      	mov	r5, r2
 800c9f2:	461e      	mov	r6, r3
 800c9f4:	da0d      	bge.n	800ca12 <__swhatbuf_r+0x2e>
 800c9f6:	89a3      	ldrh	r3, [r4, #12]
 800c9f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c9fc:	f04f 0100 	mov.w	r1, #0
 800ca00:	bf0c      	ite	eq
 800ca02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ca06:	2340      	movne	r3, #64	; 0x40
 800ca08:	2000      	movs	r0, #0
 800ca0a:	6031      	str	r1, [r6, #0]
 800ca0c:	602b      	str	r3, [r5, #0]
 800ca0e:	b016      	add	sp, #88	; 0x58
 800ca10:	bd70      	pop	{r4, r5, r6, pc}
 800ca12:	466a      	mov	r2, sp
 800ca14:	f000 f848 	bl	800caa8 <_fstat_r>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	dbec      	blt.n	800c9f6 <__swhatbuf_r+0x12>
 800ca1c:	9901      	ldr	r1, [sp, #4]
 800ca1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ca22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ca26:	4259      	negs	r1, r3
 800ca28:	4159      	adcs	r1, r3
 800ca2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca2e:	e7eb      	b.n	800ca08 <__swhatbuf_r+0x24>

0800ca30 <__smakebuf_r>:
 800ca30:	898b      	ldrh	r3, [r1, #12]
 800ca32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca34:	079d      	lsls	r5, r3, #30
 800ca36:	4606      	mov	r6, r0
 800ca38:	460c      	mov	r4, r1
 800ca3a:	d507      	bpl.n	800ca4c <__smakebuf_r+0x1c>
 800ca3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca40:	6023      	str	r3, [r4, #0]
 800ca42:	6123      	str	r3, [r4, #16]
 800ca44:	2301      	movs	r3, #1
 800ca46:	6163      	str	r3, [r4, #20]
 800ca48:	b002      	add	sp, #8
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}
 800ca4c:	ab01      	add	r3, sp, #4
 800ca4e:	466a      	mov	r2, sp
 800ca50:	f7ff ffc8 	bl	800c9e4 <__swhatbuf_r>
 800ca54:	9900      	ldr	r1, [sp, #0]
 800ca56:	4605      	mov	r5, r0
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f7fb fb7d 	bl	8008158 <_malloc_r>
 800ca5e:	b948      	cbnz	r0, 800ca74 <__smakebuf_r+0x44>
 800ca60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca64:	059a      	lsls	r2, r3, #22
 800ca66:	d4ef      	bmi.n	800ca48 <__smakebuf_r+0x18>
 800ca68:	f023 0303 	bic.w	r3, r3, #3
 800ca6c:	f043 0302 	orr.w	r3, r3, #2
 800ca70:	81a3      	strh	r3, [r4, #12]
 800ca72:	e7e3      	b.n	800ca3c <__smakebuf_r+0xc>
 800ca74:	89a3      	ldrh	r3, [r4, #12]
 800ca76:	6020      	str	r0, [r4, #0]
 800ca78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca7c:	81a3      	strh	r3, [r4, #12]
 800ca7e:	9b00      	ldr	r3, [sp, #0]
 800ca80:	6163      	str	r3, [r4, #20]
 800ca82:	9b01      	ldr	r3, [sp, #4]
 800ca84:	6120      	str	r0, [r4, #16]
 800ca86:	b15b      	cbz	r3, 800caa0 <__smakebuf_r+0x70>
 800ca88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f000 f81d 	bl	800cacc <_isatty_r>
 800ca92:	b128      	cbz	r0, 800caa0 <__smakebuf_r+0x70>
 800ca94:	89a3      	ldrh	r3, [r4, #12]
 800ca96:	f023 0303 	bic.w	r3, r3, #3
 800ca9a:	f043 0301 	orr.w	r3, r3, #1
 800ca9e:	81a3      	strh	r3, [r4, #12]
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	431d      	orrs	r5, r3
 800caa4:	81a5      	strh	r5, [r4, #12]
 800caa6:	e7cf      	b.n	800ca48 <__smakebuf_r+0x18>

0800caa8 <_fstat_r>:
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4d07      	ldr	r5, [pc, #28]	; (800cac8 <_fstat_r+0x20>)
 800caac:	2300      	movs	r3, #0
 800caae:	4604      	mov	r4, r0
 800cab0:	4608      	mov	r0, r1
 800cab2:	4611      	mov	r1, r2
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	f7f7 f9b4 	bl	8003e22 <_fstat>
 800caba:	1c43      	adds	r3, r0, #1
 800cabc:	d102      	bne.n	800cac4 <_fstat_r+0x1c>
 800cabe:	682b      	ldr	r3, [r5, #0]
 800cac0:	b103      	cbz	r3, 800cac4 <_fstat_r+0x1c>
 800cac2:	6023      	str	r3, [r4, #0]
 800cac4:	bd38      	pop	{r3, r4, r5, pc}
 800cac6:	bf00      	nop
 800cac8:	20000c10 	.word	0x20000c10

0800cacc <_isatty_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4d06      	ldr	r5, [pc, #24]	; (800cae8 <_isatty_r+0x1c>)
 800cad0:	2300      	movs	r3, #0
 800cad2:	4604      	mov	r4, r0
 800cad4:	4608      	mov	r0, r1
 800cad6:	602b      	str	r3, [r5, #0]
 800cad8:	f7f7 f9b3 	bl	8003e42 <_isatty>
 800cadc:	1c43      	adds	r3, r0, #1
 800cade:	d102      	bne.n	800cae6 <_isatty_r+0x1a>
 800cae0:	682b      	ldr	r3, [r5, #0]
 800cae2:	b103      	cbz	r3, 800cae6 <_isatty_r+0x1a>
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	bd38      	pop	{r3, r4, r5, pc}
 800cae8:	20000c10 	.word	0x20000c10
 800caec:	00000000 	.word	0x00000000

0800caf0 <exp>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	ed2d 8b02 	vpush	{d8}
 800caf6:	ec55 4b10 	vmov	r4, r5, d0
 800cafa:	f000 fb01 	bl	800d100 <__ieee754_exp>
 800cafe:	eeb0 8a40 	vmov.f32	s16, s0
 800cb02:	eef0 8a60 	vmov.f32	s17, s1
 800cb06:	ec45 4b10 	vmov	d0, r4, r5
 800cb0a:	f000 f8e5 	bl	800ccd8 <finite>
 800cb0e:	b168      	cbz	r0, 800cb2c <exp+0x3c>
 800cb10:	a317      	add	r3, pc, #92	; (adr r3, 800cb70 <exp+0x80>)
 800cb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb16:	4620      	mov	r0, r4
 800cb18:	4629      	mov	r1, r5
 800cb1a:	f7f3 fffd 	bl	8000b18 <__aeabi_dcmpgt>
 800cb1e:	b160      	cbz	r0, 800cb3a <exp+0x4a>
 800cb20:	f7fd fb62 	bl	800a1e8 <__errno>
 800cb24:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800cb60 <exp+0x70>
 800cb28:	2322      	movs	r3, #34	; 0x22
 800cb2a:	6003      	str	r3, [r0, #0]
 800cb2c:	eeb0 0a48 	vmov.f32	s0, s16
 800cb30:	eef0 0a68 	vmov.f32	s1, s17
 800cb34:	ecbd 8b02 	vpop	{d8}
 800cb38:	bd38      	pop	{r3, r4, r5, pc}
 800cb3a:	a30f      	add	r3, pc, #60	; (adr r3, 800cb78 <exp+0x88>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	4620      	mov	r0, r4
 800cb42:	4629      	mov	r1, r5
 800cb44:	f7f3 ffca 	bl	8000adc <__aeabi_dcmplt>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d0ef      	beq.n	800cb2c <exp+0x3c>
 800cb4c:	f7fd fb4c 	bl	800a1e8 <__errno>
 800cb50:	2322      	movs	r3, #34	; 0x22
 800cb52:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800cb68 <exp+0x78>
 800cb56:	6003      	str	r3, [r0, #0]
 800cb58:	e7e8      	b.n	800cb2c <exp+0x3c>
 800cb5a:	bf00      	nop
 800cb5c:	f3af 8000 	nop.w
 800cb60:	00000000 	.word	0x00000000
 800cb64:	7ff00000 	.word	0x7ff00000
	...
 800cb70:	fefa39ef 	.word	0xfefa39ef
 800cb74:	40862e42 	.word	0x40862e42
 800cb78:	d52d3051 	.word	0xd52d3051
 800cb7c:	c0874910 	.word	0xc0874910

0800cb80 <cos>:
 800cb80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb82:	ec53 2b10 	vmov	r2, r3, d0
 800cb86:	4826      	ldr	r0, [pc, #152]	; (800cc20 <cos+0xa0>)
 800cb88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cb8c:	4281      	cmp	r1, r0
 800cb8e:	dc06      	bgt.n	800cb9e <cos+0x1e>
 800cb90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cc18 <cos+0x98>
 800cb94:	b005      	add	sp, #20
 800cb96:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb9a:	f000 b929 	b.w	800cdf0 <__kernel_cos>
 800cb9e:	4821      	ldr	r0, [pc, #132]	; (800cc24 <cos+0xa4>)
 800cba0:	4281      	cmp	r1, r0
 800cba2:	dd09      	ble.n	800cbb8 <cos+0x38>
 800cba4:	ee10 0a10 	vmov	r0, s0
 800cba8:	4619      	mov	r1, r3
 800cbaa:	f7f3 fb6d 	bl	8000288 <__aeabi_dsub>
 800cbae:	ec41 0b10 	vmov	d0, r0, r1
 800cbb2:	b005      	add	sp, #20
 800cbb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800cbb8:	4668      	mov	r0, sp
 800cbba:	f000 fc25 	bl	800d408 <__ieee754_rem_pio2>
 800cbbe:	f000 0003 	and.w	r0, r0, #3
 800cbc2:	2801      	cmp	r0, #1
 800cbc4:	d00b      	beq.n	800cbde <cos+0x5e>
 800cbc6:	2802      	cmp	r0, #2
 800cbc8:	d016      	beq.n	800cbf8 <cos+0x78>
 800cbca:	b9e0      	cbnz	r0, 800cc06 <cos+0x86>
 800cbcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cbd0:	ed9d 0b00 	vldr	d0, [sp]
 800cbd4:	f000 f90c 	bl	800cdf0 <__kernel_cos>
 800cbd8:	ec51 0b10 	vmov	r0, r1, d0
 800cbdc:	e7e7      	b.n	800cbae <cos+0x2e>
 800cbde:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cbe2:	ed9d 0b00 	vldr	d0, [sp]
 800cbe6:	f000 f9cb 	bl	800cf80 <__kernel_sin>
 800cbea:	ec53 2b10 	vmov	r2, r3, d0
 800cbee:	ee10 0a10 	vmov	r0, s0
 800cbf2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cbf6:	e7da      	b.n	800cbae <cos+0x2e>
 800cbf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cbfc:	ed9d 0b00 	vldr	d0, [sp]
 800cc00:	f000 f8f6 	bl	800cdf0 <__kernel_cos>
 800cc04:	e7f1      	b.n	800cbea <cos+0x6a>
 800cc06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc0a:	ed9d 0b00 	vldr	d0, [sp]
 800cc0e:	2001      	movs	r0, #1
 800cc10:	f000 f9b6 	bl	800cf80 <__kernel_sin>
 800cc14:	e7e0      	b.n	800cbd8 <cos+0x58>
 800cc16:	bf00      	nop
	...
 800cc20:	3fe921fb 	.word	0x3fe921fb
 800cc24:	7fefffff 	.word	0x7fefffff

0800cc28 <sin>:
 800cc28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc2a:	ec53 2b10 	vmov	r2, r3, d0
 800cc2e:	4828      	ldr	r0, [pc, #160]	; (800ccd0 <sin+0xa8>)
 800cc30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cc34:	4281      	cmp	r1, r0
 800cc36:	dc07      	bgt.n	800cc48 <sin+0x20>
 800cc38:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ccc8 <sin+0xa0>
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	b005      	add	sp, #20
 800cc40:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc44:	f000 b99c 	b.w	800cf80 <__kernel_sin>
 800cc48:	4822      	ldr	r0, [pc, #136]	; (800ccd4 <sin+0xac>)
 800cc4a:	4281      	cmp	r1, r0
 800cc4c:	dd09      	ble.n	800cc62 <sin+0x3a>
 800cc4e:	ee10 0a10 	vmov	r0, s0
 800cc52:	4619      	mov	r1, r3
 800cc54:	f7f3 fb18 	bl	8000288 <__aeabi_dsub>
 800cc58:	ec41 0b10 	vmov	d0, r0, r1
 800cc5c:	b005      	add	sp, #20
 800cc5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc62:	4668      	mov	r0, sp
 800cc64:	f000 fbd0 	bl	800d408 <__ieee754_rem_pio2>
 800cc68:	f000 0003 	and.w	r0, r0, #3
 800cc6c:	2801      	cmp	r0, #1
 800cc6e:	d00c      	beq.n	800cc8a <sin+0x62>
 800cc70:	2802      	cmp	r0, #2
 800cc72:	d011      	beq.n	800cc98 <sin+0x70>
 800cc74:	b9f0      	cbnz	r0, 800ccb4 <sin+0x8c>
 800cc76:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc7a:	ed9d 0b00 	vldr	d0, [sp]
 800cc7e:	2001      	movs	r0, #1
 800cc80:	f000 f97e 	bl	800cf80 <__kernel_sin>
 800cc84:	ec51 0b10 	vmov	r0, r1, d0
 800cc88:	e7e6      	b.n	800cc58 <sin+0x30>
 800cc8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc8e:	ed9d 0b00 	vldr	d0, [sp]
 800cc92:	f000 f8ad 	bl	800cdf0 <__kernel_cos>
 800cc96:	e7f5      	b.n	800cc84 <sin+0x5c>
 800cc98:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc9c:	ed9d 0b00 	vldr	d0, [sp]
 800cca0:	2001      	movs	r0, #1
 800cca2:	f000 f96d 	bl	800cf80 <__kernel_sin>
 800cca6:	ec53 2b10 	vmov	r2, r3, d0
 800ccaa:	ee10 0a10 	vmov	r0, s0
 800ccae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ccb2:	e7d1      	b.n	800cc58 <sin+0x30>
 800ccb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ccb8:	ed9d 0b00 	vldr	d0, [sp]
 800ccbc:	f000 f898 	bl	800cdf0 <__kernel_cos>
 800ccc0:	e7f1      	b.n	800cca6 <sin+0x7e>
 800ccc2:	bf00      	nop
 800ccc4:	f3af 8000 	nop.w
	...
 800ccd0:	3fe921fb 	.word	0x3fe921fb
 800ccd4:	7fefffff 	.word	0x7fefffff

0800ccd8 <finite>:
 800ccd8:	b082      	sub	sp, #8
 800ccda:	ed8d 0b00 	vstr	d0, [sp]
 800ccde:	9801      	ldr	r0, [sp, #4]
 800cce0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cce4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cce8:	0fc0      	lsrs	r0, r0, #31
 800ccea:	b002      	add	sp, #8
 800ccec:	4770      	bx	lr
	...

0800ccf0 <floor>:
 800ccf0:	ec51 0b10 	vmov	r0, r1, d0
 800ccf4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ccf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800cd00:	2e13      	cmp	r6, #19
 800cd02:	ee10 5a10 	vmov	r5, s0
 800cd06:	ee10 8a10 	vmov	r8, s0
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	dc31      	bgt.n	800cd72 <floor+0x82>
 800cd0e:	2e00      	cmp	r6, #0
 800cd10:	da14      	bge.n	800cd3c <floor+0x4c>
 800cd12:	a333      	add	r3, pc, #204	; (adr r3, 800cde0 <floor+0xf0>)
 800cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd18:	f7f3 fab8 	bl	800028c <__adddf3>
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	2300      	movs	r3, #0
 800cd20:	f7f3 fefa 	bl	8000b18 <__aeabi_dcmpgt>
 800cd24:	b138      	cbz	r0, 800cd36 <floor+0x46>
 800cd26:	2c00      	cmp	r4, #0
 800cd28:	da53      	bge.n	800cdd2 <floor+0xe2>
 800cd2a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800cd2e:	4325      	orrs	r5, r4
 800cd30:	d052      	beq.n	800cdd8 <floor+0xe8>
 800cd32:	4c2d      	ldr	r4, [pc, #180]	; (800cde8 <floor+0xf8>)
 800cd34:	2500      	movs	r5, #0
 800cd36:	4621      	mov	r1, r4
 800cd38:	4628      	mov	r0, r5
 800cd3a:	e024      	b.n	800cd86 <floor+0x96>
 800cd3c:	4f2b      	ldr	r7, [pc, #172]	; (800cdec <floor+0xfc>)
 800cd3e:	4137      	asrs	r7, r6
 800cd40:	ea01 0307 	and.w	r3, r1, r7
 800cd44:	4303      	orrs	r3, r0
 800cd46:	d01e      	beq.n	800cd86 <floor+0x96>
 800cd48:	a325      	add	r3, pc, #148	; (adr r3, 800cde0 <floor+0xf0>)
 800cd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4e:	f7f3 fa9d 	bl	800028c <__adddf3>
 800cd52:	2200      	movs	r2, #0
 800cd54:	2300      	movs	r3, #0
 800cd56:	f7f3 fedf 	bl	8000b18 <__aeabi_dcmpgt>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d0eb      	beq.n	800cd36 <floor+0x46>
 800cd5e:	2c00      	cmp	r4, #0
 800cd60:	bfbe      	ittt	lt
 800cd62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cd66:	4133      	asrlt	r3, r6
 800cd68:	18e4      	addlt	r4, r4, r3
 800cd6a:	ea24 0407 	bic.w	r4, r4, r7
 800cd6e:	2500      	movs	r5, #0
 800cd70:	e7e1      	b.n	800cd36 <floor+0x46>
 800cd72:	2e33      	cmp	r6, #51	; 0x33
 800cd74:	dd0b      	ble.n	800cd8e <floor+0x9e>
 800cd76:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd7a:	d104      	bne.n	800cd86 <floor+0x96>
 800cd7c:	ee10 2a10 	vmov	r2, s0
 800cd80:	460b      	mov	r3, r1
 800cd82:	f7f3 fa83 	bl	800028c <__adddf3>
 800cd86:	ec41 0b10 	vmov	d0, r0, r1
 800cd8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd8e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800cd92:	f04f 37ff 	mov.w	r7, #4294967295
 800cd96:	40df      	lsrs	r7, r3
 800cd98:	4238      	tst	r0, r7
 800cd9a:	d0f4      	beq.n	800cd86 <floor+0x96>
 800cd9c:	a310      	add	r3, pc, #64	; (adr r3, 800cde0 <floor+0xf0>)
 800cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda2:	f7f3 fa73 	bl	800028c <__adddf3>
 800cda6:	2200      	movs	r2, #0
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f7f3 feb5 	bl	8000b18 <__aeabi_dcmpgt>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d0c1      	beq.n	800cd36 <floor+0x46>
 800cdb2:	2c00      	cmp	r4, #0
 800cdb4:	da0a      	bge.n	800cdcc <floor+0xdc>
 800cdb6:	2e14      	cmp	r6, #20
 800cdb8:	d101      	bne.n	800cdbe <floor+0xce>
 800cdba:	3401      	adds	r4, #1
 800cdbc:	e006      	b.n	800cdcc <floor+0xdc>
 800cdbe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	40b3      	lsls	r3, r6
 800cdc6:	441d      	add	r5, r3
 800cdc8:	45a8      	cmp	r8, r5
 800cdca:	d8f6      	bhi.n	800cdba <floor+0xca>
 800cdcc:	ea25 0507 	bic.w	r5, r5, r7
 800cdd0:	e7b1      	b.n	800cd36 <floor+0x46>
 800cdd2:	2500      	movs	r5, #0
 800cdd4:	462c      	mov	r4, r5
 800cdd6:	e7ae      	b.n	800cd36 <floor+0x46>
 800cdd8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cddc:	e7ab      	b.n	800cd36 <floor+0x46>
 800cdde:	bf00      	nop
 800cde0:	8800759c 	.word	0x8800759c
 800cde4:	7e37e43c 	.word	0x7e37e43c
 800cde8:	bff00000 	.word	0xbff00000
 800cdec:	000fffff 	.word	0x000fffff

0800cdf0 <__kernel_cos>:
 800cdf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	ec57 6b10 	vmov	r6, r7, d0
 800cdf8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cdfc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ce00:	ed8d 1b00 	vstr	d1, [sp]
 800ce04:	da07      	bge.n	800ce16 <__kernel_cos+0x26>
 800ce06:	ee10 0a10 	vmov	r0, s0
 800ce0a:	4639      	mov	r1, r7
 800ce0c:	f7f3 fea4 	bl	8000b58 <__aeabi_d2iz>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	f000 8088 	beq.w	800cf26 <__kernel_cos+0x136>
 800ce16:	4632      	mov	r2, r6
 800ce18:	463b      	mov	r3, r7
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	4639      	mov	r1, r7
 800ce1e:	f7f3 fbeb 	bl	80005f8 <__aeabi_dmul>
 800ce22:	4b51      	ldr	r3, [pc, #324]	; (800cf68 <__kernel_cos+0x178>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	4604      	mov	r4, r0
 800ce28:	460d      	mov	r5, r1
 800ce2a:	f7f3 fbe5 	bl	80005f8 <__aeabi_dmul>
 800ce2e:	a340      	add	r3, pc, #256	; (adr r3, 800cf30 <__kernel_cos+0x140>)
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	4682      	mov	sl, r0
 800ce36:	468b      	mov	fp, r1
 800ce38:	4620      	mov	r0, r4
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	f7f3 fbdc 	bl	80005f8 <__aeabi_dmul>
 800ce40:	a33d      	add	r3, pc, #244	; (adr r3, 800cf38 <__kernel_cos+0x148>)
 800ce42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce46:	f7f3 fa21 	bl	800028c <__adddf3>
 800ce4a:	4622      	mov	r2, r4
 800ce4c:	462b      	mov	r3, r5
 800ce4e:	f7f3 fbd3 	bl	80005f8 <__aeabi_dmul>
 800ce52:	a33b      	add	r3, pc, #236	; (adr r3, 800cf40 <__kernel_cos+0x150>)
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	f7f3 fa16 	bl	8000288 <__aeabi_dsub>
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	462b      	mov	r3, r5
 800ce60:	f7f3 fbca 	bl	80005f8 <__aeabi_dmul>
 800ce64:	a338      	add	r3, pc, #224	; (adr r3, 800cf48 <__kernel_cos+0x158>)
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	f7f3 fa0f 	bl	800028c <__adddf3>
 800ce6e:	4622      	mov	r2, r4
 800ce70:	462b      	mov	r3, r5
 800ce72:	f7f3 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ce76:	a336      	add	r3, pc, #216	; (adr r3, 800cf50 <__kernel_cos+0x160>)
 800ce78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7c:	f7f3 fa04 	bl	8000288 <__aeabi_dsub>
 800ce80:	4622      	mov	r2, r4
 800ce82:	462b      	mov	r3, r5
 800ce84:	f7f3 fbb8 	bl	80005f8 <__aeabi_dmul>
 800ce88:	a333      	add	r3, pc, #204	; (adr r3, 800cf58 <__kernel_cos+0x168>)
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	f7f3 f9fd 	bl	800028c <__adddf3>
 800ce92:	4622      	mov	r2, r4
 800ce94:	462b      	mov	r3, r5
 800ce96:	f7f3 fbaf 	bl	80005f8 <__aeabi_dmul>
 800ce9a:	4622      	mov	r2, r4
 800ce9c:	462b      	mov	r3, r5
 800ce9e:	f7f3 fbab 	bl	80005f8 <__aeabi_dmul>
 800cea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cea6:	4604      	mov	r4, r0
 800cea8:	460d      	mov	r5, r1
 800ceaa:	4630      	mov	r0, r6
 800ceac:	4639      	mov	r1, r7
 800ceae:	f7f3 fba3 	bl	80005f8 <__aeabi_dmul>
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f7f3 f9e5 	bl	8000288 <__aeabi_dsub>
 800cebe:	4b2b      	ldr	r3, [pc, #172]	; (800cf6c <__kernel_cos+0x17c>)
 800cec0:	4598      	cmp	r8, r3
 800cec2:	4606      	mov	r6, r0
 800cec4:	460f      	mov	r7, r1
 800cec6:	dc10      	bgt.n	800ceea <__kernel_cos+0xfa>
 800cec8:	4602      	mov	r2, r0
 800ceca:	460b      	mov	r3, r1
 800cecc:	4650      	mov	r0, sl
 800cece:	4659      	mov	r1, fp
 800ced0:	f7f3 f9da 	bl	8000288 <__aeabi_dsub>
 800ced4:	460b      	mov	r3, r1
 800ced6:	4926      	ldr	r1, [pc, #152]	; (800cf70 <__kernel_cos+0x180>)
 800ced8:	4602      	mov	r2, r0
 800ceda:	2000      	movs	r0, #0
 800cedc:	f7f3 f9d4 	bl	8000288 <__aeabi_dsub>
 800cee0:	ec41 0b10 	vmov	d0, r0, r1
 800cee4:	b003      	add	sp, #12
 800cee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceea:	4b22      	ldr	r3, [pc, #136]	; (800cf74 <__kernel_cos+0x184>)
 800ceec:	4920      	ldr	r1, [pc, #128]	; (800cf70 <__kernel_cos+0x180>)
 800ceee:	4598      	cmp	r8, r3
 800cef0:	bfcc      	ite	gt
 800cef2:	4d21      	ldrgt	r5, [pc, #132]	; (800cf78 <__kernel_cos+0x188>)
 800cef4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cef8:	2400      	movs	r4, #0
 800cefa:	4622      	mov	r2, r4
 800cefc:	462b      	mov	r3, r5
 800cefe:	2000      	movs	r0, #0
 800cf00:	f7f3 f9c2 	bl	8000288 <__aeabi_dsub>
 800cf04:	4622      	mov	r2, r4
 800cf06:	4680      	mov	r8, r0
 800cf08:	4689      	mov	r9, r1
 800cf0a:	462b      	mov	r3, r5
 800cf0c:	4650      	mov	r0, sl
 800cf0e:	4659      	mov	r1, fp
 800cf10:	f7f3 f9ba 	bl	8000288 <__aeabi_dsub>
 800cf14:	4632      	mov	r2, r6
 800cf16:	463b      	mov	r3, r7
 800cf18:	f7f3 f9b6 	bl	8000288 <__aeabi_dsub>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	4640      	mov	r0, r8
 800cf22:	4649      	mov	r1, r9
 800cf24:	e7da      	b.n	800cedc <__kernel_cos+0xec>
 800cf26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800cf60 <__kernel_cos+0x170>
 800cf2a:	e7db      	b.n	800cee4 <__kernel_cos+0xf4>
 800cf2c:	f3af 8000 	nop.w
 800cf30:	be8838d4 	.word	0xbe8838d4
 800cf34:	bda8fae9 	.word	0xbda8fae9
 800cf38:	bdb4b1c4 	.word	0xbdb4b1c4
 800cf3c:	3e21ee9e 	.word	0x3e21ee9e
 800cf40:	809c52ad 	.word	0x809c52ad
 800cf44:	3e927e4f 	.word	0x3e927e4f
 800cf48:	19cb1590 	.word	0x19cb1590
 800cf4c:	3efa01a0 	.word	0x3efa01a0
 800cf50:	16c15177 	.word	0x16c15177
 800cf54:	3f56c16c 	.word	0x3f56c16c
 800cf58:	5555554c 	.word	0x5555554c
 800cf5c:	3fa55555 	.word	0x3fa55555
 800cf60:	00000000 	.word	0x00000000
 800cf64:	3ff00000 	.word	0x3ff00000
 800cf68:	3fe00000 	.word	0x3fe00000
 800cf6c:	3fd33332 	.word	0x3fd33332
 800cf70:	3ff00000 	.word	0x3ff00000
 800cf74:	3fe90000 	.word	0x3fe90000
 800cf78:	3fd20000 	.word	0x3fd20000
 800cf7c:	00000000 	.word	0x00000000

0800cf80 <__kernel_sin>:
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	ed2d 8b04 	vpush	{d8-d9}
 800cf88:	eeb0 8a41 	vmov.f32	s16, s2
 800cf8c:	eef0 8a61 	vmov.f32	s17, s3
 800cf90:	ec55 4b10 	vmov	r4, r5, d0
 800cf94:	b083      	sub	sp, #12
 800cf96:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cf9a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cf9e:	9001      	str	r0, [sp, #4]
 800cfa0:	da06      	bge.n	800cfb0 <__kernel_sin+0x30>
 800cfa2:	ee10 0a10 	vmov	r0, s0
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	f7f3 fdd6 	bl	8000b58 <__aeabi_d2iz>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d051      	beq.n	800d054 <__kernel_sin+0xd4>
 800cfb0:	4622      	mov	r2, r4
 800cfb2:	462b      	mov	r3, r5
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	f7f3 fb1e 	bl	80005f8 <__aeabi_dmul>
 800cfbc:	4682      	mov	sl, r0
 800cfbe:	468b      	mov	fp, r1
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	f7f3 fb16 	bl	80005f8 <__aeabi_dmul>
 800cfcc:	a341      	add	r3, pc, #260	; (adr r3, 800d0d4 <__kernel_sin+0x154>)
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	4680      	mov	r8, r0
 800cfd4:	4689      	mov	r9, r1
 800cfd6:	4650      	mov	r0, sl
 800cfd8:	4659      	mov	r1, fp
 800cfda:	f7f3 fb0d 	bl	80005f8 <__aeabi_dmul>
 800cfde:	a33f      	add	r3, pc, #252	; (adr r3, 800d0dc <__kernel_sin+0x15c>)
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	f7f3 f950 	bl	8000288 <__aeabi_dsub>
 800cfe8:	4652      	mov	r2, sl
 800cfea:	465b      	mov	r3, fp
 800cfec:	f7f3 fb04 	bl	80005f8 <__aeabi_dmul>
 800cff0:	a33c      	add	r3, pc, #240	; (adr r3, 800d0e4 <__kernel_sin+0x164>)
 800cff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff6:	f7f3 f949 	bl	800028c <__adddf3>
 800cffa:	4652      	mov	r2, sl
 800cffc:	465b      	mov	r3, fp
 800cffe:	f7f3 fafb 	bl	80005f8 <__aeabi_dmul>
 800d002:	a33a      	add	r3, pc, #232	; (adr r3, 800d0ec <__kernel_sin+0x16c>)
 800d004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d008:	f7f3 f93e 	bl	8000288 <__aeabi_dsub>
 800d00c:	4652      	mov	r2, sl
 800d00e:	465b      	mov	r3, fp
 800d010:	f7f3 faf2 	bl	80005f8 <__aeabi_dmul>
 800d014:	a337      	add	r3, pc, #220	; (adr r3, 800d0f4 <__kernel_sin+0x174>)
 800d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01a:	f7f3 f937 	bl	800028c <__adddf3>
 800d01e:	9b01      	ldr	r3, [sp, #4]
 800d020:	4606      	mov	r6, r0
 800d022:	460f      	mov	r7, r1
 800d024:	b9eb      	cbnz	r3, 800d062 <__kernel_sin+0xe2>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	4650      	mov	r0, sl
 800d02c:	4659      	mov	r1, fp
 800d02e:	f7f3 fae3 	bl	80005f8 <__aeabi_dmul>
 800d032:	a325      	add	r3, pc, #148	; (adr r3, 800d0c8 <__kernel_sin+0x148>)
 800d034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d038:	f7f3 f926 	bl	8000288 <__aeabi_dsub>
 800d03c:	4642      	mov	r2, r8
 800d03e:	464b      	mov	r3, r9
 800d040:	f7f3 fada 	bl	80005f8 <__aeabi_dmul>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4620      	mov	r0, r4
 800d04a:	4629      	mov	r1, r5
 800d04c:	f7f3 f91e 	bl	800028c <__adddf3>
 800d050:	4604      	mov	r4, r0
 800d052:	460d      	mov	r5, r1
 800d054:	ec45 4b10 	vmov	d0, r4, r5
 800d058:	b003      	add	sp, #12
 800d05a:	ecbd 8b04 	vpop	{d8-d9}
 800d05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d062:	4b1b      	ldr	r3, [pc, #108]	; (800d0d0 <__kernel_sin+0x150>)
 800d064:	ec51 0b18 	vmov	r0, r1, d8
 800d068:	2200      	movs	r2, #0
 800d06a:	f7f3 fac5 	bl	80005f8 <__aeabi_dmul>
 800d06e:	4632      	mov	r2, r6
 800d070:	ec41 0b19 	vmov	d9, r0, r1
 800d074:	463b      	mov	r3, r7
 800d076:	4640      	mov	r0, r8
 800d078:	4649      	mov	r1, r9
 800d07a:	f7f3 fabd 	bl	80005f8 <__aeabi_dmul>
 800d07e:	4602      	mov	r2, r0
 800d080:	460b      	mov	r3, r1
 800d082:	ec51 0b19 	vmov	r0, r1, d9
 800d086:	f7f3 f8ff 	bl	8000288 <__aeabi_dsub>
 800d08a:	4652      	mov	r2, sl
 800d08c:	465b      	mov	r3, fp
 800d08e:	f7f3 fab3 	bl	80005f8 <__aeabi_dmul>
 800d092:	ec53 2b18 	vmov	r2, r3, d8
 800d096:	f7f3 f8f7 	bl	8000288 <__aeabi_dsub>
 800d09a:	a30b      	add	r3, pc, #44	; (adr r3, 800d0c8 <__kernel_sin+0x148>)
 800d09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	460f      	mov	r7, r1
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	f7f3 faa6 	bl	80005f8 <__aeabi_dmul>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	f7f3 f8ea 	bl	800028c <__adddf3>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	4620      	mov	r0, r4
 800d0be:	4629      	mov	r1, r5
 800d0c0:	f7f3 f8e2 	bl	8000288 <__aeabi_dsub>
 800d0c4:	e7c4      	b.n	800d050 <__kernel_sin+0xd0>
 800d0c6:	bf00      	nop
 800d0c8:	55555549 	.word	0x55555549
 800d0cc:	3fc55555 	.word	0x3fc55555
 800d0d0:	3fe00000 	.word	0x3fe00000
 800d0d4:	5acfd57c 	.word	0x5acfd57c
 800d0d8:	3de5d93a 	.word	0x3de5d93a
 800d0dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800d0e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d0e4:	57b1fe7d 	.word	0x57b1fe7d
 800d0e8:	3ec71de3 	.word	0x3ec71de3
 800d0ec:	19c161d5 	.word	0x19c161d5
 800d0f0:	3f2a01a0 	.word	0x3f2a01a0
 800d0f4:	1110f8a6 	.word	0x1110f8a6
 800d0f8:	3f811111 	.word	0x3f811111
 800d0fc:	00000000 	.word	0x00000000

0800d100 <__ieee754_exp>:
 800d100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d104:	ec55 4b10 	vmov	r4, r5, d0
 800d108:	49b5      	ldr	r1, [pc, #724]	; (800d3e0 <__ieee754_exp+0x2e0>)
 800d10a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800d10e:	428a      	cmp	r2, r1
 800d110:	ed2d 8b04 	vpush	{d8-d9}
 800d114:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800d118:	d93b      	bls.n	800d192 <__ieee754_exp+0x92>
 800d11a:	49b2      	ldr	r1, [pc, #712]	; (800d3e4 <__ieee754_exp+0x2e4>)
 800d11c:	428a      	cmp	r2, r1
 800d11e:	d916      	bls.n	800d14e <__ieee754_exp+0x4e>
 800d120:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d124:	4323      	orrs	r3, r4
 800d126:	ee10 2a10 	vmov	r2, s0
 800d12a:	d007      	beq.n	800d13c <__ieee754_exp+0x3c>
 800d12c:	462b      	mov	r3, r5
 800d12e:	4620      	mov	r0, r4
 800d130:	4629      	mov	r1, r5
 800d132:	f7f3 f8ab 	bl	800028c <__adddf3>
 800d136:	4604      	mov	r4, r0
 800d138:	460d      	mov	r5, r1
 800d13a:	e002      	b.n	800d142 <__ieee754_exp+0x42>
 800d13c:	b10e      	cbz	r6, 800d142 <__ieee754_exp+0x42>
 800d13e:	2400      	movs	r4, #0
 800d140:	2500      	movs	r5, #0
 800d142:	ecbd 8b04 	vpop	{d8-d9}
 800d146:	ec45 4b10 	vmov	d0, r4, r5
 800d14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d14e:	a38e      	add	r3, pc, #568	; (adr r3, 800d388 <__ieee754_exp+0x288>)
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	ee10 0a10 	vmov	r0, s0
 800d158:	4629      	mov	r1, r5
 800d15a:	f7f3 fcdd 	bl	8000b18 <__aeabi_dcmpgt>
 800d15e:	4607      	mov	r7, r0
 800d160:	b130      	cbz	r0, 800d170 <__ieee754_exp+0x70>
 800d162:	ecbd 8b04 	vpop	{d8-d9}
 800d166:	2000      	movs	r0, #0
 800d168:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d16c:	f000 bb82 	b.w	800d874 <__math_oflow>
 800d170:	a387      	add	r3, pc, #540	; (adr r3, 800d390 <__ieee754_exp+0x290>)
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	4620      	mov	r0, r4
 800d178:	4629      	mov	r1, r5
 800d17a:	f7f3 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800d17e:	2800      	cmp	r0, #0
 800d180:	f000 808b 	beq.w	800d29a <__ieee754_exp+0x19a>
 800d184:	ecbd 8b04 	vpop	{d8-d9}
 800d188:	4638      	mov	r0, r7
 800d18a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d18e:	f000 bb68 	b.w	800d862 <__math_uflow>
 800d192:	4b95      	ldr	r3, [pc, #596]	; (800d3e8 <__ieee754_exp+0x2e8>)
 800d194:	429a      	cmp	r2, r3
 800d196:	f240 80ac 	bls.w	800d2f2 <__ieee754_exp+0x1f2>
 800d19a:	4b94      	ldr	r3, [pc, #592]	; (800d3ec <__ieee754_exp+0x2ec>)
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d87c      	bhi.n	800d29a <__ieee754_exp+0x19a>
 800d1a0:	4b93      	ldr	r3, [pc, #588]	; (800d3f0 <__ieee754_exp+0x2f0>)
 800d1a2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	ee10 0a10 	vmov	r0, s0
 800d1ae:	4629      	mov	r1, r5
 800d1b0:	f7f3 f86a 	bl	8000288 <__aeabi_dsub>
 800d1b4:	4b8f      	ldr	r3, [pc, #572]	; (800d3f4 <__ieee754_exp+0x2f4>)
 800d1b6:	00f7      	lsls	r7, r6, #3
 800d1b8:	443b      	add	r3, r7
 800d1ba:	ed93 7b00 	vldr	d7, [r3]
 800d1be:	f1c6 0a01 	rsb	sl, r6, #1
 800d1c2:	4680      	mov	r8, r0
 800d1c4:	4689      	mov	r9, r1
 800d1c6:	ebaa 0a06 	sub.w	sl, sl, r6
 800d1ca:	eeb0 8a47 	vmov.f32	s16, s14
 800d1ce:	eef0 8a67 	vmov.f32	s17, s15
 800d1d2:	ec53 2b18 	vmov	r2, r3, d8
 800d1d6:	4640      	mov	r0, r8
 800d1d8:	4649      	mov	r1, r9
 800d1da:	f7f3 f855 	bl	8000288 <__aeabi_dsub>
 800d1de:	4604      	mov	r4, r0
 800d1e0:	460d      	mov	r5, r1
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	f7f3 fa05 	bl	80005f8 <__aeabi_dmul>
 800d1ee:	a36a      	add	r3, pc, #424	; (adr r3, 800d398 <__ieee754_exp+0x298>)
 800d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	460f      	mov	r7, r1
 800d1f8:	f7f3 f9fe 	bl	80005f8 <__aeabi_dmul>
 800d1fc:	a368      	add	r3, pc, #416	; (adr r3, 800d3a0 <__ieee754_exp+0x2a0>)
 800d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d202:	f7f3 f841 	bl	8000288 <__aeabi_dsub>
 800d206:	4632      	mov	r2, r6
 800d208:	463b      	mov	r3, r7
 800d20a:	f7f3 f9f5 	bl	80005f8 <__aeabi_dmul>
 800d20e:	a366      	add	r3, pc, #408	; (adr r3, 800d3a8 <__ieee754_exp+0x2a8>)
 800d210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d214:	f7f3 f83a 	bl	800028c <__adddf3>
 800d218:	4632      	mov	r2, r6
 800d21a:	463b      	mov	r3, r7
 800d21c:	f7f3 f9ec 	bl	80005f8 <__aeabi_dmul>
 800d220:	a363      	add	r3, pc, #396	; (adr r3, 800d3b0 <__ieee754_exp+0x2b0>)
 800d222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d226:	f7f3 f82f 	bl	8000288 <__aeabi_dsub>
 800d22a:	4632      	mov	r2, r6
 800d22c:	463b      	mov	r3, r7
 800d22e:	f7f3 f9e3 	bl	80005f8 <__aeabi_dmul>
 800d232:	a361      	add	r3, pc, #388	; (adr r3, 800d3b8 <__ieee754_exp+0x2b8>)
 800d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d238:	f7f3 f828 	bl	800028c <__adddf3>
 800d23c:	4632      	mov	r2, r6
 800d23e:	463b      	mov	r3, r7
 800d240:	f7f3 f9da 	bl	80005f8 <__aeabi_dmul>
 800d244:	4602      	mov	r2, r0
 800d246:	460b      	mov	r3, r1
 800d248:	4620      	mov	r0, r4
 800d24a:	4629      	mov	r1, r5
 800d24c:	f7f3 f81c 	bl	8000288 <__aeabi_dsub>
 800d250:	4602      	mov	r2, r0
 800d252:	460b      	mov	r3, r1
 800d254:	4606      	mov	r6, r0
 800d256:	460f      	mov	r7, r1
 800d258:	4620      	mov	r0, r4
 800d25a:	4629      	mov	r1, r5
 800d25c:	f7f3 f9cc 	bl	80005f8 <__aeabi_dmul>
 800d260:	ec41 0b19 	vmov	d9, r0, r1
 800d264:	f1ba 0f00 	cmp.w	sl, #0
 800d268:	d15d      	bne.n	800d326 <__ieee754_exp+0x226>
 800d26a:	2200      	movs	r2, #0
 800d26c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d270:	4630      	mov	r0, r6
 800d272:	4639      	mov	r1, r7
 800d274:	f7f3 f808 	bl	8000288 <__aeabi_dsub>
 800d278:	4602      	mov	r2, r0
 800d27a:	460b      	mov	r3, r1
 800d27c:	ec51 0b19 	vmov	r0, r1, d9
 800d280:	f7f3 fae4 	bl	800084c <__aeabi_ddiv>
 800d284:	4622      	mov	r2, r4
 800d286:	462b      	mov	r3, r5
 800d288:	f7f2 fffe 	bl	8000288 <__aeabi_dsub>
 800d28c:	4602      	mov	r2, r0
 800d28e:	460b      	mov	r3, r1
 800d290:	2000      	movs	r0, #0
 800d292:	4959      	ldr	r1, [pc, #356]	; (800d3f8 <__ieee754_exp+0x2f8>)
 800d294:	f7f2 fff8 	bl	8000288 <__aeabi_dsub>
 800d298:	e74d      	b.n	800d136 <__ieee754_exp+0x36>
 800d29a:	4b58      	ldr	r3, [pc, #352]	; (800d3fc <__ieee754_exp+0x2fc>)
 800d29c:	4620      	mov	r0, r4
 800d29e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	a346      	add	r3, pc, #280	; (adr r3, 800d3c0 <__ieee754_exp+0x2c0>)
 800d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2aa:	f7f3 f9a5 	bl	80005f8 <__aeabi_dmul>
 800d2ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d2b2:	f7f2 ffeb 	bl	800028c <__adddf3>
 800d2b6:	f7f3 fc4f 	bl	8000b58 <__aeabi_d2iz>
 800d2ba:	4682      	mov	sl, r0
 800d2bc:	f7f3 f932 	bl	8000524 <__aeabi_i2d>
 800d2c0:	a341      	add	r3, pc, #260	; (adr r3, 800d3c8 <__ieee754_exp+0x2c8>)
 800d2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	460f      	mov	r7, r1
 800d2ca:	f7f3 f995 	bl	80005f8 <__aeabi_dmul>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	f7f2 ffd7 	bl	8000288 <__aeabi_dsub>
 800d2da:	a33d      	add	r3, pc, #244	; (adr r3, 800d3d0 <__ieee754_exp+0x2d0>)
 800d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e0:	4680      	mov	r8, r0
 800d2e2:	4689      	mov	r9, r1
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	4639      	mov	r1, r7
 800d2e8:	f7f3 f986 	bl	80005f8 <__aeabi_dmul>
 800d2ec:	ec41 0b18 	vmov	d8, r0, r1
 800d2f0:	e76f      	b.n	800d1d2 <__ieee754_exp+0xd2>
 800d2f2:	4b43      	ldr	r3, [pc, #268]	; (800d400 <__ieee754_exp+0x300>)
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d811      	bhi.n	800d31c <__ieee754_exp+0x21c>
 800d2f8:	a337      	add	r3, pc, #220	; (adr r3, 800d3d8 <__ieee754_exp+0x2d8>)
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	ee10 0a10 	vmov	r0, s0
 800d302:	4629      	mov	r1, r5
 800d304:	f7f2 ffc2 	bl	800028c <__adddf3>
 800d308:	4b3b      	ldr	r3, [pc, #236]	; (800d3f8 <__ieee754_exp+0x2f8>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	f7f3 fc04 	bl	8000b18 <__aeabi_dcmpgt>
 800d310:	b138      	cbz	r0, 800d322 <__ieee754_exp+0x222>
 800d312:	4b39      	ldr	r3, [pc, #228]	; (800d3f8 <__ieee754_exp+0x2f8>)
 800d314:	2200      	movs	r2, #0
 800d316:	4620      	mov	r0, r4
 800d318:	4629      	mov	r1, r5
 800d31a:	e70a      	b.n	800d132 <__ieee754_exp+0x32>
 800d31c:	f04f 0a00 	mov.w	sl, #0
 800d320:	e75f      	b.n	800d1e2 <__ieee754_exp+0xe2>
 800d322:	4682      	mov	sl, r0
 800d324:	e75d      	b.n	800d1e2 <__ieee754_exp+0xe2>
 800d326:	4632      	mov	r2, r6
 800d328:	463b      	mov	r3, r7
 800d32a:	2000      	movs	r0, #0
 800d32c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d330:	f7f2 ffaa 	bl	8000288 <__aeabi_dsub>
 800d334:	4602      	mov	r2, r0
 800d336:	460b      	mov	r3, r1
 800d338:	ec51 0b19 	vmov	r0, r1, d9
 800d33c:	f7f3 fa86 	bl	800084c <__aeabi_ddiv>
 800d340:	4602      	mov	r2, r0
 800d342:	460b      	mov	r3, r1
 800d344:	ec51 0b18 	vmov	r0, r1, d8
 800d348:	f7f2 ff9e 	bl	8000288 <__aeabi_dsub>
 800d34c:	4642      	mov	r2, r8
 800d34e:	464b      	mov	r3, r9
 800d350:	f7f2 ff9a 	bl	8000288 <__aeabi_dsub>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	2000      	movs	r0, #0
 800d35a:	4927      	ldr	r1, [pc, #156]	; (800d3f8 <__ieee754_exp+0x2f8>)
 800d35c:	f7f2 ff94 	bl	8000288 <__aeabi_dsub>
 800d360:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800d364:	4592      	cmp	sl, r2
 800d366:	db02      	blt.n	800d36e <__ieee754_exp+0x26e>
 800d368:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d36c:	e6e3      	b.n	800d136 <__ieee754_exp+0x36>
 800d36e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800d372:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d376:	2200      	movs	r2, #0
 800d378:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800d37c:	f7f3 f93c 	bl	80005f8 <__aeabi_dmul>
 800d380:	e6d9      	b.n	800d136 <__ieee754_exp+0x36>
 800d382:	bf00      	nop
 800d384:	f3af 8000 	nop.w
 800d388:	fefa39ef 	.word	0xfefa39ef
 800d38c:	40862e42 	.word	0x40862e42
 800d390:	d52d3051 	.word	0xd52d3051
 800d394:	c0874910 	.word	0xc0874910
 800d398:	72bea4d0 	.word	0x72bea4d0
 800d39c:	3e663769 	.word	0x3e663769
 800d3a0:	c5d26bf1 	.word	0xc5d26bf1
 800d3a4:	3ebbbd41 	.word	0x3ebbbd41
 800d3a8:	af25de2c 	.word	0xaf25de2c
 800d3ac:	3f11566a 	.word	0x3f11566a
 800d3b0:	16bebd93 	.word	0x16bebd93
 800d3b4:	3f66c16c 	.word	0x3f66c16c
 800d3b8:	5555553e 	.word	0x5555553e
 800d3bc:	3fc55555 	.word	0x3fc55555
 800d3c0:	652b82fe 	.word	0x652b82fe
 800d3c4:	3ff71547 	.word	0x3ff71547
 800d3c8:	fee00000 	.word	0xfee00000
 800d3cc:	3fe62e42 	.word	0x3fe62e42
 800d3d0:	35793c76 	.word	0x35793c76
 800d3d4:	3dea39ef 	.word	0x3dea39ef
 800d3d8:	8800759c 	.word	0x8800759c
 800d3dc:	7e37e43c 	.word	0x7e37e43c
 800d3e0:	40862e41 	.word	0x40862e41
 800d3e4:	7fefffff 	.word	0x7fefffff
 800d3e8:	3fd62e42 	.word	0x3fd62e42
 800d3ec:	3ff0a2b1 	.word	0x3ff0a2b1
 800d3f0:	0800f5c8 	.word	0x0800f5c8
 800d3f4:	0800f5d8 	.word	0x0800f5d8
 800d3f8:	3ff00000 	.word	0x3ff00000
 800d3fc:	0800f5b8 	.word	0x0800f5b8
 800d400:	3defffff 	.word	0x3defffff
 800d404:	00000000 	.word	0x00000000

0800d408 <__ieee754_rem_pio2>:
 800d408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40c:	ed2d 8b02 	vpush	{d8}
 800d410:	ec55 4b10 	vmov	r4, r5, d0
 800d414:	4bca      	ldr	r3, [pc, #808]	; (800d740 <__ieee754_rem_pio2+0x338>)
 800d416:	b08b      	sub	sp, #44	; 0x2c
 800d418:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d41c:	4598      	cmp	r8, r3
 800d41e:	4682      	mov	sl, r0
 800d420:	9502      	str	r5, [sp, #8]
 800d422:	dc08      	bgt.n	800d436 <__ieee754_rem_pio2+0x2e>
 800d424:	2200      	movs	r2, #0
 800d426:	2300      	movs	r3, #0
 800d428:	ed80 0b00 	vstr	d0, [r0]
 800d42c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d430:	f04f 0b00 	mov.w	fp, #0
 800d434:	e028      	b.n	800d488 <__ieee754_rem_pio2+0x80>
 800d436:	4bc3      	ldr	r3, [pc, #780]	; (800d744 <__ieee754_rem_pio2+0x33c>)
 800d438:	4598      	cmp	r8, r3
 800d43a:	dc78      	bgt.n	800d52e <__ieee754_rem_pio2+0x126>
 800d43c:	9b02      	ldr	r3, [sp, #8]
 800d43e:	4ec2      	ldr	r6, [pc, #776]	; (800d748 <__ieee754_rem_pio2+0x340>)
 800d440:	2b00      	cmp	r3, #0
 800d442:	ee10 0a10 	vmov	r0, s0
 800d446:	a3b0      	add	r3, pc, #704	; (adr r3, 800d708 <__ieee754_rem_pio2+0x300>)
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	4629      	mov	r1, r5
 800d44e:	dd39      	ble.n	800d4c4 <__ieee754_rem_pio2+0xbc>
 800d450:	f7f2 ff1a 	bl	8000288 <__aeabi_dsub>
 800d454:	45b0      	cmp	r8, r6
 800d456:	4604      	mov	r4, r0
 800d458:	460d      	mov	r5, r1
 800d45a:	d01b      	beq.n	800d494 <__ieee754_rem_pio2+0x8c>
 800d45c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d710 <__ieee754_rem_pio2+0x308>)
 800d45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d462:	f7f2 ff11 	bl	8000288 <__aeabi_dsub>
 800d466:	4602      	mov	r2, r0
 800d468:	460b      	mov	r3, r1
 800d46a:	e9ca 2300 	strd	r2, r3, [sl]
 800d46e:	4620      	mov	r0, r4
 800d470:	4629      	mov	r1, r5
 800d472:	f7f2 ff09 	bl	8000288 <__aeabi_dsub>
 800d476:	a3a6      	add	r3, pc, #664	; (adr r3, 800d710 <__ieee754_rem_pio2+0x308>)
 800d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47c:	f7f2 ff04 	bl	8000288 <__aeabi_dsub>
 800d480:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d484:	f04f 0b01 	mov.w	fp, #1
 800d488:	4658      	mov	r0, fp
 800d48a:	b00b      	add	sp, #44	; 0x2c
 800d48c:	ecbd 8b02 	vpop	{d8}
 800d490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d494:	a3a0      	add	r3, pc, #640	; (adr r3, 800d718 <__ieee754_rem_pio2+0x310>)
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	f7f2 fef5 	bl	8000288 <__aeabi_dsub>
 800d49e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d720 <__ieee754_rem_pio2+0x318>)
 800d4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	460d      	mov	r5, r1
 800d4a8:	f7f2 feee 	bl	8000288 <__aeabi_dsub>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	e9ca 2300 	strd	r2, r3, [sl]
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7f2 fee6 	bl	8000288 <__aeabi_dsub>
 800d4bc:	a398      	add	r3, pc, #608	; (adr r3, 800d720 <__ieee754_rem_pio2+0x318>)
 800d4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c2:	e7db      	b.n	800d47c <__ieee754_rem_pio2+0x74>
 800d4c4:	f7f2 fee2 	bl	800028c <__adddf3>
 800d4c8:	45b0      	cmp	r8, r6
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	460d      	mov	r5, r1
 800d4ce:	d016      	beq.n	800d4fe <__ieee754_rem_pio2+0xf6>
 800d4d0:	a38f      	add	r3, pc, #572	; (adr r3, 800d710 <__ieee754_rem_pio2+0x308>)
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	f7f2 fed9 	bl	800028c <__adddf3>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	e9ca 2300 	strd	r2, r3, [sl]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	f7f2 fecf 	bl	8000288 <__aeabi_dsub>
 800d4ea:	a389      	add	r3, pc, #548	; (adr r3, 800d710 <__ieee754_rem_pio2+0x308>)
 800d4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f0:	f7f2 fecc 	bl	800028c <__adddf3>
 800d4f4:	f04f 3bff 	mov.w	fp, #4294967295
 800d4f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d4fc:	e7c4      	b.n	800d488 <__ieee754_rem_pio2+0x80>
 800d4fe:	a386      	add	r3, pc, #536	; (adr r3, 800d718 <__ieee754_rem_pio2+0x310>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f7f2 fec2 	bl	800028c <__adddf3>
 800d508:	a385      	add	r3, pc, #532	; (adr r3, 800d720 <__ieee754_rem_pio2+0x318>)
 800d50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50e:	4604      	mov	r4, r0
 800d510:	460d      	mov	r5, r1
 800d512:	f7f2 febb 	bl	800028c <__adddf3>
 800d516:	4602      	mov	r2, r0
 800d518:	460b      	mov	r3, r1
 800d51a:	e9ca 2300 	strd	r2, r3, [sl]
 800d51e:	4620      	mov	r0, r4
 800d520:	4629      	mov	r1, r5
 800d522:	f7f2 feb1 	bl	8000288 <__aeabi_dsub>
 800d526:	a37e      	add	r3, pc, #504	; (adr r3, 800d720 <__ieee754_rem_pio2+0x318>)
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	e7e0      	b.n	800d4f0 <__ieee754_rem_pio2+0xe8>
 800d52e:	4b87      	ldr	r3, [pc, #540]	; (800d74c <__ieee754_rem_pio2+0x344>)
 800d530:	4598      	cmp	r8, r3
 800d532:	f300 80d8 	bgt.w	800d6e6 <__ieee754_rem_pio2+0x2de>
 800d536:	f000 f96d 	bl	800d814 <fabs>
 800d53a:	ec55 4b10 	vmov	r4, r5, d0
 800d53e:	ee10 0a10 	vmov	r0, s0
 800d542:	a379      	add	r3, pc, #484	; (adr r3, 800d728 <__ieee754_rem_pio2+0x320>)
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	4629      	mov	r1, r5
 800d54a:	f7f3 f855 	bl	80005f8 <__aeabi_dmul>
 800d54e:	4b80      	ldr	r3, [pc, #512]	; (800d750 <__ieee754_rem_pio2+0x348>)
 800d550:	2200      	movs	r2, #0
 800d552:	f7f2 fe9b 	bl	800028c <__adddf3>
 800d556:	f7f3 faff 	bl	8000b58 <__aeabi_d2iz>
 800d55a:	4683      	mov	fp, r0
 800d55c:	f7f2 ffe2 	bl	8000524 <__aeabi_i2d>
 800d560:	4602      	mov	r2, r0
 800d562:	460b      	mov	r3, r1
 800d564:	ec43 2b18 	vmov	d8, r2, r3
 800d568:	a367      	add	r3, pc, #412	; (adr r3, 800d708 <__ieee754_rem_pio2+0x300>)
 800d56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56e:	f7f3 f843 	bl	80005f8 <__aeabi_dmul>
 800d572:	4602      	mov	r2, r0
 800d574:	460b      	mov	r3, r1
 800d576:	4620      	mov	r0, r4
 800d578:	4629      	mov	r1, r5
 800d57a:	f7f2 fe85 	bl	8000288 <__aeabi_dsub>
 800d57e:	a364      	add	r3, pc, #400	; (adr r3, 800d710 <__ieee754_rem_pio2+0x308>)
 800d580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d584:	4606      	mov	r6, r0
 800d586:	460f      	mov	r7, r1
 800d588:	ec51 0b18 	vmov	r0, r1, d8
 800d58c:	f7f3 f834 	bl	80005f8 <__aeabi_dmul>
 800d590:	f1bb 0f1f 	cmp.w	fp, #31
 800d594:	4604      	mov	r4, r0
 800d596:	460d      	mov	r5, r1
 800d598:	dc0d      	bgt.n	800d5b6 <__ieee754_rem_pio2+0x1ae>
 800d59a:	4b6e      	ldr	r3, [pc, #440]	; (800d754 <__ieee754_rem_pio2+0x34c>)
 800d59c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a4:	4543      	cmp	r3, r8
 800d5a6:	d006      	beq.n	800d5b6 <__ieee754_rem_pio2+0x1ae>
 800d5a8:	4622      	mov	r2, r4
 800d5aa:	462b      	mov	r3, r5
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	f7f2 fe6a 	bl	8000288 <__aeabi_dsub>
 800d5b4:	e00e      	b.n	800d5d4 <__ieee754_rem_pio2+0x1cc>
 800d5b6:	462b      	mov	r3, r5
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	4639      	mov	r1, r7
 800d5be:	f7f2 fe63 	bl	8000288 <__aeabi_dsub>
 800d5c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d5c6:	9303      	str	r3, [sp, #12]
 800d5c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d5cc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d5d0:	2b10      	cmp	r3, #16
 800d5d2:	dc02      	bgt.n	800d5da <__ieee754_rem_pio2+0x1d2>
 800d5d4:	e9ca 0100 	strd	r0, r1, [sl]
 800d5d8:	e039      	b.n	800d64e <__ieee754_rem_pio2+0x246>
 800d5da:	a34f      	add	r3, pc, #316	; (adr r3, 800d718 <__ieee754_rem_pio2+0x310>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	ec51 0b18 	vmov	r0, r1, d8
 800d5e4:	f7f3 f808 	bl	80005f8 <__aeabi_dmul>
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	460d      	mov	r5, r1
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	4639      	mov	r1, r7
 800d5f4:	f7f2 fe48 	bl	8000288 <__aeabi_dsub>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	4680      	mov	r8, r0
 800d5fe:	4689      	mov	r9, r1
 800d600:	4630      	mov	r0, r6
 800d602:	4639      	mov	r1, r7
 800d604:	f7f2 fe40 	bl	8000288 <__aeabi_dsub>
 800d608:	4622      	mov	r2, r4
 800d60a:	462b      	mov	r3, r5
 800d60c:	f7f2 fe3c 	bl	8000288 <__aeabi_dsub>
 800d610:	a343      	add	r3, pc, #268	; (adr r3, 800d720 <__ieee754_rem_pio2+0x318>)
 800d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d616:	4604      	mov	r4, r0
 800d618:	460d      	mov	r5, r1
 800d61a:	ec51 0b18 	vmov	r0, r1, d8
 800d61e:	f7f2 ffeb 	bl	80005f8 <__aeabi_dmul>
 800d622:	4622      	mov	r2, r4
 800d624:	462b      	mov	r3, r5
 800d626:	f7f2 fe2f 	bl	8000288 <__aeabi_dsub>
 800d62a:	4602      	mov	r2, r0
 800d62c:	460b      	mov	r3, r1
 800d62e:	4604      	mov	r4, r0
 800d630:	460d      	mov	r5, r1
 800d632:	4640      	mov	r0, r8
 800d634:	4649      	mov	r1, r9
 800d636:	f7f2 fe27 	bl	8000288 <__aeabi_dsub>
 800d63a:	9a03      	ldr	r2, [sp, #12]
 800d63c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	2b31      	cmp	r3, #49	; 0x31
 800d644:	dc24      	bgt.n	800d690 <__ieee754_rem_pio2+0x288>
 800d646:	e9ca 0100 	strd	r0, r1, [sl]
 800d64a:	4646      	mov	r6, r8
 800d64c:	464f      	mov	r7, r9
 800d64e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d652:	4630      	mov	r0, r6
 800d654:	4642      	mov	r2, r8
 800d656:	464b      	mov	r3, r9
 800d658:	4639      	mov	r1, r7
 800d65a:	f7f2 fe15 	bl	8000288 <__aeabi_dsub>
 800d65e:	462b      	mov	r3, r5
 800d660:	4622      	mov	r2, r4
 800d662:	f7f2 fe11 	bl	8000288 <__aeabi_dsub>
 800d666:	9b02      	ldr	r3, [sp, #8]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d66e:	f6bf af0b 	bge.w	800d488 <__ieee754_rem_pio2+0x80>
 800d672:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d676:	f8ca 3004 	str.w	r3, [sl, #4]
 800d67a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d67e:	f8ca 8000 	str.w	r8, [sl]
 800d682:	f8ca 0008 	str.w	r0, [sl, #8]
 800d686:	f8ca 300c 	str.w	r3, [sl, #12]
 800d68a:	f1cb 0b00 	rsb	fp, fp, #0
 800d68e:	e6fb      	b.n	800d488 <__ieee754_rem_pio2+0x80>
 800d690:	a327      	add	r3, pc, #156	; (adr r3, 800d730 <__ieee754_rem_pio2+0x328>)
 800d692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d696:	ec51 0b18 	vmov	r0, r1, d8
 800d69a:	f7f2 ffad 	bl	80005f8 <__aeabi_dmul>
 800d69e:	4604      	mov	r4, r0
 800d6a0:	460d      	mov	r5, r1
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	4649      	mov	r1, r9
 800d6aa:	f7f2 fded 	bl	8000288 <__aeabi_dsub>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	460f      	mov	r7, r1
 800d6b6:	4640      	mov	r0, r8
 800d6b8:	4649      	mov	r1, r9
 800d6ba:	f7f2 fde5 	bl	8000288 <__aeabi_dsub>
 800d6be:	4622      	mov	r2, r4
 800d6c0:	462b      	mov	r3, r5
 800d6c2:	f7f2 fde1 	bl	8000288 <__aeabi_dsub>
 800d6c6:	a31c      	add	r3, pc, #112	; (adr r3, 800d738 <__ieee754_rem_pio2+0x330>)
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	460d      	mov	r5, r1
 800d6d0:	ec51 0b18 	vmov	r0, r1, d8
 800d6d4:	f7f2 ff90 	bl	80005f8 <__aeabi_dmul>
 800d6d8:	4622      	mov	r2, r4
 800d6da:	462b      	mov	r3, r5
 800d6dc:	f7f2 fdd4 	bl	8000288 <__aeabi_dsub>
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	460d      	mov	r5, r1
 800d6e4:	e760      	b.n	800d5a8 <__ieee754_rem_pio2+0x1a0>
 800d6e6:	4b1c      	ldr	r3, [pc, #112]	; (800d758 <__ieee754_rem_pio2+0x350>)
 800d6e8:	4598      	cmp	r8, r3
 800d6ea:	dd37      	ble.n	800d75c <__ieee754_rem_pio2+0x354>
 800d6ec:	ee10 2a10 	vmov	r2, s0
 800d6f0:	462b      	mov	r3, r5
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	4629      	mov	r1, r5
 800d6f6:	f7f2 fdc7 	bl	8000288 <__aeabi_dsub>
 800d6fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d6fe:	e9ca 0100 	strd	r0, r1, [sl]
 800d702:	e695      	b.n	800d430 <__ieee754_rem_pio2+0x28>
 800d704:	f3af 8000 	nop.w
 800d708:	54400000 	.word	0x54400000
 800d70c:	3ff921fb 	.word	0x3ff921fb
 800d710:	1a626331 	.word	0x1a626331
 800d714:	3dd0b461 	.word	0x3dd0b461
 800d718:	1a600000 	.word	0x1a600000
 800d71c:	3dd0b461 	.word	0x3dd0b461
 800d720:	2e037073 	.word	0x2e037073
 800d724:	3ba3198a 	.word	0x3ba3198a
 800d728:	6dc9c883 	.word	0x6dc9c883
 800d72c:	3fe45f30 	.word	0x3fe45f30
 800d730:	2e000000 	.word	0x2e000000
 800d734:	3ba3198a 	.word	0x3ba3198a
 800d738:	252049c1 	.word	0x252049c1
 800d73c:	397b839a 	.word	0x397b839a
 800d740:	3fe921fb 	.word	0x3fe921fb
 800d744:	4002d97b 	.word	0x4002d97b
 800d748:	3ff921fb 	.word	0x3ff921fb
 800d74c:	413921fb 	.word	0x413921fb
 800d750:	3fe00000 	.word	0x3fe00000
 800d754:	0800f5e8 	.word	0x0800f5e8
 800d758:	7fefffff 	.word	0x7fefffff
 800d75c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800d760:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800d764:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800d768:	4620      	mov	r0, r4
 800d76a:	460d      	mov	r5, r1
 800d76c:	f7f3 f9f4 	bl	8000b58 <__aeabi_d2iz>
 800d770:	f7f2 fed8 	bl	8000524 <__aeabi_i2d>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4620      	mov	r0, r4
 800d77a:	4629      	mov	r1, r5
 800d77c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d780:	f7f2 fd82 	bl	8000288 <__aeabi_dsub>
 800d784:	4b21      	ldr	r3, [pc, #132]	; (800d80c <__ieee754_rem_pio2+0x404>)
 800d786:	2200      	movs	r2, #0
 800d788:	f7f2 ff36 	bl	80005f8 <__aeabi_dmul>
 800d78c:	460d      	mov	r5, r1
 800d78e:	4604      	mov	r4, r0
 800d790:	f7f3 f9e2 	bl	8000b58 <__aeabi_d2iz>
 800d794:	f7f2 fec6 	bl	8000524 <__aeabi_i2d>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4620      	mov	r0, r4
 800d79e:	4629      	mov	r1, r5
 800d7a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d7a4:	f7f2 fd70 	bl	8000288 <__aeabi_dsub>
 800d7a8:	4b18      	ldr	r3, [pc, #96]	; (800d80c <__ieee754_rem_pio2+0x404>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f7f2 ff24 	bl	80005f8 <__aeabi_dmul>
 800d7b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d7b4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d7b8:	2703      	movs	r7, #3
 800d7ba:	2400      	movs	r4, #0
 800d7bc:	2500      	movs	r5, #0
 800d7be:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800d7c2:	4622      	mov	r2, r4
 800d7c4:	462b      	mov	r3, r5
 800d7c6:	46b9      	mov	r9, r7
 800d7c8:	3f01      	subs	r7, #1
 800d7ca:	f7f3 f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d1f5      	bne.n	800d7be <__ieee754_rem_pio2+0x3b6>
 800d7d2:	4b0f      	ldr	r3, [pc, #60]	; (800d810 <__ieee754_rem_pio2+0x408>)
 800d7d4:	9301      	str	r3, [sp, #4]
 800d7d6:	2302      	movs	r3, #2
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	4632      	mov	r2, r6
 800d7dc:	464b      	mov	r3, r9
 800d7de:	4651      	mov	r1, sl
 800d7e0:	a804      	add	r0, sp, #16
 800d7e2:	f000 f851 	bl	800d888 <__kernel_rem_pio2>
 800d7e6:	9b02      	ldr	r3, [sp, #8]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	4683      	mov	fp, r0
 800d7ec:	f6bf ae4c 	bge.w	800d488 <__ieee754_rem_pio2+0x80>
 800d7f0:	e9da 2100 	ldrd	r2, r1, [sl]
 800d7f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7f8:	e9ca 2300 	strd	r2, r3, [sl]
 800d7fc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d800:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d804:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d808:	e73f      	b.n	800d68a <__ieee754_rem_pio2+0x282>
 800d80a:	bf00      	nop
 800d80c:	41700000 	.word	0x41700000
 800d810:	0800f668 	.word	0x0800f668

0800d814 <fabs>:
 800d814:	ec51 0b10 	vmov	r0, r1, d0
 800d818:	ee10 2a10 	vmov	r2, s0
 800d81c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d820:	ec43 2b10 	vmov	d0, r2, r3
 800d824:	4770      	bx	lr

0800d826 <with_errno>:
 800d826:	b570      	push	{r4, r5, r6, lr}
 800d828:	4604      	mov	r4, r0
 800d82a:	460d      	mov	r5, r1
 800d82c:	4616      	mov	r6, r2
 800d82e:	f7fc fcdb 	bl	800a1e8 <__errno>
 800d832:	4629      	mov	r1, r5
 800d834:	6006      	str	r6, [r0, #0]
 800d836:	4620      	mov	r0, r4
 800d838:	bd70      	pop	{r4, r5, r6, pc}

0800d83a <xflow>:
 800d83a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d83c:	4614      	mov	r4, r2
 800d83e:	461d      	mov	r5, r3
 800d840:	b108      	cbz	r0, 800d846 <xflow+0xc>
 800d842:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d846:	e9cd 2300 	strd	r2, r3, [sp]
 800d84a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d84e:	4620      	mov	r0, r4
 800d850:	4629      	mov	r1, r5
 800d852:	f7f2 fed1 	bl	80005f8 <__aeabi_dmul>
 800d856:	2222      	movs	r2, #34	; 0x22
 800d858:	b003      	add	sp, #12
 800d85a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d85e:	f7ff bfe2 	b.w	800d826 <with_errno>

0800d862 <__math_uflow>:
 800d862:	b508      	push	{r3, lr}
 800d864:	2200      	movs	r2, #0
 800d866:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d86a:	f7ff ffe6 	bl	800d83a <xflow>
 800d86e:	ec41 0b10 	vmov	d0, r0, r1
 800d872:	bd08      	pop	{r3, pc}

0800d874 <__math_oflow>:
 800d874:	b508      	push	{r3, lr}
 800d876:	2200      	movs	r2, #0
 800d878:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d87c:	f7ff ffdd 	bl	800d83a <xflow>
 800d880:	ec41 0b10 	vmov	d0, r0, r1
 800d884:	bd08      	pop	{r3, pc}
	...

0800d888 <__kernel_rem_pio2>:
 800d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88c:	ed2d 8b02 	vpush	{d8}
 800d890:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d894:	f112 0f14 	cmn.w	r2, #20
 800d898:	9306      	str	r3, [sp, #24]
 800d89a:	9104      	str	r1, [sp, #16]
 800d89c:	4bc2      	ldr	r3, [pc, #776]	; (800dba8 <__kernel_rem_pio2+0x320>)
 800d89e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d8a0:	9009      	str	r0, [sp, #36]	; 0x24
 800d8a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	9b06      	ldr	r3, [sp, #24]
 800d8aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800d8ae:	bfa8      	it	ge
 800d8b0:	1ed4      	subge	r4, r2, #3
 800d8b2:	9305      	str	r3, [sp, #20]
 800d8b4:	bfb2      	itee	lt
 800d8b6:	2400      	movlt	r4, #0
 800d8b8:	2318      	movge	r3, #24
 800d8ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800d8be:	f06f 0317 	mvn.w	r3, #23
 800d8c2:	fb04 3303 	mla	r3, r4, r3, r3
 800d8c6:	eb03 0a02 	add.w	sl, r3, r2
 800d8ca:	9b00      	ldr	r3, [sp, #0]
 800d8cc:	9a05      	ldr	r2, [sp, #20]
 800d8ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800db98 <__kernel_rem_pio2+0x310>
 800d8d2:	eb03 0802 	add.w	r8, r3, r2
 800d8d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d8d8:	1aa7      	subs	r7, r4, r2
 800d8da:	ae20      	add	r6, sp, #128	; 0x80
 800d8dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d8e0:	2500      	movs	r5, #0
 800d8e2:	4545      	cmp	r5, r8
 800d8e4:	dd13      	ble.n	800d90e <__kernel_rem_pio2+0x86>
 800d8e6:	9b06      	ldr	r3, [sp, #24]
 800d8e8:	aa20      	add	r2, sp, #128	; 0x80
 800d8ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d8ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d8f2:	f04f 0800 	mov.w	r8, #0
 800d8f6:	9b00      	ldr	r3, [sp, #0]
 800d8f8:	4598      	cmp	r8, r3
 800d8fa:	dc31      	bgt.n	800d960 <__kernel_rem_pio2+0xd8>
 800d8fc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800db98 <__kernel_rem_pio2+0x310>
 800d900:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d904:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d908:	462f      	mov	r7, r5
 800d90a:	2600      	movs	r6, #0
 800d90c:	e01b      	b.n	800d946 <__kernel_rem_pio2+0xbe>
 800d90e:	42ef      	cmn	r7, r5
 800d910:	d407      	bmi.n	800d922 <__kernel_rem_pio2+0x9a>
 800d912:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d916:	f7f2 fe05 	bl	8000524 <__aeabi_i2d>
 800d91a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d91e:	3501      	adds	r5, #1
 800d920:	e7df      	b.n	800d8e2 <__kernel_rem_pio2+0x5a>
 800d922:	ec51 0b18 	vmov	r0, r1, d8
 800d926:	e7f8      	b.n	800d91a <__kernel_rem_pio2+0x92>
 800d928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d92c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d930:	f7f2 fe62 	bl	80005f8 <__aeabi_dmul>
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d93c:	f7f2 fca6 	bl	800028c <__adddf3>
 800d940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d944:	3601      	adds	r6, #1
 800d946:	9b05      	ldr	r3, [sp, #20]
 800d948:	429e      	cmp	r6, r3
 800d94a:	f1a7 0708 	sub.w	r7, r7, #8
 800d94e:	ddeb      	ble.n	800d928 <__kernel_rem_pio2+0xa0>
 800d950:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d954:	f108 0801 	add.w	r8, r8, #1
 800d958:	ecab 7b02 	vstmia	fp!, {d7}
 800d95c:	3508      	adds	r5, #8
 800d95e:	e7ca      	b.n	800d8f6 <__kernel_rem_pio2+0x6e>
 800d960:	9b00      	ldr	r3, [sp, #0]
 800d962:	aa0c      	add	r2, sp, #48	; 0x30
 800d964:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d968:	930b      	str	r3, [sp, #44]	; 0x2c
 800d96a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d96c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d970:	9c00      	ldr	r4, [sp, #0]
 800d972:	930a      	str	r3, [sp, #40]	; 0x28
 800d974:	00e3      	lsls	r3, r4, #3
 800d976:	9308      	str	r3, [sp, #32]
 800d978:	ab98      	add	r3, sp, #608	; 0x260
 800d97a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d97e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d982:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d986:	ab70      	add	r3, sp, #448	; 0x1c0
 800d988:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d98c:	46c3      	mov	fp, r8
 800d98e:	46a1      	mov	r9, r4
 800d990:	f1b9 0f00 	cmp.w	r9, #0
 800d994:	f1a5 0508 	sub.w	r5, r5, #8
 800d998:	dc77      	bgt.n	800da8a <__kernel_rem_pio2+0x202>
 800d99a:	ec47 6b10 	vmov	d0, r6, r7
 800d99e:	4650      	mov	r0, sl
 800d9a0:	f000 fac2 	bl	800df28 <scalbn>
 800d9a4:	ec57 6b10 	vmov	r6, r7, d0
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d9ae:	ee10 0a10 	vmov	r0, s0
 800d9b2:	4639      	mov	r1, r7
 800d9b4:	f7f2 fe20 	bl	80005f8 <__aeabi_dmul>
 800d9b8:	ec41 0b10 	vmov	d0, r0, r1
 800d9bc:	f7ff f998 	bl	800ccf0 <floor>
 800d9c0:	4b7a      	ldr	r3, [pc, #488]	; (800dbac <__kernel_rem_pio2+0x324>)
 800d9c2:	ec51 0b10 	vmov	r0, r1, d0
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f7f2 fe16 	bl	80005f8 <__aeabi_dmul>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	4639      	mov	r1, r7
 800d9d4:	f7f2 fc58 	bl	8000288 <__aeabi_dsub>
 800d9d8:	460f      	mov	r7, r1
 800d9da:	4606      	mov	r6, r0
 800d9dc:	f7f3 f8bc 	bl	8000b58 <__aeabi_d2iz>
 800d9e0:	9002      	str	r0, [sp, #8]
 800d9e2:	f7f2 fd9f 	bl	8000524 <__aeabi_i2d>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	f7f2 fc4b 	bl	8000288 <__aeabi_dsub>
 800d9f2:	f1ba 0f00 	cmp.w	sl, #0
 800d9f6:	4606      	mov	r6, r0
 800d9f8:	460f      	mov	r7, r1
 800d9fa:	dd6d      	ble.n	800dad8 <__kernel_rem_pio2+0x250>
 800d9fc:	1e61      	subs	r1, r4, #1
 800d9fe:	ab0c      	add	r3, sp, #48	; 0x30
 800da00:	9d02      	ldr	r5, [sp, #8]
 800da02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da06:	f1ca 0018 	rsb	r0, sl, #24
 800da0a:	fa43 f200 	asr.w	r2, r3, r0
 800da0e:	4415      	add	r5, r2
 800da10:	4082      	lsls	r2, r0
 800da12:	1a9b      	subs	r3, r3, r2
 800da14:	aa0c      	add	r2, sp, #48	; 0x30
 800da16:	9502      	str	r5, [sp, #8]
 800da18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800da1c:	f1ca 0217 	rsb	r2, sl, #23
 800da20:	fa43 fb02 	asr.w	fp, r3, r2
 800da24:	f1bb 0f00 	cmp.w	fp, #0
 800da28:	dd65      	ble.n	800daf6 <__kernel_rem_pio2+0x26e>
 800da2a:	9b02      	ldr	r3, [sp, #8]
 800da2c:	2200      	movs	r2, #0
 800da2e:	3301      	adds	r3, #1
 800da30:	9302      	str	r3, [sp, #8]
 800da32:	4615      	mov	r5, r2
 800da34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800da38:	4294      	cmp	r4, r2
 800da3a:	f300 809f 	bgt.w	800db7c <__kernel_rem_pio2+0x2f4>
 800da3e:	f1ba 0f00 	cmp.w	sl, #0
 800da42:	dd07      	ble.n	800da54 <__kernel_rem_pio2+0x1cc>
 800da44:	f1ba 0f01 	cmp.w	sl, #1
 800da48:	f000 80c1 	beq.w	800dbce <__kernel_rem_pio2+0x346>
 800da4c:	f1ba 0f02 	cmp.w	sl, #2
 800da50:	f000 80c7 	beq.w	800dbe2 <__kernel_rem_pio2+0x35a>
 800da54:	f1bb 0f02 	cmp.w	fp, #2
 800da58:	d14d      	bne.n	800daf6 <__kernel_rem_pio2+0x26e>
 800da5a:	4632      	mov	r2, r6
 800da5c:	463b      	mov	r3, r7
 800da5e:	4954      	ldr	r1, [pc, #336]	; (800dbb0 <__kernel_rem_pio2+0x328>)
 800da60:	2000      	movs	r0, #0
 800da62:	f7f2 fc11 	bl	8000288 <__aeabi_dsub>
 800da66:	4606      	mov	r6, r0
 800da68:	460f      	mov	r7, r1
 800da6a:	2d00      	cmp	r5, #0
 800da6c:	d043      	beq.n	800daf6 <__kernel_rem_pio2+0x26e>
 800da6e:	4650      	mov	r0, sl
 800da70:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800dba0 <__kernel_rem_pio2+0x318>
 800da74:	f000 fa58 	bl	800df28 <scalbn>
 800da78:	4630      	mov	r0, r6
 800da7a:	4639      	mov	r1, r7
 800da7c:	ec53 2b10 	vmov	r2, r3, d0
 800da80:	f7f2 fc02 	bl	8000288 <__aeabi_dsub>
 800da84:	4606      	mov	r6, r0
 800da86:	460f      	mov	r7, r1
 800da88:	e035      	b.n	800daf6 <__kernel_rem_pio2+0x26e>
 800da8a:	4b4a      	ldr	r3, [pc, #296]	; (800dbb4 <__kernel_rem_pio2+0x32c>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 fdb1 	bl	80005f8 <__aeabi_dmul>
 800da96:	f7f3 f85f 	bl	8000b58 <__aeabi_d2iz>
 800da9a:	f7f2 fd43 	bl	8000524 <__aeabi_i2d>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	ec43 2b18 	vmov	d8, r2, r3
 800daa6:	4b44      	ldr	r3, [pc, #272]	; (800dbb8 <__kernel_rem_pio2+0x330>)
 800daa8:	2200      	movs	r2, #0
 800daaa:	f7f2 fda5 	bl	80005f8 <__aeabi_dmul>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	4630      	mov	r0, r6
 800dab4:	4639      	mov	r1, r7
 800dab6:	f7f2 fbe7 	bl	8000288 <__aeabi_dsub>
 800daba:	f7f3 f84d 	bl	8000b58 <__aeabi_d2iz>
 800dabe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dac2:	f84b 0b04 	str.w	r0, [fp], #4
 800dac6:	ec51 0b18 	vmov	r0, r1, d8
 800daca:	f7f2 fbdf 	bl	800028c <__adddf3>
 800dace:	f109 39ff 	add.w	r9, r9, #4294967295
 800dad2:	4606      	mov	r6, r0
 800dad4:	460f      	mov	r7, r1
 800dad6:	e75b      	b.n	800d990 <__kernel_rem_pio2+0x108>
 800dad8:	d106      	bne.n	800dae8 <__kernel_rem_pio2+0x260>
 800dada:	1e63      	subs	r3, r4, #1
 800dadc:	aa0c      	add	r2, sp, #48	; 0x30
 800dade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dae2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800dae6:	e79d      	b.n	800da24 <__kernel_rem_pio2+0x19c>
 800dae8:	4b34      	ldr	r3, [pc, #208]	; (800dbbc <__kernel_rem_pio2+0x334>)
 800daea:	2200      	movs	r2, #0
 800daec:	f7f3 f80a 	bl	8000b04 <__aeabi_dcmpge>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d140      	bne.n	800db76 <__kernel_rem_pio2+0x2ee>
 800daf4:	4683      	mov	fp, r0
 800daf6:	2200      	movs	r2, #0
 800daf8:	2300      	movs	r3, #0
 800dafa:	4630      	mov	r0, r6
 800dafc:	4639      	mov	r1, r7
 800dafe:	f7f2 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800db02:	2800      	cmp	r0, #0
 800db04:	f000 80c1 	beq.w	800dc8a <__kernel_rem_pio2+0x402>
 800db08:	1e65      	subs	r5, r4, #1
 800db0a:	462b      	mov	r3, r5
 800db0c:	2200      	movs	r2, #0
 800db0e:	9900      	ldr	r1, [sp, #0]
 800db10:	428b      	cmp	r3, r1
 800db12:	da6d      	bge.n	800dbf0 <__kernel_rem_pio2+0x368>
 800db14:	2a00      	cmp	r2, #0
 800db16:	f000 808a 	beq.w	800dc2e <__kernel_rem_pio2+0x3a6>
 800db1a:	ab0c      	add	r3, sp, #48	; 0x30
 800db1c:	f1aa 0a18 	sub.w	sl, sl, #24
 800db20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800db24:	2b00      	cmp	r3, #0
 800db26:	f000 80ae 	beq.w	800dc86 <__kernel_rem_pio2+0x3fe>
 800db2a:	4650      	mov	r0, sl
 800db2c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800dba0 <__kernel_rem_pio2+0x318>
 800db30:	f000 f9fa 	bl	800df28 <scalbn>
 800db34:	1c6b      	adds	r3, r5, #1
 800db36:	00da      	lsls	r2, r3, #3
 800db38:	9205      	str	r2, [sp, #20]
 800db3a:	ec57 6b10 	vmov	r6, r7, d0
 800db3e:	aa70      	add	r2, sp, #448	; 0x1c0
 800db40:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800dbb4 <__kernel_rem_pio2+0x32c>
 800db44:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800db48:	462c      	mov	r4, r5
 800db4a:	f04f 0800 	mov.w	r8, #0
 800db4e:	2c00      	cmp	r4, #0
 800db50:	f280 80d4 	bge.w	800dcfc <__kernel_rem_pio2+0x474>
 800db54:	462c      	mov	r4, r5
 800db56:	2c00      	cmp	r4, #0
 800db58:	f2c0 8102 	blt.w	800dd60 <__kernel_rem_pio2+0x4d8>
 800db5c:	4b18      	ldr	r3, [pc, #96]	; (800dbc0 <__kernel_rem_pio2+0x338>)
 800db5e:	461e      	mov	r6, r3
 800db60:	ab70      	add	r3, sp, #448	; 0x1c0
 800db62:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800db66:	1b2b      	subs	r3, r5, r4
 800db68:	f04f 0900 	mov.w	r9, #0
 800db6c:	f04f 0a00 	mov.w	sl, #0
 800db70:	2700      	movs	r7, #0
 800db72:	9306      	str	r3, [sp, #24]
 800db74:	e0e6      	b.n	800dd44 <__kernel_rem_pio2+0x4bc>
 800db76:	f04f 0b02 	mov.w	fp, #2
 800db7a:	e756      	b.n	800da2a <__kernel_rem_pio2+0x1a2>
 800db7c:	f8d8 3000 	ldr.w	r3, [r8]
 800db80:	bb05      	cbnz	r5, 800dbc4 <__kernel_rem_pio2+0x33c>
 800db82:	b123      	cbz	r3, 800db8e <__kernel_rem_pio2+0x306>
 800db84:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800db88:	f8c8 3000 	str.w	r3, [r8]
 800db8c:	2301      	movs	r3, #1
 800db8e:	3201      	adds	r2, #1
 800db90:	f108 0804 	add.w	r8, r8, #4
 800db94:	461d      	mov	r5, r3
 800db96:	e74f      	b.n	800da38 <__kernel_rem_pio2+0x1b0>
	...
 800dba4:	3ff00000 	.word	0x3ff00000
 800dba8:	0800f7b0 	.word	0x0800f7b0
 800dbac:	40200000 	.word	0x40200000
 800dbb0:	3ff00000 	.word	0x3ff00000
 800dbb4:	3e700000 	.word	0x3e700000
 800dbb8:	41700000 	.word	0x41700000
 800dbbc:	3fe00000 	.word	0x3fe00000
 800dbc0:	0800f770 	.word	0x0800f770
 800dbc4:	1acb      	subs	r3, r1, r3
 800dbc6:	f8c8 3000 	str.w	r3, [r8]
 800dbca:	462b      	mov	r3, r5
 800dbcc:	e7df      	b.n	800db8e <__kernel_rem_pio2+0x306>
 800dbce:	1e62      	subs	r2, r4, #1
 800dbd0:	ab0c      	add	r3, sp, #48	; 0x30
 800dbd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbd6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dbda:	a90c      	add	r1, sp, #48	; 0x30
 800dbdc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dbe0:	e738      	b.n	800da54 <__kernel_rem_pio2+0x1cc>
 800dbe2:	1e62      	subs	r2, r4, #1
 800dbe4:	ab0c      	add	r3, sp, #48	; 0x30
 800dbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dbee:	e7f4      	b.n	800dbda <__kernel_rem_pio2+0x352>
 800dbf0:	a90c      	add	r1, sp, #48	; 0x30
 800dbf2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	430a      	orrs	r2, r1
 800dbfa:	e788      	b.n	800db0e <__kernel_rem_pio2+0x286>
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dc02:	2900      	cmp	r1, #0
 800dc04:	d0fa      	beq.n	800dbfc <__kernel_rem_pio2+0x374>
 800dc06:	9a08      	ldr	r2, [sp, #32]
 800dc08:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800dc0c:	446a      	add	r2, sp
 800dc0e:	3a98      	subs	r2, #152	; 0x98
 800dc10:	9208      	str	r2, [sp, #32]
 800dc12:	9a06      	ldr	r2, [sp, #24]
 800dc14:	a920      	add	r1, sp, #128	; 0x80
 800dc16:	18a2      	adds	r2, r4, r2
 800dc18:	18e3      	adds	r3, r4, r3
 800dc1a:	f104 0801 	add.w	r8, r4, #1
 800dc1e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800dc22:	9302      	str	r3, [sp, #8]
 800dc24:	9b02      	ldr	r3, [sp, #8]
 800dc26:	4543      	cmp	r3, r8
 800dc28:	da04      	bge.n	800dc34 <__kernel_rem_pio2+0x3ac>
 800dc2a:	461c      	mov	r4, r3
 800dc2c:	e6a2      	b.n	800d974 <__kernel_rem_pio2+0xec>
 800dc2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc30:	2301      	movs	r3, #1
 800dc32:	e7e4      	b.n	800dbfe <__kernel_rem_pio2+0x376>
 800dc34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc36:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dc3a:	f7f2 fc73 	bl	8000524 <__aeabi_i2d>
 800dc3e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800dc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc44:	46ab      	mov	fp, r5
 800dc46:	461c      	mov	r4, r3
 800dc48:	f04f 0900 	mov.w	r9, #0
 800dc4c:	2600      	movs	r6, #0
 800dc4e:	2700      	movs	r7, #0
 800dc50:	9b05      	ldr	r3, [sp, #20]
 800dc52:	4599      	cmp	r9, r3
 800dc54:	dd06      	ble.n	800dc64 <__kernel_rem_pio2+0x3dc>
 800dc56:	9b08      	ldr	r3, [sp, #32]
 800dc58:	e8e3 6702 	strd	r6, r7, [r3], #8
 800dc5c:	f108 0801 	add.w	r8, r8, #1
 800dc60:	9308      	str	r3, [sp, #32]
 800dc62:	e7df      	b.n	800dc24 <__kernel_rem_pio2+0x39c>
 800dc64:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800dc68:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800dc6c:	f7f2 fcc4 	bl	80005f8 <__aeabi_dmul>
 800dc70:	4602      	mov	r2, r0
 800dc72:	460b      	mov	r3, r1
 800dc74:	4630      	mov	r0, r6
 800dc76:	4639      	mov	r1, r7
 800dc78:	f7f2 fb08 	bl	800028c <__adddf3>
 800dc7c:	f109 0901 	add.w	r9, r9, #1
 800dc80:	4606      	mov	r6, r0
 800dc82:	460f      	mov	r7, r1
 800dc84:	e7e4      	b.n	800dc50 <__kernel_rem_pio2+0x3c8>
 800dc86:	3d01      	subs	r5, #1
 800dc88:	e747      	b.n	800db1a <__kernel_rem_pio2+0x292>
 800dc8a:	ec47 6b10 	vmov	d0, r6, r7
 800dc8e:	f1ca 0000 	rsb	r0, sl, #0
 800dc92:	f000 f949 	bl	800df28 <scalbn>
 800dc96:	ec57 6b10 	vmov	r6, r7, d0
 800dc9a:	4ba0      	ldr	r3, [pc, #640]	; (800df1c <__kernel_rem_pio2+0x694>)
 800dc9c:	ee10 0a10 	vmov	r0, s0
 800dca0:	2200      	movs	r2, #0
 800dca2:	4639      	mov	r1, r7
 800dca4:	f7f2 ff2e 	bl	8000b04 <__aeabi_dcmpge>
 800dca8:	b1f8      	cbz	r0, 800dcea <__kernel_rem_pio2+0x462>
 800dcaa:	4b9d      	ldr	r3, [pc, #628]	; (800df20 <__kernel_rem_pio2+0x698>)
 800dcac:	2200      	movs	r2, #0
 800dcae:	4630      	mov	r0, r6
 800dcb0:	4639      	mov	r1, r7
 800dcb2:	f7f2 fca1 	bl	80005f8 <__aeabi_dmul>
 800dcb6:	f7f2 ff4f 	bl	8000b58 <__aeabi_d2iz>
 800dcba:	4680      	mov	r8, r0
 800dcbc:	f7f2 fc32 	bl	8000524 <__aeabi_i2d>
 800dcc0:	4b96      	ldr	r3, [pc, #600]	; (800df1c <__kernel_rem_pio2+0x694>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f7f2 fc98 	bl	80005f8 <__aeabi_dmul>
 800dcc8:	460b      	mov	r3, r1
 800dcca:	4602      	mov	r2, r0
 800dccc:	4639      	mov	r1, r7
 800dcce:	4630      	mov	r0, r6
 800dcd0:	f7f2 fada 	bl	8000288 <__aeabi_dsub>
 800dcd4:	f7f2 ff40 	bl	8000b58 <__aeabi_d2iz>
 800dcd8:	1c65      	adds	r5, r4, #1
 800dcda:	ab0c      	add	r3, sp, #48	; 0x30
 800dcdc:	f10a 0a18 	add.w	sl, sl, #24
 800dce0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dce4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dce8:	e71f      	b.n	800db2a <__kernel_rem_pio2+0x2a2>
 800dcea:	4630      	mov	r0, r6
 800dcec:	4639      	mov	r1, r7
 800dcee:	f7f2 ff33 	bl	8000b58 <__aeabi_d2iz>
 800dcf2:	ab0c      	add	r3, sp, #48	; 0x30
 800dcf4:	4625      	mov	r5, r4
 800dcf6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dcfa:	e716      	b.n	800db2a <__kernel_rem_pio2+0x2a2>
 800dcfc:	ab0c      	add	r3, sp, #48	; 0x30
 800dcfe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800dd02:	f7f2 fc0f 	bl	8000524 <__aeabi_i2d>
 800dd06:	4632      	mov	r2, r6
 800dd08:	463b      	mov	r3, r7
 800dd0a:	f7f2 fc75 	bl	80005f8 <__aeabi_dmul>
 800dd0e:	4642      	mov	r2, r8
 800dd10:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800dd14:	464b      	mov	r3, r9
 800dd16:	4630      	mov	r0, r6
 800dd18:	4639      	mov	r1, r7
 800dd1a:	f7f2 fc6d 	bl	80005f8 <__aeabi_dmul>
 800dd1e:	3c01      	subs	r4, #1
 800dd20:	4606      	mov	r6, r0
 800dd22:	460f      	mov	r7, r1
 800dd24:	e713      	b.n	800db4e <__kernel_rem_pio2+0x2c6>
 800dd26:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800dd2a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800dd2e:	f7f2 fc63 	bl	80005f8 <__aeabi_dmul>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4648      	mov	r0, r9
 800dd38:	4651      	mov	r1, sl
 800dd3a:	f7f2 faa7 	bl	800028c <__adddf3>
 800dd3e:	3701      	adds	r7, #1
 800dd40:	4681      	mov	r9, r0
 800dd42:	468a      	mov	sl, r1
 800dd44:	9b00      	ldr	r3, [sp, #0]
 800dd46:	429f      	cmp	r7, r3
 800dd48:	dc02      	bgt.n	800dd50 <__kernel_rem_pio2+0x4c8>
 800dd4a:	9b06      	ldr	r3, [sp, #24]
 800dd4c:	429f      	cmp	r7, r3
 800dd4e:	ddea      	ble.n	800dd26 <__kernel_rem_pio2+0x49e>
 800dd50:	9a06      	ldr	r2, [sp, #24]
 800dd52:	ab48      	add	r3, sp, #288	; 0x120
 800dd54:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800dd58:	e9c6 9a00 	strd	r9, sl, [r6]
 800dd5c:	3c01      	subs	r4, #1
 800dd5e:	e6fa      	b.n	800db56 <__kernel_rem_pio2+0x2ce>
 800dd60:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	dc0b      	bgt.n	800dd7e <__kernel_rem_pio2+0x4f6>
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	dc39      	bgt.n	800ddde <__kernel_rem_pio2+0x556>
 800dd6a:	d05d      	beq.n	800de28 <__kernel_rem_pio2+0x5a0>
 800dd6c:	9b02      	ldr	r3, [sp, #8]
 800dd6e:	f003 0007 	and.w	r0, r3, #7
 800dd72:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800dd76:	ecbd 8b02 	vpop	{d8}
 800dd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dd80:	2b03      	cmp	r3, #3
 800dd82:	d1f3      	bne.n	800dd6c <__kernel_rem_pio2+0x4e4>
 800dd84:	9b05      	ldr	r3, [sp, #20]
 800dd86:	9500      	str	r5, [sp, #0]
 800dd88:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800dd8c:	eb0d 0403 	add.w	r4, sp, r3
 800dd90:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800dd94:	46a2      	mov	sl, r4
 800dd96:	9b00      	ldr	r3, [sp, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f1aa 0a08 	sub.w	sl, sl, #8
 800dd9e:	dc69      	bgt.n	800de74 <__kernel_rem_pio2+0x5ec>
 800dda0:	46aa      	mov	sl, r5
 800dda2:	f1ba 0f01 	cmp.w	sl, #1
 800dda6:	f1a4 0408 	sub.w	r4, r4, #8
 800ddaa:	f300 8083 	bgt.w	800deb4 <__kernel_rem_pio2+0x62c>
 800ddae:	9c05      	ldr	r4, [sp, #20]
 800ddb0:	ab48      	add	r3, sp, #288	; 0x120
 800ddb2:	441c      	add	r4, r3
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	2d01      	cmp	r5, #1
 800ddba:	f300 809a 	bgt.w	800def2 <__kernel_rem_pio2+0x66a>
 800ddbe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ddc2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ddc6:	f1bb 0f00 	cmp.w	fp, #0
 800ddca:	f040 8098 	bne.w	800defe <__kernel_rem_pio2+0x676>
 800ddce:	9b04      	ldr	r3, [sp, #16]
 800ddd0:	e9c3 7800 	strd	r7, r8, [r3]
 800ddd4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ddd8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dddc:	e7c6      	b.n	800dd6c <__kernel_rem_pio2+0x4e4>
 800ddde:	9e05      	ldr	r6, [sp, #20]
 800dde0:	ab48      	add	r3, sp, #288	; 0x120
 800dde2:	441e      	add	r6, r3
 800dde4:	462c      	mov	r4, r5
 800dde6:	2000      	movs	r0, #0
 800dde8:	2100      	movs	r1, #0
 800ddea:	2c00      	cmp	r4, #0
 800ddec:	da33      	bge.n	800de56 <__kernel_rem_pio2+0x5ce>
 800ddee:	f1bb 0f00 	cmp.w	fp, #0
 800ddf2:	d036      	beq.n	800de62 <__kernel_rem_pio2+0x5da>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddfa:	9c04      	ldr	r4, [sp, #16]
 800ddfc:	e9c4 2300 	strd	r2, r3, [r4]
 800de00:	4602      	mov	r2, r0
 800de02:	460b      	mov	r3, r1
 800de04:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800de08:	f7f2 fa3e 	bl	8000288 <__aeabi_dsub>
 800de0c:	ae4a      	add	r6, sp, #296	; 0x128
 800de0e:	2401      	movs	r4, #1
 800de10:	42a5      	cmp	r5, r4
 800de12:	da29      	bge.n	800de68 <__kernel_rem_pio2+0x5e0>
 800de14:	f1bb 0f00 	cmp.w	fp, #0
 800de18:	d002      	beq.n	800de20 <__kernel_rem_pio2+0x598>
 800de1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de1e:	4619      	mov	r1, r3
 800de20:	9b04      	ldr	r3, [sp, #16]
 800de22:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800de26:	e7a1      	b.n	800dd6c <__kernel_rem_pio2+0x4e4>
 800de28:	9c05      	ldr	r4, [sp, #20]
 800de2a:	ab48      	add	r3, sp, #288	; 0x120
 800de2c:	441c      	add	r4, r3
 800de2e:	2000      	movs	r0, #0
 800de30:	2100      	movs	r1, #0
 800de32:	2d00      	cmp	r5, #0
 800de34:	da09      	bge.n	800de4a <__kernel_rem_pio2+0x5c2>
 800de36:	f1bb 0f00 	cmp.w	fp, #0
 800de3a:	d002      	beq.n	800de42 <__kernel_rem_pio2+0x5ba>
 800de3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de40:	4619      	mov	r1, r3
 800de42:	9b04      	ldr	r3, [sp, #16]
 800de44:	e9c3 0100 	strd	r0, r1, [r3]
 800de48:	e790      	b.n	800dd6c <__kernel_rem_pio2+0x4e4>
 800de4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de4e:	f7f2 fa1d 	bl	800028c <__adddf3>
 800de52:	3d01      	subs	r5, #1
 800de54:	e7ed      	b.n	800de32 <__kernel_rem_pio2+0x5aa>
 800de56:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800de5a:	f7f2 fa17 	bl	800028c <__adddf3>
 800de5e:	3c01      	subs	r4, #1
 800de60:	e7c3      	b.n	800ddea <__kernel_rem_pio2+0x562>
 800de62:	4602      	mov	r2, r0
 800de64:	460b      	mov	r3, r1
 800de66:	e7c8      	b.n	800ddfa <__kernel_rem_pio2+0x572>
 800de68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800de6c:	f7f2 fa0e 	bl	800028c <__adddf3>
 800de70:	3401      	adds	r4, #1
 800de72:	e7cd      	b.n	800de10 <__kernel_rem_pio2+0x588>
 800de74:	e9da 8900 	ldrd	r8, r9, [sl]
 800de78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800de7c:	9b00      	ldr	r3, [sp, #0]
 800de7e:	3b01      	subs	r3, #1
 800de80:	9300      	str	r3, [sp, #0]
 800de82:	4632      	mov	r2, r6
 800de84:	463b      	mov	r3, r7
 800de86:	4640      	mov	r0, r8
 800de88:	4649      	mov	r1, r9
 800de8a:	f7f2 f9ff 	bl	800028c <__adddf3>
 800de8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	4640      	mov	r0, r8
 800de98:	4649      	mov	r1, r9
 800de9a:	f7f2 f9f5 	bl	8000288 <__aeabi_dsub>
 800de9e:	4632      	mov	r2, r6
 800dea0:	463b      	mov	r3, r7
 800dea2:	f7f2 f9f3 	bl	800028c <__adddf3>
 800dea6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800deaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800deae:	ed8a 7b00 	vstr	d7, [sl]
 800deb2:	e770      	b.n	800dd96 <__kernel_rem_pio2+0x50e>
 800deb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800deb8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800debc:	4640      	mov	r0, r8
 800debe:	4632      	mov	r2, r6
 800dec0:	463b      	mov	r3, r7
 800dec2:	4649      	mov	r1, r9
 800dec4:	f7f2 f9e2 	bl	800028c <__adddf3>
 800dec8:	e9cd 0100 	strd	r0, r1, [sp]
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	4640      	mov	r0, r8
 800ded2:	4649      	mov	r1, r9
 800ded4:	f7f2 f9d8 	bl	8000288 <__aeabi_dsub>
 800ded8:	4632      	mov	r2, r6
 800deda:	463b      	mov	r3, r7
 800dedc:	f7f2 f9d6 	bl	800028c <__adddf3>
 800dee0:	ed9d 7b00 	vldr	d7, [sp]
 800dee4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dee8:	ed84 7b00 	vstr	d7, [r4]
 800deec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800def0:	e757      	b.n	800dda2 <__kernel_rem_pio2+0x51a>
 800def2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800def6:	f7f2 f9c9 	bl	800028c <__adddf3>
 800defa:	3d01      	subs	r5, #1
 800defc:	e75c      	b.n	800ddb8 <__kernel_rem_pio2+0x530>
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	9a04      	ldr	r2, [sp, #16]
 800df02:	601f      	str	r7, [r3, #0]
 800df04:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800df08:	605c      	str	r4, [r3, #4]
 800df0a:	609d      	str	r5, [r3, #8]
 800df0c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800df10:	60d3      	str	r3, [r2, #12]
 800df12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df16:	6110      	str	r0, [r2, #16]
 800df18:	6153      	str	r3, [r2, #20]
 800df1a:	e727      	b.n	800dd6c <__kernel_rem_pio2+0x4e4>
 800df1c:	41700000 	.word	0x41700000
 800df20:	3e700000 	.word	0x3e700000
 800df24:	00000000 	.word	0x00000000

0800df28 <scalbn>:
 800df28:	b570      	push	{r4, r5, r6, lr}
 800df2a:	ec55 4b10 	vmov	r4, r5, d0
 800df2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800df32:	4606      	mov	r6, r0
 800df34:	462b      	mov	r3, r5
 800df36:	b999      	cbnz	r1, 800df60 <scalbn+0x38>
 800df38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df3c:	4323      	orrs	r3, r4
 800df3e:	d03f      	beq.n	800dfc0 <scalbn+0x98>
 800df40:	4b35      	ldr	r3, [pc, #212]	; (800e018 <scalbn+0xf0>)
 800df42:	4629      	mov	r1, r5
 800df44:	ee10 0a10 	vmov	r0, s0
 800df48:	2200      	movs	r2, #0
 800df4a:	f7f2 fb55 	bl	80005f8 <__aeabi_dmul>
 800df4e:	4b33      	ldr	r3, [pc, #204]	; (800e01c <scalbn+0xf4>)
 800df50:	429e      	cmp	r6, r3
 800df52:	4604      	mov	r4, r0
 800df54:	460d      	mov	r5, r1
 800df56:	da10      	bge.n	800df7a <scalbn+0x52>
 800df58:	a327      	add	r3, pc, #156	; (adr r3, 800dff8 <scalbn+0xd0>)
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	e01f      	b.n	800dfa0 <scalbn+0x78>
 800df60:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800df64:	4291      	cmp	r1, r2
 800df66:	d10c      	bne.n	800df82 <scalbn+0x5a>
 800df68:	ee10 2a10 	vmov	r2, s0
 800df6c:	4620      	mov	r0, r4
 800df6e:	4629      	mov	r1, r5
 800df70:	f7f2 f98c 	bl	800028c <__adddf3>
 800df74:	4604      	mov	r4, r0
 800df76:	460d      	mov	r5, r1
 800df78:	e022      	b.n	800dfc0 <scalbn+0x98>
 800df7a:	460b      	mov	r3, r1
 800df7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800df80:	3936      	subs	r1, #54	; 0x36
 800df82:	f24c 3250 	movw	r2, #50000	; 0xc350
 800df86:	4296      	cmp	r6, r2
 800df88:	dd0d      	ble.n	800dfa6 <scalbn+0x7e>
 800df8a:	2d00      	cmp	r5, #0
 800df8c:	a11c      	add	r1, pc, #112	; (adr r1, 800e000 <scalbn+0xd8>)
 800df8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df92:	da02      	bge.n	800df9a <scalbn+0x72>
 800df94:	a11c      	add	r1, pc, #112	; (adr r1, 800e008 <scalbn+0xe0>)
 800df96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df9a:	a319      	add	r3, pc, #100	; (adr r3, 800e000 <scalbn+0xd8>)
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	f7f2 fb2a 	bl	80005f8 <__aeabi_dmul>
 800dfa4:	e7e6      	b.n	800df74 <scalbn+0x4c>
 800dfa6:	1872      	adds	r2, r6, r1
 800dfa8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dfac:	428a      	cmp	r2, r1
 800dfae:	dcec      	bgt.n	800df8a <scalbn+0x62>
 800dfb0:	2a00      	cmp	r2, #0
 800dfb2:	dd08      	ble.n	800dfc6 <scalbn+0x9e>
 800dfb4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dfc0:	ec45 4b10 	vmov	d0, r4, r5
 800dfc4:	bd70      	pop	{r4, r5, r6, pc}
 800dfc6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dfca:	da08      	bge.n	800dfde <scalbn+0xb6>
 800dfcc:	2d00      	cmp	r5, #0
 800dfce:	a10a      	add	r1, pc, #40	; (adr r1, 800dff8 <scalbn+0xd0>)
 800dfd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfd4:	dac0      	bge.n	800df58 <scalbn+0x30>
 800dfd6:	a10e      	add	r1, pc, #56	; (adr r1, 800e010 <scalbn+0xe8>)
 800dfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfdc:	e7bc      	b.n	800df58 <scalbn+0x30>
 800dfde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfe2:	3236      	adds	r2, #54	; 0x36
 800dfe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfe8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dfec:	4620      	mov	r0, r4
 800dfee:	4b0c      	ldr	r3, [pc, #48]	; (800e020 <scalbn+0xf8>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	e7d5      	b.n	800dfa0 <scalbn+0x78>
 800dff4:	f3af 8000 	nop.w
 800dff8:	c2f8f359 	.word	0xc2f8f359
 800dffc:	01a56e1f 	.word	0x01a56e1f
 800e000:	8800759c 	.word	0x8800759c
 800e004:	7e37e43c 	.word	0x7e37e43c
 800e008:	8800759c 	.word	0x8800759c
 800e00c:	fe37e43c 	.word	0xfe37e43c
 800e010:	c2f8f359 	.word	0xc2f8f359
 800e014:	81a56e1f 	.word	0x81a56e1f
 800e018:	43500000 	.word	0x43500000
 800e01c:	ffff3cb0 	.word	0xffff3cb0
 800e020:	3c900000 	.word	0x3c900000

0800e024 <_init>:
 800e024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e026:	bf00      	nop
 800e028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e02a:	bc08      	pop	{r3}
 800e02c:	469e      	mov	lr, r3
 800e02e:	4770      	bx	lr

0800e030 <_fini>:
 800e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e032:	bf00      	nop
 800e034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e036:	bc08      	pop	{r3}
 800e038:	469e      	mov	lr, r3
 800e03a:	4770      	bx	lr
