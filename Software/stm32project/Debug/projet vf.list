
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001689c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d0  08016a30  08016a30  00026a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018f00  08018f00  00030314  2**0
                  CONTENTS
  4 .ARM          00000008  08018f00  08018f00  00028f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018f08  08018f08  00030314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018f08  08018f08  00028f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018f0c  08018f0c  00028f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  08018f10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c8  20000318  08019224  00030318  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015e0  08019224  000315e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002511a  00000000  00000000  00030387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ef7  00000000  00000000  000554a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e60  00000000  00000000  0005a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001777  00000000  00000000  0005c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000074cb  00000000  00000000  0005d96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000276ce  00000000  00000000  00064e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5218  00000000  00000000  0008c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a94  00000000  00000000  00171720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0017b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000318 	.word	0x20000318
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016a14 	.word	0x08016a14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000031c 	.word	0x2000031c
 80001cc:	08016a14 	.word	0x08016a14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001000:	d104      	bne.n	800100c <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_GPIO_EXTI_Callback+0x3c>)
 800100a:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_15){
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001012:	d104      	bne.n	800101e <HAL_GPIO_EXTI_Callback+0x2e>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_GPIO_EXTI_Callback+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <HAL_GPIO_EXTI_Callback+0x40>)
 800101c:	6013      	str	r3, [r2, #0]

	}
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000820 	.word	0x20000820
 8001030:	20000824 	.word	0x20000824

08001034 <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 800103c:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_UART_RxCpltCallback+0xc4>)
 800103e:	881a      	ldrh	r2, [r3, #0]
 8001040:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 8001042:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800104c:	d922      	bls.n	8001094 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001056:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <HAL_UART_RxCpltCallback+0xcc>)
 8001060:	4413      	add	r3, r2
 8001062:	89fa      	ldrh	r2, [r7, #14]
 8001064:	4927      	ldr	r1, [pc, #156]	; (8001104 <HAL_UART_RxCpltCallback+0xd0>)
 8001066:	4618      	mov	r0, r3
 8001068:	f011 febf 	bl	8012dea <memcpy>

				oldPos = 0;  // point to the start of the buffer
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 800106e:	2200      	movs	r2, #0
 8001070:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	4a23      	ldr	r2, [pc, #140]	; (8001104 <HAL_UART_RxCpltCallback+0xd0>)
 8001076:	1899      	adds	r1, r3, r2
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800107e:	461a      	mov	r2, r3
 8001080:	481f      	ldr	r0, [pc, #124]	; (8001100 <HAL_UART_RxCpltCallback+0xcc>)
 8001082:	f011 feb2 	bl	8012dea <memcpy>
				newPos = (64-datatocopy);  // update the position
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_UART_RxCpltCallback+0xc4>)
 8001090:	801a      	strh	r2, [r3, #0]
 8001092:	e01b      	b.n	80010cc <HAL_UART_RxCpltCallback+0x98>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_UART_RxCpltCallback+0xcc>)
 800109c:	4413      	add	r3, r2
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_UART_RxCpltCallback+0xd0>)
 80010a0:	4614      	mov	r4, r2
 80010a2:	469c      	mov	ip, r3
 80010a4:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80010a8:	4665      	mov	r5, ip
 80010aa:	4626      	mov	r6, r4
 80010ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010ae:	6028      	str	r0, [r5, #0]
 80010b0:	6069      	str	r1, [r5, #4]
 80010b2:	60aa      	str	r2, [r5, #8]
 80010b4:	60eb      	str	r3, [r5, #12]
 80010b6:	3410      	adds	r4, #16
 80010b8:	f10c 0c10 	add.w	ip, ip, #16
 80010bc:	4574      	cmp	r4, lr
 80010be:	d1f3      	bne.n	80010a8 <HAL_UART_RxCpltCallback+0x74>
				newPos = 64+oldPos; //update buffer position
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	3340      	adds	r3, #64	; 0x40
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_UART_RxCpltCallback+0xc4>)
 80010ca:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80010cc:	2240      	movs	r2, #64	; 0x40
 80010ce:	490d      	ldr	r1, [pc, #52]	; (8001104 <HAL_UART_RxCpltCallback+0xd0>)
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <HAL_UART_RxCpltCallback+0xd4>)
 80010d2:	f009 fd4f 	bl	800ab74 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_UART_RxCpltCallback+0xd8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_UART_RxCpltCallback+0xd8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0204 	bic.w	r2, r2, #4
 80010e4:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	4906      	ldr	r1, [pc, #24]	; (8001104 <HAL_UART_RxCpltCallback+0xd0>)
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <HAL_UART_RxCpltCallback+0xd4>)
 80010ec:	f009 fd42 	bl	800ab74 <HAL_UART_Receive_DMA>
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f8:	2000059e 	.word	0x2000059e
 80010fc:	2000059c 	.word	0x2000059c
 8001100:	200005e0 	.word	0x200005e0
 8001104:	200005a0 	.word	0x200005a0
 8001108:	20000434 	.word	0x20000434
 800110c:	200004bc 	.word	0x200004bc

08001110 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a3c      	ldr	r2, [pc, #240]	; (8001210 <HAL_ADC_ConvCpltCallback+0x100>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d166      	bne.n	80011f2 <HAL_ADC_ConvCpltCallback+0xe2>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 8001124:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_ADC_ConvCpltCallback+0x104>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9fb 	bl	8000524 <__aeabi_i2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	a135      	add	r1, pc, #212	; (adr r1, 8001208 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001138:	f7ff fb88 	bl	800084c <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fd50 	bl	8000be8 <__aeabi_d2f>
 8001148:	4603      	mov	r3, r0
 800114a:	4a33      	ldr	r2, [pc, #204]	; (8001218 <HAL_ADC_ConvCpltCallback+0x108>)
 800114c:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	4b32      	ldr	r3, [pc, #200]	; (8001220 <HAL_ADC_ConvCpltCallback+0x110>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115e:	ee17 0a90 	vmov	r0, s15
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	492d      	ldr	r1, [pc, #180]	; (8001224 <HAL_ADC_ConvCpltCallback+0x114>)
 8001170:	f7ff fb6c 	bl	800084c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4690      	mov	r8, r2
 800117a:	4699      	mov	r9, r3
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_ADC_ConvCpltCallback+0x104>)
 800117e:	885b      	ldrh	r3, [r3, #2]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9cf 	bl	8000524 <__aeabi_i2d>
 8001186:	4604      	mov	r4, r0
 8001188:	460d      	mov	r5, r1
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_ADC_ConvCpltCallback+0x108>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9da 	bl	8000548 <__aeabi_f2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <HAL_ADC_ConvCpltCallback+0x118>)
 800119a:	f7ff fb57 	bl	800084c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4620      	mov	r0, r4
 80011a4:	4629      	mov	r1, r5
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4614      	mov	r4, r2
 80011b0:	461d      	mov	r5, r3
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_ADC_ConvCpltCallback+0x110>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9c6 	bl	8000548 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f860 	bl	8000288 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4640      	mov	r0, r8
 80011ce:	4649      	mov	r1, r9
 80011d0:	f7ff fa12 	bl	80005f8 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fd04 	bl	8000be8 <__aeabi_d2f>
 80011e0:	ee07 0a10 	vmov	s14, r0
 80011e4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_ADC_ConvCpltCallback+0x11c>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 2);
 80011f2:	2202      	movs	r2, #2
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <HAL_ADC_ConvCpltCallback+0x104>)
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <HAL_ADC_ConvCpltCallback+0x120>)
 80011f8:	f003 fdc8 	bl	8004d8c <HAL_ADC_Start_DMA>



}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001206:	bf00      	nop
 8001208:	d70a3d70 	.word	0xd70a3d70
 800120c:	40b36323 	.word	0x40b36323
 8001210:	50040000 	.word	0x50040000
 8001214:	20000838 	.word	0x20000838
 8001218:	20000840 	.word	0x20000840
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004
 8001224:	40590000 	.word	0x40590000
 8001228:	40080000 	.word	0x40080000
 800122c:	2000083c 	.word	0x2000083c
 8001230:	20000334 	.word	0x20000334

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123a:	f003 f9f2 	bl	8004622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123e:	f000 f85b 	bl	80012f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001242:	f000 f8ac 	bl	800139e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f000 fa75 	bl	8001734 <MX_GPIO_Init>
  MX_DMA_Init();
 800124a:	f000 fa41 	bl	80016d0 <MX_DMA_Init>
  MX_I2C3_Init();
 800124e:	f000 f94b 	bl	80014e8 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001252:	f000 f989 	bl	8001568 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001256:	f000 f8d1 	bl	80013fc <MX_ADC1_Init>
  MX_TIM2_Init();
 800125a:	f000 f9b3 	bl	80015c4 <MX_TIM2_Init>
  MX_TIM7_Init();
 800125e:	f000 f9ff 	bl	8001660 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8001262:	f00f f871 	bl	8010348 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 8001266:	f000 fecb 	bl	8002000 <ssd1306_Init>

	HAL_Delay(100);
 800126a:	2064      	movs	r0, #100	; 0x64
 800126c:	f003 fa4e 	bl	800470c <HAL_Delay>
	ssd1306_Fill(Black);
 8001270:	2000      	movs	r0, #0
 8001272:	f000 ff2f 	bl	80020d4 <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2340      	movs	r3, #64	; 0x40
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2340      	movs	r3, #64	; 0x40
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <main+0xa8>)
 8001282:	2120      	movs	r1, #32
 8001284:	2020      	movs	r0, #32
 8001286:	f001 f9f7 	bl	8002678 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 800128a:	f000 ff3b 	bl	8002104 <ssd1306_UpdateScreen>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2102      	movs	r1, #2
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f005 fb89 	bl	80069ac <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800129a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129e:	f003 fa35 	bl	800470c <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 2);
 80012a2:	2202      	movs	r2, #2
 80012a4:	490e      	ldr	r1, [pc, #56]	; (80012e0 <main+0xac>)
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <main+0xb0>)
 80012a8:	f003 fd70 	bl	8004d8c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80012ac:	480e      	ldr	r0, [pc, #56]	; (80012e8 <main+0xb4>)
 80012ae:	f008 ffab 	bl	800a208 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <main+0xb8>)
 80012b4:	f008 ffa8 	bl	800a208 <HAL_TIM_Base_Start>

	HAL_UART_Abort(&hlpuart1);
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <main+0xbc>)
 80012ba:	f009 fca7 	bl	800ac0c <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//lancement du dma pour le gps
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <main+0xc0>)
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <main+0xbc>)
 80012c4:	f009 fc56 	bl	800ab74 <HAL_UART_Receive_DMA>

	ssd1306_Fill(Black);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 ff03 	bl	80020d4 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80012ce:	f000 ff19 	bl	8002104 <ssd1306_UpdateScreen>

    /* USER CODE BEGIN 3 */



		statemachine();
 80012d2:	f001 fa5d 	bl	8002790 <statemachine>
		ssd1306_UpdateScreen();
 80012d6:	f000 ff15 	bl	8002104 <ssd1306_UpdateScreen>
		statemachine();
 80012da:	e7fa      	b.n	80012d2 <main+0x9e>
 80012dc:	08016c8c 	.word	0x08016c8c
 80012e0:	20000838 	.word	0x20000838
 80012e4:	20000334 	.word	0x20000334
 80012e8:	20000504 	.word	0x20000504
 80012ec:	20000550 	.word	0x20000550
 80012f0:	20000434 	.word	0x20000434
 80012f4:	200005a0 	.word	0x200005a0

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b096      	sub	sp, #88	; 0x58
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2244      	movs	r2, #68	; 0x44
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f011 fc53 	bl	8012bb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800131a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800131e:	f007 fd95 	bl	8008e4c <HAL_PWREx_ControlVoltageScaling>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001328:	f000 fa66 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800132c:	2310      	movs	r3, #16
 800132e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001338:	2360      	movs	r3, #96	; 0x60
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2302      	movs	r3, #2
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001340:	2301      	movs	r3, #1
 8001342:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001344:	2301      	movs	r3, #1
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001348:	2314      	movs	r3, #20
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800134c:	2307      	movs	r3, #7
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001350:	2302      	movs	r3, #2
 8001352:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4618      	mov	r0, r3
 800135e:	f007 fddb 	bl	8008f18 <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001368:	f000 fa46 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136c:	230f      	movs	r3, #15
 800136e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001370:	2303      	movs	r3, #3
 8001372:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001378:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800137c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	2102      	movs	r1, #2
 8001386:	4618      	mov	r0, r3
 8001388:	f008 f9da 	bl	8009740 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001392:	f000 fa31 	bl	80017f8 <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	3758      	adds	r7, #88	; 0x58
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b096      	sub	sp, #88	; 0x58
 80013a2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2254      	movs	r2, #84	; 0x54
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f011 fc01 	bl	8012bb2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80013b0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013c0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013c2:	2301      	movs	r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013ca:	2318      	movs	r3, #24
 80013cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013ce:	2307      	movs	r3, #7
 80013d0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80013da:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80013de:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4618      	mov	r0, r3
 80013e4:	f008 fbd0 	bl	8009b88 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80013ee:	f000 fa03 	bl	80017f8 <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3758      	adds	r7, #88	; 0x58
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001414:	4a31      	ldr	r2, [pc, #196]	; (80014dc <MX_ADC1_Init+0xe0>)
 8001416:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <MX_ADC1_Init+0xdc>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_ADC1_Init+0xdc>)
 800142c:	2201      	movs	r2, #1
 800142e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001432:	2204      	movs	r2, #4
 8001434:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001438:	2200      	movs	r2, #0
 800143a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <MX_ADC1_Init+0xdc>)
 800143e:	2201      	movs	r2, #1
 8001440:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001444:	2202      	movs	r2, #2
 8001446:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <MX_ADC1_Init+0xdc>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001452:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_ADC1_Init+0xdc>)
 800145a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_ADC1_Init+0xdc>)
 800146a:	2200      	movs	r2, #0
 800146c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001476:	4818      	ldr	r0, [pc, #96]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001478:	f003 fb46 	bl	8004b08 <HAL_ADC_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001482:	f000 f9b9 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_ADC1_Init+0xe4>)
 8001488:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148a:	2306      	movs	r3, #6
 800148c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800148e:	2307      	movs	r3, #7
 8001490:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001492:	237f      	movs	r3, #127	; 0x7f
 8001494:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001496:	2304      	movs	r3, #4
 8001498:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_ADC1_Init+0xdc>)
 80014a4:	f003 fec8 	bl	8005238 <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80014ae:	f000 f9a3 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_ADC1_Init+0xe8>)
 80014b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014b6:	230c      	movs	r3, #12
 80014b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_ADC1_Init+0xdc>)
 80014c0:	f003 feba 	bl	8005238 <HAL_ADC_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80014ca:	f000 f995 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000334 	.word	0x20000334
 80014dc:	50040000 	.word	0x50040000
 80014e0:	80000001 	.word	0x80000001
 80014e4:	c7520000 	.word	0xc7520000

080014e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_I2C3_Init+0x74>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <MX_I2C3_Init+0x78>)
 80014f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00202538;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_I2C3_Init+0x74>)
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <MX_I2C3_Init+0x7c>)
 80014f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_I2C3_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_I2C3_Init+0x74>)
 8001500:	2201      	movs	r2, #1
 8001502:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_I2C3_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_I2C3_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_I2C3_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_I2C3_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_I2C3_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <MX_I2C3_Init+0x74>)
 8001524:	f005 fa72 	bl	8006a0c <HAL_I2C_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800152e:	f000 f963 	bl	80017f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001532:	2100      	movs	r1, #0
 8001534:	4809      	ldr	r0, [pc, #36]	; (800155c <MX_I2C3_Init+0x74>)
 8001536:	f005 fe7d 	bl	8007234 <HAL_I2CEx_ConfigAnalogFilter>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001540:	f000 f95a 	bl	80017f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_I2C3_Init+0x74>)
 8001548:	f005 febf 	bl	80072ca <HAL_I2CEx_ConfigDigitalFilter>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001552:	f000 f951 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200003e0 	.word	0x200003e0
 8001560:	40005c00 	.word	0x40005c00
 8001564:	00202538 	.word	0x00202538

08001568 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_LPUART1_UART_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_LPUART1_UART_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_LPUART1_UART_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_LPUART1_UART_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_LPUART1_UART_Init+0x50>)
 800157a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800157e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MX_LPUART1_UART_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_LPUART1_UART_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_LPUART1_UART_Init+0x50>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_LPUART1_UART_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_LPUART1_UART_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_LPUART1_UART_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_LPUART1_UART_Init+0x50>)
 80015a6:	f009 f9fb 	bl	800a9a0 <HAL_UART_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 f922 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000434 	.word	0x20000434
 80015bc:	40008000 	.word	0x40008000
 80015c0:	00033324 	.word	0x00033324

080015c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_TIM2_Init+0x98>)
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_TIM2_Init+0x98>)
 80015ec:	f240 128f 	movw	r2, #399	; 0x18f
 80015f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_TIM2_Init+0x98>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_TIM2_Init+0x98>)
 80015fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80015fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_TIM2_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_TIM2_Init+0x98>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160c:	4813      	ldr	r0, [pc, #76]	; (800165c <MX_TIM2_Init+0x98>)
 800160e:	f008 fda3 	bl	800a158 <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001618:	f000 f8ee 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001620:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <MX_TIM2_Init+0x98>)
 800162a:	f008 ff3b 	bl	800a4a4 <HAL_TIM_ConfigClockSource>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001634:	f000 f8e0 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001638:	2320      	movs	r3, #32
 800163a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_TIM2_Init+0x98>)
 8001646:	f009 f927 	bl	800a898 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001650:	f000 f8d2 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000504 	.word	0x20000504

08001660 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_TIM7_Init+0x68>)
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <MX_TIM7_Init+0x6c>)
 8001674:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_TIM7_Init+0x68>)
 8001678:	f242 720f 	movw	r2, #9999	; 0x270f
 800167c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_TIM7_Init+0x68>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8000-1;
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <MX_TIM7_Init+0x68>)
 8001686:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800168a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_TIM7_Init+0x68>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <MX_TIM7_Init+0x68>)
 8001694:	f008 fd60 	bl	800a158 <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800169e:	f000 f8ab 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <MX_TIM7_Init+0x68>)
 80016b0:	f009 f8f2 	bl	800a898 <HAL_TIMEx_MasterConfigSynchronization>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80016ba:	f000 f89d 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000550 	.word	0x20000550
 80016cc:	40001400 	.word	0x40001400

080016d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_DMA_Init+0x60>)
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	4a15      	ldr	r2, [pc, #84]	; (8001730 <MX_DMA_Init+0x60>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6493      	str	r3, [r2, #72]	; 0x48
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_DMA_Init+0x60>)
 80016e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_DMA_Init+0x60>)
 80016f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <MX_DMA_Init+0x60>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6493      	str	r3, [r2, #72]	; 0x48
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <MX_DMA_Init+0x60>)
 80016fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	200b      	movs	r0, #11
 800170c:	f004 fbc1 	bl	8005e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001710:	200b      	movs	r0, #11
 8001712:	f004 fbda 	bl	8005eca <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2045      	movs	r0, #69	; 0x45
 800171c:	f004 fbb9 	bl	8005e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001720:	2045      	movs	r0, #69	; 0x45
 8001722:	f004 fbd2 	bl	8005eca <HAL_NVIC_EnableIRQ>

}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_GPIO_Init+0xbc>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a28      	ldr	r2, [pc, #160]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_GPIO_Init+0xbc>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2102      	movs	r1, #2
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f005 f907 	bl	80069ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800179e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4619      	mov	r1, r3
 80017b4:	480f      	ldr	r0, [pc, #60]	; (80017f4 <MX_GPIO_Init+0xc0>)
 80017b6:	f004 fec5 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ba:	2302      	movs	r3, #2
 80017bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f004 feb6 	bl	8006544 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2028      	movs	r0, #40	; 0x28
 80017de:	f004 fb58 	bl	8005e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e2:	2028      	movs	r0, #40	; 0x28
 80017e4:	f004 fb71 	bl	8005eca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e8:	bf00      	nop
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	48000800 	.word	0x48000800

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001800:	e7fe      	b.n	8001800 <Error_Handler+0x8>

08001802 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7fe fd30 	bl	8000270 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	2b04      	cmp	r3, #4
 8001814:	d801      	bhi.n	800181a <gps_checksum+0x18>
 8001816:	2300      	movs	r3, #0
 8001818:	e038      	b.n	800188c <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7fe fd28 	bl	8000270 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	3b04      	subs	r3, #4
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7fe fd1f 	bl	8000270 <strlen>
 8001832:	4603      	mov	r3, r0
 8001834:	3b03      	subs	r3, #3
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e00a      	b.n	800185e <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	4053      	eors	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	3301      	adds	r3, #1
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7fe fd06 	bl	8000270 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	1f5a      	subs	r2, r3, #5
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	429a      	cmp	r2, r3
 800186c:	d8ec      	bhi.n	8001848 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	2210      	movs	r2, #16
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f010 f9c2 	bl	8011c00 <strtol>
 800187c:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	429a      	cmp	r2, r3
 8001884:	d101      	bne.n	800188a <gps_checksum+0x88>
        return 1;
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <gps_checksum+0x8a>
    }
    else{
        return 0;
 800188a:	2300      	movs	r3, #0
    }
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b0b7      	sub	sp, #220	; 0xdc
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	2264      	movs	r2, #100	; 0x64
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f011 f980 	bl	8012bb2 <memset>
    char *marker = strtok(inputString, ",");
 80018b2:	49c2      	ldr	r1, [pc, #776]	; (8001bbc <nmea_GPGGA+0x328>)
 80018b4:	6838      	ldr	r0, [r7, #0]
 80018b6:	f011 f997 	bl	8012be8 <strtok>
 80018ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80018be:	e027      	b.n	8001910 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80018c0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80018c4:	f7fe fcd4 	bl	8000270 <strlen>
 80018c8:	4603      	mov	r3, r0
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80018d0:	1c63      	adds	r3, r4, #1
 80018d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018d6:	4610      	mov	r0, r2
 80018d8:	f00f f9d8 	bl	8010c8c <malloc>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	00a3      	lsls	r3, r4, #2
 80018e2:	33d8      	adds	r3, #216	; 0xd8
 80018e4:	443b      	add	r3, r7
 80018e6:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80018ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018ee:	3b01      	subs	r3, #1
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	33d8      	adds	r3, #216	; 0xd8
 80018f4:	443b      	add	r3, r7
 80018f6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80018fa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80018fe:	4618      	mov	r0, r3
 8001900:	f011 fa6b 	bl	8012dda <strcpy>
        marker = strtok(NULL, ",");
 8001904:	49ad      	ldr	r1, [pc, #692]	; (8001bbc <nmea_GPGGA+0x328>)
 8001906:	2000      	movs	r0, #0
 8001908:	f011 f96e 	bl	8012be8 <strtok>
 800190c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001910:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1d3      	bne.n	80018c0 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	332c      	adds	r3, #44	; 0x2c
 800192c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f011 fa52 	bl	8012dda <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001936:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800193a:	2b53      	cmp	r3, #83	; 0x53
 800193c:	d004      	beq.n	8001948 <nmea_GPGGA+0xb4>
 800193e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001942:	2b4e      	cmp	r3, #78	; 0x4e
 8001944:	f040 8159 	bne.w	8001bfa <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800194e:	e010      	b.n	8001972 <nmea_GPGGA+0xde>
 8001950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001952:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001956:	4413      	add	r3, r2
 8001958:	7819      	ldrb	r1, [r3, #0]
 800195a:	f107 021c 	add.w	r2, r7, #28
 800195e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001962:	4413      	add	r3, r2
 8001964:	460a      	mov	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800196c:	3301      	adds	r3, #1
 800196e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001976:	2b01      	cmp	r3, #1
 8001978:	ddea      	ble.n	8001950 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001980:	e011      	b.n	80019a6 <nmea_GPGGA+0x112>
 8001982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001988:	3302      	adds	r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	7819      	ldrb	r1, [r3, #0]
 800198e:	f107 0214 	add.w	r2, r7, #20
 8001992:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001996:	4413      	add	r3, r2
 8001998:	460a      	mov	r2, r1
 800199a:	701a      	strb	r2, [r3, #0]
 800199c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019a0:	3301      	adds	r3, #1
 80019a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80019a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	dde9      	ble.n	8001982 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	220a      	movs	r2, #10
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f010 f922 	bl	8011c00 <strtol>
 80019bc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f010 f830 	bl	8011a2c <strtof>
 80019cc:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80019d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019dc:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80019e0:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001bc0 <nmea_GPGGA+0x32c>
 80019e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ec:	ee17 0a90 	vmov	r0, s15
 80019f0:	f7fe fdaa 	bl	8000548 <__aeabi_f2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a02:	e010      	b.n	8001a26 <nmea_GPGGA+0x192>
 8001a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	7819      	ldrb	r1, [r3, #0]
 8001a0e:	f107 0210 	add.w	r2, r7, #16
 8001a12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a16:	4413      	add	r3, r2
 8001a18:	460a      	mov	r2, r1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a20:	3301      	adds	r3, #1
 8001a22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	ddea      	ble.n	8001a04 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001a34:	e011      	b.n	8001a5a <nmea_GPGGA+0x1c6>
 8001a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a3c:	3303      	adds	r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	7819      	ldrb	r1, [r3, #0]
 8001a42:	f107 0208 	add.w	r2, r7, #8
 8001a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a4a:	4413      	add	r3, r2
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a54:	3301      	adds	r3, #1
 8001a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001a5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	dde9      	ble.n	8001a36 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	220a      	movs	r2, #10
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f010 f8c8 	bl	8011c00 <strtol>
 8001a70:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f00f ffd6 	bl	8011a2c <strtof>
 8001a80:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a90:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001a94:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001bc0 <nmea_GPGGA+0x32c>
 8001a98:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa0:	ee17 0a90 	vmov	r0, s15
 8001aa4:	f7fe fd50 	bl	8000548 <__aeabi_f2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001abc:	f7ff f804 	bl	8000ac8 <__aeabi_dcmpeq>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d176      	bne.n	8001bb4 <nmea_GPGGA+0x320>
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001ad2:	f7fe fff9 	bl	8000ac8 <__aeabi_dcmpeq>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d16b      	bne.n	8001bb4 <nmea_GPGGA+0x320>
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <nmea_GPGGA+0x330>)
 8001ae2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001ae6:	f7fe fff9 	bl	8000adc <__aeabi_dcmplt>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d061      	beq.n	8001bb4 <nmea_GPGGA+0x320>
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <nmea_GPGGA+0x334>)
 8001af6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001afa:	f7fe ffef 	bl	8000adc <__aeabi_dcmplt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d057      	beq.n	8001bb4 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001b0a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001b14:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001b1c:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001b26:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00f ff7d 	bl	8011a2c <strtof>
 8001b32:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001b36:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001b3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	d102      	bne.n	8001b4a <nmea_GPGGA+0x2b6>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	e001      	b.n	8001b4e <nmea_GPGGA+0x2ba>
 8001b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b54:	220a      	movs	r2, #10
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f010 f851 	bl	8011c00 <strtol>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b66:	220a      	movs	r2, #10
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f010 f848 	bl	8011c00 <strtol>
 8001b70:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bfcc      	ite	gt
 8001b7c:	2301      	movgt	r3, #1
 8001b7e:	2300      	movle	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00f ff4d 	bl	8011a2c <strtof>
 8001b92:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001b96:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d102      	bne.n	8001baa <nmea_GPGGA+0x316>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	e001      	b.n	8001bae <nmea_GPGGA+0x31a>
 8001baa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001bb2:	e022      	b.n	8001bfa <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001bba:	e016      	b.n	8001bea <nmea_GPGGA+0x356>
 8001bbc:	08016a30 	.word	0x08016a30
 8001bc0:	42700000 	.word	0x42700000
 8001bc4:	40568000 	.word	0x40568000
 8001bc8:	40668000 	.word	0x40668000
 8001bcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	33d8      	adds	r3, #216	; 0xd8
 8001bd4:	443b      	add	r3, r7
 8001bd6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00f f85e 	bl	8010c9c <free>
 8001be0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001be4:	3301      	adds	r3, #1
 8001be6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001bea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dbea      	blt.n	8001bcc <nmea_GPGGA+0x338>
            return 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e019      	b.n	8001c2e <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c00:	e00e      	b.n	8001c20 <nmea_GPGGA+0x38c>
 8001c02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	33d8      	adds	r3, #216	; 0xd8
 8001c0a:	443b      	add	r3, r7
 8001c0c:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f00f f843 	bl	8010c9c <free>
 8001c16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbea      	blt.n	8001c02 <nmea_GPGGA+0x36e>
    return 1;
 8001c2c:	2301      	movs	r3, #1
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	37dc      	adds	r7, #220	; 0xdc
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop

08001c38 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b0a3      	sub	sp, #140	; 0x8c
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2264      	movs	r2, #100	; 0x64
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f010 ffae 	bl	8012bb2 <memset>
    char *marker = strtok(inputString, ",");
 8001c56:	493b      	ldr	r1, [pc, #236]	; (8001d44 <nmea_GPGSA+0x10c>)
 8001c58:	6838      	ldr	r0, [r7, #0]
 8001c5a:	f010 ffc5 	bl	8012be8 <strtok>
 8001c5e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001c62:	e027      	b.n	8001cb4 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001c64:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001c68:	f7fe fb02 	bl	8000270 <strlen>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001c74:	1c63      	adds	r3, r4, #1
 8001c76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f00f f806 	bl	8010c8c <malloc>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	00a3      	lsls	r3, r4, #2
 8001c86:	3388      	adds	r3, #136	; 0x88
 8001c88:	443b      	add	r3, r7
 8001c8a:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c92:	3b01      	subs	r3, #1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	3388      	adds	r3, #136	; 0x88
 8001c98:	443b      	add	r3, r7
 8001c9a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001c9e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f011 f899 	bl	8012dda <strcpy>
        marker = strtok(NULL, ",");
 8001ca8:	4926      	ldr	r1, [pc, #152]	; (8001d44 <nmea_GPGSA+0x10c>)
 8001caa:	2000      	movs	r0, #0
 8001cac:	f010 ff9c 	bl	8012be8 <strtok>
 8001cb0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1d3      	bne.n	8001c64 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	220a      	movs	r2, #10
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f00f ff9c 	bl	8011c00 <strtol>
 8001cc8:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	bfcc      	ite	gt
 8001cd0:	2301      	movgt	r3, #1
 8001cd2:	2300      	movle	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ce4:	e00e      	b.n	8001d04 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	3388      	adds	r3, #136	; 0x88
 8001cec:	443b      	add	r3, r7
 8001cee:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d00:	3301      	adds	r3, #1
 8001d02:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d06:	2b0e      	cmp	r3, #14
 8001d08:	dded      	ble.n	8001ce6 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001d10:	2300      	movs	r3, #0
 8001d12:	677b      	str	r3, [r7, #116]	; 0x74
 8001d14:	e00b      	b.n	8001d2e <nmea_GPGSA+0xf6>
 8001d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	3388      	adds	r3, #136	; 0x88
 8001d1c:	443b      	add	r3, r7
 8001d1e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f00e ffba 	bl	8010c9c <free>
 8001d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbee      	blt.n	8001d16 <nmea_GPGSA+0xde>
    return 1;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	378c      	adds	r7, #140	; 0x8c
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	08016a30 	.word	0x08016a30

08001d48 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b0a1      	sub	sp, #132	; 0x84
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2264      	movs	r2, #100	; 0x64
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f010 ff27 	bl	8012bb2 <memset>
    char *marker = strtok(inputString, ",");
 8001d64:	4930      	ldr	r1, [pc, #192]	; (8001e28 <nmea_GNRMC+0xe0>)
 8001d66:	6838      	ldr	r0, [r7, #0]
 8001d68:	f010 ff3e 	bl	8012be8 <strtok>
 8001d6c:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001d6e:	e021      	b.n	8001db4 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001d70:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d72:	f7fe fa7d 	bl	8000270 <strlen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001d7c:	1c63      	adds	r3, r4, #1
 8001d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d80:	4610      	mov	r0, r2
 8001d82:	f00e ff83 	bl	8010c8c <malloc>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	00a3      	lsls	r3, r4, #2
 8001d8c:	3380      	adds	r3, #128	; 0x80
 8001d8e:	443b      	add	r3, r7
 8001d90:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d96:	3b01      	subs	r3, #1
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	3380      	adds	r3, #128	; 0x80
 8001d9c:	443b      	add	r3, r7
 8001d9e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001da2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001da4:	4618      	mov	r0, r3
 8001da6:	f011 f818 	bl	8012dda <strcpy>
        marker = strtok(NULL, ",");
 8001daa:	491f      	ldr	r1, [pc, #124]	; (8001e28 <nmea_GNRMC+0xe0>)
 8001dac:	2000      	movs	r0, #0
 8001dae:	f010 ff1b 	bl	8012be8 <strtok>
 8001db2:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1da      	bne.n	8001d70 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00f fe34 	bl	8011a2c <strtof>
 8001dc4:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001dc8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001dca:	f7fe fbbd 	bl	8000548 <__aeabi_f2d>
 8001dce:	a314      	add	r3, pc, #80	; (adr r3, 8001e20 <nmea_GNRMC+0xd8>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fd3a 	bl	800084c <__aeabi_ddiv>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7fe ff02 	bl	8000be8 <__aeabi_d2f>
 8001de4:	4602      	mov	r2, r0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001dea:	2300      	movs	r3, #0
 8001dec:	677b      	str	r3, [r7, #116]	; 0x74
 8001dee:	e00b      	b.n	8001e08 <nmea_GNRMC+0xc0>
 8001df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	3380      	adds	r3, #128	; 0x80
 8001df6:	443b      	add	r3, r7
 8001df8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00e ff4d 	bl	8010c9c <free>
 8001e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e04:	3301      	adds	r3, #1
 8001e06:	677b      	str	r3, [r7, #116]	; 0x74
 8001e08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbef      	blt.n	8001df0 <nmea_GNRMC+0xa8>
    return 1;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3784      	adds	r7, #132	; 0x84
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	f3af 8000 	nop.w
 8001e20:	be76c8b4 	.word	0xbe76c8b4
 8001e24:	3fff1a9f 	.word	0x3fff1a9f
 8001e28:	08016a30 	.word	0x08016a30

08001e2c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001e36:	223c      	movs	r2, #60	; 0x3c
 8001e38:	2100      	movs	r1, #0
 8001e3a:	484e      	ldr	r0, [pc, #312]	; (8001f74 <nmea_parse+0x148>)
 8001e3c:	f010 feb9 	bl	8012bb2 <memset>
    char * token = strtok(buffer, "$");
 8001e40:	494d      	ldr	r1, [pc, #308]	; (8001f78 <nmea_parse+0x14c>)
 8001e42:	6838      	ldr	r0, [r7, #0]
 8001e44:	f010 fed0 	bl	8012be8 <strtok>
 8001e48:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8001e4e:	e01d      	b.n	8001e8c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8001e50:	6978      	ldr	r0, [r7, #20]
 8001e52:	f7fe fa0d 	bl	8000270 <strlen>
 8001e56:	4603      	mov	r3, r0
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	693c      	ldr	r4, [r7, #16]
 8001e5c:	1c63      	adds	r3, r4, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	4610      	mov	r0, r2
 8001e62:	f00e ff13 	bl	8010c8c <malloc>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b42      	ldr	r3, [pc, #264]	; (8001f74 <nmea_parse+0x148>)
 8001e6c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	4a3f      	ldr	r2, [pc, #252]	; (8001f74 <nmea_parse+0x148>)
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	6979      	ldr	r1, [r7, #20]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f010 ffac 	bl	8012dda <strcpy>
        token = strtok(NULL, "$");
 8001e82:	493d      	ldr	r1, [pc, #244]	; (8001f78 <nmea_parse+0x14c>)
 8001e84:	2000      	movs	r0, #0
 8001e86:	f010 feaf 	bl	8012be8 <strtok>
 8001e8a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1de      	bne.n	8001e50 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e052      	b.n	8001f3e <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8001e98:	4a36      	ldr	r2, [pc, #216]	; (8001f74 <nmea_parse+0x148>)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	4936      	ldr	r1, [pc, #216]	; (8001f7c <nmea_parse+0x150>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f010 fefc 	bl	8012ca0 <strstr>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d044      	beq.n	8001f38 <nmea_parse+0x10c>
 8001eae:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <nmea_parse+0x148>)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fca3 	bl	8001802 <gps_checksum>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03a      	beq.n	8001f38 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8001ec2:	4a2c      	ldr	r2, [pc, #176]	; (8001f74 <nmea_parse+0x148>)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	492d      	ldr	r1, [pc, #180]	; (8001f80 <nmea_parse+0x154>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f010 fee7 	bl	8012ca0 <strstr>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8001ed8:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <nmea_parse+0x148>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ff30 	bl	8001d48 <nmea_GNRMC>
 8001ee8:	e026      	b.n	8001f38 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8001eea:	4a22      	ldr	r2, [pc, #136]	; (8001f74 <nmea_parse+0x148>)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	4924      	ldr	r1, [pc, #144]	; (8001f84 <nmea_parse+0x158>)
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f010 fed3 	bl	8012ca0 <strstr>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8001f00:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <nmea_parse+0x148>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fe94 	bl	8001c38 <nmea_GPGSA>
 8001f10:	e012      	b.n	8001f38 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <nmea_parse+0x148>)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1a:	491b      	ldr	r1, [pc, #108]	; (8001f88 <nmea_parse+0x15c>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f010 febf 	bl	8012ca0 <strstr>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <nmea_parse+0x148>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	4619      	mov	r1, r3
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fcae 	bl	8001894 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	dba8      	blt.n	8001e98 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	e009      	b.n	8001f60 <nmea_parse+0x134>
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <nmea_parse+0x148>)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00e fea1 	bl	8010c9c <free>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf1      	blt.n	8001f4c <nmea_parse+0x120>


}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000844 	.word	0x20000844
 8001f78:	08016a34 	.word	0x08016a34
 8001f7c:	08016a38 	.word	0x08016a38
 8001f80:	08016a3c 	.word	0x08016a3c
 8001f84:	08016a44 	.word	0x08016a44
 8001f88:	08016a4c 	.word	0x08016a4c

08001f8c <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af04      	add	r7, sp, #16
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	2301      	movs	r3, #1
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	1dfb      	adds	r3, r7, #7
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2178      	movs	r1, #120	; 0x78
 8001fba:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <ssd1306_WriteCommand+0x2c>)
 8001fbc:	f004 fdc2 	bl	8006b44 <HAL_I2C_Mem_Write>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200003e0 	.word	0x200003e0

08001fcc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af04      	add	r7, sp, #16
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	f04f 32ff 	mov.w	r2, #4294967295
 8001fde:	9202      	str	r2, [sp, #8]
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	2178      	movs	r1, #120	; 0x78
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <ssd1306_WriteData+0x30>)
 8001fee:	f004 fda9 	bl	8006b44 <HAL_I2C_Mem_Write>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200003e0 	.word	0x200003e0

08002000 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002004:	f7ff ffc2 	bl	8001f8c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002008:	2064      	movs	r0, #100	; 0x64
 800200a:	f002 fb7f 	bl	800470c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800200e:	2000      	movs	r0, #0
 8002010:	f000 fba0 	bl	8002754 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002014:	2020      	movs	r0, #32
 8002016:	f7ff ffc1 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff ffbe 	bl	8001f9c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002020:	20b0      	movs	r0, #176	; 0xb0
 8002022:	f7ff ffbb 	bl	8001f9c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002026:	20c8      	movs	r0, #200	; 0xc8
 8002028:	f7ff ffb8 	bl	8001f9c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff ffb5 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002032:	2010      	movs	r0, #16
 8002034:	f7ff ffb2 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002038:	2040      	movs	r0, #64	; 0x40
 800203a:	f7ff ffaf 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800203e:	20ff      	movs	r0, #255	; 0xff
 8002040:	f000 fb75 	bl	800272e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002044:	20a1      	movs	r0, #161	; 0xa1
 8002046:	f7ff ffa9 	bl	8001f9c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800204a:	20a6      	movs	r0, #166	; 0xa6
 800204c:	f7ff ffa6 	bl	8001f9c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002050:	20a8      	movs	r0, #168	; 0xa8
 8002052:	f7ff ffa3 	bl	8001f9c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002056:	203f      	movs	r0, #63	; 0x3f
 8002058:	f7ff ffa0 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800205c:	20a4      	movs	r0, #164	; 0xa4
 800205e:	f7ff ff9d 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002062:	20d3      	movs	r0, #211	; 0xd3
 8002064:	f7ff ff9a 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff ff97 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800206e:	20d5      	movs	r0, #213	; 0xd5
 8002070:	f7ff ff94 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002074:	20f0      	movs	r0, #240	; 0xf0
 8002076:	f7ff ff91 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800207a:	20d9      	movs	r0, #217	; 0xd9
 800207c:	f7ff ff8e 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002080:	2022      	movs	r0, #34	; 0x22
 8002082:	f7ff ff8b 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002086:	20da      	movs	r0, #218	; 0xda
 8002088:	f7ff ff88 	bl	8001f9c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800208c:	2012      	movs	r0, #18
 800208e:	f7ff ff85 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002092:	20db      	movs	r0, #219	; 0xdb
 8002094:	f7ff ff82 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002098:	2020      	movs	r0, #32
 800209a:	f7ff ff7f 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800209e:	208d      	movs	r0, #141	; 0x8d
 80020a0:	f7ff ff7c 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80020a4:	2014      	movs	r0, #20
 80020a6:	f7ff ff79 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80020aa:	2001      	movs	r0, #1
 80020ac:	f000 fb52 	bl	8002754 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f000 f80f 	bl	80020d4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80020b6:	f000 f825 	bl	8002104 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <ssd1306_Init+0xd0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <ssd1306_Init+0xd0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80020c6:	4b02      	ldr	r3, [pc, #8]	; (80020d0 <ssd1306_Init+0xd0>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	711a      	strb	r2, [r3, #4]
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000c80 	.word	0x20000c80

080020d4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <ssd1306_Fill+0x14>
 80020e4:	2300      	movs	r3, #0
 80020e6:	e000      	b.n	80020ea <ssd1306_Fill+0x16>
 80020e8:	23ff      	movs	r3, #255	; 0xff
 80020ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ee:	4619      	mov	r1, r3
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <ssd1306_Fill+0x2c>)
 80020f2:	f010 fd5e 	bl	8012bb2 <memset>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000880 	.word	0x20000880

08002104 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	e016      	b.n	800213e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	3b50      	subs	r3, #80	; 0x50
 8002114:	b2db      	uxtb	r3, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff40 	bl	8001f9c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800211c:	2000      	movs	r0, #0
 800211e:	f7ff ff3d 	bl	8001f9c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002122:	2010      	movs	r0, #16
 8002124:	f7ff ff3a 	bl	8001f9c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	01db      	lsls	r3, r3, #7
 800212c:	4a08      	ldr	r2, [pc, #32]	; (8002150 <ssd1306_UpdateScreen+0x4c>)
 800212e:	4413      	add	r3, r2
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff4a 	bl	8001fcc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	3301      	adds	r3, #1
 800213c:	71fb      	strb	r3, [r7, #7]
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	2b07      	cmp	r3, #7
 8002142:	d9e5      	bls.n	8002110 <ssd1306_UpdateScreen+0xc>
    }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000880 	.word	0x20000880

08002154 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	460b      	mov	r3, r1
 8002160:	71bb      	strb	r3, [r7, #6]
 8002162:	4613      	mov	r3, r2
 8002164:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db3d      	blt.n	80021ea <ssd1306_DrawPixel+0x96>
 800216e:	79bb      	ldrb	r3, [r7, #6]
 8002170:	2b3f      	cmp	r3, #63	; 0x3f
 8002172:	d83a      	bhi.n	80021ea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002174:	797b      	ldrb	r3, [r7, #5]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d11a      	bne.n	80021b0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800217a:	79fa      	ldrb	r2, [r7, #7]
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	08db      	lsrs	r3, r3, #3
 8002180:	b2d8      	uxtb	r0, r3
 8002182:	4603      	mov	r3, r0
 8002184:	01db      	lsls	r3, r3, #7
 8002186:	4413      	add	r3, r2
 8002188:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <ssd1306_DrawPixel+0xa4>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	b25a      	sxtb	r2, r3
 800218e:	79bb      	ldrb	r3, [r7, #6]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	2101      	movs	r1, #1
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	b25b      	sxtb	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	b259      	sxtb	r1, r3
 80021a0:	79fa      	ldrb	r2, [r7, #7]
 80021a2:	4603      	mov	r3, r0
 80021a4:	01db      	lsls	r3, r3, #7
 80021a6:	4413      	add	r3, r2
 80021a8:	b2c9      	uxtb	r1, r1
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <ssd1306_DrawPixel+0xa4>)
 80021ac:	54d1      	strb	r1, [r2, r3]
 80021ae:	e01d      	b.n	80021ec <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	b2d8      	uxtb	r0, r3
 80021b8:	4603      	mov	r3, r0
 80021ba:	01db      	lsls	r3, r3, #7
 80021bc:	4413      	add	r3, r2
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <ssd1306_DrawPixel+0xa4>)
 80021c0:	5cd3      	ldrb	r3, [r2, r3]
 80021c2:	b25a      	sxtb	r2, r3
 80021c4:	79bb      	ldrb	r3, [r7, #6]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	4013      	ands	r3, r2
 80021d8:	b259      	sxtb	r1, r3
 80021da:	79fa      	ldrb	r2, [r7, #7]
 80021dc:	4603      	mov	r3, r0
 80021de:	01db      	lsls	r3, r3, #7
 80021e0:	4413      	add	r3, r2
 80021e2:	b2c9      	uxtb	r1, r1
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <ssd1306_DrawPixel+0xa4>)
 80021e6:	54d1      	strb	r1, [r2, r3]
 80021e8:	e000      	b.n	80021ec <ssd1306_DrawPixel+0x98>
        return;
 80021ea:	bf00      	nop
    }
}
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000880 	.word	0x20000880

080021fc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	4604      	mov	r4, r0
 8002204:	1d38      	adds	r0, r7, #4
 8002206:	e880 0006 	stmia.w	r0, {r1, r2}
 800220a:	461a      	mov	r2, r3
 800220c:	4623      	mov	r3, r4
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	4613      	mov	r3, r2
 8002212:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b1f      	cmp	r3, #31
 8002218:	d902      	bls.n	8002220 <ssd1306_WriteChar+0x24>
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	2b7e      	cmp	r3, #126	; 0x7e
 800221e:	d901      	bls.n	8002224 <ssd1306_WriteChar+0x28>
        return 0;
 8002220:	2300      	movs	r3, #0
 8002222:	e06d      	b.n	8002300 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <ssd1306_WriteChar+0x10c>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	793b      	ldrb	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	2b80      	cmp	r3, #128	; 0x80
 8002230:	dc06      	bgt.n	8002240 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002232:	4b35      	ldr	r3, [pc, #212]	; (8002308 <ssd1306_WriteChar+0x10c>)
 8002234:	885b      	ldrh	r3, [r3, #2]
 8002236:	461a      	mov	r2, r3
 8002238:	797b      	ldrb	r3, [r7, #5]
 800223a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	dd01      	ble.n	8002244 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002240:	2300      	movs	r3, #0
 8002242:	e05d      	b.n	8002300 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	e04c      	b.n	80022e4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	3b20      	subs	r3, #32
 8002250:	7979      	ldrb	r1, [r7, #5]
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4619      	mov	r1, r3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	440b      	add	r3, r1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e034      	b.n	80022d4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d012      	beq.n	80022a0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800227a:	4b23      	ldr	r3, [pc, #140]	; (8002308 <ssd1306_WriteChar+0x10c>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4413      	add	r3, r2
 8002286:	b2d8      	uxtb	r0, r3
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <ssd1306_WriteChar+0x10c>)
 800228a:	885b      	ldrh	r3, [r3, #2]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4413      	add	r3, r2
 8002294:	b2db      	uxtb	r3, r3
 8002296:	7bba      	ldrb	r2, [r7, #14]
 8002298:	4619      	mov	r1, r3
 800229a:	f7ff ff5b 	bl	8002154 <ssd1306_DrawPixel>
 800229e:	e016      	b.n	80022ce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <ssd1306_WriteChar+0x10c>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	b2d8      	uxtb	r0, r3
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <ssd1306_WriteChar+0x10c>)
 80022b0:	885b      	ldrh	r3, [r3, #2]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	b2d9      	uxtb	r1, r3
 80022bc:	7bbb      	ldrb	r3, [r7, #14]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	f7ff ff43 	bl	8002154 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	793b      	ldrb	r3, [r7, #4]
 80022d6:	461a      	mov	r2, r3
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	4293      	cmp	r3, r2
 80022dc:	d3c5      	bcc.n	800226a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	797b      	ldrb	r3, [r7, #5]
 80022e6:	461a      	mov	r2, r3
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d3ad      	bcc.n	800224a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <ssd1306_WriteChar+0x10c>)
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	793b      	ldrb	r3, [r7, #4]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	4b03      	ldr	r3, [pc, #12]	; (8002308 <ssd1306_WriteChar+0x10c>)
 80022fc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3724      	adds	r7, #36	; 0x24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	20000c80 	.word	0x20000c80

0800230c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	1d38      	adds	r0, r7, #4
 8002316:	e880 0006 	stmia.w	r0, {r1, r2}
 800231a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800231c:	e012      	b.n	8002344 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	7818      	ldrb	r0, [r3, #0]
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	1d3a      	adds	r2, r7, #4
 8002326:	ca06      	ldmia	r2, {r1, r2}
 8002328:	f7ff ff68 	bl	80021fc <ssd1306_WriteChar>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d002      	beq.n	800233e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	e008      	b.n	8002350 <ssd1306_WriteString+0x44>
        }
        str++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3301      	adds	r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e8      	bne.n	800231e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	781b      	ldrb	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	b29a      	uxth	r2, r3
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <ssd1306_SetCursor+0x2c>)
 800236e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002370:	79bb      	ldrb	r3, [r7, #6]
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <ssd1306_SetCursor+0x2c>)
 8002376:	805a      	strh	r2, [r3, #2]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	20000c80 	.word	0x20000c80

08002388 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	4604      	mov	r4, r0
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	4623      	mov	r3, r4
 8002398:	71fb      	strb	r3, [r7, #7]
 800239a:	4603      	mov	r3, r0
 800239c:	71bb      	strb	r3, [r7, #6]
 800239e:	460b      	mov	r3, r1
 80023a0:	717b      	strb	r3, [r7, #5]
 80023a2:	4613      	mov	r3, r2
 80023a4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80023a6:	797a      	ldrb	r2, [r7, #5]
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bfb8      	it	lt
 80023b0:	425b      	neglt	r3, r3
 80023b2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80023b4:	793a      	ldrb	r2, [r7, #4]
 80023b6:	79bb      	ldrb	r3, [r7, #6]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bfb8      	it	lt
 80023be:	425b      	neglt	r3, r3
 80023c0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80023c2:	79fa      	ldrb	r2, [r7, #7]
 80023c4:	797b      	ldrb	r3, [r7, #5]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d201      	bcs.n	80023ce <ssd1306_Line+0x46>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e001      	b.n	80023d2 <ssd1306_Line+0x4a>
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80023d4:	79ba      	ldrb	r2, [r7, #6]
 80023d6:	793b      	ldrb	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d201      	bcs.n	80023e0 <ssd1306_Line+0x58>
 80023dc:	2301      	movs	r3, #1
 80023de:	e001      	b.n	80023e4 <ssd1306_Line+0x5c>
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
 80023e4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80023ee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80023f2:	7939      	ldrb	r1, [r7, #4]
 80023f4:	797b      	ldrb	r3, [r7, #5]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff feac 	bl	8002154 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80023fc:	e024      	b.n	8002448 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80023fe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002402:	79b9      	ldrb	r1, [r7, #6]
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fea4 	bl	8002154 <ssd1306_DrawPixel>
        error2 = error * 2;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	425b      	negs	r3, r3
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	429a      	cmp	r2, r3
 800241a:	dd08      	ble.n	800242e <ssd1306_Line+0xa6>
            error -= deltaY;
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	4413      	add	r3, r2
 800242c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	429a      	cmp	r2, r3
 8002434:	da08      	bge.n	8002448 <ssd1306_Line+0xc0>
            error += deltaX;
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	79bb      	ldrb	r3, [r7, #6]
 8002444:	4413      	add	r3, r2
 8002446:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	797b      	ldrb	r3, [r7, #5]
 800244c:	429a      	cmp	r2, r3
 800244e:	d1d6      	bne.n	80023fe <ssd1306_Line+0x76>
 8002450:	79ba      	ldrb	r2, [r7, #6]
 8002452:	793b      	ldrb	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d1d2      	bne.n	80023fe <ssd1306_Line+0x76>
        }
    }
    return;
 8002458:	bf00      	nop
}
 800245a:	3724      	adds	r7, #36	; 0x24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd90      	pop	{r4, r7, pc}

08002460 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	4604      	mov	r4, r0
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	461a      	mov	r2, r3
 800246e:	4623      	mov	r3, r4
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	4603      	mov	r3, r0
 8002474:	71bb      	strb	r3, [r7, #6]
 8002476:	460b      	mov	r3, r1
 8002478:	717b      	strb	r3, [r7, #5]
 800247a:	4613      	mov	r3, r2
 800247c:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	425b      	negs	r3, r3
 8002482:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002488:	797b      	ldrb	r3, [r7, #5]
 800248a:	f1c3 0301 	rsb	r3, r3, #1
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db65      	blt.n	8002566 <ssd1306_DrawCircle+0x106>
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	2b3f      	cmp	r3, #63	; 0x3f
 800249e:	d862      	bhi.n	8002566 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	b2d8      	uxtb	r0, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	4413      	add	r3, r2
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	793a      	ldrb	r2, [r7, #4]
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7ff fe4c 	bl	8002154 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	4413      	add	r3, r2
 80024c4:	b2d8      	uxtb	r0, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	4413      	add	r3, r2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	793a      	ldrb	r2, [r7, #4]
 80024d2:	4619      	mov	r1, r3
 80024d4:	f7ff fe3e 	bl	8002154 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	4413      	add	r3, r2
 80024e0:	b2d8      	uxtb	r0, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	79ba      	ldrb	r2, [r7, #6]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	793a      	ldrb	r2, [r7, #4]
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7ff fe30 	bl	8002154 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	79fa      	ldrb	r2, [r7, #7]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	b2d8      	uxtb	r0, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	79ba      	ldrb	r2, [r7, #6]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	793a      	ldrb	r2, [r7, #4]
 800250a:	4619      	mov	r1, r3
 800250c:	f7ff fe22 	bl	8002154 <ssd1306_DrawPixel>
        e2 = err;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	dc13      	bgt.n	8002544 <ssd1306_DrawCircle+0xe4>
            y++;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	3301      	adds	r3, #1
 8002520:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	3301      	adds	r3, #1
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	425b      	negs	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d105      	bne.n	8002544 <ssd1306_DrawCircle+0xe4>
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	dc01      	bgt.n	8002544 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	dd08      	ble.n	800255e <ssd1306_DrawCircle+0xfe>
            x++;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3301      	adds	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	3301      	adds	r3, #1
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	dd9d      	ble.n	80024a0 <ssd1306_DrawCircle+0x40>

    return;
 8002564:	e000      	b.n	8002568 <ssd1306_DrawCircle+0x108>
        return;
 8002566:	bf00      	nop
}
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}

0800256e <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800256e:	b590      	push	{r4, r7, lr}
 8002570:	b085      	sub	sp, #20
 8002572:	af02      	add	r7, sp, #8
 8002574:	4604      	mov	r4, r0
 8002576:	4608      	mov	r0, r1
 8002578:	4611      	mov	r1, r2
 800257a:	461a      	mov	r2, r3
 800257c:	4623      	mov	r3, r4
 800257e:	71fb      	strb	r3, [r7, #7]
 8002580:	4603      	mov	r3, r0
 8002582:	71bb      	strb	r3, [r7, #6]
 8002584:	460b      	mov	r3, r1
 8002586:	717b      	strb	r3, [r7, #5]
 8002588:	4613      	mov	r3, r2
 800258a:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800258c:	79bc      	ldrb	r4, [r7, #6]
 800258e:	797a      	ldrb	r2, [r7, #5]
 8002590:	79b9      	ldrb	r1, [r7, #6]
 8002592:	79f8      	ldrb	r0, [r7, #7]
 8002594:	7e3b      	ldrb	r3, [r7, #24]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4623      	mov	r3, r4
 800259a:	f7ff fef5 	bl	8002388 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800259e:	793c      	ldrb	r4, [r7, #4]
 80025a0:	797a      	ldrb	r2, [r7, #5]
 80025a2:	79b9      	ldrb	r1, [r7, #6]
 80025a4:	7978      	ldrb	r0, [r7, #5]
 80025a6:	7e3b      	ldrb	r3, [r7, #24]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4623      	mov	r3, r4
 80025ac:	f7ff feec 	bl	8002388 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80025b0:	793c      	ldrb	r4, [r7, #4]
 80025b2:	79fa      	ldrb	r2, [r7, #7]
 80025b4:	7939      	ldrb	r1, [r7, #4]
 80025b6:	7978      	ldrb	r0, [r7, #5]
 80025b8:	7e3b      	ldrb	r3, [r7, #24]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4623      	mov	r3, r4
 80025be:	f7ff fee3 	bl	8002388 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80025c2:	79bc      	ldrb	r4, [r7, #6]
 80025c4:	79fa      	ldrb	r2, [r7, #7]
 80025c6:	7939      	ldrb	r1, [r7, #4]
 80025c8:	79f8      	ldrb	r0, [r7, #7]
 80025ca:	7e3b      	ldrb	r3, [r7, #24]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	4623      	mov	r3, r4
 80025d0:	f7ff feda 	bl	8002388 <ssd1306_Line>

    return;
 80025d4:	bf00      	nop
}
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}

080025dc <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4604      	mov	r4, r0
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4623      	mov	r3, r4
 80025ec:	71fb      	strb	r3, [r7, #7]
 80025ee:	4603      	mov	r3, r0
 80025f0:	71bb      	strb	r3, [r7, #6]
 80025f2:	460b      	mov	r3, r1
 80025f4:	717b      	strb	r3, [r7, #5]
 80025f6:	4613      	mov	r3, r2
 80025f8:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	797b      	ldrb	r3, [r7, #5]
 80025fe:	4293      	cmp	r3, r2
 8002600:	bf28      	it	cs
 8002602:	4613      	movcs	r3, r2
 8002604:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002606:	797a      	ldrb	r2, [r7, #5]
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	4293      	cmp	r3, r2
 800260c:	bf38      	it	cc
 800260e:	4613      	movcc	r3, r2
 8002610:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002612:	79ba      	ldrb	r2, [r7, #6]
 8002614:	793b      	ldrb	r3, [r7, #4]
 8002616:	4293      	cmp	r3, r2
 8002618:	bf28      	it	cs
 800261a:	4613      	movcs	r3, r2
 800261c:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800261e:	793a      	ldrb	r2, [r7, #4]
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	4293      	cmp	r3, r2
 8002624:	bf38      	it	cc
 8002626:	4613      	movcc	r3, r2
 8002628:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800262a:	7afb      	ldrb	r3, [r7, #11]
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e017      	b.n	8002660 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002630:	7b7b      	ldrb	r3, [r7, #13]
 8002632:	73bb      	strb	r3, [r7, #14]
 8002634:	e009      	b.n	800264a <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002636:	f897 2020 	ldrb.w	r2, [r7, #32]
 800263a:	7bf9      	ldrb	r1, [r7, #15]
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fd88 	bl	8002154 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	3301      	adds	r3, #1
 8002648:	73bb      	strb	r3, [r7, #14]
 800264a:	7bba      	ldrb	r2, [r7, #14]
 800264c:	7b3b      	ldrb	r3, [r7, #12]
 800264e:	429a      	cmp	r2, r3
 8002650:	d803      	bhi.n	800265a <ssd1306_FillRectangle+0x7e>
 8002652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002656:	2b00      	cmp	r3, #0
 8002658:	daed      	bge.n	8002636 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	3301      	adds	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	7abb      	ldrb	r3, [r7, #10]
 8002664:	429a      	cmp	r2, r3
 8002666:	d803      	bhi.n	8002670 <ssd1306_FillRectangle+0x94>
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b3f      	cmp	r3, #63	; 0x3f
 800266c:	d9e0      	bls.n	8002630 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800266e:	bf00      	nop
 8002670:	bf00      	nop
}
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}

08002678 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	603a      	str	r2, [r7, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
 8002686:	460b      	mov	r3, r1
 8002688:	71bb      	strb	r3, [r7, #6]
 800268a:	4613      	mov	r3, r2
 800268c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800268e:	797b      	ldrb	r3, [r7, #5]
 8002690:	3307      	adds	r3, #7
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <ssd1306_DrawBitmap+0x20>
 8002696:	3307      	adds	r3, #7
 8002698:	10db      	asrs	r3, r3, #3
 800269a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db3e      	blt.n	8002726 <ssd1306_DrawBitmap+0xae>
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	2b3f      	cmp	r3, #63	; 0x3f
 80026ac:	d83b      	bhi.n	8002726 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80026ae:	2300      	movs	r3, #0
 80026b0:	73bb      	strb	r3, [r7, #14]
 80026b2:	e033      	b.n	800271c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80026b4:	2300      	movs	r3, #0
 80026b6:	737b      	strb	r3, [r7, #13]
 80026b8:	e026      	b.n	8002708 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80026ba:	7b7b      	ldrb	r3, [r7, #13]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e00d      	b.n	80026e8 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
 80026ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	7b7a      	ldrb	r2, [r7, #13]
 80026d8:	08d2      	lsrs	r2, r2, #3
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4413      	add	r3, r2
 80026de:	461a      	mov	r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	da08      	bge.n	8002702 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80026f0:	79fa      	ldrb	r2, [r7, #7]
 80026f2:	7b7b      	ldrb	r3, [r7, #13]
 80026f4:	4413      	add	r3, r2
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	7f3a      	ldrb	r2, [r7, #28]
 80026fa:	79b9      	ldrb	r1, [r7, #6]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fd29 	bl	8002154 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002702:	7b7b      	ldrb	r3, [r7, #13]
 8002704:	3301      	adds	r3, #1
 8002706:	737b      	strb	r3, [r7, #13]
 8002708:	7b7a      	ldrb	r2, [r7, #13]
 800270a:	797b      	ldrb	r3, [r7, #5]
 800270c:	429a      	cmp	r2, r3
 800270e:	d3d4      	bcc.n	80026ba <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	3301      	adds	r3, #1
 8002714:	73bb      	strb	r3, [r7, #14]
 8002716:	79bb      	ldrb	r3, [r7, #6]
 8002718:	3301      	adds	r3, #1
 800271a:	71bb      	strb	r3, [r7, #6]
 800271c:	7bba      	ldrb	r2, [r7, #14]
 800271e:	7e3b      	ldrb	r3, [r7, #24]
 8002720:	429a      	cmp	r2, r3
 8002722:	d3c7      	bcc.n	80026b4 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002724:	e000      	b.n	8002728 <ssd1306_DrawBitmap+0xb0>
        return;
 8002726:	bf00      	nop
}
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002738:	2381      	movs	r3, #129	; 0x81
 800273a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fc2c 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fc28 	bl	8001f9c <ssd1306_WriteCommand>
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002764:	23af      	movs	r3, #175	; 0xaf
 8002766:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <ssd1306_SetDisplayOn+0x38>)
 800276a:	2201      	movs	r2, #1
 800276c:	715a      	strb	r2, [r3, #5]
 800276e:	e004      	b.n	800277a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002770:	23ae      	movs	r3, #174	; 0xae
 8002772:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <ssd1306_SetDisplayOn+0x38>)
 8002776:	2200      	movs	r2, #0
 8002778:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fc0d 	bl	8001f9c <ssd1306_WriteCommand>
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000c80 	.word	0x20000c80

08002790 <statemachine>:
		};



//le code qui permet d'avoir les ecran de donnée que l'on souhaite, changeable a souhait on peut d'ailleur rajouter des état ou rajouter des fonctionnalité au sein de chaque état, pas encore décidé de la version définitive.
void statemachine(void){
 8002790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002792:	ed2d 8b02 	vpush	{d8}
 8002796:	b0b3      	sub	sp, #204	; 0xcc
 8002798:	af04      	add	r7, sp, #16
	switch(state){
 800279a:	4b97      	ldr	r3, [pc, #604]	; (80029f8 <statemachine+0x268>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b06      	cmp	r3, #6
 80027a0:	f201 8378 	bhi.w	8003e94 <statemachine+0x1704>
 80027a4:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <statemachine+0x1c>)
 80027a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027aa:	bf00      	nop
 80027ac:	080027c9 	.word	0x080027c9
 80027b0:	08002c3b 	.word	0x08002c3b
 80027b4:	0800318b 	.word	0x0800318b
 80027b8:	0800383b 	.word	0x0800383b
 80027bc:	080039d9 	.word	0x080039d9
 80027c0:	08003ba5 	.word	0x08003ba5
 80027c4:	08003d97 	.word	0x08003d97
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7ff fc83 	bl	80020d4 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 80027ce:	2120      	movs	r1, #32
 80027d0:	2020      	movs	r0, #32
 80027d2:	f7ff fdc1 	bl	8002358 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 80027d6:	4989      	ldr	r1, [pc, #548]	; (80029fc <statemachine+0x26c>)
 80027d8:	4889      	ldr	r0, [pc, #548]	; (8002a00 <statemachine+0x270>)
 80027da:	f7ff fb27 	bl	8001e2c <nmea_parse>
				 if(myData.speed>=vitmax){
 80027de:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <statemachine+0x270>)
 80027e0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80027e4:	4b87      	ldr	r3, [pc, #540]	; (8002a04 <statemachine+0x274>)
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	db03      	blt.n	80027fc <statemachine+0x6c>
									 vitmax=myData.speed;
 80027f4:	4b82      	ldr	r3, [pc, #520]	; (8002a00 <statemachine+0x270>)
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	4a82      	ldr	r2, [pc, #520]	; (8002a04 <statemachine+0x274>)
 80027fa:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
								 float sec=0;
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
								 if (myData.speed!=0){
 800280c:	4b7c      	ldr	r3, [pc, #496]	; (8002a00 <statemachine+0x270>)
 800280e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002812:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281a:	d035      	beq.n	8002888 <statemachine+0xf8>
									 pace=1000/(60*myData.speed);
 800281c:	4b78      	ldr	r3, [pc, #480]	; (8002a00 <statemachine+0x270>)
 800281e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002822:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002a08 <statemachine+0x278>
 8002826:	ee27 7a87 	vmul.f32	s14, s15, s14
 800282a:	eddf 6a78 	vldr	s13, [pc, #480]	; 8002a0c <statemachine+0x27c>
 800282e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002832:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
									 sec=(pace-floor(pace))*60;
 8002836:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800283a:	f7fd fe85 	bl	8000548 <__aeabi_f2d>
 800283e:	4604      	mov	r4, r0
 8002840:	460d      	mov	r5, r1
 8002842:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002846:	f7fd fe7f 	bl	8000548 <__aeabi_f2d>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	ec43 2b10 	vmov	d0, r2, r3
 8002852:	f013 f809 	bl	8015868 <floor>
 8002856:	ec53 2b10 	vmov	r2, r3, d0
 800285a:	4620      	mov	r0, r4
 800285c:	4629      	mov	r1, r5
 800285e:	f7fd fd13 	bl	8000288 <__aeabi_dsub>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <statemachine+0x280>)
 8002870:	f7fd fec2 	bl	80005f8 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f7fe f9b4 	bl	8000be8 <__aeabi_d2f>
 8002880:	4603      	mov	r3, r0
 8002882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002886:	e002      	b.n	800288e <statemachine+0xfe>
								 }
								 else {
									 pace=9999;//en cas de division par 0, techniquement le temps devient infini mais ce n'est pas intérréssant
 8002888:	4b62      	ldr	r3, [pc, #392]	; (8002a14 <statemachine+0x284>)
 800288a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
								 }


				  switch(spdstate){
 800288e:	4b62      	ldr	r3, [pc, #392]	; (8002a18 <statemachine+0x288>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b02      	cmp	r3, #2
 8002894:	f000 8158 	beq.w	8002b48 <statemachine+0x3b8>
 8002898:	2b02      	cmp	r3, #2
 800289a:	f300 81be 	bgt.w	8002c1a <statemachine+0x48a>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <statemachine+0x11a>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f000 80c8 	beq.w	8002a38 <statemachine+0x2a8>
 80028a8:	e1b7      	b.n	8002c1a <statemachine+0x48a>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 80028aa:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <statemachine+0x270>)
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d171      	bne.n	8002996 <statemachine+0x206>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 80028b2:	2014      	movs	r0, #20
 80028b4:	f00e f9ea 	bl	8010c8c <malloc>
 80028b8:	4603      	mov	r3, r0
 80028ba:	65bb      	str	r3, [r7, #88]	; 0x58
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);//amélioration possible la stocker en eeprom
 80028bc:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <statemachine+0x274>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fe41 	bl	8000548 <__aeabi_f2d>
 80028c6:	a34a      	add	r3, pc, #296	; (adr r3, 80029f0 <statemachine+0x260>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	f7fd fe94 	bl	80005f8 <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	e9cd 2300 	strd	r2, r3, [sp]
 80028d8:	4a50      	ldr	r2, [pc, #320]	; (8002a1c <statemachine+0x28c>)
 80028da:	210f      	movs	r1, #15
 80028dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028de:	f010 f8d1 	bl	8012a84 <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 80028e2:	2120      	movs	r1, #32
 80028e4:	2020      	movs	r0, #32
 80028e6:	f7ff fd37 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80028ea:	4a4d      	ldr	r2, [pc, #308]	; (8002a20 <statemachine+0x290>)
 80028ec:	2301      	movs	r3, #1
 80028ee:	ca06      	ldmia	r2, {r1, r2}
 80028f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028f2:	f7ff fd0b 	bl	800230c <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80028f6:	4b42      	ldr	r3, [pc, #264]	; (8002a00 <statemachine+0x270>)
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fe24 	bl	8000548 <__aeabi_f2d>
 8002900:	a33b      	add	r3, pc, #236	; (adr r3, 80029f0 <statemachine+0x260>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fe77 	bl	80005f8 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	e9cd 2300 	strd	r2, r3, [sp]
 8002912:	4a44      	ldr	r2, [pc, #272]	; (8002a24 <statemachine+0x294>)
 8002914:	210f      	movs	r1, #15
 8002916:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002918:	f010 f8b4 	bl	8012a84 <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 800291c:	212a      	movs	r1, #42	; 0x2a
 800291e:	2020      	movs	r0, #32
 8002920:	f7ff fd1a 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002924:	4a3e      	ldr	r2, [pc, #248]	; (8002a20 <statemachine+0x290>)
 8002926:	2301      	movs	r3, #1
 8002928:	ca06      	ldmia	r2, {r1, r2}
 800292a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800292c:	f7ff fcee 	bl	800230c <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));//affichage au format minute puis seconde
 8002930:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002934:	f7fd fe08 	bl	8000548 <__aeabi_f2d>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	ec43 2b10 	vmov	d0, r2, r3
 8002940:	f012 ff92 	bl	8015868 <floor>
 8002944:	eeb0 8a40 	vmov.f32	s16, s0
 8002948:	eef0 8a60 	vmov.f32	s17, s1
 800294c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002950:	f7fd fdfa 	bl	8000548 <__aeabi_f2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	ec43 2b10 	vmov	d0, r2, r3
 800295c:	f012 ff84 	bl	8015868 <floor>
 8002960:	eeb0 7a40 	vmov.f32	s14, s0
 8002964:	eef0 7a60 	vmov.f32	s15, s1
 8002968:	ed8d 7b02 	vstr	d7, [sp, #8]
 800296c:	ed8d 8b00 	vstr	d8, [sp]
 8002970:	4a2d      	ldr	r2, [pc, #180]	; (8002a28 <statemachine+0x298>)
 8002972:	210f      	movs	r1, #15
 8002974:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002976:	f010 f885 	bl	8012a84 <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 800297a:	2134      	movs	r1, #52	; 0x34
 800297c:	2020      	movs	r0, #32
 800297e:	f7ff fceb 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002982:	4a27      	ldr	r2, [pc, #156]	; (8002a20 <statemachine+0x290>)
 8002984:	2301      	movs	r3, #1
 8002986:	ca06      	ldmia	r2, {r1, r2}
 8002988:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800298a:	f7ff fcbf 	bl	800230c <ssd1306_WriteString>
					 				 						free(str);
 800298e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002990:	f00e f984 	bl	8010c9c <free>
 8002994:	e01b      	b.n	80029ce <statemachine+0x23e>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002996:	2014      	movs	r0, #20
 8002998:	f00e f978 	bl	8010c8c <malloc>
 800299c:	4603      	mov	r3, r0
 800299e:	65fb      	str	r3, [r7, #92]	; 0x5c
					 				 						ssd1306_SetCursor(32, 32);
 80029a0:	2120      	movs	r1, #32
 80029a2:	2020      	movs	r0, #32
 80029a4:	f7ff fcd8 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <statemachine+0x290>)
 80029aa:	2301      	movs	r3, #1
 80029ac:	ca06      	ldmia	r2, {r1, r2}
 80029ae:	481f      	ldr	r0, [pc, #124]	; (8002a2c <statemachine+0x29c>)
 80029b0:	f7ff fcac 	bl	800230c <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	2020      	movs	r0, #32
 80029b8:	f7ff fcce 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <statemachine+0x290>)
 80029be:	2301      	movs	r3, #1
 80029c0:	ca06      	ldmia	r2, {r1, r2}
 80029c2:	481b      	ldr	r0, [pc, #108]	; (8002a30 <statemachine+0x2a0>)
 80029c4:	f7ff fca2 	bl	800230c <ssd1306_WriteString>
					 				 						free(str);
 80029c8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80029ca:	f00e f967 	bl	8010c9c <free>
					 				 					}
					 if(BTN_B>=1){
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <statemachine+0x2a4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f340 811c 	ble.w	8002c10 <statemachine+0x480>
					 					 				 					spdstate++;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <statemachine+0x288>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <statemachine+0x288>)
 80029e2:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <statemachine+0x2a4>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 80029ea:	e111      	b.n	8002c10 <statemachine+0x480>
 80029ec:	f3af 8000 	nop.w
 80029f0:	cccccccd 	.word	0xcccccccd
 80029f4:	400ccccc 	.word	0x400ccccc
 80029f8:	20000828 	.word	0x20000828
 80029fc:	200005e0 	.word	0x200005e0
 8002a00:	200007e0 	.word	0x200007e0
 8002a04:	20000c88 	.word	0x20000c88
 8002a08:	42700000 	.word	0x42700000
 8002a0c:	447a0000 	.word	0x447a0000
 8002a10:	404e0000 	.word	0x404e0000
 8002a14:	461c3c00 	.word	0x461c3c00
 8002a18:	2000082a 	.word	0x2000082a
 8002a1c:	08016a54 	.word	0x08016a54
 8002a20:	20000008 	.word	0x20000008
 8002a24:	08016a60 	.word	0x08016a60
 8002a28:	08016a68 	.word	0x08016a68
 8002a2c:	08016a7c 	.word	0x08016a7c
 8002a30:	08016a84 	.word	0x08016a84
 8002a34:	20000824 	.word	0x20000824
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002a38:	4b8f      	ldr	r3, [pc, #572]	; (8002c78 <statemachine+0x4e8>)
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d159      	bne.n	8002af4 <statemachine+0x364>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8002a40:	2014      	movs	r0, #20
 8002a42:	f00e f923 	bl	8010c8c <malloc>
 8002a46:	4603      	mov	r3, r0
 8002a48:	663b      	str	r3, [r7, #96]	; 0x60
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8002a4a:	4b8b      	ldr	r3, [pc, #556]	; (8002c78 <statemachine+0x4e8>)
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd7a 	bl	8000548 <__aeabi_f2d>
 8002a54:	a384      	add	r3, pc, #528	; (adr r3, 8002c68 <statemachine+0x4d8>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd fdcd 	bl	80005f8 <__aeabi_dmul>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	e9cd 2300 	strd	r2, r3, [sp]
 8002a66:	4a85      	ldr	r2, [pc, #532]	; (8002c7c <statemachine+0x4ec>)
 8002a68:	210f      	movs	r1, #15
 8002a6a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a6c:	f010 f80a 	bl	8012a84 <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 8002a70:	2136      	movs	r1, #54	; 0x36
 8002a72:	2020      	movs	r0, #32
 8002a74:	f7ff fc70 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002a78:	4a81      	ldr	r2, [pc, #516]	; (8002c80 <statemachine+0x4f0>)
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	ca06      	ldmia	r2, {r1, r2}
 8002a7e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a80:	f7ff fc44 	bl	800230c <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8002a84:	2301      	movs	r3, #1
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2335      	movs	r3, #53	; 0x35
 8002a8a:	225f      	movs	r2, #95	; 0x5f
 8002a8c:	2126      	movs	r1, #38	; 0x26
 8002a8e:	2020      	movs	r0, #32
 8002a90:	f7ff fd6d 	bl	800256e <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8002a94:	4b78      	ldr	r3, [pc, #480]	; (8002c78 <statemachine+0x4e8>)
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fd fd55 	bl	8000548 <__aeabi_f2d>
 8002a9e:	a374      	add	r3, pc, #464	; (adr r3, 8002c70 <statemachine+0x4e0>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f7fd fda8 	bl	80005f8 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <statemachine+0x4f4>)
 8002ab6:	f7fd fbe9 	bl	800028c <__adddf3>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	ec43 2b17 	vmov	d7, r2, r3
 8002ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ac6:	eef0 0a67 	vmov.f32	s1, s15
 8002aca:	f012 fecd 	bl	8015868 <floor>
 8002ace:	ec53 2b10 	vmov	r2, r3, d0
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7fe f83f 	bl	8000b58 <__aeabi_d2iz>
 8002ada:	4603      	mov	r3, r0
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	2301      	movs	r3, #1
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2335      	movs	r3, #53	; 0x35
 8002ae4:	2126      	movs	r1, #38	; 0x26
 8002ae6:	2020      	movs	r0, #32
 8002ae8:	f7ff fd78 	bl	80025dc <ssd1306_FillRectangle>

					 				 						free(str);
 8002aec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002aee:	f00e f8d5 	bl	8010c9c <free>
 8002af2:	e01b      	b.n	8002b2c <statemachine+0x39c>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002af4:	2014      	movs	r0, #20
 8002af6:	f00e f8c9 	bl	8010c8c <malloc>
 8002afa:	4603      	mov	r3, r0
 8002afc:	667b      	str	r3, [r7, #100]	; 0x64
					 				 						ssd1306_SetCursor(32, 32);
 8002afe:	2120      	movs	r1, #32
 8002b00:	2020      	movs	r0, #32
 8002b02:	f7ff fc29 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 8002b06:	4a5e      	ldr	r2, [pc, #376]	; (8002c80 <statemachine+0x4f0>)
 8002b08:	2301      	movs	r3, #1
 8002b0a:	ca06      	ldmia	r2, {r1, r2}
 8002b0c:	485e      	ldr	r0, [pc, #376]	; (8002c88 <statemachine+0x4f8>)
 8002b0e:	f7ff fbfd 	bl	800230c <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	2020      	movs	r0, #32
 8002b16:	f7ff fc1f 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002b1a:	4a59      	ldr	r2, [pc, #356]	; (8002c80 <statemachine+0x4f0>)
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	ca06      	ldmia	r2, {r1, r2}
 8002b20:	485a      	ldr	r0, [pc, #360]	; (8002c8c <statemachine+0x4fc>)
 8002b22:	f7ff fbf3 	bl	800230c <ssd1306_WriteString>
					 				 						free(str);
 8002b26:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002b28:	f00e f8b8 	bl	8010c9c <free>
					 				 					}
					 if(BTN_B>=1){
 8002b2c:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <statemachine+0x500>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	dd6f      	ble.n	8002c14 <statemachine+0x484>
					 				 					spdstate++;
 8002b34:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <statemachine+0x504>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	4b55      	ldr	r3, [pc, #340]	; (8002c94 <statemachine+0x504>)
 8002b3e:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 8002b40:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <statemachine+0x500>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 8002b46:	e065      	b.n	8002c14 <statemachine+0x484>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 8002b48:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <statemachine+0x4e8>)
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d12f      	bne.n	8002bb0 <statemachine+0x420>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002b50:	2014      	movs	r0, #20
 8002b52:	f00e f89b 	bl	8010c8c <malloc>
 8002b56:	4603      	mov	r3, r0
 8002b58:	66bb      	str	r3, [r7, #104]	; 0x68

					 				 						ssd1306_SetCursor(32, 32);
 8002b5a:	2120      	movs	r1, #32
 8002b5c:	2020      	movs	r0, #32
 8002b5e:	f7ff fbfb 	bl	8002358 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 8002b62:	4b45      	ldr	r3, [pc, #276]	; (8002c78 <statemachine+0x4e8>)
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fcee 	bl	8000548 <__aeabi_f2d>
 8002b6c:	a33e      	add	r3, pc, #248	; (adr r3, 8002c68 <statemachine+0x4d8>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	f7fd fd41 	bl	80005f8 <__aeabi_dmul>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	e9cd 2300 	strd	r2, r3, [sp]
 8002b7e:	4a46      	ldr	r2, [pc, #280]	; (8002c98 <statemachine+0x508>)
 8002b80:	210f      	movs	r1, #15
 8002b82:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002b84:	f00f ff7e 	bl	8012a84 <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 8002b88:	4a44      	ldr	r2, [pc, #272]	; (8002c9c <statemachine+0x50c>)
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	ca06      	ldmia	r2, {r1, r2}
 8002b8e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002b90:	f7ff fbbc 	bl	800230c <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 54);
 8002b94:	2136      	movs	r1, #54	; 0x36
 8002b96:	2020      	movs	r0, #32
 8002b98:	f7ff fbde 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("kmh", Font_6x8, White);
 8002b9c:	4a38      	ldr	r2, [pc, #224]	; (8002c80 <statemachine+0x4f0>)
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	ca06      	ldmia	r2, {r1, r2}
 8002ba2:	483f      	ldr	r0, [pc, #252]	; (8002ca0 <statemachine+0x510>)
 8002ba4:	f7ff fbb2 	bl	800230c <ssd1306_WriteString>

					 				 						free(str);
 8002ba8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002baa:	f00e f877 	bl	8010c9c <free>
 8002bae:	e01b      	b.n	8002be8 <statemachine+0x458>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002bb0:	2014      	movs	r0, #20
 8002bb2:	f00e f86b 	bl	8010c8c <malloc>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
						 ssd1306_SetCursor(32, 32);
 8002bba:	2120      	movs	r1, #32
 8002bbc:	2020      	movs	r0, #32
 8002bbe:	f7ff fbcb 	bl	8002358 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 8002bc2:	4a2f      	ldr	r2, [pc, #188]	; (8002c80 <statemachine+0x4f0>)
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	ca06      	ldmia	r2, {r1, r2}
 8002bc8:	4836      	ldr	r0, [pc, #216]	; (8002ca4 <statemachine+0x514>)
 8002bca:	f7ff fb9f 	bl	800230c <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8002bce:	212c      	movs	r1, #44	; 0x2c
 8002bd0:	2020      	movs	r0, #32
 8002bd2:	f7ff fbc1 	bl	8002358 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002bd6:	4a2a      	ldr	r2, [pc, #168]	; (8002c80 <statemachine+0x4f0>)
 8002bd8:	2301      	movs	r3, #1
 8002bda:	ca06      	ldmia	r2, {r1, r2}
 8002bdc:	482b      	ldr	r0, [pc, #172]	; (8002c8c <statemachine+0x4fc>)
 8002bde:	f7ff fb95 	bl	800230c <ssd1306_WriteString>
						 free(str);
 8002be2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002be4:	f00e f85a 	bl	8010c9c <free>
					 }

					 if(BTN_B>=1){
 8002be8:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <statemachine+0x500>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	dd13      	ble.n	8002c18 <statemachine+0x488>
					 					 				 					spdstate--;
 8002bf0:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <statemachine+0x504>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <statemachine+0x504>)
 8002bfa:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <statemachine+0x504>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <statemachine+0x504>)
 8002c06:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8002c08:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <statemachine+0x500>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8002c0e:	e003      	b.n	8002c18 <statemachine+0x488>
					 break;
 8002c10:	bf00      	nop
 8002c12:	e002      	b.n	8002c1a <statemachine+0x48a>
					 break;
 8002c14:	bf00      	nop
 8002c16:	e000      	b.n	8002c1a <statemachine+0x48a>
					 break;
 8002c18:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8002c1a:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <statemachine+0x518>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f341 812a 	ble.w	8003e78 <statemachine+0x16e8>
				 					state++;
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <statemachine+0x51c>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <statemachine+0x51c>)
 8002c2e:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8002c30:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <statemachine+0x518>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 8002c36:	f001 b91f 	b.w	8003e78 <statemachine+0x16e8>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7ff fa4a 	bl	80020d4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8002c40:	491b      	ldr	r1, [pc, #108]	; (8002cb0 <statemachine+0x520>)
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <statemachine+0x4e8>)
 8002c44:	f7ff f8f2 	bl	8001e2c <nmea_parse>
			  switch(posstate){
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <statemachine+0x524>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	f200 828c 	bhi.w	800316a <statemachine+0x9da>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <statemachine+0x4c8>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002cb9 	.word	0x08002cb9
 8002c5c:	08002db5 	.word	0x08002db5
 8002c60:	08002eab 	.word	0x08002eab
 8002c64:	08002fef 	.word	0x08002fef
 8002c68:	cccccccd 	.word	0xcccccccd
 8002c6c:	400ccccc 	.word	0x400ccccc
 8002c70:	c28f5c29 	.word	0xc28f5c29
 8002c74:	3fe428f5 	.word	0x3fe428f5
 8002c78:	200007e0 	.word	0x200007e0
 8002c7c:	08016a60 	.word	0x08016a60
 8002c80:	20000008 	.word	0x20000008
 8002c84:	40400000 	.word	0x40400000
 8002c88:	08016a90 	.word	0x08016a90
 8002c8c:	08016a84 	.word	0x08016a84
 8002c90:	20000824 	.word	0x20000824
 8002c94:	2000082a 	.word	0x2000082a
 8002c98:	08016a98 	.word	0x08016a98
 8002c9c:	20000018 	.word	0x20000018
 8002ca0:	08016aa0 	.word	0x08016aa0
 8002ca4:	08016aa4 	.word	0x08016aa4
 8002ca8:	20000820 	.word	0x20000820
 8002cac:	20000828 	.word	0x20000828
 8002cb0:	200005e0 	.word	0x200005e0
 8002cb4:	2000082b 	.word	0x2000082b

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8002cb8:	4ba9      	ldr	r3, [pc, #676]	; (8002f60 <statemachine+0x7d0>)
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d14e      	bne.n	8002d5e <statemachine+0x5ce>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002cc0:	2014      	movs	r0, #20
 8002cc2:	f00d ffe3 	bl	8010c8c <malloc>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	673b      	str	r3, [r7, #112]	; 0x70
				  						ssd1306_SetCursor(32, 32);
 8002cca:	2120      	movs	r1, #32
 8002ccc:	2020      	movs	r0, #32
 8002cce:	f7ff fb43 	bl	8002358 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8002cd2:	4aa4      	ldr	r2, [pc, #656]	; (8002f64 <statemachine+0x7d4>)
 8002cd4:	210f      	movs	r1, #15
 8002cd6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002cd8:	f00f fed4 	bl	8012a84 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002cdc:	4aa2      	ldr	r2, [pc, #648]	; (8002f68 <statemachine+0x7d8>)
 8002cde:	2301      	movs	r3, #1
 8002ce0:	ca06      	ldmia	r2, {r1, r2}
 8002ce2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ce4:	f7ff fb12 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002ce8:	4b9d      	ldr	r3, [pc, #628]	; (8002f60 <statemachine+0x7d0>)
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	e9cd 2300 	strd	r2, r3, [sp]
 8002cf2:	4a9e      	ldr	r2, [pc, #632]	; (8002f6c <statemachine+0x7dc>)
 8002cf4:	210f      	movs	r1, #15
 8002cf6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002cf8:	f00f fec4 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002cfc:	2128      	movs	r1, #40	; 0x28
 8002cfe:	2020      	movs	r0, #32
 8002d00:	f7ff fb2a 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002d04:	4a98      	ldr	r2, [pc, #608]	; (8002f68 <statemachine+0x7d8>)
 8002d06:	2301      	movs	r3, #1
 8002d08:	ca06      	ldmia	r2, {r1, r2}
 8002d0a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d0c:	f7ff fafe 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8002d10:	4a97      	ldr	r2, [pc, #604]	; (8002f70 <statemachine+0x7e0>)
 8002d12:	210f      	movs	r1, #15
 8002d14:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d16:	f00f feb5 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002d1a:	2130      	movs	r1, #48	; 0x30
 8002d1c:	2020      	movs	r0, #32
 8002d1e:	f7ff fb1b 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002d22:	4a91      	ldr	r2, [pc, #580]	; (8002f68 <statemachine+0x7d8>)
 8002d24:	2301      	movs	r3, #1
 8002d26:	ca06      	ldmia	r2, {r1, r2}
 8002d28:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d2a:	f7ff faef 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8002d2e:	4b8c      	ldr	r3, [pc, #560]	; (8002f60 <statemachine+0x7d0>)
 8002d30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d34:	e9cd 2300 	strd	r2, r3, [sp]
 8002d38:	4a8c      	ldr	r2, [pc, #560]	; (8002f6c <statemachine+0x7dc>)
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d3e:	f00f fea1 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002d42:	2138      	movs	r1, #56	; 0x38
 8002d44:	2020      	movs	r0, #32
 8002d46:	f7ff fb07 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002d4a:	4a87      	ldr	r2, [pc, #540]	; (8002f68 <statemachine+0x7d8>)
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	ca06      	ldmia	r2, {r1, r2}
 8002d50:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d52:	f7ff fadb 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002d56:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d58:	f00d ffa0 	bl	8010c9c <free>
 8002d5c:	e01b      	b.n	8002d96 <statemachine+0x606>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002d5e:	2014      	movs	r0, #20
 8002d60:	f00d ff94 	bl	8010c8c <malloc>
 8002d64:	4603      	mov	r3, r0
 8002d66:	677b      	str	r3, [r7, #116]	; 0x74
				  						ssd1306_SetCursor(32, 32);
 8002d68:	2120      	movs	r1, #32
 8002d6a:	2020      	movs	r0, #32
 8002d6c:	f7ff faf4 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8002d70:	4a7d      	ldr	r2, [pc, #500]	; (8002f68 <statemachine+0x7d8>)
 8002d72:	2301      	movs	r3, #1
 8002d74:	ca06      	ldmia	r2, {r1, r2}
 8002d76:	487f      	ldr	r0, [pc, #508]	; (8002f74 <statemachine+0x7e4>)
 8002d78:	f7ff fac8 	bl	800230c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	2020      	movs	r0, #32
 8002d80:	f7ff faea 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002d84:	4a78      	ldr	r2, [pc, #480]	; (8002f68 <statemachine+0x7d8>)
 8002d86:	2301      	movs	r3, #1
 8002d88:	ca06      	ldmia	r2, {r1, r2}
 8002d8a:	487b      	ldr	r0, [pc, #492]	; (8002f78 <statemachine+0x7e8>)
 8002d8c:	f7ff fabe 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002d90:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002d92:	f00d ff83 	bl	8010c9c <free>
				  					}
				  if(BTN_B>=1){
 8002d96:	4b79      	ldr	r3, [pc, #484]	; (8002f7c <statemachine+0x7ec>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f340 81de 	ble.w	800315c <statemachine+0x9cc>
					  posstate++;
 8002da0:	4b77      	ldr	r3, [pc, #476]	; (8002f80 <statemachine+0x7f0>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <statemachine+0x7f0>)
 8002daa:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8002dac:	4b73      	ldr	r3, [pc, #460]	; (8002f7c <statemachine+0x7ec>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]





				  break;
 8002db2:	e1d3      	b.n	800315c <statemachine+0x9cc>
			  case STATE_LAT:
				  if(myData.fix == 1){
 8002db4:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <statemachine+0x7d0>)
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d14b      	bne.n	8002e54 <statemachine+0x6c4>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002dbc:	2014      	movs	r0, #20
 8002dbe:	f00d ff65 	bl	8010c8c <malloc>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	67bb      	str	r3, [r7, #120]	; 0x78
				  						ssd1306_SetCursor(32, 32);
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	2020      	movs	r0, #32
 8002dca:	f7ff fac5 	bl	8002358 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 8002dce:	4a6d      	ldr	r2, [pc, #436]	; (8002f84 <statemachine+0x7f4>)
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002dd4:	f00f fe56 	bl	8012a84 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002dd8:	4a63      	ldr	r2, [pc, #396]	; (8002f68 <statemachine+0x7d8>)
 8002dda:	2301      	movs	r3, #1
 8002ddc:	ca06      	ldmia	r2, {r1, r2}
 8002dde:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002de0:	f7ff fa94 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002de4:	4b5e      	ldr	r3, [pc, #376]	; (8002f60 <statemachine+0x7d0>)
 8002de6:	7a1b      	ldrb	r3, [r3, #8]
 8002de8:	4a67      	ldr	r2, [pc, #412]	; (8002f88 <statemachine+0x7f8>)
 8002dea:	210f      	movs	r1, #15
 8002dec:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002dee:	f00f fe49 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002df2:	2128      	movs	r1, #40	; 0x28
 8002df4:	2020      	movs	r0, #32
 8002df6:	f7ff faaf 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002dfa:	4a5b      	ldr	r2, [pc, #364]	; (8002f68 <statemachine+0x7d8>)
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	ca06      	ldmia	r2, {r1, r2}
 8002e00:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e02:	f7ff fa83 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 8002e06:	4a57      	ldr	r2, [pc, #348]	; (8002f64 <statemachine+0x7d4>)
 8002e08:	210f      	movs	r1, #15
 8002e0a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e0c:	f00f fe3a 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002e10:	2130      	movs	r1, #48	; 0x30
 8002e12:	2020      	movs	r0, #32
 8002e14:	f7ff faa0 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002e18:	4a53      	ldr	r2, [pc, #332]	; (8002f68 <statemachine+0x7d8>)
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	ca06      	ldmia	r2, {r1, r2}
 8002e1e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e20:	f7ff fa74 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8002e24:	4b4e      	ldr	r3, [pc, #312]	; (8002f60 <statemachine+0x7d0>)
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	e9cd 2300 	strd	r2, r3, [sp]
 8002e2e:	4a4f      	ldr	r2, [pc, #316]	; (8002f6c <statemachine+0x7dc>)
 8002e30:	210f      	movs	r1, #15
 8002e32:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e34:	f00f fe26 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002e38:	2138      	movs	r1, #56	; 0x38
 8002e3a:	2020      	movs	r0, #32
 8002e3c:	f7ff fa8c 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002e40:	4a49      	ldr	r2, [pc, #292]	; (8002f68 <statemachine+0x7d8>)
 8002e42:	2301      	movs	r3, #1
 8002e44:	ca06      	ldmia	r2, {r1, r2}
 8002e46:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e48:	f7ff fa60 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002e4c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e4e:	f00d ff25 	bl	8010c9c <free>
 8002e52:	e01b      	b.n	8002e8c <statemachine+0x6fc>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002e54:	2014      	movs	r0, #20
 8002e56:	f00d ff19 	bl	8010c8c <malloc>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
				  						ssd1306_SetCursor(32, 32);
 8002e5e:	2120      	movs	r1, #32
 8002e60:	2020      	movs	r0, #32
 8002e62:	f7ff fa79 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 8002e66:	4a40      	ldr	r2, [pc, #256]	; (8002f68 <statemachine+0x7d8>)
 8002e68:	2301      	movs	r3, #1
 8002e6a:	ca06      	ldmia	r2, {r1, r2}
 8002e6c:	4847      	ldr	r0, [pc, #284]	; (8002f8c <statemachine+0x7fc>)
 8002e6e:	f7ff fa4d 	bl	800230c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	2020      	movs	r0, #32
 8002e76:	f7ff fa6f 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002e7a:	4a3b      	ldr	r2, [pc, #236]	; (8002f68 <statemachine+0x7d8>)
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	ca06      	ldmia	r2, {r1, r2}
 8002e80:	483d      	ldr	r0, [pc, #244]	; (8002f78 <statemachine+0x7e8>)
 8002e82:	f7ff fa43 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002e86:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002e88:	f00d ff08 	bl	8010c9c <free>
				  					}
				  if(BTN_B>=1){
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <statemachine+0x7ec>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f340 8165 	ble.w	8003160 <statemachine+0x9d0>
				  					  posstate++;
 8002e96:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <statemachine+0x7f0>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <statemachine+0x7f0>)
 8002ea0:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8002ea2:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <statemachine+0x7ec>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 8002ea8:	e15a      	b.n	8003160 <statemachine+0x9d0>
			  case STATE_LONG:
				  if(myData.fix == 1){
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <statemachine+0x7d0>)
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d170      	bne.n	8002f94 <statemachine+0x804>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002eb2:	2014      	movs	r0, #20
 8002eb4:	f00d feea 	bl	8010c8c <malloc>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				  						ssd1306_SetCursor(32, 32);
 8002ebe:	2120      	movs	r1, #32
 8002ec0:	2020      	movs	r0, #32
 8002ec2:	f7ff fa49 	bl	8002358 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 8002ec6:	4a32      	ldr	r2, [pc, #200]	; (8002f90 <statemachine+0x800>)
 8002ec8:	210f      	movs	r1, #15
 8002eca:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002ece:	f00f fdd9 	bl	8012a84 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002ed2:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <statemachine+0x7d8>)
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	ca06      	ldmia	r2, {r1, r2}
 8002ed8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002edc:	f7ff fa16 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <statemachine+0x7d0>)
 8002ee2:	7e1b      	ldrb	r3, [r3, #24]
 8002ee4:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <statemachine+0x7f8>)
 8002ee6:	210f      	movs	r1, #15
 8002ee8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002eec:	f00f fdca 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002ef0:	2128      	movs	r1, #40	; 0x28
 8002ef2:	2020      	movs	r0, #32
 8002ef4:	f7ff fa30 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <statemachine+0x7d8>)
 8002efa:	2301      	movs	r3, #1
 8002efc:	ca06      	ldmia	r2, {r1, r2}
 8002efe:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f02:	f7ff fa03 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8002f06:	4a1a      	ldr	r2, [pc, #104]	; (8002f70 <statemachine+0x7e0>)
 8002f08:	210f      	movs	r1, #15
 8002f0a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f0e:	f00f fdb9 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002f12:	2130      	movs	r1, #48	; 0x30
 8002f14:	2020      	movs	r0, #32
 8002f16:	f7ff fa1f 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002f1a:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <statemachine+0x7d8>)
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	ca06      	ldmia	r2, {r1, r2}
 8002f20:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f24:	f7ff f9f2 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <statemachine+0x7d0>)
 8002f2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f2e:	e9cd 2300 	strd	r2, r3, [sp]
 8002f32:	4a0e      	ldr	r2, [pc, #56]	; (8002f6c <statemachine+0x7dc>)
 8002f34:	210f      	movs	r1, #15
 8002f36:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f3a:	f00f fda3 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002f3e:	2138      	movs	r1, #56	; 0x38
 8002f40:	2020      	movs	r0, #32
 8002f42:	f7ff fa09 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <statemachine+0x7d8>)
 8002f48:	2301      	movs	r3, #1
 8002f4a:	ca06      	ldmia	r2, {r1, r2}
 8002f4c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f50:	f7ff f9dc 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002f54:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f58:	f00d fea0 	bl	8010c9c <free>
 8002f5c:	e038      	b.n	8002fd0 <statemachine+0x840>
 8002f5e:	bf00      	nop
 8002f60:	200007e0 	.word	0x200007e0
 8002f64:	08016aac 	.word	0x08016aac
 8002f68:	20000008 	.word	0x20000008
 8002f6c:	08016ab8 	.word	0x08016ab8
 8002f70:	08016ac0 	.word	0x08016ac0
 8002f74:	08016acc 	.word	0x08016acc
 8002f78:	08016a84 	.word	0x08016a84
 8002f7c:	20000824 	.word	0x20000824
 8002f80:	2000082b 	.word	0x2000082b
 8002f84:	08016ad4 	.word	0x08016ad4
 8002f88:	08016ae0 	.word	0x08016ae0
 8002f8c:	08016ae4 	.word	0x08016ae4
 8002f90:	08016aec 	.word	0x08016aec
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002f94:	2014      	movs	r0, #20
 8002f96:	f00d fe79 	bl	8010c8c <malloc>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				  						ssd1306_SetCursor(32, 32);
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	2020      	movs	r0, #32
 8002fa4:	f7ff f9d8 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8002fa8:	4aab      	ldr	r2, [pc, #684]	; (8003258 <statemachine+0xac8>)
 8002faa:	2301      	movs	r3, #1
 8002fac:	ca06      	ldmia	r2, {r1, r2}
 8002fae:	48ab      	ldr	r0, [pc, #684]	; (800325c <statemachine+0xacc>)
 8002fb0:	f7ff f9ac 	bl	800230c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	2020      	movs	r0, #32
 8002fb8:	f7ff f9ce 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002fbc:	4aa6      	ldr	r2, [pc, #664]	; (8003258 <statemachine+0xac8>)
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	ca06      	ldmia	r2, {r1, r2}
 8002fc2:	48a7      	ldr	r0, [pc, #668]	; (8003260 <statemachine+0xad0>)
 8002fc4:	f7ff f9a2 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002fc8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002fcc:	f00d fe66 	bl	8010c9c <free>
				  					}
				  if(BTN_B>=1){
 8002fd0:	4ba4      	ldr	r3, [pc, #656]	; (8003264 <statemachine+0xad4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f340 80c5 	ble.w	8003164 <statemachine+0x9d4>
				  					  posstate++;
 8002fda:	4ba3      	ldr	r3, [pc, #652]	; (8003268 <statemachine+0xad8>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4ba1      	ldr	r3, [pc, #644]	; (8003268 <statemachine+0xad8>)
 8002fe4:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8002fe6:	4b9f      	ldr	r3, [pc, #636]	; (8003264 <statemachine+0xad4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 8002fec:	e0ba      	b.n	8003164 <statemachine+0x9d4>
			  case STATE_ALT:
				  if(myData.fix == 1){
 8002fee:	4b9f      	ldr	r3, [pc, #636]	; (800326c <statemachine+0xadc>)
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d17a      	bne.n	80030ec <statemachine+0x95c>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002ff6:	2014      	movs	r0, #20
 8002ff8:	f00d fe48 	bl	8010c8c <malloc>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				  						ssd1306_SetCursor(32, 32);
 8003002:	2120      	movs	r1, #32
 8003004:	2020      	movs	r0, #32
 8003006:	f7ff f9a7 	bl	8002358 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 800300a:	4a99      	ldr	r2, [pc, #612]	; (8003270 <statemachine+0xae0>)
 800300c:	210f      	movs	r1, #15
 800300e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003012:	f00f fd37 	bl	8012a84 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003016:	4a90      	ldr	r2, [pc, #576]	; (8003258 <statemachine+0xac8>)
 8003018:	2301      	movs	r3, #1
 800301a:	ca06      	ldmia	r2, {r1, r2}
 800301c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003020:	f7ff f974 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003024:	4b91      	ldr	r3, [pc, #580]	; (800326c <statemachine+0xadc>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd fa8d 	bl	8000548 <__aeabi_f2d>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	e9cd 2300 	strd	r2, r3, [sp]
 8003036:	4a8f      	ldr	r2, [pc, #572]	; (8003274 <statemachine+0xae4>)
 8003038:	210f      	movs	r1, #15
 800303a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800303e:	f00f fd21 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003042:	2128      	movs	r1, #40	; 0x28
 8003044:	2020      	movs	r0, #32
 8003046:	f7ff f987 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800304a:	4a83      	ldr	r2, [pc, #524]	; (8003258 <statemachine+0xac8>)
 800304c:	2301      	movs	r3, #1
 800304e:	ca06      	ldmia	r2, {r1, r2}
 8003050:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003054:	f7ff f95a 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 8003058:	4a87      	ldr	r2, [pc, #540]	; (8003278 <statemachine+0xae8>)
 800305a:	210f      	movs	r1, #15
 800305c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003060:	f00f fd10 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003064:	2130      	movs	r1, #48	; 0x30
 8003066:	2020      	movs	r0, #32
 8003068:	f7ff f976 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 800306c:	4a7a      	ldr	r2, [pc, #488]	; (8003258 <statemachine+0xac8>)
 800306e:	2301      	movs	r3, #1
 8003070:	ca06      	ldmia	r2, {r1, r2}
 8003072:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003076:	f7ff f949 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 800307a:	4b7c      	ldr	r3, [pc, #496]	; (800326c <statemachine+0xadc>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fa62 	bl	8000548 <__aeabi_f2d>
 8003084:	a372      	add	r3, pc, #456	; (adr r3, 8003250 <statemachine+0xac0>)
 8003086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308a:	f7fd fab5 	bl	80005f8 <__aeabi_dmul>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	f7fd fda7 	bl	8000be8 <__aeabi_d2f>
 800309a:	4603      	mov	r3, r0
 800309c:	ee00 3a10 	vmov	s0, r3
 80030a0:	f012 fb9e 	bl	80157e0 <expf>
 80030a4:	eef0 7a40 	vmov.f32	s15, s0
 80030a8:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800327c <statemachine+0xaec>
 80030ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b0:	ee17 0a90 	vmov	r0, s15
 80030b4:	f7fd fa48 	bl	8000548 <__aeabi_f2d>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	e9cd 2300 	strd	r2, r3, [sp]
 80030c0:	4a6f      	ldr	r2, [pc, #444]	; (8003280 <statemachine+0xaf0>)
 80030c2:	210f      	movs	r1, #15
 80030c4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80030c8:	f00f fcdc 	bl	8012a84 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80030cc:	2138      	movs	r1, #56	; 0x38
 80030ce:	2020      	movs	r0, #32
 80030d0:	f7ff f942 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80030d4:	4a60      	ldr	r2, [pc, #384]	; (8003258 <statemachine+0xac8>)
 80030d6:	2301      	movs	r3, #1
 80030d8:	ca06      	ldmia	r2, {r1, r2}
 80030da:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80030de:	f7ff f915 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 80030e2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80030e6:	f00d fdd9 	bl	8010c9c <free>
 80030ea:	e01d      	b.n	8003128 <statemachine+0x998>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80030ec:	2014      	movs	r0, #20
 80030ee:	f00d fdcd 	bl	8010c8c <malloc>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				  						ssd1306_SetCursor(32, 32);
 80030f8:	2120      	movs	r1, #32
 80030fa:	2020      	movs	r0, #32
 80030fc:	f7ff f92c 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 8003100:	4a55      	ldr	r2, [pc, #340]	; (8003258 <statemachine+0xac8>)
 8003102:	2301      	movs	r3, #1
 8003104:	ca06      	ldmia	r2, {r1, r2}
 8003106:	485f      	ldr	r0, [pc, #380]	; (8003284 <statemachine+0xaf4>)
 8003108:	f7ff f900 	bl	800230c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	2020      	movs	r0, #32
 8003110:	f7ff f922 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003114:	4a50      	ldr	r2, [pc, #320]	; (8003258 <statemachine+0xac8>)
 8003116:	2301      	movs	r3, #1
 8003118:	ca06      	ldmia	r2, {r1, r2}
 800311a:	4851      	ldr	r0, [pc, #324]	; (8003260 <statemachine+0xad0>)
 800311c:	f7ff f8f6 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8003120:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003124:	f00d fdba 	bl	8010c9c <free>
				  					}
				  if(BTN_B>=1){
 8003128:	4b4e      	ldr	r3, [pc, #312]	; (8003264 <statemachine+0xad4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	dd1b      	ble.n	8003168 <statemachine+0x9d8>
				  					posstate--;
 8003130:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <statemachine+0xad8>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	3b01      	subs	r3, #1
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4b4b      	ldr	r3, [pc, #300]	; (8003268 <statemachine+0xad8>)
 800313a:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 800313c:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <statemachine+0xad8>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	3b01      	subs	r3, #1
 8003142:	b2da      	uxtb	r2, r3
 8003144:	4b48      	ldr	r3, [pc, #288]	; (8003268 <statemachine+0xad8>)
 8003146:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003148:	4b47      	ldr	r3, [pc, #284]	; (8003268 <statemachine+0xad8>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b45      	ldr	r3, [pc, #276]	; (8003268 <statemachine+0xad8>)
 8003152:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8003154:	4b43      	ldr	r3, [pc, #268]	; (8003264 <statemachine+0xad4>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 800315a:	e005      	b.n	8003168 <statemachine+0x9d8>
				  break;
 800315c:	bf00      	nop
 800315e:	e004      	b.n	800316a <statemachine+0x9da>
				  break;
 8003160:	bf00      	nop
 8003162:	e002      	b.n	800316a <statemachine+0x9da>
				  break;
 8003164:	bf00      	nop
 8003166:	e000      	b.n	800316a <statemachine+0x9da>
				  break;
 8003168:	bf00      	nop
			  }

					if(BTN_A>=1){
 800316a:	4b47      	ldr	r3, [pc, #284]	; (8003288 <statemachine+0xaf8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f340 8684 	ble.w	8003e7c <statemachine+0x16ec>
							state++;
 8003174:	4b45      	ldr	r3, [pc, #276]	; (800328c <statemachine+0xafc>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	b2da      	uxtb	r2, r3
 800317c:	4b43      	ldr	r3, [pc, #268]	; (800328c <statemachine+0xafc>)
 800317e:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8003180:	4b41      	ldr	r3, [pc, #260]	; (8003288 <statemachine+0xaf8>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
						}
			  break;
 8003186:	f000 be79 	b.w	8003e7c <statemachine+0x16ec>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 800318a:	2000      	movs	r0, #0
 800318c:	f7fe ffa2 	bl	80020d4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003190:	493f      	ldr	r1, [pc, #252]	; (8003290 <statemachine+0xb00>)
 8003192:	4836      	ldr	r0, [pc, #216]	; (800326c <statemachine+0xadc>)
 8003194:	f7fe fe4a 	bl	8001e2c <nmea_parse>
			  int heure=0;
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 800319e:	4b33      	ldr	r3, [pc, #204]	; (800326c <statemachine+0xadc>)
 80031a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b2e      	ldr	r3, [pc, #184]	; (800326c <statemachine+0xadc>)
 80031b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	4413      	add	r3, r2
 80031be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			  if((heure+2)>=24){
 80031c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031c6:	2b15      	cmp	r3, #21
 80031c8:	dd05      	ble.n	80031d6 <statemachine+0xa46>
				  heure=heure-22;
 80031ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031ce:	3b16      	subs	r3, #22
 80031d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031d4:	e004      	b.n	80031e0 <statemachine+0xa50>
			  }
			  else{
				  heure=heure+2;
 80031d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031da:	3302      	adds	r3, #2
 80031dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			  }

			  if(myData.fix == 1){
 80031e0:	4b22      	ldr	r3, [pc, #136]	; (800326c <statemachine+0xadc>)
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	f040 82fe 	bne.w	80037e6 <statemachine+0x1056>

				  switch(hrstate){
 80031ea:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <statemachine+0xb04>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <statemachine+0xa6a>
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	f000 8099 	beq.w	800332a <statemachine+0xb9a>
 80031f8:	e30d      	b.n	8003816 <statemachine+0x1086>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 80031fa:	2014      	movs	r0, #20
 80031fc:	f00d fd46 	bl	8010c8c <malloc>
 8003200:	4603      	mov	r3, r0
 8003202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					  ssd1306_SetCursor(32, 32);
 8003206:	2120      	movs	r1, #32
 8003208:	2020      	movs	r0, #32
 800320a:	f7ff f8a5 	bl	8002358 <ssd1306_SetCursor>
					  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 800320e:	4a12      	ldr	r2, [pc, #72]	; (8003258 <statemachine+0xac8>)
 8003210:	2301      	movs	r3, #1
 8003212:	ca06      	ldmia	r2, {r1, r2}
 8003214:	4820      	ldr	r0, [pc, #128]	; (8003298 <statemachine+0xb08>)
 8003216:	f7ff f879 	bl	800230c <ssd1306_WriteString>
					 ssd1306_SetCursor(34, 42);
 800321a:	212a      	movs	r1, #42	; 0x2a
 800321c:	2022      	movs	r0, #34	; 0x22
 800321e:	f7ff f89b 	bl	8002358 <ssd1306_SetCursor>
					 if(heure>=10){
 8003222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003226:	2b09      	cmp	r3, #9
 8003228:	dd3a      	ble.n	80032a0 <statemachine+0xb10>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <statemachine+0xadc>)
 800322c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003230:	461a      	mov	r2, r3
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <statemachine+0xadc>)
 8003234:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	9200      	str	r2, [sp, #0]
 800323c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003240:	4a16      	ldr	r2, [pc, #88]	; (800329c <statemachine+0xb0c>)
 8003242:	210f      	movs	r1, #15
 8003244:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003248:	f00f fc1c 	bl	8012a84 <sniprintf>
 800324c:	e039      	b.n	80032c2 <statemachine+0xb32>
 800324e:	bf00      	nop
 8003250:	fb798882 	.word	0xfb798882
 8003254:	bf1e1818 	.word	0xbf1e1818
 8003258:	20000008 	.word	0x20000008
 800325c:	08016af8 	.word	0x08016af8
 8003260:	08016a84 	.word	0x08016a84
 8003264:	20000824 	.word	0x20000824
 8003268:	2000082b 	.word	0x2000082b
 800326c:	200007e0 	.word	0x200007e0
 8003270:	08016b00 	.word	0x08016b00
 8003274:	08016b0c 	.word	0x08016b0c
 8003278:	08016b14 	.word	0x08016b14
 800327c:	447a0000 	.word	0x447a0000
 8003280:	08016b20 	.word	0x08016b20
 8003284:	08016b2c 	.word	0x08016b2c
 8003288:	20000820 	.word	0x20000820
 800328c:	20000828 	.word	0x20000828
 8003290:	200005e0 	.word	0x200005e0
 8003294:	20000829 	.word	0x20000829
 8003298:	08016b34 	.word	0x08016b34
 800329c:	08016b40 	.word	0x08016b40
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 80032a0:	4bbd      	ldr	r3, [pc, #756]	; (8003598 <statemachine+0xe08>)
 80032a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80032a6:	461a      	mov	r2, r3
 80032a8:	4bbb      	ldr	r3, [pc, #748]	; (8003598 <statemachine+0xe08>)
 80032aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	9200      	str	r2, [sp, #0]
 80032b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032b6:	4ab9      	ldr	r2, [pc, #740]	; (800359c <statemachine+0xe0c>)
 80032b8:	210f      	movs	r1, #15
 80032ba:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80032be:	f00f fbe1 	bl	8012a84 <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 80032c2:	4ab7      	ldr	r2, [pc, #732]	; (80035a0 <statemachine+0xe10>)
 80032c4:	2301      	movs	r3, #1
 80032c6:	ca06      	ldmia	r2, {r1, r2}
 80032c8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80032cc:	f7ff f81e 	bl	800230c <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 80032d0:	2134      	movs	r1, #52	; 0x34
 80032d2:	2022      	movs	r0, #34	; 0x22
 80032d4:	f7ff f840 	bl	8002358 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 80032d8:	4baf      	ldr	r3, [pc, #700]	; (8003598 <statemachine+0xe08>)
 80032da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032de:	461a      	mov	r2, r3
 80032e0:	4bad      	ldr	r3, [pc, #692]	; (8003598 <statemachine+0xe08>)
 80032e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	4aae      	ldr	r2, [pc, #696]	; (80035a4 <statemachine+0xe14>)
 80032ec:	210f      	movs	r1, #15
 80032ee:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80032f2:	f00f fbc7 	bl	8012a84 <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 80032f6:	4aac      	ldr	r2, [pc, #688]	; (80035a8 <statemachine+0xe18>)
 80032f8:	2301      	movs	r3, #1
 80032fa:	ca06      	ldmia	r2, {r1, r2}
 80032fc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003300:	f7ff f804 	bl	800230c <ssd1306_WriteString>
					free(str);
 8003304:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003308:	f00d fcc8 	bl	8010c9c <free>
					if(BTN_B>=1){
 800330c:	4ba7      	ldr	r3, [pc, #668]	; (80035ac <statemachine+0xe1c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f340 827d 	ble.w	8003810 <statemachine+0x1080>
												hrstate++;
 8003316:	4ba6      	ldr	r3, [pc, #664]	; (80035b0 <statemachine+0xe20>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4ba4      	ldr	r3, [pc, #656]	; (80035b0 <statemachine+0xe20>)
 8003320:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8003322:	4ba2      	ldr	r3, [pc, #648]	; (80035ac <statemachine+0xe1c>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
											}




					  break;
 8003328:	e272      	b.n	8003810 <statemachine+0x1080>
				  case STATE_OLD:
					  if(heure>12){
 800332a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800332e:	2b0c      	cmp	r3, #12
 8003330:	dd04      	ble.n	800333c <statemachine+0xbac>
						  heure=heure-12;
 8003332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003336:	3b0c      	subs	r3, #12
 8003338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					  }
					  int minute=0;
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8003342:	4b95      	ldr	r3, [pc, #596]	; (8003598 <statemachine+0xe08>)
 8003344:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	461a      	mov	r2, r3
 8003356:	4b90      	ldr	r3, [pc, #576]	; (8003598 <statemachine+0xe08>)
 8003358:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	4413      	add	r3, r2
 8003362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					  ssd1306_DrawCircle(64, 48, 12, White);
 8003366:	2301      	movs	r3, #1
 8003368:	220c      	movs	r2, #12
 800336a:	2130      	movs	r1, #48	; 0x30
 800336c:	2040      	movs	r0, #64	; 0x40
 800336e:	f7ff f877 	bl	8002460 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 8003372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003376:	f1c3 0303 	rsb	r3, r3, #3
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd f8d2 	bl	8000524 <__aeabi_i2d>
 8003380:	a383      	add	r3, pc, #524	; (adr r3, 8003590 <statemachine+0xe00>)
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f7fd f937 	bl	80005f8 <__aeabi_dmul>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	4b87      	ldr	r3, [pc, #540]	; (80035b4 <statemachine+0xe24>)
 8003398:	f7fd fa58 	bl	800084c <__aeabi_ddiv>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	ec43 2b17 	vmov	d7, r2, r3
 80033a4:	eeb0 0a47 	vmov.f32	s0, s14
 80033a8:	eef0 0a67 	vmov.f32	s1, s15
 80033ac:	f012 f96c 	bl	8015688 <cos>
 80033b0:	ec51 0b10 	vmov	r0, r1, d0
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	4b7e      	ldr	r3, [pc, #504]	; (80035b4 <statemachine+0xe24>)
 80033ba:	f7fd f91d 	bl	80005f8 <__aeabi_dmul>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	ec43 2b17 	vmov	d7, r2, r3
 80033c6:	eeb0 0a47 	vmov.f32	s0, s14
 80033ca:	eef0 0a67 	vmov.f32	s1, s15
 80033ce:	f012 fa4b 	bl	8015868 <floor>
 80033d2:	ec51 0b10 	vmov	r0, r1, d0
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	4b77      	ldr	r3, [pc, #476]	; (80035b8 <statemachine+0xe28>)
 80033dc:	f7fc ff56 	bl	800028c <__adddf3>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f7fd fbde 	bl	8000ba8 <__aeabi_d2uiz>
 80033ec:	4603      	mov	r3, r0
 80033ee:	b2dc      	uxtb	r4, r3
 80033f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033f4:	f1c3 0303 	rsb	r3, r3, #3
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd f893 	bl	8000524 <__aeabi_i2d>
 80033fe:	a364      	add	r3, pc, #400	; (adr r3, 8003590 <statemachine+0xe00>)
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f7fd f8f8 	bl	80005f8 <__aeabi_dmul>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4610      	mov	r0, r2
 800340e:	4619      	mov	r1, r3
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	4b67      	ldr	r3, [pc, #412]	; (80035b4 <statemachine+0xe24>)
 8003416:	f7fd fa19 	bl	800084c <__aeabi_ddiv>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	ec43 2b17 	vmov	d7, r2, r3
 8003422:	eeb0 0a47 	vmov.f32	s0, s14
 8003426:	eef0 0a67 	vmov.f32	s1, s15
 800342a:	f012 f981 	bl	8015730 <sin>
 800342e:	ec51 0b10 	vmov	r0, r1, d0
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	4b5f      	ldr	r3, [pc, #380]	; (80035b4 <statemachine+0xe24>)
 8003438:	f7fd f8de 	bl	80005f8 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	ec43 2b17 	vmov	d7, r2, r3
 8003444:	eeb0 0a47 	vmov.f32	s0, s14
 8003448:	eef0 0a67 	vmov.f32	s1, s15
 800344c:	f012 fa0c 	bl	8015868 <floor>
 8003450:	ec53 2b10 	vmov	r2, r3, d0
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	4958      	ldr	r1, [pc, #352]	; (80035bc <statemachine+0xe2c>)
 800345a:	f7fc ff15 	bl	8000288 <__aeabi_dsub>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	f7fd fb9f 	bl	8000ba8 <__aeabi_d2uiz>
 800346a:	4603      	mov	r3, r0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2201      	movs	r2, #1
 8003470:	9200      	str	r2, [sp, #0]
 8003472:	4622      	mov	r2, r4
 8003474:	2130      	movs	r1, #48	; 0x30
 8003476:	2040      	movs	r0, #64	; 0x40
 8003478:	f7fe ff86 	bl	8002388 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 800347c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003480:	f1c3 030f 	rsb	r3, r3, #15
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd f84d 	bl	8000524 <__aeabi_i2d>
 800348a:	a341      	add	r3, pc, #260	; (adr r3, 8003590 <statemachine+0xe00>)
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f7fd f8b2 	bl	80005f8 <__aeabi_dmul>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <statemachine+0xe30>)
 80034a2:	f7fd f9d3 	bl	800084c <__aeabi_ddiv>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	ec43 2b17 	vmov	d7, r2, r3
 80034ae:	eeb0 0a47 	vmov.f32	s0, s14
 80034b2:	eef0 0a67 	vmov.f32	s1, s15
 80034b6:	f012 f8e7 	bl	8015688 <cos>
 80034ba:	ec51 0b10 	vmov	r0, r1, d0
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	4b40      	ldr	r3, [pc, #256]	; (80035c4 <statemachine+0xe34>)
 80034c4:	f7fd f898 	bl	80005f8 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	ec43 2b17 	vmov	d7, r2, r3
 80034d0:	eeb0 0a47 	vmov.f32	s0, s14
 80034d4:	eef0 0a67 	vmov.f32	s1, s15
 80034d8:	f012 f9c6 	bl	8015868 <floor>
 80034dc:	ec51 0b10 	vmov	r0, r1, d0
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <statemachine+0xe28>)
 80034e6:	f7fc fed1 	bl	800028c <__adddf3>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	f7fd fb59 	bl	8000ba8 <__aeabi_d2uiz>
 80034f6:	4603      	mov	r3, r0
 80034f8:	b2dc      	uxtb	r4, r3
 80034fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034fe:	f1c3 030f 	rsb	r3, r3, #15
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f80e 	bl	8000524 <__aeabi_i2d>
 8003508:	a321      	add	r3, pc, #132	; (adr r3, 8003590 <statemachine+0xe00>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f7fd f873 	bl	80005f8 <__aeabi_dmul>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <statemachine+0xe30>)
 8003520:	f7fd f994 	bl	800084c <__aeabi_ddiv>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	ec43 2b17 	vmov	d7, r2, r3
 800352c:	eeb0 0a47 	vmov.f32	s0, s14
 8003530:	eef0 0a67 	vmov.f32	s1, s15
 8003534:	f012 f8fc 	bl	8015730 <sin>
 8003538:	ec51 0b10 	vmov	r0, r1, d0
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <statemachine+0xe34>)
 8003542:	f7fd f859 	bl	80005f8 <__aeabi_dmul>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	ec43 2b17 	vmov	d7, r2, r3
 800354e:	eeb0 0a47 	vmov.f32	s0, s14
 8003552:	eef0 0a67 	vmov.f32	s1, s15
 8003556:	f012 f987 	bl	8015868 <floor>
 800355a:	ec53 2b10 	vmov	r2, r3, d0
 800355e:	f04f 0000 	mov.w	r0, #0
 8003562:	4916      	ldr	r1, [pc, #88]	; (80035bc <statemachine+0xe2c>)
 8003564:	f7fc fe90 	bl	8000288 <__aeabi_dsub>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	f7fd fb1a 	bl	8000ba8 <__aeabi_d2uiz>
 8003574:	4603      	mov	r3, r0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2201      	movs	r2, #1
 800357a:	9200      	str	r2, [sp, #0]
 800357c:	4622      	mov	r2, r4
 800357e:	2130      	movs	r1, #48	; 0x30
 8003580:	2040      	movs	r0, #64	; 0x40
 8003582:	f7fe ff01 	bl	8002388 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800358c:	e118      	b.n	80037c0 <statemachine+0x1030>
 800358e:	bf00      	nop
 8003590:	54442d18 	.word	0x54442d18
 8003594:	400921fb 	.word	0x400921fb
 8003598:	200007e0 	.word	0x200007e0
 800359c:	08016b48 	.word	0x08016b48
 80035a0:	20000010 	.word	0x20000010
 80035a4:	08016b54 	.word	0x08016b54
 80035a8:	20000008 	.word	0x20000008
 80035ac:	20000824 	.word	0x20000824
 80035b0:	20000829 	.word	0x20000829
 80035b4:	40180000 	.word	0x40180000
 80035b8:	40500000 	.word	0x40500000
 80035bc:	40480000 	.word	0x40480000
 80035c0:	403e0000 	.word	0x403e0000
 80035c4:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 80035c8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80035cc:	f7fc ffaa 	bl	8000524 <__aeabi_i2d>
 80035d0:	a3c9      	add	r3, pc, #804	; (adr r3, 80038f8 <statemachine+0x1168>)
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f7fd f80f 	bl	80005f8 <__aeabi_dmul>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	4bc6      	ldr	r3, [pc, #792]	; (8003900 <statemachine+0x1170>)
 80035e8:	f7fd f930 	bl	800084c <__aeabi_ddiv>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	ec43 2b17 	vmov	d7, r2, r3
 80035f4:	eeb0 0a47 	vmov.f32	s0, s14
 80035f8:	eef0 0a67 	vmov.f32	s1, s15
 80035fc:	f012 f844 	bl	8015688 <cos>
 8003600:	ec51 0b10 	vmov	r0, r1, d0
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	4bbe      	ldr	r3, [pc, #760]	; (8003904 <statemachine+0x1174>)
 800360a:	f7fc fff5 	bl	80005f8 <__aeabi_dmul>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	ec43 2b17 	vmov	d7, r2, r3
 8003616:	eeb0 0a47 	vmov.f32	s0, s14
 800361a:	eef0 0a67 	vmov.f32	s1, s15
 800361e:	f012 f923 	bl	8015868 <floor>
 8003622:	ec51 0b10 	vmov	r0, r1, d0
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	4bb7      	ldr	r3, [pc, #732]	; (8003908 <statemachine+0x1178>)
 800362c:	f7fc fe2e 	bl	800028c <__adddf3>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4610      	mov	r0, r2
 8003636:	4619      	mov	r1, r3
 8003638:	f7fd fab6 	bl	8000ba8 <__aeabi_d2uiz>
 800363c:	4603      	mov	r3, r0
 800363e:	b2dc      	uxtb	r4, r3
 8003640:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003644:	f7fc ff6e 	bl	8000524 <__aeabi_i2d>
 8003648:	a3ab      	add	r3, pc, #684	; (adr r3, 80038f8 <statemachine+0x1168>)
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f7fc ffd3 	bl	80005f8 <__aeabi_dmul>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	4ba8      	ldr	r3, [pc, #672]	; (8003900 <statemachine+0x1170>)
 8003660:	f7fd f8f4 	bl	800084c <__aeabi_ddiv>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	ec43 2b17 	vmov	d7, r2, r3
 800366c:	eeb0 0a47 	vmov.f32	s0, s14
 8003670:	eef0 0a67 	vmov.f32	s1, s15
 8003674:	f012 f85c 	bl	8015730 <sin>
 8003678:	ec51 0b10 	vmov	r0, r1, d0
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	4ba0      	ldr	r3, [pc, #640]	; (8003904 <statemachine+0x1174>)
 8003682:	f7fc ffb9 	bl	80005f8 <__aeabi_dmul>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	ec43 2b17 	vmov	d7, r2, r3
 800368e:	eeb0 0a47 	vmov.f32	s0, s14
 8003692:	eef0 0a67 	vmov.f32	s1, s15
 8003696:	f012 f8e7 	bl	8015868 <floor>
 800369a:	ec51 0b10 	vmov	r0, r1, d0
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	4b9a      	ldr	r3, [pc, #616]	; (800390c <statemachine+0x117c>)
 80036a4:	f7fc fdf2 	bl	800028c <__adddf3>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	f7fd fa7a 	bl	8000ba8 <__aeabi_d2uiz>
 80036b4:	4603      	mov	r3, r0
 80036b6:	b2dd      	uxtb	r5, r3
 80036b8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80036bc:	f7fc ff32 	bl	8000524 <__aeabi_i2d>
 80036c0:	a38d      	add	r3, pc, #564	; (adr r3, 80038f8 <statemachine+0x1168>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f7fc ff97 	bl	80005f8 <__aeabi_dmul>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	4b8a      	ldr	r3, [pc, #552]	; (8003900 <statemachine+0x1170>)
 80036d8:	f7fd f8b8 	bl	800084c <__aeabi_ddiv>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	ec43 2b17 	vmov	d7, r2, r3
 80036e4:	eeb0 0a47 	vmov.f32	s0, s14
 80036e8:	eef0 0a67 	vmov.f32	s1, s15
 80036ec:	f011 ffcc 	bl	8015688 <cos>
 80036f0:	ec51 0b10 	vmov	r0, r1, d0
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	4b85      	ldr	r3, [pc, #532]	; (8003910 <statemachine+0x1180>)
 80036fa:	f7fc ff7d 	bl	80005f8 <__aeabi_dmul>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	ec43 2b17 	vmov	d7, r2, r3
 8003706:	eeb0 0a47 	vmov.f32	s0, s14
 800370a:	eef0 0a67 	vmov.f32	s1, s15
 800370e:	f012 f8ab 	bl	8015868 <floor>
 8003712:	ec51 0b10 	vmov	r0, r1, d0
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	4b7b      	ldr	r3, [pc, #492]	; (8003908 <statemachine+0x1178>)
 800371c:	f7fc fdb6 	bl	800028c <__adddf3>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	f7fd fa3e 	bl	8000ba8 <__aeabi_d2uiz>
 800372c:	4603      	mov	r3, r0
 800372e:	b2de      	uxtb	r6, r3
 8003730:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003734:	f7fc fef6 	bl	8000524 <__aeabi_i2d>
 8003738:	a36f      	add	r3, pc, #444	; (adr r3, 80038f8 <statemachine+0x1168>)
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f7fc ff5b 	bl	80005f8 <__aeabi_dmul>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <statemachine+0x1170>)
 8003750:	f7fd f87c 	bl	800084c <__aeabi_ddiv>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	ec43 2b17 	vmov	d7, r2, r3
 800375c:	eeb0 0a47 	vmov.f32	s0, s14
 8003760:	eef0 0a67 	vmov.f32	s1, s15
 8003764:	f011 ffe4 	bl	8015730 <sin>
 8003768:	ec51 0b10 	vmov	r0, r1, d0
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	4b67      	ldr	r3, [pc, #412]	; (8003910 <statemachine+0x1180>)
 8003772:	f7fc ff41 	bl	80005f8 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	ec43 2b17 	vmov	d7, r2, r3
 800377e:	eeb0 0a47 	vmov.f32	s0, s14
 8003782:	eef0 0a67 	vmov.f32	s1, s15
 8003786:	f012 f86f 	bl	8015868 <floor>
 800378a:	ec51 0b10 	vmov	r0, r1, d0
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	4b5e      	ldr	r3, [pc, #376]	; (800390c <statemachine+0x117c>)
 8003794:	f7fc fd7a 	bl	800028c <__adddf3>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f7fd fa02 	bl	8000ba8 <__aeabi_d2uiz>
 80037a4:	4603      	mov	r3, r0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2201      	movs	r2, #1
 80037aa:	9200      	str	r2, [sp, #0]
 80037ac:	4632      	mov	r2, r6
 80037ae:	4629      	mov	r1, r5
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7fe fde9 	bl	8002388 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80037b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037ba:	3301      	adds	r3, #1
 80037bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	f77f aeff 	ble.w	80035c8 <statemachine+0xe38>
					  }
					  if(BTN_B>=1){
 80037ca:	4b52      	ldr	r3, [pc, #328]	; (8003914 <statemachine+0x1184>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	dd20      	ble.n	8003814 <statemachine+0x1084>
					  	hrstate--;
 80037d2:	4b51      	ldr	r3, [pc, #324]	; (8003918 <statemachine+0x1188>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <statemachine+0x1188>)
 80037dc:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 80037de:	4b4d      	ldr	r3, [pc, #308]	; (8003914 <statemachine+0x1184>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
					  }


					  break;
 80037e4:	e016      	b.n	8003814 <statemachine+0x1084>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 80037e6:	2014      	movs	r0, #20
 80037e8:	f00d fa50 	bl	8010c8c <malloc>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			  			 						ssd1306_SetCursor(32, 44);
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	2020      	movs	r0, #32
 80037f6:	f7fe fdaf 	bl	8002358 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80037fa:	4a48      	ldr	r2, [pc, #288]	; (800391c <statemachine+0x118c>)
 80037fc:	2301      	movs	r3, #1
 80037fe:	ca06      	ldmia	r2, {r1, r2}
 8003800:	4847      	ldr	r0, [pc, #284]	; (8003920 <statemachine+0x1190>)
 8003802:	f7fe fd83 	bl	800230c <ssd1306_WriteString>
			  			 						free(str);
 8003806:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800380a:	f00d fa47 	bl	8010c9c <free>
 800380e:	e002      	b.n	8003816 <statemachine+0x1086>
					  break;
 8003810:	bf00      	nop
 8003812:	e000      	b.n	8003816 <statemachine+0x1086>
					  break;
 8003814:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 8003816:	4b43      	ldr	r3, [pc, #268]	; (8003924 <statemachine+0x1194>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f340 8330 	ble.w	8003e80 <statemachine+0x16f0>
			  		state++;
 8003820:	4b41      	ldr	r3, [pc, #260]	; (8003928 <statemachine+0x1198>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	4b3f      	ldr	r3, [pc, #252]	; (8003928 <statemachine+0x1198>)
 800382a:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800382c:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <statemachine+0x1194>)
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8003832:	4b38      	ldr	r3, [pc, #224]	; (8003914 <statemachine+0x1184>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8003838:	e322      	b.n	8003e80 <statemachine+0x16f0>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 800383a:	2000      	movs	r0, #0
 800383c:	f7fe fc4a 	bl	80020d4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003840:	493a      	ldr	r1, [pc, #232]	; (800392c <statemachine+0x119c>)
 8003842:	483b      	ldr	r0, [pc, #236]	; (8003930 <statemachine+0x11a0>)
 8003844:	f7fe faf2 	bl	8001e2c <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <statemachine+0x11a0>)
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	2b01      	cmp	r3, #1
 800384e:	d179      	bne.n	8003944 <statemachine+0x11b4>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8003850:	2014      	movs	r0, #20
 8003852:	f00d fa1b 	bl	8010c8c <malloc>
 8003856:	4603      	mov	r3, r0
 8003858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 800385c:	4b34      	ldr	r3, [pc, #208]	; (8003930 <statemachine+0x11a0>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fc fe71 	bl	8000548 <__aeabi_f2d>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	e9cd 2300 	strd	r2, r3, [sp]
 800386e:	4a31      	ldr	r2, [pc, #196]	; (8003934 <statemachine+0x11a4>)
 8003870:	210f      	movs	r1, #15
 8003872:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003876:	f00f f905 	bl	8012a84 <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 800387a:	2120      	movs	r1, #32
 800387c:	2020      	movs	r0, #32
 800387e:	f7fe fd6b 	bl	8002358 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003882:	4a26      	ldr	r2, [pc, #152]	; (800391c <statemachine+0x118c>)
 8003884:	2301      	movs	r3, #1
 8003886:	ca06      	ldmia	r2, {r1, r2}
 8003888:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800388c:	f7fe fd3e 	bl	800230c <ssd1306_WriteString>
			 			 						snprintf(str,15, "SatNb :%d",myData.satelliteCount);
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <statemachine+0x11a0>)
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	4a28      	ldr	r2, [pc, #160]	; (8003938 <statemachine+0x11a8>)
 8003896:	210f      	movs	r1, #15
 8003898:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800389c:	f00f f8f2 	bl	8012a84 <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 80038a0:	212a      	movs	r1, #42	; 0x2a
 80038a2:	2020      	movs	r0, #32
 80038a4:	f7fe fd58 	bl	8002358 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80038a8:	4a1c      	ldr	r2, [pc, #112]	; (800391c <statemachine+0x118c>)
 80038aa:	2301      	movs	r3, #1
 80038ac:	ca06      	ldmia	r2, {r1, r2}
 80038ae:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80038b2:	f7fe fd2b 	bl	800230c <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 80038b6:	2132      	movs	r1, #50	; 0x32
 80038b8:	2020      	movs	r0, #32
 80038ba:	f7fe fd4d 	bl	8002358 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 80038be:	4b1f      	ldr	r3, [pc, #124]	; (800393c <statemachine+0x11ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fe40 	bl	8000548 <__aeabi_f2d>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	e9cd 2300 	strd	r2, r3, [sp]
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <statemachine+0x11b0>)
 80038d2:	210f      	movs	r1, #15
 80038d4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80038d8:	f00f f8d4 	bl	8012a84 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80038dc:	4a0f      	ldr	r2, [pc, #60]	; (800391c <statemachine+0x118c>)
 80038de:	2301      	movs	r3, #1
 80038e0:	ca06      	ldmia	r2, {r1, r2}
 80038e2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80038e6:	f7fe fd11 	bl	800230c <ssd1306_WriteString>
			 			 						free(str);
 80038ea:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80038ee:	f00d f9d5 	bl	8010c9c <free>
 80038f2:	e05f      	b.n	80039b4 <statemachine+0x1224>
 80038f4:	f3af 8000 	nop.w
 80038f8:	54442d18 	.word	0x54442d18
 80038fc:	400921fb 	.word	0x400921fb
 8003900:	40180000 	.word	0x40180000
 8003904:	40240000 	.word	0x40240000
 8003908:	40500000 	.word	0x40500000
 800390c:	40480000 	.word	0x40480000
 8003910:	40280000 	.word	0x40280000
 8003914:	20000824 	.word	0x20000824
 8003918:	20000829 	.word	0x20000829
 800391c:	20000008 	.word	0x20000008
 8003920:	08016a84 	.word	0x08016a84
 8003924:	20000820 	.word	0x20000820
 8003928:	20000828 	.word	0x20000828
 800392c:	200005e0 	.word	0x200005e0
 8003930:	200007e0 	.word	0x200007e0
 8003934:	08016b60 	.word	0x08016b60
 8003938:	08016b6c 	.word	0x08016b6c
 800393c:	2000083c 	.word	0x2000083c
 8003940:	08016b78 	.word	0x08016b78
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8003944:	2014      	movs	r0, #20
 8003946:	f00d f9a1 	bl	8010c8c <malloc>
 800394a:	4603      	mov	r3, r0
 800394c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 			 						ssd1306_SetCursor(32, 32);
 8003950:	2120      	movs	r1, #32
 8003952:	2020      	movs	r0, #32
 8003954:	f7fe fd00 	bl	8002358 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8003958:	4a9e      	ldr	r2, [pc, #632]	; (8003bd4 <statemachine+0x1444>)
 800395a:	2301      	movs	r3, #1
 800395c:	ca06      	ldmia	r2, {r1, r2}
 800395e:	489e      	ldr	r0, [pc, #632]	; (8003bd8 <statemachine+0x1448>)
 8003960:	f7fe fcd4 	bl	800230c <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 8003964:	2129      	movs	r1, #41	; 0x29
 8003966:	2020      	movs	r0, #32
 8003968:	f7fe fcf6 	bl	8002358 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800396c:	4a99      	ldr	r2, [pc, #612]	; (8003bd4 <statemachine+0x1444>)
 800396e:	2301      	movs	r3, #1
 8003970:	ca06      	ldmia	r2, {r1, r2}
 8003972:	489a      	ldr	r0, [pc, #616]	; (8003bdc <statemachine+0x144c>)
 8003974:	f7fe fcca 	bl	800230c <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8003978:	2132      	movs	r1, #50	; 0x32
 800397a:	2020      	movs	r0, #32
 800397c:	f7fe fcec 	bl	8002358 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 8003980:	4b97      	ldr	r3, [pc, #604]	; (8003be0 <statemachine+0x1450>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fc fddf 	bl	8000548 <__aeabi_f2d>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	e9cd 2300 	strd	r2, r3, [sp]
 8003992:	4a94      	ldr	r2, [pc, #592]	; (8003be4 <statemachine+0x1454>)
 8003994:	210f      	movs	r1, #15
 8003996:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800399a:	f00f f873 	bl	8012a84 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 800399e:	4a8d      	ldr	r2, [pc, #564]	; (8003bd4 <statemachine+0x1444>)
 80039a0:	2301      	movs	r3, #1
 80039a2:	ca06      	ldmia	r2, {r1, r2}
 80039a4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80039a8:	f7fe fcb0 	bl	800230c <ssd1306_WriteString>
			 			 						free(str);
 80039ac:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80039b0:	f00d f974 	bl	8010c9c <free>
			 			 					}
			  if(BTN_A>=1){
 80039b4:	4b8c      	ldr	r3, [pc, #560]	; (8003be8 <statemachine+0x1458>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f340 8263 	ble.w	8003e84 <statemachine+0x16f4>
			  		state++;
 80039be:	4b8b      	ldr	r3, [pc, #556]	; (8003bec <statemachine+0x145c>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	3301      	adds	r3, #1
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4b89      	ldr	r3, [pc, #548]	; (8003bec <statemachine+0x145c>)
 80039c8:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 80039ca:	4b87      	ldr	r3, [pc, #540]	; (8003be8 <statemachine+0x1458>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 80039d0:	4b87      	ldr	r3, [pc, #540]	; (8003bf0 <statemachine+0x1460>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 80039d6:	e255      	b.n	8003e84 <statemachine+0x16f4>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 80039d8:	2000      	movs	r0, #0
 80039da:	f7fe fb7b 	bl	80020d4 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 80039de:	2120      	movs	r1, #32
 80039e0:	2020      	movs	r0, #32
 80039e2:	f7fe fcb9 	bl	8002358 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 80039e6:	2014      	movs	r0, #20
 80039e8:	f00d f950 	bl	8010c8c <malloc>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  ssd1306_WriteString("chrono", Font_6x8, White);
 80039f2:	4a78      	ldr	r2, [pc, #480]	; (8003bd4 <statemachine+0x1444>)
 80039f4:	2301      	movs	r3, #1
 80039f6:	ca06      	ldmia	r2, {r1, r2}
 80039f8:	487e      	ldr	r0, [pc, #504]	; (8003bf4 <statemachine+0x1464>)
 80039fa:	f7fe fc87 	bl	800230c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 80039fe:	2128      	movs	r1, #40	; 0x28
 8003a00:	2020      	movs	r0, #32
 8003a02:	f7fe fca9 	bl	8002358 <ssd1306_SetCursor>

			  switch(chronostate){
 8003a06:	4b7c      	ldr	r3, [pc, #496]	; (8003bf8 <statemachine+0x1468>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d038      	beq.n	8003a80 <statemachine+0x12f0>
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	dc4f      	bgt.n	8003ab2 <statemachine+0x1322>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <statemachine+0x128c>
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d01d      	beq.n	8003a56 <statemachine+0x12c6>
 8003a1a:	e04a      	b.n	8003ab2 <statemachine+0x1322>
			  case STATE_RESET:
				  min=0;
 8003a1c:	4b77      	ldr	r3, [pc, #476]	; (8003bfc <statemachine+0x146c>)
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8003a24:	4b76      	ldr	r3, [pc, #472]	; (8003c00 <statemachine+0x1470>)
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8003a2c:	4b75      	ldr	r3, [pc, #468]	; (8003c04 <statemachine+0x1474>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 8003a32:	4b6f      	ldr	r3, [pc, #444]	; (8003bf0 <statemachine+0x1460>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	dd36      	ble.n	8003aa8 <statemachine+0x1318>
				  		chronostate++;
 8003a3a:	4b6f      	ldr	r3, [pc, #444]	; (8003bf8 <statemachine+0x1468>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b6d      	ldr	r3, [pc, #436]	; (8003bf8 <statemachine+0x1468>)
 8003a44:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8003a46:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <statemachine+0x1460>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8003a4c:	4b6e      	ldr	r3, [pc, #440]	; (8003c08 <statemachine+0x1478>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a6e      	ldr	r2, [pc, #440]	; (8003c0c <statemachine+0x147c>)
 8003a52:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8003a54:	e028      	b.n	8003aa8 <statemachine+0x1318>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 8003a56:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <statemachine+0x1478>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4b6c      	ldr	r3, [pc, #432]	; (8003c0c <statemachine+0x147c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	4a68      	ldr	r2, [pc, #416]	; (8003c04 <statemachine+0x1474>)
 8003a62:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8003a64:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <statemachine+0x1460>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	dd1f      	ble.n	8003aac <statemachine+0x131c>
				  		chronostate++;
 8003a6c:	4b62      	ldr	r3, [pc, #392]	; (8003bf8 <statemachine+0x1468>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	3301      	adds	r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b60      	ldr	r3, [pc, #384]	; (8003bf8 <statemachine+0x1468>)
 8003a76:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8003a78:	4b5d      	ldr	r3, [pc, #372]	; (8003bf0 <statemachine+0x1460>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8003a7e:	e015      	b.n	8003aac <statemachine+0x131c>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 8003a80:	4b5b      	ldr	r3, [pc, #364]	; (8003bf0 <statemachine+0x1460>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	dd13      	ble.n	8003ab0 <statemachine+0x1320>
				  			chronostate--;
 8003a88:	4b5b      	ldr	r3, [pc, #364]	; (8003bf8 <statemachine+0x1468>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <statemachine+0x1468>)
 8003a92:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 8003a94:	4b58      	ldr	r3, [pc, #352]	; (8003bf8 <statemachine+0x1468>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4b56      	ldr	r3, [pc, #344]	; (8003bf8 <statemachine+0x1468>)
 8003a9e:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <statemachine+0x1460>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
			 }

				  break;
 8003aa6:	e003      	b.n	8003ab0 <statemachine+0x1320>
				  break;
 8003aa8:	bf00      	nop
 8003aaa:	e002      	b.n	8003ab2 <statemachine+0x1322>
				  break;
 8003aac:	bf00      	nop
 8003aae:	e000      	b.n	8003ab2 <statemachine+0x1322>
				  break;
 8003ab0:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8003ab2:	4b54      	ldr	r3, [pc, #336]	; (8003c04 <statemachine+0x1474>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003c10 <statemachine+0x1480>
 8003ac2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ac6:	ee16 0a90 	vmov	r0, s13
 8003aca:	f7fc fd3d 	bl	8000548 <__aeabi_f2d>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	ec43 2b10 	vmov	d0, r2, r3
 8003ad6:	f011 fec7 	bl	8015868 <floor>
 8003ada:	ec53 2b10 	vmov	r2, r3, d0
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f7fd f881 	bl	8000be8 <__aeabi_d2f>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4a44      	ldr	r2, [pc, #272]	; (8003bfc <statemachine+0x146c>)
 8003aea:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8003aec:	4b45      	ldr	r3, [pc, #276]	; (8003c04 <statemachine+0x1474>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003af8:	4b40      	ldr	r3, [pc, #256]	; (8003bfc <statemachine+0x146c>)
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003c10 <statemachine+0x1480>
 8003b02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b0a:	eddf 6a42 	vldr	s13, [pc, #264]	; 8003c14 <statemachine+0x1484>
 8003b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b12:	4b3b      	ldr	r3, [pc, #236]	; (8003c00 <statemachine+0x1470>)
 8003b14:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8003b18:	4b38      	ldr	r3, [pc, #224]	; (8003bfc <statemachine+0x146c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fc fd13 	bl	8000548 <__aeabi_f2d>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	e9cd 2300 	strd	r2, r3, [sp]
 8003b2a:	4a3b      	ldr	r2, [pc, #236]	; (8003c18 <statemachine+0x1488>)
 8003b2c:	210f      	movs	r1, #15
 8003b2e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003b32:	f00e ffa7 	bl	8012a84 <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 8003b36:	4a39      	ldr	r2, [pc, #228]	; (8003c1c <statemachine+0x148c>)
 8003b38:	2301      	movs	r3, #1
 8003b3a:	ca06      	ldmia	r2, {r1, r2}
 8003b3c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003b40:	f7fe fbe4 	bl	800230c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8003b44:	2132      	movs	r1, #50	; 0x32
 8003b46:	2020      	movs	r0, #32
 8003b48:	f7fe fc06 	bl	8002358 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8003b4c:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <statemachine+0x1470>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fc fcf9 	bl	8000548 <__aeabi_f2d>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	e9cd 2300 	strd	r2, r3, [sp]
 8003b5e:	4a30      	ldr	r2, [pc, #192]	; (8003c20 <statemachine+0x1490>)
 8003b60:	210f      	movs	r1, #15
 8003b62:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003b66:	f00e ff8d 	bl	8012a84 <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 8003b6a:	4a1a      	ldr	r2, [pc, #104]	; (8003bd4 <statemachine+0x1444>)
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	ca06      	ldmia	r2, {r1, r2}
 8003b70:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003b74:	f7fe fbca 	bl	800230c <ssd1306_WriteString>
			  free(str);
 8003b78:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003b7c:	f00d f88e 	bl	8010c9c <free>


			  if(BTN_A>=1){
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <statemachine+0x1458>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f340 817f 	ble.w	8003e88 <statemachine+0x16f8>
			 	state++;
 8003b8a:	4b18      	ldr	r3, [pc, #96]	; (8003bec <statemachine+0x145c>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b16      	ldr	r3, [pc, #88]	; (8003bec <statemachine+0x145c>)
 8003b94:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8003b96:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <statemachine+0x1458>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <statemachine+0x1460>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]


	}
			  break;
 8003ba2:	e171      	b.n	8003e88 <statemachine+0x16f8>
			  case STATE_SPEEDTEST:
				  ssd1306_Fill(Black);
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f7fe fa95 	bl	80020d4 <ssd1306_Fill>
				  ssd1306_SetCursor(32, 32);
 8003baa:	2120      	movs	r1, #32
 8003bac:	2020      	movs	r0, #32
 8003bae:	f7fe fbd3 	bl	8002358 <ssd1306_SetCursor>
				  ssd1306_WriteString("clavierusb", Font_6x8, White);
 8003bb2:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <statemachine+0x1444>)
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	ca06      	ldmia	r2, {r1, r2}
 8003bb8:	481a      	ldr	r0, [pc, #104]	; (8003c24 <statemachine+0x1494>)
 8003bba:	f7fe fba7 	bl	800230c <ssd1306_WriteString>
				  ssd1306_SetCursor(32, 40);
 8003bbe:	2128      	movs	r1, #40	; 0x28
 8003bc0:	2020      	movs	r0, #32
 8003bc2:	f7fe fbc9 	bl	8002358 <ssd1306_SetCursor>

				  switch(keyboardstate){
 8003bc6:	4b18      	ldr	r3, [pc, #96]	; (8003c28 <statemachine+0x1498>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d02e      	beq.n	8003c2c <statemachine+0x149c>
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d06e      	beq.n	8003cb0 <statemachine+0x1520>
 8003bd2:	e084      	b.n	8003cde <statemachine+0x154e>
 8003bd4:	20000008 	.word	0x20000008
 8003bd8:	08016b84 	.word	0x08016b84
 8003bdc:	08016a84 	.word	0x08016a84
 8003be0:	2000083c 	.word	0x2000083c
 8003be4:	08016b78 	.word	0x08016b78
 8003be8:	20000820 	.word	0x20000820
 8003bec:	20000828 	.word	0x20000828
 8003bf0:	20000824 	.word	0x20000824
 8003bf4:	08016b8c 	.word	0x08016b8c
 8003bf8:	2000082c 	.word	0x2000082c
 8003bfc:	20000c90 	.word	0x20000c90
 8003c00:	20000c8c 	.word	0x20000c8c
 8003c04:	20000c98 	.word	0x20000c98
 8003c08:	20000ca4 	.word	0x20000ca4
 8003c0c:	20000c94 	.word	0x20000c94
 8003c10:	476a6000 	.word	0x476a6000
 8003c14:	447a0000 	.word	0x447a0000
 8003c18:	08016b94 	.word	0x08016b94
 8003c1c:	20000010 	.word	0x20000010
 8003c20:	08016ba0 	.word	0x08016ba0
 8003c24:	08016bac 	.word	0x08016bac
 8003c28:	2000082d 	.word	0x2000082d

				  case STATE_MARCHE:
					  ssd1306_WriteString("NI", Font_6x8, White);
 8003c2c:	4a9c      	ldr	r2, [pc, #624]	; (8003ea0 <statemachine+0x1710>)
 8003c2e:	2301      	movs	r3, #1
 8003c30:	ca06      	ldmia	r2, {r1, r2}
 8003c32:	489c      	ldr	r0, [pc, #624]	; (8003ea4 <statemachine+0x1714>)
 8003c34:	f7fe fb6a 	bl	800230c <ssd1306_WriteString>
					  keyboardhid.MODIFIER = 0x02;
 8003c38:	4b9b      	ldr	r3, [pc, #620]	; (8003ea8 <statemachine+0x1718>)
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	701a      	strb	r2, [r3, #0]
					  keyboardhid.KEYCODE1 = 0x11;
 8003c3e:	4b9a      	ldr	r3, [pc, #616]	; (8003ea8 <statemachine+0x1718>)
 8003c40:	2211      	movs	r2, #17
 8003c42:	709a      	strb	r2, [r3, #2]
					  keyboardhid.KEYCODE2 = 0x0C;
 8003c44:	4b98      	ldr	r3, [pc, #608]	; (8003ea8 <statemachine+0x1718>)
 8003c46:	220c      	movs	r2, #12
 8003c48:	70da      	strb	r2, [r3, #3]
					  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	4996      	ldr	r1, [pc, #600]	; (8003ea8 <statemachine+0x1718>)
 8003c4e:	4897      	ldr	r0, [pc, #604]	; (8003eac <statemachine+0x171c>)
 8003c50:	f00b f862 	bl	800ed18 <USBD_HID_SendReport>
					  HAL_Delay (50);
 8003c54:	2032      	movs	r0, #50	; 0x32
 8003c56:	f000 fd59 	bl	800470c <HAL_Delay>
					  keyboardhid.MODIFIER = 0x00;
 8003c5a:	4b93      	ldr	r3, [pc, #588]	; (8003ea8 <statemachine+0x1718>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
					  keyboardhid.KEYCODE1 = 0x00;
 8003c60:	4b91      	ldr	r3, [pc, #580]	; (8003ea8 <statemachine+0x1718>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	709a      	strb	r2, [r3, #2]
					  keyboardhid.KEYCODE2 = 0x00;
 8003c66:	4b90      	ldr	r3, [pc, #576]	; (8003ea8 <statemachine+0x1718>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	70da      	strb	r2, [r3, #3]
					  keyboardhid.KEYCODE3 = 0x00;
 8003c6c:	4b8e      	ldr	r3, [pc, #568]	; (8003ea8 <statemachine+0x1718>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	711a      	strb	r2, [r3, #4]
					  keyboardhid.KEYCODE4 = 0x00;
 8003c72:	4b8d      	ldr	r3, [pc, #564]	; (8003ea8 <statemachine+0x1718>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	715a      	strb	r2, [r3, #5]
					  keyboardhid.KEYCODE5 = 0x00;
 8003c78:	4b8b      	ldr	r3, [pc, #556]	; (8003ea8 <statemachine+0x1718>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	719a      	strb	r2, [r3, #6]
					  keyboardhid.KEYCODE6 = 0x00;
 8003c7e:	4b8a      	ldr	r3, [pc, #552]	; (8003ea8 <statemachine+0x1718>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	71da      	strb	r2, [r3, #7]
					  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8003c84:	2208      	movs	r2, #8
 8003c86:	4988      	ldr	r1, [pc, #544]	; (8003ea8 <statemachine+0x1718>)
 8003c88:	4888      	ldr	r0, [pc, #544]	; (8003eac <statemachine+0x171c>)
 8003c8a:	f00b f845 	bl	800ed18 <USBD_HID_SendReport>
					  HAL_Delay (50);
 8003c8e:	2032      	movs	r0, #50	; 0x32
 8003c90:	f000 fd3c 	bl	800470c <HAL_Delay>

					  if(BTN_B>=1){
 8003c94:	4b86      	ldr	r3, [pc, #536]	; (8003eb0 <statemachine+0x1720>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dd1d      	ble.n	8003cd8 <statemachine+0x1548>
						  keyboardstate++;
 8003c9c:	4b85      	ldr	r3, [pc, #532]	; (8003eb4 <statemachine+0x1724>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	4b83      	ldr	r3, [pc, #524]	; (8003eb4 <statemachine+0x1724>)
 8003ca6:	701a      	strb	r2, [r3, #0]
						  BTN_B=0;
 8003ca8:	4b81      	ldr	r3, [pc, #516]	; (8003eb0 <statemachine+0x1720>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8003cae:	e013      	b.n	8003cd8 <statemachine+0x1548>
				  case STATE_REPOS:

					  ssd1306_WriteString("repos", Font_6x8, White);
 8003cb0:	4a7b      	ldr	r2, [pc, #492]	; (8003ea0 <statemachine+0x1710>)
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	ca06      	ldmia	r2, {r1, r2}
 8003cb6:	4880      	ldr	r0, [pc, #512]	; (8003eb8 <statemachine+0x1728>)
 8003cb8:	f7fe fb28 	bl	800230c <ssd1306_WriteString>

					  if(BTN_B>=1){
 8003cbc:	4b7c      	ldr	r3, [pc, #496]	; (8003eb0 <statemachine+0x1720>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	dd0b      	ble.n	8003cdc <statemachine+0x154c>
						  keyboardstate--;
 8003cc4:	4b7b      	ldr	r3, [pc, #492]	; (8003eb4 <statemachine+0x1724>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	4b79      	ldr	r3, [pc, #484]	; (8003eb4 <statemachine+0x1724>)
 8003cce:	701a      	strb	r2, [r3, #0]
						  BTN_B=0;
 8003cd0:	4b77      	ldr	r3, [pc, #476]	; (8003eb0 <statemachine+0x1720>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8003cd6:	e001      	b.n	8003cdc <statemachine+0x154c>
					  break;
 8003cd8:	bf00      	nop
 8003cda:	e000      	b.n	8003cde <statemachine+0x154e>
					  break;
 8003cdc:	bf00      	nop
				  }

				  if(BTN_A>=1){
 8003cde:	4b77      	ldr	r3, [pc, #476]	; (8003ebc <statemachine+0x172c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f340 80d2 	ble.w	8003e8c <statemachine+0x16fc>
				  				  				  			 	state++;
 8003ce8:	4b75      	ldr	r3, [pc, #468]	; (8003ec0 <statemachine+0x1730>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	4b73      	ldr	r3, [pc, #460]	; (8003ec0 <statemachine+0x1730>)
 8003cf2:	701a      	strb	r2, [r3, #0]
				  				  				  			 	BTN_A=0;
 8003cf4:	4b71      	ldr	r3, [pc, #452]	; (8003ebc <statemachine+0x172c>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
				  				  				  			 	BTN_B=0;
 8003cfa:	4b6d      	ldr	r3, [pc, #436]	; (8003eb0 <statemachine+0x1720>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
				  				  				  			uint8_t baudchange[]={0x24, 0x50, 0x4D, 0x54,0x4B ,0x32, 0x35 ,0x31 ,0x2C ,0x33, 0x38, 0x34 ,0x30, 0x30 ,0x2A, 0x32 ,0x37, 0x0A};
 8003d00:	4b70      	ldr	r3, [pc, #448]	; (8003ec4 <statemachine+0x1734>)
 8003d02:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8003d06:	461d      	mov	r5, r3
 8003d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	8023      	strh	r3, [r4, #0]
				  				  				  		__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);
 8003d10:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <statemachine+0x1738>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4b6c      	ldr	r3, [pc, #432]	; (8003ec8 <statemachine+0x1738>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	601a      	str	r2, [r3, #0]
				  				  				  	HAL_UART_Transmit_IT(&hlpuart1,(uint8_t *)baudchange,18);
 8003d20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d24:	2212      	movs	r2, #18
 8003d26:	4619      	mov	r1, r3
 8003d28:	4868      	ldr	r0, [pc, #416]	; (8003ecc <statemachine+0x173c>)
 8003d2a:	f006 fec5 	bl	800aab8 <HAL_UART_Transmit_IT>
				  				  				  			uint8_t disablenmea[]={0x24, 0x50, 0x4D, 0x54, 0x4B, 0x33, 0x31, 0x34, 0x2C, 0x30, 0x2C, 0x31, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30,
 8003d2e:	4b68      	ldr	r3, [pc, #416]	; (8003ed0 <statemachine+0x1740>)
 8003d30:	463c      	mov	r4, r7
 8003d32:	461d      	mov	r5, r3
 8003d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	7023      	strb	r3, [r4, #0]
				  				  				  					0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2A, 0x32, 0x39};//$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29
				  				  				  		HAL_UART_Transmit_IT(&hlpuart1,(uint8_t *)disablenmea,49);
 8003d44:	463b      	mov	r3, r7
 8003d46:	2231      	movs	r2, #49	; 0x31
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4860      	ldr	r0, [pc, #384]	; (8003ecc <statemachine+0x173c>)
 8003d4c:	f006 feb4 	bl	800aab8 <HAL_UART_Transmit_IT>
				  				  				  		uint8_t updaterate[]={0x24, 0x50, 0x4D, 0x54, 0x4B, 0x32, 0x32, 0x30, 0x2C, 0x20, 0x32, 0x30, 0x30, 0x2A, 0x32, 0x43};//$PMTK220, 200*2C
 8003d50:	4b60      	ldr	r3, [pc, #384]	; (8003ed4 <statemachine+0x1744>)
 8003d52:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8003d56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				  				  				  	HAL_UART_Transmit_IT(&hlpuart1,(uint8_t *)updaterate,16);
 8003d5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d60:	2210      	movs	r2, #16
 8003d62:	4619      	mov	r1, r3
 8003d64:	4859      	ldr	r0, [pc, #356]	; (8003ecc <statemachine+0x173c>)
 8003d66:	f006 fea7 	bl	800aab8 <HAL_UART_Transmit_IT>
				  				  				  		HAL_UART_Abort(&hlpuart1);
 8003d6a:	4858      	ldr	r0, [pc, #352]	; (8003ecc <statemachine+0x173c>)
 8003d6c:	f006 ff4e 	bl	800ac0c <HAL_UART_Abort>
				  				  				  			HAL_UART_DeInit(&hlpuart1);
 8003d70:	4856      	ldr	r0, [pc, #344]	; (8003ecc <statemachine+0x173c>)
 8003d72:	f006 fe63 	bl	800aa3c <HAL_UART_DeInit>
				  				  				  			hlpuart1.Init.BaudRate = 38400;
 8003d76:	4b55      	ldr	r3, [pc, #340]	; (8003ecc <statemachine+0x173c>)
 8003d78:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003d7c:	605a      	str	r2, [r3, #4]
				  				  				  			HAL_UART_Init(&hlpuart1);
 8003d7e:	4853      	ldr	r0, [pc, #332]	; (8003ecc <statemachine+0x173c>)
 8003d80:	f006 fe0e 	bl	800a9a0 <HAL_UART_Init>
				  				  				  			HAL_UART_Abort(&hlpuart1);
 8003d84:	4851      	ldr	r0, [pc, #324]	; (8003ecc <statemachine+0x173c>)
 8003d86:	f006 ff41 	bl	800ac0c <HAL_UART_Abort>
				  				  				  			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8003d8a:	2240      	movs	r2, #64	; 0x40
 8003d8c:	4952      	ldr	r1, [pc, #328]	; (8003ed8 <statemachine+0x1748>)
 8003d8e:	484f      	ldr	r0, [pc, #316]	; (8003ecc <statemachine+0x173c>)
 8003d90:	f006 fef0 	bl	800ab74 <HAL_UART_Receive_DMA>





				  break;
 8003d94:	e07a      	b.n	8003e8c <statemachine+0x16fc>
			  case STATE_MEMTEST:
				  ssd1306_Fill(Black);
 8003d96:	2000      	movs	r0, #0
 8003d98:	f7fe f99c 	bl	80020d4 <ssd1306_Fill>
				  ssd1306_SetCursor(32, 32);
 8003d9c:	2120      	movs	r1, #32
 8003d9e:	2020      	movs	r0, #32
 8003da0:	f7fe fada 	bl	8002358 <ssd1306_SetCursor>
				  ssd1306_WriteString("test", Font_6x8, White);
 8003da4:	4a3e      	ldr	r2, [pc, #248]	; (8003ea0 <statemachine+0x1710>)
 8003da6:	2301      	movs	r3, #1
 8003da8:	ca06      	ldmia	r2, {r1, r2}
 8003daa:	484c      	ldr	r0, [pc, #304]	; (8003edc <statemachine+0x174c>)
 8003dac:	f7fe faae 	bl	800230c <ssd1306_WriteString>
				 nmea_parse(&myData, DataBuffer);
 8003db0:	494b      	ldr	r1, [pc, #300]	; (8003ee0 <statemachine+0x1750>)
 8003db2:	484c      	ldr	r0, [pc, #304]	; (8003ee4 <statemachine+0x1754>)
 8003db4:	f7fe f83a 	bl	8001e2c <nmea_parse>

				 			 			 						snprintf(str,15, "spd=%.1f",myData.speed);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8003db8:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <statemachine+0x1754>)
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc fbc3 	bl	8000548 <__aeabi_f2d>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	e9cd 2300 	strd	r2, r3, [sp]
 8003dca:	4a47      	ldr	r2, [pc, #284]	; (8003ee8 <statemachine+0x1758>)
 8003dcc:	210f      	movs	r1, #15
 8003dce:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003dd2:	f00e fe57 	bl	8012a84 <sniprintf>
				 			 			 						ssd1306_SetCursor(32, 40);
 8003dd6:	2128      	movs	r1, #40	; 0x28
 8003dd8:	2020      	movs	r0, #32
 8003dda:	f7fe fabd 	bl	8002358 <ssd1306_SetCursor>
				 			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003dde:	4a30      	ldr	r2, [pc, #192]	; (8003ea0 <statemachine+0x1710>)
 8003de0:	2301      	movs	r3, #1
 8003de2:	ca06      	ldmia	r2, {r1, r2}
 8003de4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003de8:	f7fe fa90 	bl	800230c <ssd1306_WriteString>
				 			 			 						snprintf(str,15, "SatNb :%d",myData.satelliteCount);
 8003dec:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <statemachine+0x1754>)
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	4a3e      	ldr	r2, [pc, #248]	; (8003eec <statemachine+0x175c>)
 8003df2:	210f      	movs	r1, #15
 8003df4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003df8:	f00e fe44 	bl	8012a84 <sniprintf>
				 			 			 						ssd1306_SetCursor(32, 48);
 8003dfc:	2130      	movs	r1, #48	; 0x30
 8003dfe:	2020      	movs	r0, #32
 8003e00:	f7fe faaa 	bl	8002358 <ssd1306_SetCursor>
				 			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003e04:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <statemachine+0x1710>)
 8003e06:	2301      	movs	r3, #1
 8003e08:	ca06      	ldmia	r2, {r1, r2}
 8003e0a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003e0e:	f7fe fa7d 	bl	800230c <ssd1306_WriteString>
				 			 			 						free(str);
 8003e12:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003e16:	f00c ff41 	bl	8010c9c <free>



				  if(BTN_A>=1){
 8003e1a:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <statemachine+0x172c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	dd36      	ble.n	8003e90 <statemachine+0x1700>
				  				  			 	state--;
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <statemachine+0x1730>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <statemachine+0x1730>)
 8003e2c:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003e2e:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <statemachine+0x1730>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <statemachine+0x1730>)
 8003e38:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003e3a:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <statemachine+0x1730>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <statemachine+0x1730>)
 8003e44:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003e46:	4b1e      	ldr	r3, [pc, #120]	; (8003ec0 <statemachine+0x1730>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <statemachine+0x1730>)
 8003e50:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003e52:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <statemachine+0x1730>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <statemachine+0x1730>)
 8003e5c:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003e5e:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <statemachine+0x1730>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <statemachine+0x1730>)
 8003e68:	701a      	strb	r2, [r3, #0]
				  				  			 	BTN_A=0;
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <statemachine+0x172c>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
				  				  			 	BTN_B=0;
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <statemachine+0x1720>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
				  				  	}




				  break;
 8003e76:	e00b      	b.n	8003e90 <statemachine+0x1700>
				  break;
 8003e78:	bf00      	nop
 8003e7a:	e00a      	b.n	8003e92 <statemachine+0x1702>
			  break;
 8003e7c:	bf00      	nop
 8003e7e:	e008      	b.n	8003e92 <statemachine+0x1702>
			  break;
 8003e80:	bf00      	nop
 8003e82:	e006      	b.n	8003e92 <statemachine+0x1702>
			  break;
 8003e84:	bf00      	nop
 8003e86:	e004      	b.n	8003e92 <statemachine+0x1702>
			  break;
 8003e88:	bf00      	nop
 8003e8a:	e002      	b.n	8003e92 <statemachine+0x1702>
				  break;
 8003e8c:	bf00      	nop
 8003e8e:	e000      	b.n	8003e92 <statemachine+0x1702>
				  break;
 8003e90:	bf00      	nop


	}

return ;
 8003e92:	bf00      	nop
 8003e94:	bf00      	nop
}
 8003e96:	37bc      	adds	r7, #188	; 0xbc
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	ecbd 8b02 	vpop	{d8}
 8003e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ea0:	20000008 	.word	0x20000008
 8003ea4:	08016bb8 	.word	0x08016bb8
 8003ea8:	20000830 	.word	0x20000830
 8003eac:	20000cac 	.word	0x20000cac
 8003eb0:	20000824 	.word	0x20000824
 8003eb4:	2000082d 	.word	0x2000082d
 8003eb8:	08016bbc 	.word	0x08016bbc
 8003ebc:	20000820 	.word	0x20000820
 8003ec0:	20000828 	.word	0x20000828
 8003ec4:	08016bd8 	.word	0x08016bd8
 8003ec8:	200004bc 	.word	0x200004bc
 8003ecc:	20000434 	.word	0x20000434
 8003ed0:	08016bec 	.word	0x08016bec
 8003ed4:	08016c20 	.word	0x08016c20
 8003ed8:	200005a0 	.word	0x200005a0
 8003edc:	08016bc4 	.word	0x08016bc4
 8003ee0:	200005e0 	.word	0x200005e0
 8003ee4:	200007e0 	.word	0x200007e0
 8003ee8:	08016bcc 	.word	0x08016bcc
 8003eec:	08016b6c 	.word	0x08016b6c

08003ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef6:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <HAL_MspInit+0x44>)
 8003ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efa:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <HAL_MspInit+0x44>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6613      	str	r3, [r2, #96]	; 0x60
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_MspInit+0x44>)
 8003f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_MspInit+0x44>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <HAL_MspInit+0x44>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f18:	6593      	str	r3, [r2, #88]	; 0x58
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_MspInit+0x44>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000

08003f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	; 0x28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 0314 	add.w	r3, r7, #20
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2f      	ldr	r2, [pc, #188]	; (8004014 <HAL_ADC_MspInit+0xdc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d157      	bne.n	800400a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	4a2e      	ldr	r2, [pc, #184]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f66:	4b2c      	ldr	r3, [pc, #176]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f72:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	4a28      	ldr	r2, [pc, #160]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003f8e:	230b      	movs	r3, #11
 8003f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fa0:	f002 fad0 	bl	8006544 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fa6:	4a1e      	ldr	r2, [pc, #120]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fa8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003faa:	4b1c      	ldr	r3, [pc, #112]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fb6:	4b19      	ldr	r3, [pc, #100]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fbc:	4b17      	ldr	r3, [pc, #92]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fbe:	2280      	movs	r2, #128	; 0x80
 8003fc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fc2:	4b16      	ldr	r3, [pc, #88]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003fd8:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003fde:	480f      	ldr	r0, [pc, #60]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fe0:	f001 ff9c 	bl	8005f1c <HAL_DMA_Init>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8003fea:	f7fd fc05 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a0a      	ldr	r2, [pc, #40]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003ff2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ff4:	4a09      	ldr	r2, [pc, #36]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	2012      	movs	r0, #18
 8004000:	f001 ff47 	bl	8005e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004004:	2012      	movs	r0, #18
 8004006:	f001 ff60 	bl	8005eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800400a:	bf00      	nop
 800400c:	3728      	adds	r7, #40	; 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	50040000 	.word	0x50040000
 8004018:	40021000 	.word	0x40021000
 800401c:	20000398 	.word	0x20000398
 8004020:	40020008 	.word	0x40020008

08004024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b0a0      	sub	sp, #128	; 0x80
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800403c:	f107 0318 	add.w	r3, r7, #24
 8004040:	2254      	movs	r2, #84	; 0x54
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f00e fdb4 	bl	8012bb2 <memset>
  if(hi2c->Instance==I2C3)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a2d      	ldr	r2, [pc, #180]	; (8004104 <HAL_I2C_MspInit+0xe0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d153      	bne.n	80040fc <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004058:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800405a:	2300      	movs	r3, #0
 800405c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800405e:	f107 0318 	add.w	r3, r7, #24
 8004062:	4618      	mov	r0, r3
 8004064:	f005 fd90 	bl	8009b88 <HAL_RCCEx_PeriphCLKConfig>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800406e:	f7fd fbc3 	bl	80017f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004072:	4b25      	ldr	r3, [pc, #148]	; (8004108 <HAL_I2C_MspInit+0xe4>)
 8004074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004076:	4a24      	ldr	r2, [pc, #144]	; (8004108 <HAL_I2C_MspInit+0xe4>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <HAL_I2C_MspInit+0xe4>)
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800408a:	4b1f      	ldr	r3, [pc, #124]	; (8004108 <HAL_I2C_MspInit+0xe4>)
 800408c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408e:	4a1e      	ldr	r2, [pc, #120]	; (8004108 <HAL_I2C_MspInit+0xe4>)
 8004090:	f043 0302 	orr.w	r3, r3, #2
 8004094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004096:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <HAL_I2C_MspInit+0xe4>)
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040a6:	2312      	movs	r3, #18
 80040a8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040b2:	2304      	movs	r3, #4
 80040b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80040ba:	4619      	mov	r1, r3
 80040bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040c0:	f002 fa40 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040c4:	2310      	movs	r3, #16
 80040c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040c8:	2312      	movs	r3, #18
 80040ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	2303      	movs	r3, #3
 80040d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040d4:	2304      	movs	r3, #4
 80040d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80040dc:	4619      	mov	r1, r3
 80040de:	480b      	ldr	r0, [pc, #44]	; (800410c <HAL_I2C_MspInit+0xe8>)
 80040e0:	f002 fa30 	bl	8006544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <HAL_I2C_MspInit+0xe4>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	4a07      	ldr	r2, [pc, #28]	; (8004108 <HAL_I2C_MspInit+0xe4>)
 80040ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040ee:	6593      	str	r3, [r2, #88]	; 0x58
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_I2C_MspInit+0xe4>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80040fc:	bf00      	nop
 80040fe:	3780      	adds	r7, #128	; 0x80
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40005c00 	.word	0x40005c00
 8004108:	40021000 	.word	0x40021000
 800410c:	48000400 	.word	0x48000400

08004110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b09e      	sub	sp, #120	; 0x78
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004118:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004128:	f107 0310 	add.w	r3, r7, #16
 800412c:	2254      	movs	r2, #84	; 0x54
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f00e fd3e 	bl	8012bb2 <memset>
  if(huart->Instance==LPUART1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a37      	ldr	r2, [pc, #220]	; (8004218 <HAL_UART_MspInit+0x108>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d167      	bne.n	8004210 <HAL_UART_MspInit+0x100>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004140:	2320      	movs	r3, #32
 8004142:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004144:	2300      	movs	r3, #0
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004148:	f107 0310 	add.w	r3, r7, #16
 800414c:	4618      	mov	r0, r3
 800414e:	f005 fd1b 	bl	8009b88 <HAL_RCCEx_PeriphCLKConfig>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004158:	f7fd fb4e 	bl	80017f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800415c:	4b2f      	ldr	r3, [pc, #188]	; (800421c <HAL_UART_MspInit+0x10c>)
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	4a2e      	ldr	r2, [pc, #184]	; (800421c <HAL_UART_MspInit+0x10c>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004168:	4b2c      	ldr	r3, [pc, #176]	; (800421c <HAL_UART_MspInit+0x10c>)
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004174:	4b29      	ldr	r3, [pc, #164]	; (800421c <HAL_UART_MspInit+0x10c>)
 8004176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004178:	4a28      	ldr	r2, [pc, #160]	; (800421c <HAL_UART_MspInit+0x10c>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004180:	4b26      	ldr	r3, [pc, #152]	; (800421c <HAL_UART_MspInit+0x10c>)
 8004182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800418c:	230c      	movs	r3, #12
 800418e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004190:	2302      	movs	r3, #2
 8004192:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004194:	2300      	movs	r3, #0
 8004196:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004198:	2303      	movs	r3, #3
 800419a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800419c:	2308      	movs	r3, #8
 800419e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80041a4:	4619      	mov	r1, r3
 80041a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041aa:	f002 f9cb 	bl	8006544 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80041ae:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041b0:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <HAL_UART_MspInit+0x114>)
 80041b2:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 80041b4:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041b6:	2204      	movs	r2, #4
 80041b8:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ba:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041bc:	2200      	movs	r2, #0
 80041be:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041c6:	4b16      	ldr	r3, [pc, #88]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041c8:	2280      	movs	r2, #128	; 0x80
 80041ca:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041cc:	4b14      	ldr	r3, [pc, #80]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041d2:	4b13      	ldr	r3, [pc, #76]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 80041d8:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041da:	2200      	movs	r2, #0
 80041dc:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 80041e4:	480e      	ldr	r0, [pc, #56]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041e6:	f001 fe99 	bl	8005f1c <HAL_DMA_Init>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80041f0:	f7fd fb02 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart_rx);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041f8:	675a      	str	r2, [r3, #116]	; 0x74
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_UART_MspInit+0x110>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004200:	2200      	movs	r2, #0
 8004202:	2100      	movs	r1, #0
 8004204:	2046      	movs	r0, #70	; 0x46
 8004206:	f001 fe44 	bl	8005e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800420a:	2046      	movs	r0, #70	; 0x46
 800420c:	f001 fe5d 	bl	8005eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8004210:	bf00      	nop
 8004212:	3778      	adds	r7, #120	; 0x78
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40008000 	.word	0x40008000
 800421c:	40021000 	.word	0x40021000
 8004220:	200004bc 	.word	0x200004bc
 8004224:	40020480 	.word	0x40020480

08004228 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <HAL_UART_MspDeInit+0x40>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d112      	bne.n	8004260 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <HAL_UART_MspDeInit+0x44>)
 800423c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423e:	4a0b      	ldr	r2, [pc, #44]	; (800426c <HAL_UART_MspDeInit+0x44>)
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	65d3      	str	r3, [r2, #92]	; 0x5c

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004246:	210c      	movs	r1, #12
 8004248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800424c:	f002 fae4 	bl	8006818 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	4618      	mov	r0, r3
 8004256:	f001 ff19 	bl	800608c <HAL_DMA_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 800425a:	2046      	movs	r0, #70	; 0x46
 800425c:	f001 fe43 	bl	8005ee6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40008000 	.word	0x40008000
 800426c:	40021000 	.word	0x40021000

08004270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d10c      	bne.n	800429c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004282:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6593      	str	r3, [r2, #88]	; 0x58
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800429a:	e018      	b.n	80042ce <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <HAL_TIM_Base_MspInit+0x6c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d113      	bne.n	80042ce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	4a0b      	ldr	r2, [pc, #44]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 80042ac:	f043 0320 	orr.w	r3, r3, #32
 80042b0:	6593      	str	r3, [r2, #88]	; 0x58
 80042b2:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	2037      	movs	r0, #55	; 0x37
 80042c4:	f001 fde5 	bl	8005e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80042c8:	2037      	movs	r0, #55	; 0x37
 80042ca:	f001 fdfe 	bl	8005eca <HAL_NVIC_EnableIRQ>
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40001400 	.word	0x40001400

080042e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042e4:	e7fe      	b.n	80042e4 <NMI_Handler+0x4>
	...

080042e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_Fill(Black);
 80042ec:	2000      	movs	r0, #0
 80042ee:	f7fd fef1 	bl	80020d4 <ssd1306_Fill>
	  ssd1306_SetCursor(33, 36);
 80042f2:	2124      	movs	r1, #36	; 0x24
 80042f4:	2021      	movs	r0, #33	; 0x21
 80042f6:	f7fe f82f 	bl	8002358 <ssd1306_SetCursor>
	  ssd1306_WriteString("rincee en", Font_6x8, White);
 80042fa:	4a09      	ldr	r2, [pc, #36]	; (8004320 <HardFault_Handler+0x38>)
 80042fc:	2301      	movs	r3, #1
 80042fe:	ca06      	ldmia	r2, {r1, r2}
 8004300:	4808      	ldr	r0, [pc, #32]	; (8004324 <HardFault_Handler+0x3c>)
 8004302:	f7fe f803 	bl	800230c <ssd1306_WriteString>
	  ssd1306_SetCursor(33, 46);
 8004306:	212e      	movs	r1, #46	; 0x2e
 8004308:	2021      	movs	r0, #33	; 0x21
 800430a:	f7fe f825 	bl	8002358 <ssd1306_SetCursor>
	  ssd1306_WriteString("code", Font_6x8, White);
 800430e:	4a04      	ldr	r2, [pc, #16]	; (8004320 <HardFault_Handler+0x38>)
 8004310:	2301      	movs	r3, #1
 8004312:	ca06      	ldmia	r2, {r1, r2}
 8004314:	4804      	ldr	r0, [pc, #16]	; (8004328 <HardFault_Handler+0x40>)
 8004316:	f7fd fff9 	bl	800230c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800431a:	f7fd fef3 	bl	8002104 <ssd1306_UpdateScreen>
	  ssd1306_Fill(Black);
 800431e:	e7e5      	b.n	80042ec <HardFault_Handler+0x4>
 8004320:	20000008 	.word	0x20000008
 8004324:	08016c30 	.word	0x08016c30
 8004328:	08016c3c 	.word	0x08016c3c

0800432c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004330:	e7fe      	b.n	8004330 <MemManage_Handler+0x4>

08004332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004332:	b480      	push	{r7}
 8004334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004336:	e7fe      	b.n	8004336 <BusFault_Handler+0x4>

08004338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800433c:	e7fe      	b.n	800433c <UsageFault_Handler+0x4>

0800433e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	distanceparcouru+=1;
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <SysTick_Handler+0x18>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	4a03      	ldr	r2, [pc, #12]	; (8004380 <SysTick_Handler+0x18>)
 8004374:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004376:	f000 f9a9 	bl	80046cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000c9c 	.word	0x20000c9c

08004384 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004388:	4802      	ldr	r0, [pc, #8]	; (8004394 <DMA1_Channel1_IRQHandler+0x10>)
 800438a:	f001 fff0 	bl	800636e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000398 	.word	0x20000398

08004398 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800439c:	4802      	ldr	r0, [pc, #8]	; (80043a8 <ADC1_IRQHandler+0x10>)
 800439e:	f000 fd79 	bl	8004e94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000334 	.word	0x20000334

080043ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80043b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80043b4:	f002 fb12 	bl	80069dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80043b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043bc:	f002 fb0e 	bl	80069dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	distanceparcouru+=1;
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <TIM7_IRQHandler+0x18>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	4a03      	ldr	r2, [pc, #12]	; (80043dc <TIM7_IRQHandler+0x18>)
 80043d0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80043d2:	4803      	ldr	r0, [pc, #12]	; (80043e0 <TIM7_IRQHandler+0x1c>)
 80043d4:	f005 ff64 	bl	800a2a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80043d8:	bf00      	nop
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000c9c 	.word	0x20000c9c
 80043e0:	20000550 	.word	0x20000550

080043e4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80043e8:	4802      	ldr	r0, [pc, #8]	; (80043f4 <USB_IRQHandler+0x10>)
 80043ea:	f003 f8e2 	bl	80075b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20001188 	.word	0x20001188

080043f8 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 80043fc:	4802      	ldr	r0, [pc, #8]	; (8004408 <DMA2_Channel7_IRQHandler+0x10>)
 80043fe:	f001 ffb6 	bl	800636e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	200004bc 	.word	0x200004bc

0800440c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004410:	4802      	ldr	r0, [pc, #8]	; (800441c <LPUART1_IRQHandler+0x10>)
 8004412:	f006 fcf7 	bl	800ae04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000434 	.word	0x20000434

08004420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return 1;
 8004424:	2301      	movs	r3, #1
}
 8004426:	4618      	mov	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <_kill>:

int _kill(int pid, int sig)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800443a:	f00e fca1 	bl	8012d80 <__errno>
 800443e:	4603      	mov	r3, r0
 8004440:	2216      	movs	r2, #22
 8004442:	601a      	str	r2, [r3, #0]
  return -1;
 8004444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <_exit>:

void _exit (int status)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004458:	f04f 31ff 	mov.w	r1, #4294967295
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ffe7 	bl	8004430 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004462:	e7fe      	b.n	8004462 <_exit+0x12>

08004464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e00a      	b.n	800448c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004476:	f3af 8000 	nop.w
 800447a:	4601      	mov	r1, r0
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	60ba      	str	r2, [r7, #8]
 8004482:	b2ca      	uxtb	r2, r1
 8004484:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	3301      	adds	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	429a      	cmp	r2, r3
 8004492:	dbf0      	blt.n	8004476 <_read+0x12>
  }

  return len;
 8004494:	687b      	ldr	r3, [r7, #4]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e009      	b.n	80044c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	60ba      	str	r2, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	3301      	adds	r3, #1
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	dbf1      	blt.n	80044b0 <_write+0x12>
  }
  return len;
 80044cc:	687b      	ldr	r3, [r7, #4]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <_close>:

int _close(int file)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044fe:	605a      	str	r2, [r3, #4]
  return 0;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <_isatty>:

int _isatty(int file)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004516:	2301      	movs	r3, #1
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004548:	4a14      	ldr	r2, [pc, #80]	; (800459c <_sbrk+0x5c>)
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <_sbrk+0x60>)
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <_sbrk+0x64>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <_sbrk+0x64>)
 800455e:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <_sbrk+0x68>)
 8004560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <_sbrk+0x64>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d207      	bcs.n	8004580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004570:	f00e fc06 	bl	8012d80 <__errno>
 8004574:	4603      	mov	r3, r0
 8004576:	220c      	movs	r2, #12
 8004578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	e009      	b.n	8004594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <_sbrk+0x64>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <_sbrk+0x64>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <_sbrk+0x64>)
 8004590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004592:	68fb      	ldr	r3, [r7, #12]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20010000 	.word	0x20010000
 80045a0:	00000400 	.word	0x00000400
 80045a4:	20000ca0 	.word	0x20000ca0
 80045a8:	200015e0 	.word	0x200015e0

080045ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <SystemInit+0x20>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	4a05      	ldr	r2, [pc, #20]	; (80045cc <SystemInit+0x20>)
 80045b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80045c0:	bf00      	nop
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80045d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004608 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80045d4:	f7ff ffea 	bl	80045ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045d8:	480c      	ldr	r0, [pc, #48]	; (800460c <LoopForever+0x6>)
  ldr r1, =_edata
 80045da:	490d      	ldr	r1, [pc, #52]	; (8004610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045dc:	4a0d      	ldr	r2, [pc, #52]	; (8004614 <LoopForever+0xe>)
  movs r3, #0
 80045de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045e0:	e002      	b.n	80045e8 <LoopCopyDataInit>

080045e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045e6:	3304      	adds	r3, #4

080045e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045ec:	d3f9      	bcc.n	80045e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ee:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045f0:	4c0a      	ldr	r4, [pc, #40]	; (800461c <LoopForever+0x16>)
  movs r3, #0
 80045f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045f4:	e001      	b.n	80045fa <LoopFillZerobss>

080045f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045f8:	3204      	adds	r2, #4

080045fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045fc:	d3fb      	bcc.n	80045f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045fe:	f00e fbc5 	bl	8012d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004602:	f7fc fe17 	bl	8001234 <main>

08004606 <LoopForever>:

LoopForever:
    b LoopForever
 8004606:	e7fe      	b.n	8004606 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004608:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800460c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004610:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 8004614:	08018f10 	.word	0x08018f10
  ldr r2, =_sbss
 8004618:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 800461c:	200015e0 	.word	0x200015e0

08004620 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004620:	e7fe      	b.n	8004620 <CAN1_RX0_IRQHandler>

08004622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800462c:	2003      	movs	r0, #3
 800462e:	f001 fc25 	bl	8005e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004632:	200f      	movs	r0, #15
 8004634:	f000 f80e 	bl	8004654 <HAL_InitTick>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	71fb      	strb	r3, [r7, #7]
 8004642:	e001      	b.n	8004648 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004644:	f7ff fc54 	bl	8003ef0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004648:	79fb      	ldrb	r3, [r7, #7]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_InitTick+0x6c>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d023      	beq.n	80046b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004668:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <HAL_InitTick+0x70>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <HAL_InitTick+0x6c>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	4619      	mov	r1, r3
 8004672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004676:	fbb3 f3f1 	udiv	r3, r3, r1
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	4618      	mov	r0, r3
 8004680:	f001 fc3f 	bl	8005f02 <HAL_SYSTICK_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b0f      	cmp	r3, #15
 800468e:	d809      	bhi.n	80046a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004690:	2200      	movs	r2, #0
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	f001 fbfb 	bl	8005e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800469c:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <HAL_InitTick+0x74>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e007      	b.n	80046b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
 80046a8:	e004      	b.n	80046b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
 80046ae:	e001      	b.n	80046b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000028 	.word	0x20000028
 80046c4:	20000020 	.word	0x20000020
 80046c8:	20000024 	.word	0x20000024

080046cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046d0:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_IncTick+0x20>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_IncTick+0x24>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4413      	add	r3, r2
 80046dc:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <HAL_IncTick+0x24>)
 80046de:	6013      	str	r3, [r2, #0]
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000028 	.word	0x20000028
 80046f0:	20000ca4 	.word	0x20000ca4

080046f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return uwTick;
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <HAL_GetTick+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000ca4 	.word	0x20000ca4

0800470c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004714:	f7ff ffee 	bl	80046f4 <HAL_GetTick>
 8004718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d005      	beq.n	8004732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_Delay+0x44>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004732:	bf00      	nop
 8004734:	f7ff ffde 	bl	80046f4 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	429a      	cmp	r2, r3
 8004742:	d8f7      	bhi.n	8004734 <HAL_Delay+0x28>
  {
  }
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000028 	.word	0x20000028

08004754 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	609a      	str	r2, [r3, #8]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3360      	adds	r3, #96	; 0x60
 80047ce:	461a      	mov	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <LL_ADC_SetOffset+0x44>)
 80047de:	4013      	ands	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	03fff000 	.word	0x03fff000

08004804 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3360      	adds	r3, #96	; 0x60
 8004812:	461a      	mov	r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3360      	adds	r3, #96	; 0x60
 8004840:	461a      	mov	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	431a      	orrs	r2, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3330      	adds	r3, #48	; 0x30
 800489c:	461a      	mov	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	4413      	add	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	211f      	movs	r1, #31
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	401a      	ands	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	0e9b      	lsrs	r3, r3, #26
 80048c4:	f003 011f 	and.w	r1, r3, #31
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	431a      	orrs	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3314      	adds	r3, #20
 800491a:	461a      	mov	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	0e5b      	lsrs	r3, r3, #25
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	4413      	add	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	0d1b      	lsrs	r3, r3, #20
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	2107      	movs	r1, #7
 8004938:	fa01 f303 	lsl.w	r3, r1, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	401a      	ands	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	0d1b      	lsrs	r3, r3, #20
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	431a      	orrs	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004978:	43db      	mvns	r3, r3
 800497a:	401a      	ands	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f003 0318 	and.w	r3, r3, #24
 8004982:	4908      	ldr	r1, [pc, #32]	; (80049a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004984:	40d9      	lsrs	r1, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	400b      	ands	r3, r1
 800498a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498e:	431a      	orrs	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	0007ffff 	.word	0x0007ffff

080049a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80049b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6093      	str	r3, [r2, #8]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e0:	d101      	bne.n	80049e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004a04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a30:	d101      	bne.n	8004a36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a58:	f043 0201 	orr.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <LL_ADC_IsEnabled+0x18>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <LL_ADC_IsEnabled+0x1a>
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004aa2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004aa6:	f043 0204 	orr.w	r2, r3, #4
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d101      	bne.n	8004ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d101      	bne.n	8004af8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e126      	b.n	8004d70 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fa01 	bl	8003f38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff ff3f 	bl	80049cc <LL_ADC_IsDeepPowerDownEnabled>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff ff25 	bl	80049a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff ff5a 	bl	8004a1c <LL_ADC_IsInternalRegulatorEnabled>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d115      	bne.n	8004b9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff ff3e 	bl	80049f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b78:	4b7f      	ldr	r3, [pc, #508]	; (8004d78 <HAL_ADC_Init+0x270>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	099b      	lsrs	r3, r3, #6
 8004b7e:	4a7f      	ldr	r2, [pc, #508]	; (8004d7c <HAL_ADC_Init+0x274>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	3301      	adds	r3, #1
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b8c:	e002      	b.n	8004b94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f9      	bne.n	8004b8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff3c 	bl	8004a1c <LL_ADC_IsInternalRegulatorEnabled>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10d      	bne.n	8004bc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	f043 0210 	orr.w	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	f043 0201 	orr.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff ff75 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 8004bd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f040 80bf 	bne.w	8004d5e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 80bb 	bne.w	8004d5e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004bf0:	f043 0202 	orr.w	r2, r3, #2
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff ff35 	bl	8004a6c <LL_ADC_IsEnabled>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c08:	485d      	ldr	r0, [pc, #372]	; (8004d80 <HAL_ADC_Init+0x278>)
 8004c0a:	f7ff ff2f 	bl	8004a6c <LL_ADC_IsEnabled>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d105      	bne.n	8004c20 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	485a      	ldr	r0, [pc, #360]	; (8004d84 <HAL_ADC_Init+0x27c>)
 8004c1c:	f7ff fd9a 	bl	8004754 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	7e5b      	ldrb	r3, [r3, #25]
 8004c24:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c2a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004c30:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004c36:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c3e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d106      	bne.n	8004c5c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	3b01      	subs	r3, #1
 8004c54:	045b      	lsls	r3, r3, #17
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <HAL_ADC_Init+0x280>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	69b9      	ldr	r1, [r7, #24]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff ff25 	bl	8004ae0 <LL_ADC_INJ_IsConversionOngoing>
 8004c96:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d13d      	bne.n	8004d1a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d13a      	bne.n	8004d1a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ca8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cb0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cc0:	f023 0302 	bic.w	r3, r3, #2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d118      	bne.n	8004d0a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ce2:	f023 0304 	bic.w	r3, r3, #4
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cf4:	4311      	orrs	r1, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	611a      	str	r2, [r3, #16]
 8004d08:	e007      	b.n	8004d1a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d10c      	bne.n	8004d3c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	f023 010f 	bic.w	r1, r3, #15
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	1e5a      	subs	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30
 8004d3a:	e007      	b.n	8004d4c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 020f 	bic.w	r2, r2, #15
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	f023 0303 	bic.w	r3, r3, #3
 8004d54:	f043 0201 	orr.w	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d5c:	e007      	b.n	8004d6e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f043 0210 	orr.w	r2, r3, #16
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000020 	.word	0x20000020
 8004d7c:	053e2d63 	.word	0x053e2d63
 8004d80:	50040000 	.word	0x50040000
 8004d84:	50040300 	.word	0x50040300
 8004d88:	fff0c007 	.word	0xfff0c007

08004d8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fe8c 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d167      	bne.n	8004e78 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_Start_DMA+0x2a>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e063      	b.n	8004e7e <HAL_ADC_Start_DMA+0xf2>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fe1c 	bl	80059fc <ADC_Enable>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d14f      	bne.n	8004e6e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df2:	f023 0206 	bic.w	r2, r3, #6
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	659a      	str	r2, [r3, #88]	; 0x58
 8004dfa:	e002      	b.n	8004e02 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	4a20      	ldr	r2, [pc, #128]	; (8004e88 <HAL_ADC_Start_DMA+0xfc>)
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0e:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <HAL_ADC_Start_DMA+0x100>)
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_ADC_Start_DMA+0x104>)
 8004e18:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	221c      	movs	r2, #28
 8004e20:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0210 	orr.w	r2, r2, #16
 8004e38:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3340      	adds	r3, #64	; 0x40
 8004e54:	4619      	mov	r1, r3
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f001 f9a9 	bl	80061b0 <HAL_DMA_Start_IT>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fe13 	bl	8004a92 <LL_ADC_REG_StartConversion>
 8004e6c:	e006      	b.n	8004e7c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004e76:	e001      	b.n	8004e7c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	08005b09 	.word	0x08005b09
 8004e8c:	08005be1 	.word	0x08005be1
 8004e90:	08005bfd 	.word	0x08005bfd

08004e94 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d017      	beq.n	8004eea <HAL_ADC_IRQHandler+0x56>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d012      	beq.n	8004eea <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d105      	bne.n	8004edc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fecf 	bl	8005c80 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <HAL_ADC_IRQHandler+0x6a>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d05e      	beq.n	8004fc6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d059      	beq.n	8004fc6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d105      	bne.n	8004f2a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fc99 	bl	8004866 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d03e      	beq.n	8004fb8 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d135      	bne.n	8004fb8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d12e      	bne.n	8004fb8 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fdab 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d11a      	bne.n	8004fa0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 020c 	bic.w	r2, r2, #12
 8004f78:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d112      	bne.n	8004fb8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	f043 0201 	orr.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	655a      	str	r2, [r3, #84]	; 0x54
 8004f9e:	e00b      	b.n	8004fb8 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f043 0210 	orr.w	r2, r3, #16
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fc f8a9 	bl	8001110 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	220c      	movs	r2, #12
 8004fc4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <HAL_ADC_IRQHandler+0x146>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d072      	beq.n	80050ca <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d06d      	beq.n	80050ca <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d105      	bne.n	8005006 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fc6a 	bl	80048e4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005010:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fc25 	bl	8004866 <LL_ADC_REG_IsTriggerSourceSWStart>
 800501c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d047      	beq.n	80050bc <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_ADC_IRQHandler+0x1b2>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d03f      	beq.n	80050bc <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005042:	2b00      	cmp	r3, #0
 8005044:	d13a      	bne.n	80050bc <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d133      	bne.n	80050bc <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d12e      	bne.n	80050bc <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fd3c 	bl	8004ae0 <LL_ADC_INJ_IsConversionOngoing>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11a      	bne.n	80050a4 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800507c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005092:	2b00      	cmp	r3, #0
 8005094:	d112      	bne.n	80050bc <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0201 	orr.w	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
 80050a2:	e00b      	b.n	80050bc <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	f043 0210 	orr.w	r2, r3, #16
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f043 0201 	orr.w	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fdb7 	bl	8005c30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2260      	movs	r2, #96	; 0x60
 80050c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <HAL_ADC_IRQHandler+0x264>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f890 	bl	8005210 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2280      	movs	r2, #128	; 0x80
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d012      	beq.n	8005128 <HAL_ADC_IRQHandler+0x294>
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fd9d 	bl	8005c58 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800512e:	2b00      	cmp	r3, #0
 8005130:	d012      	beq.n	8005158 <HAL_ADC_IRQHandler+0x2c4>
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fd8f 	bl	8005c6c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005156:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d02a      	beq.n	80051b8 <HAL_ADC_IRQHandler+0x324>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b00      	cmp	r3, #0
 800516a:	d025      	beq.n	80051b8 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8005174:	2301      	movs	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	e008      	b.n	800518c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8005188:	2301      	movs	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d10e      	bne.n	80051b0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	f043 0202 	orr.w	r2, r3, #2
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f83a 	bl	8005224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2210      	movs	r2, #16
 80051b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <HAL_ADC_IRQHandler+0x360>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f043 0208 	orr.w	r2, r3, #8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051ec:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fd28 	bl	8005c44 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80051f4:	bf00      	nop
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b0b6      	sub	sp, #216	; 0xd8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_ADC_ConfigChannel+0x22>
 8005256:	2302      	movs	r3, #2
 8005258:	e3bb      	b.n	80059d2 <HAL_ADC_ConfigChannel+0x79a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fc27 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 83a0 	bne.w	80059b4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b05      	cmp	r3, #5
 8005282:	d824      	bhi.n	80052ce <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	3b02      	subs	r3, #2
 800528a:	2b03      	cmp	r3, #3
 800528c:	d81b      	bhi.n	80052c6 <HAL_ADC_ConfigChannel+0x8e>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <HAL_ADC_ConfigChannel+0x5c>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052ad 	.word	0x080052ad
 800529c:	080052b5 	.word	0x080052b5
 80052a0:	080052bd 	.word	0x080052bd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80052a4:	230c      	movs	r3, #12
 80052a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80052aa:	e010      	b.n	80052ce <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80052ac:	2312      	movs	r3, #18
 80052ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80052b2:	e00c      	b.n	80052ce <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80052b4:	2318      	movs	r3, #24
 80052b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80052ba:	e008      	b.n	80052ce <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80052bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80052c4:	e003      	b.n	80052ce <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80052c6:	2306      	movs	r3, #6
 80052c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80052cc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80052dc:	f7ff fad6 	bl	800488c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fbe8 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 80052ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fbf4 	bl	8004ae0 <LL_ADC_INJ_IsConversionOngoing>
 80052f8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005300:	2b00      	cmp	r3, #0
 8005302:	f040 81a4 	bne.w	800564e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800530a:	2b00      	cmp	r3, #0
 800530c:	f040 819f 	bne.w	800564e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6819      	ldr	r1, [r3, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	461a      	mov	r2, r3
 800531e:	f7ff faf4 	bl	800490a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d00a      	beq.n	800535a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6919      	ldr	r1, [r3, #16]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005354:	f7ff fa32 	bl	80047bc <LL_ADC_SetOffset>
 8005358:	e179      	b.n	800564e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fa4f 	bl	8004804 <LL_ADC_GetOffsetChannel>
 8005366:	4603      	mov	r3, r0
 8005368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x14e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fa44 	bl	8004804 <LL_ADC_GetOffsetChannel>
 800537c:	4603      	mov	r3, r0
 800537e:	0e9b      	lsrs	r3, r3, #26
 8005380:	f003 021f 	and.w	r2, r3, #31
 8005384:	e01e      	b.n	80053c4 <HAL_ADC_ConfigChannel+0x18c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff fa39 	bl	8004804 <LL_ADC_GetOffsetChannel>
 8005392:	4603      	mov	r3, r0
 8005394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005398:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800539c:	fa93 f3a3 	rbit	r3, r3
 80053a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80053ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80053b4:	2320      	movs	r3, #32
 80053b6:	e004      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80053b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d105      	bne.n	80053dc <HAL_ADC_ConfigChannel+0x1a4>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	0e9b      	lsrs	r3, r3, #26
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	e018      	b.n	800540e <HAL_ADC_ConfigChannel+0x1d6>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053e8:	fa93 f3a3 	rbit	r3, r3
 80053ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80053f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80053f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005400:	2320      	movs	r3, #32
 8005402:	e004      	b.n	800540e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8005404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800540e:	429a      	cmp	r2, r3
 8005410:	d106      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2200      	movs	r2, #0
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fa08 	bl	8004830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2101      	movs	r1, #1
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff f9ec 	bl	8004804 <LL_ADC_GetOffsetChannel>
 800542c:	4603      	mov	r3, r0
 800542e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <HAL_ADC_ConfigChannel+0x214>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2101      	movs	r1, #1
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff f9e1 	bl	8004804 <LL_ADC_GetOffsetChannel>
 8005442:	4603      	mov	r3, r0
 8005444:	0e9b      	lsrs	r3, r3, #26
 8005446:	f003 021f 	and.w	r2, r3, #31
 800544a:	e01e      	b.n	800548a <HAL_ADC_ConfigChannel+0x252>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2101      	movs	r1, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff f9d6 	bl	8004804 <LL_ADC_GetOffsetChannel>
 8005458:	4603      	mov	r3, r0
 800545a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800546a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800546e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800547a:	2320      	movs	r3, #32
 800547c:	e004      	b.n	8005488 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800547e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005492:	2b00      	cmp	r3, #0
 8005494:	d105      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x26a>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	0e9b      	lsrs	r3, r3, #26
 800549c:	f003 031f 	and.w	r3, r3, #31
 80054a0:	e018      	b.n	80054d4 <HAL_ADC_ConfigChannel+0x29c>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054ae:	fa93 f3a3 	rbit	r3, r3
 80054b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80054b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80054be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80054c6:	2320      	movs	r3, #32
 80054c8:	e004      	b.n	80054d4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80054ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054ce:	fab3 f383 	clz	r3, r3
 80054d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d106      	bne.n	80054e6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2200      	movs	r2, #0
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff f9a5 	bl	8004830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2102      	movs	r1, #2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff f989 	bl	8004804 <LL_ADC_GetOffsetChannel>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <HAL_ADC_ConfigChannel+0x2da>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2102      	movs	r1, #2
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff f97e 	bl	8004804 <LL_ADC_GetOffsetChannel>
 8005508:	4603      	mov	r3, r0
 800550a:	0e9b      	lsrs	r3, r3, #26
 800550c:	f003 021f 	and.w	r2, r3, #31
 8005510:	e01e      	b.n	8005550 <HAL_ADC_ConfigChannel+0x318>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2102      	movs	r1, #2
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff f973 	bl	8004804 <LL_ADC_GetOffsetChannel>
 800551e:	4603      	mov	r3, r0
 8005520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005528:	fa93 f3a3 	rbit	r3, r3
 800552c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005530:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005540:	2320      	movs	r3, #32
 8005542:	e004      	b.n	800554e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8005544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005548:	fab3 f383 	clz	r3, r3
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_ADC_ConfigChannel+0x330>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	0e9b      	lsrs	r3, r3, #26
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	e014      	b.n	8005592 <HAL_ADC_ConfigChannel+0x35a>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005570:	fa93 f3a3 	rbit	r3, r3
 8005574:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800557c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8005584:	2320      	movs	r3, #32
 8005586:	e004      	b.n	8005592 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005592:	429a      	cmp	r2, r3
 8005594:	d106      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	2102      	movs	r1, #2
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff f946 	bl	8004830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2103      	movs	r1, #3
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff f92a 	bl	8004804 <LL_ADC_GetOffsetChannel>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x398>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2103      	movs	r1, #3
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff f91f 	bl	8004804 <LL_ADC_GetOffsetChannel>
 80055c6:	4603      	mov	r3, r0
 80055c8:	0e9b      	lsrs	r3, r3, #26
 80055ca:	f003 021f 	and.w	r2, r3, #31
 80055ce:	e017      	b.n	8005600 <HAL_ADC_ConfigChannel+0x3c8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2103      	movs	r1, #3
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff f914 	bl	8004804 <LL_ADC_GetOffsetChannel>
 80055dc:	4603      	mov	r3, r0
 80055de:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80055e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ea:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80055ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80055f2:	2320      	movs	r3, #32
 80055f4:	e003      	b.n	80055fe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80055f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x3e0>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	0e9b      	lsrs	r3, r3, #26
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	e011      	b.n	800563c <HAL_ADC_ConfigChannel+0x404>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005620:	fa93 f3a3 	rbit	r3, r3
 8005624:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005628:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800562a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005630:	2320      	movs	r3, #32
 8005632:	e003      	b.n	800563c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005636:	fab3 f383 	clz	r3, r3
 800563a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800563c:	429a      	cmp	r2, r3
 800563e:	d106      	bne.n	800564e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2200      	movs	r2, #0
 8005646:	2103      	movs	r1, #3
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff f8f1 	bl	8004830 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fa0a 	bl	8004a6c <LL_ADC_IsEnabled>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 8140 	bne.w	80058e0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6819      	ldr	r1, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	461a      	mov	r2, r3
 800566e:	f7ff f977 	bl	8004960 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	4a8f      	ldr	r2, [pc, #572]	; (80058b4 <HAL_ADC_ConfigChannel+0x67c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	f040 8131 	bne.w	80058e0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x46e>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	0e9b      	lsrs	r3, r3, #26
 8005694:	3301      	adds	r3, #1
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2b09      	cmp	r3, #9
 800569c:	bf94      	ite	ls
 800569e:	2301      	movls	r3, #1
 80056a0:	2300      	movhi	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	e019      	b.n	80056da <HAL_ADC_ConfigChannel+0x4a2>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80056b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80056b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80056be:	2320      	movs	r3, #32
 80056c0:	e003      	b.n	80056ca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80056c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c4:	fab3 f383 	clz	r3, r3
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	2b09      	cmp	r3, #9
 80056d2:	bf94      	ite	ls
 80056d4:	2301      	movls	r3, #1
 80056d6:	2300      	movhi	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d079      	beq.n	80057d2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x4c2>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0e9b      	lsrs	r3, r3, #26
 80056f0:	3301      	adds	r3, #1
 80056f2:	069b      	lsls	r3, r3, #26
 80056f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056f8:	e015      	b.n	8005726 <HAL_ADC_ConfigChannel+0x4ee>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800570c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005712:	2320      	movs	r3, #32
 8005714:	e003      	b.n	800571e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8005716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005718:	fab3 f383 	clz	r3, r3
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3301      	adds	r3, #1
 8005720:	069b      	lsls	r3, r3, #26
 8005722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <HAL_ADC_ConfigChannel+0x50e>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	0e9b      	lsrs	r3, r3, #26
 8005738:	3301      	adds	r3, #1
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2101      	movs	r1, #1
 8005740:	fa01 f303 	lsl.w	r3, r1, r3
 8005744:	e017      	b.n	8005776 <HAL_ADC_ConfigChannel+0x53e>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574e:	fa93 f3a3 	rbit	r3, r3
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005756:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800575e:	2320      	movs	r3, #32
 8005760:	e003      	b.n	800576a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005764:	fab3 f383 	clz	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	3301      	adds	r3, #1
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2101      	movs	r1, #1
 8005772:	fa01 f303 	lsl.w	r3, r1, r3
 8005776:	ea42 0103 	orr.w	r1, r2, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <HAL_ADC_ConfigChannel+0x564>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	0e9b      	lsrs	r3, r3, #26
 800578c:	3301      	adds	r3, #1
 800578e:	f003 021f 	and.w	r2, r3, #31
 8005792:	4613      	mov	r3, r2
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	4413      	add	r3, r2
 8005798:	051b      	lsls	r3, r3, #20
 800579a:	e018      	b.n	80057ce <HAL_ADC_ConfigChannel+0x596>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	fa93 f3a3 	rbit	r3, r3
 80057a8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80057b4:	2320      	movs	r3, #32
 80057b6:	e003      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	fab3 f383 	clz	r3, r3
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	3301      	adds	r3, #1
 80057c2:	f003 021f 	and.w	r2, r3, #31
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057ce:	430b      	orrs	r3, r1
 80057d0:	e081      	b.n	80058d6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d107      	bne.n	80057ee <HAL_ADC_ConfigChannel+0x5b6>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	0e9b      	lsrs	r3, r3, #26
 80057e4:	3301      	adds	r3, #1
 80057e6:	069b      	lsls	r3, r3, #26
 80057e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057ec:	e015      	b.n	800581a <HAL_ADC_ConfigChannel+0x5e2>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	fa93 f3a3 	rbit	r3, r3
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8005806:	2320      	movs	r3, #32
 8005808:	e003      	b.n	8005812 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	fab3 f383 	clz	r3, r3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	3301      	adds	r3, #1
 8005814:	069b      	lsls	r3, r3, #26
 8005816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_ADC_ConfigChannel+0x602>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	0e9b      	lsrs	r3, r3, #26
 800582c:	3301      	adds	r3, #1
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2101      	movs	r1, #1
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	e017      	b.n	800586a <HAL_ADC_ConfigChannel+0x632>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	fa93 f3a3 	rbit	r3, r3
 8005846:	61bb      	str	r3, [r7, #24]
  return result;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8005852:	2320      	movs	r3, #32
 8005854:	e003      	b.n	800585e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	fab3 f383 	clz	r3, r3
 800585c:	b2db      	uxtb	r3, r3
 800585e:	3301      	adds	r3, #1
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	2101      	movs	r1, #1
 8005866:	fa01 f303 	lsl.w	r3, r1, r3
 800586a:	ea42 0103 	orr.w	r1, r2, r3
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10d      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x65e>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	0e9b      	lsrs	r3, r3, #26
 8005880:	3301      	adds	r3, #1
 8005882:	f003 021f 	and.w	r2, r3, #31
 8005886:	4613      	mov	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4413      	add	r3, r2
 800588c:	3b1e      	subs	r3, #30
 800588e:	051b      	lsls	r3, r3, #20
 8005890:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005894:	e01e      	b.n	80058d4 <HAL_ADC_ConfigChannel+0x69c>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	60fb      	str	r3, [r7, #12]
  return result;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80058ae:	2320      	movs	r3, #32
 80058b0:	e006      	b.n	80058c0 <HAL_ADC_ConfigChannel+0x688>
 80058b2:	bf00      	nop
 80058b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	fab3 f383 	clz	r3, r3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	3301      	adds	r3, #1
 80058c2:	f003 021f 	and.w	r2, r3, #31
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	3b1e      	subs	r3, #30
 80058ce:	051b      	lsls	r3, r3, #20
 80058d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058da:	4619      	mov	r1, r3
 80058dc:	f7ff f815 	bl	800490a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b3d      	ldr	r3, [pc, #244]	; (80059dc <HAL_ADC_ConfigChannel+0x7a4>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d06c      	beq.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058ec:	483c      	ldr	r0, [pc, #240]	; (80059e0 <HAL_ADC_ConfigChannel+0x7a8>)
 80058ee:	f7fe ff57 	bl	80047a0 <LL_ADC_GetCommonPathInternalCh>
 80058f2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a3a      	ldr	r2, [pc, #232]	; (80059e4 <HAL_ADC_ConfigChannel+0x7ac>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d127      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d121      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a35      	ldr	r2, [pc, #212]	; (80059e8 <HAL_ADC_ConfigChannel+0x7b0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d157      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005916:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800591a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800591e:	4619      	mov	r1, r3
 8005920:	482f      	ldr	r0, [pc, #188]	; (80059e0 <HAL_ADC_ConfigChannel+0x7a8>)
 8005922:	f7fe ff2a 	bl	800477a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005926:	4b31      	ldr	r3, [pc, #196]	; (80059ec <HAL_ADC_ConfigChannel+0x7b4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	099b      	lsrs	r3, r3, #6
 800592c:	4a30      	ldr	r2, [pc, #192]	; (80059f0 <HAL_ADC_ConfigChannel+0x7b8>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	099b      	lsrs	r3, r3, #6
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005940:	e002      	b.n	8005948 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	3b01      	subs	r3, #1
 8005946:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f9      	bne.n	8005942 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800594e:	e03a      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <HAL_ADC_ConfigChannel+0x7bc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d113      	bne.n	8005982 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800595a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800595e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10d      	bne.n	8005982 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_ADC_ConfigChannel+0x7b0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d12a      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005978:	4619      	mov	r1, r3
 800597a:	4819      	ldr	r0, [pc, #100]	; (80059e0 <HAL_ADC_ConfigChannel+0x7a8>)
 800597c:	f7fe fefd 	bl	800477a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005980:	e021      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d11c      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800598c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d116      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <HAL_ADC_ConfigChannel+0x7b0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d111      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059aa:	4619      	mov	r1, r3
 80059ac:	480c      	ldr	r0, [pc, #48]	; (80059e0 <HAL_ADC_ConfigChannel+0x7a8>)
 80059ae:	f7fe fee4 	bl	800477a <LL_ADC_SetCommonPathInternalCh>
 80059b2:	e008      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80059ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	37d8      	adds	r7, #216	; 0xd8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	80080000 	.word	0x80080000
 80059e0:	50040300 	.word	0x50040300
 80059e4:	c7520000 	.word	0xc7520000
 80059e8:	50040000 	.word	0x50040000
 80059ec:	20000020 	.word	0x20000020
 80059f0:	053e2d63 	.word	0x053e2d63
 80059f4:	cb840000 	.word	0xcb840000
 80059f8:	80000001 	.word	0x80000001

080059fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff f82d 	bl	8004a6c <LL_ADC_IsEnabled>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d169      	bne.n	8005aec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <ADC_Enable+0xfc>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	f043 0210 	orr.w	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	f043 0201 	orr.w	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e055      	b.n	8005aee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fffc 	bl	8004a44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a4c:	482b      	ldr	r0, [pc, #172]	; (8005afc <ADC_Enable+0x100>)
 8005a4e:	f7fe fea7 	bl	80047a0 <LL_ADC_GetCommonPathInternalCh>
 8005a52:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d013      	beq.n	8005a84 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a5c:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <ADC_Enable+0x104>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	099b      	lsrs	r3, r3, #6
 8005a62:	4a28      	ldr	r2, [pc, #160]	; (8005b04 <ADC_Enable+0x108>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	099b      	lsrs	r3, r3, #6
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a76:	e002      	b.n	8005a7e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f9      	bne.n	8005a78 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a84:	f7fe fe36 	bl	80046f4 <HAL_GetTick>
 8005a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a8a:	e028      	b.n	8005ade <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe ffeb 	bl	8004a6c <LL_ADC_IsEnabled>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe ffcf 	bl	8004a44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005aa6:	f7fe fe25 	bl	80046f4 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d914      	bls.n	8005ade <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d00d      	beq.n	8005ade <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	f043 0210 	orr.w	r2, r3, #16
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	f043 0201 	orr.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e007      	b.n	8005aee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d1cf      	bne.n	8005a8c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	8000003f 	.word	0x8000003f
 8005afc:	50040300 	.word	0x50040300
 8005b00:	20000020 	.word	0x20000020
 8005b04:	053e2d63 	.word	0x053e2d63

08005b08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d14b      	bne.n	8005bba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d021      	beq.n	8005b80 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe fe90 	bl	8004866 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d032      	beq.n	8005bb2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d12b      	bne.n	8005bb2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d11f      	bne.n	8005bb2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	655a      	str	r2, [r3, #84]	; 0x54
 8005b7e:	e018      	b.n	8005bb2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d111      	bne.n	8005bb2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d105      	bne.n	8005bb2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	f043 0201 	orr.w	r2, r3, #1
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7fb faac 	bl	8001110 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005bb8:	e00e      	b.n	8005bd8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff fb2c 	bl	8005224 <HAL_ADC_ErrorCallback>
}
 8005bcc:	e004      	b.n	8005bd8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff fb04 	bl	80051fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1a:	f043 0204 	orr.w	r2, r3, #4
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fafe 	bl	8005224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cc6:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	60d3      	str	r3, [r2, #12]
}
 8005ccc:	bf00      	nop
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	f003 0307 	and.w	r3, r3, #7
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	e000ed00 	.word	0xe000ed00

08005cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	db0b      	blt.n	8005d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	f003 021f 	and.w	r2, r3, #31
 8005d10:	4907      	ldr	r1, [pc, #28]	; (8005d30 <__NVIC_EnableIRQ+0x38>)
 8005d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	2001      	movs	r0, #1
 8005d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	e000e100 	.word	0xe000e100

08005d34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	db12      	blt.n	8005d6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	f003 021f 	and.w	r2, r3, #31
 8005d4c:	490a      	ldr	r1, [pc, #40]	; (8005d78 <__NVIC_DisableIRQ+0x44>)
 8005d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	2001      	movs	r0, #1
 8005d56:	fa00 f202 	lsl.w	r2, r0, r2
 8005d5a:	3320      	adds	r3, #32
 8005d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d60:	f3bf 8f4f 	dsb	sy
}
 8005d64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d66:	f3bf 8f6f 	isb	sy
}
 8005d6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	e000e100 	.word	0xe000e100

08005d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	6039      	str	r1, [r7, #0]
 8005d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	db0a      	blt.n	8005da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	490c      	ldr	r1, [pc, #48]	; (8005dc8 <__NVIC_SetPriority+0x4c>)
 8005d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d9a:	0112      	lsls	r2, r2, #4
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	440b      	add	r3, r1
 8005da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005da4:	e00a      	b.n	8005dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	4908      	ldr	r1, [pc, #32]	; (8005dcc <__NVIC_SetPriority+0x50>)
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	3b04      	subs	r3, #4
 8005db4:	0112      	lsls	r2, r2, #4
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	440b      	add	r3, r1
 8005dba:	761a      	strb	r2, [r3, #24]
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	e000e100 	.word	0xe000e100
 8005dcc:	e000ed00 	.word	0xe000ed00

08005dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b089      	sub	sp, #36	; 0x24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f1c3 0307 	rsb	r3, r3, #7
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	bf28      	it	cs
 8005dee:	2304      	movcs	r3, #4
 8005df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	3304      	adds	r3, #4
 8005df6:	2b06      	cmp	r3, #6
 8005df8:	d902      	bls.n	8005e00 <NVIC_EncodePriority+0x30>
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	3b03      	subs	r3, #3
 8005dfe:	e000      	b.n	8005e02 <NVIC_EncodePriority+0x32>
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e04:	f04f 32ff 	mov.w	r2, #4294967295
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43da      	mvns	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	401a      	ands	r2, r3
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e18:	f04f 31ff 	mov.w	r1, #4294967295
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e22:	43d9      	mvns	r1, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e28:	4313      	orrs	r3, r2
         );
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3724      	adds	r7, #36	; 0x24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e48:	d301      	bcc.n	8005e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e00f      	b.n	8005e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <SysTick_Config+0x40>)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e56:	210f      	movs	r1, #15
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	f7ff ff8e 	bl	8005d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <SysTick_Config+0x40>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e66:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <SysTick_Config+0x40>)
 8005e68:	2207      	movs	r2, #7
 8005e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	e000e010 	.word	0xe000e010

08005e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ff05 	bl	8005c94 <__NVIC_SetPriorityGrouping>
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b086      	sub	sp, #24
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	4603      	mov	r3, r0
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ea4:	f7ff ff1a 	bl	8005cdc <__NVIC_GetPriorityGrouping>
 8005ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	6978      	ldr	r0, [r7, #20]
 8005eb0:	f7ff ff8e 	bl	8005dd0 <NVIC_EncodePriority>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff ff5d 	bl	8005d7c <__NVIC_SetPriority>
}
 8005ec2:	bf00      	nop
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff ff0d 	bl	8005cf8 <__NVIC_EnableIRQ>
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	4603      	mov	r3, r0
 8005eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff ff1d 	bl	8005d34 <__NVIC_DisableIRQ>
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ff94 	bl	8005e38 <SysTick_Config>
 8005f10:	4603      	mov	r3, r0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e098      	b.n	8006060 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	4b4d      	ldr	r3, [pc, #308]	; (800606c <HAL_DMA_Init+0x150>)
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d80f      	bhi.n	8005f5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4b4b      	ldr	r3, [pc, #300]	; (8006070 <HAL_DMA_Init+0x154>)
 8005f42:	4413      	add	r3, r2
 8005f44:	4a4b      	ldr	r2, [pc, #300]	; (8006074 <HAL_DMA_Init+0x158>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	009a      	lsls	r2, r3, #2
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a48      	ldr	r2, [pc, #288]	; (8006078 <HAL_DMA_Init+0x15c>)
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40
 8005f58:	e00e      	b.n	8005f78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4b46      	ldr	r3, [pc, #280]	; (800607c <HAL_DMA_Init+0x160>)
 8005f62:	4413      	add	r3, r2
 8005f64:	4a43      	ldr	r2, [pc, #268]	; (8006074 <HAL_DMA_Init+0x158>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	091b      	lsrs	r3, r3, #4
 8005f6c:	009a      	lsls	r2, r3, #2
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a42      	ldr	r2, [pc, #264]	; (8006080 <HAL_DMA_Init+0x164>)
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fd2:	d039      	beq.n	8006048 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	4a27      	ldr	r2, [pc, #156]	; (8006078 <HAL_DMA_Init+0x15c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d11a      	bne.n	8006014 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005fde:	4b29      	ldr	r3, [pc, #164]	; (8006084 <HAL_DMA_Init+0x168>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe6:	f003 031c 	and.w	r3, r3, #28
 8005fea:	210f      	movs	r1, #15
 8005fec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	4924      	ldr	r1, [pc, #144]	; (8006084 <HAL_DMA_Init+0x168>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005ff8:	4b22      	ldr	r3, [pc, #136]	; (8006084 <HAL_DMA_Init+0x168>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6859      	ldr	r1, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	f003 031c 	and.w	r3, r3, #28
 8006008:	fa01 f303 	lsl.w	r3, r1, r3
 800600c:	491d      	ldr	r1, [pc, #116]	; (8006084 <HAL_DMA_Init+0x168>)
 800600e:	4313      	orrs	r3, r2
 8006010:	600b      	str	r3, [r1, #0]
 8006012:	e019      	b.n	8006048 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006014:	4b1c      	ldr	r3, [pc, #112]	; (8006088 <HAL_DMA_Init+0x16c>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601c:	f003 031c 	and.w	r3, r3, #28
 8006020:	210f      	movs	r1, #15
 8006022:	fa01 f303 	lsl.w	r3, r1, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	4917      	ldr	r1, [pc, #92]	; (8006088 <HAL_DMA_Init+0x16c>)
 800602a:	4013      	ands	r3, r2
 800602c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800602e:	4b16      	ldr	r3, [pc, #88]	; (8006088 <HAL_DMA_Init+0x16c>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6859      	ldr	r1, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603a:	f003 031c 	and.w	r3, r3, #28
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	4911      	ldr	r1, [pc, #68]	; (8006088 <HAL_DMA_Init+0x16c>)
 8006044:	4313      	orrs	r3, r2
 8006046:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	40020407 	.word	0x40020407
 8006070:	bffdfff8 	.word	0xbffdfff8
 8006074:	cccccccd 	.word	0xcccccccd
 8006078:	40020000 	.word	0x40020000
 800607c:	bffdfbf8 	.word	0xbffdfbf8
 8006080:	40020400 	.word	0x40020400
 8006084:	400200a8 	.word	0x400200a8
 8006088:	400204a8 	.word	0x400204a8

0800608c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e072      	b.n	8006184 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	4b36      	ldr	r3, [pc, #216]	; (8006190 <HAL_DMA_DeInit+0x104>)
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d80f      	bhi.n	80060da <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	4b34      	ldr	r3, [pc, #208]	; (8006194 <HAL_DMA_DeInit+0x108>)
 80060c2:	4413      	add	r3, r2
 80060c4:	4a34      	ldr	r2, [pc, #208]	; (8006198 <HAL_DMA_DeInit+0x10c>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	091b      	lsrs	r3, r3, #4
 80060cc:	009a      	lsls	r2, r3, #2
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a31      	ldr	r2, [pc, #196]	; (800619c <HAL_DMA_DeInit+0x110>)
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40
 80060d8:	e00e      	b.n	80060f8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <HAL_DMA_DeInit+0x114>)
 80060e2:	4413      	add	r3, r2
 80060e4:	4a2c      	ldr	r2, [pc, #176]	; (8006198 <HAL_DMA_DeInit+0x10c>)
 80060e6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ea:	091b      	lsrs	r3, r3, #4
 80060ec:	009a      	lsls	r2, r3, #2
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a2b      	ldr	r2, [pc, #172]	; (80061a4 <HAL_DMA_DeInit+0x118>)
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006104:	f003 021c 	and.w	r2, r3, #28
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	2101      	movs	r1, #1
 800610e:	fa01 f202 	lsl.w	r2, r1, r2
 8006112:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	4a20      	ldr	r2, [pc, #128]	; (800619c <HAL_DMA_DeInit+0x110>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d10d      	bne.n	800613a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800611e:	4b22      	ldr	r3, [pc, #136]	; (80061a8 <HAL_DMA_DeInit+0x11c>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	f003 031c 	and.w	r3, r3, #28
 800612a:	210f      	movs	r1, #15
 800612c:	fa01 f303 	lsl.w	r3, r1, r3
 8006130:	43db      	mvns	r3, r3
 8006132:	491d      	ldr	r1, [pc, #116]	; (80061a8 <HAL_DMA_DeInit+0x11c>)
 8006134:	4013      	ands	r3, r2
 8006136:	600b      	str	r3, [r1, #0]
 8006138:	e00c      	b.n	8006154 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800613a:	4b1c      	ldr	r3, [pc, #112]	; (80061ac <HAL_DMA_DeInit+0x120>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006142:	f003 031c 	and.w	r3, r3, #28
 8006146:	210f      	movs	r1, #15
 8006148:	fa01 f303 	lsl.w	r3, r1, r3
 800614c:	43db      	mvns	r3, r3
 800614e:	4917      	ldr	r1, [pc, #92]	; (80061ac <HAL_DMA_DeInit+0x120>)
 8006150:	4013      	ands	r3, r2
 8006152:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	40020407 	.word	0x40020407
 8006194:	bffdfff8 	.word	0xbffdfff8
 8006198:	cccccccd 	.word	0xcccccccd
 800619c:	40020000 	.word	0x40020000
 80061a0:	bffdfbf8 	.word	0xbffdfbf8
 80061a4:	40020400 	.word	0x40020400
 80061a8:	400200a8 	.word	0x400200a8
 80061ac:	400204a8 	.word	0x400204a8

080061b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_DMA_Start_IT+0x20>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e04b      	b.n	8006268 <HAL_DMA_Start_IT+0xb8>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d13a      	bne.n	800625a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0201 	bic.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f96b 	bl	80064e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 020e 	orr.w	r2, r2, #14
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e00f      	b.n	8006248 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0204 	bic.w	r2, r2, #4
 8006236:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 020a 	orr.w	r2, r2, #10
 8006246:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	e005      	b.n	8006266 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006262:	2302      	movs	r3, #2
 8006264:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d008      	beq.n	800629a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2204      	movs	r2, #4
 800628c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e022      	b.n	80062e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 020e 	bic.w	r2, r2, #14
 80062a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0201 	bic.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	f003 021c 	and.w	r2, r3, #28
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	2101      	movs	r1, #1
 80062c8:	fa01 f202 	lsl.w	r2, r1, r2
 80062cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d005      	beq.n	8006310 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2204      	movs	r2, #4
 8006308:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	73fb      	strb	r3, [r7, #15]
 800630e:	e029      	b.n	8006364 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 020e 	bic.w	r2, r2, #14
 800631e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006334:	f003 021c 	and.w	r2, r3, #28
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	2101      	movs	r1, #1
 800633e:	fa01 f202 	lsl.w	r2, r1, r2
 8006342:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
    }
  }
  return status;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638a:	f003 031c 	and.w	r3, r3, #28
 800638e:	2204      	movs	r2, #4
 8006390:	409a      	lsls	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4013      	ands	r3, r2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d026      	beq.n	80063e8 <HAL_DMA_IRQHandler+0x7a>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d021      	beq.n	80063e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d107      	bne.n	80063c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0204 	bic.w	r2, r2, #4
 80063c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	f003 021c 	and.w	r2, r3, #28
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	2104      	movs	r1, #4
 80063d0:	fa01 f202 	lsl.w	r2, r1, r2
 80063d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d071      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80063e6:	e06c      	b.n	80064c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ec:	f003 031c 	and.w	r3, r3, #28
 80063f0:	2202      	movs	r2, #2
 80063f2:	409a      	lsls	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d02e      	beq.n	800645a <HAL_DMA_IRQHandler+0xec>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d029      	beq.n	800645a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 020a 	bic.w	r2, r2, #10
 8006422:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006430:	f003 021c 	and.w	r2, r3, #28
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	2102      	movs	r1, #2
 800643a:	fa01 f202 	lsl.w	r2, r1, r2
 800643e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d038      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006458:	e033      	b.n	80064c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645e:	f003 031c 	and.w	r3, r3, #28
 8006462:	2208      	movs	r2, #8
 8006464:	409a      	lsls	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d02a      	beq.n	80064c4 <HAL_DMA_IRQHandler+0x156>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d025      	beq.n	80064c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 020e 	bic.w	r2, r2, #14
 8006486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648c:	f003 021c 	and.w	r2, r3, #28
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	2101      	movs	r1, #1
 8006496:	fa01 f202 	lsl.w	r2, r1, r2
 800649a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
}
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	f003 021c 	and.w	r2, r3, #28
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	2101      	movs	r1, #1
 8006500:	fa01 f202 	lsl.w	r2, r1, r2
 8006504:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b10      	cmp	r3, #16
 8006514:	d108      	bne.n	8006528 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006526:	e007      	b.n	8006538 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]
}
 8006538:	bf00      	nop
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006552:	e148      	b.n	80067e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	2101      	movs	r1, #1
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	fa01 f303 	lsl.w	r3, r1, r3
 8006560:	4013      	ands	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 813a 	beq.w	80067e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	2b01      	cmp	r3, #1
 8006576:	d005      	beq.n	8006584 <HAL_GPIO_Init+0x40>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d130      	bne.n	80065e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	2203      	movs	r2, #3
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	43db      	mvns	r3, r3
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4013      	ands	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065ba:	2201      	movs	r2, #1
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	fa02 f303 	lsl.w	r3, r2, r3
 80065c2:	43db      	mvns	r3, r3
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4013      	ands	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	091b      	lsrs	r3, r3, #4
 80065d0:	f003 0201 	and.w	r2, r3, #1
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d017      	beq.n	8006622 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	2203      	movs	r2, #3
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	43db      	mvns	r3, r3
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4013      	ands	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d123      	bne.n	8006676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	08da      	lsrs	r2, r3, #3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3208      	adds	r2, #8
 8006636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	220f      	movs	r2, #15
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	43db      	mvns	r3, r3
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4013      	ands	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	08da      	lsrs	r2, r3, #3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3208      	adds	r2, #8
 8006670:	6939      	ldr	r1, [r7, #16]
 8006672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	2203      	movs	r2, #3
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43db      	mvns	r3, r3
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4013      	ands	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f003 0203 	and.w	r2, r3, #3
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	fa02 f303 	lsl.w	r3, r2, r3
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 8094 	beq.w	80067e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066b8:	4b52      	ldr	r3, [pc, #328]	; (8006804 <HAL_GPIO_Init+0x2c0>)
 80066ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066bc:	4a51      	ldr	r2, [pc, #324]	; (8006804 <HAL_GPIO_Init+0x2c0>)
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	6613      	str	r3, [r2, #96]	; 0x60
 80066c4:	4b4f      	ldr	r3, [pc, #316]	; (8006804 <HAL_GPIO_Init+0x2c0>)
 80066c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80066d0:	4a4d      	ldr	r2, [pc, #308]	; (8006808 <HAL_GPIO_Init+0x2c4>)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	089b      	lsrs	r3, r3, #2
 80066d6:	3302      	adds	r3, #2
 80066d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	220f      	movs	r2, #15
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4013      	ands	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066fa:	d00d      	beq.n	8006718 <HAL_GPIO_Init+0x1d4>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a43      	ldr	r2, [pc, #268]	; (800680c <HAL_GPIO_Init+0x2c8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d007      	beq.n	8006714 <HAL_GPIO_Init+0x1d0>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a42      	ldr	r2, [pc, #264]	; (8006810 <HAL_GPIO_Init+0x2cc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d101      	bne.n	8006710 <HAL_GPIO_Init+0x1cc>
 800670c:	2302      	movs	r3, #2
 800670e:	e004      	b.n	800671a <HAL_GPIO_Init+0x1d6>
 8006710:	2307      	movs	r3, #7
 8006712:	e002      	b.n	800671a <HAL_GPIO_Init+0x1d6>
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <HAL_GPIO_Init+0x1d6>
 8006718:	2300      	movs	r3, #0
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	f002 0203 	and.w	r2, r2, #3
 8006720:	0092      	lsls	r2, r2, #2
 8006722:	4093      	lsls	r3, r2
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800672a:	4937      	ldr	r1, [pc, #220]	; (8006808 <HAL_GPIO_Init+0x2c4>)
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	3302      	adds	r3, #2
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006738:	4b36      	ldr	r3, [pc, #216]	; (8006814 <HAL_GPIO_Init+0x2d0>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	43db      	mvns	r3, r3
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4013      	ands	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800675c:	4a2d      	ldr	r2, [pc, #180]	; (8006814 <HAL_GPIO_Init+0x2d0>)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006762:	4b2c      	ldr	r3, [pc, #176]	; (8006814 <HAL_GPIO_Init+0x2d0>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	43db      	mvns	r3, r3
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4013      	ands	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006786:	4a23      	ldr	r2, [pc, #140]	; (8006814 <HAL_GPIO_Init+0x2d0>)
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800678c:	4b21      	ldr	r3, [pc, #132]	; (8006814 <HAL_GPIO_Init+0x2d0>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	43db      	mvns	r3, r3
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4013      	ands	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067b0:	4a18      	ldr	r2, [pc, #96]	; (8006814 <HAL_GPIO_Init+0x2d0>)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80067b6:	4b17      	ldr	r3, [pc, #92]	; (8006814 <HAL_GPIO_Init+0x2d0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	43db      	mvns	r3, r3
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4013      	ands	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067da:	4a0e      	ldr	r2, [pc, #56]	; (8006814 <HAL_GPIO_Init+0x2d0>)
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	3301      	adds	r3, #1
 80067e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f47f aeaf 	bne.w	8006554 <HAL_GPIO_Init+0x10>
  }
}
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	40021000 	.word	0x40021000
 8006808:	40010000 	.word	0x40010000
 800680c:	48000400 	.word	0x48000400
 8006810:	48000800 	.word	0x48000800
 8006814:	40010400 	.word	0x40010400

08006818 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006826:	e0ab      	b.n	8006980 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006828:	2201      	movs	r2, #1
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	4013      	ands	r3, r2
 8006834:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 809e 	beq.w	800697a <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800683e:	4a57      	ldr	r2, [pc, #348]	; (800699c <HAL_GPIO_DeInit+0x184>)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	089b      	lsrs	r3, r3, #2
 8006844:	3302      	adds	r3, #2
 8006846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800684a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	220f      	movs	r2, #15
 8006856:	fa02 f303 	lsl.w	r3, r2, r3
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4013      	ands	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006866:	d00d      	beq.n	8006884 <HAL_GPIO_DeInit+0x6c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a4d      	ldr	r2, [pc, #308]	; (80069a0 <HAL_GPIO_DeInit+0x188>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d007      	beq.n	8006880 <HAL_GPIO_DeInit+0x68>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a4c      	ldr	r2, [pc, #304]	; (80069a4 <HAL_GPIO_DeInit+0x18c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d101      	bne.n	800687c <HAL_GPIO_DeInit+0x64>
 8006878:	2302      	movs	r3, #2
 800687a:	e004      	b.n	8006886 <HAL_GPIO_DeInit+0x6e>
 800687c:	2307      	movs	r3, #7
 800687e:	e002      	b.n	8006886 <HAL_GPIO_DeInit+0x6e>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <HAL_GPIO_DeInit+0x6e>
 8006884:	2300      	movs	r3, #0
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	f002 0203 	and.w	r2, r2, #3
 800688c:	0092      	lsls	r2, r2, #2
 800688e:	4093      	lsls	r3, r2
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	429a      	cmp	r2, r3
 8006894:	d132      	bne.n	80068fc <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006896:	4b44      	ldr	r3, [pc, #272]	; (80069a8 <HAL_GPIO_DeInit+0x190>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	43db      	mvns	r3, r3
 800689e:	4942      	ldr	r1, [pc, #264]	; (80069a8 <HAL_GPIO_DeInit+0x190>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80068a4:	4b40      	ldr	r3, [pc, #256]	; (80069a8 <HAL_GPIO_DeInit+0x190>)
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	43db      	mvns	r3, r3
 80068ac:	493e      	ldr	r1, [pc, #248]	; (80069a8 <HAL_GPIO_DeInit+0x190>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80068b2:	4b3d      	ldr	r3, [pc, #244]	; (80069a8 <HAL_GPIO_DeInit+0x190>)
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	43db      	mvns	r3, r3
 80068ba:	493b      	ldr	r1, [pc, #236]	; (80069a8 <HAL_GPIO_DeInit+0x190>)
 80068bc:	4013      	ands	r3, r2
 80068be:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80068c0:	4b39      	ldr	r3, [pc, #228]	; (80069a8 <HAL_GPIO_DeInit+0x190>)
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	43db      	mvns	r3, r3
 80068c8:	4937      	ldr	r1, [pc, #220]	; (80069a8 <HAL_GPIO_DeInit+0x190>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f003 0303 	and.w	r3, r3, #3
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	220f      	movs	r2, #15
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80068de:	4a2f      	ldr	r2, [pc, #188]	; (800699c <HAL_GPIO_DeInit+0x184>)
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	089b      	lsrs	r3, r3, #2
 80068e4:	3302      	adds	r3, #2
 80068e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	43da      	mvns	r2, r3
 80068ee:	482b      	ldr	r0, [pc, #172]	; (800699c <HAL_GPIO_DeInit+0x184>)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	089b      	lsrs	r3, r3, #2
 80068f4:	400a      	ands	r2, r1
 80068f6:	3302      	adds	r3, #2
 80068f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	2103      	movs	r1, #3
 8006906:	fa01 f303 	lsl.w	r3, r1, r3
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	08da      	lsrs	r2, r3, #3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3208      	adds	r2, #8
 8006918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	220f      	movs	r2, #15
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43db      	mvns	r3, r3
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	08d2      	lsrs	r2, r2, #3
 8006930:	4019      	ands	r1, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3208      	adds	r2, #8
 8006936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	2103      	movs	r1, #3
 8006944:	fa01 f303 	lsl.w	r3, r1, r3
 8006948:	43db      	mvns	r3, r3
 800694a:	401a      	ands	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	2101      	movs	r1, #1
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	fa01 f303 	lsl.w	r3, r1, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	401a      	ands	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	2103      	movs	r1, #3
 800696e:	fa01 f303 	lsl.w	r3, r1, r3
 8006972:	43db      	mvns	r3, r3
 8006974:	401a      	ands	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	3301      	adds	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	fa22 f303 	lsr.w	r3, r2, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	f47f af4d 	bne.w	8006828 <HAL_GPIO_DeInit+0x10>
  }
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	40010000 	.word	0x40010000
 80069a0:	48000400 	.word	0x48000400
 80069a4:	48000800 	.word	0x48000800
 80069a8:	40010400 	.word	0x40010400

080069ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	807b      	strh	r3, [r7, #2]
 80069b8:	4613      	mov	r3, r2
 80069ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069bc:	787b      	ldrb	r3, [r7, #1]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069c2:	887a      	ldrh	r2, [r7, #2]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069c8:	e002      	b.n	80069d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069ca:	887a      	ldrh	r2, [r7, #2]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80069e6:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069e8:	695a      	ldr	r2, [r3, #20]
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d006      	beq.n	8006a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069f2:	4a05      	ldr	r2, [pc, #20]	; (8006a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069f8:	88fb      	ldrh	r3, [r7, #6]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fa faf8 	bl	8000ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40010400 	.word	0x40010400

08006a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e08d      	b.n	8006b3a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d106      	bne.n	8006a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fd faf6 	bl	8004024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2224      	movs	r2, #36	; 0x24
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0201 	bic.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d107      	bne.n	8006a86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	e006      	b.n	8006a94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006a92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d108      	bne.n	8006aae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aaa:	605a      	str	r2, [r3, #4]
 8006aac:	e007      	b.n	8006abe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6812      	ldr	r2, [r2, #0]
 8006ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ae0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691a      	ldr	r2, [r3, #16]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69d9      	ldr	r1, [r3, #28]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a1a      	ldr	r2, [r3, #32]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0201 	orr.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	461a      	mov	r2, r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	817b      	strh	r3, [r7, #10]
 8006b56:	460b      	mov	r3, r1
 8006b58:	813b      	strh	r3, [r7, #8]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	f040 80f9 	bne.w	8006d5e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <HAL_I2C_Mem_Write+0x34>
 8006b72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e0ed      	b.n	8006d60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_I2C_Mem_Write+0x4e>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e0e6      	b.n	8006d60 <HAL_I2C_Mem_Write+0x21c>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b9a:	f7fd fdab 	bl	80046f4 <HAL_GetTick>
 8006b9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	2319      	movs	r3, #25
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f955 	bl	8006e5c <I2C_WaitOnFlagUntilTimeout>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0d1      	b.n	8006d60 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2221      	movs	r2, #33	; 0x21
 8006bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2240      	movs	r2, #64	; 0x40
 8006bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a3a      	ldr	r2, [r7, #32]
 8006bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006be4:	88f8      	ldrh	r0, [r7, #6]
 8006be6:	893a      	ldrh	r2, [r7, #8]
 8006be8:	8979      	ldrh	r1, [r7, #10]
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f8b9 	bl	8006d6c <I2C_RequestMemoryWrite>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0a9      	b.n	8006d60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2bff      	cmp	r3, #255	; 0xff
 8006c14:	d90e      	bls.n	8006c34 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	22ff      	movs	r2, #255	; 0xff
 8006c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	8979      	ldrh	r1, [r7, #10]
 8006c24:	2300      	movs	r3, #0
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 facf 	bl	80071d0 <I2C_TransferConfig>
 8006c32:	e00f      	b.n	8006c54 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	8979      	ldrh	r1, [r7, #10]
 8006c46:	2300      	movs	r3, #0
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 fabe 	bl	80071d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f94e 	bl	8006efa <I2C_WaitOnTXISFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e07b      	b.n	8006d60 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d034      	beq.n	8006d0c <HAL_I2C_Mem_Write+0x1c8>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d130      	bne.n	8006d0c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2180      	movs	r1, #128	; 0x80
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f8d1 	bl	8006e5c <I2C_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e04d      	b.n	8006d60 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2bff      	cmp	r3, #255	; 0xff
 8006ccc:	d90e      	bls.n	8006cec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	22ff      	movs	r2, #255	; 0xff
 8006cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	8979      	ldrh	r1, [r7, #10]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 fa73 	bl	80071d0 <I2C_TransferConfig>
 8006cea:	e00f      	b.n	8006d0c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	8979      	ldrh	r1, [r7, #10]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fa62 	bl	80071d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d19e      	bne.n	8006c54 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f934 	bl	8006f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e01a      	b.n	8006d60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6859      	ldr	r1, [r3, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <HAL_I2C_Mem_Write+0x224>)
 8006d3e:	400b      	ands	r3, r1
 8006d40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e000      	b.n	8006d60 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006d5e:	2302      	movs	r3, #2
  }
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	fe00e800 	.word	0xfe00e800

08006d6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	4608      	mov	r0, r1
 8006d76:	4611      	mov	r1, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	817b      	strh	r3, [r7, #10]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	813b      	strh	r3, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	8979      	ldrh	r1, [r7, #10]
 8006d8c:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <I2C_RequestMemoryWrite+0xa4>)
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fa1b 	bl	80071d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	69b9      	ldr	r1, [r7, #24]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 f8ab 	bl	8006efa <I2C_WaitOnTXISFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e02c      	b.n	8006e08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d105      	bne.n	8006dc0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006db4:	893b      	ldrh	r3, [r7, #8]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	629a      	str	r2, [r3, #40]	; 0x28
 8006dbe:	e015      	b.n	8006dec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dc0:	893b      	ldrh	r3, [r7, #8]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	69b9      	ldr	r1, [r7, #24]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f891 	bl	8006efa <I2C_WaitOnTXISFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e012      	b.n	8006e08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006de2:	893b      	ldrh	r3, [r7, #8]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	2200      	movs	r2, #0
 8006df4:	2180      	movs	r1, #128	; 0x80
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f830 	bl	8006e5c <I2C_WaitOnFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	80002000 	.word	0x80002000

08006e14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d103      	bne.n	8006e32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d007      	beq.n	8006e50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	619a      	str	r2, [r3, #24]
  }
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e6c:	e031      	b.n	8006ed2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d02d      	beq.n	8006ed2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e76:	f7fd fc3d 	bl	80046f4 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d302      	bcc.n	8006e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d122      	bne.n	8006ed2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	4013      	ands	r3, r2
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	bf0c      	ite	eq
 8006e9c:	2301      	moveq	r3, #1
 8006e9e:	2300      	movne	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d113      	bne.n	8006ed2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eae:	f043 0220 	orr.w	r2, r3, #32
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e00f      	b.n	8006ef2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4013      	ands	r3, r2
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	bf0c      	ite	eq
 8006ee2:	2301      	moveq	r3, #1
 8006ee4:	2300      	movne	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d0be      	beq.n	8006e6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f06:	e033      	b.n	8006f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f87f 	bl	8007010 <I2C_IsErrorOccurred>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e031      	b.n	8006f80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f22:	d025      	beq.n	8006f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f24:	f7fd fbe6 	bl	80046f4 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d302      	bcc.n	8006f3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d11a      	bne.n	8006f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d013      	beq.n	8006f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4c:	f043 0220 	orr.w	r2, r3, #32
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e007      	b.n	8006f80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d1c4      	bne.n	8006f08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f94:	e02f      	b.n	8006ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 f838 	bl	8007010 <I2C_IsErrorOccurred>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e02d      	b.n	8007006 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006faa:	f7fd fba3 	bl	80046f4 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d302      	bcc.n	8006fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d11a      	bne.n	8006ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d013      	beq.n	8006ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd2:	f043 0220 	orr.w	r2, r3, #32
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e007      	b.n	8007006 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b20      	cmp	r3, #32
 8007002:	d1c8      	bne.n	8006f96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08a      	sub	sp, #40	; 0x28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	d068      	beq.n	800710e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2210      	movs	r2, #16
 8007042:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007044:	e049      	b.n	80070da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d045      	beq.n	80070da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800704e:	f7fd fb51 	bl	80046f4 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	429a      	cmp	r2, r3
 800705c:	d302      	bcc.n	8007064 <I2C_IsErrorOccurred+0x54>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d13a      	bne.n	80070da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800706e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007076:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007086:	d121      	bne.n	80070cc <I2C_IsErrorOccurred+0xbc>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800708e:	d01d      	beq.n	80070cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007090:	7cfb      	ldrb	r3, [r7, #19]
 8007092:	2b20      	cmp	r3, #32
 8007094:	d01a      	beq.n	80070cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80070a6:	f7fd fb25 	bl	80046f4 <HAL_GetTick>
 80070aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070ac:	e00e      	b.n	80070cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80070ae:	f7fd fb21 	bl	80046f4 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b19      	cmp	r3, #25
 80070ba:	d907      	bls.n	80070cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	f043 0320 	orr.w	r3, r3, #32
 80070c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80070ca:	e006      	b.n	80070da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	d1e9      	bne.n	80070ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d003      	beq.n	80070f0 <I2C_IsErrorOccurred+0xe0>
 80070e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0aa      	beq.n	8007046 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80070f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2220      	movs	r2, #32
 80070fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	f043 0304 	orr.w	r3, r3, #4
 8007106:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007130:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	f043 0308 	orr.w	r3, r3, #8
 8007148:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007152:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00b      	beq.n	800717c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	f043 0302 	orr.w	r3, r3, #2
 800716a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007174:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800717c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007180:	2b00      	cmp	r3, #0
 8007182:	d01c      	beq.n	80071be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff fe45 	bl	8006e14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6859      	ldr	r1, [r3, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4b0d      	ldr	r3, [pc, #52]	; (80071cc <I2C_IsErrorOccurred+0x1bc>)
 8007196:	400b      	ands	r3, r1
 8007198:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	431a      	orrs	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80071be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3728      	adds	r7, #40	; 0x28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	fe00e800 	.word	0xfe00e800

080071d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	817b      	strh	r3, [r7, #10]
 80071de:	4613      	mov	r3, r2
 80071e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071e2:	897b      	ldrh	r3, [r7, #10]
 80071e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071e8:	7a7b      	ldrb	r3, [r7, #9]
 80071ea:	041b      	lsls	r3, r3, #16
 80071ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	0d5b      	lsrs	r3, r3, #21
 800720a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800720e:	4b08      	ldr	r3, [pc, #32]	; (8007230 <I2C_TransferConfig+0x60>)
 8007210:	430b      	orrs	r3, r1
 8007212:	43db      	mvns	r3, r3
 8007214:	ea02 0103 	and.w	r1, r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007222:	bf00      	nop
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	03ff63ff 	.word	0x03ff63ff

08007234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b20      	cmp	r3, #32
 8007248:	d138      	bne.n	80072bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007254:	2302      	movs	r3, #2
 8007256:	e032      	b.n	80072be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2224      	movs	r2, #36	; 0x24
 8007264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0201 	bic.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007286:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6819      	ldr	r1, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	e000      	b.n	80072be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072bc:	2302      	movs	r3, #2
  }
}
 80072be:	4618      	mov	r0, r3
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d139      	bne.n	8007354 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d101      	bne.n	80072ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80072ea:	2302      	movs	r3, #2
 80072ec:	e033      	b.n	8007356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2224      	movs	r2, #36	; 0x24
 80072fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0201 	bic.w	r2, r2, #1
 800730c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800731c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	021b      	lsls	r3, r3, #8
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0201 	orr.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	e000      	b.n	8007356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007354:	2302      	movs	r3, #2
  }
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007364:	b08b      	sub	sp, #44	; 0x2c
 8007366:	af06      	add	r7, sp, #24
 8007368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e0f8      	b.n	8007566 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f009 f925 	bl	80105d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2203      	movs	r2, #3
 8007392:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f004 ff70 	bl	800c280 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	687e      	ldr	r6, [r7, #4]
 80073a8:	466d      	mov	r5, sp
 80073aa:	f106 0410 	add.w	r4, r6, #16
 80073ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	602b      	str	r3, [r5, #0]
 80073b6:	1d33      	adds	r3, r6, #4
 80073b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073ba:	6838      	ldr	r0, [r7, #0]
 80073bc:	f004 ff38 	bl	800c230 <USB_CoreInit>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e0c9      	b.n	8007566 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f004 ff6c 	bl	800c2b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]
 80073e2:	e040      	b.n	8007466 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	4613      	mov	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	440b      	add	r3, r1
 80073f4:	3301      	adds	r3, #1
 80073f6:	2201      	movs	r2, #1
 80073f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	440b      	add	r3, r1
 800740a:	7bfa      	ldrb	r2, [r7, #15]
 800740c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	6879      	ldr	r1, [r7, #4]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	440b      	add	r3, r1
 800741e:	3303      	adds	r3, #3
 8007420:	2200      	movs	r2, #0
 8007422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007424:	7bfa      	ldrb	r2, [r7, #15]
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	440b      	add	r3, r1
 8007432:	3338      	adds	r3, #56	; 0x38
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007438:	7bfa      	ldrb	r2, [r7, #15]
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	440b      	add	r3, r1
 8007446:	333c      	adds	r3, #60	; 0x3c
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800744c:	7bfa      	ldrb	r2, [r7, #15]
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	440b      	add	r3, r1
 800745a:	3340      	adds	r3, #64	; 0x40
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	3301      	adds	r3, #1
 8007464:	73fb      	strb	r3, [r7, #15]
 8007466:	7bfa      	ldrb	r2, [r7, #15]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	429a      	cmp	r2, r3
 800746e:	d3b9      	bcc.n	80073e4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]
 8007474:	e044      	b.n	8007500 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007476:	7bfa      	ldrb	r2, [r7, #15]
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	440b      	add	r3, r1
 8007484:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007488:	2200      	movs	r2, #0
 800748a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800748c:	7bfa      	ldrb	r2, [r7, #15]
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	440b      	add	r3, r1
 800749a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800749e:	7bfa      	ldrb	r2, [r7, #15]
 80074a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80074a2:	7bfa      	ldrb	r2, [r7, #15]
 80074a4:	6879      	ldr	r1, [r7, #4]
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	440b      	add	r3, r1
 80074b0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80074b4:	2200      	movs	r2, #0
 80074b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80074b8:	7bfa      	ldrb	r2, [r7, #15]
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	440b      	add	r3, r1
 80074c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074ce:	7bfa      	ldrb	r2, [r7, #15]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	440b      	add	r3, r1
 80074dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80074e4:	7bfa      	ldrb	r2, [r7, #15]
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	440b      	add	r3, r1
 80074f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	3301      	adds	r3, #1
 80074fe:	73fb      	strb	r3, [r7, #15]
 8007500:	7bfa      	ldrb	r2, [r7, #15]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	429a      	cmp	r2, r3
 8007508:	d3b5      	bcc.n	8007476 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	687e      	ldr	r6, [r7, #4]
 8007512:	466d      	mov	r5, sp
 8007514:	f106 0410 	add.w	r4, r6, #16
 8007518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800751a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	1d33      	adds	r3, r6, #4
 8007522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007524:	6838      	ldr	r0, [r7, #0]
 8007526:	f004 fed3 	bl	800c2d0 <USB_DevInit>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e014      	b.n	8007566 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d102      	bne.n	800755a <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 fc40 	bl	8008dda <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f007 f964 	bl	800e82c <USB_DevDisconnect>

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800756e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_PCD_Start+0x16>
 8007580:	2302      	movs	r3, #2
 8007582:	e012      	b.n	80075aa <HAL_PCD_Start+0x3c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f004 fe5e 	bl	800c252 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f007 f92f 	bl	800e7fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4618      	mov	r0, r3
 80075c0:	f007 f949 	bl	800e856 <USB_ReadInterrupts>
 80075c4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fafb 	bl	8007bcc <PCD_EP_ISR_Handler>

    return;
 80075d6:	e110      	b.n	80077fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d013      	beq.n	800760a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f4:	b292      	uxth	r2, r2
 80075f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f009 f867 	bl	80106ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007600:	2100      	movs	r1, #0
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f8fc 	bl	8007800 <HAL_PCD_SetAddress>

    return;
 8007608:	e0f7      	b.n	80077fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00c      	beq.n	800762e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800761c:	b29a      	uxth	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007626:	b292      	uxth	r2, r2
 8007628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800762c:	e0e5      	b.n	80077fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00c      	beq.n	8007652 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007640:	b29a      	uxth	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800764a:	b292      	uxth	r2, r2
 800764c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007650:	e0d3      	b.n	80077fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d034      	beq.n	80076c6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007664:	b29a      	uxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0204 	bic.w	r2, r2, #4
 800766e:	b292      	uxth	r2, r2
 8007670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800767c:	b29a      	uxth	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0208 	bic.w	r2, r2, #8
 8007686:	b292      	uxth	r2, r2
 8007688:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8007692:	2b01      	cmp	r3, #1
 8007694:	d107      	bne.n	80076a6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800769e:	2100      	movs	r1, #0
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f009 fa9f 	bl	8010be4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f009 f84a 	bl	8010740 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076be:	b292      	uxth	r2, r2
 80076c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80076c4:	e099      	b.n	80077fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d027      	beq.n	8007720 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80076d8:	b29a      	uxth	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0208 	orr.w	r2, r2, #8
 80076e2:	b292      	uxth	r2, r2
 80076e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076fa:	b292      	uxth	r2, r2
 80076fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0204 	orr.w	r2, r2, #4
 8007712:	b292      	uxth	r2, r2
 8007714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f008 fff7 	bl	801070c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800771e:	e06c      	b.n	80077fa <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007726:	2b00      	cmp	r3, #0
 8007728:	d040      	beq.n	80077ac <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007732:	b29a      	uxth	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800773c:	b292      	uxth	r2, r2
 800773e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d12b      	bne.n	80077a4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007754:	b29a      	uxth	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0204 	orr.w	r2, r2, #4
 800775e:	b292      	uxth	r2, r2
 8007760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800776c:	b29a      	uxth	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0208 	orr.w	r2, r2, #8
 8007776:	b292      	uxth	r2, r2
 8007778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800778c:	b29b      	uxth	r3, r3
 800778e:	089b      	lsrs	r3, r3, #2
 8007790:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800779a:	2101      	movs	r1, #1
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f009 fa21 	bl	8010be4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80077a2:	e02a      	b.n	80077fa <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f008 ffb1 	bl	801070c <HAL_PCD_SuspendCallback>
    return;
 80077aa:	e026      	b.n	80077fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00f      	beq.n	80077d6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077be:	b29a      	uxth	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077c8:	b292      	uxth	r2, r2
 80077ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f008 ff6f 	bl	80106b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80077d4:	e011      	b.n	80077fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00c      	beq.n	80077fa <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077f2:	b292      	uxth	r2, r2
 80077f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80077f8:	bf00      	nop
  }
}
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <HAL_PCD_SetAddress+0x1a>
 8007816:	2302      	movs	r3, #2
 8007818:	e013      	b.n	8007842 <HAL_PCD_SetAddress+0x42>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	78fa      	ldrb	r2, [r7, #3]
 8007826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	4611      	mov	r1, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f006 ffcf 	bl	800e7d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	4608      	mov	r0, r1
 8007854:	4611      	mov	r1, r2
 8007856:	461a      	mov	r2, r3
 8007858:	4603      	mov	r3, r0
 800785a:	70fb      	strb	r3, [r7, #3]
 800785c:	460b      	mov	r3, r1
 800785e:	803b      	strh	r3, [r7, #0]
 8007860:	4613      	mov	r3, r2
 8007862:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800786c:	2b00      	cmp	r3, #0
 800786e:	da0e      	bge.n	800788e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	705a      	strb	r2, [r3, #1]
 800788c:	e00e      	b.n	80078ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	f003 0207 	and.w	r2, r3, #7
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80078b8:	883a      	ldrh	r2, [r7, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	78ba      	ldrb	r2, [r7, #2]
 80078c2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80078c4:	78bb      	ldrb	r3, [r7, #2]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d102      	bne.n	80078d0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d101      	bne.n	80078de <HAL_PCD_EP_Open+0x94>
 80078da:	2302      	movs	r3, #2
 80078dc:	e00e      	b.n	80078fc <HAL_PCD_EP_Open+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f004 fd11 	bl	800c314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80078fa:	7afb      	ldrb	r3, [r7, #11]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007914:	2b00      	cmp	r3, #0
 8007916:	da0e      	bge.n	8007936 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	4413      	add	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	705a      	strb	r2, [r3, #1]
 8007934:	e00e      	b.n	8007954 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	f003 0207 	and.w	r2, r3, #7
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	4413      	add	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	b2da      	uxtb	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_PCD_EP_Close+0x6a>
 800796a:	2302      	movs	r3, #2
 800796c:	e00e      	b.n	800798c <HAL_PCD_EP_Close+0x88>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68f9      	ldr	r1, [r7, #12]
 800797c:	4618      	mov	r0, r3
 800797e:	f005 f88d 	bl	800ca9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	460b      	mov	r3, r1
 80079a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079a4:	7afb      	ldrb	r3, [r7, #11]
 80079a6:	f003 0207 	and.w	r2, r3, #7
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	4413      	add	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2200      	movs	r2, #0
 80079cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2200      	movs	r2, #0
 80079d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079d4:	7afb      	ldrb	r3, [r7, #11]
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6979      	ldr	r1, [r7, #20]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f005 fa45 	bl	800ce76 <USB_EPStartXfer>

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b086      	sub	sp, #24
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
 8007a02:	460b      	mov	r3, r1
 8007a04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	00db      	lsls	r3, r3, #3
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4413      	add	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6979      	ldr	r1, [r7, #20]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f005 fa0e 	bl	800ce76 <USB_EPStartXfer>

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	f003 0207 	and.w	r2, r3, #7
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d901      	bls.n	8007a82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e04c      	b.n	8007b1c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da0e      	bge.n	8007aa8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	f003 0307 	and.w	r3, r3, #7
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	705a      	strb	r2, [r3, #1]
 8007aa6:	e00c      	b.n	8007ac2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007aa8:	78fa      	ldrb	r2, [r7, #3]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	4413      	add	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d101      	bne.n	8007ae2 <HAL_PCD_EP_SetStall+0x7e>
 8007ade:	2302      	movs	r3, #2
 8007ae0:	e01c      	b.n	8007b1c <HAL_PCD_EP_SetStall+0xb8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68f9      	ldr	r1, [r7, #12]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f006 fd71 	bl	800e5d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d108      	bne.n	8007b12 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	f006 feb2 	bl	800e876 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	f003 020f 	and.w	r2, r3, #15
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d901      	bls.n	8007b42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e040      	b.n	8007bc4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	da0e      	bge.n	8007b68 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2201      	movs	r2, #1
 8007b64:	705a      	strb	r2, [r3, #1]
 8007b66:	e00e      	b.n	8007b86 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	f003 0207 	and.w	r2, r3, #7
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <HAL_PCD_EP_ClrStall+0x82>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	e00e      	b.n	8007bc4 <HAL_PCD_EP_ClrStall+0xa0>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f006 fd60 	bl	800e67a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b096      	sub	sp, #88	; 0x58
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007bd4:	e3b1      	b.n	800833a <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8007bf0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f040 8173 	bne.w	8007ee0 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007bfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d150      	bne.n	8007ca8 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c16:	81fb      	strh	r3, [r7, #14]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	89fb      	ldrh	r3, [r7, #14]
 8007c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3328      	adds	r3, #40	; 0x28
 8007c2e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	4413      	add	r3, r2
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6812      	ldr	r2, [r2, #0]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c5a:	695a      	ldr	r2, [r3, #20]
 8007c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	441a      	add	r2, r3
 8007c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c64:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007c66:	2100      	movs	r1, #0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f008 fd08 	bl	801067e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 835f 	beq.w	800833a <PCD_EP_ISR_Handler+0x76e>
 8007c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f040 835a 	bne.w	800833a <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	b292      	uxth	r2, r2
 8007c9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007ca6:	e348      	b.n	800833a <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007cae:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007cba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d032      	beq.n	8007d2c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	4413      	add	r3, r2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	6812      	ldr	r2, [r2, #0]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cfa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cfe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	f006 fe06 	bl	800e912 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007d12:	4013      	ands	r3, r2
 8007d14:	823b      	strh	r3, [r7, #16]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	8a3a      	ldrh	r2, [r7, #16]
 8007d1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d20:	b292      	uxth	r2, r2
 8007d22:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f008 fc7d 	bl	8010624 <HAL_PCD_SetupStageCallback>
 8007d2a:	e306      	b.n	800833a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007d2c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f280 8302 	bge.w	800833a <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007d42:	4013      	ands	r3, r2
 8007d44:	83fb      	strh	r3, [r7, #30]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	8bfa      	ldrh	r2, [r7, #30]
 8007d4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d50:	b292      	uxth	r2, r2
 8007d52:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	4413      	add	r3, r2
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6812      	ldr	r2, [r2, #0]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d7a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d019      	beq.n	8007db8 <PCD_EP_ISR_Handler+0x1ec>
 8007d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d015      	beq.n	8007db8 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d92:	6959      	ldr	r1, [r3, #20]
 8007d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d96:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d9a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	f006 fdb8 	bl	800e912 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007da4:	695a      	ldr	r2, [r3, #20]
 8007da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	441a      	add	r2, r3
 8007dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007db0:	2100      	movs	r1, #0
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f008 fc48 	bl	8010648 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007dc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f040 82b5 	bne.w	800833a <PCD_EP_ISR_Handler+0x76e>
 8007dd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007dd4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007dd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ddc:	f000 82ad 	beq.w	800833a <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	461a      	mov	r2, r3
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	4413      	add	r3, r2
 8007df6:	61bb      	str	r3, [r7, #24]
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	801a      	strh	r2, [r3, #0]
 8007e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	2b3e      	cmp	r3, #62	; 0x3e
 8007e16:	d91d      	bls.n	8007e54 <PCD_EP_ISR_Handler+0x288>
 8007e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f003 031f 	and.w	r3, r3, #31
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <PCD_EP_ISR_Handler+0x266>
 8007e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	647b      	str	r3, [r7, #68]	; 0x44
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	029b      	lsls	r3, r3, #10
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4313      	orrs	r3, r2
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	801a      	strh	r2, [r3, #0]
 8007e52:	e026      	b.n	8007ea2 <PCD_EP_ISR_Handler+0x2d6>
 8007e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10a      	bne.n	8007e72 <PCD_EP_ISR_Handler+0x2a6>
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	801a      	strh	r2, [r3, #0]
 8007e70:	e017      	b.n	8007ea2 <PCD_EP_ISR_Handler+0x2d6>
 8007e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	647b      	str	r3, [r7, #68]	; 0x44
 8007e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <PCD_EP_ISR_Handler+0x2c0>
 8007e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e88:	3301      	adds	r3, #1
 8007e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	029b      	lsls	r3, r3, #10
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb2:	827b      	strh	r3, [r7, #18]
 8007eb4:	8a7b      	ldrh	r3, [r7, #18]
 8007eb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007eba:	827b      	strh	r3, [r7, #18]
 8007ebc:	8a7b      	ldrh	r3, [r7, #18]
 8007ebe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ec2:	827b      	strh	r3, [r7, #18]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	8a7b      	ldrh	r3, [r7, #18]
 8007eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	8013      	strh	r3, [r2, #0]
 8007ede:	e22c      	b.n	800833a <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007ef4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f280 80f6 	bge.w	80080ea <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007f14:	4013      	ands	r3, r2
 8007f16:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007f2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f30:	b292      	uxth	r2, r2
 8007f32:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007f34:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	4413      	add	r3, r2
 8007f48:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f4c:	7b1b      	ldrb	r3, [r3, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d123      	bne.n	8007f9a <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	4413      	add	r3, r2
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6812      	ldr	r2, [r2, #0]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8007f7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 808e 	beq.w	80080a0 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6818      	ldr	r0, [r3, #0]
 8007f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f8a:	6959      	ldr	r1, [r3, #20]
 8007f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f8e:	88da      	ldrh	r2, [r3, #6]
 8007f90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007f94:	f006 fcbd 	bl	800e912 <USB_ReadPMA>
 8007f98:	e082      	b.n	80080a0 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f9c:	78db      	ldrb	r3, [r3, #3]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d10a      	bne.n	8007fb8 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007fa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f9d3 	bl	8008356 <HAL_PCD_EP_DB_Receive>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007fb6:	e073      	b.n	80080a0 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	441a      	add	r2, r3
 8007fe4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d022      	beq.n	800805c <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800801e:	b29b      	uxth	r3, r3
 8008020:	461a      	mov	r2, r3
 8008022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	00db      	lsls	r3, r3, #3
 8008028:	4413      	add	r3, r2
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6812      	ldr	r2, [r2, #0]
 800802e:	4413      	add	r3, r2
 8008030:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800803a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800803e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008042:	2b00      	cmp	r3, #0
 8008044:	d02c      	beq.n	80080a0 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800804c:	6959      	ldr	r1, [r3, #20]
 800804e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008050:	891a      	ldrh	r2, [r3, #8]
 8008052:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008056:	f006 fc5c 	bl	800e912 <USB_ReadPMA>
 800805a:	e021      	b.n	80080a0 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008064:	b29b      	uxth	r3, r3
 8008066:	461a      	mov	r2, r3
 8008068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	4413      	add	r3, r2
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6812      	ldr	r2, [r2, #0]
 8008074:	4413      	add	r3, r2
 8008076:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008080:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008084:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008088:	2b00      	cmp	r3, #0
 800808a:	d009      	beq.n	80080a0 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008092:	6959      	ldr	r1, [r3, #20]
 8008094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008096:	895a      	ldrh	r2, [r3, #10]
 8008098:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800809c:	f006 fc39 	bl	800e912 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80080a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080a2:	69da      	ldr	r2, [r3, #28]
 80080a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80080a8:	441a      	add	r2, r3
 80080aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80080ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b0:	695a      	ldr	r2, [r3, #20]
 80080b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80080b6:	441a      	add	r2, r3
 80080b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80080bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <PCD_EP_ISR_Handler+0x504>
 80080c4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80080c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d206      	bcs.n	80080de <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80080d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f008 fab6 	bl	8010648 <HAL_PCD_DataOutStageCallback>
 80080dc:	e005      	b.n	80080ea <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080e4:	4618      	mov	r0, r3
 80080e6:	f004 fec6 	bl	800ce76 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80080ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80080ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 8121 	beq.w	800833a <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 80080f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	4413      	add	r3, r2
 800810a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008126:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	441a      	add	r2, r3
 8008138:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800813c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008144:	b29b      	uxth	r3, r3
 8008146:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800814a:	78db      	ldrb	r3, [r3, #3]
 800814c:	2b01      	cmp	r3, #1
 800814e:	f040 80a2 	bne.w	8008296 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8008152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008154:	2200      	movs	r2, #0
 8008156:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800815a:	7b1b      	ldrb	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8093 	beq.w	8008288 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008162:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	d046      	beq.n	80081fc <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800816e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d126      	bne.n	80081c4 <PCD_EP_ISR_Handler+0x5f8>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008184:	b29b      	uxth	r3, r3
 8008186:	461a      	mov	r2, r3
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	4413      	add	r3, r2
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
 800818e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	00da      	lsls	r2, r3, #3
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	4413      	add	r3, r2
 8008198:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800819c:	623b      	str	r3, [r7, #32]
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	801a      	strh	r2, [r3, #0]
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081bc:	b29a      	uxth	r2, r3
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	801a      	strh	r2, [r3, #0]
 80081c2:	e061      	b.n	8008288 <PCD_EP_ISR_Handler+0x6bc>
 80081c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d15d      	bne.n	8008288 <PCD_EP_ISR_Handler+0x6bc>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081da:	b29b      	uxth	r3, r3
 80081dc:	461a      	mov	r2, r3
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e0:	4413      	add	r3, r2
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	00da      	lsls	r2, r3, #3
 80081ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ec:	4413      	add	r3, r2
 80081ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	2200      	movs	r2, #0
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	e045      	b.n	8008288 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d126      	bne.n	8008258 <PCD_EP_ISR_Handler+0x68c>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	637b      	str	r3, [r7, #52]	; 0x34
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008218:	b29b      	uxth	r3, r3
 800821a:	461a      	mov	r2, r3
 800821c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821e:	4413      	add	r3, r2
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
 8008222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	00da      	lsls	r2, r3, #3
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	4413      	add	r3, r2
 800822c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008230:	633b      	str	r3, [r7, #48]	; 0x30
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800823c:	b29a      	uxth	r2, r3
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	801a      	strh	r2, [r3, #0]
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008250:	b29a      	uxth	r2, r3
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	801a      	strh	r2, [r3, #0]
 8008256:	e017      	b.n	8008288 <PCD_EP_ISR_Handler+0x6bc>
 8008258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d113      	bne.n	8008288 <PCD_EP_ISR_Handler+0x6bc>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008268:	b29b      	uxth	r3, r3
 800826a:	461a      	mov	r2, r3
 800826c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826e:	4413      	add	r3, r2
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	00da      	lsls	r2, r3, #3
 8008278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827a:	4413      	add	r3, r2
 800827c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008280:	63bb      	str	r3, [r7, #56]	; 0x38
 8008282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008284:	2200      	movs	r2, #0
 8008286:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f008 f9f5 	bl	801067e <HAL_PCD_DataInStageCallback>
 8008294:	e051      	b.n	800833a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008296:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800829a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d144      	bne.n	800832c <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	461a      	mov	r2, r3
 80082ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	4413      	add	r3, r2
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	6812      	ldr	r2, [r2, #0]
 80082ba:	4413      	add	r3, r2
 80082bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80082ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082cc:	699a      	ldr	r2, [r3, #24]
 80082ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d907      	bls.n	80082e6 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80082d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082d8:	699a      	ldr	r2, [r3, #24]
 80082da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80082de:	1ad2      	subs	r2, r2, r3
 80082e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082e2:	619a      	str	r2, [r3, #24]
 80082e4:	e002      	b.n	80082ec <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 80082e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082e8:	2200      	movs	r2, #0
 80082ea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80082ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d106      	bne.n	8008302 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f008 f9bf 	bl	801067e <HAL_PCD_DataInStageCallback>
 8008300:	e01b      	b.n	800833a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008304:	695a      	ldr	r2, [r3, #20]
 8008306:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800830a:	441a      	add	r2, r3
 800830c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800830e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008312:	69da      	ldr	r2, [r3, #28]
 8008314:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008318:	441a      	add	r2, r3
 800831a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800831c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008324:	4618      	mov	r0, r3
 8008326:	f004 fda6 	bl	800ce76 <USB_EPStartXfer>
 800832a:	e006      	b.n	800833a <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800832c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008330:	461a      	mov	r2, r3
 8008332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f917 	bl	8008568 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008342:	b29b      	uxth	r3, r3
 8008344:	b21b      	sxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	f6ff ac45 	blt.w	8007bd6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3758      	adds	r7, #88	; 0x58
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b088      	sub	sp, #32
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	4613      	mov	r3, r2
 8008362:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d07c      	beq.n	8008468 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008376:	b29b      	uxth	r3, r3
 8008378:	461a      	mov	r2, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	4413      	add	r3, r2
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	6812      	ldr	r2, [r2, #0]
 8008386:	4413      	add	r3, r2
 8008388:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008392:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	699a      	ldr	r2, [r3, #24]
 8008398:	8b7b      	ldrh	r3, [r7, #26]
 800839a:	429a      	cmp	r2, r3
 800839c:	d306      	bcc.n	80083ac <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	8b7b      	ldrh	r3, [r7, #26]
 80083a4:	1ad2      	subs	r2, r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	619a      	str	r2, [r3, #24]
 80083aa:	e002      	b.n	80083b2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2200      	movs	r2, #0
 80083b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d123      	bne.n	8008402 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d4:	833b      	strh	r3, [r7, #24]
 80083d6:	8b3b      	ldrh	r3, [r7, #24]
 80083d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083dc:	833b      	strh	r3, [r7, #24]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	441a      	add	r2, r3
 80083ec:	8b3b      	ldrh	r3, [r7, #24]
 80083ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083fe:	b29b      	uxth	r3, r3
 8008400:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01f      	beq.n	800844c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008426:	82fb      	strh	r3, [r7, #22]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	441a      	add	r2, r3
 8008436:	8afb      	ldrh	r3, [r7, #22]
 8008438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008444:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008448:	b29b      	uxth	r3, r3
 800844a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800844c:	8b7b      	ldrh	r3, [r7, #26]
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 8085 	beq.w	800855e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	6959      	ldr	r1, [r3, #20]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	891a      	ldrh	r2, [r3, #8]
 8008460:	8b7b      	ldrh	r3, [r7, #26]
 8008462:	f006 fa56 	bl	800e912 <USB_ReadPMA>
 8008466:	e07a      	b.n	800855e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008470:	b29b      	uxth	r3, r3
 8008472:	461a      	mov	r2, r3
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	4413      	add	r3, r2
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	6812      	ldr	r2, [r2, #0]
 8008480:	4413      	add	r3, r2
 8008482:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800848c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	8b7b      	ldrh	r3, [r7, #26]
 8008494:	429a      	cmp	r2, r3
 8008496:	d306      	bcc.n	80084a6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	699a      	ldr	r2, [r3, #24]
 800849c:	8b7b      	ldrh	r3, [r7, #26]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	619a      	str	r2, [r3, #24]
 80084a4:	e002      	b.n	80084ac <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2200      	movs	r2, #0
 80084aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d123      	bne.n	80084fc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ce:	83fb      	strh	r3, [r7, #30]
 80084d0:	8bfb      	ldrh	r3, [r7, #30]
 80084d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084d6:	83fb      	strh	r3, [r7, #30]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	441a      	add	r2, r3
 80084e6:	8bfb      	ldrh	r3, [r7, #30]
 80084e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80084fc:	88fb      	ldrh	r3, [r7, #6]
 80084fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	d11f      	bne.n	8008546 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800851c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008520:	83bb      	strh	r3, [r7, #28]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	441a      	add	r2, r3
 8008530:	8bbb      	ldrh	r3, [r7, #28]
 8008532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800853a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008542:	b29b      	uxth	r3, r3
 8008544:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008546:	8b7b      	ldrh	r3, [r7, #26]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d008      	beq.n	800855e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	6959      	ldr	r1, [r3, #20]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	895a      	ldrh	r2, [r3, #10]
 8008558:	8b7b      	ldrh	r3, [r7, #26]
 800855a:	f006 f9da 	bl	800e912 <USB_ReadPMA>
    }
  }

  return count;
 800855e:	8b7b      	ldrh	r3, [r7, #26]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b0a4      	sub	sp, #144	; 0x90
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	4613      	mov	r3, r2
 8008574:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 81db 	beq.w	8008938 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800858a:	b29b      	uxth	r3, r3
 800858c:	461a      	mov	r2, r3
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	4413      	add	r3, r2
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	6812      	ldr	r2, [r2, #0]
 800859a:	4413      	add	r3, r2
 800859c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	699a      	ldr	r2, [r3, #24]
 80085ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d907      	bls.n	80085c6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	699a      	ldr	r2, [r3, #24]
 80085ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	619a      	str	r2, [r3, #24]
 80085c4:	e002      	b.n	80085cc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2200      	movs	r2, #0
 80085ca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f040 80b9 	bne.w	8008748 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d126      	bne.n	800862c <HAL_PCD_EP_DB_Transmit+0xc4>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	461a      	mov	r2, r3
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	4413      	add	r3, r2
 80085f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	00da      	lsls	r2, r3, #3
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	4413      	add	r3, r2
 8008600:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008604:	62bb      	str	r3, [r7, #40]	; 0x28
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	b29b      	uxth	r3, r3
 800860c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008610:	b29a      	uxth	r2, r3
 8008612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008614:	801a      	strh	r2, [r3, #0]
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29b      	uxth	r3, r3
 800861c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008624:	b29a      	uxth	r2, r3
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	801a      	strh	r2, [r3, #0]
 800862a:	e01a      	b.n	8008662 <HAL_PCD_EP_DB_Transmit+0xfa>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	785b      	ldrb	r3, [r3, #1]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d116      	bne.n	8008662 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	637b      	str	r3, [r7, #52]	; 0x34
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008642:	b29b      	uxth	r3, r3
 8008644:	461a      	mov	r2, r3
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	4413      	add	r3, r2
 800864a:	637b      	str	r3, [r7, #52]	; 0x34
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	00da      	lsls	r2, r3, #3
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008654:	4413      	add	r3, r2
 8008656:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800865a:	633b      	str	r3, [r7, #48]	; 0x30
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	2200      	movs	r2, #0
 8008660:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	627b      	str	r3, [r7, #36]	; 0x24
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d126      	bne.n	80086be <HAL_PCD_EP_DB_Transmit+0x156>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	61fb      	str	r3, [r7, #28]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800867e:	b29b      	uxth	r3, r3
 8008680:	461a      	mov	r2, r3
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	4413      	add	r3, r2
 8008686:	61fb      	str	r3, [r7, #28]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	00da      	lsls	r2, r3, #3
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	4413      	add	r3, r2
 8008692:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008696:	61bb      	str	r3, [r7, #24]
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29b      	uxth	r3, r3
 800869e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	801a      	strh	r2, [r3, #0]
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	e017      	b.n	80086ee <HAL_PCD_EP_DB_Transmit+0x186>
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d113      	bne.n	80086ee <HAL_PCD_EP_DB_Transmit+0x186>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	461a      	mov	r2, r3
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	4413      	add	r3, r2
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	00da      	lsls	r2, r3, #3
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	4413      	add	r3, r2
 80086e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086e6:	623b      	str	r3, [r7, #32]
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	2200      	movs	r2, #0
 80086ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	4619      	mov	r1, r3
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f007 ffc2 	bl	801067e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80086fa:	88fb      	ldrh	r3, [r7, #6]
 80086fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 82fa 	beq.w	8008cfa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b29b      	uxth	r3, r3
 8008718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008720:	82fb      	strh	r3, [r7, #22]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	441a      	add	r2, r3
 8008730:	8afb      	ldrh	r3, [r7, #22]
 8008732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800873a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800873e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008742:	b29b      	uxth	r3, r3
 8008744:	8013      	strh	r3, [r2, #0]
 8008746:	e2d8      	b.n	8008cfa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008748:	88fb      	ldrh	r3, [r7, #6]
 800874a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d021      	beq.n	8008796 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	b29b      	uxth	r3, r3
 8008764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	441a      	add	r2, r3
 800877e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800878a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800878e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008792:	b29b      	uxth	r3, r3
 8008794:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800879c:	2b01      	cmp	r3, #1
 800879e:	f040 82ac 	bne.w	8008cfa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	695a      	ldr	r2, [r3, #20]
 80087a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80087aa:	441a      	add	r2, r3
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	69da      	ldr	r2, [r3, #28]
 80087b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80087b8:	441a      	add	r2, r3
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	6a1a      	ldr	r2, [r3, #32]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d30b      	bcc.n	80087e2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	6a1a      	ldr	r2, [r3, #32]
 80087d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087da:	1ad2      	subs	r2, r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	621a      	str	r2, [r3, #32]
 80087e0:	e017      	b.n	8008812 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d108      	bne.n	80087fc <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80087ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80087ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80087fa:	e00a      	b.n	8008812 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2200      	movs	r2, #0
 8008810:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d165      	bne.n	80088e6 <HAL_PCD_EP_DB_Transmit+0x37e>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008828:	b29b      	uxth	r3, r3
 800882a:	461a      	mov	r2, r3
 800882c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882e:	4413      	add	r3, r2
 8008830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	00da      	lsls	r2, r3, #3
 8008838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883a:	4413      	add	r3, r2
 800883c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008840:	63bb      	str	r3, [r7, #56]	; 0x38
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800884c:	b29a      	uxth	r2, r3
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008856:	2b3e      	cmp	r3, #62	; 0x3e
 8008858:	d91d      	bls.n	8008896 <HAL_PCD_EP_DB_Transmit+0x32e>
 800885a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	64bb      	str	r3, [r7, #72]	; 0x48
 8008862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008866:	f003 031f 	and.w	r3, r3, #31
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <HAL_PCD_EP_DB_Transmit+0x30c>
 800886e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008870:	3b01      	subs	r3, #1
 8008872:	64bb      	str	r3, [r7, #72]	; 0x48
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	881b      	ldrh	r3, [r3, #0]
 8008878:	b29a      	uxth	r2, r3
 800887a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800887c:	b29b      	uxth	r3, r3
 800887e:	029b      	lsls	r3, r3, #10
 8008880:	b29b      	uxth	r3, r3
 8008882:	4313      	orrs	r3, r2
 8008884:	b29b      	uxth	r3, r3
 8008886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800888a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800888e:	b29a      	uxth	r2, r3
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	e044      	b.n	8008920 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10a      	bne.n	80088b4 <HAL_PCD_EP_DB_Transmit+0x34c>
 800889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	801a      	strh	r2, [r3, #0]
 80088b2:	e035      	b.n	8008920 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80088b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088b8:	085b      	lsrs	r3, r3, #1
 80088ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80088bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <HAL_PCD_EP_DB_Transmit+0x366>
 80088c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ca:	3301      	adds	r3, #1
 80088cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	029b      	lsls	r3, r3, #10
 80088da:	b29b      	uxth	r3, r3
 80088dc:	4313      	orrs	r3, r2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e2:	801a      	strh	r2, [r3, #0]
 80088e4:	e01c      	b.n	8008920 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d118      	bne.n	8008920 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	647b      	str	r3, [r7, #68]	; 0x44
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008902:	4413      	add	r3, r2
 8008904:	647b      	str	r3, [r7, #68]	; 0x44
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	00da      	lsls	r2, r3, #3
 800890c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800890e:	4413      	add	r3, r2
 8008910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008914:	643b      	str	r3, [r7, #64]	; 0x40
 8008916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800891a:	b29a      	uxth	r2, r3
 800891c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800891e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6818      	ldr	r0, [r3, #0]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	6959      	ldr	r1, [r3, #20]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	891a      	ldrh	r2, [r3, #8]
 800892c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008930:	b29b      	uxth	r3, r3
 8008932:	f005 ffac 	bl	800e88e <USB_WritePMA>
 8008936:	e1e0      	b.n	8008cfa <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008940:	b29b      	uxth	r3, r3
 8008942:	461a      	mov	r2, r3
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	4413      	add	r3, r2
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	6812      	ldr	r2, [r2, #0]
 8008950:	4413      	add	r3, r2
 8008952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800895c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008968:	429a      	cmp	r2, r3
 800896a:	d307      	bcc.n	800897c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	699a      	ldr	r2, [r3, #24]
 8008970:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008974:	1ad2      	subs	r2, r2, r3
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	619a      	str	r2, [r3, #24]
 800897a:	e002      	b.n	8008982 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2200      	movs	r2, #0
 8008980:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 80c0 	bne.w	8008b0c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d126      	bne.n	80089e2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	67fb      	str	r3, [r7, #124]	; 0x7c
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089a8:	4413      	add	r3, r2
 80089aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	00da      	lsls	r2, r3, #3
 80089b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089b4:	4413      	add	r3, r2
 80089b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80089bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ca:	801a      	strh	r2, [r3, #0]
 80089cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089da:	b29a      	uxth	r2, r3
 80089dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089de:	801a      	strh	r2, [r3, #0]
 80089e0:	e01a      	b.n	8008a18 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d116      	bne.n	8008a18 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	667b      	str	r3, [r7, #100]	; 0x64
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	461a      	mov	r2, r3
 80089fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089fe:	4413      	add	r3, r2
 8008a00:	667b      	str	r3, [r7, #100]	; 0x64
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	00da      	lsls	r2, r3, #3
 8008a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a10:	663b      	str	r3, [r7, #96]	; 0x60
 8008a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a14:	2200      	movs	r2, #0
 8008a16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	677b      	str	r3, [r7, #116]	; 0x74
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	785b      	ldrb	r3, [r3, #1]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d12b      	bne.n	8008a7e <HAL_PCD_EP_DB_Transmit+0x516>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	461a      	mov	r2, r3
 8008a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a3a:	4413      	add	r3, r2
 8008a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	00da      	lsls	r2, r3, #3
 8008a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a46:	4413      	add	r3, r2
 8008a48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a62:	801a      	strh	r2, [r3, #0]
 8008a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a7a:	801a      	strh	r2, [r3, #0]
 8008a7c:	e017      	b.n	8008aae <HAL_PCD_EP_DB_Transmit+0x546>
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	785b      	ldrb	r3, [r3, #1]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d113      	bne.n	8008aae <HAL_PCD_EP_DB_Transmit+0x546>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a94:	4413      	add	r3, r2
 8008a96:	677b      	str	r3, [r7, #116]	; 0x74
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	00da      	lsls	r2, r3, #3
 8008a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8008aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aaa:	2200      	movs	r2, #0
 8008aac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f007 fde2 	bl	801067e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008aba:	88fb      	ldrh	r3, [r7, #6]
 8008abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f040 811a 	bne.w	8008cfa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	441a      	add	r2, r3
 8008af2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8008af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	8013      	strh	r3, [r2, #0]
 8008b0a:	e0f6      	b.n	8008cfa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d121      	bne.n	8008b5a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	441a      	add	r2, r3
 8008b42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	f040 80ca 	bne.w	8008cfa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	695a      	ldr	r2, [r3, #20]
 8008b6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008b6e:	441a      	add	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008b7c:	441a      	add	r2, r3
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	6a1a      	ldr	r2, [r3, #32]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d30b      	bcc.n	8008ba6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	6a1a      	ldr	r2, [r3, #32]
 8008b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b9e:	1ad2      	subs	r2, r2, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	621a      	str	r2, [r3, #32]
 8008ba4:	e017      	b.n	8008bd6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d108      	bne.n	8008bc0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008bae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008bb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008bbe:	e00a      	b.n	8008bd6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	657b      	str	r3, [r7, #84]	; 0x54
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	785b      	ldrb	r3, [r3, #1]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d165      	bne.n	8008cb0 <HAL_PCD_EP_DB_Transmit+0x748>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf8:	4413      	add	r3, r2
 8008bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	00da      	lsls	r2, r3, #3
 8008c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c04:	4413      	add	r3, r2
 8008c06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c1a:	801a      	strh	r2, [r3, #0]
 8008c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c20:	2b3e      	cmp	r3, #62	; 0x3e
 8008c22:	d91d      	bls.n	8008c60 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8008c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c30:	f003 031f 	and.w	r3, r3, #31
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8008c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	029b      	lsls	r3, r3, #10
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c5c:	801a      	strh	r2, [r3, #0]
 8008c5e:	e041      	b.n	8008ce4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <HAL_PCD_EP_DB_Transmit+0x716>
 8008c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c7a:	801a      	strh	r2, [r3, #0]
 8008c7c:	e032      	b.n	8008ce4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c82:	085b      	lsrs	r3, r3, #1
 8008c84:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <HAL_PCD_EP_DB_Transmit+0x730>
 8008c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c94:	3301      	adds	r3, #1
 8008c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	029b      	lsls	r3, r3, #10
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cac:	801a      	strh	r2, [r3, #0]
 8008cae:	e019      	b.n	8008ce4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d115      	bne.n	8008ce4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cc6:	4413      	add	r3, r2
 8008cc8:	657b      	str	r3, [r7, #84]	; 0x54
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	00da      	lsls	r2, r3, #3
 8008cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cd8:	653b      	str	r3, [r7, #80]	; 0x50
 8008cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ce2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6818      	ldr	r0, [r3, #0]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	6959      	ldr	r1, [r3, #20]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	895a      	ldrh	r2, [r3, #10]
 8008cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f005 fdca 	bl	800e88e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d14:	82bb      	strh	r3, [r7, #20]
 8008d16:	8abb      	ldrh	r3, [r7, #20]
 8008d18:	f083 0310 	eor.w	r3, r3, #16
 8008d1c:	82bb      	strh	r3, [r7, #20]
 8008d1e:	8abb      	ldrh	r3, [r7, #20]
 8008d20:	f083 0320 	eor.w	r3, r3, #32
 8008d24:	82bb      	strh	r3, [r7, #20]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	441a      	add	r2, r3
 8008d34:	8abb      	ldrh	r3, [r7, #20]
 8008d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3790      	adds	r7, #144	; 0x90
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	607b      	str	r3, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	817b      	strh	r3, [r7, #10]
 8008d62:	4613      	mov	r3, r2
 8008d64:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008d66:	897b      	ldrh	r3, [r7, #10]
 8008d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00b      	beq.n	8008d8a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d72:	897b      	ldrh	r3, [r7, #10]
 8008d74:	f003 0307 	and.w	r3, r3, #7
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	4413      	add	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	e009      	b.n	8008d9e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008d8a:	897a      	ldrh	r2, [r7, #10]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008d9e:	893b      	ldrh	r3, [r7, #8]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d107      	bne.n	8008db4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2200      	movs	r2, #0
 8008da8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	80da      	strh	r2, [r3, #6]
 8008db2:	e00b      	b.n	8008dcc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2201      	movs	r2, #1
 8008db8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	0c1b      	lsrs	r3, r3, #16
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b085      	sub	sp, #20
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	f043 0301 	orr.w	r3, r3, #1
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	f043 0302 	orr.w	r3, r3, #2
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
	...

08008e30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008e34:	4b04      	ldr	r3, [pc, #16]	; (8008e48 <HAL_PWREx_GetVoltageRange+0x18>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40007000 	.word	0x40007000

08008e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e5a:	d130      	bne.n	8008ebe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e5c:	4b23      	ldr	r3, [pc, #140]	; (8008eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e68:	d038      	beq.n	8008edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e6a:	4b20      	ldr	r3, [pc, #128]	; (8008eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008e72:	4a1e      	ldr	r2, [pc, #120]	; (8008eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e7a:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2232      	movs	r2, #50	; 0x32
 8008e80:	fb02 f303 	mul.w	r3, r2, r3
 8008e84:	4a1b      	ldr	r2, [pc, #108]	; (8008ef4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008e86:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8a:	0c9b      	lsrs	r3, r3, #18
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e90:	e002      	b.n	8008e98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e98:	4b14      	ldr	r3, [pc, #80]	; (8008eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea4:	d102      	bne.n	8008eac <HAL_PWREx_ControlVoltageScaling+0x60>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f2      	bne.n	8008e92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008eac:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb8:	d110      	bne.n	8008edc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e00f      	b.n	8008ede <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ebe:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eca:	d007      	beq.n	8008edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008ecc:	4b07      	ldr	r3, [pc, #28]	; (8008eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ed4:	4a05      	ldr	r2, [pc, #20]	; (8008eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008eda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	40007000 	.word	0x40007000
 8008ef0:	20000020 	.word	0x20000020
 8008ef4:	431bde83 	.word	0x431bde83

08008ef8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008efc:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f06:	6053      	str	r3, [r2, #4]
}
 8008f08:	bf00      	nop
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40007000 	.word	0x40007000

08008f18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	f000 bc02 	b.w	8009730 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f2c:	4b96      	ldr	r3, [pc, #600]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 030c 	and.w	r3, r3, #12
 8008f34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f36:	4b94      	ldr	r3, [pc, #592]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0310 	and.w	r3, r3, #16
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 80e4 	beq.w	8009116 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d007      	beq.n	8008f64 <HAL_RCC_OscConfig+0x4c>
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b0c      	cmp	r3, #12
 8008f58:	f040 808b 	bne.w	8009072 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	f040 8087 	bne.w	8009072 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008f64:	4b88      	ldr	r3, [pc, #544]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <HAL_RCC_OscConfig+0x64>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e3d9      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a1a      	ldr	r2, [r3, #32]
 8008f80:	4b81      	ldr	r3, [pc, #516]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <HAL_RCC_OscConfig+0x7e>
 8008f8c:	4b7e      	ldr	r3, [pc, #504]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f94:	e005      	b.n	8008fa2 <HAL_RCC_OscConfig+0x8a>
 8008f96:	4b7c      	ldr	r3, [pc, #496]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f9c:	091b      	lsrs	r3, r3, #4
 8008f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d223      	bcs.n	8008fee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fd8c 	bl	8009ac8 <RCC_SetFlashLatencyFromMSIRange>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e3ba      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fba:	4b73      	ldr	r3, [pc, #460]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a72      	ldr	r2, [pc, #456]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008fc0:	f043 0308 	orr.w	r3, r3, #8
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	4b70      	ldr	r3, [pc, #448]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	496d      	ldr	r1, [pc, #436]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008fd8:	4b6b      	ldr	r3, [pc, #428]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	021b      	lsls	r3, r3, #8
 8008fe6:	4968      	ldr	r1, [pc, #416]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	604b      	str	r3, [r1, #4]
 8008fec:	e025      	b.n	800903a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fee:	4b66      	ldr	r3, [pc, #408]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a65      	ldr	r2, [pc, #404]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008ff4:	f043 0308 	orr.w	r3, r3, #8
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	4b63      	ldr	r3, [pc, #396]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	4960      	ldr	r1, [pc, #384]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8009008:	4313      	orrs	r3, r2
 800900a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800900c:	4b5e      	ldr	r3, [pc, #376]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	021b      	lsls	r3, r3, #8
 800901a:	495b      	ldr	r1, [pc, #364]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 800901c:	4313      	orrs	r3, r2
 800901e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fd4c 	bl	8009ac8 <RCC_SetFlashLatencyFromMSIRange>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e37a      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800903a:	f000 fc81 	bl	8009940 <HAL_RCC_GetSysClockFreq>
 800903e:	4602      	mov	r2, r0
 8009040:	4b51      	ldr	r3, [pc, #324]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	091b      	lsrs	r3, r3, #4
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	4950      	ldr	r1, [pc, #320]	; (800918c <HAL_RCC_OscConfig+0x274>)
 800904c:	5ccb      	ldrb	r3, [r1, r3]
 800904e:	f003 031f 	and.w	r3, r3, #31
 8009052:	fa22 f303 	lsr.w	r3, r2, r3
 8009056:	4a4e      	ldr	r2, [pc, #312]	; (8009190 <HAL_RCC_OscConfig+0x278>)
 8009058:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800905a:	4b4e      	ldr	r3, [pc, #312]	; (8009194 <HAL_RCC_OscConfig+0x27c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f7fb faf8 	bl	8004654 <HAL_InitTick>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d052      	beq.n	8009114 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	e35e      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d032      	beq.n	80090e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800907a:	4b43      	ldr	r3, [pc, #268]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a42      	ldr	r2, [pc, #264]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8009080:	f043 0301 	orr.w	r3, r3, #1
 8009084:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009086:	f7fb fb35 	bl	80046f4 <HAL_GetTick>
 800908a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800908c:	e008      	b.n	80090a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800908e:	f7fb fb31 	bl	80046f4 <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	2b02      	cmp	r3, #2
 800909a:	d901      	bls.n	80090a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e347      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80090a0:	4b39      	ldr	r3, [pc, #228]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0f0      	beq.n	800908e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80090ac:	4b36      	ldr	r3, [pc, #216]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a35      	ldr	r2, [pc, #212]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 80090b2:	f043 0308 	orr.w	r3, r3, #8
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	4b33      	ldr	r3, [pc, #204]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a1b      	ldr	r3, [r3, #32]
 80090c4:	4930      	ldr	r1, [pc, #192]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80090ca:	4b2f      	ldr	r3, [pc, #188]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	021b      	lsls	r3, r3, #8
 80090d8:	492b      	ldr	r1, [pc, #172]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	604b      	str	r3, [r1, #4]
 80090de:	e01a      	b.n	8009116 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80090e0:	4b29      	ldr	r3, [pc, #164]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a28      	ldr	r2, [pc, #160]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 80090e6:	f023 0301 	bic.w	r3, r3, #1
 80090ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80090ec:	f7fb fb02 	bl	80046f4 <HAL_GetTick>
 80090f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80090f2:	e008      	b.n	8009106 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80090f4:	f7fb fafe 	bl	80046f4 <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d901      	bls.n	8009106 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e314      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009106:	4b20      	ldr	r3, [pc, #128]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1f0      	bne.n	80090f4 <HAL_RCC_OscConfig+0x1dc>
 8009112:	e000      	b.n	8009116 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009114:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d073      	beq.n	800920a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	2b08      	cmp	r3, #8
 8009126:	d005      	beq.n	8009134 <HAL_RCC_OscConfig+0x21c>
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	2b0c      	cmp	r3, #12
 800912c:	d10e      	bne.n	800914c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b03      	cmp	r3, #3
 8009132:	d10b      	bne.n	800914c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009134:	4b14      	ldr	r3, [pc, #80]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d063      	beq.n	8009208 <HAL_RCC_OscConfig+0x2f0>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d15f      	bne.n	8009208 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e2f1      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009154:	d106      	bne.n	8009164 <HAL_RCC_OscConfig+0x24c>
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a0b      	ldr	r2, [pc, #44]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 800915c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	e025      	b.n	80091b0 <HAL_RCC_OscConfig+0x298>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800916c:	d114      	bne.n	8009198 <HAL_RCC_OscConfig+0x280>
 800916e:	4b06      	ldr	r3, [pc, #24]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a05      	ldr	r2, [pc, #20]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8009174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	4b03      	ldr	r3, [pc, #12]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a02      	ldr	r2, [pc, #8]	; (8009188 <HAL_RCC_OscConfig+0x270>)
 8009180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	e013      	b.n	80091b0 <HAL_RCC_OscConfig+0x298>
 8009188:	40021000 	.word	0x40021000
 800918c:	08018844 	.word	0x08018844
 8009190:	20000020 	.word	0x20000020
 8009194:	20000024 	.word	0x20000024
 8009198:	4ba0      	ldr	r3, [pc, #640]	; (800941c <HAL_RCC_OscConfig+0x504>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a9f      	ldr	r2, [pc, #636]	; (800941c <HAL_RCC_OscConfig+0x504>)
 800919e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	4b9d      	ldr	r3, [pc, #628]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a9c      	ldr	r2, [pc, #624]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80091aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d013      	beq.n	80091e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b8:	f7fb fa9c 	bl	80046f4 <HAL_GetTick>
 80091bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091be:	e008      	b.n	80091d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091c0:	f7fb fa98 	bl	80046f4 <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	2b64      	cmp	r3, #100	; 0x64
 80091cc:	d901      	bls.n	80091d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e2ae      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091d2:	4b92      	ldr	r3, [pc, #584]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0f0      	beq.n	80091c0 <HAL_RCC_OscConfig+0x2a8>
 80091de:	e014      	b.n	800920a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e0:	f7fb fa88 	bl	80046f4 <HAL_GetTick>
 80091e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80091e6:	e008      	b.n	80091fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091e8:	f7fb fa84 	bl	80046f4 <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	2b64      	cmp	r3, #100	; 0x64
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e29a      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80091fa:	4b88      	ldr	r3, [pc, #544]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1f0      	bne.n	80091e8 <HAL_RCC_OscConfig+0x2d0>
 8009206:	e000      	b.n	800920a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d060      	beq.n	80092d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	2b04      	cmp	r3, #4
 800921a:	d005      	beq.n	8009228 <HAL_RCC_OscConfig+0x310>
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	2b0c      	cmp	r3, #12
 8009220:	d119      	bne.n	8009256 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b02      	cmp	r3, #2
 8009226:	d116      	bne.n	8009256 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009228:	4b7c      	ldr	r3, [pc, #496]	; (800941c <HAL_RCC_OscConfig+0x504>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009230:	2b00      	cmp	r3, #0
 8009232:	d005      	beq.n	8009240 <HAL_RCC_OscConfig+0x328>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e277      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009240:	4b76      	ldr	r3, [pc, #472]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	061b      	lsls	r3, r3, #24
 800924e:	4973      	ldr	r1, [pc, #460]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009250:	4313      	orrs	r3, r2
 8009252:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009254:	e040      	b.n	80092d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d023      	beq.n	80092a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800925e:	4b6f      	ldr	r3, [pc, #444]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a6e      	ldr	r2, [pc, #440]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800926a:	f7fb fa43 	bl	80046f4 <HAL_GetTick>
 800926e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009270:	e008      	b.n	8009284 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009272:	f7fb fa3f 	bl	80046f4 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d901      	bls.n	8009284 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e255      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009284:	4b65      	ldr	r3, [pc, #404]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0f0      	beq.n	8009272 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009290:	4b62      	ldr	r3, [pc, #392]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	061b      	lsls	r3, r3, #24
 800929e:	495f      	ldr	r1, [pc, #380]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	604b      	str	r3, [r1, #4]
 80092a4:	e018      	b.n	80092d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092a6:	4b5d      	ldr	r3, [pc, #372]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a5c      	ldr	r2, [pc, #368]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80092ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b2:	f7fb fa1f 	bl	80046f4 <HAL_GetTick>
 80092b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092b8:	e008      	b.n	80092cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092ba:	f7fb fa1b 	bl	80046f4 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d901      	bls.n	80092cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e231      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80092cc:	4b53      	ldr	r3, [pc, #332]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1f0      	bne.n	80092ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0308 	and.w	r3, r3, #8
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d03c      	beq.n	800935e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d01c      	beq.n	8009326 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092ec:	4b4b      	ldr	r3, [pc, #300]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80092ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092f2:	4a4a      	ldr	r2, [pc, #296]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80092f4:	f043 0301 	orr.w	r3, r3, #1
 80092f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092fc:	f7fb f9fa 	bl	80046f4 <HAL_GetTick>
 8009300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009302:	e008      	b.n	8009316 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009304:	f7fb f9f6 	bl	80046f4 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2b02      	cmp	r3, #2
 8009310:	d901      	bls.n	8009316 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e20c      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009316:	4b41      	ldr	r3, [pc, #260]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800931c:	f003 0302 	and.w	r3, r3, #2
 8009320:	2b00      	cmp	r3, #0
 8009322:	d0ef      	beq.n	8009304 <HAL_RCC_OscConfig+0x3ec>
 8009324:	e01b      	b.n	800935e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009326:	4b3d      	ldr	r3, [pc, #244]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800932c:	4a3b      	ldr	r2, [pc, #236]	; (800941c <HAL_RCC_OscConfig+0x504>)
 800932e:	f023 0301 	bic.w	r3, r3, #1
 8009332:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009336:	f7fb f9dd 	bl	80046f4 <HAL_GetTick>
 800933a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800933c:	e008      	b.n	8009350 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800933e:	f7fb f9d9 	bl	80046f4 <HAL_GetTick>
 8009342:	4602      	mov	r2, r0
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	2b02      	cmp	r3, #2
 800934a:	d901      	bls.n	8009350 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800934c:	2303      	movs	r3, #3
 800934e:	e1ef      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009350:	4b32      	ldr	r3, [pc, #200]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1ef      	bne.n	800933e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0304 	and.w	r3, r3, #4
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 80a6 	beq.w	80094b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800936c:	2300      	movs	r3, #0
 800936e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009370:	4b2a      	ldr	r3, [pc, #168]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10d      	bne.n	8009398 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800937c:	4b27      	ldr	r3, [pc, #156]	; (800941c <HAL_RCC_OscConfig+0x504>)
 800937e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009380:	4a26      	ldr	r2, [pc, #152]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009386:	6593      	str	r3, [r2, #88]	; 0x58
 8009388:	4b24      	ldr	r3, [pc, #144]	; (800941c <HAL_RCC_OscConfig+0x504>)
 800938a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800938c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009390:	60bb      	str	r3, [r7, #8]
 8009392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009394:	2301      	movs	r3, #1
 8009396:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009398:	4b21      	ldr	r3, [pc, #132]	; (8009420 <HAL_RCC_OscConfig+0x508>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d118      	bne.n	80093d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093a4:	4b1e      	ldr	r3, [pc, #120]	; (8009420 <HAL_RCC_OscConfig+0x508>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a1d      	ldr	r2, [pc, #116]	; (8009420 <HAL_RCC_OscConfig+0x508>)
 80093aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093b0:	f7fb f9a0 	bl	80046f4 <HAL_GetTick>
 80093b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093b6:	e008      	b.n	80093ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093b8:	f7fb f99c 	bl	80046f4 <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e1b2      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093ca:	4b15      	ldr	r3, [pc, #84]	; (8009420 <HAL_RCC_OscConfig+0x508>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d0f0      	beq.n	80093b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d108      	bne.n	80093f0 <HAL_RCC_OscConfig+0x4d8>
 80093de:	4b0f      	ldr	r3, [pc, #60]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80093e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e4:	4a0d      	ldr	r2, [pc, #52]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80093e6:	f043 0301 	orr.w	r3, r3, #1
 80093ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093ee:	e029      	b.n	8009444 <HAL_RCC_OscConfig+0x52c>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	2b05      	cmp	r3, #5
 80093f6:	d115      	bne.n	8009424 <HAL_RCC_OscConfig+0x50c>
 80093f8:	4b08      	ldr	r3, [pc, #32]	; (800941c <HAL_RCC_OscConfig+0x504>)
 80093fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093fe:	4a07      	ldr	r2, [pc, #28]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009400:	f043 0304 	orr.w	r3, r3, #4
 8009404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <HAL_RCC_OscConfig+0x504>)
 800940a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800940e:	4a03      	ldr	r2, [pc, #12]	; (800941c <HAL_RCC_OscConfig+0x504>)
 8009410:	f043 0301 	orr.w	r3, r3, #1
 8009414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009418:	e014      	b.n	8009444 <HAL_RCC_OscConfig+0x52c>
 800941a:	bf00      	nop
 800941c:	40021000 	.word	0x40021000
 8009420:	40007000 	.word	0x40007000
 8009424:	4b9a      	ldr	r3, [pc, #616]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 8009426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800942a:	4a99      	ldr	r2, [pc, #612]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 800942c:	f023 0301 	bic.w	r3, r3, #1
 8009430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009434:	4b96      	ldr	r3, [pc, #600]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 8009436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943a:	4a95      	ldr	r2, [pc, #596]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 800943c:	f023 0304 	bic.w	r3, r3, #4
 8009440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d016      	beq.n	800947a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800944c:	f7fb f952 	bl	80046f4 <HAL_GetTick>
 8009450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009452:	e00a      	b.n	800946a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009454:	f7fb f94e 	bl	80046f4 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009462:	4293      	cmp	r3, r2
 8009464:	d901      	bls.n	800946a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e162      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800946a:	4b89      	ldr	r3, [pc, #548]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 800946c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d0ed      	beq.n	8009454 <HAL_RCC_OscConfig+0x53c>
 8009478:	e015      	b.n	80094a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800947a:	f7fb f93b 	bl	80046f4 <HAL_GetTick>
 800947e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009480:	e00a      	b.n	8009498 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009482:	f7fb f937 	bl	80046f4 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009490:	4293      	cmp	r3, r2
 8009492:	d901      	bls.n	8009498 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e14b      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009498:	4b7d      	ldr	r3, [pc, #500]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 800949a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1ed      	bne.n	8009482 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094a6:	7ffb      	ldrb	r3, [r7, #31]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d105      	bne.n	80094b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094ac:	4b78      	ldr	r3, [pc, #480]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 80094ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b0:	4a77      	ldr	r2, [pc, #476]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 80094b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0320 	and.w	r3, r3, #32
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d03c      	beq.n	800953e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01c      	beq.n	8009506 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80094cc:	4b70      	ldr	r3, [pc, #448]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 80094ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094d2:	4a6f      	ldr	r2, [pc, #444]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 80094d4:	f043 0301 	orr.w	r3, r3, #1
 80094d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094dc:	f7fb f90a 	bl	80046f4 <HAL_GetTick>
 80094e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80094e2:	e008      	b.n	80094f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094e4:	f7fb f906 	bl	80046f4 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d901      	bls.n	80094f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e11c      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80094f6:	4b66      	ldr	r3, [pc, #408]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 80094f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	2b00      	cmp	r3, #0
 8009502:	d0ef      	beq.n	80094e4 <HAL_RCC_OscConfig+0x5cc>
 8009504:	e01b      	b.n	800953e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009506:	4b62      	ldr	r3, [pc, #392]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 8009508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800950c:	4a60      	ldr	r2, [pc, #384]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 800950e:	f023 0301 	bic.w	r3, r3, #1
 8009512:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009516:	f7fb f8ed 	bl	80046f4 <HAL_GetTick>
 800951a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800951c:	e008      	b.n	8009530 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800951e:	f7fb f8e9 	bl	80046f4 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	2b02      	cmp	r3, #2
 800952a:	d901      	bls.n	8009530 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e0ff      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009530:	4b57      	ldr	r3, [pc, #348]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 8009532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1ef      	bne.n	800951e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 80f3 	beq.w	800972e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954c:	2b02      	cmp	r3, #2
 800954e:	f040 80c9 	bne.w	80096e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009552:	4b4f      	ldr	r3, [pc, #316]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f003 0203 	and.w	r2, r3, #3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009562:	429a      	cmp	r2, r3
 8009564:	d12c      	bne.n	80095c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009570:	3b01      	subs	r3, #1
 8009572:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009574:	429a      	cmp	r2, r3
 8009576:	d123      	bne.n	80095c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009582:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009584:	429a      	cmp	r2, r3
 8009586:	d11b      	bne.n	80095c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009592:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009594:	429a      	cmp	r2, r3
 8009596:	d113      	bne.n	80095c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a2:	085b      	lsrs	r3, r3, #1
 80095a4:	3b01      	subs	r3, #1
 80095a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d109      	bne.n	80095c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	085b      	lsrs	r3, r3, #1
 80095b8:	3b01      	subs	r3, #1
 80095ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80095bc:	429a      	cmp	r2, r3
 80095be:	d06b      	beq.n	8009698 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	2b0c      	cmp	r3, #12
 80095c4:	d062      	beq.n	800968c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80095c6:	4b32      	ldr	r3, [pc, #200]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e0ac      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80095d6:	4b2e      	ldr	r3, [pc, #184]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a2d      	ldr	r2, [pc, #180]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 80095dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80095e2:	f7fb f887 	bl	80046f4 <HAL_GetTick>
 80095e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095e8:	e008      	b.n	80095fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095ea:	f7fb f883 	bl	80046f4 <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d901      	bls.n	80095fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e099      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095fc:	4b24      	ldr	r3, [pc, #144]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1f0      	bne.n	80095ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009608:	4b21      	ldr	r3, [pc, #132]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	4b21      	ldr	r3, [pc, #132]	; (8009694 <HAL_RCC_OscConfig+0x77c>)
 800960e:	4013      	ands	r3, r2
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009618:	3a01      	subs	r2, #1
 800961a:	0112      	lsls	r2, r2, #4
 800961c:	4311      	orrs	r1, r2
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009622:	0212      	lsls	r2, r2, #8
 8009624:	4311      	orrs	r1, r2
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800962a:	0852      	lsrs	r2, r2, #1
 800962c:	3a01      	subs	r2, #1
 800962e:	0552      	lsls	r2, r2, #21
 8009630:	4311      	orrs	r1, r2
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009636:	0852      	lsrs	r2, r2, #1
 8009638:	3a01      	subs	r2, #1
 800963a:	0652      	lsls	r2, r2, #25
 800963c:	4311      	orrs	r1, r2
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009642:	06d2      	lsls	r2, r2, #27
 8009644:	430a      	orrs	r2, r1
 8009646:	4912      	ldr	r1, [pc, #72]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 8009648:	4313      	orrs	r3, r2
 800964a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800964c:	4b10      	ldr	r3, [pc, #64]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a0f      	ldr	r2, [pc, #60]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 8009652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009656:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009658:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	4a0c      	ldr	r2, [pc, #48]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 800965e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009662:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009664:	f7fb f846 	bl	80046f4 <HAL_GetTick>
 8009668:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800966a:	e008      	b.n	800967e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800966c:	f7fb f842 	bl	80046f4 <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b02      	cmp	r3, #2
 8009678:	d901      	bls.n	800967e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e058      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800967e:	4b04      	ldr	r3, [pc, #16]	; (8009690 <HAL_RCC_OscConfig+0x778>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0f0      	beq.n	800966c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800968a:	e050      	b.n	800972e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e04f      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
 8009690:	40021000 	.word	0x40021000
 8009694:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009698:	4b27      	ldr	r3, [pc, #156]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d144      	bne.n	800972e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80096a4:	4b24      	ldr	r3, [pc, #144]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a23      	ldr	r2, [pc, #140]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 80096aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80096b0:	4b21      	ldr	r3, [pc, #132]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	4a20      	ldr	r2, [pc, #128]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 80096b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80096bc:	f7fb f81a 	bl	80046f4 <HAL_GetTick>
 80096c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096c2:	e008      	b.n	80096d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096c4:	f7fb f816 	bl	80046f4 <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d901      	bls.n	80096d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e02c      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096d6:	4b18      	ldr	r3, [pc, #96]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d0f0      	beq.n	80096c4 <HAL_RCC_OscConfig+0x7ac>
 80096e2:	e024      	b.n	800972e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	2b0c      	cmp	r3, #12
 80096e8:	d01f      	beq.n	800972a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096ea:	4b13      	ldr	r3, [pc, #76]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a12      	ldr	r2, [pc, #72]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 80096f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096f6:	f7fa fffd 	bl	80046f4 <HAL_GetTick>
 80096fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096fc:	e008      	b.n	8009710 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096fe:	f7fa fff9 	bl	80046f4 <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	2b02      	cmp	r3, #2
 800970a:	d901      	bls.n	8009710 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800970c:	2303      	movs	r3, #3
 800970e:	e00f      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009710:	4b09      	ldr	r3, [pc, #36]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1f0      	bne.n	80096fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800971c:	4b06      	ldr	r3, [pc, #24]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	4905      	ldr	r1, [pc, #20]	; (8009738 <HAL_RCC_OscConfig+0x820>)
 8009722:	4b06      	ldr	r3, [pc, #24]	; (800973c <HAL_RCC_OscConfig+0x824>)
 8009724:	4013      	ands	r3, r2
 8009726:	60cb      	str	r3, [r1, #12]
 8009728:	e001      	b.n	800972e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3720      	adds	r7, #32
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	40021000 	.word	0x40021000
 800973c:	feeefffc 	.word	0xfeeefffc

08009740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d101      	bne.n	8009754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e0e7      	b.n	8009924 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009754:	4b75      	ldr	r3, [pc, #468]	; (800992c <HAL_RCC_ClockConfig+0x1ec>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0307 	and.w	r3, r3, #7
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	429a      	cmp	r2, r3
 8009760:	d910      	bls.n	8009784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009762:	4b72      	ldr	r3, [pc, #456]	; (800992c <HAL_RCC_ClockConfig+0x1ec>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f023 0207 	bic.w	r2, r3, #7
 800976a:	4970      	ldr	r1, [pc, #448]	; (800992c <HAL_RCC_ClockConfig+0x1ec>)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	4313      	orrs	r3, r2
 8009770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009772:	4b6e      	ldr	r3, [pc, #440]	; (800992c <HAL_RCC_ClockConfig+0x1ec>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	429a      	cmp	r2, r3
 800977e:	d001      	beq.n	8009784 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e0cf      	b.n	8009924 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	2b00      	cmp	r3, #0
 800978e:	d010      	beq.n	80097b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	4b66      	ldr	r3, [pc, #408]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800979c:	429a      	cmp	r2, r3
 800979e:	d908      	bls.n	80097b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097a0:	4b63      	ldr	r3, [pc, #396]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	4960      	ldr	r1, [pc, #384]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d04c      	beq.n	8009858 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d107      	bne.n	80097d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097c6:	4b5a      	ldr	r3, [pc, #360]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d121      	bne.n	8009816 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e0a6      	b.n	8009924 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d107      	bne.n	80097ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097de:	4b54      	ldr	r3, [pc, #336]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d115      	bne.n	8009816 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e09a      	b.n	8009924 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d107      	bne.n	8009806 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097f6:	4b4e      	ldr	r3, [pc, #312]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e08e      	b.n	8009924 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009806:	4b4a      	ldr	r3, [pc, #296]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e086      	b.n	8009924 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009816:	4b46      	ldr	r3, [pc, #280]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f023 0203 	bic.w	r2, r3, #3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	4943      	ldr	r1, [pc, #268]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 8009824:	4313      	orrs	r3, r2
 8009826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009828:	f7fa ff64 	bl	80046f4 <HAL_GetTick>
 800982c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800982e:	e00a      	b.n	8009846 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009830:	f7fa ff60 	bl	80046f4 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	f241 3288 	movw	r2, #5000	; 0x1388
 800983e:	4293      	cmp	r3, r2
 8009840:	d901      	bls.n	8009846 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e06e      	b.n	8009924 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009846:	4b3a      	ldr	r3, [pc, #232]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f003 020c 	and.w	r2, r3, #12
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	429a      	cmp	r2, r3
 8009856:	d1eb      	bne.n	8009830 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0302 	and.w	r3, r3, #2
 8009860:	2b00      	cmp	r3, #0
 8009862:	d010      	beq.n	8009886 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	4b31      	ldr	r3, [pc, #196]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009870:	429a      	cmp	r2, r3
 8009872:	d208      	bcs.n	8009886 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009874:	4b2e      	ldr	r3, [pc, #184]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	492b      	ldr	r1, [pc, #172]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 8009882:	4313      	orrs	r3, r2
 8009884:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009886:	4b29      	ldr	r3, [pc, #164]	; (800992c <HAL_RCC_ClockConfig+0x1ec>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0307 	and.w	r3, r3, #7
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	d210      	bcs.n	80098b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009894:	4b25      	ldr	r3, [pc, #148]	; (800992c <HAL_RCC_ClockConfig+0x1ec>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f023 0207 	bic.w	r2, r3, #7
 800989c:	4923      	ldr	r1, [pc, #140]	; (800992c <HAL_RCC_ClockConfig+0x1ec>)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098a4:	4b21      	ldr	r3, [pc, #132]	; (800992c <HAL_RCC_ClockConfig+0x1ec>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d001      	beq.n	80098b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e036      	b.n	8009924 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d008      	beq.n	80098d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098c2:	4b1b      	ldr	r3, [pc, #108]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	4918      	ldr	r1, [pc, #96]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0308 	and.w	r3, r3, #8
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d009      	beq.n	80098f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098e0:	4b13      	ldr	r3, [pc, #76]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	4910      	ldr	r1, [pc, #64]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098f4:	f000 f824 	bl	8009940 <HAL_RCC_GetSysClockFreq>
 80098f8:	4602      	mov	r2, r0
 80098fa:	4b0d      	ldr	r3, [pc, #52]	; (8009930 <HAL_RCC_ClockConfig+0x1f0>)
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	091b      	lsrs	r3, r3, #4
 8009900:	f003 030f 	and.w	r3, r3, #15
 8009904:	490b      	ldr	r1, [pc, #44]	; (8009934 <HAL_RCC_ClockConfig+0x1f4>)
 8009906:	5ccb      	ldrb	r3, [r1, r3]
 8009908:	f003 031f 	and.w	r3, r3, #31
 800990c:	fa22 f303 	lsr.w	r3, r2, r3
 8009910:	4a09      	ldr	r2, [pc, #36]	; (8009938 <HAL_RCC_ClockConfig+0x1f8>)
 8009912:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009914:	4b09      	ldr	r3, [pc, #36]	; (800993c <HAL_RCC_ClockConfig+0x1fc>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4618      	mov	r0, r3
 800991a:	f7fa fe9b 	bl	8004654 <HAL_InitTick>
 800991e:	4603      	mov	r3, r0
 8009920:	72fb      	strb	r3, [r7, #11]

  return status;
 8009922:	7afb      	ldrb	r3, [r7, #11]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	40022000 	.word	0x40022000
 8009930:	40021000 	.word	0x40021000
 8009934:	08018844 	.word	0x08018844
 8009938:	20000020 	.word	0x20000020
 800993c:	20000024 	.word	0x20000024

08009940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009940:	b480      	push	{r7}
 8009942:	b089      	sub	sp, #36	; 0x24
 8009944:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	61fb      	str	r3, [r7, #28]
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800994e:	4b3e      	ldr	r3, [pc, #248]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f003 030c 	and.w	r3, r3, #12
 8009956:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009958:	4b3b      	ldr	r3, [pc, #236]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x108>)
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f003 0303 	and.w	r3, r3, #3
 8009960:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <HAL_RCC_GetSysClockFreq+0x34>
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2b0c      	cmp	r3, #12
 800996c:	d121      	bne.n	80099b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d11e      	bne.n	80099b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009974:	4b34      	ldr	r3, [pc, #208]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0308 	and.w	r3, r3, #8
 800997c:	2b00      	cmp	r3, #0
 800997e:	d107      	bne.n	8009990 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009980:	4b31      	ldr	r3, [pc, #196]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8009982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009986:	0a1b      	lsrs	r3, r3, #8
 8009988:	f003 030f 	and.w	r3, r3, #15
 800998c:	61fb      	str	r3, [r7, #28]
 800998e:	e005      	b.n	800999c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009990:	4b2d      	ldr	r3, [pc, #180]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	091b      	lsrs	r3, r3, #4
 8009996:	f003 030f 	and.w	r3, r3, #15
 800999a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800999c:	4a2b      	ldr	r2, [pc, #172]	; (8009a4c <HAL_RCC_GetSysClockFreq+0x10c>)
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10d      	bne.n	80099c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80099b0:	e00a      	b.n	80099c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2b04      	cmp	r3, #4
 80099b6:	d102      	bne.n	80099be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80099b8:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80099ba:	61bb      	str	r3, [r7, #24]
 80099bc:	e004      	b.n	80099c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	d101      	bne.n	80099c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80099c4:	4b23      	ldr	r3, [pc, #140]	; (8009a54 <HAL_RCC_GetSysClockFreq+0x114>)
 80099c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	2b0c      	cmp	r3, #12
 80099cc:	d134      	bne.n	8009a38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80099ce:	4b1e      	ldr	r3, [pc, #120]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x108>)
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d003      	beq.n	80099e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d003      	beq.n	80099ec <HAL_RCC_GetSysClockFreq+0xac>
 80099e4:	e005      	b.n	80099f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80099e6:	4b1a      	ldr	r3, [pc, #104]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80099e8:	617b      	str	r3, [r7, #20]
      break;
 80099ea:	e005      	b.n	80099f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80099ec:	4b19      	ldr	r3, [pc, #100]	; (8009a54 <HAL_RCC_GetSysClockFreq+0x114>)
 80099ee:	617b      	str	r3, [r7, #20]
      break;
 80099f0:	e002      	b.n	80099f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	617b      	str	r3, [r7, #20]
      break;
 80099f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80099f8:	4b13      	ldr	r3, [pc, #76]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x108>)
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	091b      	lsrs	r3, r3, #4
 80099fe:	f003 0307 	and.w	r3, r3, #7
 8009a02:	3301      	adds	r3, #1
 8009a04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009a06:	4b10      	ldr	r3, [pc, #64]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	0a1b      	lsrs	r3, r3, #8
 8009a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	fb03 f202 	mul.w	r2, r3, r2
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009a1e:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	0e5b      	lsrs	r3, r3, #25
 8009a24:	f003 0303 	and.w	r3, r3, #3
 8009a28:	3301      	adds	r3, #1
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009a38:	69bb      	ldr	r3, [r7, #24]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3724      	adds	r7, #36	; 0x24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	40021000 	.word	0x40021000
 8009a4c:	0801885c 	.word	0x0801885c
 8009a50:	00f42400 	.word	0x00f42400
 8009a54:	007a1200 	.word	0x007a1200

08009a58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a5c:	4b03      	ldr	r3, [pc, #12]	; (8009a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20000020 	.word	0x20000020

08009a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009a74:	f7ff fff0 	bl	8009a58 <HAL_RCC_GetHCLKFreq>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	4b06      	ldr	r3, [pc, #24]	; (8009a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	0a1b      	lsrs	r3, r3, #8
 8009a80:	f003 0307 	and.w	r3, r3, #7
 8009a84:	4904      	ldr	r1, [pc, #16]	; (8009a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a86:	5ccb      	ldrb	r3, [r1, r3]
 8009a88:	f003 031f 	and.w	r3, r3, #31
 8009a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	40021000 	.word	0x40021000
 8009a98:	08018854 	.word	0x08018854

08009a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009aa0:	f7ff ffda 	bl	8009a58 <HAL_RCC_GetHCLKFreq>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	4b06      	ldr	r3, [pc, #24]	; (8009ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	0adb      	lsrs	r3, r3, #11
 8009aac:	f003 0307 	and.w	r3, r3, #7
 8009ab0:	4904      	ldr	r1, [pc, #16]	; (8009ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009ab2:	5ccb      	ldrb	r3, [r1, r3]
 8009ab4:	f003 031f 	and.w	r3, r3, #31
 8009ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	40021000 	.word	0x40021000
 8009ac4:	08018854 	.word	0x08018854

08009ac8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009ad4:	4b2a      	ldr	r3, [pc, #168]	; (8009b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009ae0:	f7ff f9a6 	bl	8008e30 <HAL_PWREx_GetVoltageRange>
 8009ae4:	6178      	str	r0, [r7, #20]
 8009ae6:	e014      	b.n	8009b12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009ae8:	4b25      	ldr	r3, [pc, #148]	; (8009b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aec:	4a24      	ldr	r2, [pc, #144]	; (8009b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009af2:	6593      	str	r3, [r2, #88]	; 0x58
 8009af4:	4b22      	ldr	r3, [pc, #136]	; (8009b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009b00:	f7ff f996 	bl	8008e30 <HAL_PWREx_GetVoltageRange>
 8009b04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009b06:	4b1e      	ldr	r3, [pc, #120]	; (8009b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0a:	4a1d      	ldr	r2, [pc, #116]	; (8009b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b18:	d10b      	bne.n	8009b32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b80      	cmp	r3, #128	; 0x80
 8009b1e:	d919      	bls.n	8009b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2ba0      	cmp	r3, #160	; 0xa0
 8009b24:	d902      	bls.n	8009b2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009b26:	2302      	movs	r3, #2
 8009b28:	613b      	str	r3, [r7, #16]
 8009b2a:	e013      	b.n	8009b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	613b      	str	r3, [r7, #16]
 8009b30:	e010      	b.n	8009b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2b80      	cmp	r3, #128	; 0x80
 8009b36:	d902      	bls.n	8009b3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009b38:	2303      	movs	r3, #3
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	e00a      	b.n	8009b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b80      	cmp	r3, #128	; 0x80
 8009b42:	d102      	bne.n	8009b4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009b44:	2302      	movs	r3, #2
 8009b46:	613b      	str	r3, [r7, #16]
 8009b48:	e004      	b.n	8009b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b70      	cmp	r3, #112	; 0x70
 8009b4e:	d101      	bne.n	8009b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009b50:	2301      	movs	r3, #1
 8009b52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009b54:	4b0b      	ldr	r3, [pc, #44]	; (8009b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f023 0207 	bic.w	r2, r3, #7
 8009b5c:	4909      	ldr	r1, [pc, #36]	; (8009b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009b64:	4b07      	ldr	r3, [pc, #28]	; (8009b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0307 	and.w	r3, r3, #7
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d001      	beq.n	8009b76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e000      	b.n	8009b78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3718      	adds	r7, #24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	40021000 	.word	0x40021000
 8009b84:	40022000 	.word	0x40022000

08009b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b90:	2300      	movs	r3, #0
 8009b92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b94:	2300      	movs	r3, #0
 8009b96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d031      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009bac:	d01a      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8009bae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009bb2:	d814      	bhi.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d009      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009bb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bbc:	d10f      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8009bbe:	4b5d      	ldr	r3, [pc, #372]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	4a5c      	ldr	r2, [pc, #368]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009bca:	e00c      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 f9ce 	bl	8009f74 <RCCEx_PLLSAI1_Config>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009bdc:	e003      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	74fb      	strb	r3, [r7, #19]
      break;
 8009be2:	e000      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8009be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009be6:	7cfb      	ldrb	r3, [r7, #19]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10b      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bec:	4b51      	ldr	r3, [pc, #324]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfa:	494e      	ldr	r1, [pc, #312]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009c02:	e001      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c04:	7cfb      	ldrb	r3, [r7, #19]
 8009c06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 809e 	beq.w	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c16:	2300      	movs	r3, #0
 8009c18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009c1a:	4b46      	ldr	r3, [pc, #280]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e000      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00d      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c30:	4b40      	ldr	r3, [pc, #256]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c34:	4a3f      	ldr	r2, [pc, #252]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8009c3c:	4b3d      	ldr	r3, [pc, #244]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c44:	60bb      	str	r3, [r7, #8]
 8009c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c4c:	4b3a      	ldr	r3, [pc, #232]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a39      	ldr	r2, [pc, #228]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c58:	f7fa fd4c 	bl	80046f4 <HAL_GetTick>
 8009c5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009c5e:	e009      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c60:	f7fa fd48 	bl	80046f4 <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d902      	bls.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	74fb      	strb	r3, [r7, #19]
        break;
 8009c72:	e005      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009c74:	4b30      	ldr	r3, [pc, #192]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0ef      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009c80:	7cfb      	ldrb	r3, [r7, #19]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d15a      	bne.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009c86:	4b2b      	ldr	r3, [pc, #172]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d01e      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d019      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009ca2:	4b24      	ldr	r3, [pc, #144]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009cae:	4b21      	ldr	r3, [pc, #132]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cb4:	4a1f      	ldr	r2, [pc, #124]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cbe:	4b1d      	ldr	r3, [pc, #116]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc4:	4a1b      	ldr	r2, [pc, #108]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009cce:	4a19      	ldr	r2, [pc, #100]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d016      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ce0:	f7fa fd08 	bl	80046f4 <HAL_GetTick>
 8009ce4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ce6:	e00b      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ce8:	f7fa fd04 	bl	80046f4 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d902      	bls.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	74fb      	strb	r3, [r7, #19]
            break;
 8009cfe:	e006      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d00:	4b0c      	ldr	r3, [pc, #48]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d06:	f003 0302 	and.w	r3, r3, #2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0ec      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8009d0e:	7cfb      	ldrb	r3, [r7, #19]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10b      	bne.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d14:	4b07      	ldr	r3, [pc, #28]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d22:	4904      	ldr	r1, [pc, #16]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009d2a:	e009      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d2c:	7cfb      	ldrb	r3, [r7, #19]
 8009d2e:	74bb      	strb	r3, [r7, #18]
 8009d30:	e006      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009d32:	bf00      	nop
 8009d34:	40021000 	.word	0x40021000
 8009d38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3c:	7cfb      	ldrb	r3, [r7, #19]
 8009d3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d40:	7c7b      	ldrb	r3, [r7, #17]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d105      	bne.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d46:	4b8a      	ldr	r3, [pc, #552]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d4a:	4a89      	ldr	r2, [pc, #548]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009d5e:	4b84      	ldr	r3, [pc, #528]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d64:	f023 0203 	bic.w	r2, r3, #3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	4980      	ldr	r1, [pc, #512]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009d80:	4b7b      	ldr	r3, [pc, #492]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d86:	f023 020c 	bic.w	r2, r3, #12
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8e:	4978      	ldr	r1, [pc, #480]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 0320 	and.w	r3, r3, #32
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009da2:	4b73      	ldr	r3, [pc, #460]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db0:	496f      	ldr	r1, [pc, #444]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009dc4:	4b6a      	ldr	r3, [pc, #424]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd2:	4967      	ldr	r1, [pc, #412]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009de6:	4b62      	ldr	r3, [pc, #392]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df4:	495e      	ldr	r1, [pc, #376]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00a      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009e08:	4b59      	ldr	r3, [pc, #356]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e16:	4956      	ldr	r1, [pc, #344]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e2a:	4b51      	ldr	r3, [pc, #324]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e38:	494d      	ldr	r1, [pc, #308]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d028      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e4c:	4b48      	ldr	r3, [pc, #288]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5a:	4945      	ldr	r1, [pc, #276]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e6a:	d106      	bne.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e6c:	4b40      	ldr	r3, [pc, #256]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	4a3f      	ldr	r2, [pc, #252]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e76:	60d3      	str	r3, [r2, #12]
 8009e78:	e011      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e82:	d10c      	bne.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3304      	adds	r3, #4
 8009e88:	2101      	movs	r1, #1
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 f872 	bl	8009f74 <RCCEx_PLLSAI1_Config>
 8009e90:	4603      	mov	r3, r0
 8009e92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009e94:	7cfb      	ldrb	r3, [r7, #19]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8009e9a:	7cfb      	ldrb	r3, [r7, #19]
 8009e9c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d028      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009eaa:	4b31      	ldr	r3, [pc, #196]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb8:	492d      	ldr	r1, [pc, #180]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ec8:	d106      	bne.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009eca:	4b29      	ldr	r3, [pc, #164]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	4a28      	ldr	r2, [pc, #160]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed4:	60d3      	str	r3, [r2, #12]
 8009ed6:	e011      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ee0:	d10c      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 f843 	bl	8009f74 <RCCEx_PLLSAI1_Config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009ef2:	7cfb      	ldrb	r3, [r7, #19]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8009ef8:	7cfb      	ldrb	r3, [r7, #19]
 8009efa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d01c      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f08:	4b19      	ldr	r3, [pc, #100]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f16:	4916      	ldr	r1, [pc, #88]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f26:	d10c      	bne.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	2102      	movs	r1, #2
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 f820 	bl	8009f74 <RCCEx_PLLSAI1_Config>
 8009f34:	4603      	mov	r3, r0
 8009f36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f38:	7cfb      	ldrb	r3, [r7, #19]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8009f3e:	7cfb      	ldrb	r3, [r7, #19]
 8009f40:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f4e:	4b08      	ldr	r3, [pc, #32]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f54:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5c:	4904      	ldr	r1, [pc, #16]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009f64:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	40021000 	.word	0x40021000

08009f74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009f82:	4b74      	ldr	r3, [pc, #464]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	f003 0303 	and.w	r3, r3, #3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d018      	beq.n	8009fc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009f8e:	4b71      	ldr	r3, [pc, #452]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f003 0203 	and.w	r2, r3, #3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d10d      	bne.n	8009fba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d009      	beq.n	8009fba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009fa6:	4b6b      	ldr	r3, [pc, #428]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	091b      	lsrs	r3, r3, #4
 8009fac:	f003 0307 	and.w	r3, r3, #7
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	685b      	ldr	r3, [r3, #4]
       ||
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d047      	beq.n	800a04a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	73fb      	strb	r3, [r7, #15]
 8009fbe:	e044      	b.n	800a04a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d018      	beq.n	8009ffa <RCCEx_PLLSAI1_Config+0x86>
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d825      	bhi.n	800a018 <RCCEx_PLLSAI1_Config+0xa4>
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d002      	beq.n	8009fd6 <RCCEx_PLLSAI1_Config+0x62>
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d009      	beq.n	8009fe8 <RCCEx_PLLSAI1_Config+0x74>
 8009fd4:	e020      	b.n	800a018 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009fd6:	4b5f      	ldr	r3, [pc, #380]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d11d      	bne.n	800a01e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009fe6:	e01a      	b.n	800a01e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009fe8:	4b5a      	ldr	r3, [pc, #360]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d116      	bne.n	800a022 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ff8:	e013      	b.n	800a022 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009ffa:	4b56      	ldr	r3, [pc, #344]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10f      	bne.n	800a026 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a006:	4b53      	ldr	r3, [pc, #332]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d109      	bne.n	800a026 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a016:	e006      	b.n	800a026 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	73fb      	strb	r3, [r7, #15]
      break;
 800a01c:	e004      	b.n	800a028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a01e:	bf00      	nop
 800a020:	e002      	b.n	800a028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a022:	bf00      	nop
 800a024:	e000      	b.n	800a028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a026:	bf00      	nop
    }

    if(status == HAL_OK)
 800a028:	7bfb      	ldrb	r3, [r7, #15]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10d      	bne.n	800a04a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a02e:	4b49      	ldr	r3, [pc, #292]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6819      	ldr	r1, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	3b01      	subs	r3, #1
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	430b      	orrs	r3, r1
 800a044:	4943      	ldr	r1, [pc, #268]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a046:	4313      	orrs	r3, r2
 800a048:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d17c      	bne.n	800a14a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a050:	4b40      	ldr	r3, [pc, #256]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a3f      	ldr	r2, [pc, #252]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a056:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a05a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a05c:	f7fa fb4a 	bl	80046f4 <HAL_GetTick>
 800a060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a062:	e009      	b.n	800a078 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a064:	f7fa fb46 	bl	80046f4 <HAL_GetTick>
 800a068:	4602      	mov	r2, r0
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d902      	bls.n	800a078 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	73fb      	strb	r3, [r7, #15]
        break;
 800a076:	e005      	b.n	800a084 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a078:	4b36      	ldr	r3, [pc, #216]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1ef      	bne.n	800a064 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d15f      	bne.n	800a14a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d110      	bne.n	800a0b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a090:	4b30      	ldr	r3, [pc, #192]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	6892      	ldr	r2, [r2, #8]
 800a0a0:	0211      	lsls	r1, r2, #8
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	68d2      	ldr	r2, [r2, #12]
 800a0a6:	06d2      	lsls	r2, r2, #27
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	492a      	ldr	r1, [pc, #168]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	610b      	str	r3, [r1, #16]
 800a0b0:	e027      	b.n	800a102 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d112      	bne.n	800a0de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a0b8:	4b26      	ldr	r3, [pc, #152]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a0c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	6892      	ldr	r2, [r2, #8]
 800a0c8:	0211      	lsls	r1, r2, #8
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	6912      	ldr	r2, [r2, #16]
 800a0ce:	0852      	lsrs	r2, r2, #1
 800a0d0:	3a01      	subs	r2, #1
 800a0d2:	0552      	lsls	r2, r2, #21
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	491f      	ldr	r1, [pc, #124]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	610b      	str	r3, [r1, #16]
 800a0dc:	e011      	b.n	800a102 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a0de:	4b1d      	ldr	r3, [pc, #116]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a0e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6892      	ldr	r2, [r2, #8]
 800a0ee:	0211      	lsls	r1, r2, #8
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	6952      	ldr	r2, [r2, #20]
 800a0f4:	0852      	lsrs	r2, r2, #1
 800a0f6:	3a01      	subs	r2, #1
 800a0f8:	0652      	lsls	r2, r2, #25
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	4915      	ldr	r1, [pc, #84]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a102:	4b14      	ldr	r3, [pc, #80]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a13      	ldr	r2, [pc, #76]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a10c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a10e:	f7fa faf1 	bl	80046f4 <HAL_GetTick>
 800a112:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a114:	e009      	b.n	800a12a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a116:	f7fa faed 	bl	80046f4 <HAL_GetTick>
 800a11a:	4602      	mov	r2, r0
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	2b02      	cmp	r3, #2
 800a122:	d902      	bls.n	800a12a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	73fb      	strb	r3, [r7, #15]
          break;
 800a128:	e005      	b.n	800a136 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a12a:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0ef      	beq.n	800a116 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a13e:	691a      	ldr	r2, [r3, #16]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	4903      	ldr	r1, [pc, #12]	; (800a154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a146:	4313      	orrs	r3, r2
 800a148:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	40021000 	.word	0x40021000

0800a158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e049      	b.n	800a1fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	d106      	bne.n	800a184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7fa f876 	bl	8004270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3304      	adds	r3, #4
 800a194:	4619      	mov	r1, r3
 800a196:	4610      	mov	r0, r2
 800a198:	f000 fa80 	bl	800a69c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a216:	b2db      	uxtb	r3, r3
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d001      	beq.n	800a220 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e033      	b.n	800a288 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2202      	movs	r2, #2
 800a224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a19      	ldr	r2, [pc, #100]	; (800a294 <HAL_TIM_Base_Start+0x8c>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d009      	beq.n	800a246 <HAL_TIM_Base_Start+0x3e>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a23a:	d004      	beq.n	800a246 <HAL_TIM_Base_Start+0x3e>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a15      	ldr	r2, [pc, #84]	; (800a298 <HAL_TIM_Base_Start+0x90>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d115      	bne.n	800a272 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	4b13      	ldr	r3, [pc, #76]	; (800a29c <HAL_TIM_Base_Start+0x94>)
 800a24e:	4013      	ands	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b06      	cmp	r3, #6
 800a256:	d015      	beq.n	800a284 <HAL_TIM_Base_Start+0x7c>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a25e:	d011      	beq.n	800a284 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f042 0201 	orr.w	r2, r2, #1
 800a26e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a270:	e008      	b.n	800a284 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f042 0201 	orr.w	r2, r2, #1
 800a280:	601a      	str	r2, [r3, #0]
 800a282:	e000      	b.n	800a286 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a284:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	40012c00 	.word	0x40012c00
 800a298:	40014000 	.word	0x40014000
 800a29c:	00010007 	.word	0x00010007

0800a2a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d020      	beq.n	800a304 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f003 0302 	and.w	r3, r3, #2
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d01b      	beq.n	800a304 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f06f 0202 	mvn.w	r2, #2
 800a2d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	f003 0303 	and.w	r3, r3, #3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f9b7 	bl	800a65e <HAL_TIM_IC_CaptureCallback>
 800a2f0:	e005      	b.n	800a2fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f9a9 	bl	800a64a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f9ba 	bl	800a672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d020      	beq.n	800a350 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f003 0304 	and.w	r3, r3, #4
 800a314:	2b00      	cmp	r3, #0
 800a316:	d01b      	beq.n	800a350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f06f 0204 	mvn.w	r2, #4
 800a320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2202      	movs	r2, #2
 800a326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f991 	bl	800a65e <HAL_TIM_IC_CaptureCallback>
 800a33c:	e005      	b.n	800a34a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f983 	bl	800a64a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f994 	bl	800a672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	f003 0308 	and.w	r3, r3, #8
 800a356:	2b00      	cmp	r3, #0
 800a358:	d020      	beq.n	800a39c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f003 0308 	and.w	r3, r3, #8
 800a360:	2b00      	cmp	r3, #0
 800a362:	d01b      	beq.n	800a39c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f06f 0208 	mvn.w	r2, #8
 800a36c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2204      	movs	r2, #4
 800a372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	69db      	ldr	r3, [r3, #28]
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f96b 	bl	800a65e <HAL_TIM_IC_CaptureCallback>
 800a388:	e005      	b.n	800a396 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f95d 	bl	800a64a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f96e 	bl	800a672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	f003 0310 	and.w	r3, r3, #16
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d020      	beq.n	800a3e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f003 0310 	and.w	r3, r3, #16
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01b      	beq.n	800a3e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f06f 0210 	mvn.w	r2, #16
 800a3b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2208      	movs	r2, #8
 800a3be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f945 	bl	800a65e <HAL_TIM_IC_CaptureCallback>
 800a3d4:	e005      	b.n	800a3e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f937 	bl	800a64a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f948 	bl	800a672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00c      	beq.n	800a40c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f003 0301 	and.w	r3, r3, #1
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d007      	beq.n	800a40c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f06f 0201 	mvn.w	r2, #1
 800a404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f915 	bl	800a636 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00c      	beq.n	800a430 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d007      	beq.n	800a430 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 faa4 	bl	800a978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00c      	beq.n	800a454 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a440:	2b00      	cmp	r3, #0
 800a442:	d007      	beq.n	800a454 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a44c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fa9c 	bl	800a98c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00c      	beq.n	800a478 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a464:	2b00      	cmp	r3, #0
 800a466:	d007      	beq.n	800a478 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f907 	bl	800a686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00c      	beq.n	800a49c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f003 0320 	and.w	r3, r3, #32
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d007      	beq.n	800a49c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f06f 0220 	mvn.w	r2, #32
 800a494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 fa64 	bl	800a964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a49c:	bf00      	nop
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d101      	bne.n	800a4c0 <HAL_TIM_ConfigClockSource+0x1c>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	e0b6      	b.n	800a62e <HAL_TIM_ConfigClockSource+0x18a>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a4e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4fc:	d03e      	beq.n	800a57c <HAL_TIM_ConfigClockSource+0xd8>
 800a4fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a502:	f200 8087 	bhi.w	800a614 <HAL_TIM_ConfigClockSource+0x170>
 800a506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a50a:	f000 8086 	beq.w	800a61a <HAL_TIM_ConfigClockSource+0x176>
 800a50e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a512:	d87f      	bhi.n	800a614 <HAL_TIM_ConfigClockSource+0x170>
 800a514:	2b70      	cmp	r3, #112	; 0x70
 800a516:	d01a      	beq.n	800a54e <HAL_TIM_ConfigClockSource+0xaa>
 800a518:	2b70      	cmp	r3, #112	; 0x70
 800a51a:	d87b      	bhi.n	800a614 <HAL_TIM_ConfigClockSource+0x170>
 800a51c:	2b60      	cmp	r3, #96	; 0x60
 800a51e:	d050      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x11e>
 800a520:	2b60      	cmp	r3, #96	; 0x60
 800a522:	d877      	bhi.n	800a614 <HAL_TIM_ConfigClockSource+0x170>
 800a524:	2b50      	cmp	r3, #80	; 0x50
 800a526:	d03c      	beq.n	800a5a2 <HAL_TIM_ConfigClockSource+0xfe>
 800a528:	2b50      	cmp	r3, #80	; 0x50
 800a52a:	d873      	bhi.n	800a614 <HAL_TIM_ConfigClockSource+0x170>
 800a52c:	2b40      	cmp	r3, #64	; 0x40
 800a52e:	d058      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x13e>
 800a530:	2b40      	cmp	r3, #64	; 0x40
 800a532:	d86f      	bhi.n	800a614 <HAL_TIM_ConfigClockSource+0x170>
 800a534:	2b30      	cmp	r3, #48	; 0x30
 800a536:	d064      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x15e>
 800a538:	2b30      	cmp	r3, #48	; 0x30
 800a53a:	d86b      	bhi.n	800a614 <HAL_TIM_ConfigClockSource+0x170>
 800a53c:	2b20      	cmp	r3, #32
 800a53e:	d060      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x15e>
 800a540:	2b20      	cmp	r3, #32
 800a542:	d867      	bhi.n	800a614 <HAL_TIM_ConfigClockSource+0x170>
 800a544:	2b00      	cmp	r3, #0
 800a546:	d05c      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x15e>
 800a548:	2b10      	cmp	r3, #16
 800a54a:	d05a      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x15e>
 800a54c:	e062      	b.n	800a614 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a55e:	f000 f97b 	bl	800a858 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	609a      	str	r2, [r3, #8]
      break;
 800a57a:	e04f      	b.n	800a61c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a58c:	f000 f964 	bl	800a858 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689a      	ldr	r2, [r3, #8]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a59e:	609a      	str	r2, [r3, #8]
      break;
 800a5a0:	e03c      	b.n	800a61c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	f000 f8d8 	bl	800a764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2150      	movs	r1, #80	; 0x50
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 f931 	bl	800a822 <TIM_ITRx_SetConfig>
      break;
 800a5c0:	e02c      	b.n	800a61c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f000 f8f7 	bl	800a7c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2160      	movs	r1, #96	; 0x60
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 f921 	bl	800a822 <TIM_ITRx_SetConfig>
      break;
 800a5e0:	e01c      	b.n	800a61c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f000 f8b8 	bl	800a764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2140      	movs	r1, #64	; 0x40
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 f911 	bl	800a822 <TIM_ITRx_SetConfig>
      break;
 800a600:	e00c      	b.n	800a61c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4619      	mov	r1, r3
 800a60c:	4610      	mov	r0, r2
 800a60e:	f000 f908 	bl	800a822 <TIM_ITRx_SetConfig>
      break;
 800a612:	e003      	b.n	800a61c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	73fb      	strb	r3, [r7, #15]
      break;
 800a618:	e000      	b.n	800a61c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a61a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a64a:	b480      	push	{r7}
 800a64c:	b083      	sub	sp, #12
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a652:	bf00      	nop
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a67a:	bf00      	nop
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a68e:	bf00      	nop
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
	...

0800a69c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a2a      	ldr	r2, [pc, #168]	; (800a758 <TIM_Base_SetConfig+0xbc>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d003      	beq.n	800a6bc <TIM_Base_SetConfig+0x20>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ba:	d108      	bne.n	800a6ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a21      	ldr	r2, [pc, #132]	; (800a758 <TIM_Base_SetConfig+0xbc>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d00b      	beq.n	800a6ee <TIM_Base_SetConfig+0x52>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6dc:	d007      	beq.n	800a6ee <TIM_Base_SetConfig+0x52>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a1e      	ldr	r2, [pc, #120]	; (800a75c <TIM_Base_SetConfig+0xc0>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d003      	beq.n	800a6ee <TIM_Base_SetConfig+0x52>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a1d      	ldr	r2, [pc, #116]	; (800a760 <TIM_Base_SetConfig+0xc4>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d108      	bne.n	800a700 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a0c      	ldr	r2, [pc, #48]	; (800a758 <TIM_Base_SetConfig+0xbc>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d007      	beq.n	800a73c <TIM_Base_SetConfig+0xa0>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a0b      	ldr	r2, [pc, #44]	; (800a75c <TIM_Base_SetConfig+0xc0>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d003      	beq.n	800a73c <TIM_Base_SetConfig+0xa0>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a0a      	ldr	r2, [pc, #40]	; (800a760 <TIM_Base_SetConfig+0xc4>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d103      	bne.n	800a744 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	691a      	ldr	r2, [r3, #16]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	615a      	str	r2, [r3, #20]
}
 800a74a:	bf00      	nop
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	40012c00 	.word	0x40012c00
 800a75c:	40014000 	.word	0x40014000
 800a760:	40014400 	.word	0x40014400

0800a764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	f023 0201 	bic.w	r2, r3, #1
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a78e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	011b      	lsls	r3, r3, #4
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	4313      	orrs	r3, r2
 800a798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f023 030a 	bic.w	r3, r3, #10
 800a7a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	621a      	str	r2, [r3, #32]
}
 800a7b6:	bf00      	nop
 800a7b8:	371c      	adds	r7, #28
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b087      	sub	sp, #28
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	60f8      	str	r0, [r7, #12]
 800a7ca:	60b9      	str	r1, [r7, #8]
 800a7cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	f023 0210 	bic.w	r2, r3, #16
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	031b      	lsls	r3, r3, #12
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	011b      	lsls	r3, r3, #4
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	4313      	orrs	r3, r2
 800a808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	621a      	str	r2, [r3, #32]
}
 800a816:	bf00      	nop
 800a818:	371c      	adds	r7, #28
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a822:	b480      	push	{r7}
 800a824:	b085      	sub	sp, #20
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	4313      	orrs	r3, r2
 800a840:	f043 0307 	orr.w	r3, r3, #7
 800a844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	609a      	str	r2, [r3, #8]
}
 800a84c:	bf00      	nop
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a858:	b480      	push	{r7}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	021a      	lsls	r2, r3, #8
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	431a      	orrs	r2, r3
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	4313      	orrs	r3, r2
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	4313      	orrs	r3, r2
 800a884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	609a      	str	r2, [r3, #8]
}
 800a88c:	bf00      	nop
 800a88e:	371c      	adds	r7, #28
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e04f      	b.n	800a950 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a21      	ldr	r2, [pc, #132]	; (800a95c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d108      	bne.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a8e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a14      	ldr	r2, [pc, #80]	; (800a95c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d009      	beq.n	800a924 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a918:	d004      	beq.n	800a924 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a10      	ldr	r2, [pc, #64]	; (800a960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d10c      	bne.n	800a93e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a92a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	4313      	orrs	r3, r2
 800a934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	40012c00 	.word	0x40012c00
 800a960:	40014000 	.word	0x40014000

0800a964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e040      	b.n	800aa34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d106      	bne.n	800a9c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7f9 fba4 	bl	8004110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2224      	movs	r2, #36	; 0x24
 800a9cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f022 0201 	bic.w	r2, r2, #1
 800a9dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 ff4c 	bl	800b884 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fd1d 	bl	800b42c <UART_SetConfig>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d101      	bne.n	800a9fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e01b      	b.n	800aa34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f042 0201 	orr.w	r2, r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 ffcb 	bl	800b9c8 <UART_CheckIdleState>
 800aa32:	4603      	mov	r3, r0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e02f      	b.n	800aaae <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2224      	movs	r2, #36	; 0x24
 800aa52:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f022 0201 	bic.w	r2, r2, #1
 800aa62:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2200      	movs	r2, #0
 800aa72:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7f9 fbd3 	bl	8004228 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b08b      	sub	sp, #44	; 0x2c
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4613      	mov	r3, r2
 800aac4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaca:	2b20      	cmp	r3, #32
 800aacc:	d147      	bne.n	800ab5e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <HAL_UART_Transmit_IT+0x22>
 800aad4:	88fb      	ldrh	r3, [r7, #6]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e040      	b.n	800ab60 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	88fa      	ldrh	r2, [r7, #6]
 800aae8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	88fa      	ldrh	r2, [r7, #6]
 800aaf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2221      	movs	r2, #33	; 0x21
 800ab06:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab10:	d107      	bne.n	800ab22 <HAL_UART_Transmit_IT+0x6a>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d103      	bne.n	800ab22 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	4a13      	ldr	r2, [pc, #76]	; (800ab6c <HAL_UART_Transmit_IT+0xb4>)
 800ab1e:	66da      	str	r2, [r3, #108]	; 0x6c
 800ab20:	e002      	b.n	800ab28 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	4a12      	ldr	r2, [pc, #72]	; (800ab70 <HAL_UART_Transmit_IT+0xb8>)
 800ab26:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	613b      	str	r3, [r7, #16]
   return(result);
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab3c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	623b      	str	r3, [r7, #32]
 800ab48:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	69f9      	ldr	r1, [r7, #28]
 800ab4c:	6a3a      	ldr	r2, [r7, #32]
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e6      	bne.n	800ab28 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e000      	b.n	800ab60 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800ab5e:	2302      	movs	r3, #2
  }
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	372c      	adds	r7, #44	; 0x2c
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	0800c109 	.word	0x0800c109
 800ab70:	0800c051 	.word	0x0800c051

0800ab74 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08a      	sub	sp, #40	; 0x28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	d137      	bne.n	800abfc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <HAL_UART_Receive_DMA+0x24>
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e030      	b.n	800abfe <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a18      	ldr	r2, [pc, #96]	; (800ac08 <HAL_UART_Receive_DMA+0x94>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d01f      	beq.n	800abec <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d018      	beq.n	800abec <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	e853 3f00 	ldrex	r3, [r3]
 800abc6:	613b      	str	r3, [r7, #16]
   return(result);
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800abce:	627b      	str	r3, [r7, #36]	; 0x24
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	461a      	mov	r2, r3
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	623b      	str	r3, [r7, #32]
 800abda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abdc:	69f9      	ldr	r1, [r7, #28]
 800abde:	6a3a      	ldr	r2, [r7, #32]
 800abe0:	e841 2300 	strex	r3, r2, [r1]
 800abe4:	61bb      	str	r3, [r7, #24]
   return(result);
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1e6      	bne.n	800abba <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800abec:	88fb      	ldrh	r3, [r7, #6]
 800abee:	461a      	mov	r2, r3
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 fff8 	bl	800bbe8 <UART_Start_Receive_DMA>
 800abf8:	4603      	mov	r3, r0
 800abfa:	e000      	b.n	800abfe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800abfc:	2302      	movs	r3, #2
  }
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3728      	adds	r7, #40	; 0x28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	40008000 	.word	0x40008000

0800ac0c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b0a0      	sub	sp, #128	; 0x80
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac1c:	e853 3f00 	ldrex	r3, [r3]
 800ac20:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ac22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac24:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800ac28:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac32:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac34:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac36:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ac38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac3a:	e841 2300 	strex	r3, r2, [r1]
 800ac3e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ac40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1e6      	bne.n	800ac14 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac50:	e853 3f00 	ldrex	r3, [r3]
 800ac54:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ac56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac58:	f023 0301 	bic.w	r3, r3, #1
 800ac5c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3308      	adds	r3, #8
 800ac64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ac66:	657a      	str	r2, [r7, #84]	; 0x54
 800ac68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac6e:	e841 2300 	strex	r3, r2, [r1]
 800ac72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ac74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1e5      	bne.n	800ac46 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d118      	bne.n	800acb4 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8a:	e853 3f00 	ldrex	r3, [r3]
 800ac8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	f023 0310 	bic.w	r3, r3, #16
 800ac96:	677b      	str	r3, [r7, #116]	; 0x74
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aca0:	643b      	str	r3, [r7, #64]	; 0x40
 800aca2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aca8:	e841 2300 	strex	r3, r2, [r1]
 800acac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e6      	bne.n	800ac82 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acbe:	2b80      	cmp	r3, #128	; 0x80
 800acc0:	d137      	bne.n	800ad32 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3308      	adds	r3, #8
 800acc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	61fb      	str	r3, [r7, #28]
   return(result);
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acd8:	673b      	str	r3, [r7, #112]	; 0x70
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3308      	adds	r3, #8
 800ace0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ace2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ace4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ace8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e5      	bne.n	800acc2 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d019      	beq.n	800ad32 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad02:	2200      	movs	r2, #0
 800ad04:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fb fab0 	bl	8006270 <HAL_DMA_Abort>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00d      	beq.n	800ad32 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fb fbd6 	bl	80064cc <HAL_DMA_GetError>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b20      	cmp	r3, #32
 800ad24:	d105      	bne.n	800ad32 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2210      	movs	r2, #16
 800ad2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e063      	b.n	800adfa <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3c:	2b40      	cmp	r3, #64	; 0x40
 800ad3e:	d137      	bne.n	800adb0 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3308      	adds	r3, #8
 800ad46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	e853 3f00 	ldrex	r3, [r3]
 800ad4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad56:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3308      	adds	r3, #8
 800ad5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad60:	61ba      	str	r2, [r7, #24]
 800ad62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	6979      	ldr	r1, [r7, #20]
 800ad66:	69ba      	ldr	r2, [r7, #24]
 800ad68:	e841 2300 	strex	r3, r2, [r1]
 800ad6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e5      	bne.n	800ad40 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d019      	beq.n	800adb0 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad80:	2200      	movs	r2, #0
 800ad82:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fb fa71 	bl	8006270 <HAL_DMA_Abort>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00d      	beq.n	800adb0 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fb fb97 	bl	80064cc <HAL_DMA_GetError>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b20      	cmp	r3, #32
 800ada2:	d105      	bne.n	800adb0 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2210      	movs	r2, #16
 800ada8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	e024      	b.n	800adfa <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	220f      	movs	r2, #15
 800adc6:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	8b1b      	ldrh	r3, [r3, #24]
 800adce:	b29a      	uxth	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f042 0208 	orr.w	r2, r2, #8
 800add8:	b292      	uxth	r2, r2
 800adda:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2220      	movs	r2, #32
 800ade0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2220      	movs	r2, #32
 800ade6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3780      	adds	r7, #128	; 0x80
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b0ba      	sub	sp, #232	; 0xe8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	69db      	ldr	r3, [r3, #28]
 800ae12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ae2e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ae32:	4013      	ands	r3, r2
 800ae34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ae38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d115      	bne.n	800ae6c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae44:	f003 0320 	and.w	r3, r3, #32
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00f      	beq.n	800ae6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae50:	f003 0320 	and.w	r3, r3, #32
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d009      	beq.n	800ae6c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 82ae 	beq.w	800b3be <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	4798      	blx	r3
      }
      return;
 800ae6a:	e2a8      	b.n	800b3be <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ae6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 8117 	beq.w	800b0a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ae76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d106      	bne.n	800ae90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ae82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ae86:	4b85      	ldr	r3, [pc, #532]	; (800b09c <HAL_UART_IRQHandler+0x298>)
 800ae88:	4013      	ands	r3, r2
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 810a 	beq.w	800b0a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d011      	beq.n	800aec0 <HAL_UART_IRQHandler+0xbc>
 800ae9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00b      	beq.n	800aec0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2201      	movs	r2, #1
 800aeae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aeb6:	f043 0201 	orr.w	r2, r3, #1
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec4:	f003 0302 	and.w	r3, r3, #2
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d011      	beq.n	800aef0 <HAL_UART_IRQHandler+0xec>
 800aecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00b      	beq.n	800aef0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2202      	movs	r2, #2
 800aede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aee6:	f043 0204 	orr.w	r2, r3, #4
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aef4:	f003 0304 	and.w	r3, r3, #4
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d011      	beq.n	800af20 <HAL_UART_IRQHandler+0x11c>
 800aefc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00b      	beq.n	800af20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2204      	movs	r2, #4
 800af0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af16:	f043 0202 	orr.w	r2, r3, #2
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800af20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af24:	f003 0308 	and.w	r3, r3, #8
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d017      	beq.n	800af5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af30:	f003 0320 	and.w	r3, r3, #32
 800af34:	2b00      	cmp	r3, #0
 800af36:	d105      	bne.n	800af44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800af38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00b      	beq.n	800af5c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2208      	movs	r2, #8
 800af4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af52:	f043 0208 	orr.w	r2, r3, #8
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af64:	2b00      	cmp	r3, #0
 800af66:	d012      	beq.n	800af8e <HAL_UART_IRQHandler+0x18a>
 800af68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00c      	beq.n	800af8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af84:	f043 0220 	orr.w	r2, r3, #32
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 8214 	beq.w	800b3c2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800af9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af9e:	f003 0320 	and.w	r3, r3, #32
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00d      	beq.n	800afc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800afa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afaa:	f003 0320 	and.w	r3, r3, #32
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d007      	beq.n	800afc2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d003      	beq.n	800afc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd6:	2b40      	cmp	r3, #64	; 0x40
 800afd8:	d005      	beq.n	800afe6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800afda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d04f      	beq.n	800b086 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fec4 	bl	800bd74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff6:	2b40      	cmp	r3, #64	; 0x40
 800aff8:	d141      	bne.n	800b07e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	3308      	adds	r3, #8
 800b000:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b008:	e853 3f00 	ldrex	r3, [r3]
 800b00c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3308      	adds	r3, #8
 800b022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b026:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b02a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b036:	e841 2300 	strex	r3, r2, [r1]
 800b03a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b03e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1d9      	bne.n	800affa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d013      	beq.n	800b076 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b052:	4a13      	ldr	r2, [pc, #76]	; (800b0a0 <HAL_UART_IRQHandler+0x29c>)
 800b054:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fb f946 	bl	80062ec <HAL_DMA_Abort_IT>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d017      	beq.n	800b096 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b070:	4610      	mov	r0, r2
 800b072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b074:	e00f      	b.n	800b096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f9c2 	bl	800b400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b07c:	e00b      	b.n	800b096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f9be 	bl	800b400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b084:	e007      	b.n	800b096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f9ba 	bl	800b400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b094:	e195      	b.n	800b3c2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b096:	bf00      	nop
    return;
 800b098:	e193      	b.n	800b3c2 <HAL_UART_IRQHandler+0x5be>
 800b09a:	bf00      	nop
 800b09c:	04000120 	.word	0x04000120
 800b0a0:	0800c025 	.word	0x0800c025

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	f040 814e 	bne.w	800b34a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b2:	f003 0310 	and.w	r3, r3, #16
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f000 8147 	beq.w	800b34a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b0bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0c0:	f003 0310 	and.w	r3, r3, #16
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f000 8140 	beq.w	800b34a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2210      	movs	r2, #16
 800b0d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0dc:	2b40      	cmp	r3, #64	; 0x40
 800b0de:	f040 80b8 	bne.w	800b252 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 8167 	beq.w	800b3c6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b0fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b102:	429a      	cmp	r2, r3
 800b104:	f080 815f 	bcs.w	800b3c6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b10e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 0320 	and.w	r3, r3, #32
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f040 8086 	bne.w	800b230 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b13c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	461a      	mov	r2, r3
 800b14a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b14e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b152:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b156:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b15a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b15e:	e841 2300 	strex	r3, r2, [r1]
 800b162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1da      	bne.n	800b124 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3308      	adds	r3, #8
 800b174:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b178:	e853 3f00 	ldrex	r3, [r3]
 800b17c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b17e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b180:	f023 0301 	bic.w	r3, r3, #1
 800b184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	3308      	adds	r3, #8
 800b18e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b192:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b196:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b19a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b1a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1e1      	bne.n	800b16e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3308      	adds	r3, #8
 800b1b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1b4:	e853 3f00 	ldrex	r3, [r3]
 800b1b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b1ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b1ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b1d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b1d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b1dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e3      	bne.n	800b1aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f8:	e853 3f00 	ldrex	r3, [r3]
 800b1fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b200:	f023 0310 	bic.w	r3, r3, #16
 800b204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	461a      	mov	r2, r3
 800b20e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b212:	65bb      	str	r3, [r7, #88]	; 0x58
 800b214:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b216:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b21a:	e841 2300 	strex	r3, r2, [r1]
 800b21e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1e4      	bne.n	800b1f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fb f820 	bl	8006270 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2202      	movs	r2, #2
 800b234:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b242:	b29b      	uxth	r3, r3
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	b29b      	uxth	r3, r3
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f8e2 	bl	800b414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b250:	e0b9      	b.n	800b3c6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b25e:	b29b      	uxth	r3, r3
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f000 80ab 	beq.w	800b3ca <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800b274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 80a6 	beq.w	800b3ca <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b292:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2a0:	647b      	str	r3, [r7, #68]	; 0x44
 800b2a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e4      	bne.n	800b27e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	e853 3f00 	ldrex	r3, [r3]
 800b2c2:	623b      	str	r3, [r7, #32]
   return(result);
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	f023 0301 	bic.w	r3, r3, #1
 800b2ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3308      	adds	r3, #8
 800b2d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b2d8:	633a      	str	r2, [r7, #48]	; 0x30
 800b2da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e0:	e841 2300 	strex	r3, r2, [r1]
 800b2e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e3      	bne.n	800b2b4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2220      	movs	r2, #32
 800b2f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f023 0310 	bic.w	r3, r3, #16
 800b314:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	461a      	mov	r2, r3
 800b31e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b322:	61fb      	str	r3, [r7, #28]
 800b324:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b326:	69b9      	ldr	r1, [r7, #24]
 800b328:	69fa      	ldr	r2, [r7, #28]
 800b32a:	e841 2300 	strex	r3, r2, [r1]
 800b32e:	617b      	str	r3, [r7, #20]
   return(result);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1e4      	bne.n	800b300 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2202      	movs	r2, #2
 800b33a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b33c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f866 	bl	800b414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b348:	e03f      	b.n	800b3ca <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b34e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00e      	beq.n	800b374 <HAL_UART_IRQHandler+0x570>
 800b356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b35a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d008      	beq.n	800b374 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b36a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 ff55 	bl	800c21c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b372:	e02d      	b.n	800b3d0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00e      	beq.n	800b39e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d008      	beq.n	800b39e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b390:	2b00      	cmp	r3, #0
 800b392:	d01c      	beq.n	800b3ce <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	4798      	blx	r3
    }
    return;
 800b39c:	e017      	b.n	800b3ce <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d012      	beq.n	800b3d0 <HAL_UART_IRQHandler+0x5cc>
 800b3aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00c      	beq.n	800b3d0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 ff06 	bl	800c1c8 <UART_EndTransmit_IT>
    return;
 800b3bc:	e008      	b.n	800b3d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b3be:	bf00      	nop
 800b3c0:	e006      	b.n	800b3d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800b3c2:	bf00      	nop
 800b3c4:	e004      	b.n	800b3d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b3c6:	bf00      	nop
 800b3c8:	e002      	b.n	800b3d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b3ca:	bf00      	nop
 800b3cc:	e000      	b.n	800b3d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800b3ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b3d0:	37e8      	adds	r7, #232	; 0xe8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop

0800b3d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b42c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b430:	b08a      	sub	sp, #40	; 0x28
 800b432:	af00      	add	r7, sp, #0
 800b434:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	689a      	ldr	r2, [r3, #8]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	431a      	orrs	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	431a      	orrs	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	69db      	ldr	r3, [r3, #28]
 800b450:	4313      	orrs	r3, r2
 800b452:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	4bb4      	ldr	r3, [pc, #720]	; (800b72c <UART_SetConfig+0x300>)
 800b45c:	4013      	ands	r3, r2
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	6812      	ldr	r2, [r2, #0]
 800b462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b464:	430b      	orrs	r3, r1
 800b466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	68da      	ldr	r2, [r3, #12]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	430a      	orrs	r2, r1
 800b47c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4aa9      	ldr	r2, [pc, #676]	; (800b730 <UART_SetConfig+0x304>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d004      	beq.n	800b498 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b494:	4313      	orrs	r3, r2
 800b496:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4aa0      	ldr	r2, [pc, #640]	; (800b734 <UART_SetConfig+0x308>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d126      	bne.n	800b504 <UART_SetConfig+0xd8>
 800b4b6:	4ba0      	ldr	r3, [pc, #640]	; (800b738 <UART_SetConfig+0x30c>)
 800b4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4bc:	f003 0303 	and.w	r3, r3, #3
 800b4c0:	2b03      	cmp	r3, #3
 800b4c2:	d81b      	bhi.n	800b4fc <UART_SetConfig+0xd0>
 800b4c4:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <UART_SetConfig+0xa0>)
 800b4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ca:	bf00      	nop
 800b4cc:	0800b4dd 	.word	0x0800b4dd
 800b4d0:	0800b4ed 	.word	0x0800b4ed
 800b4d4:	0800b4e5 	.word	0x0800b4e5
 800b4d8:	0800b4f5 	.word	0x0800b4f5
 800b4dc:	2301      	movs	r3, #1
 800b4de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4e2:	e080      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4ea:	e07c      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b4ec:	2304      	movs	r3, #4
 800b4ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4f2:	e078      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b4f4:	2308      	movs	r3, #8
 800b4f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4fa:	e074      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b4fc:	2310      	movs	r3, #16
 800b4fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b502:	e070      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a8c      	ldr	r2, [pc, #560]	; (800b73c <UART_SetConfig+0x310>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d138      	bne.n	800b580 <UART_SetConfig+0x154>
 800b50e:	4b8a      	ldr	r3, [pc, #552]	; (800b738 <UART_SetConfig+0x30c>)
 800b510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b514:	f003 030c 	and.w	r3, r3, #12
 800b518:	2b0c      	cmp	r3, #12
 800b51a:	d82d      	bhi.n	800b578 <UART_SetConfig+0x14c>
 800b51c:	a201      	add	r2, pc, #4	; (adr r2, 800b524 <UART_SetConfig+0xf8>)
 800b51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b522:	bf00      	nop
 800b524:	0800b559 	.word	0x0800b559
 800b528:	0800b579 	.word	0x0800b579
 800b52c:	0800b579 	.word	0x0800b579
 800b530:	0800b579 	.word	0x0800b579
 800b534:	0800b569 	.word	0x0800b569
 800b538:	0800b579 	.word	0x0800b579
 800b53c:	0800b579 	.word	0x0800b579
 800b540:	0800b579 	.word	0x0800b579
 800b544:	0800b561 	.word	0x0800b561
 800b548:	0800b579 	.word	0x0800b579
 800b54c:	0800b579 	.word	0x0800b579
 800b550:	0800b579 	.word	0x0800b579
 800b554:	0800b571 	.word	0x0800b571
 800b558:	2300      	movs	r3, #0
 800b55a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b55e:	e042      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b560:	2302      	movs	r3, #2
 800b562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b566:	e03e      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b568:	2304      	movs	r3, #4
 800b56a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b56e:	e03a      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b570:	2308      	movs	r3, #8
 800b572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b576:	e036      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b578:	2310      	movs	r3, #16
 800b57a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b57e:	e032      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a6a      	ldr	r2, [pc, #424]	; (800b730 <UART_SetConfig+0x304>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d12a      	bne.n	800b5e0 <UART_SetConfig+0x1b4>
 800b58a:	4b6b      	ldr	r3, [pc, #428]	; (800b738 <UART_SetConfig+0x30c>)
 800b58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b598:	d01a      	beq.n	800b5d0 <UART_SetConfig+0x1a4>
 800b59a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b59e:	d81b      	bhi.n	800b5d8 <UART_SetConfig+0x1ac>
 800b5a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5a4:	d00c      	beq.n	800b5c0 <UART_SetConfig+0x194>
 800b5a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5aa:	d815      	bhi.n	800b5d8 <UART_SetConfig+0x1ac>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <UART_SetConfig+0x18c>
 800b5b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5b4:	d008      	beq.n	800b5c8 <UART_SetConfig+0x19c>
 800b5b6:	e00f      	b.n	800b5d8 <UART_SetConfig+0x1ac>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5be:	e012      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5c6:	e00e      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5ce:	e00a      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b5d0:	2308      	movs	r3, #8
 800b5d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5d6:	e006      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b5d8:	2310      	movs	r3, #16
 800b5da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5de:	e002      	b.n	800b5e6 <UART_SetConfig+0x1ba>
 800b5e0:	2310      	movs	r3, #16
 800b5e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a51      	ldr	r2, [pc, #324]	; (800b730 <UART_SetConfig+0x304>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d17a      	bne.n	800b6e6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5f4:	2b08      	cmp	r3, #8
 800b5f6:	d824      	bhi.n	800b642 <UART_SetConfig+0x216>
 800b5f8:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <UART_SetConfig+0x1d4>)
 800b5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fe:	bf00      	nop
 800b600:	0800b625 	.word	0x0800b625
 800b604:	0800b643 	.word	0x0800b643
 800b608:	0800b62d 	.word	0x0800b62d
 800b60c:	0800b643 	.word	0x0800b643
 800b610:	0800b633 	.word	0x0800b633
 800b614:	0800b643 	.word	0x0800b643
 800b618:	0800b643 	.word	0x0800b643
 800b61c:	0800b643 	.word	0x0800b643
 800b620:	0800b63b 	.word	0x0800b63b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b624:	f7fe fa24 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
 800b628:	61f8      	str	r0, [r7, #28]
        break;
 800b62a:	e010      	b.n	800b64e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b62c:	4b44      	ldr	r3, [pc, #272]	; (800b740 <UART_SetConfig+0x314>)
 800b62e:	61fb      	str	r3, [r7, #28]
        break;
 800b630:	e00d      	b.n	800b64e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b632:	f7fe f985 	bl	8009940 <HAL_RCC_GetSysClockFreq>
 800b636:	61f8      	str	r0, [r7, #28]
        break;
 800b638:	e009      	b.n	800b64e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b63a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b63e:	61fb      	str	r3, [r7, #28]
        break;
 800b640:	e005      	b.n	800b64e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800b642:	2300      	movs	r3, #0
 800b644:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b64c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	2b00      	cmp	r3, #0
 800b652:	f000 8107 	beq.w	800b864 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	4613      	mov	r3, r2
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	4413      	add	r3, r2
 800b660:	69fa      	ldr	r2, [r7, #28]
 800b662:	429a      	cmp	r2, r3
 800b664:	d305      	bcc.n	800b672 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b66c:	69fa      	ldr	r2, [r7, #28]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d903      	bls.n	800b67a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b678:	e0f4      	b.n	800b864 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	2200      	movs	r2, #0
 800b67e:	461c      	mov	r4, r3
 800b680:	4615      	mov	r5, r2
 800b682:	f04f 0200 	mov.w	r2, #0
 800b686:	f04f 0300 	mov.w	r3, #0
 800b68a:	022b      	lsls	r3, r5, #8
 800b68c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b690:	0222      	lsls	r2, r4, #8
 800b692:	68f9      	ldr	r1, [r7, #12]
 800b694:	6849      	ldr	r1, [r1, #4]
 800b696:	0849      	lsrs	r1, r1, #1
 800b698:	2000      	movs	r0, #0
 800b69a:	4688      	mov	r8, r1
 800b69c:	4681      	mov	r9, r0
 800b69e:	eb12 0a08 	adds.w	sl, r2, r8
 800b6a2:	eb43 0b09 	adc.w	fp, r3, r9
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	603b      	str	r3, [r7, #0]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6b4:	4650      	mov	r0, sl
 800b6b6:	4659      	mov	r1, fp
 800b6b8:	f7f5 fae6 	bl	8000c88 <__aeabi_uldivmod>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6ca:	d308      	bcc.n	800b6de <UART_SetConfig+0x2b2>
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6d2:	d204      	bcs.n	800b6de <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	69ba      	ldr	r2, [r7, #24]
 800b6da:	60da      	str	r2, [r3, #12]
 800b6dc:	e0c2      	b.n	800b864 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b6e4:	e0be      	b.n	800b864 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6ee:	d16a      	bne.n	800b7c6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800b6f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6f4:	2b08      	cmp	r3, #8
 800b6f6:	d834      	bhi.n	800b762 <UART_SetConfig+0x336>
 800b6f8:	a201      	add	r2, pc, #4	; (adr r2, 800b700 <UART_SetConfig+0x2d4>)
 800b6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fe:	bf00      	nop
 800b700:	0800b725 	.word	0x0800b725
 800b704:	0800b745 	.word	0x0800b745
 800b708:	0800b74d 	.word	0x0800b74d
 800b70c:	0800b763 	.word	0x0800b763
 800b710:	0800b753 	.word	0x0800b753
 800b714:	0800b763 	.word	0x0800b763
 800b718:	0800b763 	.word	0x0800b763
 800b71c:	0800b763 	.word	0x0800b763
 800b720:	0800b75b 	.word	0x0800b75b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b724:	f7fe f9a4 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
 800b728:	61f8      	str	r0, [r7, #28]
        break;
 800b72a:	e020      	b.n	800b76e <UART_SetConfig+0x342>
 800b72c:	efff69f3 	.word	0xefff69f3
 800b730:	40008000 	.word	0x40008000
 800b734:	40013800 	.word	0x40013800
 800b738:	40021000 	.word	0x40021000
 800b73c:	40004400 	.word	0x40004400
 800b740:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b744:	f7fe f9aa 	bl	8009a9c <HAL_RCC_GetPCLK2Freq>
 800b748:	61f8      	str	r0, [r7, #28]
        break;
 800b74a:	e010      	b.n	800b76e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b74c:	4b4c      	ldr	r3, [pc, #304]	; (800b880 <UART_SetConfig+0x454>)
 800b74e:	61fb      	str	r3, [r7, #28]
        break;
 800b750:	e00d      	b.n	800b76e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b752:	f7fe f8f5 	bl	8009940 <HAL_RCC_GetSysClockFreq>
 800b756:	61f8      	str	r0, [r7, #28]
        break;
 800b758:	e009      	b.n	800b76e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b75a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b75e:	61fb      	str	r3, [r7, #28]
        break;
 800b760:	e005      	b.n	800b76e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800b762:	2300      	movs	r3, #0
 800b764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b76c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d077      	beq.n	800b864 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	005a      	lsls	r2, r3, #1
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	085b      	lsrs	r3, r3, #1
 800b77e:	441a      	add	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	fbb2 f3f3 	udiv	r3, r2, r3
 800b788:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	2b0f      	cmp	r3, #15
 800b78e:	d916      	bls.n	800b7be <UART_SetConfig+0x392>
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b796:	d212      	bcs.n	800b7be <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	f023 030f 	bic.w	r3, r3, #15
 800b7a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	085b      	lsrs	r3, r3, #1
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	f003 0307 	and.w	r3, r3, #7
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	8afb      	ldrh	r3, [r7, #22]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	8afa      	ldrh	r2, [r7, #22]
 800b7ba:	60da      	str	r2, [r3, #12]
 800b7bc:	e052      	b.n	800b864 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b7c4:	e04e      	b.n	800b864 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7ca:	2b08      	cmp	r3, #8
 800b7cc:	d827      	bhi.n	800b81e <UART_SetConfig+0x3f2>
 800b7ce:	a201      	add	r2, pc, #4	; (adr r2, 800b7d4 <UART_SetConfig+0x3a8>)
 800b7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d4:	0800b7f9 	.word	0x0800b7f9
 800b7d8:	0800b801 	.word	0x0800b801
 800b7dc:	0800b809 	.word	0x0800b809
 800b7e0:	0800b81f 	.word	0x0800b81f
 800b7e4:	0800b80f 	.word	0x0800b80f
 800b7e8:	0800b81f 	.word	0x0800b81f
 800b7ec:	0800b81f 	.word	0x0800b81f
 800b7f0:	0800b81f 	.word	0x0800b81f
 800b7f4:	0800b817 	.word	0x0800b817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7f8:	f7fe f93a 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
 800b7fc:	61f8      	str	r0, [r7, #28]
        break;
 800b7fe:	e014      	b.n	800b82a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b800:	f7fe f94c 	bl	8009a9c <HAL_RCC_GetPCLK2Freq>
 800b804:	61f8      	str	r0, [r7, #28]
        break;
 800b806:	e010      	b.n	800b82a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b808:	4b1d      	ldr	r3, [pc, #116]	; (800b880 <UART_SetConfig+0x454>)
 800b80a:	61fb      	str	r3, [r7, #28]
        break;
 800b80c:	e00d      	b.n	800b82a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b80e:	f7fe f897 	bl	8009940 <HAL_RCC_GetSysClockFreq>
 800b812:	61f8      	str	r0, [r7, #28]
        break;
 800b814:	e009      	b.n	800b82a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b81a:	61fb      	str	r3, [r7, #28]
        break;
 800b81c:	e005      	b.n	800b82a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800b81e:	2300      	movs	r3, #0
 800b820:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b828:	bf00      	nop
    }

    if (pclk != 0U)
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d019      	beq.n	800b864 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	085a      	lsrs	r2, r3, #1
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	441a      	add	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b842:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	2b0f      	cmp	r3, #15
 800b848:	d909      	bls.n	800b85e <UART_SetConfig+0x432>
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b850:	d205      	bcs.n	800b85e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	b29a      	uxth	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	60da      	str	r2, [r3, #12]
 800b85c:	e002      	b.n	800b864 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b870:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b874:	4618      	mov	r0, r3
 800b876:	3728      	adds	r7, #40	; 0x28
 800b878:	46bd      	mov	sp, r7
 800b87a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b87e:	bf00      	nop
 800b880:	00f42400 	.word	0x00f42400

0800b884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b890:	f003 0308 	and.w	r3, r3, #8
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00a      	beq.n	800b8ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	f003 0301 	and.w	r3, r3, #1
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	f003 0302 	and.w	r3, r3, #2
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00a      	beq.n	800b8f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f6:	f003 0304 	and.w	r3, r3, #4
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00a      	beq.n	800b914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	430a      	orrs	r2, r1
 800b912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b918:	f003 0310 	and.w	r3, r3, #16
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00a      	beq.n	800b936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	430a      	orrs	r2, r1
 800b934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93a:	f003 0320 	and.w	r3, r3, #32
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00a      	beq.n	800b958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	430a      	orrs	r2, r1
 800b956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b960:	2b00      	cmp	r3, #0
 800b962:	d01a      	beq.n	800b99a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b982:	d10a      	bne.n	800b99a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	430a      	orrs	r2, r1
 800b998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00a      	beq.n	800b9bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	430a      	orrs	r2, r1
 800b9ba:	605a      	str	r2, [r3, #4]
  }
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b098      	sub	sp, #96	; 0x60
 800b9cc:	af02      	add	r7, sp, #8
 800b9ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9d8:	f7f8 fe8c 	bl	80046f4 <HAL_GetTick>
 800b9dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f003 0308 	and.w	r3, r3, #8
 800b9e8:	2b08      	cmp	r3, #8
 800b9ea:	d12e      	bne.n	800ba4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f88c 	bl	800bb18 <UART_WaitOnFlagUntilTimeout>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d021      	beq.n	800ba4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	e853 3f00 	ldrex	r3, [r3]
 800ba12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba1a:	653b      	str	r3, [r7, #80]	; 0x50
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	461a      	mov	r2, r3
 800ba22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba24:	647b      	str	r3, [r7, #68]	; 0x44
 800ba26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba2c:	e841 2300 	strex	r3, r2, [r1]
 800ba30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1e6      	bne.n	800ba06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba46:	2303      	movs	r3, #3
 800ba48:	e062      	b.n	800bb10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d149      	bne.n	800baec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba60:	2200      	movs	r2, #0
 800ba62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f856 	bl	800bb18 <UART_WaitOnFlagUntilTimeout>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d03c      	beq.n	800baec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	e853 3f00 	ldrex	r3, [r3]
 800ba7e:	623b      	str	r3, [r7, #32]
   return(result);
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba90:	633b      	str	r3, [r7, #48]	; 0x30
 800ba92:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba98:	e841 2300 	strex	r3, r2, [r1]
 800ba9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1e6      	bne.n	800ba72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3308      	adds	r3, #8
 800baaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	e853 3f00 	ldrex	r3, [r3]
 800bab2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f023 0301 	bic.w	r3, r3, #1
 800baba:	64bb      	str	r3, [r7, #72]	; 0x48
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3308      	adds	r3, #8
 800bac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bac4:	61fa      	str	r2, [r7, #28]
 800bac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac8:	69b9      	ldr	r1, [r7, #24]
 800baca:	69fa      	ldr	r2, [r7, #28]
 800bacc:	e841 2300 	strex	r3, r2, [r1]
 800bad0:	617b      	str	r3, [r7, #20]
   return(result);
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e5      	bne.n	800baa4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2220      	movs	r2, #32
 800badc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	e011      	b.n	800bb10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2220      	movs	r2, #32
 800baf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2220      	movs	r2, #32
 800baf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3758      	adds	r7, #88	; 0x58
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	603b      	str	r3, [r7, #0]
 800bb24:	4613      	mov	r3, r2
 800bb26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb28:	e049      	b.n	800bbbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb30:	d045      	beq.n	800bbbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb32:	f7f8 fddf 	bl	80046f4 <HAL_GetTick>
 800bb36:	4602      	mov	r2, r0
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	69ba      	ldr	r2, [r7, #24]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d302      	bcc.n	800bb48 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e048      	b.n	800bbde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 0304 	and.w	r3, r3, #4
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d031      	beq.n	800bbbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	69db      	ldr	r3, [r3, #28]
 800bb60:	f003 0308 	and.w	r3, r3, #8
 800bb64:	2b08      	cmp	r3, #8
 800bb66:	d110      	bne.n	800bb8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2208      	movs	r2, #8
 800bb6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f000 f8ff 	bl	800bd74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2208      	movs	r2, #8
 800bb7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e029      	b.n	800bbde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	69db      	ldr	r3, [r3, #28]
 800bb90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb98:	d111      	bne.n	800bbbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f000 f8e5 	bl	800bd74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2220      	movs	r2, #32
 800bbae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e00f      	b.n	800bbde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	69da      	ldr	r2, [r3, #28]
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	bf0c      	ite	eq
 800bbce:	2301      	moveq	r3, #1
 800bbd0:	2300      	movne	r3, #0
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	79fb      	ldrb	r3, [r7, #7]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d0a6      	beq.n	800bb2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
	...

0800bbe8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b096      	sub	sp, #88	; 0x58
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	88fa      	ldrh	r2, [r7, #6]
 800bc00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2222      	movs	r2, #34	; 0x22
 800bc10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d028      	beq.n	800bc6e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc20:	4a3e      	ldr	r2, [pc, #248]	; (800bd1c <UART_Start_Receive_DMA+0x134>)
 800bc22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc28:	4a3d      	ldr	r2, [pc, #244]	; (800bd20 <UART_Start_Receive_DMA+0x138>)
 800bc2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc30:	4a3c      	ldr	r2, [pc, #240]	; (800bd24 <UART_Start_Receive_DMA+0x13c>)
 800bc32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc38:	2200      	movs	r2, #0
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3324      	adds	r3, #36	; 0x24
 800bc46:	4619      	mov	r1, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	88fb      	ldrh	r3, [r7, #6]
 800bc50:	f7fa faae 	bl	80061b0 <HAL_DMA_Start_IT>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d009      	beq.n	800bc6e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2210      	movs	r2, #16
 800bc5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2220      	movs	r2, #32
 800bc66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e051      	b.n	800bd12 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d018      	beq.n	800bca8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc7e:	e853 3f00 	ldrex	r3, [r3]
 800bc82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc8a:	657b      	str	r3, [r7, #84]	; 0x54
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	461a      	mov	r2, r3
 800bc92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc94:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc96:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc9c:	e841 2300 	strex	r3, r2, [r1]
 800bca0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1e6      	bne.n	800bc76 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3308      	adds	r3, #8
 800bcae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb2:	e853 3f00 	ldrex	r3, [r3]
 800bcb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	f043 0301 	orr.w	r3, r3, #1
 800bcbe:	653b      	str	r3, [r7, #80]	; 0x50
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3308      	adds	r3, #8
 800bcc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bcc8:	637a      	str	r2, [r7, #52]	; 0x34
 800bcca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bcce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcd0:	e841 2300 	strex	r3, r2, [r1]
 800bcd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e5      	bne.n	800bca8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	3308      	adds	r3, #8
 800bce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	e853 3f00 	ldrex	r3, [r3]
 800bcea:	613b      	str	r3, [r7, #16]
   return(result);
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcfc:	623a      	str	r2, [r7, #32]
 800bcfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd00:	69f9      	ldr	r1, [r7, #28]
 800bd02:	6a3a      	ldr	r2, [r7, #32]
 800bd04:	e841 2300 	strex	r3, r2, [r1]
 800bd08:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1e5      	bne.n	800bcdc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3758      	adds	r7, #88	; 0x58
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	0800be3d 	.word	0x0800be3d
 800bd20:	0800bf69 	.word	0x0800bf69
 800bd24:	0800bfa7 	.word	0x0800bfa7

0800bd28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b089      	sub	sp, #36	; 0x24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	e853 3f00 	ldrex	r3, [r3]
 800bd3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bd44:	61fb      	str	r3, [r7, #28]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	61bb      	str	r3, [r7, #24]
 800bd50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd52:	6979      	ldr	r1, [r7, #20]
 800bd54:	69ba      	ldr	r2, [r7, #24]
 800bd56:	e841 2300 	strex	r3, r2, [r1]
 800bd5a:	613b      	str	r3, [r7, #16]
   return(result);
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1e6      	bne.n	800bd30 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2220      	movs	r2, #32
 800bd66:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800bd68:	bf00      	nop
 800bd6a:	3724      	adds	r7, #36	; 0x24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b095      	sub	sp, #84	; 0x54
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd84:	e853 3f00 	ldrex	r3, [r3]
 800bd88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	461a      	mov	r2, r3
 800bd98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd9a:	643b      	str	r3, [r7, #64]	; 0x40
 800bd9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bda0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bda2:	e841 2300 	strex	r3, r2, [r1]
 800bda6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1e6      	bne.n	800bd7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3308      	adds	r3, #8
 800bdb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	e853 3f00 	ldrex	r3, [r3]
 800bdbc:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	f023 0301 	bic.w	r3, r3, #1
 800bdc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	3308      	adds	r3, #8
 800bdcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdd6:	e841 2300 	strex	r3, r2, [r1]
 800bdda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1e5      	bne.n	800bdae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d118      	bne.n	800be1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	e853 3f00 	ldrex	r3, [r3]
 800bdf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f023 0310 	bic.w	r3, r3, #16
 800bdfe:	647b      	str	r3, [r7, #68]	; 0x44
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	461a      	mov	r2, r3
 800be06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be08:	61bb      	str	r3, [r7, #24]
 800be0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0c:	6979      	ldr	r1, [r7, #20]
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	e841 2300 	strex	r3, r2, [r1]
 800be14:	613b      	str	r3, [r7, #16]
   return(result);
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1e6      	bne.n	800bdea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2220      	movs	r2, #32
 800be20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800be30:	bf00      	nop
 800be32:	3754      	adds	r7, #84	; 0x54
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b09c      	sub	sp, #112	; 0x70
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be48:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 0320 	and.w	r3, r3, #32
 800be54:	2b00      	cmp	r3, #0
 800be56:	d171      	bne.n	800bf3c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800be58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be5a:	2200      	movs	r2, #0
 800be5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be68:	e853 3f00 	ldrex	r3, [r3]
 800be6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be74:	66bb      	str	r3, [r7, #104]	; 0x68
 800be76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be7e:	65bb      	str	r3, [r7, #88]	; 0x58
 800be80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be86:	e841 2300 	strex	r3, r2, [r1]
 800be8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1e6      	bne.n	800be60 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3308      	adds	r3, #8
 800be98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9c:	e853 3f00 	ldrex	r3, [r3]
 800bea0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea4:	f023 0301 	bic.w	r3, r3, #1
 800bea8:	667b      	str	r3, [r7, #100]	; 0x64
 800beaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	3308      	adds	r3, #8
 800beb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800beb2:	647a      	str	r2, [r7, #68]	; 0x44
 800beb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800beb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beba:	e841 2300 	strex	r3, r2, [r1]
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1e5      	bne.n	800be92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3308      	adds	r3, #8
 800becc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	e853 3f00 	ldrex	r3, [r3]
 800bed4:	623b      	str	r3, [r7, #32]
   return(result);
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bedc:	663b      	str	r3, [r7, #96]	; 0x60
 800bede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	3308      	adds	r3, #8
 800bee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bee6:	633a      	str	r2, [r7, #48]	; 0x30
 800bee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800beec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e5      	bne.n	800bec6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800befa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800befc:	2220      	movs	r2, #32
 800befe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d118      	bne.n	800bf3c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	e853 3f00 	ldrex	r3, [r3]
 800bf16:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f023 0310 	bic.w	r3, r3, #16
 800bf1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	461a      	mov	r2, r3
 800bf26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf28:	61fb      	str	r3, [r7, #28]
 800bf2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2c:	69b9      	ldr	r1, [r7, #24]
 800bf2e:	69fa      	ldr	r2, [r7, #28]
 800bf30:	e841 2300 	strex	r3, r2, [r1]
 800bf34:	617b      	str	r3, [r7, #20]
   return(result);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1e6      	bne.n	800bf0a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf3e:	2200      	movs	r2, #0
 800bf40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d107      	bne.n	800bf5a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bf50:	4619      	mov	r1, r3
 800bf52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bf54:	f7ff fa5e 	bl	800b414 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf58:	e002      	b.n	800bf60 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bf5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bf5c:	f7f5 f86a 	bl	8001034 <HAL_UART_RxCpltCallback>
}
 800bf60:	bf00      	nop
 800bf62:	3770      	adds	r7, #112	; 0x70
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf74:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d109      	bne.n	800bf98 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bf8a:	085b      	lsrs	r3, r3, #1
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	4619      	mov	r1, r3
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f7ff fa3f 	bl	800b414 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf96:	e002      	b.n	800bf9e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f7ff fa27 	bl	800b3ec <HAL_UART_RxHalfCpltCallback>
}
 800bf9e:	bf00      	nop
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b086      	sub	sp, #24
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfb8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfc0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfcc:	2b80      	cmp	r3, #128	; 0x80
 800bfce:	d109      	bne.n	800bfe4 <UART_DMAError+0x3e>
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	2b21      	cmp	r3, #33	; 0x21
 800bfd4:	d106      	bne.n	800bfe4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800bfde:	6978      	ldr	r0, [r7, #20]
 800bfe0:	f7ff fea2 	bl	800bd28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfee:	2b40      	cmp	r3, #64	; 0x40
 800bff0:	d109      	bne.n	800c006 <UART_DMAError+0x60>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2b22      	cmp	r3, #34	; 0x22
 800bff6:	d106      	bne.n	800c006 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c000:	6978      	ldr	r0, [r7, #20]
 800c002:	f7ff feb7 	bl	800bd74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c00c:	f043 0210 	orr.w	r2, r3, #16
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c016:	6978      	ldr	r0, [r7, #20]
 800c018:	f7ff f9f2 	bl	800b400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c01c:	bf00      	nop
 800c01e:	3718      	adds	r7, #24
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c030:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f7ff f9dc 	bl	800b400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c048:	bf00      	nop
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c050:	b480      	push	{r7}
 800c052:	b08f      	sub	sp, #60	; 0x3c
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c05c:	2b21      	cmp	r3, #33	; 0x21
 800c05e:	d14d      	bne.n	800c0fc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c066:	b29b      	uxth	r3, r3
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d132      	bne.n	800c0d2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	e853 3f00 	ldrex	r3, [r3]
 800c078:	61fb      	str	r3, [r7, #28]
   return(result);
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c080:	637b      	str	r3, [r7, #52]	; 0x34
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	461a      	mov	r2, r3
 800c088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c08c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c092:	e841 2300 	strex	r3, r2, [r1]
 800c096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1e6      	bne.n	800c06c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	e853 3f00 	ldrex	r3, [r3]
 800c0aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0b2:	633b      	str	r3, [r7, #48]	; 0x30
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0bc:	61bb      	str	r3, [r7, #24]
 800c0be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c0:	6979      	ldr	r1, [r7, #20]
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	e841 2300 	strex	r3, r2, [r1]
 800c0c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1e6      	bne.n	800c09e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c0d0:	e014      	b.n	800c0fc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0d6:	781a      	ldrb	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	b292      	uxth	r2, r2
 800c0de:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e4:	1c5a      	adds	r2, r3, #1
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c0fc:	bf00      	nop
 800c0fe:	373c      	adds	r7, #60	; 0x3c
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c108:	b480      	push	{r7}
 800c10a:	b091      	sub	sp, #68	; 0x44
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c114:	2b21      	cmp	r3, #33	; 0x21
 800c116:	d151      	bne.n	800c1bc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c11e:	b29b      	uxth	r3, r3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d132      	bne.n	800c18a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	623b      	str	r3, [r7, #32]
   return(result);
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c138:	63bb      	str	r3, [r7, #56]	; 0x38
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	633b      	str	r3, [r7, #48]	; 0x30
 800c144:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e6      	bne.n	800c124 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	e853 3f00 	ldrex	r3, [r3]
 800c162:	60fb      	str	r3, [r7, #12]
   return(result);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c16a:	637b      	str	r3, [r7, #52]	; 0x34
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	461a      	mov	r2, r3
 800c172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c174:	61fb      	str	r3, [r7, #28]
 800c176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c178:	69b9      	ldr	r1, [r7, #24]
 800c17a:	69fa      	ldr	r2, [r7, #28]
 800c17c:	e841 2300 	strex	r3, r2, [r1]
 800c180:	617b      	str	r3, [r7, #20]
   return(result);
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1e6      	bne.n	800c156 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c188:	e018      	b.n	800c1bc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c192:	881a      	ldrh	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c19c:	b292      	uxth	r2, r2
 800c19e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a4:	1c9a      	adds	r2, r3, #2
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c1bc:	bf00      	nop
 800c1be:	3744      	adds	r7, #68	; 0x44
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b088      	sub	sp, #32
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	e853 3f00 	ldrex	r3, [r3]
 800c1dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1e4:	61fb      	str	r3, [r7, #28]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	61bb      	str	r3, [r7, #24]
 800c1f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f2:	6979      	ldr	r1, [r7, #20]
 800c1f4:	69ba      	ldr	r2, [r7, #24]
 800c1f6:	e841 2300 	strex	r3, r2, [r1]
 800c1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1e6      	bne.n	800c1d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2220      	movs	r2, #32
 800c206:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7ff f8e2 	bl	800b3d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c214:	bf00      	nop
 800c216:	3720      	adds	r7, #32
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c230:	b084      	sub	sp, #16
 800c232:	b480      	push	{r7}
 800c234:	b083      	sub	sp, #12
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	f107 0014 	add.w	r0, r7, #20
 800c23e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	b004      	add	sp, #16
 800c250:	4770      	bx	lr

0800c252 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c252:	b480      	push	{r7}
 800c254:	b085      	sub	sp, #20
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c262:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800c266:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c280:	b480      	push	{r7}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c288:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800c28c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c294:	b29a      	uxth	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	b29b      	uxth	r3, r3
 800c29a:	43db      	mvns	r3, r3
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	4013      	ands	r3, r2
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3714      	adds	r7, #20
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b083      	sub	sp, #12
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	b480      	push	{r7}
 800c2d4:	b083      	sub	sp, #12
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	f107 0014 	add.w	r0, r7, #20
 800c2de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	b004      	add	sp, #16
 800c310:	4770      	bx	lr
	...

0800c314 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c314:	b480      	push	{r7}
 800c316:	b09d      	sub	sp, #116	; 0x74
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	b29b      	uxth	r3, r3
 800c332:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c33a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	78db      	ldrb	r3, [r3, #3]
 800c342:	2b03      	cmp	r3, #3
 800c344:	d81f      	bhi.n	800c386 <USB_ActivateEndpoint+0x72>
 800c346:	a201      	add	r2, pc, #4	; (adr r2, 800c34c <USB_ActivateEndpoint+0x38>)
 800c348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34c:	0800c35d 	.word	0x0800c35d
 800c350:	0800c379 	.word	0x0800c379
 800c354:	0800c38f 	.word	0x0800c38f
 800c358:	0800c36b 	.word	0x0800c36b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c35c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c364:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c368:	e012      	b.n	800c390 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c36a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c36e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800c372:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c376:	e00b      	b.n	800c390 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c378:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c37c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c380:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c384:	e004      	b.n	800c390 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800c38c:	e000      	b.n	800c390 <USB_ActivateEndpoint+0x7c>
      break;
 800c38e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	441a      	add	r2, r3
 800c39a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c39e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4413      	add	r3, r2
 800c3bc:	881b      	ldrh	r3, [r3, #0]
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	b21b      	sxth	r3, r3
 800c3c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ca:	b21a      	sxth	r2, r3
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	b21b      	sxth	r3, r3
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	b21b      	sxth	r3, r3
 800c3d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	441a      	add	r2, r3
 800c3e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c3e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	7b1b      	ldrb	r3, [r3, #12]
 800c400:	2b00      	cmp	r3, #0
 800c402:	f040 8178 	bne.w	800c6f6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	785b      	ldrb	r3, [r3, #1]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 8084 	beq.w	800c518 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	61bb      	str	r3, [r7, #24]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	461a      	mov	r2, r3
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	4413      	add	r3, r2
 800c422:	61bb      	str	r3, [r7, #24]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	00da      	lsls	r2, r3, #3
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	4413      	add	r3, r2
 800c42e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c432:	617b      	str	r3, [r7, #20]
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	88db      	ldrh	r3, [r3, #6]
 800c438:	085b      	lsrs	r3, r3, #1
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	005b      	lsls	r3, r3, #1
 800c43e:	b29a      	uxth	r2, r3
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	4413      	add	r3, r2
 800c44e:	881b      	ldrh	r3, [r3, #0]
 800c450:	827b      	strh	r3, [r7, #18]
 800c452:	8a7b      	ldrh	r3, [r7, #18]
 800c454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d01b      	beq.n	800c494 <USB_ActivateEndpoint+0x180>
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	4413      	add	r3, r2
 800c466:	881b      	ldrh	r3, [r3, #0]
 800c468:	b29b      	uxth	r3, r3
 800c46a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c46e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c472:	823b      	strh	r3, [r7, #16]
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	441a      	add	r2, r3
 800c47e:	8a3b      	ldrh	r3, [r7, #16]
 800c480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c48c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c490:	b29b      	uxth	r3, r3
 800c492:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	78db      	ldrb	r3, [r3, #3]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d020      	beq.n	800c4de <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4b2:	81bb      	strh	r3, [r7, #12]
 800c4b4:	89bb      	ldrh	r3, [r7, #12]
 800c4b6:	f083 0320 	eor.w	r3, r3, #32
 800c4ba:	81bb      	strh	r3, [r7, #12]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	441a      	add	r2, r3
 800c4c6:	89bb      	ldrh	r3, [r7, #12]
 800c4c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	8013      	strh	r3, [r2, #0]
 800c4dc:	e2d5      	b.n	800ca8a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4413      	add	r3, r2
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4f4:	81fb      	strh	r3, [r7, #14]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	441a      	add	r2, r3
 800c500:	89fb      	ldrh	r3, [r7, #14]
 800c502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c50a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c50e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c512:	b29b      	uxth	r3, r3
 800c514:	8013      	strh	r3, [r2, #0]
 800c516:	e2b8      	b.n	800ca8a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	633b      	str	r3, [r7, #48]	; 0x30
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c522:	b29b      	uxth	r3, r3
 800c524:	461a      	mov	r2, r3
 800c526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c528:	4413      	add	r3, r2
 800c52a:	633b      	str	r3, [r7, #48]	; 0x30
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	00da      	lsls	r2, r3, #3
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	4413      	add	r3, r2
 800c536:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c53a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	88db      	ldrh	r3, [r3, #6]
 800c540:	085b      	lsrs	r3, r3, #1
 800c542:	b29b      	uxth	r3, r3
 800c544:	005b      	lsls	r3, r3, #1
 800c546:	b29a      	uxth	r2, r3
 800c548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c556:	b29b      	uxth	r3, r3
 800c558:	461a      	mov	r2, r3
 800c55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55c:	4413      	add	r3, r2
 800c55e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	00da      	lsls	r2, r3, #3
 800c566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c568:	4413      	add	r3, r2
 800c56a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c56e:	627b      	str	r3, [r7, #36]	; 0x24
 800c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c572:	881b      	ldrh	r3, [r3, #0]
 800c574:	b29b      	uxth	r3, r3
 800c576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	801a      	strh	r2, [r3, #0]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	2b3e      	cmp	r3, #62	; 0x3e
 800c586:	d91d      	bls.n	800c5c4 <USB_ActivateEndpoint+0x2b0>
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	095b      	lsrs	r3, r3, #5
 800c58e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	f003 031f 	and.w	r3, r3, #31
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d102      	bne.n	800c5a2 <USB_ActivateEndpoint+0x28e>
 800c59c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a4:	881b      	ldrh	r3, [r3, #0]
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	029b      	lsls	r3, r3, #10
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c0:	801a      	strh	r2, [r3, #0]
 800c5c2:	e026      	b.n	800c612 <USB_ActivateEndpoint+0x2fe>
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10a      	bne.n	800c5e2 <USB_ActivateEndpoint+0x2ce>
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	881b      	ldrh	r3, [r3, #0]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	801a      	strh	r2, [r3, #0]
 800c5e0:	e017      	b.n	800c612 <USB_ActivateEndpoint+0x2fe>
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	085b      	lsrs	r3, r3, #1
 800c5e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	f003 0301 	and.w	r3, r3, #1
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d002      	beq.n	800c5fc <USB_ActivateEndpoint+0x2e8>
 800c5f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	b29a      	uxth	r2, r3
 800c602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c604:	b29b      	uxth	r3, r3
 800c606:	029b      	lsls	r3, r3, #10
 800c608:	b29b      	uxth	r3, r3
 800c60a:	4313      	orrs	r3, r2
 800c60c:	b29a      	uxth	r2, r3
 800c60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c610:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	4413      	add	r3, r2
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	847b      	strh	r3, [r7, #34]	; 0x22
 800c620:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c626:	2b00      	cmp	r3, #0
 800c628:	d01b      	beq.n	800c662 <USB_ActivateEndpoint+0x34e>
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4413      	add	r3, r2
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	b29b      	uxth	r3, r3
 800c638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c63c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c640:	843b      	strh	r3, [r7, #32]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	441a      	add	r2, r3
 800c64c:	8c3b      	ldrh	r3, [r7, #32]
 800c64e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c65e:	b29b      	uxth	r3, r3
 800c660:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d124      	bne.n	800c6b4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	b29b      	uxth	r3, r3
 800c678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c67c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c680:	83bb      	strh	r3, [r7, #28]
 800c682:	8bbb      	ldrh	r3, [r7, #28]
 800c684:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c688:	83bb      	strh	r3, [r7, #28]
 800c68a:	8bbb      	ldrh	r3, [r7, #28]
 800c68c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c690:	83bb      	strh	r3, [r7, #28]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	441a      	add	r2, r3
 800c69c:	8bbb      	ldrh	r3, [r7, #28]
 800c69e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	8013      	strh	r3, [r2, #0]
 800c6b2:	e1ea      	b.n	800ca8a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	4413      	add	r3, r2
 800c6be:	881b      	ldrh	r3, [r3, #0]
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6ca:	83fb      	strh	r3, [r7, #30]
 800c6cc:	8bfb      	ldrh	r3, [r7, #30]
 800c6ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c6d2:	83fb      	strh	r3, [r7, #30]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	441a      	add	r2, r3
 800c6de:	8bfb      	ldrh	r3, [r7, #30]
 800c6e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	8013      	strh	r3, [r2, #0]
 800c6f4:	e1c9      	b.n	800ca8a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	78db      	ldrb	r3, [r3, #3]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d11e      	bne.n	800c73c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c714:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	441a      	add	r2, r3
 800c722:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c72a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c72e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c736:	b29b      	uxth	r3, r3
 800c738:	8013      	strh	r3, [r2, #0]
 800c73a:	e01d      	b.n	800c778 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4413      	add	r3, r2
 800c746:	881b      	ldrh	r3, [r3, #0]
 800c748:	b29b      	uxth	r3, r3
 800c74a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c74e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c752:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	441a      	add	r2, r3
 800c760:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c76c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c774:	b29b      	uxth	r3, r3
 800c776:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c782:	b29b      	uxth	r3, r3
 800c784:	461a      	mov	r2, r3
 800c786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c788:	4413      	add	r3, r2
 800c78a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	00da      	lsls	r2, r3, #3
 800c792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c794:	4413      	add	r3, r2
 800c796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c79a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	891b      	ldrh	r3, [r3, #8]
 800c7a0:	085b      	lsrs	r3, r3, #1
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	005b      	lsls	r3, r3, #1
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c7aa:	801a      	strh	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	657b      	str	r3, [r7, #84]	; 0x54
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7bc:	4413      	add	r3, r2
 800c7be:	657b      	str	r3, [r7, #84]	; 0x54
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	00da      	lsls	r2, r3, #3
 800c7c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c7ce:	653b      	str	r3, [r7, #80]	; 0x50
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	895b      	ldrh	r3, [r3, #10]
 800c7d4:	085b      	lsrs	r3, r3, #1
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	b29a      	uxth	r2, r3
 800c7dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	785b      	ldrb	r3, [r3, #1]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f040 8093 	bne.w	800c910 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	4413      	add	r3, r2
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c7fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c7fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d01b      	beq.n	800c83e <USB_ActivateEndpoint+0x52a>
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	4413      	add	r3, r2
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	b29b      	uxth	r3, r3
 800c814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c81c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	441a      	add	r2, r3
 800c828:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c82a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c82e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	881b      	ldrh	r3, [r3, #0]
 800c84a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c84c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c852:	2b00      	cmp	r3, #0
 800c854:	d01b      	beq.n	800c88e <USB_ActivateEndpoint+0x57a>
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	4413      	add	r3, r2
 800c860:	881b      	ldrh	r3, [r3, #0]
 800c862:	b29b      	uxth	r3, r3
 800c864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c86c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	441a      	add	r2, r3
 800c878:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c87a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c87e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c886:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4413      	add	r3, r2
 800c898:	881b      	ldrh	r3, [r3, #0]
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8a4:	873b      	strh	r3, [r7, #56]	; 0x38
 800c8a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c8a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c8ac:	873b      	strh	r3, [r7, #56]	; 0x38
 800c8ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c8b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c8b4:	873b      	strh	r3, [r7, #56]	; 0x38
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	441a      	add	r2, r3
 800c8c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c8c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	441a      	add	r2, r3
 800c8f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c8fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	8013      	strh	r3, [r2, #0]
 800c90e:	e0bc      	b.n	800ca8a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4413      	add	r3, r2
 800c91a:	881b      	ldrh	r3, [r3, #0]
 800c91c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c920:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d01d      	beq.n	800c968 <USB_ActivateEndpoint+0x654>
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4413      	add	r3, r2
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c942:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	441a      	add	r2, r3
 800c950:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c95c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c964:	b29b      	uxth	r3, r3
 800c966:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	4413      	add	r3, r2
 800c972:	881b      	ldrh	r3, [r3, #0]
 800c974:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c978:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c980:	2b00      	cmp	r3, #0
 800c982:	d01d      	beq.n	800c9c0 <USB_ActivateEndpoint+0x6ac>
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	881b      	ldrh	r3, [r3, #0]
 800c990:	b29b      	uxth	r3, r3
 800c992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c99a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	441a      	add	r2, r3
 800c9a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c9ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	78db      	ldrb	r3, [r3, #3]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d024      	beq.n	800ca12 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	881b      	ldrh	r3, [r3, #0]
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c9e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c9e6:	f083 0320 	eor.w	r3, r3, #32
 800c9ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	441a      	add	r2, r3
 800c9f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c9fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	8013      	strh	r3, [r2, #0]
 800ca10:	e01d      	b.n	800ca4e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	881b      	ldrh	r3, [r3, #0]
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	441a      	add	r2, r3
 800ca36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ca3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4413      	add	r3, r2
 800ca58:	881b      	ldrh	r3, [r3, #0]
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	441a      	add	r2, r3
 800ca72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ca8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3774      	adds	r7, #116	; 0x74
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop

0800ca9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b08d      	sub	sp, #52	; 0x34
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	7b1b      	ldrb	r3, [r3, #12]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f040 808e 	bne.w	800cbcc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	785b      	ldrb	r3, [r3, #1]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d044      	beq.n	800cb42 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	4413      	add	r3, r2
 800cac2:	881b      	ldrh	r3, [r3, #0]
 800cac4:	81bb      	strh	r3, [r7, #12]
 800cac6:	89bb      	ldrh	r3, [r7, #12]
 800cac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d01b      	beq.n	800cb08 <USB_DeactivateEndpoint+0x6c>
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	881b      	ldrh	r3, [r3, #0]
 800cadc:	b29b      	uxth	r3, r3
 800cade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cae6:	817b      	strh	r3, [r7, #10]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	441a      	add	r2, r3
 800caf2:	897b      	ldrh	r3, [r7, #10]
 800caf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cafc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	4413      	add	r3, r2
 800cb12:	881b      	ldrh	r3, [r3, #0]
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb1e:	813b      	strh	r3, [r7, #8]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	441a      	add	r2, r3
 800cb2a:	893b      	ldrh	r3, [r7, #8]
 800cb2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	8013      	strh	r3, [r2, #0]
 800cb40:	e192      	b.n	800ce68 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4413      	add	r3, r2
 800cb4c:	881b      	ldrh	r3, [r3, #0]
 800cb4e:	827b      	strh	r3, [r7, #18]
 800cb50:	8a7b      	ldrh	r3, [r7, #18]
 800cb52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d01b      	beq.n	800cb92 <USB_DeactivateEndpoint+0xf6>
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb70:	823b      	strh	r3, [r7, #16]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	441a      	add	r2, r3
 800cb7c:	8a3b      	ldrh	r3, [r7, #16]
 800cb7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cb8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	881b      	ldrh	r3, [r3, #0]
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cba8:	81fb      	strh	r3, [r7, #14]
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	441a      	add	r2, r3
 800cbb4:	89fb      	ldrh	r3, [r7, #14]
 800cbb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	8013      	strh	r3, [r2, #0]
 800cbca:	e14d      	b.n	800ce68 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	785b      	ldrb	r3, [r3, #1]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f040 80a5 	bne.w	800cd20 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	4413      	add	r3, r2
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	843b      	strh	r3, [r7, #32]
 800cbe4:	8c3b      	ldrh	r3, [r7, #32]
 800cbe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d01b      	beq.n	800cc26 <USB_DeactivateEndpoint+0x18a>
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4413      	add	r3, r2
 800cbf8:	881b      	ldrh	r3, [r3, #0]
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc04:	83fb      	strh	r3, [r7, #30]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	441a      	add	r2, r3
 800cc10:	8bfb      	ldrh	r3, [r7, #30]
 800cc12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	881b      	ldrh	r3, [r3, #0]
 800cc32:	83bb      	strh	r3, [r7, #28]
 800cc34:	8bbb      	ldrh	r3, [r7, #28]
 800cc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d01b      	beq.n	800cc76 <USB_DeactivateEndpoint+0x1da>
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4413      	add	r3, r2
 800cc48:	881b      	ldrh	r3, [r3, #0]
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc54:	837b      	strh	r3, [r7, #26]
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	441a      	add	r2, r3
 800cc60:	8b7b      	ldrh	r3, [r7, #26]
 800cc62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	4413      	add	r3, r2
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc8c:	833b      	strh	r3, [r7, #24]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	441a      	add	r2, r3
 800cc98:	8b3b      	ldrh	r3, [r7, #24]
 800cc9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cca6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccc4:	82fb      	strh	r3, [r7, #22]
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	441a      	add	r2, r3
 800ccd0:	8afb      	ldrh	r3, [r7, #22]
 800ccd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccfc:	82bb      	strh	r3, [r7, #20]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	441a      	add	r2, r3
 800cd08:	8abb      	ldrh	r3, [r7, #20]
 800cd0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	8013      	strh	r3, [r2, #0]
 800cd1e:	e0a3      	b.n	800ce68 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4413      	add	r3, r2
 800cd2a:	881b      	ldrh	r3, [r3, #0]
 800cd2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cd2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d01b      	beq.n	800cd70 <USB_DeactivateEndpoint+0x2d4>
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	441a      	add	r2, r3
 800cd5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cd5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4413      	add	r3, r2
 800cd7a:	881b      	ldrh	r3, [r3, #0]
 800cd7c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800cd7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cd80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d01b      	beq.n	800cdc0 <USB_DeactivateEndpoint+0x324>
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	881b      	ldrh	r3, [r3, #0]
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd9e:	853b      	strh	r3, [r7, #40]	; 0x28
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	441a      	add	r2, r3
 800cdaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cdac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdd6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	441a      	add	r2, r3
 800cde2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cde4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cde8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cdf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	881b      	ldrh	r3, [r3, #0]
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	441a      	add	r2, r3
 800ce1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4413      	add	r3, r2
 800ce3a:	881b      	ldrh	r3, [r3, #0]
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce46:	847b      	strh	r3, [r7, #34]	; 0x22
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	441a      	add	r2, r3
 800ce52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3734      	adds	r7, #52	; 0x34
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b0c2      	sub	sp, #264	; 0x108
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce84:	6018      	str	r0, [r3, #0]
 800ce86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce8e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ce90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	785b      	ldrb	r3, [r3, #1]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	f040 86b7 	bne.w	800dc10 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800cea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	699a      	ldr	r2, [r3, #24]
 800ceae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d908      	bls.n	800ced0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800cebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cece:	e007      	b.n	800cee0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ced0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ced4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	699b      	ldr	r3, [r3, #24]
 800cedc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	7b1b      	ldrb	r3, [r3, #12]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d13a      	bne.n	800cf66 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	6959      	ldr	r1, [r3, #20]
 800cefc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	88da      	ldrh	r2, [r3, #6]
 800cf08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cf12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cf16:	6800      	ldr	r0, [r0, #0]
 800cf18:	f001 fcb9 	bl	800e88e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cf1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	613b      	str	r3, [r7, #16]
 800cf28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	461a      	mov	r2, r3
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	613b      	str	r3, [r7, #16]
 800cf40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	00da      	lsls	r2, r3, #3
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	4413      	add	r3, r2
 800cf52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf56:	60fb      	str	r3, [r7, #12]
 800cf58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	801a      	strh	r2, [r3, #0]
 800cf62:	f000 be1f 	b.w	800dba4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cf66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	78db      	ldrb	r3, [r3, #3]
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	f040 8462 	bne.w	800d83c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cf78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6a1a      	ldr	r2, [r3, #32]
 800cf84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	f240 83df 	bls.w	800d754 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cf96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	4413      	add	r3, r2
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800cfc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	441a      	add	r2, r3
 800cfda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cfde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfe6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800cfea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	6a1a      	ldr	r2, [r3, #32]
 800cffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d002:	1ad2      	subs	r2, r2, r3
 800d004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	881b      	ldrh	r3, [r3, #0]
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d032:	2b00      	cmp	r3, #0
 800d034:	f000 81c7 	beq.w	800d3c6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d03c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	633b      	str	r3, [r7, #48]	; 0x30
 800d044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	785b      	ldrb	r3, [r3, #1]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d177      	bne.n	800d144 <USB_EPStartXfer+0x2ce>
 800d054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d06e:	b29b      	uxth	r3, r3
 800d070:	461a      	mov	r2, r3
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	4413      	add	r3, r2
 800d076:	62bb      	str	r3, [r7, #40]	; 0x28
 800d078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d07c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	00da      	lsls	r2, r3, #3
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	4413      	add	r3, r2
 800d08a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d08e:	627b      	str	r3, [r7, #36]	; 0x24
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	881b      	ldrh	r3, [r3, #0]
 800d094:	b29b      	uxth	r3, r3
 800d096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	801a      	strh	r2, [r3, #0]
 800d0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0a4:	2b3e      	cmp	r3, #62	; 0x3e
 800d0a6:	d921      	bls.n	800d0ec <USB_EPStartXfer+0x276>
 800d0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0ac:	095b      	lsrs	r3, r3, #5
 800d0ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0b6:	f003 031f 	and.w	r3, r3, #31
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d104      	bne.n	800d0c8 <USB_EPStartXfer+0x252>
 800d0be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	881b      	ldrh	r3, [r3, #0]
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	029b      	lsls	r3, r3, #10
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	801a      	strh	r2, [r3, #0]
 800d0ea:	e050      	b.n	800d18e <USB_EPStartXfer+0x318>
 800d0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10a      	bne.n	800d10a <USB_EPStartXfer+0x294>
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	881b      	ldrh	r3, [r3, #0]
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d102:	b29a      	uxth	r2, r3
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	801a      	strh	r2, [r3, #0]
 800d108:	e041      	b.n	800d18e <USB_EPStartXfer+0x318>
 800d10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d10e:	085b      	lsrs	r3, r3, #1
 800d110:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d004      	beq.n	800d12a <USB_EPStartXfer+0x2b4>
 800d120:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d124:	3301      	adds	r3, #1
 800d126:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	b29a      	uxth	r2, r3
 800d130:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d134:	b29b      	uxth	r3, r3
 800d136:	029b      	lsls	r3, r3, #10
 800d138:	b29b      	uxth	r3, r3
 800d13a:	4313      	orrs	r3, r2
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	801a      	strh	r2, [r3, #0]
 800d142:	e024      	b.n	800d18e <USB_EPStartXfer+0x318>
 800d144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	785b      	ldrb	r3, [r3, #1]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d11c      	bne.n	800d18e <USB_EPStartXfer+0x318>
 800d154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d162:	b29b      	uxth	r3, r3
 800d164:	461a      	mov	r2, r3
 800d166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d168:	4413      	add	r3, r2
 800d16a:	633b      	str	r3, [r7, #48]	; 0x30
 800d16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	00da      	lsls	r2, r3, #3
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	4413      	add	r3, r2
 800d17e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d182:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d188:	b29a      	uxth	r2, r3
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	895b      	ldrh	r3, [r3, #10]
 800d19a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6959      	ldr	r1, [r3, #20]
 800d1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d1b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d1b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d1bc:	6800      	ldr	r0, [r0, #0]
 800d1be:	f001 fb66 	bl	800e88e <USB_WritePMA>
            ep->xfer_buff += len;
 800d1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	695a      	ldr	r2, [r3, #20]
 800d1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1d2:	441a      	add	r2, r3
 800d1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	6a1a      	ldr	r2, [r3, #32]
 800d1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d90f      	bls.n	800d21c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6a1a      	ldr	r2, [r3, #32]
 800d208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d20c:	1ad2      	subs	r2, r2, r3
 800d20e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	621a      	str	r2, [r3, #32]
 800d21a:	e00e      	b.n	800d23a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	6a1b      	ldr	r3, [r3, #32]
 800d228:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2200      	movs	r2, #0
 800d238:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d23e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	785b      	ldrb	r3, [r3, #1]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d177      	bne.n	800d33a <USB_EPStartXfer+0x4c4>
 800d24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d24e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	61bb      	str	r3, [r7, #24]
 800d256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d25a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d264:	b29b      	uxth	r3, r3
 800d266:	461a      	mov	r2, r3
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	4413      	add	r3, r2
 800d26c:	61bb      	str	r3, [r7, #24]
 800d26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	00da      	lsls	r2, r3, #3
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	4413      	add	r3, r2
 800d280:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d284:	617b      	str	r3, [r7, #20]
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d290:	b29a      	uxth	r2, r3
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	801a      	strh	r2, [r3, #0]
 800d296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d29a:	2b3e      	cmp	r3, #62	; 0x3e
 800d29c:	d921      	bls.n	800d2e2 <USB_EPStartXfer+0x46c>
 800d29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2a2:	095b      	lsrs	r3, r3, #5
 800d2a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2ac:	f003 031f 	and.w	r3, r3, #31
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d104      	bne.n	800d2be <USB_EPStartXfer+0x448>
 800d2b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	881b      	ldrh	r3, [r3, #0]
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	029b      	lsls	r3, r3, #10
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2da:	b29a      	uxth	r2, r3
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	801a      	strh	r2, [r3, #0]
 800d2e0:	e056      	b.n	800d390 <USB_EPStartXfer+0x51a>
 800d2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10a      	bne.n	800d300 <USB_EPStartXfer+0x48a>
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	801a      	strh	r2, [r3, #0]
 800d2fe:	e047      	b.n	800d390 <USB_EPStartXfer+0x51a>
 800d300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d304:	085b      	lsrs	r3, r3, #1
 800d306:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d30e:	f003 0301 	and.w	r3, r3, #1
 800d312:	2b00      	cmp	r3, #0
 800d314:	d004      	beq.n	800d320 <USB_EPStartXfer+0x4aa>
 800d316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d31a:	3301      	adds	r3, #1
 800d31c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	881b      	ldrh	r3, [r3, #0]
 800d324:	b29a      	uxth	r2, r3
 800d326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	029b      	lsls	r3, r3, #10
 800d32e:	b29b      	uxth	r3, r3
 800d330:	4313      	orrs	r3, r2
 800d332:	b29a      	uxth	r2, r3
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	801a      	strh	r2, [r3, #0]
 800d338:	e02a      	b.n	800d390 <USB_EPStartXfer+0x51a>
 800d33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d33e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	785b      	ldrb	r3, [r3, #1]
 800d346:	2b01      	cmp	r3, #1
 800d348:	d122      	bne.n	800d390 <USB_EPStartXfer+0x51a>
 800d34a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d34e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	623b      	str	r3, [r7, #32]
 800d356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d35a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d364:	b29b      	uxth	r3, r3
 800d366:	461a      	mov	r2, r3
 800d368:	6a3b      	ldr	r3, [r7, #32]
 800d36a:	4413      	add	r3, r2
 800d36c:	623b      	str	r3, [r7, #32]
 800d36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	00da      	lsls	r2, r3, #3
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	4413      	add	r3, r2
 800d380:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d384:	61fb      	str	r3, [r7, #28]
 800d386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	891b      	ldrh	r3, [r3, #8]
 800d39c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	6959      	ldr	r1, [r3, #20]
 800d3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d3b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d3ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d3be:	6800      	ldr	r0, [r0, #0]
 800d3c0:	f001 fa65 	bl	800e88e <USB_WritePMA>
 800d3c4:	e3ee      	b.n	800dba4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d3c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	785b      	ldrb	r3, [r3, #1]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d177      	bne.n	800d4c6 <USB_EPStartXfer+0x650>
 800d3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3f6:	4413      	add	r3, r2
 800d3f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	00da      	lsls	r2, r3, #3
 800d408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d40a:	4413      	add	r3, r2
 800d40c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d410:	647b      	str	r3, [r7, #68]	; 0x44
 800d412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d414:	881b      	ldrh	r3, [r3, #0]
 800d416:	b29b      	uxth	r3, r3
 800d418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d420:	801a      	strh	r2, [r3, #0]
 800d422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d426:	2b3e      	cmp	r3, #62	; 0x3e
 800d428:	d921      	bls.n	800d46e <USB_EPStartXfer+0x5f8>
 800d42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d42e:	095b      	lsrs	r3, r3, #5
 800d430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d438:	f003 031f 	and.w	r3, r3, #31
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d104      	bne.n	800d44a <USB_EPStartXfer+0x5d4>
 800d440:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d444:	3b01      	subs	r3, #1
 800d446:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d44a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	b29a      	uxth	r2, r3
 800d450:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d454:	b29b      	uxth	r3, r3
 800d456:	029b      	lsls	r3, r3, #10
 800d458:	b29b      	uxth	r3, r3
 800d45a:	4313      	orrs	r3, r2
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d466:	b29a      	uxth	r2, r3
 800d468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d46a:	801a      	strh	r2, [r3, #0]
 800d46c:	e056      	b.n	800d51c <USB_EPStartXfer+0x6a6>
 800d46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10a      	bne.n	800d48c <USB_EPStartXfer+0x616>
 800d476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d484:	b29a      	uxth	r2, r3
 800d486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d488:	801a      	strh	r2, [r3, #0]
 800d48a:	e047      	b.n	800d51c <USB_EPStartXfer+0x6a6>
 800d48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d490:	085b      	lsrs	r3, r3, #1
 800d492:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d49a:	f003 0301 	and.w	r3, r3, #1
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d004      	beq.n	800d4ac <USB_EPStartXfer+0x636>
 800d4a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4ae:	881b      	ldrh	r3, [r3, #0]
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	029b      	lsls	r3, r3, #10
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4c2:	801a      	strh	r2, [r3, #0]
 800d4c4:	e02a      	b.n	800d51c <USB_EPStartXfer+0x6a6>
 800d4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	785b      	ldrb	r3, [r3, #1]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d122      	bne.n	800d51c <USB_EPStartXfer+0x6a6>
 800d4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	653b      	str	r3, [r7, #80]	; 0x50
 800d4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4f6:	4413      	add	r3, r2
 800d4f8:	653b      	str	r3, [r7, #80]	; 0x50
 800d4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	00da      	lsls	r2, r3, #3
 800d508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d50a:	4413      	add	r3, r2
 800d50c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d510:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d516:	b29a      	uxth	r2, r3
 800d518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d51a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	891b      	ldrh	r3, [r3, #8]
 800d528:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6959      	ldr	r1, [r3, #20]
 800d538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d542:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d546:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d54a:	6800      	ldr	r0, [r0, #0]
 800d54c:	f001 f99f 	bl	800e88e <USB_WritePMA>
            ep->xfer_buff += len;
 800d550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	695a      	ldr	r2, [r3, #20]
 800d55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d560:	441a      	add	r2, r3
 800d562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6a1a      	ldr	r2, [r3, #32]
 800d57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	429a      	cmp	r2, r3
 800d588:	d90f      	bls.n	800d5aa <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d58e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6a1a      	ldr	r2, [r3, #32]
 800d596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d59a:	1ad2      	subs	r2, r2, r3
 800d59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	621a      	str	r2, [r3, #32]
 800d5a8:	e00e      	b.n	800d5c8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6a1b      	ldr	r3, [r3, #32]
 800d5b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	643b      	str	r3, [r7, #64]	; 0x40
 800d5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	785b      	ldrb	r3, [r3, #1]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d177      	bne.n	800d6d4 <USB_EPStartXfer+0x85e>
 800d5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	461a      	mov	r2, r3
 800d602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d604:	4413      	add	r3, r2
 800d606:	63bb      	str	r3, [r7, #56]	; 0x38
 800d608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d60c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	00da      	lsls	r2, r3, #3
 800d616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d618:	4413      	add	r3, r2
 800d61a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d61e:	637b      	str	r3, [r7, #52]	; 0x34
 800d620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	b29b      	uxth	r3, r3
 800d626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62e:	801a      	strh	r2, [r3, #0]
 800d630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d634:	2b3e      	cmp	r3, #62	; 0x3e
 800d636:	d921      	bls.n	800d67c <USB_EPStartXfer+0x806>
 800d638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d63c:	095b      	lsrs	r3, r3, #5
 800d63e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d646:	f003 031f 	and.w	r3, r3, #31
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d104      	bne.n	800d658 <USB_EPStartXfer+0x7e2>
 800d64e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d652:	3b01      	subs	r3, #1
 800d654:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65a:	881b      	ldrh	r3, [r3, #0]
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d662:	b29b      	uxth	r3, r3
 800d664:	029b      	lsls	r3, r3, #10
 800d666:	b29b      	uxth	r3, r3
 800d668:	4313      	orrs	r3, r2
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d674:	b29a      	uxth	r2, r3
 800d676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d678:	801a      	strh	r2, [r3, #0]
 800d67a:	e050      	b.n	800d71e <USB_EPStartXfer+0x8a8>
 800d67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10a      	bne.n	800d69a <USB_EPStartXfer+0x824>
 800d684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	b29b      	uxth	r3, r3
 800d68a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d68e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d692:	b29a      	uxth	r2, r3
 800d694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d696:	801a      	strh	r2, [r3, #0]
 800d698:	e041      	b.n	800d71e <USB_EPStartXfer+0x8a8>
 800d69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d69e:	085b      	lsrs	r3, r3, #1
 800d6a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6a8:	f003 0301 	and.w	r3, r3, #1
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d004      	beq.n	800d6ba <USB_EPStartXfer+0x844>
 800d6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	029b      	lsls	r3, r3, #10
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d0:	801a      	strh	r2, [r3, #0]
 800d6d2:	e024      	b.n	800d71e <USB_EPStartXfer+0x8a8>
 800d6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	785b      	ldrb	r3, [r3, #1]
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d11c      	bne.n	800d71e <USB_EPStartXfer+0x8a8>
 800d6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6f8:	4413      	add	r3, r2
 800d6fa:	643b      	str	r3, [r7, #64]	; 0x40
 800d6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	00da      	lsls	r2, r3, #3
 800d70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d70c:	4413      	add	r3, r2
 800d70e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d712:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d718:	b29a      	uxth	r2, r3
 800d71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d71c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	895b      	ldrh	r3, [r3, #10]
 800d72a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6959      	ldr	r1, [r3, #20]
 800d73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d73e:	b29b      	uxth	r3, r3
 800d740:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d744:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d748:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d74c:	6800      	ldr	r0, [r0, #0]
 800d74e:	f001 f89e 	bl	800e88e <USB_WritePMA>
 800d752:	e227      	b.n	800dba4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	6a1b      	ldr	r3, [r3, #32]
 800d760:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	b29b      	uxth	r3, r3
 800d782:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d78a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d79c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	441a      	add	r2, r3
 800d7a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d7ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	461a      	mov	r2, r3
 800d7de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7e0:	4413      	add	r3, r2
 800d7e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	00da      	lsls	r2, r3, #3
 800d7f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7f4:	4413      	add	r3, r2
 800d7f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d7fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d800:	b29a      	uxth	r2, r3
 800d802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d804:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d80a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	891b      	ldrh	r3, [r3, #8]
 800d812:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	6959      	ldr	r1, [r3, #20]
 800d822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d826:	b29b      	uxth	r3, r3
 800d828:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d82c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d830:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d834:	6800      	ldr	r0, [r0, #0]
 800d836:	f001 f82a 	bl	800e88e <USB_WritePMA>
 800d83a:	e1b3      	b.n	800dba4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	6a1a      	ldr	r2, [r3, #32]
 800d848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d84c:	1ad2      	subs	r2, r2, r3
 800d84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d85e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4413      	add	r3, r2
 800d874:	881b      	ldrh	r3, [r3, #0]
 800d876:	b29b      	uxth	r3, r3
 800d878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f000 80c6 	beq.w	800da0e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	673b      	str	r3, [r7, #112]	; 0x70
 800d88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	785b      	ldrb	r3, [r3, #1]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d177      	bne.n	800d98e <USB_EPStartXfer+0xb18>
 800d89e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8be:	4413      	add	r3, r2
 800d8c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	00da      	lsls	r2, r3, #3
 800d8d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d8d8:	667b      	str	r3, [r7, #100]	; 0x64
 800d8da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8e4:	b29a      	uxth	r2, r3
 800d8e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8e8:	801a      	strh	r2, [r3, #0]
 800d8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8ee:	2b3e      	cmp	r3, #62	; 0x3e
 800d8f0:	d921      	bls.n	800d936 <USB_EPStartXfer+0xac0>
 800d8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8f6:	095b      	lsrs	r3, r3, #5
 800d8f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d900:	f003 031f 	and.w	r3, r3, #31
 800d904:	2b00      	cmp	r3, #0
 800d906:	d104      	bne.n	800d912 <USB_EPStartXfer+0xa9c>
 800d908:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d90c:	3b01      	subs	r3, #1
 800d90e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	b29a      	uxth	r2, r3
 800d918:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	029b      	lsls	r3, r3, #10
 800d920:	b29b      	uxth	r3, r3
 800d922:	4313      	orrs	r3, r2
 800d924:	b29b      	uxth	r3, r3
 800d926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d92a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d92e:	b29a      	uxth	r2, r3
 800d930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d932:	801a      	strh	r2, [r3, #0]
 800d934:	e050      	b.n	800d9d8 <USB_EPStartXfer+0xb62>
 800d936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d10a      	bne.n	800d954 <USB_EPStartXfer+0xade>
 800d93e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d940:	881b      	ldrh	r3, [r3, #0]
 800d942:	b29b      	uxth	r3, r3
 800d944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d950:	801a      	strh	r2, [r3, #0]
 800d952:	e041      	b.n	800d9d8 <USB_EPStartXfer+0xb62>
 800d954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d958:	085b      	lsrs	r3, r3, #1
 800d95a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d962:	f003 0301 	and.w	r3, r3, #1
 800d966:	2b00      	cmp	r3, #0
 800d968:	d004      	beq.n	800d974 <USB_EPStartXfer+0xafe>
 800d96a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d96e:	3301      	adds	r3, #1
 800d970:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	b29a      	uxth	r2, r3
 800d97a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d97e:	b29b      	uxth	r3, r3
 800d980:	029b      	lsls	r3, r3, #10
 800d982:	b29b      	uxth	r3, r3
 800d984:	4313      	orrs	r3, r2
 800d986:	b29a      	uxth	r2, r3
 800d988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d98a:	801a      	strh	r2, [r3, #0]
 800d98c:	e024      	b.n	800d9d8 <USB_EPStartXfer+0xb62>
 800d98e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	785b      	ldrb	r3, [r3, #1]
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d11c      	bne.n	800d9d8 <USB_EPStartXfer+0xb62>
 800d99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9b2:	4413      	add	r3, r2
 800d9b4:	673b      	str	r3, [r7, #112]	; 0x70
 800d9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	00da      	lsls	r2, r3, #3
 800d9c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9c6:	4413      	add	r3, r2
 800d9c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d9cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	895b      	ldrh	r3, [r3, #10]
 800d9e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6959      	ldr	r1, [r3, #20]
 800d9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d9fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800da02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800da06:	6800      	ldr	r0, [r0, #0]
 800da08:	f000 ff41 	bl	800e88e <USB_WritePMA>
 800da0c:	e0ca      	b.n	800dba4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800da0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	785b      	ldrb	r3, [r3, #1]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d177      	bne.n	800db0e <USB_EPStartXfer+0xc98>
 800da1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	67fb      	str	r3, [r7, #124]	; 0x7c
 800da2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da38:	b29b      	uxth	r3, r3
 800da3a:	461a      	mov	r2, r3
 800da3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da3e:	4413      	add	r3, r2
 800da40:	67fb      	str	r3, [r7, #124]	; 0x7c
 800da42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	00da      	lsls	r2, r3, #3
 800da50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da52:	4413      	add	r3, r2
 800da54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800da58:	67bb      	str	r3, [r7, #120]	; 0x78
 800da5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da5c:	881b      	ldrh	r3, [r3, #0]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da64:	b29a      	uxth	r2, r3
 800da66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da68:	801a      	strh	r2, [r3, #0]
 800da6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da6e:	2b3e      	cmp	r3, #62	; 0x3e
 800da70:	d921      	bls.n	800dab6 <USB_EPStartXfer+0xc40>
 800da72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da76:	095b      	lsrs	r3, r3, #5
 800da78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800da7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da80:	f003 031f 	and.w	r3, r3, #31
 800da84:	2b00      	cmp	r3, #0
 800da86:	d104      	bne.n	800da92 <USB_EPStartXfer+0xc1c>
 800da88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800da8c:	3b01      	subs	r3, #1
 800da8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800da92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da94:	881b      	ldrh	r3, [r3, #0]
 800da96:	b29a      	uxth	r2, r3
 800da98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	029b      	lsls	r3, r3, #10
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	4313      	orrs	r3, r2
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800daaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800daae:	b29a      	uxth	r2, r3
 800dab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dab2:	801a      	strh	r2, [r3, #0]
 800dab4:	e05c      	b.n	800db70 <USB_EPStartXfer+0xcfa>
 800dab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d10a      	bne.n	800dad4 <USB_EPStartXfer+0xc5e>
 800dabe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dac0:	881b      	ldrh	r3, [r3, #0]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dacc:	b29a      	uxth	r2, r3
 800dace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dad0:	801a      	strh	r2, [r3, #0]
 800dad2:	e04d      	b.n	800db70 <USB_EPStartXfer+0xcfa>
 800dad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dad8:	085b      	lsrs	r3, r3, #1
 800dada:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800dade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dae2:	f003 0301 	and.w	r3, r3, #1
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d004      	beq.n	800daf4 <USB_EPStartXfer+0xc7e>
 800daea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800daee:	3301      	adds	r3, #1
 800daf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800daf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800daf6:	881b      	ldrh	r3, [r3, #0]
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800dafe:	b29b      	uxth	r3, r3
 800db00:	029b      	lsls	r3, r3, #10
 800db02:	b29b      	uxth	r3, r3
 800db04:	4313      	orrs	r3, r2
 800db06:	b29a      	uxth	r2, r3
 800db08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db0a:	801a      	strh	r2, [r3, #0]
 800db0c:	e030      	b.n	800db70 <USB_EPStartXfer+0xcfa>
 800db0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	785b      	ldrb	r3, [r3, #1]
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d128      	bne.n	800db70 <USB_EPStartXfer+0xcfa>
 800db1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	461a      	mov	r2, r3
 800db3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db42:	4413      	add	r3, r2
 800db44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	00da      	lsls	r2, r3, #3
 800db56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db5a:	4413      	add	r3, r2
 800db5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800db60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db68:	b29a      	uxth	r2, r3
 800db6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800db70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	891b      	ldrh	r3, [r3, #8]
 800db7c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800db80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	6959      	ldr	r1, [r3, #20]
 800db8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db90:	b29b      	uxth	r3, r3
 800db92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800db96:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800db9a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800db9e:	6800      	ldr	r0, [r0, #0]
 800dba0:	f000 fe75 	bl	800e88e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	4413      	add	r3, r2
 800dbbe:	881b      	ldrh	r3, [r3, #0]
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbca:	817b      	strh	r3, [r7, #10]
 800dbcc:	897b      	ldrh	r3, [r7, #10]
 800dbce:	f083 0310 	eor.w	r3, r3, #16
 800dbd2:	817b      	strh	r3, [r7, #10]
 800dbd4:	897b      	ldrh	r3, [r7, #10]
 800dbd6:	f083 0320 	eor.w	r3, r3, #32
 800dbda:	817b      	strh	r3, [r7, #10]
 800dbdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	441a      	add	r2, r3
 800dbf6:	897b      	ldrh	r3, [r7, #10]
 800dbf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	8013      	strh	r3, [r2, #0]
 800dc0c:	f000 bcde 	b.w	800e5cc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800dc10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	7b1b      	ldrb	r3, [r3, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f040 80bb 	bne.w	800dd98 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800dc22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	699a      	ldr	r2, [r3, #24]
 800dc2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	691b      	ldr	r3, [r3, #16]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d917      	bls.n	800dc6e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800dc3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	691b      	ldr	r3, [r3, #16]
 800dc4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800dc4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	699a      	ldr	r2, [r3, #24]
 800dc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc5e:	1ad2      	subs	r2, r2, r3
 800dc60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	619a      	str	r2, [r3, #24]
 800dc6c:	e00e      	b.n	800dc8c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800dc6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	699b      	ldr	r3, [r3, #24]
 800dc7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800dc7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800dc8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	461a      	mov	r2, r3
 800dcac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dcb0:	4413      	add	r3, r2
 800dcb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dcb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	00da      	lsls	r2, r3, #3
 800dcc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dcc8:	4413      	add	r3, r2
 800dcca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dcce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dcd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcd6:	881b      	ldrh	r3, [r3, #0]
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dce4:	801a      	strh	r2, [r3, #0]
 800dce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcea:	2b3e      	cmp	r3, #62	; 0x3e
 800dcec:	d924      	bls.n	800dd38 <USB_EPStartXfer+0xec2>
 800dcee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcf2:	095b      	lsrs	r3, r3, #5
 800dcf4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dcf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcfc:	f003 031f 	and.w	r3, r3, #31
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d104      	bne.n	800dd0e <USB_EPStartXfer+0xe98>
 800dd04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dd0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd12:	881b      	ldrh	r3, [r3, #0]
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	029b      	lsls	r3, r3, #10
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	4313      	orrs	r3, r2
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd32:	801a      	strh	r2, [r3, #0]
 800dd34:	f000 bc10 	b.w	800e558 <USB_EPStartXfer+0x16e2>
 800dd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10c      	bne.n	800dd5a <USB_EPStartXfer+0xee4>
 800dd40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd44:	881b      	ldrh	r3, [r3, #0]
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd56:	801a      	strh	r2, [r3, #0]
 800dd58:	e3fe      	b.n	800e558 <USB_EPStartXfer+0x16e2>
 800dd5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd5e:	085b      	lsrs	r3, r3, #1
 800dd60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd68:	f003 0301 	and.w	r3, r3, #1
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d004      	beq.n	800dd7a <USB_EPStartXfer+0xf04>
 800dd70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dd74:	3301      	adds	r3, #1
 800dd76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dd7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd7e:	881b      	ldrh	r3, [r3, #0]
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	029b      	lsls	r3, r3, #10
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd94:	801a      	strh	r2, [r3, #0]
 800dd96:	e3df      	b.n	800e558 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800dd98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	78db      	ldrb	r3, [r3, #3]
 800dda4:	2b02      	cmp	r3, #2
 800dda6:	f040 8218 	bne.w	800e1da <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ddaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	785b      	ldrb	r3, [r3, #1]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f040 809d 	bne.w	800def6 <USB_EPStartXfer+0x1080>
 800ddbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ddca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	461a      	mov	r2, r3
 800dddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dde0:	4413      	add	r3, r2
 800dde2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dde6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	00da      	lsls	r2, r3, #3
 800ddf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ddf8:	4413      	add	r3, r2
 800ddfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ddfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800de02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de06:	881b      	ldrh	r3, [r3, #0]
 800de08:	b29b      	uxth	r3, r3
 800de0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de0e:	b29a      	uxth	r2, r3
 800de10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de14:	801a      	strh	r2, [r3, #0]
 800de16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	2b3e      	cmp	r3, #62	; 0x3e
 800de24:	d92b      	bls.n	800de7e <USB_EPStartXfer+0x1008>
 800de26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	691b      	ldr	r3, [r3, #16]
 800de32:	095b      	lsrs	r3, r3, #5
 800de34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800de38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	691b      	ldr	r3, [r3, #16]
 800de44:	f003 031f 	and.w	r3, r3, #31
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d104      	bne.n	800de56 <USB_EPStartXfer+0xfe0>
 800de4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de50:	3b01      	subs	r3, #1
 800de52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800de56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de5a:	881b      	ldrh	r3, [r3, #0]
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de62:	b29b      	uxth	r3, r3
 800de64:	029b      	lsls	r3, r3, #10
 800de66:	b29b      	uxth	r3, r3
 800de68:	4313      	orrs	r3, r2
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de74:	b29a      	uxth	r2, r3
 800de76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de7a:	801a      	strh	r2, [r3, #0]
 800de7c:	e070      	b.n	800df60 <USB_EPStartXfer+0x10ea>
 800de7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	691b      	ldr	r3, [r3, #16]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d10c      	bne.n	800dea8 <USB_EPStartXfer+0x1032>
 800de8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de92:	881b      	ldrh	r3, [r3, #0]
 800de94:	b29b      	uxth	r3, r3
 800de96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dea4:	801a      	strh	r2, [r3, #0]
 800dea6:	e05b      	b.n	800df60 <USB_EPStartXfer+0x10ea>
 800dea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800deac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	085b      	lsrs	r3, r3, #1
 800deb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800deba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800debe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	f003 0301 	and.w	r3, r3, #1
 800deca:	2b00      	cmp	r3, #0
 800decc:	d004      	beq.n	800ded8 <USB_EPStartXfer+0x1062>
 800dece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ded2:	3301      	adds	r3, #1
 800ded4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ded8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dedc:	881b      	ldrh	r3, [r3, #0]
 800dede:	b29a      	uxth	r2, r3
 800dee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	029b      	lsls	r3, r3, #10
 800dee8:	b29b      	uxth	r3, r3
 800deea:	4313      	orrs	r3, r2
 800deec:	b29a      	uxth	r2, r3
 800deee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800def2:	801a      	strh	r2, [r3, #0]
 800def4:	e034      	b.n	800df60 <USB_EPStartXfer+0x10ea>
 800def6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800defa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	785b      	ldrb	r3, [r3, #1]
 800df02:	2b01      	cmp	r3, #1
 800df04:	d12c      	bne.n	800df60 <USB_EPStartXfer+0x10ea>
 800df06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800df14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df22:	b29b      	uxth	r3, r3
 800df24:	461a      	mov	r2, r3
 800df26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df2a:	4413      	add	r3, r2
 800df2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800df30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	00da      	lsls	r2, r3, #3
 800df3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df42:	4413      	add	r3, r2
 800df44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800df48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800df4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	b29a      	uxth	r2, r3
 800df5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800df5e:	801a      	strh	r2, [r3, #0]
 800df60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800df6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	785b      	ldrb	r3, [r3, #1]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f040 809d 	bne.w	800e0ba <USB_EPStartXfer+0x1244>
 800df80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800df8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	461a      	mov	r2, r3
 800dfa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dfa4:	4413      	add	r3, r2
 800dfa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dfaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	00da      	lsls	r2, r3, #3
 800dfb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dfbc:	4413      	add	r3, r2
 800dfbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dfc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dfc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfca:	881b      	ldrh	r3, [r3, #0]
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfd8:	801a      	strh	r2, [r3, #0]
 800dfda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	2b3e      	cmp	r3, #62	; 0x3e
 800dfe8:	d92b      	bls.n	800e042 <USB_EPStartXfer+0x11cc>
 800dfea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	095b      	lsrs	r3, r3, #5
 800dff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	691b      	ldr	r3, [r3, #16]
 800e008:	f003 031f 	and.w	r3, r3, #31
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d104      	bne.n	800e01a <USB_EPStartXfer+0x11a4>
 800e010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e014:	3b01      	subs	r3, #1
 800e016:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e01a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e01e:	881b      	ldrh	r3, [r3, #0]
 800e020:	b29a      	uxth	r2, r3
 800e022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e026:	b29b      	uxth	r3, r3
 800e028:	029b      	lsls	r3, r3, #10
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	4313      	orrs	r3, r2
 800e02e:	b29b      	uxth	r3, r3
 800e030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e038:	b29a      	uxth	r2, r3
 800e03a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e03e:	801a      	strh	r2, [r3, #0]
 800e040:	e069      	b.n	800e116 <USB_EPStartXfer+0x12a0>
 800e042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	691b      	ldr	r3, [r3, #16]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10c      	bne.n	800e06c <USB_EPStartXfer+0x11f6>
 800e052:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e056:	881b      	ldrh	r3, [r3, #0]
 800e058:	b29b      	uxth	r3, r3
 800e05a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e05e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e062:	b29a      	uxth	r2, r3
 800e064:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e068:	801a      	strh	r2, [r3, #0]
 800e06a:	e054      	b.n	800e116 <USB_EPStartXfer+0x12a0>
 800e06c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	691b      	ldr	r3, [r3, #16]
 800e078:	085b      	lsrs	r3, r3, #1
 800e07a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e07e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	f003 0301 	and.w	r3, r3, #1
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d004      	beq.n	800e09c <USB_EPStartXfer+0x1226>
 800e092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e096:	3301      	adds	r3, #1
 800e098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e09c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e0a0:	881b      	ldrh	r3, [r3, #0]
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	029b      	lsls	r3, r3, #10
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e0b6:	801a      	strh	r2, [r3, #0]
 800e0b8:	e02d      	b.n	800e116 <USB_EPStartXfer+0x12a0>
 800e0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	785b      	ldrb	r3, [r3, #1]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d125      	bne.n	800e116 <USB_EPStartXfer+0x12a0>
 800e0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	461a      	mov	r2, r3
 800e0dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e0e0:	4413      	add	r3, r2
 800e0e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	00da      	lsls	r2, r3, #3
 800e0f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e0f8:	4413      	add	r3, r2
 800e0fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e0fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	691b      	ldr	r3, [r3, #16]
 800e10e:	b29a      	uxth	r2, r3
 800e110:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e114:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e11a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	69db      	ldr	r3, [r3, #28]
 800e122:	2b00      	cmp	r3, #0
 800e124:	f000 8218 	beq.w	800e558 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e12c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	4413      	add	r3, r2
 800e142:	881b      	ldrh	r3, [r3, #0]
 800e144:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e148:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e14c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e150:	2b00      	cmp	r3, #0
 800e152:	d005      	beq.n	800e160 <USB_EPStartXfer+0x12ea>
 800e154:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d10d      	bne.n	800e17c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e160:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f040 81f5 	bne.w	800e558 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e16e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e176:	2b00      	cmp	r3, #0
 800e178:	f040 81ee 	bne.w	800e558 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e18a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	4413      	add	r3, r2
 800e196:	881b      	ldrh	r3, [r3, #0]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1a2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800e1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	009b      	lsls	r3, r3, #2
 800e1be:	441a      	add	r2, r3
 800e1c0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e1c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	8013      	strh	r3, [r2, #0]
 800e1d8:	e1be      	b.n	800e558 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	78db      	ldrb	r3, [r3, #3]
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	f040 81b4 	bne.w	800e554 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	699a      	ldr	r2, [r3, #24]
 800e1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	429a      	cmp	r2, r3
 800e206:	d917      	bls.n	800e238 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800e208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e20c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800e218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	699a      	ldr	r2, [r3, #24]
 800e224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e228:	1ad2      	subs	r2, r2, r3
 800e22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	619a      	str	r2, [r3, #24]
 800e236:	e00e      	b.n	800e256 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800e238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e23c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800e248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2200      	movs	r2, #0
 800e254:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e25a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	785b      	ldrb	r3, [r3, #1]
 800e262:	2b00      	cmp	r3, #0
 800e264:	f040 8085 	bne.w	800e372 <USB_EPStartXfer+0x14fc>
 800e268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e26c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e27a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e284:	b29b      	uxth	r3, r3
 800e286:	461a      	mov	r2, r3
 800e288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e28c:	4413      	add	r3, r2
 800e28e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	00da      	lsls	r2, r3, #3
 800e2a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e2a4:	4413      	add	r3, r2
 800e2a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e2aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e2ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e2c0:	801a      	strh	r2, [r3, #0]
 800e2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2c6:	2b3e      	cmp	r3, #62	; 0x3e
 800e2c8:	d923      	bls.n	800e312 <USB_EPStartXfer+0x149c>
 800e2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2ce:	095b      	lsrs	r3, r3, #5
 800e2d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2d8:	f003 031f 	and.w	r3, r3, #31
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d104      	bne.n	800e2ea <USB_EPStartXfer+0x1474>
 800e2e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e2ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e2ee:	881b      	ldrh	r3, [r3, #0]
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	029b      	lsls	r3, r3, #10
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e308:	b29a      	uxth	r2, r3
 800e30a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e30e:	801a      	strh	r2, [r3, #0]
 800e310:	e060      	b.n	800e3d4 <USB_EPStartXfer+0x155e>
 800e312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10c      	bne.n	800e334 <USB_EPStartXfer+0x14be>
 800e31a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e31e:	881b      	ldrh	r3, [r3, #0]
 800e320:	b29b      	uxth	r3, r3
 800e322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e330:	801a      	strh	r2, [r3, #0]
 800e332:	e04f      	b.n	800e3d4 <USB_EPStartXfer+0x155e>
 800e334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e338:	085b      	lsrs	r3, r3, #1
 800e33a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e342:	f003 0301 	and.w	r3, r3, #1
 800e346:	2b00      	cmp	r3, #0
 800e348:	d004      	beq.n	800e354 <USB_EPStartXfer+0x14de>
 800e34a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e34e:	3301      	adds	r3, #1
 800e350:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e360:	b29b      	uxth	r3, r3
 800e362:	029b      	lsls	r3, r3, #10
 800e364:	b29b      	uxth	r3, r3
 800e366:	4313      	orrs	r3, r2
 800e368:	b29a      	uxth	r2, r3
 800e36a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e36e:	801a      	strh	r2, [r3, #0]
 800e370:	e030      	b.n	800e3d4 <USB_EPStartXfer+0x155e>
 800e372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	785b      	ldrb	r3, [r3, #1]
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d128      	bne.n	800e3d4 <USB_EPStartXfer+0x155e>
 800e382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3a6:	4413      	add	r3, r2
 800e3a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	00da      	lsls	r2, r3, #3
 800e3ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e3be:	4413      	add	r3, r2
 800e3c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e3c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e3d2:	801a      	strh	r2, [r3, #0]
 800e3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e3e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	785b      	ldrb	r3, [r3, #1]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f040 8085 	bne.w	800e4fe <USB_EPStartXfer+0x1688>
 800e3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e410:	b29b      	uxth	r3, r3
 800e412:	461a      	mov	r2, r3
 800e414:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e418:	4413      	add	r3, r2
 800e41a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	00da      	lsls	r2, r3, #3
 800e42c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e430:	4413      	add	r3, r2
 800e432:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e43a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e43e:	881b      	ldrh	r3, [r3, #0]
 800e440:	b29b      	uxth	r3, r3
 800e442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e446:	b29a      	uxth	r2, r3
 800e448:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e44c:	801a      	strh	r2, [r3, #0]
 800e44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e452:	2b3e      	cmp	r3, #62	; 0x3e
 800e454:	d923      	bls.n	800e49e <USB_EPStartXfer+0x1628>
 800e456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e45a:	095b      	lsrs	r3, r3, #5
 800e45c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e464:	f003 031f 	and.w	r3, r3, #31
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d104      	bne.n	800e476 <USB_EPStartXfer+0x1600>
 800e46c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e470:	3b01      	subs	r3, #1
 800e472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e47a:	881b      	ldrh	r3, [r3, #0]
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e482:	b29b      	uxth	r3, r3
 800e484:	029b      	lsls	r3, r3, #10
 800e486:	b29b      	uxth	r3, r3
 800e488:	4313      	orrs	r3, r2
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e494:	b29a      	uxth	r2, r3
 800e496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e49a:	801a      	strh	r2, [r3, #0]
 800e49c:	e05c      	b.n	800e558 <USB_EPStartXfer+0x16e2>
 800e49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10c      	bne.n	800e4c0 <USB_EPStartXfer+0x164a>
 800e4a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4aa:	881b      	ldrh	r3, [r3, #0]
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e4b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4bc:	801a      	strh	r2, [r3, #0]
 800e4be:	e04b      	b.n	800e558 <USB_EPStartXfer+0x16e2>
 800e4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4c4:	085b      	lsrs	r3, r3, #1
 800e4c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4ce:	f003 0301 	and.w	r3, r3, #1
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d004      	beq.n	800e4e0 <USB_EPStartXfer+0x166a>
 800e4d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e4da:	3301      	adds	r3, #1
 800e4dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e4e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	029b      	lsls	r3, r3, #10
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4fa:	801a      	strh	r2, [r3, #0]
 800e4fc:	e02c      	b.n	800e558 <USB_EPStartXfer+0x16e2>
 800e4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	785b      	ldrb	r3, [r3, #1]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d124      	bne.n	800e558 <USB_EPStartXfer+0x16e2>
 800e50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	461a      	mov	r2, r3
 800e520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e524:	4413      	add	r3, r2
 800e526:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	00da      	lsls	r2, r3, #3
 800e538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e53c:	4413      	add	r3, r2
 800e53e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e550:	801a      	strh	r2, [r3, #0]
 800e552:	e001      	b.n	800e558 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e554:	2301      	movs	r3, #1
 800e556:	e03a      	b.n	800e5ce <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e55c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4413      	add	r3, r2
 800e572:	881b      	ldrh	r3, [r3, #0]
 800e574:	b29b      	uxth	r3, r3
 800e576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e57e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e582:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e586:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e58a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e58e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e592:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e596:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e59e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	441a      	add	r2, r3
 800e5b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e5b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e5bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e5c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	785b      	ldrb	r3, [r3, #1]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d020      	beq.n	800e62c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	4413      	add	r3, r2
 800e5f4:	881b      	ldrh	r3, [r3, #0]
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e600:	81bb      	strh	r3, [r7, #12]
 800e602:	89bb      	ldrh	r3, [r7, #12]
 800e604:	f083 0310 	eor.w	r3, r3, #16
 800e608:	81bb      	strh	r3, [r7, #12]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	441a      	add	r2, r3
 800e614:	89bb      	ldrh	r3, [r7, #12]
 800e616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e61a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e61e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e626:	b29b      	uxth	r3, r3
 800e628:	8013      	strh	r3, [r2, #0]
 800e62a:	e01f      	b.n	800e66c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	b29b      	uxth	r3, r3
 800e63a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e63e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e642:	81fb      	strh	r3, [r7, #14]
 800e644:	89fb      	ldrh	r3, [r7, #14]
 800e646:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e64a:	81fb      	strh	r3, [r7, #14]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	441a      	add	r2, r3
 800e656:	89fb      	ldrh	r3, [r7, #14]
 800e658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e65c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e668:	b29b      	uxth	r3, r3
 800e66a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3714      	adds	r7, #20
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr

0800e67a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b087      	sub	sp, #28
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
 800e682:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	7b1b      	ldrb	r3, [r3, #12]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f040 809d 	bne.w	800e7c8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	785b      	ldrb	r3, [r3, #1]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d04c      	beq.n	800e730 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	4413      	add	r3, r2
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	823b      	strh	r3, [r7, #16]
 800e6a4:	8a3b      	ldrh	r3, [r7, #16]
 800e6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d01b      	beq.n	800e6e6 <USB_EPClearStall+0x6c>
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	4413      	add	r3, r2
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e6c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6c4:	81fb      	strh	r3, [r7, #14]
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	441a      	add	r2, r3
 800e6d0:	89fb      	ldrh	r3, [r7, #14]
 800e6d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	78db      	ldrb	r3, [r3, #3]
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d06c      	beq.n	800e7c8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4413      	add	r3, r2
 800e6f8:	881b      	ldrh	r3, [r3, #0]
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e704:	81bb      	strh	r3, [r7, #12]
 800e706:	89bb      	ldrh	r3, [r7, #12]
 800e708:	f083 0320 	eor.w	r3, r3, #32
 800e70c:	81bb      	strh	r3, [r7, #12]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	441a      	add	r2, r3
 800e718:	89bb      	ldrh	r3, [r7, #12]
 800e71a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e71e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	8013      	strh	r3, [r2, #0]
 800e72e:	e04b      	b.n	800e7c8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	4413      	add	r3, r2
 800e73a:	881b      	ldrh	r3, [r3, #0]
 800e73c:	82fb      	strh	r3, [r7, #22]
 800e73e:	8afb      	ldrh	r3, [r7, #22]
 800e740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e744:	2b00      	cmp	r3, #0
 800e746:	d01b      	beq.n	800e780 <USB_EPClearStall+0x106>
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	881b      	ldrh	r3, [r3, #0]
 800e754:	b29b      	uxth	r3, r3
 800e756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e75a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e75e:	82bb      	strh	r3, [r7, #20]
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	441a      	add	r2, r3
 800e76a:	8abb      	ldrh	r3, [r7, #20]
 800e76c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	4413      	add	r3, r2
 800e78a:	881b      	ldrh	r3, [r3, #0]
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e796:	827b      	strh	r3, [r7, #18]
 800e798:	8a7b      	ldrh	r3, [r7, #18]
 800e79a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e79e:	827b      	strh	r3, [r7, #18]
 800e7a0:	8a7b      	ldrh	r3, [r7, #18]
 800e7a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e7a6:	827b      	strh	r3, [r7, #18]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	441a      	add	r2, r3
 800e7b2:	8a7b      	ldrh	r3, [r7, #18]
 800e7b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	371c      	adds	r7, #28
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr

0800e7d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e7d6:	b480      	push	{r7}
 800e7d8:	b083      	sub	sp, #12
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
 800e7de:	460b      	mov	r3, r1
 800e7e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e7e2:	78fb      	ldrb	r3, [r7, #3]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d103      	bne.n	800e7f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2280      	movs	r2, #128	; 0x80
 800e7ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	370c      	adds	r7, #12
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr

0800e7fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e7fe:	b480      	push	{r7}
 800e800:	b083      	sub	sp, #12
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e816:	b29a      	uxth	r2, r3
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e81e:	2300      	movs	r3, #0
}
 800e820:	4618      	mov	r0, r3
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e840:	b29a      	uxth	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	370c      	adds	r7, #12
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr

0800e856 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e856:	b480      	push	{r7}
 800e858:	b085      	sub	sp, #20
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e864:	b29b      	uxth	r3, r3
 800e866:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e868:	68fb      	ldr	r3, [r7, #12]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3714      	adds	r7, #20
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr

0800e876 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800e876:	b480      	push	{r7}
 800e878:	b083      	sub	sp, #12
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e880:	2300      	movs	r3, #0
}
 800e882:	4618      	mov	r0, r3
 800e884:	370c      	adds	r7, #12
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr

0800e88e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e88e:	b480      	push	{r7}
 800e890:	b08b      	sub	sp, #44	; 0x2c
 800e892:	af00      	add	r7, sp, #0
 800e894:	60f8      	str	r0, [r7, #12]
 800e896:	60b9      	str	r1, [r7, #8]
 800e898:	4611      	mov	r1, r2
 800e89a:	461a      	mov	r2, r3
 800e89c:	460b      	mov	r3, r1
 800e89e:	80fb      	strh	r3, [r7, #6]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e8a4:	88bb      	ldrh	r3, [r7, #4]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	085b      	lsrs	r3, r3, #1
 800e8aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e8b4:	88fa      	ldrh	r2, [r7, #6]
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e8be:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	627b      	str	r3, [r7, #36]	; 0x24
 800e8c4:	e01b      	b.n	800e8fe <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	021b      	lsls	r3, r3, #8
 800e8d4:	b21a      	sxth	r2, r3
 800e8d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	b21b      	sxth	r3, r3
 800e8de:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e8e0:	6a3b      	ldr	r3, [r7, #32]
 800e8e2:	8a7a      	ldrh	r2, [r7, #18]
 800e8e4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e8e6:	6a3b      	ldr	r3, [r7, #32]
 800e8e8:	3302      	adds	r3, #2
 800e8ea:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e900:	2b00      	cmp	r3, #0
 800e902:	d1e0      	bne.n	800e8c6 <USB_WritePMA+0x38>
  }
}
 800e904:	bf00      	nop
 800e906:	bf00      	nop
 800e908:	372c      	adds	r7, #44	; 0x2c
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr

0800e912 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e912:	b480      	push	{r7}
 800e914:	b08b      	sub	sp, #44	; 0x2c
 800e916:	af00      	add	r7, sp, #0
 800e918:	60f8      	str	r0, [r7, #12]
 800e91a:	60b9      	str	r1, [r7, #8]
 800e91c:	4611      	mov	r1, r2
 800e91e:	461a      	mov	r2, r3
 800e920:	460b      	mov	r3, r1
 800e922:	80fb      	strh	r3, [r7, #6]
 800e924:	4613      	mov	r3, r2
 800e926:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e928:	88bb      	ldrh	r3, [r7, #4]
 800e92a:	085b      	lsrs	r3, r3, #1
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e938:	88fa      	ldrh	r2, [r7, #6]
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	4413      	add	r3, r2
 800e93e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e942:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	627b      	str	r3, [r7, #36]	; 0x24
 800e948:	e018      	b.n	800e97c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e94a:	6a3b      	ldr	r3, [r7, #32]
 800e94c:	881b      	ldrh	r3, [r3, #0]
 800e94e:	b29b      	uxth	r3, r3
 800e950:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e952:	6a3b      	ldr	r3, [r7, #32]
 800e954:	3302      	adds	r3, #2
 800e956:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	b2da      	uxtb	r2, r3
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	3301      	adds	r3, #1
 800e964:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	0a1b      	lsrs	r3, r3, #8
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	3301      	adds	r3, #1
 800e974:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	3b01      	subs	r3, #1
 800e97a:	627b      	str	r3, [r7, #36]	; 0x24
 800e97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d1e3      	bne.n	800e94a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e982:	88bb      	ldrh	r3, [r7, #4]
 800e984:	f003 0301 	and.w	r3, r3, #1
 800e988:	b29b      	uxth	r3, r3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d007      	beq.n	800e99e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e98e:	6a3b      	ldr	r3, [r7, #32]
 800e990:	881b      	ldrh	r3, [r3, #0]
 800e992:	b29b      	uxth	r3, r3
 800e994:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	b2da      	uxtb	r2, r3
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	701a      	strb	r2, [r3, #0]
  }
}
 800e99e:	bf00      	nop
 800e9a0:	372c      	adds	r7, #44	; 0x2c
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr
	...

0800e9ac <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800e9b8:	2010      	movs	r0, #16
 800e9ba:	f002 f949 	bl	8010c50 <USBD_static_malloc>
 800e9be:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d109      	bne.n	800e9da <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	32b0      	adds	r2, #176	; 0xb0
 800e9d0:	2100      	movs	r1, #0
 800e9d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e9d6:	2302      	movs	r3, #2
 800e9d8:	e048      	b.n	800ea6c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	32b0      	adds	r2, #176	; 0xb0
 800e9e4:	68f9      	ldr	r1, [r7, #12]
 800e9e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	32b0      	adds	r2, #176	; 0xb0
 800e9f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	7c1b      	ldrb	r3, [r3, #16]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d10d      	bne.n	800ea22 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800ea06:	4b1b      	ldr	r3, [pc, #108]	; (800ea74 <USBD_HID_Init+0xc8>)
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	f003 020f 	and.w	r2, r3, #15
 800ea0e:	6879      	ldr	r1, [r7, #4]
 800ea10:	4613      	mov	r3, r2
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	4413      	add	r3, r2
 800ea16:	009b      	lsls	r3, r3, #2
 800ea18:	440b      	add	r3, r1
 800ea1a:	3326      	adds	r3, #38	; 0x26
 800ea1c:	2207      	movs	r2, #7
 800ea1e:	801a      	strh	r2, [r3, #0]
 800ea20:	e00c      	b.n	800ea3c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800ea22:	4b14      	ldr	r3, [pc, #80]	; (800ea74 <USBD_HID_Init+0xc8>)
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	f003 020f 	and.w	r2, r3, #15
 800ea2a:	6879      	ldr	r1, [r7, #4]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	4413      	add	r3, r2
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	440b      	add	r3, r1
 800ea36:	3326      	adds	r3, #38	; 0x26
 800ea38:	220a      	movs	r2, #10
 800ea3a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800ea3c:	4b0d      	ldr	r3, [pc, #52]	; (800ea74 <USBD_HID_Init+0xc8>)
 800ea3e:	7819      	ldrb	r1, [r3, #0]
 800ea40:	2304      	movs	r3, #4
 800ea42:	2203      	movs	r2, #3
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f001 ff19 	bl	801087c <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800ea4a:	4b0a      	ldr	r3, [pc, #40]	; (800ea74 <USBD_HID_Init+0xc8>)
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	f003 020f 	and.w	r2, r3, #15
 800ea52:	6879      	ldr	r1, [r7, #4]
 800ea54:	4613      	mov	r3, r2
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	4413      	add	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	440b      	add	r3, r1
 800ea5e:	3324      	adds	r3, #36	; 0x24
 800ea60:	2201      	movs	r2, #1
 800ea62:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2200      	movs	r2, #0
 800ea68:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	200000ea 	.word	0x200000ea

0800ea78 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	460b      	mov	r3, r1
 800ea82:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800ea84:	4b1f      	ldr	r3, [pc, #124]	; (800eb04 <USBD_HID_DeInit+0x8c>)
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f001 ff34 	bl	80108f8 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800ea90:	4b1c      	ldr	r3, [pc, #112]	; (800eb04 <USBD_HID_DeInit+0x8c>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	f003 020f 	and.w	r2, r3, #15
 800ea98:	6879      	ldr	r1, [r7, #4]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	440b      	add	r3, r1
 800eaa4:	3324      	adds	r3, #36	; 0x24
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800eaaa:	4b16      	ldr	r3, [pc, #88]	; (800eb04 <USBD_HID_DeInit+0x8c>)
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	f003 020f 	and.w	r2, r3, #15
 800eab2:	6879      	ldr	r1, [r7, #4]
 800eab4:	4613      	mov	r3, r2
 800eab6:	009b      	lsls	r3, r3, #2
 800eab8:	4413      	add	r3, r2
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	440b      	add	r3, r1
 800eabe:	3326      	adds	r3, #38	; 0x26
 800eac0:	2200      	movs	r2, #0
 800eac2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	32b0      	adds	r2, #176	; 0xb0
 800eace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d011      	beq.n	800eafa <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	32b0      	adds	r2, #176	; 0xb0
 800eae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eae4:	4618      	mov	r0, r3
 800eae6:	f002 f8c1 	bl	8010c6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	32b0      	adds	r2, #176	; 0xb0
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	200000ea 	.word	0x200000ea

0800eb08 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b086      	sub	sp, #24
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	32b0      	adds	r2, #176	; 0xb0
 800eb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb20:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800eb26:	2300      	movs	r3, #0
 800eb28:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d101      	bne.n	800eb34 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800eb30:	2303      	movs	r3, #3
 800eb32:	e0e8      	b.n	800ed06 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d046      	beq.n	800ebce <USBD_HID_Setup+0xc6>
 800eb40:	2b20      	cmp	r3, #32
 800eb42:	f040 80d8 	bne.w	800ecf6 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	785b      	ldrb	r3, [r3, #1]
 800eb4a:	3b02      	subs	r3, #2
 800eb4c:	2b09      	cmp	r3, #9
 800eb4e:	d836      	bhi.n	800ebbe <USBD_HID_Setup+0xb6>
 800eb50:	a201      	add	r2, pc, #4	; (adr r2, 800eb58 <USBD_HID_Setup+0x50>)
 800eb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb56:	bf00      	nop
 800eb58:	0800ebaf 	.word	0x0800ebaf
 800eb5c:	0800eb8f 	.word	0x0800eb8f
 800eb60:	0800ebbf 	.word	0x0800ebbf
 800eb64:	0800ebbf 	.word	0x0800ebbf
 800eb68:	0800ebbf 	.word	0x0800ebbf
 800eb6c:	0800ebbf 	.word	0x0800ebbf
 800eb70:	0800ebbf 	.word	0x0800ebbf
 800eb74:	0800ebbf 	.word	0x0800ebbf
 800eb78:	0800eb9d 	.word	0x0800eb9d
 800eb7c:	0800eb81 	.word	0x0800eb81
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	885b      	ldrh	r3, [r3, #2]
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	461a      	mov	r2, r3
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	601a      	str	r2, [r3, #0]
          break;
 800eb8c:	e01e      	b.n	800ebcc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2201      	movs	r2, #1
 800eb92:	4619      	mov	r1, r3
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f001 fb73 	bl	8010280 <USBD_CtlSendData>
          break;
 800eb9a:	e017      	b.n	800ebcc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	885b      	ldrh	r3, [r3, #2]
 800eba0:	0a1b      	lsrs	r3, r3, #8
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	461a      	mov	r2, r3
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	605a      	str	r2, [r3, #4]
          break;
 800ebac:	e00e      	b.n	800ebcc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	3304      	adds	r3, #4
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f001 fb62 	bl	8010280 <USBD_CtlSendData>
          break;
 800ebbc:	e006      	b.n	800ebcc <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ebbe:	6839      	ldr	r1, [r7, #0]
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f001 faec 	bl	801019e <USBD_CtlError>
          ret = USBD_FAIL;
 800ebc6:	2303      	movs	r3, #3
 800ebc8:	75fb      	strb	r3, [r7, #23]
          break;
 800ebca:	bf00      	nop
      }
      break;
 800ebcc:	e09a      	b.n	800ed04 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	785b      	ldrb	r3, [r3, #1]
 800ebd2:	2b0b      	cmp	r3, #11
 800ebd4:	f200 8086 	bhi.w	800ece4 <USBD_HID_Setup+0x1dc>
 800ebd8:	a201      	add	r2, pc, #4	; (adr r2, 800ebe0 <USBD_HID_Setup+0xd8>)
 800ebda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebde:	bf00      	nop
 800ebe0:	0800ec11 	.word	0x0800ec11
 800ebe4:	0800ecf3 	.word	0x0800ecf3
 800ebe8:	0800ece5 	.word	0x0800ece5
 800ebec:	0800ece5 	.word	0x0800ece5
 800ebf0:	0800ece5 	.word	0x0800ece5
 800ebf4:	0800ece5 	.word	0x0800ece5
 800ebf8:	0800ec3b 	.word	0x0800ec3b
 800ebfc:	0800ece5 	.word	0x0800ece5
 800ec00:	0800ece5 	.word	0x0800ece5
 800ec04:	0800ece5 	.word	0x0800ece5
 800ec08:	0800ec93 	.word	0x0800ec93
 800ec0c:	0800ecbd 	.word	0x0800ecbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b03      	cmp	r3, #3
 800ec1a:	d107      	bne.n	800ec2c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ec1c:	f107 030a 	add.w	r3, r7, #10
 800ec20:	2202      	movs	r2, #2
 800ec22:	4619      	mov	r1, r3
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f001 fb2b 	bl	8010280 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ec2a:	e063      	b.n	800ecf4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f001 fab5 	bl	801019e <USBD_CtlError>
            ret = USBD_FAIL;
 800ec34:	2303      	movs	r3, #3
 800ec36:	75fb      	strb	r3, [r7, #23]
          break;
 800ec38:	e05c      	b.n	800ecf4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	885b      	ldrh	r3, [r3, #2]
 800ec3e:	0a1b      	lsrs	r3, r3, #8
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	2b22      	cmp	r3, #34	; 0x22
 800ec44:	d108      	bne.n	800ec58 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	88db      	ldrh	r3, [r3, #6]
 800ec4a:	2b4a      	cmp	r3, #74	; 0x4a
 800ec4c:	bf28      	it	cs
 800ec4e:	234a      	movcs	r3, #74	; 0x4a
 800ec50:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800ec52:	4b2f      	ldr	r3, [pc, #188]	; (800ed10 <USBD_HID_Setup+0x208>)
 800ec54:	613b      	str	r3, [r7, #16]
 800ec56:	e015      	b.n	800ec84 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	885b      	ldrh	r3, [r3, #2]
 800ec5c:	0a1b      	lsrs	r3, r3, #8
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	2b21      	cmp	r3, #33	; 0x21
 800ec62:	d108      	bne.n	800ec76 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800ec64:	4b2b      	ldr	r3, [pc, #172]	; (800ed14 <USBD_HID_Setup+0x20c>)
 800ec66:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	88db      	ldrh	r3, [r3, #6]
 800ec6c:	2b09      	cmp	r3, #9
 800ec6e:	bf28      	it	cs
 800ec70:	2309      	movcs	r3, #9
 800ec72:	82bb      	strh	r3, [r7, #20]
 800ec74:	e006      	b.n	800ec84 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800ec76:	6839      	ldr	r1, [r7, #0]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f001 fa90 	bl	801019e <USBD_CtlError>
            ret = USBD_FAIL;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	75fb      	strb	r3, [r7, #23]
            break;
 800ec82:	e037      	b.n	800ecf4 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800ec84:	8abb      	ldrh	r3, [r7, #20]
 800ec86:	461a      	mov	r2, r3
 800ec88:	6939      	ldr	r1, [r7, #16]
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f001 faf8 	bl	8010280 <USBD_CtlSendData>
          break;
 800ec90:	e030      	b.n	800ecf4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b03      	cmp	r3, #3
 800ec9c:	d107      	bne.n	800ecae <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	3308      	adds	r3, #8
 800eca2:	2201      	movs	r2, #1
 800eca4:	4619      	mov	r1, r3
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f001 faea 	bl	8010280 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ecac:	e022      	b.n	800ecf4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800ecae:	6839      	ldr	r1, [r7, #0]
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f001 fa74 	bl	801019e <USBD_CtlError>
            ret = USBD_FAIL;
 800ecb6:	2303      	movs	r3, #3
 800ecb8:	75fb      	strb	r3, [r7, #23]
          break;
 800ecba:	e01b      	b.n	800ecf4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	2b03      	cmp	r3, #3
 800ecc6:	d106      	bne.n	800ecd6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	885b      	ldrh	r3, [r3, #2]
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	461a      	mov	r2, r3
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ecd4:	e00e      	b.n	800ecf4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800ecd6:	6839      	ldr	r1, [r7, #0]
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f001 fa60 	bl	801019e <USBD_CtlError>
            ret = USBD_FAIL;
 800ecde:	2303      	movs	r3, #3
 800ece0:	75fb      	strb	r3, [r7, #23]
          break;
 800ece2:	e007      	b.n	800ecf4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ece4:	6839      	ldr	r1, [r7, #0]
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f001 fa59 	bl	801019e <USBD_CtlError>
          ret = USBD_FAIL;
 800ecec:	2303      	movs	r3, #3
 800ecee:	75fb      	strb	r3, [r7, #23]
          break;
 800ecf0:	e000      	b.n	800ecf4 <USBD_HID_Setup+0x1ec>
          break;
 800ecf2:	bf00      	nop
      }
      break;
 800ecf4:	e006      	b.n	800ed04 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f001 fa50 	bl	801019e <USBD_CtlError>
      ret = USBD_FAIL;
 800ecfe:	2303      	movs	r3, #3
 800ed00:	75fb      	strb	r3, [r7, #23]
      break;
 800ed02:	bf00      	nop
  }

  return (uint8_t)ret;
 800ed04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3718      	adds	r7, #24
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	200000a0 	.word	0x200000a0
 800ed14:	20000088 	.word	0x20000088

0800ed18 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b086      	sub	sp, #24
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	4613      	mov	r3, r2
 800ed24:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	32b0      	adds	r2, #176	; 0xb0
 800ed30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed34:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d101      	bne.n	800ed40 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ed3c:	2303      	movs	r3, #3
 800ed3e:	e014      	b.n	800ed6a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	2b03      	cmp	r3, #3
 800ed4a:	d10d      	bne.n	800ed68 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	7b1b      	ldrb	r3, [r3, #12]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d109      	bne.n	800ed68 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	2201      	movs	r2, #1
 800ed58:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800ed5a:	4b06      	ldr	r3, [pc, #24]	; (800ed74 <USBD_HID_SendReport+0x5c>)
 800ed5c:	7819      	ldrb	r1, [r3, #0]
 800ed5e:	88fb      	ldrh	r3, [r7, #6]
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f001 fece 	bl	8010b04 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3718      	adds	r7, #24
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	200000ea 	.word	0x200000ea

0800ed78 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800ed80:	2181      	movs	r1, #129	; 0x81
 800ed82:	4809      	ldr	r0, [pc, #36]	; (800eda8 <USBD_HID_GetFSCfgDesc+0x30>)
 800ed84:	f000 fba9 	bl	800f4da <USBD_GetEpDesc>
 800ed88:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	220a      	movs	r2, #10
 800ed94:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2222      	movs	r2, #34	; 0x22
 800ed9a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800ed9c:	4b02      	ldr	r3, [pc, #8]	; (800eda8 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	20000064 	.word	0x20000064

0800edac <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800edb4:	2181      	movs	r1, #129	; 0x81
 800edb6:	4809      	ldr	r0, [pc, #36]	; (800eddc <USBD_HID_GetHSCfgDesc+0x30>)
 800edb8:	f000 fb8f 	bl	800f4da <USBD_GetEpDesc>
 800edbc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d002      	beq.n	800edca <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2207      	movs	r2, #7
 800edc8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2222      	movs	r2, #34	; 0x22
 800edce:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800edd0:	4b02      	ldr	r3, [pc, #8]	; (800eddc <USBD_HID_GetHSCfgDesc+0x30>)
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	20000064 	.word	0x20000064

0800ede0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800ede8:	2181      	movs	r1, #129	; 0x81
 800edea:	4809      	ldr	r0, [pc, #36]	; (800ee10 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800edec:	f000 fb75 	bl	800f4da <USBD_GetEpDesc>
 800edf0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d002      	beq.n	800edfe <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	220a      	movs	r2, #10
 800edfc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2222      	movs	r2, #34	; 0x22
 800ee02:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800ee04:	4b02      	ldr	r3, [pc, #8]	; (800ee10 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	20000064 	.word	0x20000064

0800ee14 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	32b0      	adds	r2, #176	; 0xb0
 800ee2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800ee32:	2300      	movs	r3, #0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	220a      	movs	r2, #10
 800ee4c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800ee4e:	4b03      	ldr	r3, [pc, #12]	; (800ee5c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	20000094 	.word	0x20000094

0800ee60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d101      	bne.n	800ee78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee74:	2303      	movs	r3, #3
 800ee76:	e01f      	b.n	800eeb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d003      	beq.n	800ee9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	68ba      	ldr	r2, [r7, #8]
 800ee9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2201      	movs	r2, #1
 800eea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	79fa      	ldrb	r2, [r7, #7]
 800eeaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f001 fc63 	bl	8010778 <USBD_LL_Init>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eeb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3718      	adds	r7, #24
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b084      	sub	sp, #16
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eeca:	2300      	movs	r3, #0
 800eecc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eed4:	2303      	movs	r3, #3
 800eed6:	e025      	b.n	800ef24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	683a      	ldr	r2, [r7, #0]
 800eedc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	32ae      	adds	r2, #174	; 0xae
 800eeea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00f      	beq.n	800ef14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	32ae      	adds	r2, #174	; 0xae
 800eefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef04:	f107 020e 	add.w	r2, r7, #14
 800ef08:	4610      	mov	r0, r2
 800ef0a:	4798      	blx	r3
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ef1a:	1c5a      	adds	r2, r3, #1
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ef22:	2300      	movs	r3, #0
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3710      	adds	r7, #16
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f001 fc6f 	bl	8010818 <USBD_LL_Start>
 800ef3a:	4603      	mov	r3, r0
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ef4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	370c      	adds	r7, #12
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr

0800ef5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b084      	sub	sp, #16
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
 800ef62:	460b      	mov	r3, r1
 800ef64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef66:	2300      	movs	r3, #0
 800ef68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d009      	beq.n	800ef88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	78fa      	ldrb	r2, [r7, #3]
 800ef7e:	4611      	mov	r1, r2
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	4798      	blx	r3
 800ef84:	4603      	mov	r3, r0
 800ef86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}

0800ef92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b084      	sub	sp, #16
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
 800ef9a:	460b      	mov	r3, r1
 800ef9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	78fa      	ldrb	r2, [r7, #3]
 800efac:	4611      	mov	r1, r2
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	4798      	blx	r3
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d001      	beq.n	800efbc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800efb8:	2303      	movs	r3, #3
 800efba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800efbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b084      	sub	sp, #16
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
 800efce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800efd6:	6839      	ldr	r1, [r7, #0]
 800efd8:	4618      	mov	r0, r3
 800efda:	f001 f8a6 	bl	801012a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2201      	movs	r2, #1
 800efe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800efec:	461a      	mov	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800effa:	f003 031f 	and.w	r3, r3, #31
 800effe:	2b02      	cmp	r3, #2
 800f000:	d01a      	beq.n	800f038 <USBD_LL_SetupStage+0x72>
 800f002:	2b02      	cmp	r3, #2
 800f004:	d822      	bhi.n	800f04c <USBD_LL_SetupStage+0x86>
 800f006:	2b00      	cmp	r3, #0
 800f008:	d002      	beq.n	800f010 <USBD_LL_SetupStage+0x4a>
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d00a      	beq.n	800f024 <USBD_LL_SetupStage+0x5e>
 800f00e:	e01d      	b.n	800f04c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f016:	4619      	mov	r1, r3
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 fad3 	bl	800f5c4 <USBD_StdDevReq>
 800f01e:	4603      	mov	r3, r0
 800f020:	73fb      	strb	r3, [r7, #15]
      break;
 800f022:	e020      	b.n	800f066 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f02a:	4619      	mov	r1, r3
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 fb3b 	bl	800f6a8 <USBD_StdItfReq>
 800f032:	4603      	mov	r3, r0
 800f034:	73fb      	strb	r3, [r7, #15]
      break;
 800f036:	e016      	b.n	800f066 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f03e:	4619      	mov	r1, r3
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f000 fb9d 	bl	800f780 <USBD_StdEPReq>
 800f046:	4603      	mov	r3, r0
 800f048:	73fb      	strb	r3, [r7, #15]
      break;
 800f04a:	e00c      	b.n	800f066 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f052:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f056:	b2db      	uxtb	r3, r3
 800f058:	4619      	mov	r1, r3
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f001 fc82 	bl	8010964 <USBD_LL_StallEP>
 800f060:	4603      	mov	r3, r0
 800f062:	73fb      	strb	r3, [r7, #15]
      break;
 800f064:	bf00      	nop
  }

  return ret;
 800f066:	7bfb      	ldrb	r3, [r7, #15]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	460b      	mov	r3, r1
 800f07a:	607a      	str	r2, [r7, #4]
 800f07c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f07e:	2300      	movs	r3, #0
 800f080:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f082:	7afb      	ldrb	r3, [r7, #11]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d16e      	bne.n	800f166 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f08e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f096:	2b03      	cmp	r3, #3
 800f098:	f040 8098 	bne.w	800f1cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	689a      	ldr	r2, [r3, #8]
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d913      	bls.n	800f0d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	689a      	ldr	r2, [r3, #8]
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	1ad2      	subs	r2, r2, r3
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	68da      	ldr	r2, [r3, #12]
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	bf28      	it	cs
 800f0c2:	4613      	movcs	r3, r2
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	6879      	ldr	r1, [r7, #4]
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f001 f905 	bl	80102d8 <USBD_CtlContinueRx>
 800f0ce:	e07d      	b.n	800f1cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f0d6:	f003 031f 	and.w	r3, r3, #31
 800f0da:	2b02      	cmp	r3, #2
 800f0dc:	d014      	beq.n	800f108 <USBD_LL_DataOutStage+0x98>
 800f0de:	2b02      	cmp	r3, #2
 800f0e0:	d81d      	bhi.n	800f11e <USBD_LL_DataOutStage+0xae>
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d002      	beq.n	800f0ec <USBD_LL_DataOutStage+0x7c>
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d003      	beq.n	800f0f2 <USBD_LL_DataOutStage+0x82>
 800f0ea:	e018      	b.n	800f11e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	75bb      	strb	r3, [r7, #22]
            break;
 800f0f0:	e018      	b.n	800f124 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	68f8      	ldr	r0, [r7, #12]
 800f0fe:	f000 f9d2 	bl	800f4a6 <USBD_CoreFindIF>
 800f102:	4603      	mov	r3, r0
 800f104:	75bb      	strb	r3, [r7, #22]
            break;
 800f106:	e00d      	b.n	800f124 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	4619      	mov	r1, r3
 800f112:	68f8      	ldr	r0, [r7, #12]
 800f114:	f000 f9d4 	bl	800f4c0 <USBD_CoreFindEP>
 800f118:	4603      	mov	r3, r0
 800f11a:	75bb      	strb	r3, [r7, #22]
            break;
 800f11c:	e002      	b.n	800f124 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f11e:	2300      	movs	r3, #0
 800f120:	75bb      	strb	r3, [r7, #22]
            break;
 800f122:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f124:	7dbb      	ldrb	r3, [r7, #22]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d119      	bne.n	800f15e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f130:	b2db      	uxtb	r3, r3
 800f132:	2b03      	cmp	r3, #3
 800f134:	d113      	bne.n	800f15e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f136:	7dba      	ldrb	r2, [r7, #22]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	32ae      	adds	r2, #174	; 0xae
 800f13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00b      	beq.n	800f15e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f146:	7dba      	ldrb	r2, [r7, #22]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f14e:	7dba      	ldrb	r2, [r7, #22]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	32ae      	adds	r2, #174	; 0xae
 800f154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f158:	691b      	ldr	r3, [r3, #16]
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f001 f8cb 	bl	80102fa <USBD_CtlSendStatus>
 800f164:	e032      	b.n	800f1cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f166:	7afb      	ldrb	r3, [r7, #11]
 800f168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	4619      	mov	r1, r3
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f000 f9a5 	bl	800f4c0 <USBD_CoreFindEP>
 800f176:	4603      	mov	r3, r0
 800f178:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f17a:	7dbb      	ldrb	r3, [r7, #22]
 800f17c:	2bff      	cmp	r3, #255	; 0xff
 800f17e:	d025      	beq.n	800f1cc <USBD_LL_DataOutStage+0x15c>
 800f180:	7dbb      	ldrb	r3, [r7, #22]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d122      	bne.n	800f1cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	2b03      	cmp	r3, #3
 800f190:	d117      	bne.n	800f1c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f192:	7dba      	ldrb	r2, [r7, #22]
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	32ae      	adds	r2, #174	; 0xae
 800f198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f19c:	699b      	ldr	r3, [r3, #24]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00f      	beq.n	800f1c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f1a2:	7dba      	ldrb	r2, [r7, #22]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f1aa:	7dba      	ldrb	r2, [r7, #22]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	32ae      	adds	r2, #174	; 0xae
 800f1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b4:	699b      	ldr	r3, [r3, #24]
 800f1b6:	7afa      	ldrb	r2, [r7, #11]
 800f1b8:	4611      	mov	r1, r2
 800f1ba:	68f8      	ldr	r0, [r7, #12]
 800f1bc:	4798      	blx	r3
 800f1be:	4603      	mov	r3, r0
 800f1c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f1c2:	7dfb      	ldrb	r3, [r7, #23]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d001      	beq.n	800f1cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f1c8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ca:	e000      	b.n	800f1ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b086      	sub	sp, #24
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	60f8      	str	r0, [r7, #12]
 800f1de:	460b      	mov	r3, r1
 800f1e0:	607a      	str	r2, [r7, #4]
 800f1e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f1e4:	7afb      	ldrb	r3, [r7, #11]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d16f      	bne.n	800f2ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	3314      	adds	r3, #20
 800f1ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f1f6:	2b02      	cmp	r3, #2
 800f1f8:	d15a      	bne.n	800f2b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	689a      	ldr	r2, [r3, #8]
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	68db      	ldr	r3, [r3, #12]
 800f202:	429a      	cmp	r2, r3
 800f204:	d914      	bls.n	800f230 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	689a      	ldr	r2, [r3, #8]
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	1ad2      	subs	r2, r2, r3
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	461a      	mov	r2, r3
 800f21a:	6879      	ldr	r1, [r7, #4]
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f001 f84a 	bl	80102b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f222:	2300      	movs	r3, #0
 800f224:	2200      	movs	r2, #0
 800f226:	2100      	movs	r1, #0
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f001 fca3 	bl	8010b74 <USBD_LL_PrepareReceive>
 800f22e:	e03f      	b.n	800f2b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	68da      	ldr	r2, [r3, #12]
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d11c      	bne.n	800f276 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	685a      	ldr	r2, [r3, #4]
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f244:	429a      	cmp	r2, r3
 800f246:	d316      	bcc.n	800f276 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	685a      	ldr	r2, [r3, #4]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f252:	429a      	cmp	r2, r3
 800f254:	d20f      	bcs.n	800f276 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f256:	2200      	movs	r2, #0
 800f258:	2100      	movs	r1, #0
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f001 f82b 	bl	80102b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2200      	movs	r2, #0
 800f264:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f268:	2300      	movs	r3, #0
 800f26a:	2200      	movs	r2, #0
 800f26c:	2100      	movs	r1, #0
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f001 fc80 	bl	8010b74 <USBD_LL_PrepareReceive>
 800f274:	e01c      	b.n	800f2b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	2b03      	cmp	r3, #3
 800f280:	d10f      	bne.n	800f2a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d009      	beq.n	800f2a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2200      	movs	r2, #0
 800f292:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	68f8      	ldr	r0, [r7, #12]
 800f2a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2a2:	2180      	movs	r1, #128	; 0x80
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f001 fb5d 	bl	8010964 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f001 f838 	bl	8010320 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d03a      	beq.n	800f330 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	f7ff fe42 	bl	800ef44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f2c8:	e032      	b.n	800f330 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f2ca:	7afb      	ldrb	r3, [r7, #11]
 800f2cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	4619      	mov	r1, r3
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	f000 f8f3 	bl	800f4c0 <USBD_CoreFindEP>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f2de:	7dfb      	ldrb	r3, [r7, #23]
 800f2e0:	2bff      	cmp	r3, #255	; 0xff
 800f2e2:	d025      	beq.n	800f330 <USBD_LL_DataInStage+0x15a>
 800f2e4:	7dfb      	ldrb	r3, [r7, #23]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d122      	bne.n	800f330 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	2b03      	cmp	r3, #3
 800f2f4:	d11c      	bne.n	800f330 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f2f6:	7dfa      	ldrb	r2, [r7, #23]
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	32ae      	adds	r2, #174	; 0xae
 800f2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f300:	695b      	ldr	r3, [r3, #20]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d014      	beq.n	800f330 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f306:	7dfa      	ldrb	r2, [r7, #23]
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f30e:	7dfa      	ldrb	r2, [r7, #23]
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	32ae      	adds	r2, #174	; 0xae
 800f314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f318:	695b      	ldr	r3, [r3, #20]
 800f31a:	7afa      	ldrb	r2, [r7, #11]
 800f31c:	4611      	mov	r1, r2
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	4798      	blx	r3
 800f322:	4603      	mov	r3, r0
 800f324:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f326:	7dbb      	ldrb	r3, [r7, #22]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d001      	beq.n	800f330 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f32c:	7dbb      	ldrb	r3, [r7, #22]
 800f32e:	e000      	b.n	800f332 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f330:	2300      	movs	r3, #0
}
 800f332:	4618      	mov	r0, r3
 800f334:	3718      	adds	r7, #24
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b084      	sub	sp, #16
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f342:	2300      	movs	r3, #0
 800f344:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2201      	movs	r2, #1
 800f34a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f372:	2b00      	cmp	r3, #0
 800f374:	d014      	beq.n	800f3a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00e      	beq.n	800f3a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	6852      	ldr	r2, [r2, #4]
 800f38e:	b2d2      	uxtb	r2, r2
 800f390:	4611      	mov	r1, r2
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	4798      	blx	r3
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d001      	beq.n	800f3a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f39c:	2303      	movs	r3, #3
 800f39e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f3a0:	2340      	movs	r3, #64	; 0x40
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	2100      	movs	r1, #0
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f001 fa68 	bl	801087c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2240      	movs	r2, #64	; 0x40
 800f3b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f3bc:	2340      	movs	r3, #64	; 0x40
 800f3be:	2200      	movs	r2, #0
 800f3c0:	2180      	movs	r1, #128	; 0x80
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f001 fa5a 	bl	801087c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2240      	movs	r2, #64	; 0x40
 800f3d2:	621a      	str	r2, [r3, #32]

  return ret;
 800f3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}

0800f3de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f3de:	b480      	push	{r7}
 800f3e0:	b083      	sub	sp, #12
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	78fa      	ldrb	r2, [r7, #3]
 800f3ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f3f0:	2300      	movs	r3, #0
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	370c      	adds	r7, #12
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr

0800f3fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f3fe:	b480      	push	{r7}
 800f400:	b083      	sub	sp, #12
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	2b04      	cmp	r3, #4
 800f410:	d006      	beq.n	800f420 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f418:	b2da      	uxtb	r2, r3
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2204      	movs	r2, #4
 800f424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	370c      	adds	r7, #12
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr

0800f436 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f436:	b480      	push	{r7}
 800f438:	b083      	sub	sp, #12
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f444:	b2db      	uxtb	r3, r3
 800f446:	2b04      	cmp	r3, #4
 800f448:	d106      	bne.n	800f458 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f450:	b2da      	uxtb	r2, r3
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f458:	2300      	movs	r3, #0
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	370c      	adds	r7, #12
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr

0800f466 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f466:	b580      	push	{r7, lr}
 800f468:	b082      	sub	sp, #8
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b03      	cmp	r3, #3
 800f478:	d110      	bne.n	800f49c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00b      	beq.n	800f49c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f48a:	69db      	ldr	r3, [r3, #28]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d005      	beq.n	800f49c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f496:	69db      	ldr	r3, [r3, #28]
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f4a6:	b480      	push	{r7}
 800f4a8:	b083      	sub	sp, #12
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f4b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f4cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	370c      	adds	r7, #12
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f4da:	b580      	push	{r7, lr}
 800f4dc:	b086      	sub	sp, #24
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
 800f4e2:	460b      	mov	r3, r1
 800f4e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	885b      	ldrh	r3, [r3, #2]
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d920      	bls.n	800f544 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	b29b      	uxth	r3, r3
 800f508:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f50a:	e013      	b.n	800f534 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f50c:	f107 030a 	add.w	r3, r7, #10
 800f510:	4619      	mov	r1, r3
 800f512:	6978      	ldr	r0, [r7, #20]
 800f514:	f000 f81b 	bl	800f54e <USBD_GetNextDesc>
 800f518:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	785b      	ldrb	r3, [r3, #1]
 800f51e:	2b05      	cmp	r3, #5
 800f520:	d108      	bne.n	800f534 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	789b      	ldrb	r3, [r3, #2]
 800f52a:	78fa      	ldrb	r2, [r7, #3]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d008      	beq.n	800f542 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f530:	2300      	movs	r3, #0
 800f532:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	885b      	ldrh	r3, [r3, #2]
 800f538:	b29a      	uxth	r2, r3
 800f53a:	897b      	ldrh	r3, [r7, #10]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d8e5      	bhi.n	800f50c <USBD_GetEpDesc+0x32>
 800f540:	e000      	b.n	800f544 <USBD_GetEpDesc+0x6a>
          break;
 800f542:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f544:	693b      	ldr	r3, [r7, #16]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3718      	adds	r7, #24
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f54e:	b480      	push	{r7}
 800f550:	b085      	sub	sp, #20
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
 800f556:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	881a      	ldrh	r2, [r3, #0]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	b29b      	uxth	r3, r3
 800f566:	4413      	add	r3, r2
 800f568:	b29a      	uxth	r2, r3
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	461a      	mov	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4413      	add	r3, r2
 800f578:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f57a:	68fb      	ldr	r3, [r7, #12]
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3714      	adds	r7, #20
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr

0800f588 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f588:	b480      	push	{r7}
 800f58a:	b087      	sub	sp, #28
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	3301      	adds	r3, #1
 800f59e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f5a6:	8a3b      	ldrh	r3, [r7, #16]
 800f5a8:	021b      	lsls	r3, r3, #8
 800f5aa:	b21a      	sxth	r2, r3
 800f5ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5b0:	4313      	orrs	r3, r2
 800f5b2:	b21b      	sxth	r3, r3
 800f5b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f5b6:	89fb      	ldrh	r3, [r7, #14]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	371c      	adds	r7, #28
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f5da:	2b40      	cmp	r3, #64	; 0x40
 800f5dc:	d005      	beq.n	800f5ea <USBD_StdDevReq+0x26>
 800f5de:	2b40      	cmp	r3, #64	; 0x40
 800f5e0:	d857      	bhi.n	800f692 <USBD_StdDevReq+0xce>
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00f      	beq.n	800f606 <USBD_StdDevReq+0x42>
 800f5e6:	2b20      	cmp	r3, #32
 800f5e8:	d153      	bne.n	800f692 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	32ae      	adds	r2, #174	; 0xae
 800f5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5f8:	689b      	ldr	r3, [r3, #8]
 800f5fa:	6839      	ldr	r1, [r7, #0]
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	4798      	blx	r3
 800f600:	4603      	mov	r3, r0
 800f602:	73fb      	strb	r3, [r7, #15]
      break;
 800f604:	e04a      	b.n	800f69c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	785b      	ldrb	r3, [r3, #1]
 800f60a:	2b09      	cmp	r3, #9
 800f60c:	d83b      	bhi.n	800f686 <USBD_StdDevReq+0xc2>
 800f60e:	a201      	add	r2, pc, #4	; (adr r2, 800f614 <USBD_StdDevReq+0x50>)
 800f610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f614:	0800f669 	.word	0x0800f669
 800f618:	0800f67d 	.word	0x0800f67d
 800f61c:	0800f687 	.word	0x0800f687
 800f620:	0800f673 	.word	0x0800f673
 800f624:	0800f687 	.word	0x0800f687
 800f628:	0800f647 	.word	0x0800f647
 800f62c:	0800f63d 	.word	0x0800f63d
 800f630:	0800f687 	.word	0x0800f687
 800f634:	0800f65f 	.word	0x0800f65f
 800f638:	0800f651 	.word	0x0800f651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f63c:	6839      	ldr	r1, [r7, #0]
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 fa3c 	bl	800fabc <USBD_GetDescriptor>
          break;
 800f644:	e024      	b.n	800f690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f646:	6839      	ldr	r1, [r7, #0]
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f000 fbcb 	bl	800fde4 <USBD_SetAddress>
          break;
 800f64e:	e01f      	b.n	800f690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f650:	6839      	ldr	r1, [r7, #0]
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 fc0a 	bl	800fe6c <USBD_SetConfig>
 800f658:	4603      	mov	r3, r0
 800f65a:	73fb      	strb	r3, [r7, #15]
          break;
 800f65c:	e018      	b.n	800f690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f65e:	6839      	ldr	r1, [r7, #0]
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fcad 	bl	800ffc0 <USBD_GetConfig>
          break;
 800f666:	e013      	b.n	800f690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f668:	6839      	ldr	r1, [r7, #0]
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 fcde 	bl	801002c <USBD_GetStatus>
          break;
 800f670:	e00e      	b.n	800f690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f672:	6839      	ldr	r1, [r7, #0]
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 fd0d 	bl	8010094 <USBD_SetFeature>
          break;
 800f67a:	e009      	b.n	800f690 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 fd31 	bl	80100e6 <USBD_ClrFeature>
          break;
 800f684:	e004      	b.n	800f690 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f686:	6839      	ldr	r1, [r7, #0]
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 fd88 	bl	801019e <USBD_CtlError>
          break;
 800f68e:	bf00      	nop
      }
      break;
 800f690:	e004      	b.n	800f69c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f692:	6839      	ldr	r1, [r7, #0]
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 fd82 	bl	801019e <USBD_CtlError>
      break;
 800f69a:	bf00      	nop
  }

  return ret;
 800f69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3710      	adds	r7, #16
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop

0800f6a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f6be:	2b40      	cmp	r3, #64	; 0x40
 800f6c0:	d005      	beq.n	800f6ce <USBD_StdItfReq+0x26>
 800f6c2:	2b40      	cmp	r3, #64	; 0x40
 800f6c4:	d852      	bhi.n	800f76c <USBD_StdItfReq+0xc4>
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d001      	beq.n	800f6ce <USBD_StdItfReq+0x26>
 800f6ca:	2b20      	cmp	r3, #32
 800f6cc:	d14e      	bne.n	800f76c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	3b01      	subs	r3, #1
 800f6d8:	2b02      	cmp	r3, #2
 800f6da:	d840      	bhi.n	800f75e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	889b      	ldrh	r3, [r3, #4]
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d836      	bhi.n	800f754 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	889b      	ldrh	r3, [r3, #4]
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f7ff fed9 	bl	800f4a6 <USBD_CoreFindIF>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f6f8:	7bbb      	ldrb	r3, [r7, #14]
 800f6fa:	2bff      	cmp	r3, #255	; 0xff
 800f6fc:	d01d      	beq.n	800f73a <USBD_StdItfReq+0x92>
 800f6fe:	7bbb      	ldrb	r3, [r7, #14]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d11a      	bne.n	800f73a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f704:	7bba      	ldrb	r2, [r7, #14]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	32ae      	adds	r2, #174	; 0xae
 800f70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d00f      	beq.n	800f734 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f714:	7bba      	ldrb	r2, [r7, #14]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f71c:	7bba      	ldrb	r2, [r7, #14]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	32ae      	adds	r2, #174	; 0xae
 800f722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f726:	689b      	ldr	r3, [r3, #8]
 800f728:	6839      	ldr	r1, [r7, #0]
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	4798      	blx	r3
 800f72e:	4603      	mov	r3, r0
 800f730:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f732:	e004      	b.n	800f73e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f734:	2303      	movs	r3, #3
 800f736:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f738:	e001      	b.n	800f73e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f73a:	2303      	movs	r3, #3
 800f73c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	88db      	ldrh	r3, [r3, #6]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d110      	bne.n	800f768 <USBD_StdItfReq+0xc0>
 800f746:	7bfb      	ldrb	r3, [r7, #15]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d10d      	bne.n	800f768 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 fdd4 	bl	80102fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f752:	e009      	b.n	800f768 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f754:	6839      	ldr	r1, [r7, #0]
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 fd21 	bl	801019e <USBD_CtlError>
          break;
 800f75c:	e004      	b.n	800f768 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f75e:	6839      	ldr	r1, [r7, #0]
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 fd1c 	bl	801019e <USBD_CtlError>
          break;
 800f766:	e000      	b.n	800f76a <USBD_StdItfReq+0xc2>
          break;
 800f768:	bf00      	nop
      }
      break;
 800f76a:	e004      	b.n	800f776 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f76c:	6839      	ldr	r1, [r7, #0]
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f000 fd15 	bl	801019e <USBD_CtlError>
      break;
 800f774:	bf00      	nop
  }

  return ret;
 800f776:	7bfb      	ldrb	r3, [r7, #15]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f78a:	2300      	movs	r3, #0
 800f78c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	889b      	ldrh	r3, [r3, #4]
 800f792:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f79c:	2b40      	cmp	r3, #64	; 0x40
 800f79e:	d007      	beq.n	800f7b0 <USBD_StdEPReq+0x30>
 800f7a0:	2b40      	cmp	r3, #64	; 0x40
 800f7a2:	f200 817f 	bhi.w	800faa4 <USBD_StdEPReq+0x324>
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d02a      	beq.n	800f800 <USBD_StdEPReq+0x80>
 800f7aa:	2b20      	cmp	r3, #32
 800f7ac:	f040 817a 	bne.w	800faa4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f7b0:	7bbb      	ldrb	r3, [r7, #14]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f7ff fe83 	bl	800f4c0 <USBD_CoreFindEP>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f7be:	7b7b      	ldrb	r3, [r7, #13]
 800f7c0:	2bff      	cmp	r3, #255	; 0xff
 800f7c2:	f000 8174 	beq.w	800faae <USBD_StdEPReq+0x32e>
 800f7c6:	7b7b      	ldrb	r3, [r7, #13]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	f040 8170 	bne.w	800faae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f7ce:	7b7a      	ldrb	r2, [r7, #13]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f7d6:	7b7a      	ldrb	r2, [r7, #13]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	32ae      	adds	r2, #174	; 0xae
 800f7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f000 8163 	beq.w	800faae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f7e8:	7b7a      	ldrb	r2, [r7, #13]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	32ae      	adds	r2, #174	; 0xae
 800f7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	6839      	ldr	r1, [r7, #0]
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	4798      	blx	r3
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f7fe:	e156      	b.n	800faae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	785b      	ldrb	r3, [r3, #1]
 800f804:	2b03      	cmp	r3, #3
 800f806:	d008      	beq.n	800f81a <USBD_StdEPReq+0x9a>
 800f808:	2b03      	cmp	r3, #3
 800f80a:	f300 8145 	bgt.w	800fa98 <USBD_StdEPReq+0x318>
 800f80e:	2b00      	cmp	r3, #0
 800f810:	f000 809b 	beq.w	800f94a <USBD_StdEPReq+0x1ca>
 800f814:	2b01      	cmp	r3, #1
 800f816:	d03c      	beq.n	800f892 <USBD_StdEPReq+0x112>
 800f818:	e13e      	b.n	800fa98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f820:	b2db      	uxtb	r3, r3
 800f822:	2b02      	cmp	r3, #2
 800f824:	d002      	beq.n	800f82c <USBD_StdEPReq+0xac>
 800f826:	2b03      	cmp	r3, #3
 800f828:	d016      	beq.n	800f858 <USBD_StdEPReq+0xd8>
 800f82a:	e02c      	b.n	800f886 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f82c:	7bbb      	ldrb	r3, [r7, #14]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00d      	beq.n	800f84e <USBD_StdEPReq+0xce>
 800f832:	7bbb      	ldrb	r3, [r7, #14]
 800f834:	2b80      	cmp	r3, #128	; 0x80
 800f836:	d00a      	beq.n	800f84e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f838:	7bbb      	ldrb	r3, [r7, #14]
 800f83a:	4619      	mov	r1, r3
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f001 f891 	bl	8010964 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f842:	2180      	movs	r1, #128	; 0x80
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f001 f88d 	bl	8010964 <USBD_LL_StallEP>
 800f84a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f84c:	e020      	b.n	800f890 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f84e:	6839      	ldr	r1, [r7, #0]
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f000 fca4 	bl	801019e <USBD_CtlError>
              break;
 800f856:	e01b      	b.n	800f890 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	885b      	ldrh	r3, [r3, #2]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d10e      	bne.n	800f87e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f860:	7bbb      	ldrb	r3, [r7, #14]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00b      	beq.n	800f87e <USBD_StdEPReq+0xfe>
 800f866:	7bbb      	ldrb	r3, [r7, #14]
 800f868:	2b80      	cmp	r3, #128	; 0x80
 800f86a:	d008      	beq.n	800f87e <USBD_StdEPReq+0xfe>
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	88db      	ldrh	r3, [r3, #6]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d104      	bne.n	800f87e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f874:	7bbb      	ldrb	r3, [r7, #14]
 800f876:	4619      	mov	r1, r3
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f001 f873 	bl	8010964 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 fd3b 	bl	80102fa <USBD_CtlSendStatus>

              break;
 800f884:	e004      	b.n	800f890 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f886:	6839      	ldr	r1, [r7, #0]
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 fc88 	bl	801019e <USBD_CtlError>
              break;
 800f88e:	bf00      	nop
          }
          break;
 800f890:	e107      	b.n	800faa2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b02      	cmp	r3, #2
 800f89c:	d002      	beq.n	800f8a4 <USBD_StdEPReq+0x124>
 800f89e:	2b03      	cmp	r3, #3
 800f8a0:	d016      	beq.n	800f8d0 <USBD_StdEPReq+0x150>
 800f8a2:	e04b      	b.n	800f93c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8a4:	7bbb      	ldrb	r3, [r7, #14]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00d      	beq.n	800f8c6 <USBD_StdEPReq+0x146>
 800f8aa:	7bbb      	ldrb	r3, [r7, #14]
 800f8ac:	2b80      	cmp	r3, #128	; 0x80
 800f8ae:	d00a      	beq.n	800f8c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8b0:	7bbb      	ldrb	r3, [r7, #14]
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f001 f855 	bl	8010964 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8ba:	2180      	movs	r1, #128	; 0x80
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f001 f851 	bl	8010964 <USBD_LL_StallEP>
 800f8c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f8c4:	e040      	b.n	800f948 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f8c6:	6839      	ldr	r1, [r7, #0]
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 fc68 	bl	801019e <USBD_CtlError>
              break;
 800f8ce:	e03b      	b.n	800f948 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	885b      	ldrh	r3, [r3, #2]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d136      	bne.n	800f946 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f8d8:	7bbb      	ldrb	r3, [r7, #14]
 800f8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d004      	beq.n	800f8ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f8e2:	7bbb      	ldrb	r3, [r7, #14]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f001 f872 	bl	80109d0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 fd04 	bl	80102fa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f8f2:	7bbb      	ldrb	r3, [r7, #14]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f7ff fde2 	bl	800f4c0 <USBD_CoreFindEP>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f900:	7b7b      	ldrb	r3, [r7, #13]
 800f902:	2bff      	cmp	r3, #255	; 0xff
 800f904:	d01f      	beq.n	800f946 <USBD_StdEPReq+0x1c6>
 800f906:	7b7b      	ldrb	r3, [r7, #13]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d11c      	bne.n	800f946 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f90c:	7b7a      	ldrb	r2, [r7, #13]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f914:	7b7a      	ldrb	r2, [r7, #13]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	32ae      	adds	r2, #174	; 0xae
 800f91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f91e:	689b      	ldr	r3, [r3, #8]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d010      	beq.n	800f946 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f924:	7b7a      	ldrb	r2, [r7, #13]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	32ae      	adds	r2, #174	; 0xae
 800f92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	6839      	ldr	r1, [r7, #0]
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	4798      	blx	r3
 800f936:	4603      	mov	r3, r0
 800f938:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f93a:	e004      	b.n	800f946 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f93c:	6839      	ldr	r1, [r7, #0]
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 fc2d 	bl	801019e <USBD_CtlError>
              break;
 800f944:	e000      	b.n	800f948 <USBD_StdEPReq+0x1c8>
              break;
 800f946:	bf00      	nop
          }
          break;
 800f948:	e0ab      	b.n	800faa2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f950:	b2db      	uxtb	r3, r3
 800f952:	2b02      	cmp	r3, #2
 800f954:	d002      	beq.n	800f95c <USBD_StdEPReq+0x1dc>
 800f956:	2b03      	cmp	r3, #3
 800f958:	d032      	beq.n	800f9c0 <USBD_StdEPReq+0x240>
 800f95a:	e097      	b.n	800fa8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f95c:	7bbb      	ldrb	r3, [r7, #14]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d007      	beq.n	800f972 <USBD_StdEPReq+0x1f2>
 800f962:	7bbb      	ldrb	r3, [r7, #14]
 800f964:	2b80      	cmp	r3, #128	; 0x80
 800f966:	d004      	beq.n	800f972 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f968:	6839      	ldr	r1, [r7, #0]
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f000 fc17 	bl	801019e <USBD_CtlError>
                break;
 800f970:	e091      	b.n	800fa96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f976:	2b00      	cmp	r3, #0
 800f978:	da0b      	bge.n	800f992 <USBD_StdEPReq+0x212>
 800f97a:	7bbb      	ldrb	r3, [r7, #14]
 800f97c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f980:	4613      	mov	r3, r2
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	4413      	add	r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	3310      	adds	r3, #16
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	4413      	add	r3, r2
 800f98e:	3304      	adds	r3, #4
 800f990:	e00b      	b.n	800f9aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f992:	7bbb      	ldrb	r3, [r7, #14]
 800f994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f998:	4613      	mov	r3, r2
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	009b      	lsls	r3, r3, #2
 800f9a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	3304      	adds	r3, #4
 800f9aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	2202      	movs	r2, #2
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 fc61 	bl	8010280 <USBD_CtlSendData>
              break;
 800f9be:	e06a      	b.n	800fa96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f9c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	da11      	bge.n	800f9ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f9c8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ca:	f003 020f 	and.w	r2, r3, #15
 800f9ce:	6879      	ldr	r1, [r7, #4]
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	4413      	add	r3, r2
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	440b      	add	r3, r1
 800f9da:	3324      	adds	r3, #36	; 0x24
 800f9dc:	881b      	ldrh	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d117      	bne.n	800fa12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f9e2:	6839      	ldr	r1, [r7, #0]
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 fbda 	bl	801019e <USBD_CtlError>
                  break;
 800f9ea:	e054      	b.n	800fa96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f9ec:	7bbb      	ldrb	r3, [r7, #14]
 800f9ee:	f003 020f 	and.w	r2, r3, #15
 800f9f2:	6879      	ldr	r1, [r7, #4]
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	4413      	add	r3, r2
 800f9fa:	009b      	lsls	r3, r3, #2
 800f9fc:	440b      	add	r3, r1
 800f9fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fa02:	881b      	ldrh	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d104      	bne.n	800fa12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fa08:	6839      	ldr	r1, [r7, #0]
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f000 fbc7 	bl	801019e <USBD_CtlError>
                  break;
 800fa10:	e041      	b.n	800fa96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	da0b      	bge.n	800fa32 <USBD_StdEPReq+0x2b2>
 800fa1a:	7bbb      	ldrb	r3, [r7, #14]
 800fa1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa20:	4613      	mov	r3, r2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	4413      	add	r3, r2
 800fa26:	009b      	lsls	r3, r3, #2
 800fa28:	3310      	adds	r3, #16
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	3304      	adds	r3, #4
 800fa30:	e00b      	b.n	800fa4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa32:	7bbb      	ldrb	r3, [r7, #14]
 800fa34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa38:	4613      	mov	r3, r2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	4413      	add	r3, r2
 800fa3e:	009b      	lsls	r3, r3, #2
 800fa40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	4413      	add	r3, r2
 800fa48:	3304      	adds	r3, #4
 800fa4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fa4c:	7bbb      	ldrb	r3, [r7, #14]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d002      	beq.n	800fa58 <USBD_StdEPReq+0x2d8>
 800fa52:	7bbb      	ldrb	r3, [r7, #14]
 800fa54:	2b80      	cmp	r3, #128	; 0x80
 800fa56:	d103      	bne.n	800fa60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	601a      	str	r2, [r3, #0]
 800fa5e:	e00e      	b.n	800fa7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fa60:	7bbb      	ldrb	r3, [r7, #14]
 800fa62:	4619      	mov	r1, r3
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 ffe9 	bl	8010a3c <USBD_LL_IsStallEP>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d003      	beq.n	800fa78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	2201      	movs	r2, #1
 800fa74:	601a      	str	r2, [r3, #0]
 800fa76:	e002      	b.n	800fa7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	2202      	movs	r2, #2
 800fa82:	4619      	mov	r1, r3
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 fbfb 	bl	8010280 <USBD_CtlSendData>
              break;
 800fa8a:	e004      	b.n	800fa96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 fb85 	bl	801019e <USBD_CtlError>
              break;
 800fa94:	bf00      	nop
          }
          break;
 800fa96:	e004      	b.n	800faa2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fa98:	6839      	ldr	r1, [r7, #0]
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f000 fb7f 	bl	801019e <USBD_CtlError>
          break;
 800faa0:	bf00      	nop
      }
      break;
 800faa2:	e005      	b.n	800fab0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800faa4:	6839      	ldr	r1, [r7, #0]
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 fb79 	bl	801019e <USBD_CtlError>
      break;
 800faac:	e000      	b.n	800fab0 <USBD_StdEPReq+0x330>
      break;
 800faae:	bf00      	nop
  }

  return ret;
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3710      	adds	r7, #16
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
	...

0800fabc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fac6:	2300      	movs	r3, #0
 800fac8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800faca:	2300      	movs	r3, #0
 800facc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800face:	2300      	movs	r3, #0
 800fad0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	885b      	ldrh	r3, [r3, #2]
 800fad6:	0a1b      	lsrs	r3, r3, #8
 800fad8:	b29b      	uxth	r3, r3
 800fada:	3b01      	subs	r3, #1
 800fadc:	2b0e      	cmp	r3, #14
 800fade:	f200 8152 	bhi.w	800fd86 <USBD_GetDescriptor+0x2ca>
 800fae2:	a201      	add	r2, pc, #4	; (adr r2, 800fae8 <USBD_GetDescriptor+0x2c>)
 800fae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae8:	0800fb59 	.word	0x0800fb59
 800faec:	0800fb71 	.word	0x0800fb71
 800faf0:	0800fbb1 	.word	0x0800fbb1
 800faf4:	0800fd87 	.word	0x0800fd87
 800faf8:	0800fd87 	.word	0x0800fd87
 800fafc:	0800fd27 	.word	0x0800fd27
 800fb00:	0800fd53 	.word	0x0800fd53
 800fb04:	0800fd87 	.word	0x0800fd87
 800fb08:	0800fd87 	.word	0x0800fd87
 800fb0c:	0800fd87 	.word	0x0800fd87
 800fb10:	0800fd87 	.word	0x0800fd87
 800fb14:	0800fd87 	.word	0x0800fd87
 800fb18:	0800fd87 	.word	0x0800fd87
 800fb1c:	0800fd87 	.word	0x0800fd87
 800fb20:	0800fb25 	.word	0x0800fb25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb2a:	69db      	ldr	r3, [r3, #28]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d00b      	beq.n	800fb48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb36:	69db      	ldr	r3, [r3, #28]
 800fb38:	687a      	ldr	r2, [r7, #4]
 800fb3a:	7c12      	ldrb	r2, [r2, #16]
 800fb3c:	f107 0108 	add.w	r1, r7, #8
 800fb40:	4610      	mov	r0, r2
 800fb42:	4798      	blx	r3
 800fb44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb46:	e126      	b.n	800fd96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fb48:	6839      	ldr	r1, [r7, #0]
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 fb27 	bl	801019e <USBD_CtlError>
        err++;
 800fb50:	7afb      	ldrb	r3, [r7, #11]
 800fb52:	3301      	adds	r3, #1
 800fb54:	72fb      	strb	r3, [r7, #11]
      break;
 800fb56:	e11e      	b.n	800fd96 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	7c12      	ldrb	r2, [r2, #16]
 800fb64:	f107 0108 	add.w	r1, r7, #8
 800fb68:	4610      	mov	r0, r2
 800fb6a:	4798      	blx	r3
 800fb6c:	60f8      	str	r0, [r7, #12]
      break;
 800fb6e:	e112      	b.n	800fd96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	7c1b      	ldrb	r3, [r3, #16]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d10d      	bne.n	800fb94 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb80:	f107 0208 	add.w	r2, r7, #8
 800fb84:	4610      	mov	r0, r2
 800fb86:	4798      	blx	r3
 800fb88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	2202      	movs	r2, #2
 800fb90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fb92:	e100      	b.n	800fd96 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb9c:	f107 0208 	add.w	r2, r7, #8
 800fba0:	4610      	mov	r0, r2
 800fba2:	4798      	blx	r3
 800fba4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	2202      	movs	r2, #2
 800fbac:	701a      	strb	r2, [r3, #0]
      break;
 800fbae:	e0f2      	b.n	800fd96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	885b      	ldrh	r3, [r3, #2]
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	2b05      	cmp	r3, #5
 800fbb8:	f200 80ac 	bhi.w	800fd14 <USBD_GetDescriptor+0x258>
 800fbbc:	a201      	add	r2, pc, #4	; (adr r2, 800fbc4 <USBD_GetDescriptor+0x108>)
 800fbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc2:	bf00      	nop
 800fbc4:	0800fbdd 	.word	0x0800fbdd
 800fbc8:	0800fc11 	.word	0x0800fc11
 800fbcc:	0800fc45 	.word	0x0800fc45
 800fbd0:	0800fc79 	.word	0x0800fc79
 800fbd4:	0800fcad 	.word	0x0800fcad
 800fbd8:	0800fce1 	.word	0x0800fce1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d00b      	beq.n	800fc00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	7c12      	ldrb	r2, [r2, #16]
 800fbf4:	f107 0108 	add.w	r1, r7, #8
 800fbf8:	4610      	mov	r0, r2
 800fbfa:	4798      	blx	r3
 800fbfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbfe:	e091      	b.n	800fd24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc00:	6839      	ldr	r1, [r7, #0]
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 facb 	bl	801019e <USBD_CtlError>
            err++;
 800fc08:	7afb      	ldrb	r3, [r7, #11]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	72fb      	strb	r3, [r7, #11]
          break;
 800fc0e:	e089      	b.n	800fd24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc16:	689b      	ldr	r3, [r3, #8]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d00b      	beq.n	800fc34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	7c12      	ldrb	r2, [r2, #16]
 800fc28:	f107 0108 	add.w	r1, r7, #8
 800fc2c:	4610      	mov	r0, r2
 800fc2e:	4798      	blx	r3
 800fc30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc32:	e077      	b.n	800fd24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc34:	6839      	ldr	r1, [r7, #0]
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 fab1 	bl	801019e <USBD_CtlError>
            err++;
 800fc3c:	7afb      	ldrb	r3, [r7, #11]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	72fb      	strb	r3, [r7, #11]
          break;
 800fc42:	e06f      	b.n	800fd24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d00b      	beq.n	800fc68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	7c12      	ldrb	r2, [r2, #16]
 800fc5c:	f107 0108 	add.w	r1, r7, #8
 800fc60:	4610      	mov	r0, r2
 800fc62:	4798      	blx	r3
 800fc64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc66:	e05d      	b.n	800fd24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc68:	6839      	ldr	r1, [r7, #0]
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fa97 	bl	801019e <USBD_CtlError>
            err++;
 800fc70:	7afb      	ldrb	r3, [r7, #11]
 800fc72:	3301      	adds	r3, #1
 800fc74:	72fb      	strb	r3, [r7, #11]
          break;
 800fc76:	e055      	b.n	800fd24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc7e:	691b      	ldr	r3, [r3, #16]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d00b      	beq.n	800fc9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	7c12      	ldrb	r2, [r2, #16]
 800fc90:	f107 0108 	add.w	r1, r7, #8
 800fc94:	4610      	mov	r0, r2
 800fc96:	4798      	blx	r3
 800fc98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc9a:	e043      	b.n	800fd24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc9c:	6839      	ldr	r1, [r7, #0]
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 fa7d 	bl	801019e <USBD_CtlError>
            err++;
 800fca4:	7afb      	ldrb	r3, [r7, #11]
 800fca6:	3301      	adds	r3, #1
 800fca8:	72fb      	strb	r3, [r7, #11]
          break;
 800fcaa:	e03b      	b.n	800fd24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcb2:	695b      	ldr	r3, [r3, #20]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d00b      	beq.n	800fcd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcbe:	695b      	ldr	r3, [r3, #20]
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	7c12      	ldrb	r2, [r2, #16]
 800fcc4:	f107 0108 	add.w	r1, r7, #8
 800fcc8:	4610      	mov	r0, r2
 800fcca:	4798      	blx	r3
 800fccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcce:	e029      	b.n	800fd24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fcd0:	6839      	ldr	r1, [r7, #0]
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 fa63 	bl	801019e <USBD_CtlError>
            err++;
 800fcd8:	7afb      	ldrb	r3, [r7, #11]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	72fb      	strb	r3, [r7, #11]
          break;
 800fcde:	e021      	b.n	800fd24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fce6:	699b      	ldr	r3, [r3, #24]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00b      	beq.n	800fd04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcf2:	699b      	ldr	r3, [r3, #24]
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	7c12      	ldrb	r2, [r2, #16]
 800fcf8:	f107 0108 	add.w	r1, r7, #8
 800fcfc:	4610      	mov	r0, r2
 800fcfe:	4798      	blx	r3
 800fd00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd02:	e00f      	b.n	800fd24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd04:	6839      	ldr	r1, [r7, #0]
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 fa49 	bl	801019e <USBD_CtlError>
            err++;
 800fd0c:	7afb      	ldrb	r3, [r7, #11]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	72fb      	strb	r3, [r7, #11]
          break;
 800fd12:	e007      	b.n	800fd24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fd14:	6839      	ldr	r1, [r7, #0]
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 fa41 	bl	801019e <USBD_CtlError>
          err++;
 800fd1c:	7afb      	ldrb	r3, [r7, #11]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fd22:	bf00      	nop
      }
      break;
 800fd24:	e037      	b.n	800fd96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	7c1b      	ldrb	r3, [r3, #16]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d109      	bne.n	800fd42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd36:	f107 0208 	add.w	r2, r7, #8
 800fd3a:	4610      	mov	r0, r2
 800fd3c:	4798      	blx	r3
 800fd3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd40:	e029      	b.n	800fd96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd42:	6839      	ldr	r1, [r7, #0]
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 fa2a 	bl	801019e <USBD_CtlError>
        err++;
 800fd4a:	7afb      	ldrb	r3, [r7, #11]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	72fb      	strb	r3, [r7, #11]
      break;
 800fd50:	e021      	b.n	800fd96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	7c1b      	ldrb	r3, [r3, #16]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d10d      	bne.n	800fd76 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd62:	f107 0208 	add.w	r2, r7, #8
 800fd66:	4610      	mov	r0, r2
 800fd68:	4798      	blx	r3
 800fd6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	3301      	adds	r3, #1
 800fd70:	2207      	movs	r2, #7
 800fd72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd74:	e00f      	b.n	800fd96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd76:	6839      	ldr	r1, [r7, #0]
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 fa10 	bl	801019e <USBD_CtlError>
        err++;
 800fd7e:	7afb      	ldrb	r3, [r7, #11]
 800fd80:	3301      	adds	r3, #1
 800fd82:	72fb      	strb	r3, [r7, #11]
      break;
 800fd84:	e007      	b.n	800fd96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fd86:	6839      	ldr	r1, [r7, #0]
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 fa08 	bl	801019e <USBD_CtlError>
      err++;
 800fd8e:	7afb      	ldrb	r3, [r7, #11]
 800fd90:	3301      	adds	r3, #1
 800fd92:	72fb      	strb	r3, [r7, #11]
      break;
 800fd94:	bf00      	nop
  }

  if (err != 0U)
 800fd96:	7afb      	ldrb	r3, [r7, #11]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d11e      	bne.n	800fdda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	88db      	ldrh	r3, [r3, #6]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d016      	beq.n	800fdd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fda4:	893b      	ldrh	r3, [r7, #8]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d00e      	beq.n	800fdc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	88da      	ldrh	r2, [r3, #6]
 800fdae:	893b      	ldrh	r3, [r7, #8]
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	bf28      	it	cs
 800fdb4:	4613      	movcs	r3, r2
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fdba:	893b      	ldrh	r3, [r7, #8]
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	68f9      	ldr	r1, [r7, #12]
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f000 fa5d 	bl	8010280 <USBD_CtlSendData>
 800fdc6:	e009      	b.n	800fddc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fdc8:	6839      	ldr	r1, [r7, #0]
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f000 f9e7 	bl	801019e <USBD_CtlError>
 800fdd0:	e004      	b.n	800fddc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f000 fa91 	bl	80102fa <USBD_CtlSendStatus>
 800fdd8:	e000      	b.n	800fddc <USBD_GetDescriptor+0x320>
    return;
 800fdda:	bf00      	nop
  }
}
 800fddc:	3710      	adds	r7, #16
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop

0800fde4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	889b      	ldrh	r3, [r3, #4]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d131      	bne.n	800fe5a <USBD_SetAddress+0x76>
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	88db      	ldrh	r3, [r3, #6]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d12d      	bne.n	800fe5a <USBD_SetAddress+0x76>
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	885b      	ldrh	r3, [r3, #2]
 800fe02:	2b7f      	cmp	r3, #127	; 0x7f
 800fe04:	d829      	bhi.n	800fe5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	885b      	ldrh	r3, [r3, #2]
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe18:	b2db      	uxtb	r3, r3
 800fe1a:	2b03      	cmp	r3, #3
 800fe1c:	d104      	bne.n	800fe28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fe1e:	6839      	ldr	r1, [r7, #0]
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 f9bc 	bl	801019e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe26:	e01d      	b.n	800fe64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	7bfa      	ldrb	r2, [r7, #15]
 800fe2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	4619      	mov	r1, r3
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 fe2f 	bl	8010a98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f000 fa5d 	bl	80102fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fe40:	7bfb      	ldrb	r3, [r7, #15]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d004      	beq.n	800fe50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2202      	movs	r2, #2
 800fe4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe4e:	e009      	b.n	800fe64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2201      	movs	r2, #1
 800fe54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe58:	e004      	b.n	800fe64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fe5a:	6839      	ldr	r1, [r7, #0]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f99e 	bl	801019e <USBD_CtlError>
  }
}
 800fe62:	bf00      	nop
 800fe64:	bf00      	nop
 800fe66:	3710      	adds	r7, #16
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe76:	2300      	movs	r3, #0
 800fe78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	885b      	ldrh	r3, [r3, #2]
 800fe7e:	b2da      	uxtb	r2, r3
 800fe80:	4b4e      	ldr	r3, [pc, #312]	; (800ffbc <USBD_SetConfig+0x150>)
 800fe82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fe84:	4b4d      	ldr	r3, [pc, #308]	; (800ffbc <USBD_SetConfig+0x150>)
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d905      	bls.n	800fe98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fe8c:	6839      	ldr	r1, [r7, #0]
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 f985 	bl	801019e <USBD_CtlError>
    return USBD_FAIL;
 800fe94:	2303      	movs	r3, #3
 800fe96:	e08c      	b.n	800ffb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	2b02      	cmp	r3, #2
 800fea2:	d002      	beq.n	800feaa <USBD_SetConfig+0x3e>
 800fea4:	2b03      	cmp	r3, #3
 800fea6:	d029      	beq.n	800fefc <USBD_SetConfig+0x90>
 800fea8:	e075      	b.n	800ff96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800feaa:	4b44      	ldr	r3, [pc, #272]	; (800ffbc <USBD_SetConfig+0x150>)
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d020      	beq.n	800fef4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800feb2:	4b42      	ldr	r3, [pc, #264]	; (800ffbc <USBD_SetConfig+0x150>)
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	461a      	mov	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800febc:	4b3f      	ldr	r3, [pc, #252]	; (800ffbc <USBD_SetConfig+0x150>)
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	4619      	mov	r1, r3
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7ff f849 	bl	800ef5a <USBD_SetClassConfig>
 800fec8:	4603      	mov	r3, r0
 800feca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fecc:	7bfb      	ldrb	r3, [r7, #15]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d008      	beq.n	800fee4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fed2:	6839      	ldr	r1, [r7, #0]
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 f962 	bl	801019e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2202      	movs	r2, #2
 800fede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fee2:	e065      	b.n	800ffb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 fa08 	bl	80102fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2203      	movs	r2, #3
 800feee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fef2:	e05d      	b.n	800ffb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 fa00 	bl	80102fa <USBD_CtlSendStatus>
      break;
 800fefa:	e059      	b.n	800ffb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fefc:	4b2f      	ldr	r3, [pc, #188]	; (800ffbc <USBD_SetConfig+0x150>)
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d112      	bne.n	800ff2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2202      	movs	r2, #2
 800ff08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ff0c:	4b2b      	ldr	r3, [pc, #172]	; (800ffbc <USBD_SetConfig+0x150>)
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	461a      	mov	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff16:	4b29      	ldr	r3, [pc, #164]	; (800ffbc <USBD_SetConfig+0x150>)
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7ff f838 	bl	800ef92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f000 f9e9 	bl	80102fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff28:	e042      	b.n	800ffb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ff2a:	4b24      	ldr	r3, [pc, #144]	; (800ffbc <USBD_SetConfig+0x150>)
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d02a      	beq.n	800ff8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	4619      	mov	r1, r3
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f7ff f826 	bl	800ef92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ff46:	4b1d      	ldr	r3, [pc, #116]	; (800ffbc <USBD_SetConfig+0x150>)
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff50:	4b1a      	ldr	r3, [pc, #104]	; (800ffbc <USBD_SetConfig+0x150>)
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	4619      	mov	r1, r3
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7fe ffff 	bl	800ef5a <USBD_SetClassConfig>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ff60:	7bfb      	ldrb	r3, [r7, #15]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d00f      	beq.n	800ff86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ff66:	6839      	ldr	r1, [r7, #0]
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 f918 	bl	801019e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	685b      	ldr	r3, [r3, #4]
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	4619      	mov	r1, r3
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7ff f80b 	bl	800ef92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2202      	movs	r2, #2
 800ff80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ff84:	e014      	b.n	800ffb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 f9b7 	bl	80102fa <USBD_CtlSendStatus>
      break;
 800ff8c:	e010      	b.n	800ffb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 f9b3 	bl	80102fa <USBD_CtlSendStatus>
      break;
 800ff94:	e00c      	b.n	800ffb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ff96:	6839      	ldr	r1, [r7, #0]
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f900 	bl	801019e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff9e:	4b07      	ldr	r3, [pc, #28]	; (800ffbc <USBD_SetConfig+0x150>)
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f7fe fff4 	bl	800ef92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ffaa:	2303      	movs	r3, #3
 800ffac:	73fb      	strb	r3, [r7, #15]
      break;
 800ffae:	bf00      	nop
  }

  return ret;
 800ffb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	20000ca8 	.word	0x20000ca8

0800ffc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	88db      	ldrh	r3, [r3, #6]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d004      	beq.n	800ffdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ffd2:	6839      	ldr	r1, [r7, #0]
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 f8e2 	bl	801019e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ffda:	e023      	b.n	8010024 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	2b02      	cmp	r3, #2
 800ffe6:	dc02      	bgt.n	800ffee <USBD_GetConfig+0x2e>
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	dc03      	bgt.n	800fff4 <USBD_GetConfig+0x34>
 800ffec:	e015      	b.n	801001a <USBD_GetConfig+0x5a>
 800ffee:	2b03      	cmp	r3, #3
 800fff0:	d00b      	beq.n	801000a <USBD_GetConfig+0x4a>
 800fff2:	e012      	b.n	801001a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2200      	movs	r2, #0
 800fff8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	3308      	adds	r3, #8
 800fffe:	2201      	movs	r2, #1
 8010000:	4619      	mov	r1, r3
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 f93c 	bl	8010280 <USBD_CtlSendData>
        break;
 8010008:	e00c      	b.n	8010024 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	3304      	adds	r3, #4
 801000e:	2201      	movs	r2, #1
 8010010:	4619      	mov	r1, r3
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 f934 	bl	8010280 <USBD_CtlSendData>
        break;
 8010018:	e004      	b.n	8010024 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801001a:	6839      	ldr	r1, [r7, #0]
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 f8be 	bl	801019e <USBD_CtlError>
        break;
 8010022:	bf00      	nop
}
 8010024:	bf00      	nop
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801003c:	b2db      	uxtb	r3, r3
 801003e:	3b01      	subs	r3, #1
 8010040:	2b02      	cmp	r3, #2
 8010042:	d81e      	bhi.n	8010082 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	88db      	ldrh	r3, [r3, #6]
 8010048:	2b02      	cmp	r3, #2
 801004a:	d004      	beq.n	8010056 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801004c:	6839      	ldr	r1, [r7, #0]
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 f8a5 	bl	801019e <USBD_CtlError>
        break;
 8010054:	e01a      	b.n	801008c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2201      	movs	r2, #1
 801005a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010062:	2b00      	cmp	r3, #0
 8010064:	d005      	beq.n	8010072 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	68db      	ldr	r3, [r3, #12]
 801006a:	f043 0202 	orr.w	r2, r3, #2
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	330c      	adds	r3, #12
 8010076:	2202      	movs	r2, #2
 8010078:	4619      	mov	r1, r3
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 f900 	bl	8010280 <USBD_CtlSendData>
      break;
 8010080:	e004      	b.n	801008c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010082:	6839      	ldr	r1, [r7, #0]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 f88a 	bl	801019e <USBD_CtlError>
      break;
 801008a:	bf00      	nop
  }
}
 801008c:	bf00      	nop
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	885b      	ldrh	r3, [r3, #2]
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d107      	bne.n	80100b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2201      	movs	r2, #1
 80100aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f923 	bl	80102fa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80100b4:	e013      	b.n	80100de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	885b      	ldrh	r3, [r3, #2]
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	d10b      	bne.n	80100d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	889b      	ldrh	r3, [r3, #4]
 80100c2:	0a1b      	lsrs	r3, r3, #8
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	b2da      	uxtb	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 f913 	bl	80102fa <USBD_CtlSendStatus>
}
 80100d4:	e003      	b.n	80100de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80100d6:	6839      	ldr	r1, [r7, #0]
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 f860 	bl	801019e <USBD_CtlError>
}
 80100de:	bf00      	nop
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b082      	sub	sp, #8
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	3b01      	subs	r3, #1
 80100fa:	2b02      	cmp	r3, #2
 80100fc:	d80b      	bhi.n	8010116 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	885b      	ldrh	r3, [r3, #2]
 8010102:	2b01      	cmp	r3, #1
 8010104:	d10c      	bne.n	8010120 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f000 f8f3 	bl	80102fa <USBD_CtlSendStatus>
      }
      break;
 8010114:	e004      	b.n	8010120 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010116:	6839      	ldr	r1, [r7, #0]
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 f840 	bl	801019e <USBD_CtlError>
      break;
 801011e:	e000      	b.n	8010122 <USBD_ClrFeature+0x3c>
      break;
 8010120:	bf00      	nop
  }
}
 8010122:	bf00      	nop
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801012a:	b580      	push	{r7, lr}
 801012c:	b084      	sub	sp, #16
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
 8010132:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	781a      	ldrb	r2, [r3, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	3301      	adds	r3, #1
 8010144:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	781a      	ldrb	r2, [r3, #0]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	3301      	adds	r3, #1
 8010152:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010154:	68f8      	ldr	r0, [r7, #12]
 8010156:	f7ff fa17 	bl	800f588 <SWAPBYTE>
 801015a:	4603      	mov	r3, r0
 801015c:	461a      	mov	r2, r3
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3301      	adds	r3, #1
 8010166:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	3301      	adds	r3, #1
 801016c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801016e:	68f8      	ldr	r0, [r7, #12]
 8010170:	f7ff fa0a 	bl	800f588 <SWAPBYTE>
 8010174:	4603      	mov	r3, r0
 8010176:	461a      	mov	r2, r3
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	3301      	adds	r3, #1
 8010180:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	3301      	adds	r3, #1
 8010186:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010188:	68f8      	ldr	r0, [r7, #12]
 801018a:	f7ff f9fd 	bl	800f588 <SWAPBYTE>
 801018e:	4603      	mov	r3, r0
 8010190:	461a      	mov	r2, r3
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	80da      	strh	r2, [r3, #6]
}
 8010196:	bf00      	nop
 8010198:	3710      	adds	r7, #16
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b082      	sub	sp, #8
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
 80101a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80101a8:	2180      	movs	r1, #128	; 0x80
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 fbda 	bl	8010964 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80101b0:	2100      	movs	r1, #0
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 fbd6 	bl	8010964 <USBD_LL_StallEP>
}
 80101b8:	bf00      	nop
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b086      	sub	sp, #24
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80101cc:	2300      	movs	r3, #0
 80101ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d036      	beq.n	8010244 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80101da:	6938      	ldr	r0, [r7, #16]
 80101dc:	f000 f836 	bl	801024c <USBD_GetLen>
 80101e0:	4603      	mov	r3, r0
 80101e2:	3301      	adds	r3, #1
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	005b      	lsls	r3, r3, #1
 80101e8:	b29a      	uxth	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80101ee:	7dfb      	ldrb	r3, [r7, #23]
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	4413      	add	r3, r2
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	7812      	ldrb	r2, [r2, #0]
 80101f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80101fa:	7dfb      	ldrb	r3, [r7, #23]
 80101fc:	3301      	adds	r3, #1
 80101fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010200:	7dfb      	ldrb	r3, [r7, #23]
 8010202:	68ba      	ldr	r2, [r7, #8]
 8010204:	4413      	add	r3, r2
 8010206:	2203      	movs	r2, #3
 8010208:	701a      	strb	r2, [r3, #0]
  idx++;
 801020a:	7dfb      	ldrb	r3, [r7, #23]
 801020c:	3301      	adds	r3, #1
 801020e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010210:	e013      	b.n	801023a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010212:	7dfb      	ldrb	r3, [r7, #23]
 8010214:	68ba      	ldr	r2, [r7, #8]
 8010216:	4413      	add	r3, r2
 8010218:	693a      	ldr	r2, [r7, #16]
 801021a:	7812      	ldrb	r2, [r2, #0]
 801021c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	3301      	adds	r3, #1
 8010222:	613b      	str	r3, [r7, #16]
    idx++;
 8010224:	7dfb      	ldrb	r3, [r7, #23]
 8010226:	3301      	adds	r3, #1
 8010228:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801022a:	7dfb      	ldrb	r3, [r7, #23]
 801022c:	68ba      	ldr	r2, [r7, #8]
 801022e:	4413      	add	r3, r2
 8010230:	2200      	movs	r2, #0
 8010232:	701a      	strb	r2, [r3, #0]
    idx++;
 8010234:	7dfb      	ldrb	r3, [r7, #23]
 8010236:	3301      	adds	r3, #1
 8010238:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d1e7      	bne.n	8010212 <USBD_GetString+0x52>
 8010242:	e000      	b.n	8010246 <USBD_GetString+0x86>
    return;
 8010244:	bf00      	nop
  }
}
 8010246:	3718      	adds	r7, #24
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801024c:	b480      	push	{r7}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010254:	2300      	movs	r3, #0
 8010256:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801025c:	e005      	b.n	801026a <USBD_GetLen+0x1e>
  {
    len++;
 801025e:	7bfb      	ldrb	r3, [r7, #15]
 8010260:	3301      	adds	r3, #1
 8010262:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	3301      	adds	r3, #1
 8010268:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d1f5      	bne.n	801025e <USBD_GetLen+0x12>
  }

  return len;
 8010272:	7bfb      	ldrb	r3, [r7, #15]
}
 8010274:	4618      	mov	r0, r3
 8010276:	3714      	adds	r7, #20
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b084      	sub	sp, #16
 8010284:	af00      	add	r7, sp, #0
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2202      	movs	r2, #2
 8010290:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	687a      	ldr	r2, [r7, #4]
 801029e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	68ba      	ldr	r2, [r7, #8]
 80102a4:	2100      	movs	r1, #0
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f000 fc2c 	bl	8010b04 <USBD_LL_Transmit>

  return USBD_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b084      	sub	sp, #16
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	60f8      	str	r0, [r7, #12]
 80102be:	60b9      	str	r1, [r7, #8]
 80102c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	68ba      	ldr	r2, [r7, #8]
 80102c6:	2100      	movs	r1, #0
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f000 fc1b 	bl	8010b04 <USBD_LL_Transmit>

  return USBD_OK;
 80102ce:	2300      	movs	r3, #0
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3710      	adds	r7, #16
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	2100      	movs	r1, #0
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f000 fc42 	bl	8010b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102f0:	2300      	movs	r3, #0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3710      	adds	r7, #16
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b082      	sub	sp, #8
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2204      	movs	r2, #4
 8010306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801030a:	2300      	movs	r3, #0
 801030c:	2200      	movs	r2, #0
 801030e:	2100      	movs	r1, #0
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 fbf7 	bl	8010b04 <USBD_LL_Transmit>

  return USBD_OK;
 8010316:	2300      	movs	r3, #0
}
 8010318:	4618      	mov	r0, r3
 801031a:	3708      	adds	r7, #8
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2205      	movs	r2, #5
 801032c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010330:	2300      	movs	r3, #0
 8010332:	2200      	movs	r2, #0
 8010334:	2100      	movs	r1, #0
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 fc1c 	bl	8010b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801033c:	2300      	movs	r3, #0
}
 801033e:	4618      	mov	r0, r3
 8010340:	3708      	adds	r7, #8
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
	...

08010348 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801034c:	2200      	movs	r2, #0
 801034e:	490e      	ldr	r1, [pc, #56]	; (8010388 <MX_USB_DEVICE_Init+0x40>)
 8010350:	480e      	ldr	r0, [pc, #56]	; (801038c <MX_USB_DEVICE_Init+0x44>)
 8010352:	f7fe fd85 	bl	800ee60 <USBD_Init>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d001      	beq.n	8010360 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801035c:	f7f1 fa4c 	bl	80017f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8010360:	490b      	ldr	r1, [pc, #44]	; (8010390 <MX_USB_DEVICE_Init+0x48>)
 8010362:	480a      	ldr	r0, [pc, #40]	; (801038c <MX_USB_DEVICE_Init+0x44>)
 8010364:	f7fe fdac 	bl	800eec0 <USBD_RegisterClass>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d001      	beq.n	8010372 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801036e:	f7f1 fa43 	bl	80017f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010372:	4806      	ldr	r0, [pc, #24]	; (801038c <MX_USB_DEVICE_Init+0x44>)
 8010374:	f7fe fdda 	bl	800ef2c <USBD_Start>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d001      	beq.n	8010382 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 801037e:	f7f1 fa3b 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010382:	bf00      	nop
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	200000ec 	.word	0x200000ec
 801038c:	20000cac 	.word	0x20000cac
 8010390:	2000002c 	.word	0x2000002c

08010394 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	4603      	mov	r3, r0
 801039c:	6039      	str	r1, [r7, #0]
 801039e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	2212      	movs	r2, #18
 80103a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80103a6:	4b03      	ldr	r3, [pc, #12]	; (80103b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr
 80103b4:	2000010c 	.word	0x2000010c

080103b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	4603      	mov	r3, r0
 80103c0:	6039      	str	r1, [r7, #0]
 80103c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	2204      	movs	r2, #4
 80103c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80103ca:	4b03      	ldr	r3, [pc, #12]	; (80103d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr
 80103d8:	2000012c 	.word	0x2000012c

080103dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	4603      	mov	r3, r0
 80103e4:	6039      	str	r1, [r7, #0]
 80103e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80103e8:	79fb      	ldrb	r3, [r7, #7]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d105      	bne.n	80103fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80103ee:	683a      	ldr	r2, [r7, #0]
 80103f0:	4907      	ldr	r1, [pc, #28]	; (8010410 <USBD_FS_ProductStrDescriptor+0x34>)
 80103f2:	4808      	ldr	r0, [pc, #32]	; (8010414 <USBD_FS_ProductStrDescriptor+0x38>)
 80103f4:	f7ff fee4 	bl	80101c0 <USBD_GetString>
 80103f8:	e004      	b.n	8010404 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80103fa:	683a      	ldr	r2, [r7, #0]
 80103fc:	4904      	ldr	r1, [pc, #16]	; (8010410 <USBD_FS_ProductStrDescriptor+0x34>)
 80103fe:	4805      	ldr	r0, [pc, #20]	; (8010414 <USBD_FS_ProductStrDescriptor+0x38>)
 8010400:	f7ff fede 	bl	80101c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010404:	4b02      	ldr	r3, [pc, #8]	; (8010410 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010406:	4618      	mov	r0, r3
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	20000f88 	.word	0x20000f88
 8010414:	08016c44 	.word	0x08016c44

08010418 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
 801041e:	4603      	mov	r3, r0
 8010420:	6039      	str	r1, [r7, #0]
 8010422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010424:	683a      	ldr	r2, [r7, #0]
 8010426:	4904      	ldr	r1, [pc, #16]	; (8010438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010428:	4804      	ldr	r0, [pc, #16]	; (801043c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801042a:	f7ff fec9 	bl	80101c0 <USBD_GetString>
  return USBD_StrDesc;
 801042e:	4b02      	ldr	r3, [pc, #8]	; (8010438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010430:	4618      	mov	r0, r3
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	20000f88 	.word	0x20000f88
 801043c:	08016c5c 	.word	0x08016c5c

08010440 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	4603      	mov	r3, r0
 8010448:	6039      	str	r1, [r7, #0]
 801044a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	221a      	movs	r2, #26
 8010450:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010452:	f000 f855 	bl	8010500 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010456:	4b02      	ldr	r3, [pc, #8]	; (8010460 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010458:	4618      	mov	r0, r3
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	20000130 	.word	0x20000130

08010464 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	4603      	mov	r3, r0
 801046c:	6039      	str	r1, [r7, #0]
 801046e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010470:	79fb      	ldrb	r3, [r7, #7]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d105      	bne.n	8010482 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010476:	683a      	ldr	r2, [r7, #0]
 8010478:	4907      	ldr	r1, [pc, #28]	; (8010498 <USBD_FS_ConfigStrDescriptor+0x34>)
 801047a:	4808      	ldr	r0, [pc, #32]	; (801049c <USBD_FS_ConfigStrDescriptor+0x38>)
 801047c:	f7ff fea0 	bl	80101c0 <USBD_GetString>
 8010480:	e004      	b.n	801048c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010482:	683a      	ldr	r2, [r7, #0]
 8010484:	4904      	ldr	r1, [pc, #16]	; (8010498 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010486:	4805      	ldr	r0, [pc, #20]	; (801049c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010488:	f7ff fe9a 	bl	80101c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801048c:	4b02      	ldr	r3, [pc, #8]	; (8010498 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801048e:	4618      	mov	r0, r3
 8010490:	3708      	adds	r7, #8
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	20000f88 	.word	0x20000f88
 801049c:	08016c70 	.word	0x08016c70

080104a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	6039      	str	r1, [r7, #0]
 80104aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80104ac:	79fb      	ldrb	r3, [r7, #7]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d105      	bne.n	80104be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80104b2:	683a      	ldr	r2, [r7, #0]
 80104b4:	4907      	ldr	r1, [pc, #28]	; (80104d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80104b6:	4808      	ldr	r0, [pc, #32]	; (80104d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80104b8:	f7ff fe82 	bl	80101c0 <USBD_GetString>
 80104bc:	e004      	b.n	80104c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80104be:	683a      	ldr	r2, [r7, #0]
 80104c0:	4904      	ldr	r1, [pc, #16]	; (80104d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80104c2:	4805      	ldr	r0, [pc, #20]	; (80104d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80104c4:	f7ff fe7c 	bl	80101c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80104c8:	4b02      	ldr	r3, [pc, #8]	; (80104d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3708      	adds	r7, #8
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	20000f88 	.word	0x20000f88
 80104d8:	08016c7c 	.word	0x08016c7c

080104dc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104dc:	b480      	push	{r7}
 80104de:	b083      	sub	sp, #12
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	4603      	mov	r3, r0
 80104e4:	6039      	str	r1, [r7, #0]
 80104e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	220c      	movs	r2, #12
 80104ec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80104ee:	4b03      	ldr	r3, [pc, #12]	; (80104fc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	370c      	adds	r7, #12
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr
 80104fc:	20000120 	.word	0x20000120

08010500 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010506:	4b0f      	ldr	r3, [pc, #60]	; (8010544 <Get_SerialNum+0x44>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801050c:	4b0e      	ldr	r3, [pc, #56]	; (8010548 <Get_SerialNum+0x48>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010512:	4b0e      	ldr	r3, [pc, #56]	; (801054c <Get_SerialNum+0x4c>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010518:	68fa      	ldr	r2, [r7, #12]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4413      	add	r3, r2
 801051e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d009      	beq.n	801053a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010526:	2208      	movs	r2, #8
 8010528:	4909      	ldr	r1, [pc, #36]	; (8010550 <Get_SerialNum+0x50>)
 801052a:	68f8      	ldr	r0, [r7, #12]
 801052c:	f000 f814 	bl	8010558 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010530:	2204      	movs	r2, #4
 8010532:	4908      	ldr	r1, [pc, #32]	; (8010554 <Get_SerialNum+0x54>)
 8010534:	68b8      	ldr	r0, [r7, #8]
 8010536:	f000 f80f 	bl	8010558 <IntToUnicode>
  }
}
 801053a:	bf00      	nop
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	1fff7590 	.word	0x1fff7590
 8010548:	1fff7594 	.word	0x1fff7594
 801054c:	1fff7598 	.word	0x1fff7598
 8010550:	20000132 	.word	0x20000132
 8010554:	20000142 	.word	0x20000142

08010558 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010558:	b480      	push	{r7}
 801055a:	b087      	sub	sp, #28
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	4613      	mov	r3, r2
 8010564:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010566:	2300      	movs	r3, #0
 8010568:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801056a:	2300      	movs	r3, #0
 801056c:	75fb      	strb	r3, [r7, #23]
 801056e:	e027      	b.n	80105c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	0f1b      	lsrs	r3, r3, #28
 8010574:	2b09      	cmp	r3, #9
 8010576:	d80b      	bhi.n	8010590 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	0f1b      	lsrs	r3, r3, #28
 801057c:	b2da      	uxtb	r2, r3
 801057e:	7dfb      	ldrb	r3, [r7, #23]
 8010580:	005b      	lsls	r3, r3, #1
 8010582:	4619      	mov	r1, r3
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	440b      	add	r3, r1
 8010588:	3230      	adds	r2, #48	; 0x30
 801058a:	b2d2      	uxtb	r2, r2
 801058c:	701a      	strb	r2, [r3, #0]
 801058e:	e00a      	b.n	80105a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	0f1b      	lsrs	r3, r3, #28
 8010594:	b2da      	uxtb	r2, r3
 8010596:	7dfb      	ldrb	r3, [r7, #23]
 8010598:	005b      	lsls	r3, r3, #1
 801059a:	4619      	mov	r1, r3
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	440b      	add	r3, r1
 80105a0:	3237      	adds	r2, #55	; 0x37
 80105a2:	b2d2      	uxtb	r2, r2
 80105a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	011b      	lsls	r3, r3, #4
 80105aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80105ac:	7dfb      	ldrb	r3, [r7, #23]
 80105ae:	005b      	lsls	r3, r3, #1
 80105b0:	3301      	adds	r3, #1
 80105b2:	68ba      	ldr	r2, [r7, #8]
 80105b4:	4413      	add	r3, r2
 80105b6:	2200      	movs	r2, #0
 80105b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80105ba:	7dfb      	ldrb	r3, [r7, #23]
 80105bc:	3301      	adds	r3, #1
 80105be:	75fb      	strb	r3, [r7, #23]
 80105c0:	7dfa      	ldrb	r2, [r7, #23]
 80105c2:	79fb      	ldrb	r3, [r7, #7]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d3d3      	bcc.n	8010570 <IntToUnicode+0x18>
  }
}
 80105c8:	bf00      	nop
 80105ca:	bf00      	nop
 80105cc:	371c      	adds	r7, #28
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr
	...

080105d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4a0d      	ldr	r2, [pc, #52]	; (801061c <HAL_PCD_MspInit+0x44>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d113      	bne.n	8010612 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80105ea:	4b0d      	ldr	r3, [pc, #52]	; (8010620 <HAL_PCD_MspInit+0x48>)
 80105ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105ee:	4a0c      	ldr	r2, [pc, #48]	; (8010620 <HAL_PCD_MspInit+0x48>)
 80105f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80105f4:	6593      	str	r3, [r2, #88]	; 0x58
 80105f6:	4b0a      	ldr	r3, [pc, #40]	; (8010620 <HAL_PCD_MspInit+0x48>)
 80105f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80105fe:	60fb      	str	r3, [r7, #12]
 8010600:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8010602:	2200      	movs	r2, #0
 8010604:	2100      	movs	r1, #0
 8010606:	2043      	movs	r0, #67	; 0x43
 8010608:	f7f5 fc43 	bl	8005e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801060c:	2043      	movs	r0, #67	; 0x43
 801060e:	f7f5 fc5c 	bl	8005eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010612:	bf00      	nop
 8010614:	3710      	adds	r7, #16
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	40006800 	.word	0x40006800
 8010620:	40021000 	.word	0x40021000

08010624 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010638:	4619      	mov	r1, r3
 801063a:	4610      	mov	r0, r2
 801063c:	f7fe fcc3 	bl	800efc6 <USBD_LL_SetupStage>
}
 8010640:	bf00      	nop
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	460b      	mov	r3, r1
 8010652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 801065a:	78fa      	ldrb	r2, [r7, #3]
 801065c:	6879      	ldr	r1, [r7, #4]
 801065e:	4613      	mov	r3, r2
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	4413      	add	r3, r2
 8010664:	00db      	lsls	r3, r3, #3
 8010666:	440b      	add	r3, r1
 8010668:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	78fb      	ldrb	r3, [r7, #3]
 8010670:	4619      	mov	r1, r3
 8010672:	f7fe fcfd 	bl	800f070 <USBD_LL_DataOutStage>
}
 8010676:	bf00      	nop
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b082      	sub	sp, #8
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
 8010686:	460b      	mov	r3, r1
 8010688:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8010690:	78fa      	ldrb	r2, [r7, #3]
 8010692:	6879      	ldr	r1, [r7, #4]
 8010694:	4613      	mov	r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	4413      	add	r3, r2
 801069a:	00db      	lsls	r3, r3, #3
 801069c:	440b      	add	r3, r1
 801069e:	333c      	adds	r3, #60	; 0x3c
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	78fb      	ldrb	r3, [r7, #3]
 80106a4:	4619      	mov	r1, r3
 80106a6:	f7fe fd96 	bl	800f1d6 <USBD_LL_DataInStage>
}
 80106aa:	bf00      	nop
 80106ac:	3708      	adds	r7, #8
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b082      	sub	sp, #8
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fe fed0 	bl	800f466 <USBD_LL_SOF>
}
 80106c6:	bf00      	nop
 80106c8:	3708      	adds	r7, #8
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b084      	sub	sp, #16
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80106d6:	2301      	movs	r3, #1
 80106d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	689b      	ldr	r3, [r3, #8]
 80106de:	2b02      	cmp	r3, #2
 80106e0:	d001      	beq.n	80106e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80106e2:	f7f1 f889 	bl	80017f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80106ec:	7bfa      	ldrb	r2, [r7, #15]
 80106ee:	4611      	mov	r1, r2
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fe fe74 	bl	800f3de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fe fe1c 	bl	800f33a <USBD_LL_Reset>
}
 8010702:	bf00      	nop
 8010704:	3710      	adds	r7, #16
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
	...

0801070c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801071a:	4618      	mov	r0, r3
 801071c:	f7fe fe6f 	bl	800f3fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	699b      	ldr	r3, [r3, #24]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d005      	beq.n	8010734 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010728:	4b04      	ldr	r3, [pc, #16]	; (801073c <HAL_PCD_SuspendCallback+0x30>)
 801072a:	691b      	ldr	r3, [r3, #16]
 801072c:	4a03      	ldr	r2, [pc, #12]	; (801073c <HAL_PCD_SuspendCallback+0x30>)
 801072e:	f043 0306 	orr.w	r3, r3, #6
 8010732:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010734:	bf00      	nop
 8010736:	3708      	adds	r7, #8
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	e000ed00 	.word	0xe000ed00

08010740 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	699b      	ldr	r3, [r3, #24]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d007      	beq.n	8010760 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010750:	4b08      	ldr	r3, [pc, #32]	; (8010774 <HAL_PCD_ResumeCallback+0x34>)
 8010752:	691b      	ldr	r3, [r3, #16]
 8010754:	4a07      	ldr	r2, [pc, #28]	; (8010774 <HAL_PCD_ResumeCallback+0x34>)
 8010756:	f023 0306 	bic.w	r3, r3, #6
 801075a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801075c:	f000 fa90 	bl	8010c80 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010766:	4618      	mov	r0, r3
 8010768:	f7fe fe65 	bl	800f436 <USBD_LL_Resume>
}
 801076c:	bf00      	nop
 801076e:	3708      	adds	r7, #8
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	e000ed00 	.word	0xe000ed00

08010778 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8010780:	f7f8 fbba 	bl	8008ef8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8010784:	4a22      	ldr	r2, [pc, #136]	; (8010810 <USBD_LL_Init+0x98>)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	4a20      	ldr	r2, [pc, #128]	; (8010810 <USBD_LL_Init+0x98>)
 8010790:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8010794:	4b1e      	ldr	r3, [pc, #120]	; (8010810 <USBD_LL_Init+0x98>)
 8010796:	4a1f      	ldr	r2, [pc, #124]	; (8010814 <USBD_LL_Init+0x9c>)
 8010798:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801079a:	4b1d      	ldr	r3, [pc, #116]	; (8010810 <USBD_LL_Init+0x98>)
 801079c:	2208      	movs	r2, #8
 801079e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80107a0:	4b1b      	ldr	r3, [pc, #108]	; (8010810 <USBD_LL_Init+0x98>)
 80107a2:	2202      	movs	r2, #2
 80107a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80107a6:	4b1a      	ldr	r3, [pc, #104]	; (8010810 <USBD_LL_Init+0x98>)
 80107a8:	2202      	movs	r2, #2
 80107aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80107ac:	4b18      	ldr	r3, [pc, #96]	; (8010810 <USBD_LL_Init+0x98>)
 80107ae:	2200      	movs	r2, #0
 80107b0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80107b2:	4b17      	ldr	r3, [pc, #92]	; (8010810 <USBD_LL_Init+0x98>)
 80107b4:	2200      	movs	r2, #0
 80107b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80107b8:	4b15      	ldr	r3, [pc, #84]	; (8010810 <USBD_LL_Init+0x98>)
 80107ba:	2200      	movs	r2, #0
 80107bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80107be:	4b14      	ldr	r3, [pc, #80]	; (8010810 <USBD_LL_Init+0x98>)
 80107c0:	2200      	movs	r2, #0
 80107c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80107c4:	4812      	ldr	r0, [pc, #72]	; (8010810 <USBD_LL_Init+0x98>)
 80107c6:	f7f6 fdcc 	bl	8007362 <HAL_PCD_Init>
 80107ca:	4603      	mov	r3, r0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d001      	beq.n	80107d4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80107d0:	f7f1 f812 	bl	80017f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80107da:	2318      	movs	r3, #24
 80107dc:	2200      	movs	r2, #0
 80107de:	2100      	movs	r1, #0
 80107e0:	f7f8 fab8 	bl	8008d54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80107ea:	2358      	movs	r3, #88	; 0x58
 80107ec:	2200      	movs	r2, #0
 80107ee:	2180      	movs	r1, #128	; 0x80
 80107f0:	f7f8 fab0 	bl	8008d54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80107fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107fe:	2200      	movs	r2, #0
 8010800:	2181      	movs	r1, #129	; 0x81
 8010802:	f7f8 faa7 	bl	8008d54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	20001188 	.word	0x20001188
 8010814:	40006800 	.word	0x40006800

08010818 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010820:	2300      	movs	r3, #0
 8010822:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010824:	2300      	movs	r3, #0
 8010826:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801082e:	4618      	mov	r0, r3
 8010830:	f7f6 fe9d 	bl	800756e <HAL_PCD_Start>
 8010834:	4603      	mov	r3, r0
 8010836:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010838:	7bbb      	ldrb	r3, [r7, #14]
 801083a:	2b03      	cmp	r3, #3
 801083c:	d816      	bhi.n	801086c <USBD_LL_Start+0x54>
 801083e:	a201      	add	r2, pc, #4	; (adr r2, 8010844 <USBD_LL_Start+0x2c>)
 8010840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010844:	08010855 	.word	0x08010855
 8010848:	0801085b 	.word	0x0801085b
 801084c:	08010861 	.word	0x08010861
 8010850:	08010867 	.word	0x08010867
    case HAL_OK :
      usb_status = USBD_OK;
 8010854:	2300      	movs	r3, #0
 8010856:	73fb      	strb	r3, [r7, #15]
    break;
 8010858:	e00b      	b.n	8010872 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801085a:	2303      	movs	r3, #3
 801085c:	73fb      	strb	r3, [r7, #15]
    break;
 801085e:	e008      	b.n	8010872 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010860:	2301      	movs	r3, #1
 8010862:	73fb      	strb	r3, [r7, #15]
    break;
 8010864:	e005      	b.n	8010872 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010866:	2303      	movs	r3, #3
 8010868:	73fb      	strb	r3, [r7, #15]
    break;
 801086a:	e002      	b.n	8010872 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801086c:	2303      	movs	r3, #3
 801086e:	73fb      	strb	r3, [r7, #15]
    break;
 8010870:	bf00      	nop
  }
  return usb_status;
 8010872:	7bfb      	ldrb	r3, [r7, #15]
}
 8010874:	4618      	mov	r0, r3
 8010876:	3710      	adds	r7, #16
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	4608      	mov	r0, r1
 8010886:	4611      	mov	r1, r2
 8010888:	461a      	mov	r2, r3
 801088a:	4603      	mov	r3, r0
 801088c:	70fb      	strb	r3, [r7, #3]
 801088e:	460b      	mov	r3, r1
 8010890:	70bb      	strb	r3, [r7, #2]
 8010892:	4613      	mov	r3, r2
 8010894:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010896:	2300      	movs	r3, #0
 8010898:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801089a:	2300      	movs	r3, #0
 801089c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80108a4:	78bb      	ldrb	r3, [r7, #2]
 80108a6:	883a      	ldrh	r2, [r7, #0]
 80108a8:	78f9      	ldrb	r1, [r7, #3]
 80108aa:	f7f6 ffce 	bl	800784a <HAL_PCD_EP_Open>
 80108ae:	4603      	mov	r3, r0
 80108b0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80108b2:	7bbb      	ldrb	r3, [r7, #14]
 80108b4:	2b03      	cmp	r3, #3
 80108b6:	d817      	bhi.n	80108e8 <USBD_LL_OpenEP+0x6c>
 80108b8:	a201      	add	r2, pc, #4	; (adr r2, 80108c0 <USBD_LL_OpenEP+0x44>)
 80108ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108be:	bf00      	nop
 80108c0:	080108d1 	.word	0x080108d1
 80108c4:	080108d7 	.word	0x080108d7
 80108c8:	080108dd 	.word	0x080108dd
 80108cc:	080108e3 	.word	0x080108e3
    case HAL_OK :
      usb_status = USBD_OK;
 80108d0:	2300      	movs	r3, #0
 80108d2:	73fb      	strb	r3, [r7, #15]
    break;
 80108d4:	e00b      	b.n	80108ee <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108d6:	2303      	movs	r3, #3
 80108d8:	73fb      	strb	r3, [r7, #15]
    break;
 80108da:	e008      	b.n	80108ee <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108dc:	2301      	movs	r3, #1
 80108de:	73fb      	strb	r3, [r7, #15]
    break;
 80108e0:	e005      	b.n	80108ee <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108e2:	2303      	movs	r3, #3
 80108e4:	73fb      	strb	r3, [r7, #15]
    break;
 80108e6:	e002      	b.n	80108ee <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80108e8:	2303      	movs	r3, #3
 80108ea:	73fb      	strb	r3, [r7, #15]
    break;
 80108ec:	bf00      	nop
  }
  return usb_status;
 80108ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3710      	adds	r7, #16
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	460b      	mov	r3, r1
 8010902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010904:	2300      	movs	r3, #0
 8010906:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010908:	2300      	movs	r3, #0
 801090a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010912:	78fa      	ldrb	r2, [r7, #3]
 8010914:	4611      	mov	r1, r2
 8010916:	4618      	mov	r0, r3
 8010918:	f7f6 fff4 	bl	8007904 <HAL_PCD_EP_Close>
 801091c:	4603      	mov	r3, r0
 801091e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010920:	7bbb      	ldrb	r3, [r7, #14]
 8010922:	2b03      	cmp	r3, #3
 8010924:	d816      	bhi.n	8010954 <USBD_LL_CloseEP+0x5c>
 8010926:	a201      	add	r2, pc, #4	; (adr r2, 801092c <USBD_LL_CloseEP+0x34>)
 8010928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801092c:	0801093d 	.word	0x0801093d
 8010930:	08010943 	.word	0x08010943
 8010934:	08010949 	.word	0x08010949
 8010938:	0801094f 	.word	0x0801094f
    case HAL_OK :
      usb_status = USBD_OK;
 801093c:	2300      	movs	r3, #0
 801093e:	73fb      	strb	r3, [r7, #15]
    break;
 8010940:	e00b      	b.n	801095a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010942:	2303      	movs	r3, #3
 8010944:	73fb      	strb	r3, [r7, #15]
    break;
 8010946:	e008      	b.n	801095a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010948:	2301      	movs	r3, #1
 801094a:	73fb      	strb	r3, [r7, #15]
    break;
 801094c:	e005      	b.n	801095a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801094e:	2303      	movs	r3, #3
 8010950:	73fb      	strb	r3, [r7, #15]
    break;
 8010952:	e002      	b.n	801095a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010954:	2303      	movs	r3, #3
 8010956:	73fb      	strb	r3, [r7, #15]
    break;
 8010958:	bf00      	nop
  }
  return usb_status;
 801095a:	7bfb      	ldrb	r3, [r7, #15]
}
 801095c:	4618      	mov	r0, r3
 801095e:	3710      	adds	r7, #16
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	460b      	mov	r3, r1
 801096e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010970:	2300      	movs	r3, #0
 8010972:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010974:	2300      	movs	r3, #0
 8010976:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801097e:	78fa      	ldrb	r2, [r7, #3]
 8010980:	4611      	mov	r1, r2
 8010982:	4618      	mov	r0, r3
 8010984:	f7f7 f86e 	bl	8007a64 <HAL_PCD_EP_SetStall>
 8010988:	4603      	mov	r3, r0
 801098a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801098c:	7bbb      	ldrb	r3, [r7, #14]
 801098e:	2b03      	cmp	r3, #3
 8010990:	d816      	bhi.n	80109c0 <USBD_LL_StallEP+0x5c>
 8010992:	a201      	add	r2, pc, #4	; (adr r2, 8010998 <USBD_LL_StallEP+0x34>)
 8010994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010998:	080109a9 	.word	0x080109a9
 801099c:	080109af 	.word	0x080109af
 80109a0:	080109b5 	.word	0x080109b5
 80109a4:	080109bb 	.word	0x080109bb
    case HAL_OK :
      usb_status = USBD_OK;
 80109a8:	2300      	movs	r3, #0
 80109aa:	73fb      	strb	r3, [r7, #15]
    break;
 80109ac:	e00b      	b.n	80109c6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109ae:	2303      	movs	r3, #3
 80109b0:	73fb      	strb	r3, [r7, #15]
    break;
 80109b2:	e008      	b.n	80109c6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109b4:	2301      	movs	r3, #1
 80109b6:	73fb      	strb	r3, [r7, #15]
    break;
 80109b8:	e005      	b.n	80109c6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109ba:	2303      	movs	r3, #3
 80109bc:	73fb      	strb	r3, [r7, #15]
    break;
 80109be:	e002      	b.n	80109c6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80109c0:	2303      	movs	r3, #3
 80109c2:	73fb      	strb	r3, [r7, #15]
    break;
 80109c4:	bf00      	nop
  }
  return usb_status;
 80109c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3710      	adds	r7, #16
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	460b      	mov	r3, r1
 80109da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109dc:	2300      	movs	r3, #0
 80109de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109e0:	2300      	movs	r3, #0
 80109e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80109ea:	78fa      	ldrb	r2, [r7, #3]
 80109ec:	4611      	mov	r1, r2
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7f7 f898 	bl	8007b24 <HAL_PCD_EP_ClrStall>
 80109f4:	4603      	mov	r3, r0
 80109f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80109f8:	7bbb      	ldrb	r3, [r7, #14]
 80109fa:	2b03      	cmp	r3, #3
 80109fc:	d816      	bhi.n	8010a2c <USBD_LL_ClearStallEP+0x5c>
 80109fe:	a201      	add	r2, pc, #4	; (adr r2, 8010a04 <USBD_LL_ClearStallEP+0x34>)
 8010a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a04:	08010a15 	.word	0x08010a15
 8010a08:	08010a1b 	.word	0x08010a1b
 8010a0c:	08010a21 	.word	0x08010a21
 8010a10:	08010a27 	.word	0x08010a27
    case HAL_OK :
      usb_status = USBD_OK;
 8010a14:	2300      	movs	r3, #0
 8010a16:	73fb      	strb	r3, [r7, #15]
    break;
 8010a18:	e00b      	b.n	8010a32 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010a1a:	2303      	movs	r3, #3
 8010a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8010a1e:	e008      	b.n	8010a32 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a20:	2301      	movs	r3, #1
 8010a22:	73fb      	strb	r3, [r7, #15]
    break;
 8010a24:	e005      	b.n	8010a32 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a26:	2303      	movs	r3, #3
 8010a28:	73fb      	strb	r3, [r7, #15]
    break;
 8010a2a:	e002      	b.n	8010a32 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010a2c:	2303      	movs	r3, #3
 8010a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8010a30:	bf00      	nop
  }
  return usb_status;
 8010a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3710      	adds	r7, #16
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b085      	sub	sp, #20
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	460b      	mov	r3, r1
 8010a46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010a4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	da0c      	bge.n	8010a72 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010a58:	78fb      	ldrb	r3, [r7, #3]
 8010a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a5e:	68f9      	ldr	r1, [r7, #12]
 8010a60:	1c5a      	adds	r2, r3, #1
 8010a62:	4613      	mov	r3, r2
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	4413      	add	r3, r2
 8010a68:	00db      	lsls	r3, r3, #3
 8010a6a:	440b      	add	r3, r1
 8010a6c:	3302      	adds	r3, #2
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	e00b      	b.n	8010a8a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a72:	78fb      	ldrb	r3, [r7, #3]
 8010a74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010a78:	68f9      	ldr	r1, [r7, #12]
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	009b      	lsls	r3, r3, #2
 8010a7e:	4413      	add	r3, r2
 8010a80:	00db      	lsls	r3, r3, #3
 8010a82:	440b      	add	r3, r1
 8010a84:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8010a88:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3714      	adds	r7, #20
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a94:	4770      	bx	lr
	...

08010a98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ab2:	78fa      	ldrb	r2, [r7, #3]
 8010ab4:	4611      	mov	r1, r2
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7f6 fea2 	bl	8007800 <HAL_PCD_SetAddress>
 8010abc:	4603      	mov	r3, r0
 8010abe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010ac0:	7bbb      	ldrb	r3, [r7, #14]
 8010ac2:	2b03      	cmp	r3, #3
 8010ac4:	d816      	bhi.n	8010af4 <USBD_LL_SetUSBAddress+0x5c>
 8010ac6:	a201      	add	r2, pc, #4	; (adr r2, 8010acc <USBD_LL_SetUSBAddress+0x34>)
 8010ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010acc:	08010add 	.word	0x08010add
 8010ad0:	08010ae3 	.word	0x08010ae3
 8010ad4:	08010ae9 	.word	0x08010ae9
 8010ad8:	08010aef 	.word	0x08010aef
    case HAL_OK :
      usb_status = USBD_OK;
 8010adc:	2300      	movs	r3, #0
 8010ade:	73fb      	strb	r3, [r7, #15]
    break;
 8010ae0:	e00b      	b.n	8010afa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010ae2:	2303      	movs	r3, #3
 8010ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8010ae6:	e008      	b.n	8010afa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ae8:	2301      	movs	r3, #1
 8010aea:	73fb      	strb	r3, [r7, #15]
    break;
 8010aec:	e005      	b.n	8010afa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010aee:	2303      	movs	r3, #3
 8010af0:	73fb      	strb	r3, [r7, #15]
    break;
 8010af2:	e002      	b.n	8010afa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010af4:	2303      	movs	r3, #3
 8010af6:	73fb      	strb	r3, [r7, #15]
    break;
 8010af8:	bf00      	nop
  }
  return usb_status;
 8010afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3710      	adds	r7, #16
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b086      	sub	sp, #24
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	607a      	str	r2, [r7, #4]
 8010b0e:	603b      	str	r3, [r7, #0]
 8010b10:	460b      	mov	r3, r1
 8010b12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b14:	2300      	movs	r3, #0
 8010b16:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010b22:	7af9      	ldrb	r1, [r7, #11]
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	687a      	ldr	r2, [r7, #4]
 8010b28:	f7f6 ff65 	bl	80079f6 <HAL_PCD_EP_Transmit>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010b30:	7dbb      	ldrb	r3, [r7, #22]
 8010b32:	2b03      	cmp	r3, #3
 8010b34:	d816      	bhi.n	8010b64 <USBD_LL_Transmit+0x60>
 8010b36:	a201      	add	r2, pc, #4	; (adr r2, 8010b3c <USBD_LL_Transmit+0x38>)
 8010b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b3c:	08010b4d 	.word	0x08010b4d
 8010b40:	08010b53 	.word	0x08010b53
 8010b44:	08010b59 	.word	0x08010b59
 8010b48:	08010b5f 	.word	0x08010b5f
    case HAL_OK :
      usb_status = USBD_OK;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	75fb      	strb	r3, [r7, #23]
    break;
 8010b50:	e00b      	b.n	8010b6a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b52:	2303      	movs	r3, #3
 8010b54:	75fb      	strb	r3, [r7, #23]
    break;
 8010b56:	e008      	b.n	8010b6a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	75fb      	strb	r3, [r7, #23]
    break;
 8010b5c:	e005      	b.n	8010b6a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b5e:	2303      	movs	r3, #3
 8010b60:	75fb      	strb	r3, [r7, #23]
    break;
 8010b62:	e002      	b.n	8010b6a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010b64:	2303      	movs	r3, #3
 8010b66:	75fb      	strb	r3, [r7, #23]
    break;
 8010b68:	bf00      	nop
  }
  return usb_status;
 8010b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3718      	adds	r7, #24
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	607a      	str	r2, [r7, #4]
 8010b7e:	603b      	str	r3, [r7, #0]
 8010b80:	460b      	mov	r3, r1
 8010b82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b84:	2300      	movs	r3, #0
 8010b86:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010b92:	7af9      	ldrb	r1, [r7, #11]
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	f7f6 fefc 	bl	8007994 <HAL_PCD_EP_Receive>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010ba0:	7dbb      	ldrb	r3, [r7, #22]
 8010ba2:	2b03      	cmp	r3, #3
 8010ba4:	d816      	bhi.n	8010bd4 <USBD_LL_PrepareReceive+0x60>
 8010ba6:	a201      	add	r2, pc, #4	; (adr r2, 8010bac <USBD_LL_PrepareReceive+0x38>)
 8010ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bac:	08010bbd 	.word	0x08010bbd
 8010bb0:	08010bc3 	.word	0x08010bc3
 8010bb4:	08010bc9 	.word	0x08010bc9
 8010bb8:	08010bcf 	.word	0x08010bcf
    case HAL_OK :
      usb_status = USBD_OK;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	75fb      	strb	r3, [r7, #23]
    break;
 8010bc0:	e00b      	b.n	8010bda <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010bc2:	2303      	movs	r3, #3
 8010bc4:	75fb      	strb	r3, [r7, #23]
    break;
 8010bc6:	e008      	b.n	8010bda <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	75fb      	strb	r3, [r7, #23]
    break;
 8010bcc:	e005      	b.n	8010bda <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010bce:	2303      	movs	r3, #3
 8010bd0:	75fb      	strb	r3, [r7, #23]
    break;
 8010bd2:	e002      	b.n	8010bda <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010bd4:	2303      	movs	r3, #3
 8010bd6:	75fb      	strb	r3, [r7, #23]
    break;
 8010bd8:	bf00      	nop
  }
  return usb_status;
 8010bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3718      	adds	r7, #24
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b082      	sub	sp, #8
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	460b      	mov	r3, r1
 8010bee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010bf0:	78fb      	ldrb	r3, [r7, #3]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d002      	beq.n	8010bfc <HAL_PCDEx_LPM_Callback+0x18>
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	d013      	beq.n	8010c22 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010bfa:	e023      	b.n	8010c44 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	699b      	ldr	r3, [r3, #24]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d007      	beq.n	8010c14 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010c04:	f000 f83c 	bl	8010c80 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c08:	4b10      	ldr	r3, [pc, #64]	; (8010c4c <HAL_PCDEx_LPM_Callback+0x68>)
 8010c0a:	691b      	ldr	r3, [r3, #16]
 8010c0c:	4a0f      	ldr	r2, [pc, #60]	; (8010c4c <HAL_PCDEx_LPM_Callback+0x68>)
 8010c0e:	f023 0306 	bic.w	r3, r3, #6
 8010c12:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fe fc0b 	bl	800f436 <USBD_LL_Resume>
    break;
 8010c20:	e010      	b.n	8010c44 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fe fbe8 	bl	800f3fe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	699b      	ldr	r3, [r3, #24]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d005      	beq.n	8010c42 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c36:	4b05      	ldr	r3, [pc, #20]	; (8010c4c <HAL_PCDEx_LPM_Callback+0x68>)
 8010c38:	691b      	ldr	r3, [r3, #16]
 8010c3a:	4a04      	ldr	r2, [pc, #16]	; (8010c4c <HAL_PCDEx_LPM_Callback+0x68>)
 8010c3c:	f043 0306 	orr.w	r3, r3, #6
 8010c40:	6113      	str	r3, [r2, #16]
    break;
 8010c42:	bf00      	nop
}
 8010c44:	bf00      	nop
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}
 8010c4c:	e000ed00 	.word	0xe000ed00

08010c50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010c58:	4b03      	ldr	r3, [pc, #12]	; (8010c68 <USBD_static_malloc+0x18>)
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	370c      	adds	r7, #12
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	20001480 	.word	0x20001480

08010c6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b083      	sub	sp, #12
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]

}
 8010c74:	bf00      	nop
 8010c76:	370c      	adds	r7, #12
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7e:	4770      	bx	lr

08010c80 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010c84:	f7f0 fb38 	bl	80012f8 <SystemClock_Config>
}
 8010c88:	bf00      	nop
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <malloc>:
 8010c8c:	4b02      	ldr	r3, [pc, #8]	; (8010c98 <malloc+0xc>)
 8010c8e:	4601      	mov	r1, r0
 8010c90:	6818      	ldr	r0, [r3, #0]
 8010c92:	f000 b82b 	b.w	8010cec <_malloc_r>
 8010c96:	bf00      	nop
 8010c98:	20000310 	.word	0x20000310

08010c9c <free>:
 8010c9c:	4b02      	ldr	r3, [pc, #8]	; (8010ca8 <free+0xc>)
 8010c9e:	4601      	mov	r1, r0
 8010ca0:	6818      	ldr	r0, [r3, #0]
 8010ca2:	f002 bf57 	b.w	8013b54 <_free_r>
 8010ca6:	bf00      	nop
 8010ca8:	20000310 	.word	0x20000310

08010cac <sbrk_aligned>:
 8010cac:	b570      	push	{r4, r5, r6, lr}
 8010cae:	4e0e      	ldr	r6, [pc, #56]	; (8010ce8 <sbrk_aligned+0x3c>)
 8010cb0:	460c      	mov	r4, r1
 8010cb2:	6831      	ldr	r1, [r6, #0]
 8010cb4:	4605      	mov	r5, r0
 8010cb6:	b911      	cbnz	r1, 8010cbe <sbrk_aligned+0x12>
 8010cb8:	f002 f840 	bl	8012d3c <_sbrk_r>
 8010cbc:	6030      	str	r0, [r6, #0]
 8010cbe:	4621      	mov	r1, r4
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	f002 f83b 	bl	8012d3c <_sbrk_r>
 8010cc6:	1c43      	adds	r3, r0, #1
 8010cc8:	d00a      	beq.n	8010ce0 <sbrk_aligned+0x34>
 8010cca:	1cc4      	adds	r4, r0, #3
 8010ccc:	f024 0403 	bic.w	r4, r4, #3
 8010cd0:	42a0      	cmp	r0, r4
 8010cd2:	d007      	beq.n	8010ce4 <sbrk_aligned+0x38>
 8010cd4:	1a21      	subs	r1, r4, r0
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	f002 f830 	bl	8012d3c <_sbrk_r>
 8010cdc:	3001      	adds	r0, #1
 8010cde:	d101      	bne.n	8010ce4 <sbrk_aligned+0x38>
 8010ce0:	f04f 34ff 	mov.w	r4, #4294967295
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	bd70      	pop	{r4, r5, r6, pc}
 8010ce8:	20001498 	.word	0x20001498

08010cec <_malloc_r>:
 8010cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cf0:	1ccd      	adds	r5, r1, #3
 8010cf2:	f025 0503 	bic.w	r5, r5, #3
 8010cf6:	3508      	adds	r5, #8
 8010cf8:	2d0c      	cmp	r5, #12
 8010cfa:	bf38      	it	cc
 8010cfc:	250c      	movcc	r5, #12
 8010cfe:	2d00      	cmp	r5, #0
 8010d00:	4607      	mov	r7, r0
 8010d02:	db01      	blt.n	8010d08 <_malloc_r+0x1c>
 8010d04:	42a9      	cmp	r1, r5
 8010d06:	d905      	bls.n	8010d14 <_malloc_r+0x28>
 8010d08:	230c      	movs	r3, #12
 8010d0a:	603b      	str	r3, [r7, #0]
 8010d0c:	2600      	movs	r6, #0
 8010d0e:	4630      	mov	r0, r6
 8010d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010de8 <_malloc_r+0xfc>
 8010d18:	f000 f868 	bl	8010dec <__malloc_lock>
 8010d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8010d20:	461c      	mov	r4, r3
 8010d22:	bb5c      	cbnz	r4, 8010d7c <_malloc_r+0x90>
 8010d24:	4629      	mov	r1, r5
 8010d26:	4638      	mov	r0, r7
 8010d28:	f7ff ffc0 	bl	8010cac <sbrk_aligned>
 8010d2c:	1c43      	adds	r3, r0, #1
 8010d2e:	4604      	mov	r4, r0
 8010d30:	d155      	bne.n	8010dde <_malloc_r+0xf2>
 8010d32:	f8d8 4000 	ldr.w	r4, [r8]
 8010d36:	4626      	mov	r6, r4
 8010d38:	2e00      	cmp	r6, #0
 8010d3a:	d145      	bne.n	8010dc8 <_malloc_r+0xdc>
 8010d3c:	2c00      	cmp	r4, #0
 8010d3e:	d048      	beq.n	8010dd2 <_malloc_r+0xe6>
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	4631      	mov	r1, r6
 8010d44:	4638      	mov	r0, r7
 8010d46:	eb04 0903 	add.w	r9, r4, r3
 8010d4a:	f001 fff7 	bl	8012d3c <_sbrk_r>
 8010d4e:	4581      	cmp	r9, r0
 8010d50:	d13f      	bne.n	8010dd2 <_malloc_r+0xe6>
 8010d52:	6821      	ldr	r1, [r4, #0]
 8010d54:	1a6d      	subs	r5, r5, r1
 8010d56:	4629      	mov	r1, r5
 8010d58:	4638      	mov	r0, r7
 8010d5a:	f7ff ffa7 	bl	8010cac <sbrk_aligned>
 8010d5e:	3001      	adds	r0, #1
 8010d60:	d037      	beq.n	8010dd2 <_malloc_r+0xe6>
 8010d62:	6823      	ldr	r3, [r4, #0]
 8010d64:	442b      	add	r3, r5
 8010d66:	6023      	str	r3, [r4, #0]
 8010d68:	f8d8 3000 	ldr.w	r3, [r8]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d038      	beq.n	8010de2 <_malloc_r+0xf6>
 8010d70:	685a      	ldr	r2, [r3, #4]
 8010d72:	42a2      	cmp	r2, r4
 8010d74:	d12b      	bne.n	8010dce <_malloc_r+0xe2>
 8010d76:	2200      	movs	r2, #0
 8010d78:	605a      	str	r2, [r3, #4]
 8010d7a:	e00f      	b.n	8010d9c <_malloc_r+0xb0>
 8010d7c:	6822      	ldr	r2, [r4, #0]
 8010d7e:	1b52      	subs	r2, r2, r5
 8010d80:	d41f      	bmi.n	8010dc2 <_malloc_r+0xd6>
 8010d82:	2a0b      	cmp	r2, #11
 8010d84:	d917      	bls.n	8010db6 <_malloc_r+0xca>
 8010d86:	1961      	adds	r1, r4, r5
 8010d88:	42a3      	cmp	r3, r4
 8010d8a:	6025      	str	r5, [r4, #0]
 8010d8c:	bf18      	it	ne
 8010d8e:	6059      	strne	r1, [r3, #4]
 8010d90:	6863      	ldr	r3, [r4, #4]
 8010d92:	bf08      	it	eq
 8010d94:	f8c8 1000 	streq.w	r1, [r8]
 8010d98:	5162      	str	r2, [r4, r5]
 8010d9a:	604b      	str	r3, [r1, #4]
 8010d9c:	4638      	mov	r0, r7
 8010d9e:	f104 060b 	add.w	r6, r4, #11
 8010da2:	f000 f829 	bl	8010df8 <__malloc_unlock>
 8010da6:	f026 0607 	bic.w	r6, r6, #7
 8010daa:	1d23      	adds	r3, r4, #4
 8010dac:	1af2      	subs	r2, r6, r3
 8010dae:	d0ae      	beq.n	8010d0e <_malloc_r+0x22>
 8010db0:	1b9b      	subs	r3, r3, r6
 8010db2:	50a3      	str	r3, [r4, r2]
 8010db4:	e7ab      	b.n	8010d0e <_malloc_r+0x22>
 8010db6:	42a3      	cmp	r3, r4
 8010db8:	6862      	ldr	r2, [r4, #4]
 8010dba:	d1dd      	bne.n	8010d78 <_malloc_r+0x8c>
 8010dbc:	f8c8 2000 	str.w	r2, [r8]
 8010dc0:	e7ec      	b.n	8010d9c <_malloc_r+0xb0>
 8010dc2:	4623      	mov	r3, r4
 8010dc4:	6864      	ldr	r4, [r4, #4]
 8010dc6:	e7ac      	b.n	8010d22 <_malloc_r+0x36>
 8010dc8:	4634      	mov	r4, r6
 8010dca:	6876      	ldr	r6, [r6, #4]
 8010dcc:	e7b4      	b.n	8010d38 <_malloc_r+0x4c>
 8010dce:	4613      	mov	r3, r2
 8010dd0:	e7cc      	b.n	8010d6c <_malloc_r+0x80>
 8010dd2:	230c      	movs	r3, #12
 8010dd4:	603b      	str	r3, [r7, #0]
 8010dd6:	4638      	mov	r0, r7
 8010dd8:	f000 f80e 	bl	8010df8 <__malloc_unlock>
 8010ddc:	e797      	b.n	8010d0e <_malloc_r+0x22>
 8010dde:	6025      	str	r5, [r4, #0]
 8010de0:	e7dc      	b.n	8010d9c <_malloc_r+0xb0>
 8010de2:	605b      	str	r3, [r3, #4]
 8010de4:	deff      	udf	#255	; 0xff
 8010de6:	bf00      	nop
 8010de8:	20001494 	.word	0x20001494

08010dec <__malloc_lock>:
 8010dec:	4801      	ldr	r0, [pc, #4]	; (8010df4 <__malloc_lock+0x8>)
 8010dee:	f001 bff2 	b.w	8012dd6 <__retarget_lock_acquire_recursive>
 8010df2:	bf00      	nop
 8010df4:	200015dc 	.word	0x200015dc

08010df8 <__malloc_unlock>:
 8010df8:	4801      	ldr	r0, [pc, #4]	; (8010e00 <__malloc_unlock+0x8>)
 8010dfa:	f001 bfed 	b.w	8012dd8 <__retarget_lock_release_recursive>
 8010dfe:	bf00      	nop
 8010e00:	200015dc 	.word	0x200015dc

08010e04 <sulp>:
 8010e04:	b570      	push	{r4, r5, r6, lr}
 8010e06:	4604      	mov	r4, r0
 8010e08:	460d      	mov	r5, r1
 8010e0a:	ec45 4b10 	vmov	d0, r4, r5
 8010e0e:	4616      	mov	r6, r2
 8010e10:	f003 fdc2 	bl	8014998 <__ulp>
 8010e14:	ec51 0b10 	vmov	r0, r1, d0
 8010e18:	b17e      	cbz	r6, 8010e3a <sulp+0x36>
 8010e1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010e1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	dd09      	ble.n	8010e3a <sulp+0x36>
 8010e26:	051b      	lsls	r3, r3, #20
 8010e28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010e2c:	2400      	movs	r4, #0
 8010e2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010e32:	4622      	mov	r2, r4
 8010e34:	462b      	mov	r3, r5
 8010e36:	f7ef fbdf 	bl	80005f8 <__aeabi_dmul>
 8010e3a:	bd70      	pop	{r4, r5, r6, pc}
 8010e3c:	0000      	movs	r0, r0
	...

08010e40 <_strtod_l>:
 8010e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e44:	ed2d 8b02 	vpush	{d8}
 8010e48:	b09b      	sub	sp, #108	; 0x6c
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8010e4e:	2200      	movs	r2, #0
 8010e50:	9216      	str	r2, [sp, #88]	; 0x58
 8010e52:	460d      	mov	r5, r1
 8010e54:	f04f 0800 	mov.w	r8, #0
 8010e58:	f04f 0900 	mov.w	r9, #0
 8010e5c:	460a      	mov	r2, r1
 8010e5e:	9215      	str	r2, [sp, #84]	; 0x54
 8010e60:	7811      	ldrb	r1, [r2, #0]
 8010e62:	292b      	cmp	r1, #43	; 0x2b
 8010e64:	d04c      	beq.n	8010f00 <_strtod_l+0xc0>
 8010e66:	d83a      	bhi.n	8010ede <_strtod_l+0x9e>
 8010e68:	290d      	cmp	r1, #13
 8010e6a:	d834      	bhi.n	8010ed6 <_strtod_l+0x96>
 8010e6c:	2908      	cmp	r1, #8
 8010e6e:	d834      	bhi.n	8010eda <_strtod_l+0x9a>
 8010e70:	2900      	cmp	r1, #0
 8010e72:	d03d      	beq.n	8010ef0 <_strtod_l+0xb0>
 8010e74:	2200      	movs	r2, #0
 8010e76:	920a      	str	r2, [sp, #40]	; 0x28
 8010e78:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8010e7a:	7832      	ldrb	r2, [r6, #0]
 8010e7c:	2a30      	cmp	r2, #48	; 0x30
 8010e7e:	f040 80b4 	bne.w	8010fea <_strtod_l+0x1aa>
 8010e82:	7872      	ldrb	r2, [r6, #1]
 8010e84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010e88:	2a58      	cmp	r2, #88	; 0x58
 8010e8a:	d170      	bne.n	8010f6e <_strtod_l+0x12e>
 8010e8c:	9302      	str	r3, [sp, #8]
 8010e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e90:	9301      	str	r3, [sp, #4]
 8010e92:	ab16      	add	r3, sp, #88	; 0x58
 8010e94:	9300      	str	r3, [sp, #0]
 8010e96:	4a8e      	ldr	r2, [pc, #568]	; (80110d0 <_strtod_l+0x290>)
 8010e98:	ab17      	add	r3, sp, #92	; 0x5c
 8010e9a:	a915      	add	r1, sp, #84	; 0x54
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f002 ff0d 	bl	8013cbc <__gethex>
 8010ea2:	f010 070f 	ands.w	r7, r0, #15
 8010ea6:	4605      	mov	r5, r0
 8010ea8:	d005      	beq.n	8010eb6 <_strtod_l+0x76>
 8010eaa:	2f06      	cmp	r7, #6
 8010eac:	d12a      	bne.n	8010f04 <_strtod_l+0xc4>
 8010eae:	3601      	adds	r6, #1
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	9615      	str	r6, [sp, #84]	; 0x54
 8010eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8010eb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	f040 857f 	bne.w	80119bc <_strtod_l+0xb7c>
 8010ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ec0:	b1db      	cbz	r3, 8010efa <_strtod_l+0xba>
 8010ec2:	4642      	mov	r2, r8
 8010ec4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010ec8:	ec43 2b10 	vmov	d0, r2, r3
 8010ecc:	b01b      	add	sp, #108	; 0x6c
 8010ece:	ecbd 8b02 	vpop	{d8}
 8010ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed6:	2920      	cmp	r1, #32
 8010ed8:	d1cc      	bne.n	8010e74 <_strtod_l+0x34>
 8010eda:	3201      	adds	r2, #1
 8010edc:	e7bf      	b.n	8010e5e <_strtod_l+0x1e>
 8010ede:	292d      	cmp	r1, #45	; 0x2d
 8010ee0:	d1c8      	bne.n	8010e74 <_strtod_l+0x34>
 8010ee2:	2101      	movs	r1, #1
 8010ee4:	910a      	str	r1, [sp, #40]	; 0x28
 8010ee6:	1c51      	adds	r1, r2, #1
 8010ee8:	9115      	str	r1, [sp, #84]	; 0x54
 8010eea:	7852      	ldrb	r2, [r2, #1]
 8010eec:	2a00      	cmp	r2, #0
 8010eee:	d1c3      	bne.n	8010e78 <_strtod_l+0x38>
 8010ef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010ef2:	9515      	str	r5, [sp, #84]	; 0x54
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	f040 855f 	bne.w	80119b8 <_strtod_l+0xb78>
 8010efa:	4642      	mov	r2, r8
 8010efc:	464b      	mov	r3, r9
 8010efe:	e7e3      	b.n	8010ec8 <_strtod_l+0x88>
 8010f00:	2100      	movs	r1, #0
 8010f02:	e7ef      	b.n	8010ee4 <_strtod_l+0xa4>
 8010f04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010f06:	b13a      	cbz	r2, 8010f18 <_strtod_l+0xd8>
 8010f08:	2135      	movs	r1, #53	; 0x35
 8010f0a:	a818      	add	r0, sp, #96	; 0x60
 8010f0c:	f003 fe41 	bl	8014b92 <__copybits>
 8010f10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010f12:	4620      	mov	r0, r4
 8010f14:	f003 fa14 	bl	8014340 <_Bfree>
 8010f18:	3f01      	subs	r7, #1
 8010f1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010f1c:	2f04      	cmp	r7, #4
 8010f1e:	d806      	bhi.n	8010f2e <_strtod_l+0xee>
 8010f20:	e8df f007 	tbb	[pc, r7]
 8010f24:	201d0314 	.word	0x201d0314
 8010f28:	14          	.byte	0x14
 8010f29:	00          	.byte	0x00
 8010f2a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8010f2e:	05e9      	lsls	r1, r5, #23
 8010f30:	bf48      	it	mi
 8010f32:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010f36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010f3a:	0d1b      	lsrs	r3, r3, #20
 8010f3c:	051b      	lsls	r3, r3, #20
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d1b9      	bne.n	8010eb6 <_strtod_l+0x76>
 8010f42:	f001 ff1d 	bl	8012d80 <__errno>
 8010f46:	2322      	movs	r3, #34	; 0x22
 8010f48:	6003      	str	r3, [r0, #0]
 8010f4a:	e7b4      	b.n	8010eb6 <_strtod_l+0x76>
 8010f4c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010f50:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010f54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010f58:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010f5c:	e7e7      	b.n	8010f2e <_strtod_l+0xee>
 8010f5e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80110d8 <_strtod_l+0x298>
 8010f62:	e7e4      	b.n	8010f2e <_strtod_l+0xee>
 8010f64:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010f68:	f04f 38ff 	mov.w	r8, #4294967295
 8010f6c:	e7df      	b.n	8010f2e <_strtod_l+0xee>
 8010f6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f70:	1c5a      	adds	r2, r3, #1
 8010f72:	9215      	str	r2, [sp, #84]	; 0x54
 8010f74:	785b      	ldrb	r3, [r3, #1]
 8010f76:	2b30      	cmp	r3, #48	; 0x30
 8010f78:	d0f9      	beq.n	8010f6e <_strtod_l+0x12e>
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d09b      	beq.n	8010eb6 <_strtod_l+0x76>
 8010f7e:	2301      	movs	r3, #1
 8010f80:	f04f 0a00 	mov.w	sl, #0
 8010f84:	9304      	str	r3, [sp, #16]
 8010f86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f8a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010f8e:	46d3      	mov	fp, sl
 8010f90:	220a      	movs	r2, #10
 8010f92:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010f94:	7806      	ldrb	r6, [r0, #0]
 8010f96:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010f9a:	b2d9      	uxtb	r1, r3
 8010f9c:	2909      	cmp	r1, #9
 8010f9e:	d926      	bls.n	8010fee <_strtod_l+0x1ae>
 8010fa0:	494c      	ldr	r1, [pc, #304]	; (80110d4 <_strtod_l+0x294>)
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f001 fe0d 	bl	8012bc2 <strncmp>
 8010fa8:	2800      	cmp	r0, #0
 8010faa:	d030      	beq.n	801100e <_strtod_l+0x1ce>
 8010fac:	2000      	movs	r0, #0
 8010fae:	4632      	mov	r2, r6
 8010fb0:	9005      	str	r0, [sp, #20]
 8010fb2:	465e      	mov	r6, fp
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2a65      	cmp	r2, #101	; 0x65
 8010fb8:	d001      	beq.n	8010fbe <_strtod_l+0x17e>
 8010fba:	2a45      	cmp	r2, #69	; 0x45
 8010fbc:	d113      	bne.n	8010fe6 <_strtod_l+0x1a6>
 8010fbe:	b91e      	cbnz	r6, 8010fc8 <_strtod_l+0x188>
 8010fc0:	9a04      	ldr	r2, [sp, #16]
 8010fc2:	4302      	orrs	r2, r0
 8010fc4:	d094      	beq.n	8010ef0 <_strtod_l+0xb0>
 8010fc6:	2600      	movs	r6, #0
 8010fc8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8010fca:	1c6a      	adds	r2, r5, #1
 8010fcc:	9215      	str	r2, [sp, #84]	; 0x54
 8010fce:	786a      	ldrb	r2, [r5, #1]
 8010fd0:	2a2b      	cmp	r2, #43	; 0x2b
 8010fd2:	d074      	beq.n	80110be <_strtod_l+0x27e>
 8010fd4:	2a2d      	cmp	r2, #45	; 0x2d
 8010fd6:	d078      	beq.n	80110ca <_strtod_l+0x28a>
 8010fd8:	f04f 0c00 	mov.w	ip, #0
 8010fdc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010fe0:	2909      	cmp	r1, #9
 8010fe2:	d97f      	bls.n	80110e4 <_strtod_l+0x2a4>
 8010fe4:	9515      	str	r5, [sp, #84]	; 0x54
 8010fe6:	2700      	movs	r7, #0
 8010fe8:	e09e      	b.n	8011128 <_strtod_l+0x2e8>
 8010fea:	2300      	movs	r3, #0
 8010fec:	e7c8      	b.n	8010f80 <_strtod_l+0x140>
 8010fee:	f1bb 0f08 	cmp.w	fp, #8
 8010ff2:	bfd8      	it	le
 8010ff4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010ff6:	f100 0001 	add.w	r0, r0, #1
 8010ffa:	bfda      	itte	le
 8010ffc:	fb02 3301 	mlale	r3, r2, r1, r3
 8011000:	9309      	strle	r3, [sp, #36]	; 0x24
 8011002:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8011006:	f10b 0b01 	add.w	fp, fp, #1
 801100a:	9015      	str	r0, [sp, #84]	; 0x54
 801100c:	e7c1      	b.n	8010f92 <_strtod_l+0x152>
 801100e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011010:	1c5a      	adds	r2, r3, #1
 8011012:	9215      	str	r2, [sp, #84]	; 0x54
 8011014:	785a      	ldrb	r2, [r3, #1]
 8011016:	f1bb 0f00 	cmp.w	fp, #0
 801101a:	d037      	beq.n	801108c <_strtod_l+0x24c>
 801101c:	9005      	str	r0, [sp, #20]
 801101e:	465e      	mov	r6, fp
 8011020:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011024:	2b09      	cmp	r3, #9
 8011026:	d912      	bls.n	801104e <_strtod_l+0x20e>
 8011028:	2301      	movs	r3, #1
 801102a:	e7c4      	b.n	8010fb6 <_strtod_l+0x176>
 801102c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801102e:	1c5a      	adds	r2, r3, #1
 8011030:	9215      	str	r2, [sp, #84]	; 0x54
 8011032:	785a      	ldrb	r2, [r3, #1]
 8011034:	3001      	adds	r0, #1
 8011036:	2a30      	cmp	r2, #48	; 0x30
 8011038:	d0f8      	beq.n	801102c <_strtod_l+0x1ec>
 801103a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801103e:	2b08      	cmp	r3, #8
 8011040:	f200 84c1 	bhi.w	80119c6 <_strtod_l+0xb86>
 8011044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011046:	9005      	str	r0, [sp, #20]
 8011048:	2000      	movs	r0, #0
 801104a:	930b      	str	r3, [sp, #44]	; 0x2c
 801104c:	4606      	mov	r6, r0
 801104e:	3a30      	subs	r2, #48	; 0x30
 8011050:	f100 0301 	add.w	r3, r0, #1
 8011054:	d014      	beq.n	8011080 <_strtod_l+0x240>
 8011056:	9905      	ldr	r1, [sp, #20]
 8011058:	4419      	add	r1, r3
 801105a:	9105      	str	r1, [sp, #20]
 801105c:	4633      	mov	r3, r6
 801105e:	eb00 0c06 	add.w	ip, r0, r6
 8011062:	210a      	movs	r1, #10
 8011064:	4563      	cmp	r3, ip
 8011066:	d113      	bne.n	8011090 <_strtod_l+0x250>
 8011068:	1833      	adds	r3, r6, r0
 801106a:	2b08      	cmp	r3, #8
 801106c:	f106 0601 	add.w	r6, r6, #1
 8011070:	4406      	add	r6, r0
 8011072:	dc1a      	bgt.n	80110aa <_strtod_l+0x26a>
 8011074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011076:	230a      	movs	r3, #10
 8011078:	fb03 2301 	mla	r3, r3, r1, r2
 801107c:	9309      	str	r3, [sp, #36]	; 0x24
 801107e:	2300      	movs	r3, #0
 8011080:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011082:	1c51      	adds	r1, r2, #1
 8011084:	9115      	str	r1, [sp, #84]	; 0x54
 8011086:	7852      	ldrb	r2, [r2, #1]
 8011088:	4618      	mov	r0, r3
 801108a:	e7c9      	b.n	8011020 <_strtod_l+0x1e0>
 801108c:	4658      	mov	r0, fp
 801108e:	e7d2      	b.n	8011036 <_strtod_l+0x1f6>
 8011090:	2b08      	cmp	r3, #8
 8011092:	f103 0301 	add.w	r3, r3, #1
 8011096:	dc03      	bgt.n	80110a0 <_strtod_l+0x260>
 8011098:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801109a:	434f      	muls	r7, r1
 801109c:	9709      	str	r7, [sp, #36]	; 0x24
 801109e:	e7e1      	b.n	8011064 <_strtod_l+0x224>
 80110a0:	2b10      	cmp	r3, #16
 80110a2:	bfd8      	it	le
 80110a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80110a8:	e7dc      	b.n	8011064 <_strtod_l+0x224>
 80110aa:	2e10      	cmp	r6, #16
 80110ac:	bfdc      	itt	le
 80110ae:	230a      	movle	r3, #10
 80110b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80110b4:	e7e3      	b.n	801107e <_strtod_l+0x23e>
 80110b6:	2300      	movs	r3, #0
 80110b8:	9305      	str	r3, [sp, #20]
 80110ba:	2301      	movs	r3, #1
 80110bc:	e780      	b.n	8010fc0 <_strtod_l+0x180>
 80110be:	f04f 0c00 	mov.w	ip, #0
 80110c2:	1caa      	adds	r2, r5, #2
 80110c4:	9215      	str	r2, [sp, #84]	; 0x54
 80110c6:	78aa      	ldrb	r2, [r5, #2]
 80110c8:	e788      	b.n	8010fdc <_strtod_l+0x19c>
 80110ca:	f04f 0c01 	mov.w	ip, #1
 80110ce:	e7f8      	b.n	80110c2 <_strtod_l+0x282>
 80110d0:	08018890 	.word	0x08018890
 80110d4:	0801888c 	.word	0x0801888c
 80110d8:	7ff00000 	.word	0x7ff00000
 80110dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80110de:	1c51      	adds	r1, r2, #1
 80110e0:	9115      	str	r1, [sp, #84]	; 0x54
 80110e2:	7852      	ldrb	r2, [r2, #1]
 80110e4:	2a30      	cmp	r2, #48	; 0x30
 80110e6:	d0f9      	beq.n	80110dc <_strtod_l+0x29c>
 80110e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80110ec:	2908      	cmp	r1, #8
 80110ee:	f63f af7a 	bhi.w	8010fe6 <_strtod_l+0x1a6>
 80110f2:	3a30      	subs	r2, #48	; 0x30
 80110f4:	9208      	str	r2, [sp, #32]
 80110f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80110f8:	920c      	str	r2, [sp, #48]	; 0x30
 80110fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80110fc:	1c57      	adds	r7, r2, #1
 80110fe:	9715      	str	r7, [sp, #84]	; 0x54
 8011100:	7852      	ldrb	r2, [r2, #1]
 8011102:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011106:	f1be 0f09 	cmp.w	lr, #9
 801110a:	d938      	bls.n	801117e <_strtod_l+0x33e>
 801110c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801110e:	1a7f      	subs	r7, r7, r1
 8011110:	2f08      	cmp	r7, #8
 8011112:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011116:	dc03      	bgt.n	8011120 <_strtod_l+0x2e0>
 8011118:	9908      	ldr	r1, [sp, #32]
 801111a:	428f      	cmp	r7, r1
 801111c:	bfa8      	it	ge
 801111e:	460f      	movge	r7, r1
 8011120:	f1bc 0f00 	cmp.w	ip, #0
 8011124:	d000      	beq.n	8011128 <_strtod_l+0x2e8>
 8011126:	427f      	negs	r7, r7
 8011128:	2e00      	cmp	r6, #0
 801112a:	d14f      	bne.n	80111cc <_strtod_l+0x38c>
 801112c:	9904      	ldr	r1, [sp, #16]
 801112e:	4301      	orrs	r1, r0
 8011130:	f47f aec1 	bne.w	8010eb6 <_strtod_l+0x76>
 8011134:	2b00      	cmp	r3, #0
 8011136:	f47f aedb 	bne.w	8010ef0 <_strtod_l+0xb0>
 801113a:	2a69      	cmp	r2, #105	; 0x69
 801113c:	d029      	beq.n	8011192 <_strtod_l+0x352>
 801113e:	dc26      	bgt.n	801118e <_strtod_l+0x34e>
 8011140:	2a49      	cmp	r2, #73	; 0x49
 8011142:	d026      	beq.n	8011192 <_strtod_l+0x352>
 8011144:	2a4e      	cmp	r2, #78	; 0x4e
 8011146:	f47f aed3 	bne.w	8010ef0 <_strtod_l+0xb0>
 801114a:	499b      	ldr	r1, [pc, #620]	; (80113b8 <_strtod_l+0x578>)
 801114c:	a815      	add	r0, sp, #84	; 0x54
 801114e:	f002 fff5 	bl	801413c <__match>
 8011152:	2800      	cmp	r0, #0
 8011154:	f43f aecc 	beq.w	8010ef0 <_strtod_l+0xb0>
 8011158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	2b28      	cmp	r3, #40	; 0x28
 801115e:	d12f      	bne.n	80111c0 <_strtod_l+0x380>
 8011160:	4996      	ldr	r1, [pc, #600]	; (80113bc <_strtod_l+0x57c>)
 8011162:	aa18      	add	r2, sp, #96	; 0x60
 8011164:	a815      	add	r0, sp, #84	; 0x54
 8011166:	f002 fffd 	bl	8014164 <__hexnan>
 801116a:	2805      	cmp	r0, #5
 801116c:	d128      	bne.n	80111c0 <_strtod_l+0x380>
 801116e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011170:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011174:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011178:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801117c:	e69b      	b.n	8010eb6 <_strtod_l+0x76>
 801117e:	9f08      	ldr	r7, [sp, #32]
 8011180:	210a      	movs	r1, #10
 8011182:	fb01 2107 	mla	r1, r1, r7, r2
 8011186:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801118a:	9208      	str	r2, [sp, #32]
 801118c:	e7b5      	b.n	80110fa <_strtod_l+0x2ba>
 801118e:	2a6e      	cmp	r2, #110	; 0x6e
 8011190:	e7d9      	b.n	8011146 <_strtod_l+0x306>
 8011192:	498b      	ldr	r1, [pc, #556]	; (80113c0 <_strtod_l+0x580>)
 8011194:	a815      	add	r0, sp, #84	; 0x54
 8011196:	f002 ffd1 	bl	801413c <__match>
 801119a:	2800      	cmp	r0, #0
 801119c:	f43f aea8 	beq.w	8010ef0 <_strtod_l+0xb0>
 80111a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111a2:	4988      	ldr	r1, [pc, #544]	; (80113c4 <_strtod_l+0x584>)
 80111a4:	3b01      	subs	r3, #1
 80111a6:	a815      	add	r0, sp, #84	; 0x54
 80111a8:	9315      	str	r3, [sp, #84]	; 0x54
 80111aa:	f002 ffc7 	bl	801413c <__match>
 80111ae:	b910      	cbnz	r0, 80111b6 <_strtod_l+0x376>
 80111b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111b2:	3301      	adds	r3, #1
 80111b4:	9315      	str	r3, [sp, #84]	; 0x54
 80111b6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80113d4 <_strtod_l+0x594>
 80111ba:	f04f 0800 	mov.w	r8, #0
 80111be:	e67a      	b.n	8010eb6 <_strtod_l+0x76>
 80111c0:	4881      	ldr	r0, [pc, #516]	; (80113c8 <_strtod_l+0x588>)
 80111c2:	f001 fe21 	bl	8012e08 <nan>
 80111c6:	ec59 8b10 	vmov	r8, r9, d0
 80111ca:	e674      	b.n	8010eb6 <_strtod_l+0x76>
 80111cc:	9b05      	ldr	r3, [sp, #20]
 80111ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111d0:	1afb      	subs	r3, r7, r3
 80111d2:	f1bb 0f00 	cmp.w	fp, #0
 80111d6:	bf08      	it	eq
 80111d8:	46b3      	moveq	fp, r6
 80111da:	2e10      	cmp	r6, #16
 80111dc:	9308      	str	r3, [sp, #32]
 80111de:	4635      	mov	r5, r6
 80111e0:	bfa8      	it	ge
 80111e2:	2510      	movge	r5, #16
 80111e4:	f7ef f98e 	bl	8000504 <__aeabi_ui2d>
 80111e8:	2e09      	cmp	r6, #9
 80111ea:	4680      	mov	r8, r0
 80111ec:	4689      	mov	r9, r1
 80111ee:	dd13      	ble.n	8011218 <_strtod_l+0x3d8>
 80111f0:	4b76      	ldr	r3, [pc, #472]	; (80113cc <_strtod_l+0x58c>)
 80111f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80111f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80111fa:	f7ef f9fd 	bl	80005f8 <__aeabi_dmul>
 80111fe:	4680      	mov	r8, r0
 8011200:	4650      	mov	r0, sl
 8011202:	4689      	mov	r9, r1
 8011204:	f7ef f97e 	bl	8000504 <__aeabi_ui2d>
 8011208:	4602      	mov	r2, r0
 801120a:	460b      	mov	r3, r1
 801120c:	4640      	mov	r0, r8
 801120e:	4649      	mov	r1, r9
 8011210:	f7ef f83c 	bl	800028c <__adddf3>
 8011214:	4680      	mov	r8, r0
 8011216:	4689      	mov	r9, r1
 8011218:	2e0f      	cmp	r6, #15
 801121a:	dc38      	bgt.n	801128e <_strtod_l+0x44e>
 801121c:	9b08      	ldr	r3, [sp, #32]
 801121e:	2b00      	cmp	r3, #0
 8011220:	f43f ae49 	beq.w	8010eb6 <_strtod_l+0x76>
 8011224:	dd24      	ble.n	8011270 <_strtod_l+0x430>
 8011226:	2b16      	cmp	r3, #22
 8011228:	dc0b      	bgt.n	8011242 <_strtod_l+0x402>
 801122a:	4968      	ldr	r1, [pc, #416]	; (80113cc <_strtod_l+0x58c>)
 801122c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011234:	4642      	mov	r2, r8
 8011236:	464b      	mov	r3, r9
 8011238:	f7ef f9de 	bl	80005f8 <__aeabi_dmul>
 801123c:	4680      	mov	r8, r0
 801123e:	4689      	mov	r9, r1
 8011240:	e639      	b.n	8010eb6 <_strtod_l+0x76>
 8011242:	9a08      	ldr	r2, [sp, #32]
 8011244:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8011248:	4293      	cmp	r3, r2
 801124a:	db20      	blt.n	801128e <_strtod_l+0x44e>
 801124c:	4c5f      	ldr	r4, [pc, #380]	; (80113cc <_strtod_l+0x58c>)
 801124e:	f1c6 060f 	rsb	r6, r6, #15
 8011252:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8011256:	4642      	mov	r2, r8
 8011258:	464b      	mov	r3, r9
 801125a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801125e:	f7ef f9cb 	bl	80005f8 <__aeabi_dmul>
 8011262:	9b08      	ldr	r3, [sp, #32]
 8011264:	1b9e      	subs	r6, r3, r6
 8011266:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801126a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801126e:	e7e3      	b.n	8011238 <_strtod_l+0x3f8>
 8011270:	9b08      	ldr	r3, [sp, #32]
 8011272:	3316      	adds	r3, #22
 8011274:	db0b      	blt.n	801128e <_strtod_l+0x44e>
 8011276:	9b05      	ldr	r3, [sp, #20]
 8011278:	1bdf      	subs	r7, r3, r7
 801127a:	4b54      	ldr	r3, [pc, #336]	; (80113cc <_strtod_l+0x58c>)
 801127c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011284:	4640      	mov	r0, r8
 8011286:	4649      	mov	r1, r9
 8011288:	f7ef fae0 	bl	800084c <__aeabi_ddiv>
 801128c:	e7d6      	b.n	801123c <_strtod_l+0x3fc>
 801128e:	9b08      	ldr	r3, [sp, #32]
 8011290:	1b75      	subs	r5, r6, r5
 8011292:	441d      	add	r5, r3
 8011294:	2d00      	cmp	r5, #0
 8011296:	dd70      	ble.n	801137a <_strtod_l+0x53a>
 8011298:	f015 030f 	ands.w	r3, r5, #15
 801129c:	d00a      	beq.n	80112b4 <_strtod_l+0x474>
 801129e:	494b      	ldr	r1, [pc, #300]	; (80113cc <_strtod_l+0x58c>)
 80112a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80112a4:	4642      	mov	r2, r8
 80112a6:	464b      	mov	r3, r9
 80112a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112ac:	f7ef f9a4 	bl	80005f8 <__aeabi_dmul>
 80112b0:	4680      	mov	r8, r0
 80112b2:	4689      	mov	r9, r1
 80112b4:	f035 050f 	bics.w	r5, r5, #15
 80112b8:	d04d      	beq.n	8011356 <_strtod_l+0x516>
 80112ba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80112be:	dd22      	ble.n	8011306 <_strtod_l+0x4c6>
 80112c0:	2500      	movs	r5, #0
 80112c2:	46ab      	mov	fp, r5
 80112c4:	9509      	str	r5, [sp, #36]	; 0x24
 80112c6:	9505      	str	r5, [sp, #20]
 80112c8:	2322      	movs	r3, #34	; 0x22
 80112ca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80113d4 <_strtod_l+0x594>
 80112ce:	6023      	str	r3, [r4, #0]
 80112d0:	f04f 0800 	mov.w	r8, #0
 80112d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	f43f aded 	beq.w	8010eb6 <_strtod_l+0x76>
 80112dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80112de:	4620      	mov	r0, r4
 80112e0:	f003 f82e 	bl	8014340 <_Bfree>
 80112e4:	9905      	ldr	r1, [sp, #20]
 80112e6:	4620      	mov	r0, r4
 80112e8:	f003 f82a 	bl	8014340 <_Bfree>
 80112ec:	4659      	mov	r1, fp
 80112ee:	4620      	mov	r0, r4
 80112f0:	f003 f826 	bl	8014340 <_Bfree>
 80112f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112f6:	4620      	mov	r0, r4
 80112f8:	f003 f822 	bl	8014340 <_Bfree>
 80112fc:	4629      	mov	r1, r5
 80112fe:	4620      	mov	r0, r4
 8011300:	f003 f81e 	bl	8014340 <_Bfree>
 8011304:	e5d7      	b.n	8010eb6 <_strtod_l+0x76>
 8011306:	4b32      	ldr	r3, [pc, #200]	; (80113d0 <_strtod_l+0x590>)
 8011308:	9304      	str	r3, [sp, #16]
 801130a:	2300      	movs	r3, #0
 801130c:	112d      	asrs	r5, r5, #4
 801130e:	4640      	mov	r0, r8
 8011310:	4649      	mov	r1, r9
 8011312:	469a      	mov	sl, r3
 8011314:	2d01      	cmp	r5, #1
 8011316:	dc21      	bgt.n	801135c <_strtod_l+0x51c>
 8011318:	b10b      	cbz	r3, 801131e <_strtod_l+0x4de>
 801131a:	4680      	mov	r8, r0
 801131c:	4689      	mov	r9, r1
 801131e:	492c      	ldr	r1, [pc, #176]	; (80113d0 <_strtod_l+0x590>)
 8011320:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011324:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011328:	4642      	mov	r2, r8
 801132a:	464b      	mov	r3, r9
 801132c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011330:	f7ef f962 	bl	80005f8 <__aeabi_dmul>
 8011334:	4b27      	ldr	r3, [pc, #156]	; (80113d4 <_strtod_l+0x594>)
 8011336:	460a      	mov	r2, r1
 8011338:	400b      	ands	r3, r1
 801133a:	4927      	ldr	r1, [pc, #156]	; (80113d8 <_strtod_l+0x598>)
 801133c:	428b      	cmp	r3, r1
 801133e:	4680      	mov	r8, r0
 8011340:	d8be      	bhi.n	80112c0 <_strtod_l+0x480>
 8011342:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011346:	428b      	cmp	r3, r1
 8011348:	bf86      	itte	hi
 801134a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80113dc <_strtod_l+0x59c>
 801134e:	f04f 38ff 	movhi.w	r8, #4294967295
 8011352:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8011356:	2300      	movs	r3, #0
 8011358:	9304      	str	r3, [sp, #16]
 801135a:	e07b      	b.n	8011454 <_strtod_l+0x614>
 801135c:	07ea      	lsls	r2, r5, #31
 801135e:	d505      	bpl.n	801136c <_strtod_l+0x52c>
 8011360:	9b04      	ldr	r3, [sp, #16]
 8011362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011366:	f7ef f947 	bl	80005f8 <__aeabi_dmul>
 801136a:	2301      	movs	r3, #1
 801136c:	9a04      	ldr	r2, [sp, #16]
 801136e:	3208      	adds	r2, #8
 8011370:	f10a 0a01 	add.w	sl, sl, #1
 8011374:	106d      	asrs	r5, r5, #1
 8011376:	9204      	str	r2, [sp, #16]
 8011378:	e7cc      	b.n	8011314 <_strtod_l+0x4d4>
 801137a:	d0ec      	beq.n	8011356 <_strtod_l+0x516>
 801137c:	426d      	negs	r5, r5
 801137e:	f015 020f 	ands.w	r2, r5, #15
 8011382:	d00a      	beq.n	801139a <_strtod_l+0x55a>
 8011384:	4b11      	ldr	r3, [pc, #68]	; (80113cc <_strtod_l+0x58c>)
 8011386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801138a:	4640      	mov	r0, r8
 801138c:	4649      	mov	r1, r9
 801138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011392:	f7ef fa5b 	bl	800084c <__aeabi_ddiv>
 8011396:	4680      	mov	r8, r0
 8011398:	4689      	mov	r9, r1
 801139a:	112d      	asrs	r5, r5, #4
 801139c:	d0db      	beq.n	8011356 <_strtod_l+0x516>
 801139e:	2d1f      	cmp	r5, #31
 80113a0:	dd1e      	ble.n	80113e0 <_strtod_l+0x5a0>
 80113a2:	2500      	movs	r5, #0
 80113a4:	46ab      	mov	fp, r5
 80113a6:	9509      	str	r5, [sp, #36]	; 0x24
 80113a8:	9505      	str	r5, [sp, #20]
 80113aa:	2322      	movs	r3, #34	; 0x22
 80113ac:	f04f 0800 	mov.w	r8, #0
 80113b0:	f04f 0900 	mov.w	r9, #0
 80113b4:	6023      	str	r3, [r4, #0]
 80113b6:	e78d      	b.n	80112d4 <_strtod_l+0x494>
 80113b8:	080189ee 	.word	0x080189ee
 80113bc:	080188a4 	.word	0x080188a4
 80113c0:	080189e6 	.word	0x080189e6
 80113c4:	08018ad2 	.word	0x08018ad2
 80113c8:	08018ace 	.word	0x08018ace
 80113cc:	08018c28 	.word	0x08018c28
 80113d0:	08018c00 	.word	0x08018c00
 80113d4:	7ff00000 	.word	0x7ff00000
 80113d8:	7ca00000 	.word	0x7ca00000
 80113dc:	7fefffff 	.word	0x7fefffff
 80113e0:	f015 0310 	ands.w	r3, r5, #16
 80113e4:	bf18      	it	ne
 80113e6:	236a      	movne	r3, #106	; 0x6a
 80113e8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801178c <_strtod_l+0x94c>
 80113ec:	9304      	str	r3, [sp, #16]
 80113ee:	4640      	mov	r0, r8
 80113f0:	4649      	mov	r1, r9
 80113f2:	2300      	movs	r3, #0
 80113f4:	07ea      	lsls	r2, r5, #31
 80113f6:	d504      	bpl.n	8011402 <_strtod_l+0x5c2>
 80113f8:	e9da 2300 	ldrd	r2, r3, [sl]
 80113fc:	f7ef f8fc 	bl	80005f8 <__aeabi_dmul>
 8011400:	2301      	movs	r3, #1
 8011402:	106d      	asrs	r5, r5, #1
 8011404:	f10a 0a08 	add.w	sl, sl, #8
 8011408:	d1f4      	bne.n	80113f4 <_strtod_l+0x5b4>
 801140a:	b10b      	cbz	r3, 8011410 <_strtod_l+0x5d0>
 801140c:	4680      	mov	r8, r0
 801140e:	4689      	mov	r9, r1
 8011410:	9b04      	ldr	r3, [sp, #16]
 8011412:	b1bb      	cbz	r3, 8011444 <_strtod_l+0x604>
 8011414:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8011418:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801141c:	2b00      	cmp	r3, #0
 801141e:	4649      	mov	r1, r9
 8011420:	dd10      	ble.n	8011444 <_strtod_l+0x604>
 8011422:	2b1f      	cmp	r3, #31
 8011424:	f340 811e 	ble.w	8011664 <_strtod_l+0x824>
 8011428:	2b34      	cmp	r3, #52	; 0x34
 801142a:	bfde      	ittt	le
 801142c:	f04f 33ff 	movle.w	r3, #4294967295
 8011430:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011434:	4093      	lslle	r3, r2
 8011436:	f04f 0800 	mov.w	r8, #0
 801143a:	bfcc      	ite	gt
 801143c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011440:	ea03 0901 	andle.w	r9, r3, r1
 8011444:	2200      	movs	r2, #0
 8011446:	2300      	movs	r3, #0
 8011448:	4640      	mov	r0, r8
 801144a:	4649      	mov	r1, r9
 801144c:	f7ef fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011450:	2800      	cmp	r0, #0
 8011452:	d1a6      	bne.n	80113a2 <_strtod_l+0x562>
 8011454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011456:	9300      	str	r3, [sp, #0]
 8011458:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801145a:	4633      	mov	r3, r6
 801145c:	465a      	mov	r2, fp
 801145e:	4620      	mov	r0, r4
 8011460:	f002 ffd6 	bl	8014410 <__s2b>
 8011464:	9009      	str	r0, [sp, #36]	; 0x24
 8011466:	2800      	cmp	r0, #0
 8011468:	f43f af2a 	beq.w	80112c0 <_strtod_l+0x480>
 801146c:	9a08      	ldr	r2, [sp, #32]
 801146e:	9b05      	ldr	r3, [sp, #20]
 8011470:	2a00      	cmp	r2, #0
 8011472:	eba3 0307 	sub.w	r3, r3, r7
 8011476:	bfa8      	it	ge
 8011478:	2300      	movge	r3, #0
 801147a:	930c      	str	r3, [sp, #48]	; 0x30
 801147c:	2500      	movs	r5, #0
 801147e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011482:	9312      	str	r3, [sp, #72]	; 0x48
 8011484:	46ab      	mov	fp, r5
 8011486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011488:	4620      	mov	r0, r4
 801148a:	6859      	ldr	r1, [r3, #4]
 801148c:	f002 ff18 	bl	80142c0 <_Balloc>
 8011490:	9005      	str	r0, [sp, #20]
 8011492:	2800      	cmp	r0, #0
 8011494:	f43f af18 	beq.w	80112c8 <_strtod_l+0x488>
 8011498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801149a:	691a      	ldr	r2, [r3, #16]
 801149c:	3202      	adds	r2, #2
 801149e:	f103 010c 	add.w	r1, r3, #12
 80114a2:	0092      	lsls	r2, r2, #2
 80114a4:	300c      	adds	r0, #12
 80114a6:	f001 fca0 	bl	8012dea <memcpy>
 80114aa:	ec49 8b10 	vmov	d0, r8, r9
 80114ae:	aa18      	add	r2, sp, #96	; 0x60
 80114b0:	a917      	add	r1, sp, #92	; 0x5c
 80114b2:	4620      	mov	r0, r4
 80114b4:	f003 fae0 	bl	8014a78 <__d2b>
 80114b8:	ec49 8b18 	vmov	d8, r8, r9
 80114bc:	9016      	str	r0, [sp, #88]	; 0x58
 80114be:	2800      	cmp	r0, #0
 80114c0:	f43f af02 	beq.w	80112c8 <_strtod_l+0x488>
 80114c4:	2101      	movs	r1, #1
 80114c6:	4620      	mov	r0, r4
 80114c8:	f003 f83a 	bl	8014540 <__i2b>
 80114cc:	4683      	mov	fp, r0
 80114ce:	2800      	cmp	r0, #0
 80114d0:	f43f aefa 	beq.w	80112c8 <_strtod_l+0x488>
 80114d4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80114d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80114d8:	2e00      	cmp	r6, #0
 80114da:	bfab      	itete	ge
 80114dc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80114de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80114e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80114e2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80114e6:	bfac      	ite	ge
 80114e8:	eb06 0a03 	addge.w	sl, r6, r3
 80114ec:	1b9f      	sublt	r7, r3, r6
 80114ee:	9b04      	ldr	r3, [sp, #16]
 80114f0:	1af6      	subs	r6, r6, r3
 80114f2:	4416      	add	r6, r2
 80114f4:	4ba0      	ldr	r3, [pc, #640]	; (8011778 <_strtod_l+0x938>)
 80114f6:	3e01      	subs	r6, #1
 80114f8:	429e      	cmp	r6, r3
 80114fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80114fe:	f280 80c4 	bge.w	801168a <_strtod_l+0x84a>
 8011502:	1b9b      	subs	r3, r3, r6
 8011504:	2b1f      	cmp	r3, #31
 8011506:	eba2 0203 	sub.w	r2, r2, r3
 801150a:	f04f 0101 	mov.w	r1, #1
 801150e:	f300 80b0 	bgt.w	8011672 <_strtod_l+0x832>
 8011512:	fa01 f303 	lsl.w	r3, r1, r3
 8011516:	930e      	str	r3, [sp, #56]	; 0x38
 8011518:	2300      	movs	r3, #0
 801151a:	930d      	str	r3, [sp, #52]	; 0x34
 801151c:	eb0a 0602 	add.w	r6, sl, r2
 8011520:	9b04      	ldr	r3, [sp, #16]
 8011522:	45b2      	cmp	sl, r6
 8011524:	4417      	add	r7, r2
 8011526:	441f      	add	r7, r3
 8011528:	4653      	mov	r3, sl
 801152a:	bfa8      	it	ge
 801152c:	4633      	movge	r3, r6
 801152e:	42bb      	cmp	r3, r7
 8011530:	bfa8      	it	ge
 8011532:	463b      	movge	r3, r7
 8011534:	2b00      	cmp	r3, #0
 8011536:	bfc2      	ittt	gt
 8011538:	1af6      	subgt	r6, r6, r3
 801153a:	1aff      	subgt	r7, r7, r3
 801153c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8011540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011542:	2b00      	cmp	r3, #0
 8011544:	dd17      	ble.n	8011576 <_strtod_l+0x736>
 8011546:	4659      	mov	r1, fp
 8011548:	461a      	mov	r2, r3
 801154a:	4620      	mov	r0, r4
 801154c:	f003 f8b8 	bl	80146c0 <__pow5mult>
 8011550:	4683      	mov	fp, r0
 8011552:	2800      	cmp	r0, #0
 8011554:	f43f aeb8 	beq.w	80112c8 <_strtod_l+0x488>
 8011558:	4601      	mov	r1, r0
 801155a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801155c:	4620      	mov	r0, r4
 801155e:	f003 f805 	bl	801456c <__multiply>
 8011562:	900b      	str	r0, [sp, #44]	; 0x2c
 8011564:	2800      	cmp	r0, #0
 8011566:	f43f aeaf 	beq.w	80112c8 <_strtod_l+0x488>
 801156a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801156c:	4620      	mov	r0, r4
 801156e:	f002 fee7 	bl	8014340 <_Bfree>
 8011572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011574:	9316      	str	r3, [sp, #88]	; 0x58
 8011576:	2e00      	cmp	r6, #0
 8011578:	f300 808c 	bgt.w	8011694 <_strtod_l+0x854>
 801157c:	9b08      	ldr	r3, [sp, #32]
 801157e:	2b00      	cmp	r3, #0
 8011580:	dd08      	ble.n	8011594 <_strtod_l+0x754>
 8011582:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011584:	9905      	ldr	r1, [sp, #20]
 8011586:	4620      	mov	r0, r4
 8011588:	f003 f89a 	bl	80146c0 <__pow5mult>
 801158c:	9005      	str	r0, [sp, #20]
 801158e:	2800      	cmp	r0, #0
 8011590:	f43f ae9a 	beq.w	80112c8 <_strtod_l+0x488>
 8011594:	2f00      	cmp	r7, #0
 8011596:	dd08      	ble.n	80115aa <_strtod_l+0x76a>
 8011598:	9905      	ldr	r1, [sp, #20]
 801159a:	463a      	mov	r2, r7
 801159c:	4620      	mov	r0, r4
 801159e:	f003 f8e9 	bl	8014774 <__lshift>
 80115a2:	9005      	str	r0, [sp, #20]
 80115a4:	2800      	cmp	r0, #0
 80115a6:	f43f ae8f 	beq.w	80112c8 <_strtod_l+0x488>
 80115aa:	f1ba 0f00 	cmp.w	sl, #0
 80115ae:	dd08      	ble.n	80115c2 <_strtod_l+0x782>
 80115b0:	4659      	mov	r1, fp
 80115b2:	4652      	mov	r2, sl
 80115b4:	4620      	mov	r0, r4
 80115b6:	f003 f8dd 	bl	8014774 <__lshift>
 80115ba:	4683      	mov	fp, r0
 80115bc:	2800      	cmp	r0, #0
 80115be:	f43f ae83 	beq.w	80112c8 <_strtod_l+0x488>
 80115c2:	9a05      	ldr	r2, [sp, #20]
 80115c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80115c6:	4620      	mov	r0, r4
 80115c8:	f003 f95c 	bl	8014884 <__mdiff>
 80115cc:	4605      	mov	r5, r0
 80115ce:	2800      	cmp	r0, #0
 80115d0:	f43f ae7a 	beq.w	80112c8 <_strtod_l+0x488>
 80115d4:	68c3      	ldr	r3, [r0, #12]
 80115d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80115d8:	2300      	movs	r3, #0
 80115da:	60c3      	str	r3, [r0, #12]
 80115dc:	4659      	mov	r1, fp
 80115de:	f003 f935 	bl	801484c <__mcmp>
 80115e2:	2800      	cmp	r0, #0
 80115e4:	da60      	bge.n	80116a8 <_strtod_l+0x868>
 80115e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115e8:	ea53 0308 	orrs.w	r3, r3, r8
 80115ec:	f040 8084 	bne.w	80116f8 <_strtod_l+0x8b8>
 80115f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d17f      	bne.n	80116f8 <_strtod_l+0x8b8>
 80115f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80115fc:	0d1b      	lsrs	r3, r3, #20
 80115fe:	051b      	lsls	r3, r3, #20
 8011600:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011604:	d978      	bls.n	80116f8 <_strtod_l+0x8b8>
 8011606:	696b      	ldr	r3, [r5, #20]
 8011608:	b913      	cbnz	r3, 8011610 <_strtod_l+0x7d0>
 801160a:	692b      	ldr	r3, [r5, #16]
 801160c:	2b01      	cmp	r3, #1
 801160e:	dd73      	ble.n	80116f8 <_strtod_l+0x8b8>
 8011610:	4629      	mov	r1, r5
 8011612:	2201      	movs	r2, #1
 8011614:	4620      	mov	r0, r4
 8011616:	f003 f8ad 	bl	8014774 <__lshift>
 801161a:	4659      	mov	r1, fp
 801161c:	4605      	mov	r5, r0
 801161e:	f003 f915 	bl	801484c <__mcmp>
 8011622:	2800      	cmp	r0, #0
 8011624:	dd68      	ble.n	80116f8 <_strtod_l+0x8b8>
 8011626:	9904      	ldr	r1, [sp, #16]
 8011628:	4a54      	ldr	r2, [pc, #336]	; (801177c <_strtod_l+0x93c>)
 801162a:	464b      	mov	r3, r9
 801162c:	2900      	cmp	r1, #0
 801162e:	f000 8084 	beq.w	801173a <_strtod_l+0x8fa>
 8011632:	ea02 0109 	and.w	r1, r2, r9
 8011636:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801163a:	dc7e      	bgt.n	801173a <_strtod_l+0x8fa>
 801163c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011640:	f77f aeb3 	ble.w	80113aa <_strtod_l+0x56a>
 8011644:	4b4e      	ldr	r3, [pc, #312]	; (8011780 <_strtod_l+0x940>)
 8011646:	4640      	mov	r0, r8
 8011648:	4649      	mov	r1, r9
 801164a:	2200      	movs	r2, #0
 801164c:	f7ee ffd4 	bl	80005f8 <__aeabi_dmul>
 8011650:	4b4a      	ldr	r3, [pc, #296]	; (801177c <_strtod_l+0x93c>)
 8011652:	400b      	ands	r3, r1
 8011654:	4680      	mov	r8, r0
 8011656:	4689      	mov	r9, r1
 8011658:	2b00      	cmp	r3, #0
 801165a:	f47f ae3f 	bne.w	80112dc <_strtod_l+0x49c>
 801165e:	2322      	movs	r3, #34	; 0x22
 8011660:	6023      	str	r3, [r4, #0]
 8011662:	e63b      	b.n	80112dc <_strtod_l+0x49c>
 8011664:	f04f 32ff 	mov.w	r2, #4294967295
 8011668:	fa02 f303 	lsl.w	r3, r2, r3
 801166c:	ea03 0808 	and.w	r8, r3, r8
 8011670:	e6e8      	b.n	8011444 <_strtod_l+0x604>
 8011672:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011676:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801167a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801167e:	36e2      	adds	r6, #226	; 0xe2
 8011680:	fa01 f306 	lsl.w	r3, r1, r6
 8011684:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8011688:	e748      	b.n	801151c <_strtod_l+0x6dc>
 801168a:	2100      	movs	r1, #0
 801168c:	2301      	movs	r3, #1
 801168e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8011692:	e743      	b.n	801151c <_strtod_l+0x6dc>
 8011694:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011696:	4632      	mov	r2, r6
 8011698:	4620      	mov	r0, r4
 801169a:	f003 f86b 	bl	8014774 <__lshift>
 801169e:	9016      	str	r0, [sp, #88]	; 0x58
 80116a0:	2800      	cmp	r0, #0
 80116a2:	f47f af6b 	bne.w	801157c <_strtod_l+0x73c>
 80116a6:	e60f      	b.n	80112c8 <_strtod_l+0x488>
 80116a8:	46ca      	mov	sl, r9
 80116aa:	d171      	bne.n	8011790 <_strtod_l+0x950>
 80116ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80116ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80116b2:	b352      	cbz	r2, 801170a <_strtod_l+0x8ca>
 80116b4:	4a33      	ldr	r2, [pc, #204]	; (8011784 <_strtod_l+0x944>)
 80116b6:	4293      	cmp	r3, r2
 80116b8:	d12a      	bne.n	8011710 <_strtod_l+0x8d0>
 80116ba:	9b04      	ldr	r3, [sp, #16]
 80116bc:	4641      	mov	r1, r8
 80116be:	b1fb      	cbz	r3, 8011700 <_strtod_l+0x8c0>
 80116c0:	4b2e      	ldr	r3, [pc, #184]	; (801177c <_strtod_l+0x93c>)
 80116c2:	ea09 0303 	and.w	r3, r9, r3
 80116c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80116ca:	f04f 32ff 	mov.w	r2, #4294967295
 80116ce:	d81a      	bhi.n	8011706 <_strtod_l+0x8c6>
 80116d0:	0d1b      	lsrs	r3, r3, #20
 80116d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80116d6:	fa02 f303 	lsl.w	r3, r2, r3
 80116da:	4299      	cmp	r1, r3
 80116dc:	d118      	bne.n	8011710 <_strtod_l+0x8d0>
 80116de:	4b2a      	ldr	r3, [pc, #168]	; (8011788 <_strtod_l+0x948>)
 80116e0:	459a      	cmp	sl, r3
 80116e2:	d102      	bne.n	80116ea <_strtod_l+0x8aa>
 80116e4:	3101      	adds	r1, #1
 80116e6:	f43f adef 	beq.w	80112c8 <_strtod_l+0x488>
 80116ea:	4b24      	ldr	r3, [pc, #144]	; (801177c <_strtod_l+0x93c>)
 80116ec:	ea0a 0303 	and.w	r3, sl, r3
 80116f0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80116f4:	f04f 0800 	mov.w	r8, #0
 80116f8:	9b04      	ldr	r3, [sp, #16]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d1a2      	bne.n	8011644 <_strtod_l+0x804>
 80116fe:	e5ed      	b.n	80112dc <_strtod_l+0x49c>
 8011700:	f04f 33ff 	mov.w	r3, #4294967295
 8011704:	e7e9      	b.n	80116da <_strtod_l+0x89a>
 8011706:	4613      	mov	r3, r2
 8011708:	e7e7      	b.n	80116da <_strtod_l+0x89a>
 801170a:	ea53 0308 	orrs.w	r3, r3, r8
 801170e:	d08a      	beq.n	8011626 <_strtod_l+0x7e6>
 8011710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011712:	b1e3      	cbz	r3, 801174e <_strtod_l+0x90e>
 8011714:	ea13 0f0a 	tst.w	r3, sl
 8011718:	d0ee      	beq.n	80116f8 <_strtod_l+0x8b8>
 801171a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801171c:	9a04      	ldr	r2, [sp, #16]
 801171e:	4640      	mov	r0, r8
 8011720:	4649      	mov	r1, r9
 8011722:	b1c3      	cbz	r3, 8011756 <_strtod_l+0x916>
 8011724:	f7ff fb6e 	bl	8010e04 <sulp>
 8011728:	4602      	mov	r2, r0
 801172a:	460b      	mov	r3, r1
 801172c:	ec51 0b18 	vmov	r0, r1, d8
 8011730:	f7ee fdac 	bl	800028c <__adddf3>
 8011734:	4680      	mov	r8, r0
 8011736:	4689      	mov	r9, r1
 8011738:	e7de      	b.n	80116f8 <_strtod_l+0x8b8>
 801173a:	4013      	ands	r3, r2
 801173c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011740:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011744:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011748:	f04f 38ff 	mov.w	r8, #4294967295
 801174c:	e7d4      	b.n	80116f8 <_strtod_l+0x8b8>
 801174e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011750:	ea13 0f08 	tst.w	r3, r8
 8011754:	e7e0      	b.n	8011718 <_strtod_l+0x8d8>
 8011756:	f7ff fb55 	bl	8010e04 <sulp>
 801175a:	4602      	mov	r2, r0
 801175c:	460b      	mov	r3, r1
 801175e:	ec51 0b18 	vmov	r0, r1, d8
 8011762:	f7ee fd91 	bl	8000288 <__aeabi_dsub>
 8011766:	2200      	movs	r2, #0
 8011768:	2300      	movs	r3, #0
 801176a:	4680      	mov	r8, r0
 801176c:	4689      	mov	r9, r1
 801176e:	f7ef f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8011772:	2800      	cmp	r0, #0
 8011774:	d0c0      	beq.n	80116f8 <_strtod_l+0x8b8>
 8011776:	e618      	b.n	80113aa <_strtod_l+0x56a>
 8011778:	fffffc02 	.word	0xfffffc02
 801177c:	7ff00000 	.word	0x7ff00000
 8011780:	39500000 	.word	0x39500000
 8011784:	000fffff 	.word	0x000fffff
 8011788:	7fefffff 	.word	0x7fefffff
 801178c:	080188b8 	.word	0x080188b8
 8011790:	4659      	mov	r1, fp
 8011792:	4628      	mov	r0, r5
 8011794:	f003 f9ca 	bl	8014b2c <__ratio>
 8011798:	ec57 6b10 	vmov	r6, r7, d0
 801179c:	ee10 0a10 	vmov	r0, s0
 80117a0:	2200      	movs	r2, #0
 80117a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80117a6:	4639      	mov	r1, r7
 80117a8:	f7ef f9a2 	bl	8000af0 <__aeabi_dcmple>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d071      	beq.n	8011894 <_strtod_l+0xa54>
 80117b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d17c      	bne.n	80118b0 <_strtod_l+0xa70>
 80117b6:	f1b8 0f00 	cmp.w	r8, #0
 80117ba:	d15a      	bne.n	8011872 <_strtod_l+0xa32>
 80117bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d15d      	bne.n	8011880 <_strtod_l+0xa40>
 80117c4:	4b90      	ldr	r3, [pc, #576]	; (8011a08 <_strtod_l+0xbc8>)
 80117c6:	2200      	movs	r2, #0
 80117c8:	4630      	mov	r0, r6
 80117ca:	4639      	mov	r1, r7
 80117cc:	f7ef f986 	bl	8000adc <__aeabi_dcmplt>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d15c      	bne.n	801188e <_strtod_l+0xa4e>
 80117d4:	4630      	mov	r0, r6
 80117d6:	4639      	mov	r1, r7
 80117d8:	4b8c      	ldr	r3, [pc, #560]	; (8011a0c <_strtod_l+0xbcc>)
 80117da:	2200      	movs	r2, #0
 80117dc:	f7ee ff0c 	bl	80005f8 <__aeabi_dmul>
 80117e0:	4606      	mov	r6, r0
 80117e2:	460f      	mov	r7, r1
 80117e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80117e8:	9606      	str	r6, [sp, #24]
 80117ea:	9307      	str	r3, [sp, #28]
 80117ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80117f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80117f4:	4b86      	ldr	r3, [pc, #536]	; (8011a10 <_strtod_l+0xbd0>)
 80117f6:	ea0a 0303 	and.w	r3, sl, r3
 80117fa:	930d      	str	r3, [sp, #52]	; 0x34
 80117fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117fe:	4b85      	ldr	r3, [pc, #532]	; (8011a14 <_strtod_l+0xbd4>)
 8011800:	429a      	cmp	r2, r3
 8011802:	f040 8090 	bne.w	8011926 <_strtod_l+0xae6>
 8011806:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801180a:	ec49 8b10 	vmov	d0, r8, r9
 801180e:	f003 f8c3 	bl	8014998 <__ulp>
 8011812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011816:	ec51 0b10 	vmov	r0, r1, d0
 801181a:	f7ee feed 	bl	80005f8 <__aeabi_dmul>
 801181e:	4642      	mov	r2, r8
 8011820:	464b      	mov	r3, r9
 8011822:	f7ee fd33 	bl	800028c <__adddf3>
 8011826:	460b      	mov	r3, r1
 8011828:	4979      	ldr	r1, [pc, #484]	; (8011a10 <_strtod_l+0xbd0>)
 801182a:	4a7b      	ldr	r2, [pc, #492]	; (8011a18 <_strtod_l+0xbd8>)
 801182c:	4019      	ands	r1, r3
 801182e:	4291      	cmp	r1, r2
 8011830:	4680      	mov	r8, r0
 8011832:	d944      	bls.n	80118be <_strtod_l+0xa7e>
 8011834:	ee18 2a90 	vmov	r2, s17
 8011838:	4b78      	ldr	r3, [pc, #480]	; (8011a1c <_strtod_l+0xbdc>)
 801183a:	429a      	cmp	r2, r3
 801183c:	d104      	bne.n	8011848 <_strtod_l+0xa08>
 801183e:	ee18 3a10 	vmov	r3, s16
 8011842:	3301      	adds	r3, #1
 8011844:	f43f ad40 	beq.w	80112c8 <_strtod_l+0x488>
 8011848:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8011a1c <_strtod_l+0xbdc>
 801184c:	f04f 38ff 	mov.w	r8, #4294967295
 8011850:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011852:	4620      	mov	r0, r4
 8011854:	f002 fd74 	bl	8014340 <_Bfree>
 8011858:	9905      	ldr	r1, [sp, #20]
 801185a:	4620      	mov	r0, r4
 801185c:	f002 fd70 	bl	8014340 <_Bfree>
 8011860:	4659      	mov	r1, fp
 8011862:	4620      	mov	r0, r4
 8011864:	f002 fd6c 	bl	8014340 <_Bfree>
 8011868:	4629      	mov	r1, r5
 801186a:	4620      	mov	r0, r4
 801186c:	f002 fd68 	bl	8014340 <_Bfree>
 8011870:	e609      	b.n	8011486 <_strtod_l+0x646>
 8011872:	f1b8 0f01 	cmp.w	r8, #1
 8011876:	d103      	bne.n	8011880 <_strtod_l+0xa40>
 8011878:	f1b9 0f00 	cmp.w	r9, #0
 801187c:	f43f ad95 	beq.w	80113aa <_strtod_l+0x56a>
 8011880:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80119d8 <_strtod_l+0xb98>
 8011884:	4f60      	ldr	r7, [pc, #384]	; (8011a08 <_strtod_l+0xbc8>)
 8011886:	ed8d 7b06 	vstr	d7, [sp, #24]
 801188a:	2600      	movs	r6, #0
 801188c:	e7ae      	b.n	80117ec <_strtod_l+0x9ac>
 801188e:	4f5f      	ldr	r7, [pc, #380]	; (8011a0c <_strtod_l+0xbcc>)
 8011890:	2600      	movs	r6, #0
 8011892:	e7a7      	b.n	80117e4 <_strtod_l+0x9a4>
 8011894:	4b5d      	ldr	r3, [pc, #372]	; (8011a0c <_strtod_l+0xbcc>)
 8011896:	4630      	mov	r0, r6
 8011898:	4639      	mov	r1, r7
 801189a:	2200      	movs	r2, #0
 801189c:	f7ee feac 	bl	80005f8 <__aeabi_dmul>
 80118a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118a2:	4606      	mov	r6, r0
 80118a4:	460f      	mov	r7, r1
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d09c      	beq.n	80117e4 <_strtod_l+0x9a4>
 80118aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80118ae:	e79d      	b.n	80117ec <_strtod_l+0x9ac>
 80118b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80119e0 <_strtod_l+0xba0>
 80118b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80118b8:	ec57 6b17 	vmov	r6, r7, d7
 80118bc:	e796      	b.n	80117ec <_strtod_l+0x9ac>
 80118be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80118c2:	9b04      	ldr	r3, [sp, #16]
 80118c4:	46ca      	mov	sl, r9
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d1c2      	bne.n	8011850 <_strtod_l+0xa10>
 80118ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80118ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118d0:	0d1b      	lsrs	r3, r3, #20
 80118d2:	051b      	lsls	r3, r3, #20
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d1bb      	bne.n	8011850 <_strtod_l+0xa10>
 80118d8:	4630      	mov	r0, r6
 80118da:	4639      	mov	r1, r7
 80118dc:	f7ef f9ec 	bl	8000cb8 <__aeabi_d2lz>
 80118e0:	f7ee fe5c 	bl	800059c <__aeabi_l2d>
 80118e4:	4602      	mov	r2, r0
 80118e6:	460b      	mov	r3, r1
 80118e8:	4630      	mov	r0, r6
 80118ea:	4639      	mov	r1, r7
 80118ec:	f7ee fccc 	bl	8000288 <__aeabi_dsub>
 80118f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80118f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80118f6:	ea43 0308 	orr.w	r3, r3, r8
 80118fa:	4313      	orrs	r3, r2
 80118fc:	4606      	mov	r6, r0
 80118fe:	460f      	mov	r7, r1
 8011900:	d054      	beq.n	80119ac <_strtod_l+0xb6c>
 8011902:	a339      	add	r3, pc, #228	; (adr r3, 80119e8 <_strtod_l+0xba8>)
 8011904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011908:	f7ef f8e8 	bl	8000adc <__aeabi_dcmplt>
 801190c:	2800      	cmp	r0, #0
 801190e:	f47f ace5 	bne.w	80112dc <_strtod_l+0x49c>
 8011912:	a337      	add	r3, pc, #220	; (adr r3, 80119f0 <_strtod_l+0xbb0>)
 8011914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011918:	4630      	mov	r0, r6
 801191a:	4639      	mov	r1, r7
 801191c:	f7ef f8fc 	bl	8000b18 <__aeabi_dcmpgt>
 8011920:	2800      	cmp	r0, #0
 8011922:	d095      	beq.n	8011850 <_strtod_l+0xa10>
 8011924:	e4da      	b.n	80112dc <_strtod_l+0x49c>
 8011926:	9b04      	ldr	r3, [sp, #16]
 8011928:	b333      	cbz	r3, 8011978 <_strtod_l+0xb38>
 801192a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801192c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011930:	d822      	bhi.n	8011978 <_strtod_l+0xb38>
 8011932:	a331      	add	r3, pc, #196	; (adr r3, 80119f8 <_strtod_l+0xbb8>)
 8011934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011938:	4630      	mov	r0, r6
 801193a:	4639      	mov	r1, r7
 801193c:	f7ef f8d8 	bl	8000af0 <__aeabi_dcmple>
 8011940:	b1a0      	cbz	r0, 801196c <_strtod_l+0xb2c>
 8011942:	4639      	mov	r1, r7
 8011944:	4630      	mov	r0, r6
 8011946:	f7ef f92f 	bl	8000ba8 <__aeabi_d2uiz>
 801194a:	2801      	cmp	r0, #1
 801194c:	bf38      	it	cc
 801194e:	2001      	movcc	r0, #1
 8011950:	f7ee fdd8 	bl	8000504 <__aeabi_ui2d>
 8011954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011956:	4606      	mov	r6, r0
 8011958:	460f      	mov	r7, r1
 801195a:	bb23      	cbnz	r3, 80119a6 <_strtod_l+0xb66>
 801195c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011960:	9010      	str	r0, [sp, #64]	; 0x40
 8011962:	9311      	str	r3, [sp, #68]	; 0x44
 8011964:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011968:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801196c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801196e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011970:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011974:	1a9b      	subs	r3, r3, r2
 8011976:	930f      	str	r3, [sp, #60]	; 0x3c
 8011978:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801197c:	eeb0 0a48 	vmov.f32	s0, s16
 8011980:	eef0 0a68 	vmov.f32	s1, s17
 8011984:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011988:	f003 f806 	bl	8014998 <__ulp>
 801198c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011990:	ec53 2b10 	vmov	r2, r3, d0
 8011994:	f7ee fe30 	bl	80005f8 <__aeabi_dmul>
 8011998:	ec53 2b18 	vmov	r2, r3, d8
 801199c:	f7ee fc76 	bl	800028c <__adddf3>
 80119a0:	4680      	mov	r8, r0
 80119a2:	4689      	mov	r9, r1
 80119a4:	e78d      	b.n	80118c2 <_strtod_l+0xa82>
 80119a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80119aa:	e7db      	b.n	8011964 <_strtod_l+0xb24>
 80119ac:	a314      	add	r3, pc, #80	; (adr r3, 8011a00 <_strtod_l+0xbc0>)
 80119ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b2:	f7ef f893 	bl	8000adc <__aeabi_dcmplt>
 80119b6:	e7b3      	b.n	8011920 <_strtod_l+0xae0>
 80119b8:	2300      	movs	r3, #0
 80119ba:	930a      	str	r3, [sp, #40]	; 0x28
 80119bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80119be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119c0:	6013      	str	r3, [r2, #0]
 80119c2:	f7ff ba7c 	b.w	8010ebe <_strtod_l+0x7e>
 80119c6:	2a65      	cmp	r2, #101	; 0x65
 80119c8:	f43f ab75 	beq.w	80110b6 <_strtod_l+0x276>
 80119cc:	2a45      	cmp	r2, #69	; 0x45
 80119ce:	f43f ab72 	beq.w	80110b6 <_strtod_l+0x276>
 80119d2:	2301      	movs	r3, #1
 80119d4:	f7ff bbaa 	b.w	801112c <_strtod_l+0x2ec>
 80119d8:	00000000 	.word	0x00000000
 80119dc:	bff00000 	.word	0xbff00000
 80119e0:	00000000 	.word	0x00000000
 80119e4:	3ff00000 	.word	0x3ff00000
 80119e8:	94a03595 	.word	0x94a03595
 80119ec:	3fdfffff 	.word	0x3fdfffff
 80119f0:	35afe535 	.word	0x35afe535
 80119f4:	3fe00000 	.word	0x3fe00000
 80119f8:	ffc00000 	.word	0xffc00000
 80119fc:	41dfffff 	.word	0x41dfffff
 8011a00:	94a03595 	.word	0x94a03595
 8011a04:	3fcfffff 	.word	0x3fcfffff
 8011a08:	3ff00000 	.word	0x3ff00000
 8011a0c:	3fe00000 	.word	0x3fe00000
 8011a10:	7ff00000 	.word	0x7ff00000
 8011a14:	7fe00000 	.word	0x7fe00000
 8011a18:	7c9fffff 	.word	0x7c9fffff
 8011a1c:	7fefffff 	.word	0x7fefffff

08011a20 <_strtod_r>:
 8011a20:	4b01      	ldr	r3, [pc, #4]	; (8011a28 <_strtod_r+0x8>)
 8011a22:	f7ff ba0d 	b.w	8010e40 <_strtod_l>
 8011a26:	bf00      	nop
 8011a28:	20000158 	.word	0x20000158

08011a2c <strtof>:
 8011a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a30:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8011af4 <strtof+0xc8>
 8011a34:	4b2a      	ldr	r3, [pc, #168]	; (8011ae0 <strtof+0xb4>)
 8011a36:	460a      	mov	r2, r1
 8011a38:	ed2d 8b02 	vpush	{d8}
 8011a3c:	4601      	mov	r1, r0
 8011a3e:	f8d8 0000 	ldr.w	r0, [r8]
 8011a42:	f7ff f9fd 	bl	8010e40 <_strtod_l>
 8011a46:	ec55 4b10 	vmov	r4, r5, d0
 8011a4a:	ee10 2a10 	vmov	r2, s0
 8011a4e:	ee10 0a10 	vmov	r0, s0
 8011a52:	462b      	mov	r3, r5
 8011a54:	4629      	mov	r1, r5
 8011a56:	f7ef f869 	bl	8000b2c <__aeabi_dcmpun>
 8011a5a:	b190      	cbz	r0, 8011a82 <strtof+0x56>
 8011a5c:	2d00      	cmp	r5, #0
 8011a5e:	4821      	ldr	r0, [pc, #132]	; (8011ae4 <strtof+0xb8>)
 8011a60:	da09      	bge.n	8011a76 <strtof+0x4a>
 8011a62:	f001 f9d9 	bl	8012e18 <nanf>
 8011a66:	eeb1 8a40 	vneg.f32	s16, s0
 8011a6a:	eeb0 0a48 	vmov.f32	s0, s16
 8011a6e:	ecbd 8b02 	vpop	{d8}
 8011a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a76:	ecbd 8b02 	vpop	{d8}
 8011a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a7e:	f001 b9cb 	b.w	8012e18 <nanf>
 8011a82:	4620      	mov	r0, r4
 8011a84:	4629      	mov	r1, r5
 8011a86:	f7ef f8af 	bl	8000be8 <__aeabi_d2f>
 8011a8a:	ee08 0a10 	vmov	s16, r0
 8011a8e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8011ae8 <strtof+0xbc>
 8011a92:	eeb0 7ac8 	vabs.f32	s14, s16
 8011a96:	eeb4 7a67 	vcmp.f32	s14, s15
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	dd11      	ble.n	8011ac4 <strtof+0x98>
 8011aa0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8011aa4:	4b11      	ldr	r3, [pc, #68]	; (8011aec <strtof+0xc0>)
 8011aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8011aaa:	4620      	mov	r0, r4
 8011aac:	4639      	mov	r1, r7
 8011aae:	f7ef f83d 	bl	8000b2c <__aeabi_dcmpun>
 8011ab2:	b980      	cbnz	r0, 8011ad6 <strtof+0xaa>
 8011ab4:	4b0d      	ldr	r3, [pc, #52]	; (8011aec <strtof+0xc0>)
 8011ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8011aba:	4620      	mov	r0, r4
 8011abc:	4639      	mov	r1, r7
 8011abe:	f7ef f817 	bl	8000af0 <__aeabi_dcmple>
 8011ac2:	b940      	cbnz	r0, 8011ad6 <strtof+0xaa>
 8011ac4:	ee18 3a10 	vmov	r3, s16
 8011ac8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8011acc:	d1cd      	bne.n	8011a6a <strtof+0x3e>
 8011ace:	4b08      	ldr	r3, [pc, #32]	; (8011af0 <strtof+0xc4>)
 8011ad0:	402b      	ands	r3, r5
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d0c9      	beq.n	8011a6a <strtof+0x3e>
 8011ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8011ada:	2222      	movs	r2, #34	; 0x22
 8011adc:	601a      	str	r2, [r3, #0]
 8011ade:	e7c4      	b.n	8011a6a <strtof+0x3e>
 8011ae0:	20000158 	.word	0x20000158
 8011ae4:	08018ace 	.word	0x08018ace
 8011ae8:	7f7fffff 	.word	0x7f7fffff
 8011aec:	7fefffff 	.word	0x7fefffff
 8011af0:	7ff00000 	.word	0x7ff00000
 8011af4:	20000310 	.word	0x20000310

08011af8 <_strtol_l.constprop.0>:
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011afe:	d001      	beq.n	8011b04 <_strtol_l.constprop.0+0xc>
 8011b00:	2b24      	cmp	r3, #36	; 0x24
 8011b02:	d906      	bls.n	8011b12 <_strtol_l.constprop.0+0x1a>
 8011b04:	f001 f93c 	bl	8012d80 <__errno>
 8011b08:	2316      	movs	r3, #22
 8011b0a:	6003      	str	r3, [r0, #0]
 8011b0c:	2000      	movs	r0, #0
 8011b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011bf8 <_strtol_l.constprop.0+0x100>
 8011b16:	460d      	mov	r5, r1
 8011b18:	462e      	mov	r6, r5
 8011b1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b1e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011b22:	f017 0708 	ands.w	r7, r7, #8
 8011b26:	d1f7      	bne.n	8011b18 <_strtol_l.constprop.0+0x20>
 8011b28:	2c2d      	cmp	r4, #45	; 0x2d
 8011b2a:	d132      	bne.n	8011b92 <_strtol_l.constprop.0+0x9a>
 8011b2c:	782c      	ldrb	r4, [r5, #0]
 8011b2e:	2701      	movs	r7, #1
 8011b30:	1cb5      	adds	r5, r6, #2
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d05b      	beq.n	8011bee <_strtol_l.constprop.0+0xf6>
 8011b36:	2b10      	cmp	r3, #16
 8011b38:	d109      	bne.n	8011b4e <_strtol_l.constprop.0+0x56>
 8011b3a:	2c30      	cmp	r4, #48	; 0x30
 8011b3c:	d107      	bne.n	8011b4e <_strtol_l.constprop.0+0x56>
 8011b3e:	782c      	ldrb	r4, [r5, #0]
 8011b40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011b44:	2c58      	cmp	r4, #88	; 0x58
 8011b46:	d14d      	bne.n	8011be4 <_strtol_l.constprop.0+0xec>
 8011b48:	786c      	ldrb	r4, [r5, #1]
 8011b4a:	2310      	movs	r3, #16
 8011b4c:	3502      	adds	r5, #2
 8011b4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011b52:	f108 38ff 	add.w	r8, r8, #4294967295
 8011b56:	f04f 0e00 	mov.w	lr, #0
 8011b5a:	fbb8 f9f3 	udiv	r9, r8, r3
 8011b5e:	4676      	mov	r6, lr
 8011b60:	fb03 8a19 	mls	sl, r3, r9, r8
 8011b64:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011b68:	f1bc 0f09 	cmp.w	ip, #9
 8011b6c:	d816      	bhi.n	8011b9c <_strtol_l.constprop.0+0xa4>
 8011b6e:	4664      	mov	r4, ip
 8011b70:	42a3      	cmp	r3, r4
 8011b72:	dd24      	ble.n	8011bbe <_strtol_l.constprop.0+0xc6>
 8011b74:	f1be 3fff 	cmp.w	lr, #4294967295
 8011b78:	d008      	beq.n	8011b8c <_strtol_l.constprop.0+0x94>
 8011b7a:	45b1      	cmp	r9, r6
 8011b7c:	d31c      	bcc.n	8011bb8 <_strtol_l.constprop.0+0xc0>
 8011b7e:	d101      	bne.n	8011b84 <_strtol_l.constprop.0+0x8c>
 8011b80:	45a2      	cmp	sl, r4
 8011b82:	db19      	blt.n	8011bb8 <_strtol_l.constprop.0+0xc0>
 8011b84:	fb06 4603 	mla	r6, r6, r3, r4
 8011b88:	f04f 0e01 	mov.w	lr, #1
 8011b8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b90:	e7e8      	b.n	8011b64 <_strtol_l.constprop.0+0x6c>
 8011b92:	2c2b      	cmp	r4, #43	; 0x2b
 8011b94:	bf04      	itt	eq
 8011b96:	782c      	ldrbeq	r4, [r5, #0]
 8011b98:	1cb5      	addeq	r5, r6, #2
 8011b9a:	e7ca      	b.n	8011b32 <_strtol_l.constprop.0+0x3a>
 8011b9c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011ba0:	f1bc 0f19 	cmp.w	ip, #25
 8011ba4:	d801      	bhi.n	8011baa <_strtol_l.constprop.0+0xb2>
 8011ba6:	3c37      	subs	r4, #55	; 0x37
 8011ba8:	e7e2      	b.n	8011b70 <_strtol_l.constprop.0+0x78>
 8011baa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011bae:	f1bc 0f19 	cmp.w	ip, #25
 8011bb2:	d804      	bhi.n	8011bbe <_strtol_l.constprop.0+0xc6>
 8011bb4:	3c57      	subs	r4, #87	; 0x57
 8011bb6:	e7db      	b.n	8011b70 <_strtol_l.constprop.0+0x78>
 8011bb8:	f04f 3eff 	mov.w	lr, #4294967295
 8011bbc:	e7e6      	b.n	8011b8c <_strtol_l.constprop.0+0x94>
 8011bbe:	f1be 3fff 	cmp.w	lr, #4294967295
 8011bc2:	d105      	bne.n	8011bd0 <_strtol_l.constprop.0+0xd8>
 8011bc4:	2322      	movs	r3, #34	; 0x22
 8011bc6:	6003      	str	r3, [r0, #0]
 8011bc8:	4646      	mov	r6, r8
 8011bca:	b942      	cbnz	r2, 8011bde <_strtol_l.constprop.0+0xe6>
 8011bcc:	4630      	mov	r0, r6
 8011bce:	e79e      	b.n	8011b0e <_strtol_l.constprop.0+0x16>
 8011bd0:	b107      	cbz	r7, 8011bd4 <_strtol_l.constprop.0+0xdc>
 8011bd2:	4276      	negs	r6, r6
 8011bd4:	2a00      	cmp	r2, #0
 8011bd6:	d0f9      	beq.n	8011bcc <_strtol_l.constprop.0+0xd4>
 8011bd8:	f1be 0f00 	cmp.w	lr, #0
 8011bdc:	d000      	beq.n	8011be0 <_strtol_l.constprop.0+0xe8>
 8011bde:	1e69      	subs	r1, r5, #1
 8011be0:	6011      	str	r1, [r2, #0]
 8011be2:	e7f3      	b.n	8011bcc <_strtol_l.constprop.0+0xd4>
 8011be4:	2430      	movs	r4, #48	; 0x30
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d1b1      	bne.n	8011b4e <_strtol_l.constprop.0+0x56>
 8011bea:	2308      	movs	r3, #8
 8011bec:	e7af      	b.n	8011b4e <_strtol_l.constprop.0+0x56>
 8011bee:	2c30      	cmp	r4, #48	; 0x30
 8011bf0:	d0a5      	beq.n	8011b3e <_strtol_l.constprop.0+0x46>
 8011bf2:	230a      	movs	r3, #10
 8011bf4:	e7ab      	b.n	8011b4e <_strtol_l.constprop.0+0x56>
 8011bf6:	bf00      	nop
 8011bf8:	080188e1 	.word	0x080188e1

08011bfc <_strtol_r>:
 8011bfc:	f7ff bf7c 	b.w	8011af8 <_strtol_l.constprop.0>

08011c00 <strtol>:
 8011c00:	4613      	mov	r3, r2
 8011c02:	460a      	mov	r2, r1
 8011c04:	4601      	mov	r1, r0
 8011c06:	4802      	ldr	r0, [pc, #8]	; (8011c10 <strtol+0x10>)
 8011c08:	6800      	ldr	r0, [r0, #0]
 8011c0a:	f7ff bf75 	b.w	8011af8 <_strtol_l.constprop.0>
 8011c0e:	bf00      	nop
 8011c10:	20000310 	.word	0x20000310

08011c14 <__cvt>:
 8011c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c18:	ec55 4b10 	vmov	r4, r5, d0
 8011c1c:	2d00      	cmp	r5, #0
 8011c1e:	460e      	mov	r6, r1
 8011c20:	4619      	mov	r1, r3
 8011c22:	462b      	mov	r3, r5
 8011c24:	bfbb      	ittet	lt
 8011c26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011c2a:	461d      	movlt	r5, r3
 8011c2c:	2300      	movge	r3, #0
 8011c2e:	232d      	movlt	r3, #45	; 0x2d
 8011c30:	700b      	strb	r3, [r1, #0]
 8011c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011c38:	4691      	mov	r9, r2
 8011c3a:	f023 0820 	bic.w	r8, r3, #32
 8011c3e:	bfbc      	itt	lt
 8011c40:	4622      	movlt	r2, r4
 8011c42:	4614      	movlt	r4, r2
 8011c44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011c48:	d005      	beq.n	8011c56 <__cvt+0x42>
 8011c4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011c4e:	d100      	bne.n	8011c52 <__cvt+0x3e>
 8011c50:	3601      	adds	r6, #1
 8011c52:	2102      	movs	r1, #2
 8011c54:	e000      	b.n	8011c58 <__cvt+0x44>
 8011c56:	2103      	movs	r1, #3
 8011c58:	ab03      	add	r3, sp, #12
 8011c5a:	9301      	str	r3, [sp, #4]
 8011c5c:	ab02      	add	r3, sp, #8
 8011c5e:	9300      	str	r3, [sp, #0]
 8011c60:	ec45 4b10 	vmov	d0, r4, r5
 8011c64:	4653      	mov	r3, sl
 8011c66:	4632      	mov	r2, r6
 8011c68:	f001 f982 	bl	8012f70 <_dtoa_r>
 8011c6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011c70:	4607      	mov	r7, r0
 8011c72:	d102      	bne.n	8011c7a <__cvt+0x66>
 8011c74:	f019 0f01 	tst.w	r9, #1
 8011c78:	d022      	beq.n	8011cc0 <__cvt+0xac>
 8011c7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011c7e:	eb07 0906 	add.w	r9, r7, r6
 8011c82:	d110      	bne.n	8011ca6 <__cvt+0x92>
 8011c84:	783b      	ldrb	r3, [r7, #0]
 8011c86:	2b30      	cmp	r3, #48	; 0x30
 8011c88:	d10a      	bne.n	8011ca0 <__cvt+0x8c>
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	4620      	mov	r0, r4
 8011c90:	4629      	mov	r1, r5
 8011c92:	f7ee ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c96:	b918      	cbnz	r0, 8011ca0 <__cvt+0x8c>
 8011c98:	f1c6 0601 	rsb	r6, r6, #1
 8011c9c:	f8ca 6000 	str.w	r6, [sl]
 8011ca0:	f8da 3000 	ldr.w	r3, [sl]
 8011ca4:	4499      	add	r9, r3
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	2300      	movs	r3, #0
 8011caa:	4620      	mov	r0, r4
 8011cac:	4629      	mov	r1, r5
 8011cae:	f7ee ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011cb2:	b108      	cbz	r0, 8011cb8 <__cvt+0xa4>
 8011cb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8011cb8:	2230      	movs	r2, #48	; 0x30
 8011cba:	9b03      	ldr	r3, [sp, #12]
 8011cbc:	454b      	cmp	r3, r9
 8011cbe:	d307      	bcc.n	8011cd0 <__cvt+0xbc>
 8011cc0:	9b03      	ldr	r3, [sp, #12]
 8011cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011cc4:	1bdb      	subs	r3, r3, r7
 8011cc6:	4638      	mov	r0, r7
 8011cc8:	6013      	str	r3, [r2, #0]
 8011cca:	b004      	add	sp, #16
 8011ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cd0:	1c59      	adds	r1, r3, #1
 8011cd2:	9103      	str	r1, [sp, #12]
 8011cd4:	701a      	strb	r2, [r3, #0]
 8011cd6:	e7f0      	b.n	8011cba <__cvt+0xa6>

08011cd8 <__exponent>:
 8011cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011cda:	4603      	mov	r3, r0
 8011cdc:	2900      	cmp	r1, #0
 8011cde:	bfb8      	it	lt
 8011ce0:	4249      	neglt	r1, r1
 8011ce2:	f803 2b02 	strb.w	r2, [r3], #2
 8011ce6:	bfb4      	ite	lt
 8011ce8:	222d      	movlt	r2, #45	; 0x2d
 8011cea:	222b      	movge	r2, #43	; 0x2b
 8011cec:	2909      	cmp	r1, #9
 8011cee:	7042      	strb	r2, [r0, #1]
 8011cf0:	dd2a      	ble.n	8011d48 <__exponent+0x70>
 8011cf2:	f10d 0207 	add.w	r2, sp, #7
 8011cf6:	4617      	mov	r7, r2
 8011cf8:	260a      	movs	r6, #10
 8011cfa:	4694      	mov	ip, r2
 8011cfc:	fb91 f5f6 	sdiv	r5, r1, r6
 8011d00:	fb06 1415 	mls	r4, r6, r5, r1
 8011d04:	3430      	adds	r4, #48	; 0x30
 8011d06:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011d0a:	460c      	mov	r4, r1
 8011d0c:	2c63      	cmp	r4, #99	; 0x63
 8011d0e:	f102 32ff 	add.w	r2, r2, #4294967295
 8011d12:	4629      	mov	r1, r5
 8011d14:	dcf1      	bgt.n	8011cfa <__exponent+0x22>
 8011d16:	3130      	adds	r1, #48	; 0x30
 8011d18:	f1ac 0402 	sub.w	r4, ip, #2
 8011d1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011d20:	1c41      	adds	r1, r0, #1
 8011d22:	4622      	mov	r2, r4
 8011d24:	42ba      	cmp	r2, r7
 8011d26:	d30a      	bcc.n	8011d3e <__exponent+0x66>
 8011d28:	f10d 0209 	add.w	r2, sp, #9
 8011d2c:	eba2 020c 	sub.w	r2, r2, ip
 8011d30:	42bc      	cmp	r4, r7
 8011d32:	bf88      	it	hi
 8011d34:	2200      	movhi	r2, #0
 8011d36:	4413      	add	r3, r2
 8011d38:	1a18      	subs	r0, r3, r0
 8011d3a:	b003      	add	sp, #12
 8011d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d3e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011d42:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011d46:	e7ed      	b.n	8011d24 <__exponent+0x4c>
 8011d48:	2330      	movs	r3, #48	; 0x30
 8011d4a:	3130      	adds	r1, #48	; 0x30
 8011d4c:	7083      	strb	r3, [r0, #2]
 8011d4e:	70c1      	strb	r1, [r0, #3]
 8011d50:	1d03      	adds	r3, r0, #4
 8011d52:	e7f1      	b.n	8011d38 <__exponent+0x60>

08011d54 <_printf_float>:
 8011d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d58:	ed2d 8b02 	vpush	{d8}
 8011d5c:	b08d      	sub	sp, #52	; 0x34
 8011d5e:	460c      	mov	r4, r1
 8011d60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011d64:	4616      	mov	r6, r2
 8011d66:	461f      	mov	r7, r3
 8011d68:	4605      	mov	r5, r0
 8011d6a:	f000 ffaf 	bl	8012ccc <_localeconv_r>
 8011d6e:	f8d0 a000 	ldr.w	sl, [r0]
 8011d72:	4650      	mov	r0, sl
 8011d74:	f7ee fa7c 	bl	8000270 <strlen>
 8011d78:	2300      	movs	r3, #0
 8011d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8011d7c:	6823      	ldr	r3, [r4, #0]
 8011d7e:	9305      	str	r3, [sp, #20]
 8011d80:	f8d8 3000 	ldr.w	r3, [r8]
 8011d84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011d88:	3307      	adds	r3, #7
 8011d8a:	f023 0307 	bic.w	r3, r3, #7
 8011d8e:	f103 0208 	add.w	r2, r3, #8
 8011d92:	f8c8 2000 	str.w	r2, [r8]
 8011d96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011d9e:	9307      	str	r3, [sp, #28]
 8011da0:	f8cd 8018 	str.w	r8, [sp, #24]
 8011da4:	ee08 0a10 	vmov	s16, r0
 8011da8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011dac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011db0:	4b9e      	ldr	r3, [pc, #632]	; (801202c <_printf_float+0x2d8>)
 8011db2:	f04f 32ff 	mov.w	r2, #4294967295
 8011db6:	f7ee feb9 	bl	8000b2c <__aeabi_dcmpun>
 8011dba:	bb88      	cbnz	r0, 8011e20 <_printf_float+0xcc>
 8011dbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011dc0:	4b9a      	ldr	r3, [pc, #616]	; (801202c <_printf_float+0x2d8>)
 8011dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc6:	f7ee fe93 	bl	8000af0 <__aeabi_dcmple>
 8011dca:	bb48      	cbnz	r0, 8011e20 <_printf_float+0xcc>
 8011dcc:	2200      	movs	r2, #0
 8011dce:	2300      	movs	r3, #0
 8011dd0:	4640      	mov	r0, r8
 8011dd2:	4649      	mov	r1, r9
 8011dd4:	f7ee fe82 	bl	8000adc <__aeabi_dcmplt>
 8011dd8:	b110      	cbz	r0, 8011de0 <_printf_float+0x8c>
 8011dda:	232d      	movs	r3, #45	; 0x2d
 8011ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011de0:	4a93      	ldr	r2, [pc, #588]	; (8012030 <_printf_float+0x2dc>)
 8011de2:	4b94      	ldr	r3, [pc, #592]	; (8012034 <_printf_float+0x2e0>)
 8011de4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011de8:	bf94      	ite	ls
 8011dea:	4690      	movls	r8, r2
 8011dec:	4698      	movhi	r8, r3
 8011dee:	2303      	movs	r3, #3
 8011df0:	6123      	str	r3, [r4, #16]
 8011df2:	9b05      	ldr	r3, [sp, #20]
 8011df4:	f023 0304 	bic.w	r3, r3, #4
 8011df8:	6023      	str	r3, [r4, #0]
 8011dfa:	f04f 0900 	mov.w	r9, #0
 8011dfe:	9700      	str	r7, [sp, #0]
 8011e00:	4633      	mov	r3, r6
 8011e02:	aa0b      	add	r2, sp, #44	; 0x2c
 8011e04:	4621      	mov	r1, r4
 8011e06:	4628      	mov	r0, r5
 8011e08:	f000 f9da 	bl	80121c0 <_printf_common>
 8011e0c:	3001      	adds	r0, #1
 8011e0e:	f040 8090 	bne.w	8011f32 <_printf_float+0x1de>
 8011e12:	f04f 30ff 	mov.w	r0, #4294967295
 8011e16:	b00d      	add	sp, #52	; 0x34
 8011e18:	ecbd 8b02 	vpop	{d8}
 8011e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e20:	4642      	mov	r2, r8
 8011e22:	464b      	mov	r3, r9
 8011e24:	4640      	mov	r0, r8
 8011e26:	4649      	mov	r1, r9
 8011e28:	f7ee fe80 	bl	8000b2c <__aeabi_dcmpun>
 8011e2c:	b140      	cbz	r0, 8011e40 <_printf_float+0xec>
 8011e2e:	464b      	mov	r3, r9
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	bfbc      	itt	lt
 8011e34:	232d      	movlt	r3, #45	; 0x2d
 8011e36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011e3a:	4a7f      	ldr	r2, [pc, #508]	; (8012038 <_printf_float+0x2e4>)
 8011e3c:	4b7f      	ldr	r3, [pc, #508]	; (801203c <_printf_float+0x2e8>)
 8011e3e:	e7d1      	b.n	8011de4 <_printf_float+0x90>
 8011e40:	6863      	ldr	r3, [r4, #4]
 8011e42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011e46:	9206      	str	r2, [sp, #24]
 8011e48:	1c5a      	adds	r2, r3, #1
 8011e4a:	d13f      	bne.n	8011ecc <_printf_float+0x178>
 8011e4c:	2306      	movs	r3, #6
 8011e4e:	6063      	str	r3, [r4, #4]
 8011e50:	9b05      	ldr	r3, [sp, #20]
 8011e52:	6861      	ldr	r1, [r4, #4]
 8011e54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011e58:	2300      	movs	r3, #0
 8011e5a:	9303      	str	r3, [sp, #12]
 8011e5c:	ab0a      	add	r3, sp, #40	; 0x28
 8011e5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011e62:	ab09      	add	r3, sp, #36	; 0x24
 8011e64:	ec49 8b10 	vmov	d0, r8, r9
 8011e68:	9300      	str	r3, [sp, #0]
 8011e6a:	6022      	str	r2, [r4, #0]
 8011e6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011e70:	4628      	mov	r0, r5
 8011e72:	f7ff fecf 	bl	8011c14 <__cvt>
 8011e76:	9b06      	ldr	r3, [sp, #24]
 8011e78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e7a:	2b47      	cmp	r3, #71	; 0x47
 8011e7c:	4680      	mov	r8, r0
 8011e7e:	d108      	bne.n	8011e92 <_printf_float+0x13e>
 8011e80:	1cc8      	adds	r0, r1, #3
 8011e82:	db02      	blt.n	8011e8a <_printf_float+0x136>
 8011e84:	6863      	ldr	r3, [r4, #4]
 8011e86:	4299      	cmp	r1, r3
 8011e88:	dd41      	ble.n	8011f0e <_printf_float+0x1ba>
 8011e8a:	f1ab 0302 	sub.w	r3, fp, #2
 8011e8e:	fa5f fb83 	uxtb.w	fp, r3
 8011e92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011e96:	d820      	bhi.n	8011eda <_printf_float+0x186>
 8011e98:	3901      	subs	r1, #1
 8011e9a:	465a      	mov	r2, fp
 8011e9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011ea0:	9109      	str	r1, [sp, #36]	; 0x24
 8011ea2:	f7ff ff19 	bl	8011cd8 <__exponent>
 8011ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ea8:	1813      	adds	r3, r2, r0
 8011eaa:	2a01      	cmp	r2, #1
 8011eac:	4681      	mov	r9, r0
 8011eae:	6123      	str	r3, [r4, #16]
 8011eb0:	dc02      	bgt.n	8011eb8 <_printf_float+0x164>
 8011eb2:	6822      	ldr	r2, [r4, #0]
 8011eb4:	07d2      	lsls	r2, r2, #31
 8011eb6:	d501      	bpl.n	8011ebc <_printf_float+0x168>
 8011eb8:	3301      	adds	r3, #1
 8011eba:	6123      	str	r3, [r4, #16]
 8011ebc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d09c      	beq.n	8011dfe <_printf_float+0xaa>
 8011ec4:	232d      	movs	r3, #45	; 0x2d
 8011ec6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011eca:	e798      	b.n	8011dfe <_printf_float+0xaa>
 8011ecc:	9a06      	ldr	r2, [sp, #24]
 8011ece:	2a47      	cmp	r2, #71	; 0x47
 8011ed0:	d1be      	bne.n	8011e50 <_printf_float+0xfc>
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d1bc      	bne.n	8011e50 <_printf_float+0xfc>
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	e7b9      	b.n	8011e4e <_printf_float+0xfa>
 8011eda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011ede:	d118      	bne.n	8011f12 <_printf_float+0x1be>
 8011ee0:	2900      	cmp	r1, #0
 8011ee2:	6863      	ldr	r3, [r4, #4]
 8011ee4:	dd0b      	ble.n	8011efe <_printf_float+0x1aa>
 8011ee6:	6121      	str	r1, [r4, #16]
 8011ee8:	b913      	cbnz	r3, 8011ef0 <_printf_float+0x19c>
 8011eea:	6822      	ldr	r2, [r4, #0]
 8011eec:	07d0      	lsls	r0, r2, #31
 8011eee:	d502      	bpl.n	8011ef6 <_printf_float+0x1a2>
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	440b      	add	r3, r1
 8011ef4:	6123      	str	r3, [r4, #16]
 8011ef6:	65a1      	str	r1, [r4, #88]	; 0x58
 8011ef8:	f04f 0900 	mov.w	r9, #0
 8011efc:	e7de      	b.n	8011ebc <_printf_float+0x168>
 8011efe:	b913      	cbnz	r3, 8011f06 <_printf_float+0x1b2>
 8011f00:	6822      	ldr	r2, [r4, #0]
 8011f02:	07d2      	lsls	r2, r2, #31
 8011f04:	d501      	bpl.n	8011f0a <_printf_float+0x1b6>
 8011f06:	3302      	adds	r3, #2
 8011f08:	e7f4      	b.n	8011ef4 <_printf_float+0x1a0>
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	e7f2      	b.n	8011ef4 <_printf_float+0x1a0>
 8011f0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f14:	4299      	cmp	r1, r3
 8011f16:	db05      	blt.n	8011f24 <_printf_float+0x1d0>
 8011f18:	6823      	ldr	r3, [r4, #0]
 8011f1a:	6121      	str	r1, [r4, #16]
 8011f1c:	07d8      	lsls	r0, r3, #31
 8011f1e:	d5ea      	bpl.n	8011ef6 <_printf_float+0x1a2>
 8011f20:	1c4b      	adds	r3, r1, #1
 8011f22:	e7e7      	b.n	8011ef4 <_printf_float+0x1a0>
 8011f24:	2900      	cmp	r1, #0
 8011f26:	bfd4      	ite	le
 8011f28:	f1c1 0202 	rsble	r2, r1, #2
 8011f2c:	2201      	movgt	r2, #1
 8011f2e:	4413      	add	r3, r2
 8011f30:	e7e0      	b.n	8011ef4 <_printf_float+0x1a0>
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	055a      	lsls	r2, r3, #21
 8011f36:	d407      	bmi.n	8011f48 <_printf_float+0x1f4>
 8011f38:	6923      	ldr	r3, [r4, #16]
 8011f3a:	4642      	mov	r2, r8
 8011f3c:	4631      	mov	r1, r6
 8011f3e:	4628      	mov	r0, r5
 8011f40:	47b8      	blx	r7
 8011f42:	3001      	adds	r0, #1
 8011f44:	d12c      	bne.n	8011fa0 <_printf_float+0x24c>
 8011f46:	e764      	b.n	8011e12 <_printf_float+0xbe>
 8011f48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011f4c:	f240 80e0 	bls.w	8012110 <_printf_float+0x3bc>
 8011f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011f54:	2200      	movs	r2, #0
 8011f56:	2300      	movs	r3, #0
 8011f58:	f7ee fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	d034      	beq.n	8011fca <_printf_float+0x276>
 8011f60:	4a37      	ldr	r2, [pc, #220]	; (8012040 <_printf_float+0x2ec>)
 8011f62:	2301      	movs	r3, #1
 8011f64:	4631      	mov	r1, r6
 8011f66:	4628      	mov	r0, r5
 8011f68:	47b8      	blx	r7
 8011f6a:	3001      	adds	r0, #1
 8011f6c:	f43f af51 	beq.w	8011e12 <_printf_float+0xbe>
 8011f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f74:	429a      	cmp	r2, r3
 8011f76:	db02      	blt.n	8011f7e <_printf_float+0x22a>
 8011f78:	6823      	ldr	r3, [r4, #0]
 8011f7a:	07d8      	lsls	r0, r3, #31
 8011f7c:	d510      	bpl.n	8011fa0 <_printf_float+0x24c>
 8011f7e:	ee18 3a10 	vmov	r3, s16
 8011f82:	4652      	mov	r2, sl
 8011f84:	4631      	mov	r1, r6
 8011f86:	4628      	mov	r0, r5
 8011f88:	47b8      	blx	r7
 8011f8a:	3001      	adds	r0, #1
 8011f8c:	f43f af41 	beq.w	8011e12 <_printf_float+0xbe>
 8011f90:	f04f 0800 	mov.w	r8, #0
 8011f94:	f104 091a 	add.w	r9, r4, #26
 8011f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f9a:	3b01      	subs	r3, #1
 8011f9c:	4543      	cmp	r3, r8
 8011f9e:	dc09      	bgt.n	8011fb4 <_printf_float+0x260>
 8011fa0:	6823      	ldr	r3, [r4, #0]
 8011fa2:	079b      	lsls	r3, r3, #30
 8011fa4:	f100 8107 	bmi.w	80121b6 <_printf_float+0x462>
 8011fa8:	68e0      	ldr	r0, [r4, #12]
 8011faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fac:	4298      	cmp	r0, r3
 8011fae:	bfb8      	it	lt
 8011fb0:	4618      	movlt	r0, r3
 8011fb2:	e730      	b.n	8011e16 <_printf_float+0xc2>
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	464a      	mov	r2, r9
 8011fb8:	4631      	mov	r1, r6
 8011fba:	4628      	mov	r0, r5
 8011fbc:	47b8      	blx	r7
 8011fbe:	3001      	adds	r0, #1
 8011fc0:	f43f af27 	beq.w	8011e12 <_printf_float+0xbe>
 8011fc4:	f108 0801 	add.w	r8, r8, #1
 8011fc8:	e7e6      	b.n	8011f98 <_printf_float+0x244>
 8011fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	dc39      	bgt.n	8012044 <_printf_float+0x2f0>
 8011fd0:	4a1b      	ldr	r2, [pc, #108]	; (8012040 <_printf_float+0x2ec>)
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	4631      	mov	r1, r6
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	47b8      	blx	r7
 8011fda:	3001      	adds	r0, #1
 8011fdc:	f43f af19 	beq.w	8011e12 <_printf_float+0xbe>
 8011fe0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011fe4:	4313      	orrs	r3, r2
 8011fe6:	d102      	bne.n	8011fee <_printf_float+0x29a>
 8011fe8:	6823      	ldr	r3, [r4, #0]
 8011fea:	07d9      	lsls	r1, r3, #31
 8011fec:	d5d8      	bpl.n	8011fa0 <_printf_float+0x24c>
 8011fee:	ee18 3a10 	vmov	r3, s16
 8011ff2:	4652      	mov	r2, sl
 8011ff4:	4631      	mov	r1, r6
 8011ff6:	4628      	mov	r0, r5
 8011ff8:	47b8      	blx	r7
 8011ffa:	3001      	adds	r0, #1
 8011ffc:	f43f af09 	beq.w	8011e12 <_printf_float+0xbe>
 8012000:	f04f 0900 	mov.w	r9, #0
 8012004:	f104 0a1a 	add.w	sl, r4, #26
 8012008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801200a:	425b      	negs	r3, r3
 801200c:	454b      	cmp	r3, r9
 801200e:	dc01      	bgt.n	8012014 <_printf_float+0x2c0>
 8012010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012012:	e792      	b.n	8011f3a <_printf_float+0x1e6>
 8012014:	2301      	movs	r3, #1
 8012016:	4652      	mov	r2, sl
 8012018:	4631      	mov	r1, r6
 801201a:	4628      	mov	r0, r5
 801201c:	47b8      	blx	r7
 801201e:	3001      	adds	r0, #1
 8012020:	f43f aef7 	beq.w	8011e12 <_printf_float+0xbe>
 8012024:	f109 0901 	add.w	r9, r9, #1
 8012028:	e7ee      	b.n	8012008 <_printf_float+0x2b4>
 801202a:	bf00      	nop
 801202c:	7fefffff 	.word	0x7fefffff
 8012030:	080189e1 	.word	0x080189e1
 8012034:	080189e5 	.word	0x080189e5
 8012038:	080189e9 	.word	0x080189e9
 801203c:	080189ed 	.word	0x080189ed
 8012040:	080189f1 	.word	0x080189f1
 8012044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012046:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012048:	429a      	cmp	r2, r3
 801204a:	bfa8      	it	ge
 801204c:	461a      	movge	r2, r3
 801204e:	2a00      	cmp	r2, #0
 8012050:	4691      	mov	r9, r2
 8012052:	dc37      	bgt.n	80120c4 <_printf_float+0x370>
 8012054:	f04f 0b00 	mov.w	fp, #0
 8012058:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801205c:	f104 021a 	add.w	r2, r4, #26
 8012060:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012062:	9305      	str	r3, [sp, #20]
 8012064:	eba3 0309 	sub.w	r3, r3, r9
 8012068:	455b      	cmp	r3, fp
 801206a:	dc33      	bgt.n	80120d4 <_printf_float+0x380>
 801206c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012070:	429a      	cmp	r2, r3
 8012072:	db3b      	blt.n	80120ec <_printf_float+0x398>
 8012074:	6823      	ldr	r3, [r4, #0]
 8012076:	07da      	lsls	r2, r3, #31
 8012078:	d438      	bmi.n	80120ec <_printf_float+0x398>
 801207a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801207e:	eba2 0903 	sub.w	r9, r2, r3
 8012082:	9b05      	ldr	r3, [sp, #20]
 8012084:	1ad2      	subs	r2, r2, r3
 8012086:	4591      	cmp	r9, r2
 8012088:	bfa8      	it	ge
 801208a:	4691      	movge	r9, r2
 801208c:	f1b9 0f00 	cmp.w	r9, #0
 8012090:	dc35      	bgt.n	80120fe <_printf_float+0x3aa>
 8012092:	f04f 0800 	mov.w	r8, #0
 8012096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801209a:	f104 0a1a 	add.w	sl, r4, #26
 801209e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80120a2:	1a9b      	subs	r3, r3, r2
 80120a4:	eba3 0309 	sub.w	r3, r3, r9
 80120a8:	4543      	cmp	r3, r8
 80120aa:	f77f af79 	ble.w	8011fa0 <_printf_float+0x24c>
 80120ae:	2301      	movs	r3, #1
 80120b0:	4652      	mov	r2, sl
 80120b2:	4631      	mov	r1, r6
 80120b4:	4628      	mov	r0, r5
 80120b6:	47b8      	blx	r7
 80120b8:	3001      	adds	r0, #1
 80120ba:	f43f aeaa 	beq.w	8011e12 <_printf_float+0xbe>
 80120be:	f108 0801 	add.w	r8, r8, #1
 80120c2:	e7ec      	b.n	801209e <_printf_float+0x34a>
 80120c4:	4613      	mov	r3, r2
 80120c6:	4631      	mov	r1, r6
 80120c8:	4642      	mov	r2, r8
 80120ca:	4628      	mov	r0, r5
 80120cc:	47b8      	blx	r7
 80120ce:	3001      	adds	r0, #1
 80120d0:	d1c0      	bne.n	8012054 <_printf_float+0x300>
 80120d2:	e69e      	b.n	8011e12 <_printf_float+0xbe>
 80120d4:	2301      	movs	r3, #1
 80120d6:	4631      	mov	r1, r6
 80120d8:	4628      	mov	r0, r5
 80120da:	9205      	str	r2, [sp, #20]
 80120dc:	47b8      	blx	r7
 80120de:	3001      	adds	r0, #1
 80120e0:	f43f ae97 	beq.w	8011e12 <_printf_float+0xbe>
 80120e4:	9a05      	ldr	r2, [sp, #20]
 80120e6:	f10b 0b01 	add.w	fp, fp, #1
 80120ea:	e7b9      	b.n	8012060 <_printf_float+0x30c>
 80120ec:	ee18 3a10 	vmov	r3, s16
 80120f0:	4652      	mov	r2, sl
 80120f2:	4631      	mov	r1, r6
 80120f4:	4628      	mov	r0, r5
 80120f6:	47b8      	blx	r7
 80120f8:	3001      	adds	r0, #1
 80120fa:	d1be      	bne.n	801207a <_printf_float+0x326>
 80120fc:	e689      	b.n	8011e12 <_printf_float+0xbe>
 80120fe:	9a05      	ldr	r2, [sp, #20]
 8012100:	464b      	mov	r3, r9
 8012102:	4442      	add	r2, r8
 8012104:	4631      	mov	r1, r6
 8012106:	4628      	mov	r0, r5
 8012108:	47b8      	blx	r7
 801210a:	3001      	adds	r0, #1
 801210c:	d1c1      	bne.n	8012092 <_printf_float+0x33e>
 801210e:	e680      	b.n	8011e12 <_printf_float+0xbe>
 8012110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012112:	2a01      	cmp	r2, #1
 8012114:	dc01      	bgt.n	801211a <_printf_float+0x3c6>
 8012116:	07db      	lsls	r3, r3, #31
 8012118:	d53a      	bpl.n	8012190 <_printf_float+0x43c>
 801211a:	2301      	movs	r3, #1
 801211c:	4642      	mov	r2, r8
 801211e:	4631      	mov	r1, r6
 8012120:	4628      	mov	r0, r5
 8012122:	47b8      	blx	r7
 8012124:	3001      	adds	r0, #1
 8012126:	f43f ae74 	beq.w	8011e12 <_printf_float+0xbe>
 801212a:	ee18 3a10 	vmov	r3, s16
 801212e:	4652      	mov	r2, sl
 8012130:	4631      	mov	r1, r6
 8012132:	4628      	mov	r0, r5
 8012134:	47b8      	blx	r7
 8012136:	3001      	adds	r0, #1
 8012138:	f43f ae6b 	beq.w	8011e12 <_printf_float+0xbe>
 801213c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012140:	2200      	movs	r2, #0
 8012142:	2300      	movs	r3, #0
 8012144:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012148:	f7ee fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 801214c:	b9d8      	cbnz	r0, 8012186 <_printf_float+0x432>
 801214e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012152:	f108 0201 	add.w	r2, r8, #1
 8012156:	4631      	mov	r1, r6
 8012158:	4628      	mov	r0, r5
 801215a:	47b8      	blx	r7
 801215c:	3001      	adds	r0, #1
 801215e:	d10e      	bne.n	801217e <_printf_float+0x42a>
 8012160:	e657      	b.n	8011e12 <_printf_float+0xbe>
 8012162:	2301      	movs	r3, #1
 8012164:	4652      	mov	r2, sl
 8012166:	4631      	mov	r1, r6
 8012168:	4628      	mov	r0, r5
 801216a:	47b8      	blx	r7
 801216c:	3001      	adds	r0, #1
 801216e:	f43f ae50 	beq.w	8011e12 <_printf_float+0xbe>
 8012172:	f108 0801 	add.w	r8, r8, #1
 8012176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012178:	3b01      	subs	r3, #1
 801217a:	4543      	cmp	r3, r8
 801217c:	dcf1      	bgt.n	8012162 <_printf_float+0x40e>
 801217e:	464b      	mov	r3, r9
 8012180:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012184:	e6da      	b.n	8011f3c <_printf_float+0x1e8>
 8012186:	f04f 0800 	mov.w	r8, #0
 801218a:	f104 0a1a 	add.w	sl, r4, #26
 801218e:	e7f2      	b.n	8012176 <_printf_float+0x422>
 8012190:	2301      	movs	r3, #1
 8012192:	4642      	mov	r2, r8
 8012194:	e7df      	b.n	8012156 <_printf_float+0x402>
 8012196:	2301      	movs	r3, #1
 8012198:	464a      	mov	r2, r9
 801219a:	4631      	mov	r1, r6
 801219c:	4628      	mov	r0, r5
 801219e:	47b8      	blx	r7
 80121a0:	3001      	adds	r0, #1
 80121a2:	f43f ae36 	beq.w	8011e12 <_printf_float+0xbe>
 80121a6:	f108 0801 	add.w	r8, r8, #1
 80121aa:	68e3      	ldr	r3, [r4, #12]
 80121ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80121ae:	1a5b      	subs	r3, r3, r1
 80121b0:	4543      	cmp	r3, r8
 80121b2:	dcf0      	bgt.n	8012196 <_printf_float+0x442>
 80121b4:	e6f8      	b.n	8011fa8 <_printf_float+0x254>
 80121b6:	f04f 0800 	mov.w	r8, #0
 80121ba:	f104 0919 	add.w	r9, r4, #25
 80121be:	e7f4      	b.n	80121aa <_printf_float+0x456>

080121c0 <_printf_common>:
 80121c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121c4:	4616      	mov	r6, r2
 80121c6:	4699      	mov	r9, r3
 80121c8:	688a      	ldr	r2, [r1, #8]
 80121ca:	690b      	ldr	r3, [r1, #16]
 80121cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80121d0:	4293      	cmp	r3, r2
 80121d2:	bfb8      	it	lt
 80121d4:	4613      	movlt	r3, r2
 80121d6:	6033      	str	r3, [r6, #0]
 80121d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80121dc:	4607      	mov	r7, r0
 80121de:	460c      	mov	r4, r1
 80121e0:	b10a      	cbz	r2, 80121e6 <_printf_common+0x26>
 80121e2:	3301      	adds	r3, #1
 80121e4:	6033      	str	r3, [r6, #0]
 80121e6:	6823      	ldr	r3, [r4, #0]
 80121e8:	0699      	lsls	r1, r3, #26
 80121ea:	bf42      	ittt	mi
 80121ec:	6833      	ldrmi	r3, [r6, #0]
 80121ee:	3302      	addmi	r3, #2
 80121f0:	6033      	strmi	r3, [r6, #0]
 80121f2:	6825      	ldr	r5, [r4, #0]
 80121f4:	f015 0506 	ands.w	r5, r5, #6
 80121f8:	d106      	bne.n	8012208 <_printf_common+0x48>
 80121fa:	f104 0a19 	add.w	sl, r4, #25
 80121fe:	68e3      	ldr	r3, [r4, #12]
 8012200:	6832      	ldr	r2, [r6, #0]
 8012202:	1a9b      	subs	r3, r3, r2
 8012204:	42ab      	cmp	r3, r5
 8012206:	dc26      	bgt.n	8012256 <_printf_common+0x96>
 8012208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801220c:	1e13      	subs	r3, r2, #0
 801220e:	6822      	ldr	r2, [r4, #0]
 8012210:	bf18      	it	ne
 8012212:	2301      	movne	r3, #1
 8012214:	0692      	lsls	r2, r2, #26
 8012216:	d42b      	bmi.n	8012270 <_printf_common+0xb0>
 8012218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801221c:	4649      	mov	r1, r9
 801221e:	4638      	mov	r0, r7
 8012220:	47c0      	blx	r8
 8012222:	3001      	adds	r0, #1
 8012224:	d01e      	beq.n	8012264 <_printf_common+0xa4>
 8012226:	6823      	ldr	r3, [r4, #0]
 8012228:	6922      	ldr	r2, [r4, #16]
 801222a:	f003 0306 	and.w	r3, r3, #6
 801222e:	2b04      	cmp	r3, #4
 8012230:	bf02      	ittt	eq
 8012232:	68e5      	ldreq	r5, [r4, #12]
 8012234:	6833      	ldreq	r3, [r6, #0]
 8012236:	1aed      	subeq	r5, r5, r3
 8012238:	68a3      	ldr	r3, [r4, #8]
 801223a:	bf0c      	ite	eq
 801223c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012240:	2500      	movne	r5, #0
 8012242:	4293      	cmp	r3, r2
 8012244:	bfc4      	itt	gt
 8012246:	1a9b      	subgt	r3, r3, r2
 8012248:	18ed      	addgt	r5, r5, r3
 801224a:	2600      	movs	r6, #0
 801224c:	341a      	adds	r4, #26
 801224e:	42b5      	cmp	r5, r6
 8012250:	d11a      	bne.n	8012288 <_printf_common+0xc8>
 8012252:	2000      	movs	r0, #0
 8012254:	e008      	b.n	8012268 <_printf_common+0xa8>
 8012256:	2301      	movs	r3, #1
 8012258:	4652      	mov	r2, sl
 801225a:	4649      	mov	r1, r9
 801225c:	4638      	mov	r0, r7
 801225e:	47c0      	blx	r8
 8012260:	3001      	adds	r0, #1
 8012262:	d103      	bne.n	801226c <_printf_common+0xac>
 8012264:	f04f 30ff 	mov.w	r0, #4294967295
 8012268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801226c:	3501      	adds	r5, #1
 801226e:	e7c6      	b.n	80121fe <_printf_common+0x3e>
 8012270:	18e1      	adds	r1, r4, r3
 8012272:	1c5a      	adds	r2, r3, #1
 8012274:	2030      	movs	r0, #48	; 0x30
 8012276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801227a:	4422      	add	r2, r4
 801227c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012284:	3302      	adds	r3, #2
 8012286:	e7c7      	b.n	8012218 <_printf_common+0x58>
 8012288:	2301      	movs	r3, #1
 801228a:	4622      	mov	r2, r4
 801228c:	4649      	mov	r1, r9
 801228e:	4638      	mov	r0, r7
 8012290:	47c0      	blx	r8
 8012292:	3001      	adds	r0, #1
 8012294:	d0e6      	beq.n	8012264 <_printf_common+0xa4>
 8012296:	3601      	adds	r6, #1
 8012298:	e7d9      	b.n	801224e <_printf_common+0x8e>
	...

0801229c <_printf_i>:
 801229c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80122a0:	7e0f      	ldrb	r7, [r1, #24]
 80122a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80122a4:	2f78      	cmp	r7, #120	; 0x78
 80122a6:	4691      	mov	r9, r2
 80122a8:	4680      	mov	r8, r0
 80122aa:	460c      	mov	r4, r1
 80122ac:	469a      	mov	sl, r3
 80122ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80122b2:	d807      	bhi.n	80122c4 <_printf_i+0x28>
 80122b4:	2f62      	cmp	r7, #98	; 0x62
 80122b6:	d80a      	bhi.n	80122ce <_printf_i+0x32>
 80122b8:	2f00      	cmp	r7, #0
 80122ba:	f000 80d4 	beq.w	8012466 <_printf_i+0x1ca>
 80122be:	2f58      	cmp	r7, #88	; 0x58
 80122c0:	f000 80c0 	beq.w	8012444 <_printf_i+0x1a8>
 80122c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80122cc:	e03a      	b.n	8012344 <_printf_i+0xa8>
 80122ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80122d2:	2b15      	cmp	r3, #21
 80122d4:	d8f6      	bhi.n	80122c4 <_printf_i+0x28>
 80122d6:	a101      	add	r1, pc, #4	; (adr r1, 80122dc <_printf_i+0x40>)
 80122d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80122dc:	08012335 	.word	0x08012335
 80122e0:	08012349 	.word	0x08012349
 80122e4:	080122c5 	.word	0x080122c5
 80122e8:	080122c5 	.word	0x080122c5
 80122ec:	080122c5 	.word	0x080122c5
 80122f0:	080122c5 	.word	0x080122c5
 80122f4:	08012349 	.word	0x08012349
 80122f8:	080122c5 	.word	0x080122c5
 80122fc:	080122c5 	.word	0x080122c5
 8012300:	080122c5 	.word	0x080122c5
 8012304:	080122c5 	.word	0x080122c5
 8012308:	0801244d 	.word	0x0801244d
 801230c:	08012375 	.word	0x08012375
 8012310:	08012407 	.word	0x08012407
 8012314:	080122c5 	.word	0x080122c5
 8012318:	080122c5 	.word	0x080122c5
 801231c:	0801246f 	.word	0x0801246f
 8012320:	080122c5 	.word	0x080122c5
 8012324:	08012375 	.word	0x08012375
 8012328:	080122c5 	.word	0x080122c5
 801232c:	080122c5 	.word	0x080122c5
 8012330:	0801240f 	.word	0x0801240f
 8012334:	682b      	ldr	r3, [r5, #0]
 8012336:	1d1a      	adds	r2, r3, #4
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	602a      	str	r2, [r5, #0]
 801233c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012344:	2301      	movs	r3, #1
 8012346:	e09f      	b.n	8012488 <_printf_i+0x1ec>
 8012348:	6820      	ldr	r0, [r4, #0]
 801234a:	682b      	ldr	r3, [r5, #0]
 801234c:	0607      	lsls	r7, r0, #24
 801234e:	f103 0104 	add.w	r1, r3, #4
 8012352:	6029      	str	r1, [r5, #0]
 8012354:	d501      	bpl.n	801235a <_printf_i+0xbe>
 8012356:	681e      	ldr	r6, [r3, #0]
 8012358:	e003      	b.n	8012362 <_printf_i+0xc6>
 801235a:	0646      	lsls	r6, r0, #25
 801235c:	d5fb      	bpl.n	8012356 <_printf_i+0xba>
 801235e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012362:	2e00      	cmp	r6, #0
 8012364:	da03      	bge.n	801236e <_printf_i+0xd2>
 8012366:	232d      	movs	r3, #45	; 0x2d
 8012368:	4276      	negs	r6, r6
 801236a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801236e:	485a      	ldr	r0, [pc, #360]	; (80124d8 <_printf_i+0x23c>)
 8012370:	230a      	movs	r3, #10
 8012372:	e012      	b.n	801239a <_printf_i+0xfe>
 8012374:	682b      	ldr	r3, [r5, #0]
 8012376:	6820      	ldr	r0, [r4, #0]
 8012378:	1d19      	adds	r1, r3, #4
 801237a:	6029      	str	r1, [r5, #0]
 801237c:	0605      	lsls	r5, r0, #24
 801237e:	d501      	bpl.n	8012384 <_printf_i+0xe8>
 8012380:	681e      	ldr	r6, [r3, #0]
 8012382:	e002      	b.n	801238a <_printf_i+0xee>
 8012384:	0641      	lsls	r1, r0, #25
 8012386:	d5fb      	bpl.n	8012380 <_printf_i+0xe4>
 8012388:	881e      	ldrh	r6, [r3, #0]
 801238a:	4853      	ldr	r0, [pc, #332]	; (80124d8 <_printf_i+0x23c>)
 801238c:	2f6f      	cmp	r7, #111	; 0x6f
 801238e:	bf0c      	ite	eq
 8012390:	2308      	moveq	r3, #8
 8012392:	230a      	movne	r3, #10
 8012394:	2100      	movs	r1, #0
 8012396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801239a:	6865      	ldr	r5, [r4, #4]
 801239c:	60a5      	str	r5, [r4, #8]
 801239e:	2d00      	cmp	r5, #0
 80123a0:	bfa2      	ittt	ge
 80123a2:	6821      	ldrge	r1, [r4, #0]
 80123a4:	f021 0104 	bicge.w	r1, r1, #4
 80123a8:	6021      	strge	r1, [r4, #0]
 80123aa:	b90e      	cbnz	r6, 80123b0 <_printf_i+0x114>
 80123ac:	2d00      	cmp	r5, #0
 80123ae:	d04b      	beq.n	8012448 <_printf_i+0x1ac>
 80123b0:	4615      	mov	r5, r2
 80123b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80123b6:	fb03 6711 	mls	r7, r3, r1, r6
 80123ba:	5dc7      	ldrb	r7, [r0, r7]
 80123bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80123c0:	4637      	mov	r7, r6
 80123c2:	42bb      	cmp	r3, r7
 80123c4:	460e      	mov	r6, r1
 80123c6:	d9f4      	bls.n	80123b2 <_printf_i+0x116>
 80123c8:	2b08      	cmp	r3, #8
 80123ca:	d10b      	bne.n	80123e4 <_printf_i+0x148>
 80123cc:	6823      	ldr	r3, [r4, #0]
 80123ce:	07de      	lsls	r6, r3, #31
 80123d0:	d508      	bpl.n	80123e4 <_printf_i+0x148>
 80123d2:	6923      	ldr	r3, [r4, #16]
 80123d4:	6861      	ldr	r1, [r4, #4]
 80123d6:	4299      	cmp	r1, r3
 80123d8:	bfde      	ittt	le
 80123da:	2330      	movle	r3, #48	; 0x30
 80123dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80123e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80123e4:	1b52      	subs	r2, r2, r5
 80123e6:	6122      	str	r2, [r4, #16]
 80123e8:	f8cd a000 	str.w	sl, [sp]
 80123ec:	464b      	mov	r3, r9
 80123ee:	aa03      	add	r2, sp, #12
 80123f0:	4621      	mov	r1, r4
 80123f2:	4640      	mov	r0, r8
 80123f4:	f7ff fee4 	bl	80121c0 <_printf_common>
 80123f8:	3001      	adds	r0, #1
 80123fa:	d14a      	bne.n	8012492 <_printf_i+0x1f6>
 80123fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012400:	b004      	add	sp, #16
 8012402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012406:	6823      	ldr	r3, [r4, #0]
 8012408:	f043 0320 	orr.w	r3, r3, #32
 801240c:	6023      	str	r3, [r4, #0]
 801240e:	4833      	ldr	r0, [pc, #204]	; (80124dc <_printf_i+0x240>)
 8012410:	2778      	movs	r7, #120	; 0x78
 8012412:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012416:	6823      	ldr	r3, [r4, #0]
 8012418:	6829      	ldr	r1, [r5, #0]
 801241a:	061f      	lsls	r7, r3, #24
 801241c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012420:	d402      	bmi.n	8012428 <_printf_i+0x18c>
 8012422:	065f      	lsls	r7, r3, #25
 8012424:	bf48      	it	mi
 8012426:	b2b6      	uxthmi	r6, r6
 8012428:	07df      	lsls	r7, r3, #31
 801242a:	bf48      	it	mi
 801242c:	f043 0320 	orrmi.w	r3, r3, #32
 8012430:	6029      	str	r1, [r5, #0]
 8012432:	bf48      	it	mi
 8012434:	6023      	strmi	r3, [r4, #0]
 8012436:	b91e      	cbnz	r6, 8012440 <_printf_i+0x1a4>
 8012438:	6823      	ldr	r3, [r4, #0]
 801243a:	f023 0320 	bic.w	r3, r3, #32
 801243e:	6023      	str	r3, [r4, #0]
 8012440:	2310      	movs	r3, #16
 8012442:	e7a7      	b.n	8012394 <_printf_i+0xf8>
 8012444:	4824      	ldr	r0, [pc, #144]	; (80124d8 <_printf_i+0x23c>)
 8012446:	e7e4      	b.n	8012412 <_printf_i+0x176>
 8012448:	4615      	mov	r5, r2
 801244a:	e7bd      	b.n	80123c8 <_printf_i+0x12c>
 801244c:	682b      	ldr	r3, [r5, #0]
 801244e:	6826      	ldr	r6, [r4, #0]
 8012450:	6961      	ldr	r1, [r4, #20]
 8012452:	1d18      	adds	r0, r3, #4
 8012454:	6028      	str	r0, [r5, #0]
 8012456:	0635      	lsls	r5, r6, #24
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	d501      	bpl.n	8012460 <_printf_i+0x1c4>
 801245c:	6019      	str	r1, [r3, #0]
 801245e:	e002      	b.n	8012466 <_printf_i+0x1ca>
 8012460:	0670      	lsls	r0, r6, #25
 8012462:	d5fb      	bpl.n	801245c <_printf_i+0x1c0>
 8012464:	8019      	strh	r1, [r3, #0]
 8012466:	2300      	movs	r3, #0
 8012468:	6123      	str	r3, [r4, #16]
 801246a:	4615      	mov	r5, r2
 801246c:	e7bc      	b.n	80123e8 <_printf_i+0x14c>
 801246e:	682b      	ldr	r3, [r5, #0]
 8012470:	1d1a      	adds	r2, r3, #4
 8012472:	602a      	str	r2, [r5, #0]
 8012474:	681d      	ldr	r5, [r3, #0]
 8012476:	6862      	ldr	r2, [r4, #4]
 8012478:	2100      	movs	r1, #0
 801247a:	4628      	mov	r0, r5
 801247c:	f7ed fea8 	bl	80001d0 <memchr>
 8012480:	b108      	cbz	r0, 8012486 <_printf_i+0x1ea>
 8012482:	1b40      	subs	r0, r0, r5
 8012484:	6060      	str	r0, [r4, #4]
 8012486:	6863      	ldr	r3, [r4, #4]
 8012488:	6123      	str	r3, [r4, #16]
 801248a:	2300      	movs	r3, #0
 801248c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012490:	e7aa      	b.n	80123e8 <_printf_i+0x14c>
 8012492:	6923      	ldr	r3, [r4, #16]
 8012494:	462a      	mov	r2, r5
 8012496:	4649      	mov	r1, r9
 8012498:	4640      	mov	r0, r8
 801249a:	47d0      	blx	sl
 801249c:	3001      	adds	r0, #1
 801249e:	d0ad      	beq.n	80123fc <_printf_i+0x160>
 80124a0:	6823      	ldr	r3, [r4, #0]
 80124a2:	079b      	lsls	r3, r3, #30
 80124a4:	d413      	bmi.n	80124ce <_printf_i+0x232>
 80124a6:	68e0      	ldr	r0, [r4, #12]
 80124a8:	9b03      	ldr	r3, [sp, #12]
 80124aa:	4298      	cmp	r0, r3
 80124ac:	bfb8      	it	lt
 80124ae:	4618      	movlt	r0, r3
 80124b0:	e7a6      	b.n	8012400 <_printf_i+0x164>
 80124b2:	2301      	movs	r3, #1
 80124b4:	4632      	mov	r2, r6
 80124b6:	4649      	mov	r1, r9
 80124b8:	4640      	mov	r0, r8
 80124ba:	47d0      	blx	sl
 80124bc:	3001      	adds	r0, #1
 80124be:	d09d      	beq.n	80123fc <_printf_i+0x160>
 80124c0:	3501      	adds	r5, #1
 80124c2:	68e3      	ldr	r3, [r4, #12]
 80124c4:	9903      	ldr	r1, [sp, #12]
 80124c6:	1a5b      	subs	r3, r3, r1
 80124c8:	42ab      	cmp	r3, r5
 80124ca:	dcf2      	bgt.n	80124b2 <_printf_i+0x216>
 80124cc:	e7eb      	b.n	80124a6 <_printf_i+0x20a>
 80124ce:	2500      	movs	r5, #0
 80124d0:	f104 0619 	add.w	r6, r4, #25
 80124d4:	e7f5      	b.n	80124c2 <_printf_i+0x226>
 80124d6:	bf00      	nop
 80124d8:	080189f3 	.word	0x080189f3
 80124dc:	08018a04 	.word	0x08018a04

080124e0 <_scanf_float>:
 80124e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e4:	b087      	sub	sp, #28
 80124e6:	4617      	mov	r7, r2
 80124e8:	9303      	str	r3, [sp, #12]
 80124ea:	688b      	ldr	r3, [r1, #8]
 80124ec:	1e5a      	subs	r2, r3, #1
 80124ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80124f2:	bf83      	ittte	hi
 80124f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80124f8:	195b      	addhi	r3, r3, r5
 80124fa:	9302      	strhi	r3, [sp, #8]
 80124fc:	2300      	movls	r3, #0
 80124fe:	bf86      	itte	hi
 8012500:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012504:	608b      	strhi	r3, [r1, #8]
 8012506:	9302      	strls	r3, [sp, #8]
 8012508:	680b      	ldr	r3, [r1, #0]
 801250a:	468b      	mov	fp, r1
 801250c:	2500      	movs	r5, #0
 801250e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012512:	f84b 3b1c 	str.w	r3, [fp], #28
 8012516:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801251a:	4680      	mov	r8, r0
 801251c:	460c      	mov	r4, r1
 801251e:	465e      	mov	r6, fp
 8012520:	46aa      	mov	sl, r5
 8012522:	46a9      	mov	r9, r5
 8012524:	9501      	str	r5, [sp, #4]
 8012526:	68a2      	ldr	r2, [r4, #8]
 8012528:	b152      	cbz	r2, 8012540 <_scanf_float+0x60>
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	2b4e      	cmp	r3, #78	; 0x4e
 8012530:	d864      	bhi.n	80125fc <_scanf_float+0x11c>
 8012532:	2b40      	cmp	r3, #64	; 0x40
 8012534:	d83c      	bhi.n	80125b0 <_scanf_float+0xd0>
 8012536:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801253a:	b2c8      	uxtb	r0, r1
 801253c:	280e      	cmp	r0, #14
 801253e:	d93a      	bls.n	80125b6 <_scanf_float+0xd6>
 8012540:	f1b9 0f00 	cmp.w	r9, #0
 8012544:	d003      	beq.n	801254e <_scanf_float+0x6e>
 8012546:	6823      	ldr	r3, [r4, #0]
 8012548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801254c:	6023      	str	r3, [r4, #0]
 801254e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012552:	f1ba 0f01 	cmp.w	sl, #1
 8012556:	f200 8113 	bhi.w	8012780 <_scanf_float+0x2a0>
 801255a:	455e      	cmp	r6, fp
 801255c:	f200 8105 	bhi.w	801276a <_scanf_float+0x28a>
 8012560:	2501      	movs	r5, #1
 8012562:	4628      	mov	r0, r5
 8012564:	b007      	add	sp, #28
 8012566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801256a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801256e:	2a0d      	cmp	r2, #13
 8012570:	d8e6      	bhi.n	8012540 <_scanf_float+0x60>
 8012572:	a101      	add	r1, pc, #4	; (adr r1, 8012578 <_scanf_float+0x98>)
 8012574:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012578:	080126b7 	.word	0x080126b7
 801257c:	08012541 	.word	0x08012541
 8012580:	08012541 	.word	0x08012541
 8012584:	08012541 	.word	0x08012541
 8012588:	08012717 	.word	0x08012717
 801258c:	080126ef 	.word	0x080126ef
 8012590:	08012541 	.word	0x08012541
 8012594:	08012541 	.word	0x08012541
 8012598:	080126c5 	.word	0x080126c5
 801259c:	08012541 	.word	0x08012541
 80125a0:	08012541 	.word	0x08012541
 80125a4:	08012541 	.word	0x08012541
 80125a8:	08012541 	.word	0x08012541
 80125ac:	0801267d 	.word	0x0801267d
 80125b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80125b4:	e7db      	b.n	801256e <_scanf_float+0x8e>
 80125b6:	290e      	cmp	r1, #14
 80125b8:	d8c2      	bhi.n	8012540 <_scanf_float+0x60>
 80125ba:	a001      	add	r0, pc, #4	; (adr r0, 80125c0 <_scanf_float+0xe0>)
 80125bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80125c0:	0801266f 	.word	0x0801266f
 80125c4:	08012541 	.word	0x08012541
 80125c8:	0801266f 	.word	0x0801266f
 80125cc:	08012703 	.word	0x08012703
 80125d0:	08012541 	.word	0x08012541
 80125d4:	0801261d 	.word	0x0801261d
 80125d8:	08012659 	.word	0x08012659
 80125dc:	08012659 	.word	0x08012659
 80125e0:	08012659 	.word	0x08012659
 80125e4:	08012659 	.word	0x08012659
 80125e8:	08012659 	.word	0x08012659
 80125ec:	08012659 	.word	0x08012659
 80125f0:	08012659 	.word	0x08012659
 80125f4:	08012659 	.word	0x08012659
 80125f8:	08012659 	.word	0x08012659
 80125fc:	2b6e      	cmp	r3, #110	; 0x6e
 80125fe:	d809      	bhi.n	8012614 <_scanf_float+0x134>
 8012600:	2b60      	cmp	r3, #96	; 0x60
 8012602:	d8b2      	bhi.n	801256a <_scanf_float+0x8a>
 8012604:	2b54      	cmp	r3, #84	; 0x54
 8012606:	d077      	beq.n	80126f8 <_scanf_float+0x218>
 8012608:	2b59      	cmp	r3, #89	; 0x59
 801260a:	d199      	bne.n	8012540 <_scanf_float+0x60>
 801260c:	2d07      	cmp	r5, #7
 801260e:	d197      	bne.n	8012540 <_scanf_float+0x60>
 8012610:	2508      	movs	r5, #8
 8012612:	e029      	b.n	8012668 <_scanf_float+0x188>
 8012614:	2b74      	cmp	r3, #116	; 0x74
 8012616:	d06f      	beq.n	80126f8 <_scanf_float+0x218>
 8012618:	2b79      	cmp	r3, #121	; 0x79
 801261a:	e7f6      	b.n	801260a <_scanf_float+0x12a>
 801261c:	6821      	ldr	r1, [r4, #0]
 801261e:	05c8      	lsls	r0, r1, #23
 8012620:	d51a      	bpl.n	8012658 <_scanf_float+0x178>
 8012622:	9b02      	ldr	r3, [sp, #8]
 8012624:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012628:	6021      	str	r1, [r4, #0]
 801262a:	f109 0901 	add.w	r9, r9, #1
 801262e:	b11b      	cbz	r3, 8012638 <_scanf_float+0x158>
 8012630:	3b01      	subs	r3, #1
 8012632:	3201      	adds	r2, #1
 8012634:	9302      	str	r3, [sp, #8]
 8012636:	60a2      	str	r2, [r4, #8]
 8012638:	68a3      	ldr	r3, [r4, #8]
 801263a:	3b01      	subs	r3, #1
 801263c:	60a3      	str	r3, [r4, #8]
 801263e:	6923      	ldr	r3, [r4, #16]
 8012640:	3301      	adds	r3, #1
 8012642:	6123      	str	r3, [r4, #16]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	3b01      	subs	r3, #1
 8012648:	2b00      	cmp	r3, #0
 801264a:	607b      	str	r3, [r7, #4]
 801264c:	f340 8084 	ble.w	8012758 <_scanf_float+0x278>
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	3301      	adds	r3, #1
 8012654:	603b      	str	r3, [r7, #0]
 8012656:	e766      	b.n	8012526 <_scanf_float+0x46>
 8012658:	eb1a 0f05 	cmn.w	sl, r5
 801265c:	f47f af70 	bne.w	8012540 <_scanf_float+0x60>
 8012660:	6822      	ldr	r2, [r4, #0]
 8012662:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012666:	6022      	str	r2, [r4, #0]
 8012668:	f806 3b01 	strb.w	r3, [r6], #1
 801266c:	e7e4      	b.n	8012638 <_scanf_float+0x158>
 801266e:	6822      	ldr	r2, [r4, #0]
 8012670:	0610      	lsls	r0, r2, #24
 8012672:	f57f af65 	bpl.w	8012540 <_scanf_float+0x60>
 8012676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801267a:	e7f4      	b.n	8012666 <_scanf_float+0x186>
 801267c:	f1ba 0f00 	cmp.w	sl, #0
 8012680:	d10e      	bne.n	80126a0 <_scanf_float+0x1c0>
 8012682:	f1b9 0f00 	cmp.w	r9, #0
 8012686:	d10e      	bne.n	80126a6 <_scanf_float+0x1c6>
 8012688:	6822      	ldr	r2, [r4, #0]
 801268a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801268e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012692:	d108      	bne.n	80126a6 <_scanf_float+0x1c6>
 8012694:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012698:	6022      	str	r2, [r4, #0]
 801269a:	f04f 0a01 	mov.w	sl, #1
 801269e:	e7e3      	b.n	8012668 <_scanf_float+0x188>
 80126a0:	f1ba 0f02 	cmp.w	sl, #2
 80126a4:	d055      	beq.n	8012752 <_scanf_float+0x272>
 80126a6:	2d01      	cmp	r5, #1
 80126a8:	d002      	beq.n	80126b0 <_scanf_float+0x1d0>
 80126aa:	2d04      	cmp	r5, #4
 80126ac:	f47f af48 	bne.w	8012540 <_scanf_float+0x60>
 80126b0:	3501      	adds	r5, #1
 80126b2:	b2ed      	uxtb	r5, r5
 80126b4:	e7d8      	b.n	8012668 <_scanf_float+0x188>
 80126b6:	f1ba 0f01 	cmp.w	sl, #1
 80126ba:	f47f af41 	bne.w	8012540 <_scanf_float+0x60>
 80126be:	f04f 0a02 	mov.w	sl, #2
 80126c2:	e7d1      	b.n	8012668 <_scanf_float+0x188>
 80126c4:	b97d      	cbnz	r5, 80126e6 <_scanf_float+0x206>
 80126c6:	f1b9 0f00 	cmp.w	r9, #0
 80126ca:	f47f af3c 	bne.w	8012546 <_scanf_float+0x66>
 80126ce:	6822      	ldr	r2, [r4, #0]
 80126d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80126d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80126d8:	f47f af39 	bne.w	801254e <_scanf_float+0x6e>
 80126dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80126e0:	6022      	str	r2, [r4, #0]
 80126e2:	2501      	movs	r5, #1
 80126e4:	e7c0      	b.n	8012668 <_scanf_float+0x188>
 80126e6:	2d03      	cmp	r5, #3
 80126e8:	d0e2      	beq.n	80126b0 <_scanf_float+0x1d0>
 80126ea:	2d05      	cmp	r5, #5
 80126ec:	e7de      	b.n	80126ac <_scanf_float+0x1cc>
 80126ee:	2d02      	cmp	r5, #2
 80126f0:	f47f af26 	bne.w	8012540 <_scanf_float+0x60>
 80126f4:	2503      	movs	r5, #3
 80126f6:	e7b7      	b.n	8012668 <_scanf_float+0x188>
 80126f8:	2d06      	cmp	r5, #6
 80126fa:	f47f af21 	bne.w	8012540 <_scanf_float+0x60>
 80126fe:	2507      	movs	r5, #7
 8012700:	e7b2      	b.n	8012668 <_scanf_float+0x188>
 8012702:	6822      	ldr	r2, [r4, #0]
 8012704:	0591      	lsls	r1, r2, #22
 8012706:	f57f af1b 	bpl.w	8012540 <_scanf_float+0x60>
 801270a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801270e:	6022      	str	r2, [r4, #0]
 8012710:	f8cd 9004 	str.w	r9, [sp, #4]
 8012714:	e7a8      	b.n	8012668 <_scanf_float+0x188>
 8012716:	6822      	ldr	r2, [r4, #0]
 8012718:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801271c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012720:	d006      	beq.n	8012730 <_scanf_float+0x250>
 8012722:	0550      	lsls	r0, r2, #21
 8012724:	f57f af0c 	bpl.w	8012540 <_scanf_float+0x60>
 8012728:	f1b9 0f00 	cmp.w	r9, #0
 801272c:	f43f af0f 	beq.w	801254e <_scanf_float+0x6e>
 8012730:	0591      	lsls	r1, r2, #22
 8012732:	bf58      	it	pl
 8012734:	9901      	ldrpl	r1, [sp, #4]
 8012736:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801273a:	bf58      	it	pl
 801273c:	eba9 0101 	subpl.w	r1, r9, r1
 8012740:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012744:	bf58      	it	pl
 8012746:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801274a:	6022      	str	r2, [r4, #0]
 801274c:	f04f 0900 	mov.w	r9, #0
 8012750:	e78a      	b.n	8012668 <_scanf_float+0x188>
 8012752:	f04f 0a03 	mov.w	sl, #3
 8012756:	e787      	b.n	8012668 <_scanf_float+0x188>
 8012758:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801275c:	4639      	mov	r1, r7
 801275e:	4640      	mov	r0, r8
 8012760:	4798      	blx	r3
 8012762:	2800      	cmp	r0, #0
 8012764:	f43f aedf 	beq.w	8012526 <_scanf_float+0x46>
 8012768:	e6ea      	b.n	8012540 <_scanf_float+0x60>
 801276a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801276e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012772:	463a      	mov	r2, r7
 8012774:	4640      	mov	r0, r8
 8012776:	4798      	blx	r3
 8012778:	6923      	ldr	r3, [r4, #16]
 801277a:	3b01      	subs	r3, #1
 801277c:	6123      	str	r3, [r4, #16]
 801277e:	e6ec      	b.n	801255a <_scanf_float+0x7a>
 8012780:	1e6b      	subs	r3, r5, #1
 8012782:	2b06      	cmp	r3, #6
 8012784:	d825      	bhi.n	80127d2 <_scanf_float+0x2f2>
 8012786:	2d02      	cmp	r5, #2
 8012788:	d836      	bhi.n	80127f8 <_scanf_float+0x318>
 801278a:	455e      	cmp	r6, fp
 801278c:	f67f aee8 	bls.w	8012560 <_scanf_float+0x80>
 8012790:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012794:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012798:	463a      	mov	r2, r7
 801279a:	4640      	mov	r0, r8
 801279c:	4798      	blx	r3
 801279e:	6923      	ldr	r3, [r4, #16]
 80127a0:	3b01      	subs	r3, #1
 80127a2:	6123      	str	r3, [r4, #16]
 80127a4:	e7f1      	b.n	801278a <_scanf_float+0x2aa>
 80127a6:	9802      	ldr	r0, [sp, #8]
 80127a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80127ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80127b0:	9002      	str	r0, [sp, #8]
 80127b2:	463a      	mov	r2, r7
 80127b4:	4640      	mov	r0, r8
 80127b6:	4798      	blx	r3
 80127b8:	6923      	ldr	r3, [r4, #16]
 80127ba:	3b01      	subs	r3, #1
 80127bc:	6123      	str	r3, [r4, #16]
 80127be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127c2:	fa5f fa8a 	uxtb.w	sl, sl
 80127c6:	f1ba 0f02 	cmp.w	sl, #2
 80127ca:	d1ec      	bne.n	80127a6 <_scanf_float+0x2c6>
 80127cc:	3d03      	subs	r5, #3
 80127ce:	b2ed      	uxtb	r5, r5
 80127d0:	1b76      	subs	r6, r6, r5
 80127d2:	6823      	ldr	r3, [r4, #0]
 80127d4:	05da      	lsls	r2, r3, #23
 80127d6:	d52f      	bpl.n	8012838 <_scanf_float+0x358>
 80127d8:	055b      	lsls	r3, r3, #21
 80127da:	d510      	bpl.n	80127fe <_scanf_float+0x31e>
 80127dc:	455e      	cmp	r6, fp
 80127de:	f67f aebf 	bls.w	8012560 <_scanf_float+0x80>
 80127e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80127e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80127ea:	463a      	mov	r2, r7
 80127ec:	4640      	mov	r0, r8
 80127ee:	4798      	blx	r3
 80127f0:	6923      	ldr	r3, [r4, #16]
 80127f2:	3b01      	subs	r3, #1
 80127f4:	6123      	str	r3, [r4, #16]
 80127f6:	e7f1      	b.n	80127dc <_scanf_float+0x2fc>
 80127f8:	46aa      	mov	sl, r5
 80127fa:	9602      	str	r6, [sp, #8]
 80127fc:	e7df      	b.n	80127be <_scanf_float+0x2de>
 80127fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012802:	6923      	ldr	r3, [r4, #16]
 8012804:	2965      	cmp	r1, #101	; 0x65
 8012806:	f103 33ff 	add.w	r3, r3, #4294967295
 801280a:	f106 35ff 	add.w	r5, r6, #4294967295
 801280e:	6123      	str	r3, [r4, #16]
 8012810:	d00c      	beq.n	801282c <_scanf_float+0x34c>
 8012812:	2945      	cmp	r1, #69	; 0x45
 8012814:	d00a      	beq.n	801282c <_scanf_float+0x34c>
 8012816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801281a:	463a      	mov	r2, r7
 801281c:	4640      	mov	r0, r8
 801281e:	4798      	blx	r3
 8012820:	6923      	ldr	r3, [r4, #16]
 8012822:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012826:	3b01      	subs	r3, #1
 8012828:	1eb5      	subs	r5, r6, #2
 801282a:	6123      	str	r3, [r4, #16]
 801282c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012830:	463a      	mov	r2, r7
 8012832:	4640      	mov	r0, r8
 8012834:	4798      	blx	r3
 8012836:	462e      	mov	r6, r5
 8012838:	6825      	ldr	r5, [r4, #0]
 801283a:	f015 0510 	ands.w	r5, r5, #16
 801283e:	d158      	bne.n	80128f2 <_scanf_float+0x412>
 8012840:	7035      	strb	r5, [r6, #0]
 8012842:	6823      	ldr	r3, [r4, #0]
 8012844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801284c:	d11c      	bne.n	8012888 <_scanf_float+0x3a8>
 801284e:	9b01      	ldr	r3, [sp, #4]
 8012850:	454b      	cmp	r3, r9
 8012852:	eba3 0209 	sub.w	r2, r3, r9
 8012856:	d124      	bne.n	80128a2 <_scanf_float+0x3c2>
 8012858:	2200      	movs	r2, #0
 801285a:	4659      	mov	r1, fp
 801285c:	4640      	mov	r0, r8
 801285e:	f7ff f8df 	bl	8011a20 <_strtod_r>
 8012862:	9b03      	ldr	r3, [sp, #12]
 8012864:	6821      	ldr	r1, [r4, #0]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	f011 0f02 	tst.w	r1, #2
 801286c:	ec57 6b10 	vmov	r6, r7, d0
 8012870:	f103 0204 	add.w	r2, r3, #4
 8012874:	d020      	beq.n	80128b8 <_scanf_float+0x3d8>
 8012876:	9903      	ldr	r1, [sp, #12]
 8012878:	600a      	str	r2, [r1, #0]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	e9c3 6700 	strd	r6, r7, [r3]
 8012880:	68e3      	ldr	r3, [r4, #12]
 8012882:	3301      	adds	r3, #1
 8012884:	60e3      	str	r3, [r4, #12]
 8012886:	e66c      	b.n	8012562 <_scanf_float+0x82>
 8012888:	9b04      	ldr	r3, [sp, #16]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d0e4      	beq.n	8012858 <_scanf_float+0x378>
 801288e:	9905      	ldr	r1, [sp, #20]
 8012890:	230a      	movs	r3, #10
 8012892:	462a      	mov	r2, r5
 8012894:	3101      	adds	r1, #1
 8012896:	4640      	mov	r0, r8
 8012898:	f7ff f9b0 	bl	8011bfc <_strtol_r>
 801289c:	9b04      	ldr	r3, [sp, #16]
 801289e:	9e05      	ldr	r6, [sp, #20]
 80128a0:	1ac2      	subs	r2, r0, r3
 80128a2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80128a6:	429e      	cmp	r6, r3
 80128a8:	bf28      	it	cs
 80128aa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80128ae:	4912      	ldr	r1, [pc, #72]	; (80128f8 <_scanf_float+0x418>)
 80128b0:	4630      	mov	r0, r6
 80128b2:	f000 f91b 	bl	8012aec <siprintf>
 80128b6:	e7cf      	b.n	8012858 <_scanf_float+0x378>
 80128b8:	f011 0f04 	tst.w	r1, #4
 80128bc:	9903      	ldr	r1, [sp, #12]
 80128be:	600a      	str	r2, [r1, #0]
 80128c0:	d1db      	bne.n	801287a <_scanf_float+0x39a>
 80128c2:	f8d3 8000 	ldr.w	r8, [r3]
 80128c6:	ee10 2a10 	vmov	r2, s0
 80128ca:	ee10 0a10 	vmov	r0, s0
 80128ce:	463b      	mov	r3, r7
 80128d0:	4639      	mov	r1, r7
 80128d2:	f7ee f92b 	bl	8000b2c <__aeabi_dcmpun>
 80128d6:	b128      	cbz	r0, 80128e4 <_scanf_float+0x404>
 80128d8:	4808      	ldr	r0, [pc, #32]	; (80128fc <_scanf_float+0x41c>)
 80128da:	f000 fa9d 	bl	8012e18 <nanf>
 80128de:	ed88 0a00 	vstr	s0, [r8]
 80128e2:	e7cd      	b.n	8012880 <_scanf_float+0x3a0>
 80128e4:	4630      	mov	r0, r6
 80128e6:	4639      	mov	r1, r7
 80128e8:	f7ee f97e 	bl	8000be8 <__aeabi_d2f>
 80128ec:	f8c8 0000 	str.w	r0, [r8]
 80128f0:	e7c6      	b.n	8012880 <_scanf_float+0x3a0>
 80128f2:	2500      	movs	r5, #0
 80128f4:	e635      	b.n	8012562 <_scanf_float+0x82>
 80128f6:	bf00      	nop
 80128f8:	08018a15 	.word	0x08018a15
 80128fc:	08018ace 	.word	0x08018ace

08012900 <std>:
 8012900:	2300      	movs	r3, #0
 8012902:	b510      	push	{r4, lr}
 8012904:	4604      	mov	r4, r0
 8012906:	e9c0 3300 	strd	r3, r3, [r0]
 801290a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801290e:	6083      	str	r3, [r0, #8]
 8012910:	8181      	strh	r1, [r0, #12]
 8012912:	6643      	str	r3, [r0, #100]	; 0x64
 8012914:	81c2      	strh	r2, [r0, #14]
 8012916:	6183      	str	r3, [r0, #24]
 8012918:	4619      	mov	r1, r3
 801291a:	2208      	movs	r2, #8
 801291c:	305c      	adds	r0, #92	; 0x5c
 801291e:	f000 f948 	bl	8012bb2 <memset>
 8012922:	4b0d      	ldr	r3, [pc, #52]	; (8012958 <std+0x58>)
 8012924:	6263      	str	r3, [r4, #36]	; 0x24
 8012926:	4b0d      	ldr	r3, [pc, #52]	; (801295c <std+0x5c>)
 8012928:	62a3      	str	r3, [r4, #40]	; 0x28
 801292a:	4b0d      	ldr	r3, [pc, #52]	; (8012960 <std+0x60>)
 801292c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801292e:	4b0d      	ldr	r3, [pc, #52]	; (8012964 <std+0x64>)
 8012930:	6323      	str	r3, [r4, #48]	; 0x30
 8012932:	4b0d      	ldr	r3, [pc, #52]	; (8012968 <std+0x68>)
 8012934:	6224      	str	r4, [r4, #32]
 8012936:	429c      	cmp	r4, r3
 8012938:	d006      	beq.n	8012948 <std+0x48>
 801293a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801293e:	4294      	cmp	r4, r2
 8012940:	d002      	beq.n	8012948 <std+0x48>
 8012942:	33d0      	adds	r3, #208	; 0xd0
 8012944:	429c      	cmp	r4, r3
 8012946:	d105      	bne.n	8012954 <std+0x54>
 8012948:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801294c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012950:	f000 ba40 	b.w	8012dd4 <__retarget_lock_init_recursive>
 8012954:	bd10      	pop	{r4, pc}
 8012956:	bf00      	nop
 8012958:	08012b2d 	.word	0x08012b2d
 801295c:	08012b4f 	.word	0x08012b4f
 8012960:	08012b87 	.word	0x08012b87
 8012964:	08012bab 	.word	0x08012bab
 8012968:	2000149c 	.word	0x2000149c

0801296c <stdio_exit_handler>:
 801296c:	4a02      	ldr	r2, [pc, #8]	; (8012978 <stdio_exit_handler+0xc>)
 801296e:	4903      	ldr	r1, [pc, #12]	; (801297c <stdio_exit_handler+0x10>)
 8012970:	4803      	ldr	r0, [pc, #12]	; (8012980 <stdio_exit_handler+0x14>)
 8012972:	f000 b869 	b.w	8012a48 <_fwalk_sglue>
 8012976:	bf00      	nop
 8012978:	2000014c 	.word	0x2000014c
 801297c:	08014ff1 	.word	0x08014ff1
 8012980:	200002c4 	.word	0x200002c4

08012984 <cleanup_stdio>:
 8012984:	6841      	ldr	r1, [r0, #4]
 8012986:	4b0c      	ldr	r3, [pc, #48]	; (80129b8 <cleanup_stdio+0x34>)
 8012988:	4299      	cmp	r1, r3
 801298a:	b510      	push	{r4, lr}
 801298c:	4604      	mov	r4, r0
 801298e:	d001      	beq.n	8012994 <cleanup_stdio+0x10>
 8012990:	f002 fb2e 	bl	8014ff0 <_fflush_r>
 8012994:	68a1      	ldr	r1, [r4, #8]
 8012996:	4b09      	ldr	r3, [pc, #36]	; (80129bc <cleanup_stdio+0x38>)
 8012998:	4299      	cmp	r1, r3
 801299a:	d002      	beq.n	80129a2 <cleanup_stdio+0x1e>
 801299c:	4620      	mov	r0, r4
 801299e:	f002 fb27 	bl	8014ff0 <_fflush_r>
 80129a2:	68e1      	ldr	r1, [r4, #12]
 80129a4:	4b06      	ldr	r3, [pc, #24]	; (80129c0 <cleanup_stdio+0x3c>)
 80129a6:	4299      	cmp	r1, r3
 80129a8:	d004      	beq.n	80129b4 <cleanup_stdio+0x30>
 80129aa:	4620      	mov	r0, r4
 80129ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129b0:	f002 bb1e 	b.w	8014ff0 <_fflush_r>
 80129b4:	bd10      	pop	{r4, pc}
 80129b6:	bf00      	nop
 80129b8:	2000149c 	.word	0x2000149c
 80129bc:	20001504 	.word	0x20001504
 80129c0:	2000156c 	.word	0x2000156c

080129c4 <global_stdio_init.part.0>:
 80129c4:	b510      	push	{r4, lr}
 80129c6:	4b0b      	ldr	r3, [pc, #44]	; (80129f4 <global_stdio_init.part.0+0x30>)
 80129c8:	4c0b      	ldr	r4, [pc, #44]	; (80129f8 <global_stdio_init.part.0+0x34>)
 80129ca:	4a0c      	ldr	r2, [pc, #48]	; (80129fc <global_stdio_init.part.0+0x38>)
 80129cc:	601a      	str	r2, [r3, #0]
 80129ce:	4620      	mov	r0, r4
 80129d0:	2200      	movs	r2, #0
 80129d2:	2104      	movs	r1, #4
 80129d4:	f7ff ff94 	bl	8012900 <std>
 80129d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80129dc:	2201      	movs	r2, #1
 80129de:	2109      	movs	r1, #9
 80129e0:	f7ff ff8e 	bl	8012900 <std>
 80129e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80129e8:	2202      	movs	r2, #2
 80129ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ee:	2112      	movs	r1, #18
 80129f0:	f7ff bf86 	b.w	8012900 <std>
 80129f4:	200015d4 	.word	0x200015d4
 80129f8:	2000149c 	.word	0x2000149c
 80129fc:	0801296d 	.word	0x0801296d

08012a00 <__sfp_lock_acquire>:
 8012a00:	4801      	ldr	r0, [pc, #4]	; (8012a08 <__sfp_lock_acquire+0x8>)
 8012a02:	f000 b9e8 	b.w	8012dd6 <__retarget_lock_acquire_recursive>
 8012a06:	bf00      	nop
 8012a08:	200015dd 	.word	0x200015dd

08012a0c <__sfp_lock_release>:
 8012a0c:	4801      	ldr	r0, [pc, #4]	; (8012a14 <__sfp_lock_release+0x8>)
 8012a0e:	f000 b9e3 	b.w	8012dd8 <__retarget_lock_release_recursive>
 8012a12:	bf00      	nop
 8012a14:	200015dd 	.word	0x200015dd

08012a18 <__sinit>:
 8012a18:	b510      	push	{r4, lr}
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	f7ff fff0 	bl	8012a00 <__sfp_lock_acquire>
 8012a20:	6a23      	ldr	r3, [r4, #32]
 8012a22:	b11b      	cbz	r3, 8012a2c <__sinit+0x14>
 8012a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a28:	f7ff bff0 	b.w	8012a0c <__sfp_lock_release>
 8012a2c:	4b04      	ldr	r3, [pc, #16]	; (8012a40 <__sinit+0x28>)
 8012a2e:	6223      	str	r3, [r4, #32]
 8012a30:	4b04      	ldr	r3, [pc, #16]	; (8012a44 <__sinit+0x2c>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d1f5      	bne.n	8012a24 <__sinit+0xc>
 8012a38:	f7ff ffc4 	bl	80129c4 <global_stdio_init.part.0>
 8012a3c:	e7f2      	b.n	8012a24 <__sinit+0xc>
 8012a3e:	bf00      	nop
 8012a40:	08012985 	.word	0x08012985
 8012a44:	200015d4 	.word	0x200015d4

08012a48 <_fwalk_sglue>:
 8012a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a4c:	4607      	mov	r7, r0
 8012a4e:	4688      	mov	r8, r1
 8012a50:	4614      	mov	r4, r2
 8012a52:	2600      	movs	r6, #0
 8012a54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a58:	f1b9 0901 	subs.w	r9, r9, #1
 8012a5c:	d505      	bpl.n	8012a6a <_fwalk_sglue+0x22>
 8012a5e:	6824      	ldr	r4, [r4, #0]
 8012a60:	2c00      	cmp	r4, #0
 8012a62:	d1f7      	bne.n	8012a54 <_fwalk_sglue+0xc>
 8012a64:	4630      	mov	r0, r6
 8012a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a6a:	89ab      	ldrh	r3, [r5, #12]
 8012a6c:	2b01      	cmp	r3, #1
 8012a6e:	d907      	bls.n	8012a80 <_fwalk_sglue+0x38>
 8012a70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a74:	3301      	adds	r3, #1
 8012a76:	d003      	beq.n	8012a80 <_fwalk_sglue+0x38>
 8012a78:	4629      	mov	r1, r5
 8012a7a:	4638      	mov	r0, r7
 8012a7c:	47c0      	blx	r8
 8012a7e:	4306      	orrs	r6, r0
 8012a80:	3568      	adds	r5, #104	; 0x68
 8012a82:	e7e9      	b.n	8012a58 <_fwalk_sglue+0x10>

08012a84 <sniprintf>:
 8012a84:	b40c      	push	{r2, r3}
 8012a86:	b530      	push	{r4, r5, lr}
 8012a88:	4b17      	ldr	r3, [pc, #92]	; (8012ae8 <sniprintf+0x64>)
 8012a8a:	1e0c      	subs	r4, r1, #0
 8012a8c:	681d      	ldr	r5, [r3, #0]
 8012a8e:	b09d      	sub	sp, #116	; 0x74
 8012a90:	da08      	bge.n	8012aa4 <sniprintf+0x20>
 8012a92:	238b      	movs	r3, #139	; 0x8b
 8012a94:	602b      	str	r3, [r5, #0]
 8012a96:	f04f 30ff 	mov.w	r0, #4294967295
 8012a9a:	b01d      	add	sp, #116	; 0x74
 8012a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012aa0:	b002      	add	sp, #8
 8012aa2:	4770      	bx	lr
 8012aa4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012aa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012aac:	bf14      	ite	ne
 8012aae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012ab2:	4623      	moveq	r3, r4
 8012ab4:	9304      	str	r3, [sp, #16]
 8012ab6:	9307      	str	r3, [sp, #28]
 8012ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012abc:	9002      	str	r0, [sp, #8]
 8012abe:	9006      	str	r0, [sp, #24]
 8012ac0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012ac4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012ac6:	ab21      	add	r3, sp, #132	; 0x84
 8012ac8:	a902      	add	r1, sp, #8
 8012aca:	4628      	mov	r0, r5
 8012acc:	9301      	str	r3, [sp, #4]
 8012ace:	f002 f90b 	bl	8014ce8 <_svfiprintf_r>
 8012ad2:	1c43      	adds	r3, r0, #1
 8012ad4:	bfbc      	itt	lt
 8012ad6:	238b      	movlt	r3, #139	; 0x8b
 8012ad8:	602b      	strlt	r3, [r5, #0]
 8012ada:	2c00      	cmp	r4, #0
 8012adc:	d0dd      	beq.n	8012a9a <sniprintf+0x16>
 8012ade:	9b02      	ldr	r3, [sp, #8]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	701a      	strb	r2, [r3, #0]
 8012ae4:	e7d9      	b.n	8012a9a <sniprintf+0x16>
 8012ae6:	bf00      	nop
 8012ae8:	20000310 	.word	0x20000310

08012aec <siprintf>:
 8012aec:	b40e      	push	{r1, r2, r3}
 8012aee:	b500      	push	{lr}
 8012af0:	b09c      	sub	sp, #112	; 0x70
 8012af2:	ab1d      	add	r3, sp, #116	; 0x74
 8012af4:	9002      	str	r0, [sp, #8]
 8012af6:	9006      	str	r0, [sp, #24]
 8012af8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012afc:	4809      	ldr	r0, [pc, #36]	; (8012b24 <siprintf+0x38>)
 8012afe:	9107      	str	r1, [sp, #28]
 8012b00:	9104      	str	r1, [sp, #16]
 8012b02:	4909      	ldr	r1, [pc, #36]	; (8012b28 <siprintf+0x3c>)
 8012b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b08:	9105      	str	r1, [sp, #20]
 8012b0a:	6800      	ldr	r0, [r0, #0]
 8012b0c:	9301      	str	r3, [sp, #4]
 8012b0e:	a902      	add	r1, sp, #8
 8012b10:	f002 f8ea 	bl	8014ce8 <_svfiprintf_r>
 8012b14:	9b02      	ldr	r3, [sp, #8]
 8012b16:	2200      	movs	r2, #0
 8012b18:	701a      	strb	r2, [r3, #0]
 8012b1a:	b01c      	add	sp, #112	; 0x70
 8012b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b20:	b003      	add	sp, #12
 8012b22:	4770      	bx	lr
 8012b24:	20000310 	.word	0x20000310
 8012b28:	ffff0208 	.word	0xffff0208

08012b2c <__sread>:
 8012b2c:	b510      	push	{r4, lr}
 8012b2e:	460c      	mov	r4, r1
 8012b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b34:	f000 f8f0 	bl	8012d18 <_read_r>
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	bfab      	itete	ge
 8012b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8012b40:	181b      	addge	r3, r3, r0
 8012b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b46:	bfac      	ite	ge
 8012b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b4a:	81a3      	strhlt	r3, [r4, #12]
 8012b4c:	bd10      	pop	{r4, pc}

08012b4e <__swrite>:
 8012b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b52:	461f      	mov	r7, r3
 8012b54:	898b      	ldrh	r3, [r1, #12]
 8012b56:	05db      	lsls	r3, r3, #23
 8012b58:	4605      	mov	r5, r0
 8012b5a:	460c      	mov	r4, r1
 8012b5c:	4616      	mov	r6, r2
 8012b5e:	d505      	bpl.n	8012b6c <__swrite+0x1e>
 8012b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b64:	2302      	movs	r3, #2
 8012b66:	2200      	movs	r2, #0
 8012b68:	f000 f8c4 	bl	8012cf4 <_lseek_r>
 8012b6c:	89a3      	ldrh	r3, [r4, #12]
 8012b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b76:	81a3      	strh	r3, [r4, #12]
 8012b78:	4632      	mov	r2, r6
 8012b7a:	463b      	mov	r3, r7
 8012b7c:	4628      	mov	r0, r5
 8012b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b82:	f000 b8eb 	b.w	8012d5c <_write_r>

08012b86 <__sseek>:
 8012b86:	b510      	push	{r4, lr}
 8012b88:	460c      	mov	r4, r1
 8012b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b8e:	f000 f8b1 	bl	8012cf4 <_lseek_r>
 8012b92:	1c43      	adds	r3, r0, #1
 8012b94:	89a3      	ldrh	r3, [r4, #12]
 8012b96:	bf15      	itete	ne
 8012b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ba2:	81a3      	strheq	r3, [r4, #12]
 8012ba4:	bf18      	it	ne
 8012ba6:	81a3      	strhne	r3, [r4, #12]
 8012ba8:	bd10      	pop	{r4, pc}

08012baa <__sclose>:
 8012baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bae:	f000 b891 	b.w	8012cd4 <_close_r>

08012bb2 <memset>:
 8012bb2:	4402      	add	r2, r0
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d100      	bne.n	8012bbc <memset+0xa>
 8012bba:	4770      	bx	lr
 8012bbc:	f803 1b01 	strb.w	r1, [r3], #1
 8012bc0:	e7f9      	b.n	8012bb6 <memset+0x4>

08012bc2 <strncmp>:
 8012bc2:	b510      	push	{r4, lr}
 8012bc4:	b16a      	cbz	r2, 8012be2 <strncmp+0x20>
 8012bc6:	3901      	subs	r1, #1
 8012bc8:	1884      	adds	r4, r0, r2
 8012bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d103      	bne.n	8012bde <strncmp+0x1c>
 8012bd6:	42a0      	cmp	r0, r4
 8012bd8:	d001      	beq.n	8012bde <strncmp+0x1c>
 8012bda:	2a00      	cmp	r2, #0
 8012bdc:	d1f5      	bne.n	8012bca <strncmp+0x8>
 8012bde:	1ad0      	subs	r0, r2, r3
 8012be0:	bd10      	pop	{r4, pc}
 8012be2:	4610      	mov	r0, r2
 8012be4:	e7fc      	b.n	8012be0 <strncmp+0x1e>
	...

08012be8 <strtok>:
 8012be8:	4b16      	ldr	r3, [pc, #88]	; (8012c44 <strtok+0x5c>)
 8012bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012bec:	681e      	ldr	r6, [r3, #0]
 8012bee:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8012bf0:	4605      	mov	r5, r0
 8012bf2:	b9fc      	cbnz	r4, 8012c34 <strtok+0x4c>
 8012bf4:	2050      	movs	r0, #80	; 0x50
 8012bf6:	9101      	str	r1, [sp, #4]
 8012bf8:	f7fe f848 	bl	8010c8c <malloc>
 8012bfc:	9901      	ldr	r1, [sp, #4]
 8012bfe:	6470      	str	r0, [r6, #68]	; 0x44
 8012c00:	4602      	mov	r2, r0
 8012c02:	b920      	cbnz	r0, 8012c0e <strtok+0x26>
 8012c04:	4b10      	ldr	r3, [pc, #64]	; (8012c48 <strtok+0x60>)
 8012c06:	4811      	ldr	r0, [pc, #68]	; (8012c4c <strtok+0x64>)
 8012c08:	215b      	movs	r1, #91	; 0x5b
 8012c0a:	f000 f90b 	bl	8012e24 <__assert_func>
 8012c0e:	e9c0 4400 	strd	r4, r4, [r0]
 8012c12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012c16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012c1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012c1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012c22:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012c26:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012c2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012c2e:	6184      	str	r4, [r0, #24]
 8012c30:	7704      	strb	r4, [r0, #28]
 8012c32:	6244      	str	r4, [r0, #36]	; 0x24
 8012c34:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8012c36:	2301      	movs	r3, #1
 8012c38:	4628      	mov	r0, r5
 8012c3a:	b002      	add	sp, #8
 8012c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c40:	f000 b806 	b.w	8012c50 <__strtok_r>
 8012c44:	20000310 	.word	0x20000310
 8012c48:	08018a1a 	.word	0x08018a1a
 8012c4c:	08018a31 	.word	0x08018a31

08012c50 <__strtok_r>:
 8012c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c52:	b908      	cbnz	r0, 8012c58 <__strtok_r+0x8>
 8012c54:	6810      	ldr	r0, [r2, #0]
 8012c56:	b188      	cbz	r0, 8012c7c <__strtok_r+0x2c>
 8012c58:	4604      	mov	r4, r0
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012c60:	460f      	mov	r7, r1
 8012c62:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012c66:	b91e      	cbnz	r6, 8012c70 <__strtok_r+0x20>
 8012c68:	b965      	cbnz	r5, 8012c84 <__strtok_r+0x34>
 8012c6a:	6015      	str	r5, [r2, #0]
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	e005      	b.n	8012c7c <__strtok_r+0x2c>
 8012c70:	42b5      	cmp	r5, r6
 8012c72:	d1f6      	bne.n	8012c62 <__strtok_r+0x12>
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d1f0      	bne.n	8012c5a <__strtok_r+0xa>
 8012c78:	6014      	str	r4, [r2, #0]
 8012c7a:	7003      	strb	r3, [r0, #0]
 8012c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c7e:	461c      	mov	r4, r3
 8012c80:	e00c      	b.n	8012c9c <__strtok_r+0x4c>
 8012c82:	b915      	cbnz	r5, 8012c8a <__strtok_r+0x3a>
 8012c84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012c88:	460e      	mov	r6, r1
 8012c8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012c8e:	42ab      	cmp	r3, r5
 8012c90:	d1f7      	bne.n	8012c82 <__strtok_r+0x32>
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d0f3      	beq.n	8012c7e <__strtok_r+0x2e>
 8012c96:	2300      	movs	r3, #0
 8012c98:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012c9c:	6014      	str	r4, [r2, #0]
 8012c9e:	e7ed      	b.n	8012c7c <__strtok_r+0x2c>

08012ca0 <strstr>:
 8012ca0:	780a      	ldrb	r2, [r1, #0]
 8012ca2:	b570      	push	{r4, r5, r6, lr}
 8012ca4:	b96a      	cbnz	r2, 8012cc2 <strstr+0x22>
 8012ca6:	bd70      	pop	{r4, r5, r6, pc}
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d109      	bne.n	8012cc0 <strstr+0x20>
 8012cac:	460c      	mov	r4, r1
 8012cae:	4605      	mov	r5, r0
 8012cb0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d0f6      	beq.n	8012ca6 <strstr+0x6>
 8012cb8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012cbc:	429e      	cmp	r6, r3
 8012cbe:	d0f7      	beq.n	8012cb0 <strstr+0x10>
 8012cc0:	3001      	adds	r0, #1
 8012cc2:	7803      	ldrb	r3, [r0, #0]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d1ef      	bne.n	8012ca8 <strstr+0x8>
 8012cc8:	4618      	mov	r0, r3
 8012cca:	e7ec      	b.n	8012ca6 <strstr+0x6>

08012ccc <_localeconv_r>:
 8012ccc:	4800      	ldr	r0, [pc, #0]	; (8012cd0 <_localeconv_r+0x4>)
 8012cce:	4770      	bx	lr
 8012cd0:	20000248 	.word	0x20000248

08012cd4 <_close_r>:
 8012cd4:	b538      	push	{r3, r4, r5, lr}
 8012cd6:	4d06      	ldr	r5, [pc, #24]	; (8012cf0 <_close_r+0x1c>)
 8012cd8:	2300      	movs	r3, #0
 8012cda:	4604      	mov	r4, r0
 8012cdc:	4608      	mov	r0, r1
 8012cde:	602b      	str	r3, [r5, #0]
 8012ce0:	f7f1 fbf9 	bl	80044d6 <_close>
 8012ce4:	1c43      	adds	r3, r0, #1
 8012ce6:	d102      	bne.n	8012cee <_close_r+0x1a>
 8012ce8:	682b      	ldr	r3, [r5, #0]
 8012cea:	b103      	cbz	r3, 8012cee <_close_r+0x1a>
 8012cec:	6023      	str	r3, [r4, #0]
 8012cee:	bd38      	pop	{r3, r4, r5, pc}
 8012cf0:	200015d8 	.word	0x200015d8

08012cf4 <_lseek_r>:
 8012cf4:	b538      	push	{r3, r4, r5, lr}
 8012cf6:	4d07      	ldr	r5, [pc, #28]	; (8012d14 <_lseek_r+0x20>)
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	4608      	mov	r0, r1
 8012cfc:	4611      	mov	r1, r2
 8012cfe:	2200      	movs	r2, #0
 8012d00:	602a      	str	r2, [r5, #0]
 8012d02:	461a      	mov	r2, r3
 8012d04:	f7f1 fc0e 	bl	8004524 <_lseek>
 8012d08:	1c43      	adds	r3, r0, #1
 8012d0a:	d102      	bne.n	8012d12 <_lseek_r+0x1e>
 8012d0c:	682b      	ldr	r3, [r5, #0]
 8012d0e:	b103      	cbz	r3, 8012d12 <_lseek_r+0x1e>
 8012d10:	6023      	str	r3, [r4, #0]
 8012d12:	bd38      	pop	{r3, r4, r5, pc}
 8012d14:	200015d8 	.word	0x200015d8

08012d18 <_read_r>:
 8012d18:	b538      	push	{r3, r4, r5, lr}
 8012d1a:	4d07      	ldr	r5, [pc, #28]	; (8012d38 <_read_r+0x20>)
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	4608      	mov	r0, r1
 8012d20:	4611      	mov	r1, r2
 8012d22:	2200      	movs	r2, #0
 8012d24:	602a      	str	r2, [r5, #0]
 8012d26:	461a      	mov	r2, r3
 8012d28:	f7f1 fb9c 	bl	8004464 <_read>
 8012d2c:	1c43      	adds	r3, r0, #1
 8012d2e:	d102      	bne.n	8012d36 <_read_r+0x1e>
 8012d30:	682b      	ldr	r3, [r5, #0]
 8012d32:	b103      	cbz	r3, 8012d36 <_read_r+0x1e>
 8012d34:	6023      	str	r3, [r4, #0]
 8012d36:	bd38      	pop	{r3, r4, r5, pc}
 8012d38:	200015d8 	.word	0x200015d8

08012d3c <_sbrk_r>:
 8012d3c:	b538      	push	{r3, r4, r5, lr}
 8012d3e:	4d06      	ldr	r5, [pc, #24]	; (8012d58 <_sbrk_r+0x1c>)
 8012d40:	2300      	movs	r3, #0
 8012d42:	4604      	mov	r4, r0
 8012d44:	4608      	mov	r0, r1
 8012d46:	602b      	str	r3, [r5, #0]
 8012d48:	f7f1 fbfa 	bl	8004540 <_sbrk>
 8012d4c:	1c43      	adds	r3, r0, #1
 8012d4e:	d102      	bne.n	8012d56 <_sbrk_r+0x1a>
 8012d50:	682b      	ldr	r3, [r5, #0]
 8012d52:	b103      	cbz	r3, 8012d56 <_sbrk_r+0x1a>
 8012d54:	6023      	str	r3, [r4, #0]
 8012d56:	bd38      	pop	{r3, r4, r5, pc}
 8012d58:	200015d8 	.word	0x200015d8

08012d5c <_write_r>:
 8012d5c:	b538      	push	{r3, r4, r5, lr}
 8012d5e:	4d07      	ldr	r5, [pc, #28]	; (8012d7c <_write_r+0x20>)
 8012d60:	4604      	mov	r4, r0
 8012d62:	4608      	mov	r0, r1
 8012d64:	4611      	mov	r1, r2
 8012d66:	2200      	movs	r2, #0
 8012d68:	602a      	str	r2, [r5, #0]
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	f7f1 fb97 	bl	800449e <_write>
 8012d70:	1c43      	adds	r3, r0, #1
 8012d72:	d102      	bne.n	8012d7a <_write_r+0x1e>
 8012d74:	682b      	ldr	r3, [r5, #0]
 8012d76:	b103      	cbz	r3, 8012d7a <_write_r+0x1e>
 8012d78:	6023      	str	r3, [r4, #0]
 8012d7a:	bd38      	pop	{r3, r4, r5, pc}
 8012d7c:	200015d8 	.word	0x200015d8

08012d80 <__errno>:
 8012d80:	4b01      	ldr	r3, [pc, #4]	; (8012d88 <__errno+0x8>)
 8012d82:	6818      	ldr	r0, [r3, #0]
 8012d84:	4770      	bx	lr
 8012d86:	bf00      	nop
 8012d88:	20000310 	.word	0x20000310

08012d8c <__libc_init_array>:
 8012d8c:	b570      	push	{r4, r5, r6, lr}
 8012d8e:	4d0d      	ldr	r5, [pc, #52]	; (8012dc4 <__libc_init_array+0x38>)
 8012d90:	4c0d      	ldr	r4, [pc, #52]	; (8012dc8 <__libc_init_array+0x3c>)
 8012d92:	1b64      	subs	r4, r4, r5
 8012d94:	10a4      	asrs	r4, r4, #2
 8012d96:	2600      	movs	r6, #0
 8012d98:	42a6      	cmp	r6, r4
 8012d9a:	d109      	bne.n	8012db0 <__libc_init_array+0x24>
 8012d9c:	4d0b      	ldr	r5, [pc, #44]	; (8012dcc <__libc_init_array+0x40>)
 8012d9e:	4c0c      	ldr	r4, [pc, #48]	; (8012dd0 <__libc_init_array+0x44>)
 8012da0:	f003 fe38 	bl	8016a14 <_init>
 8012da4:	1b64      	subs	r4, r4, r5
 8012da6:	10a4      	asrs	r4, r4, #2
 8012da8:	2600      	movs	r6, #0
 8012daa:	42a6      	cmp	r6, r4
 8012dac:	d105      	bne.n	8012dba <__libc_init_array+0x2e>
 8012dae:	bd70      	pop	{r4, r5, r6, pc}
 8012db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012db4:	4798      	blx	r3
 8012db6:	3601      	adds	r6, #1
 8012db8:	e7ee      	b.n	8012d98 <__libc_init_array+0xc>
 8012dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8012dbe:	4798      	blx	r3
 8012dc0:	3601      	adds	r6, #1
 8012dc2:	e7f2      	b.n	8012daa <__libc_init_array+0x1e>
 8012dc4:	08018f08 	.word	0x08018f08
 8012dc8:	08018f08 	.word	0x08018f08
 8012dcc:	08018f08 	.word	0x08018f08
 8012dd0:	08018f0c 	.word	0x08018f0c

08012dd4 <__retarget_lock_init_recursive>:
 8012dd4:	4770      	bx	lr

08012dd6 <__retarget_lock_acquire_recursive>:
 8012dd6:	4770      	bx	lr

08012dd8 <__retarget_lock_release_recursive>:
 8012dd8:	4770      	bx	lr

08012dda <strcpy>:
 8012dda:	4603      	mov	r3, r0
 8012ddc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012de0:	f803 2b01 	strb.w	r2, [r3], #1
 8012de4:	2a00      	cmp	r2, #0
 8012de6:	d1f9      	bne.n	8012ddc <strcpy+0x2>
 8012de8:	4770      	bx	lr

08012dea <memcpy>:
 8012dea:	440a      	add	r2, r1
 8012dec:	4291      	cmp	r1, r2
 8012dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8012df2:	d100      	bne.n	8012df6 <memcpy+0xc>
 8012df4:	4770      	bx	lr
 8012df6:	b510      	push	{r4, lr}
 8012df8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e00:	4291      	cmp	r1, r2
 8012e02:	d1f9      	bne.n	8012df8 <memcpy+0xe>
 8012e04:	bd10      	pop	{r4, pc}
	...

08012e08 <nan>:
 8012e08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012e10 <nan+0x8>
 8012e0c:	4770      	bx	lr
 8012e0e:	bf00      	nop
 8012e10:	00000000 	.word	0x00000000
 8012e14:	7ff80000 	.word	0x7ff80000

08012e18 <nanf>:
 8012e18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012e20 <nanf+0x8>
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop
 8012e20:	7fc00000 	.word	0x7fc00000

08012e24 <__assert_func>:
 8012e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e26:	4614      	mov	r4, r2
 8012e28:	461a      	mov	r2, r3
 8012e2a:	4b09      	ldr	r3, [pc, #36]	; (8012e50 <__assert_func+0x2c>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	4605      	mov	r5, r0
 8012e30:	68d8      	ldr	r0, [r3, #12]
 8012e32:	b14c      	cbz	r4, 8012e48 <__assert_func+0x24>
 8012e34:	4b07      	ldr	r3, [pc, #28]	; (8012e54 <__assert_func+0x30>)
 8012e36:	9100      	str	r1, [sp, #0]
 8012e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e3c:	4906      	ldr	r1, [pc, #24]	; (8012e58 <__assert_func+0x34>)
 8012e3e:	462b      	mov	r3, r5
 8012e40:	f002 f8fe 	bl	8015040 <fiprintf>
 8012e44:	f002 f928 	bl	8015098 <abort>
 8012e48:	4b04      	ldr	r3, [pc, #16]	; (8012e5c <__assert_func+0x38>)
 8012e4a:	461c      	mov	r4, r3
 8012e4c:	e7f3      	b.n	8012e36 <__assert_func+0x12>
 8012e4e:	bf00      	nop
 8012e50:	20000310 	.word	0x20000310
 8012e54:	08018a93 	.word	0x08018a93
 8012e58:	08018aa0 	.word	0x08018aa0
 8012e5c:	08018ace 	.word	0x08018ace

08012e60 <quorem>:
 8012e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e64:	6903      	ldr	r3, [r0, #16]
 8012e66:	690c      	ldr	r4, [r1, #16]
 8012e68:	42a3      	cmp	r3, r4
 8012e6a:	4607      	mov	r7, r0
 8012e6c:	db7e      	blt.n	8012f6c <quorem+0x10c>
 8012e6e:	3c01      	subs	r4, #1
 8012e70:	f101 0814 	add.w	r8, r1, #20
 8012e74:	f100 0514 	add.w	r5, r0, #20
 8012e78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e7c:	9301      	str	r3, [sp, #4]
 8012e7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e86:	3301      	adds	r3, #1
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012e8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012e92:	fbb2 f6f3 	udiv	r6, r2, r3
 8012e96:	d331      	bcc.n	8012efc <quorem+0x9c>
 8012e98:	f04f 0e00 	mov.w	lr, #0
 8012e9c:	4640      	mov	r0, r8
 8012e9e:	46ac      	mov	ip, r5
 8012ea0:	46f2      	mov	sl, lr
 8012ea2:	f850 2b04 	ldr.w	r2, [r0], #4
 8012ea6:	b293      	uxth	r3, r2
 8012ea8:	fb06 e303 	mla	r3, r6, r3, lr
 8012eac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012eb0:	0c1a      	lsrs	r2, r3, #16
 8012eb2:	b29b      	uxth	r3, r3
 8012eb4:	ebaa 0303 	sub.w	r3, sl, r3
 8012eb8:	f8dc a000 	ldr.w	sl, [ip]
 8012ebc:	fa13 f38a 	uxtah	r3, r3, sl
 8012ec0:	fb06 220e 	mla	r2, r6, lr, r2
 8012ec4:	9300      	str	r3, [sp, #0]
 8012ec6:	9b00      	ldr	r3, [sp, #0]
 8012ec8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012ecc:	b292      	uxth	r2, r2
 8012ece:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012ed2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012ed6:	f8bd 3000 	ldrh.w	r3, [sp]
 8012eda:	4581      	cmp	r9, r0
 8012edc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ee0:	f84c 3b04 	str.w	r3, [ip], #4
 8012ee4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012ee8:	d2db      	bcs.n	8012ea2 <quorem+0x42>
 8012eea:	f855 300b 	ldr.w	r3, [r5, fp]
 8012eee:	b92b      	cbnz	r3, 8012efc <quorem+0x9c>
 8012ef0:	9b01      	ldr	r3, [sp, #4]
 8012ef2:	3b04      	subs	r3, #4
 8012ef4:	429d      	cmp	r5, r3
 8012ef6:	461a      	mov	r2, r3
 8012ef8:	d32c      	bcc.n	8012f54 <quorem+0xf4>
 8012efa:	613c      	str	r4, [r7, #16]
 8012efc:	4638      	mov	r0, r7
 8012efe:	f001 fca5 	bl	801484c <__mcmp>
 8012f02:	2800      	cmp	r0, #0
 8012f04:	db22      	blt.n	8012f4c <quorem+0xec>
 8012f06:	3601      	adds	r6, #1
 8012f08:	4629      	mov	r1, r5
 8012f0a:	2000      	movs	r0, #0
 8012f0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012f10:	f8d1 c000 	ldr.w	ip, [r1]
 8012f14:	b293      	uxth	r3, r2
 8012f16:	1ac3      	subs	r3, r0, r3
 8012f18:	0c12      	lsrs	r2, r2, #16
 8012f1a:	fa13 f38c 	uxtah	r3, r3, ip
 8012f1e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012f26:	b29b      	uxth	r3, r3
 8012f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f2c:	45c1      	cmp	r9, r8
 8012f2e:	f841 3b04 	str.w	r3, [r1], #4
 8012f32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012f36:	d2e9      	bcs.n	8012f0c <quorem+0xac>
 8012f38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012f3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012f40:	b922      	cbnz	r2, 8012f4c <quorem+0xec>
 8012f42:	3b04      	subs	r3, #4
 8012f44:	429d      	cmp	r5, r3
 8012f46:	461a      	mov	r2, r3
 8012f48:	d30a      	bcc.n	8012f60 <quorem+0x100>
 8012f4a:	613c      	str	r4, [r7, #16]
 8012f4c:	4630      	mov	r0, r6
 8012f4e:	b003      	add	sp, #12
 8012f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f54:	6812      	ldr	r2, [r2, #0]
 8012f56:	3b04      	subs	r3, #4
 8012f58:	2a00      	cmp	r2, #0
 8012f5a:	d1ce      	bne.n	8012efa <quorem+0x9a>
 8012f5c:	3c01      	subs	r4, #1
 8012f5e:	e7c9      	b.n	8012ef4 <quorem+0x94>
 8012f60:	6812      	ldr	r2, [r2, #0]
 8012f62:	3b04      	subs	r3, #4
 8012f64:	2a00      	cmp	r2, #0
 8012f66:	d1f0      	bne.n	8012f4a <quorem+0xea>
 8012f68:	3c01      	subs	r4, #1
 8012f6a:	e7eb      	b.n	8012f44 <quorem+0xe4>
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	e7ee      	b.n	8012f4e <quorem+0xee>

08012f70 <_dtoa_r>:
 8012f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f74:	ed2d 8b04 	vpush	{d8-d9}
 8012f78:	69c5      	ldr	r5, [r0, #28]
 8012f7a:	b093      	sub	sp, #76	; 0x4c
 8012f7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012f80:	ec57 6b10 	vmov	r6, r7, d0
 8012f84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012f88:	9107      	str	r1, [sp, #28]
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	920a      	str	r2, [sp, #40]	; 0x28
 8012f8e:	930d      	str	r3, [sp, #52]	; 0x34
 8012f90:	b975      	cbnz	r5, 8012fb0 <_dtoa_r+0x40>
 8012f92:	2010      	movs	r0, #16
 8012f94:	f7fd fe7a 	bl	8010c8c <malloc>
 8012f98:	4602      	mov	r2, r0
 8012f9a:	61e0      	str	r0, [r4, #28]
 8012f9c:	b920      	cbnz	r0, 8012fa8 <_dtoa_r+0x38>
 8012f9e:	4bae      	ldr	r3, [pc, #696]	; (8013258 <_dtoa_r+0x2e8>)
 8012fa0:	21ef      	movs	r1, #239	; 0xef
 8012fa2:	48ae      	ldr	r0, [pc, #696]	; (801325c <_dtoa_r+0x2ec>)
 8012fa4:	f7ff ff3e 	bl	8012e24 <__assert_func>
 8012fa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012fac:	6005      	str	r5, [r0, #0]
 8012fae:	60c5      	str	r5, [r0, #12]
 8012fb0:	69e3      	ldr	r3, [r4, #28]
 8012fb2:	6819      	ldr	r1, [r3, #0]
 8012fb4:	b151      	cbz	r1, 8012fcc <_dtoa_r+0x5c>
 8012fb6:	685a      	ldr	r2, [r3, #4]
 8012fb8:	604a      	str	r2, [r1, #4]
 8012fba:	2301      	movs	r3, #1
 8012fbc:	4093      	lsls	r3, r2
 8012fbe:	608b      	str	r3, [r1, #8]
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	f001 f9bd 	bl	8014340 <_Bfree>
 8012fc6:	69e3      	ldr	r3, [r4, #28]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	601a      	str	r2, [r3, #0]
 8012fcc:	1e3b      	subs	r3, r7, #0
 8012fce:	bfbb      	ittet	lt
 8012fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012fd4:	9303      	strlt	r3, [sp, #12]
 8012fd6:	2300      	movge	r3, #0
 8012fd8:	2201      	movlt	r2, #1
 8012fda:	bfac      	ite	ge
 8012fdc:	f8c8 3000 	strge.w	r3, [r8]
 8012fe0:	f8c8 2000 	strlt.w	r2, [r8]
 8012fe4:	4b9e      	ldr	r3, [pc, #632]	; (8013260 <_dtoa_r+0x2f0>)
 8012fe6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012fea:	ea33 0308 	bics.w	r3, r3, r8
 8012fee:	d11b      	bne.n	8013028 <_dtoa_r+0xb8>
 8012ff0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ff2:	f242 730f 	movw	r3, #9999	; 0x270f
 8012ff6:	6013      	str	r3, [r2, #0]
 8012ff8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012ffc:	4333      	orrs	r3, r6
 8012ffe:	f000 8593 	beq.w	8013b28 <_dtoa_r+0xbb8>
 8013002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013004:	b963      	cbnz	r3, 8013020 <_dtoa_r+0xb0>
 8013006:	4b97      	ldr	r3, [pc, #604]	; (8013264 <_dtoa_r+0x2f4>)
 8013008:	e027      	b.n	801305a <_dtoa_r+0xea>
 801300a:	4b97      	ldr	r3, [pc, #604]	; (8013268 <_dtoa_r+0x2f8>)
 801300c:	9300      	str	r3, [sp, #0]
 801300e:	3308      	adds	r3, #8
 8013010:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013012:	6013      	str	r3, [r2, #0]
 8013014:	9800      	ldr	r0, [sp, #0]
 8013016:	b013      	add	sp, #76	; 0x4c
 8013018:	ecbd 8b04 	vpop	{d8-d9}
 801301c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013020:	4b90      	ldr	r3, [pc, #576]	; (8013264 <_dtoa_r+0x2f4>)
 8013022:	9300      	str	r3, [sp, #0]
 8013024:	3303      	adds	r3, #3
 8013026:	e7f3      	b.n	8013010 <_dtoa_r+0xa0>
 8013028:	ed9d 7b02 	vldr	d7, [sp, #8]
 801302c:	2200      	movs	r2, #0
 801302e:	ec51 0b17 	vmov	r0, r1, d7
 8013032:	eeb0 8a47 	vmov.f32	s16, s14
 8013036:	eef0 8a67 	vmov.f32	s17, s15
 801303a:	2300      	movs	r3, #0
 801303c:	f7ed fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8013040:	4681      	mov	r9, r0
 8013042:	b160      	cbz	r0, 801305e <_dtoa_r+0xee>
 8013044:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013046:	2301      	movs	r3, #1
 8013048:	6013      	str	r3, [r2, #0]
 801304a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801304c:	2b00      	cmp	r3, #0
 801304e:	f000 8568 	beq.w	8013b22 <_dtoa_r+0xbb2>
 8013052:	4b86      	ldr	r3, [pc, #536]	; (801326c <_dtoa_r+0x2fc>)
 8013054:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013056:	6013      	str	r3, [r2, #0]
 8013058:	3b01      	subs	r3, #1
 801305a:	9300      	str	r3, [sp, #0]
 801305c:	e7da      	b.n	8013014 <_dtoa_r+0xa4>
 801305e:	aa10      	add	r2, sp, #64	; 0x40
 8013060:	a911      	add	r1, sp, #68	; 0x44
 8013062:	4620      	mov	r0, r4
 8013064:	eeb0 0a48 	vmov.f32	s0, s16
 8013068:	eef0 0a68 	vmov.f32	s1, s17
 801306c:	f001 fd04 	bl	8014a78 <__d2b>
 8013070:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013074:	4682      	mov	sl, r0
 8013076:	2d00      	cmp	r5, #0
 8013078:	d07f      	beq.n	801317a <_dtoa_r+0x20a>
 801307a:	ee18 3a90 	vmov	r3, s17
 801307e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013082:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013086:	ec51 0b18 	vmov	r0, r1, d8
 801308a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801308e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013092:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8013096:	4619      	mov	r1, r3
 8013098:	2200      	movs	r2, #0
 801309a:	4b75      	ldr	r3, [pc, #468]	; (8013270 <_dtoa_r+0x300>)
 801309c:	f7ed f8f4 	bl	8000288 <__aeabi_dsub>
 80130a0:	a367      	add	r3, pc, #412	; (adr r3, 8013240 <_dtoa_r+0x2d0>)
 80130a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a6:	f7ed faa7 	bl	80005f8 <__aeabi_dmul>
 80130aa:	a367      	add	r3, pc, #412	; (adr r3, 8013248 <_dtoa_r+0x2d8>)
 80130ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b0:	f7ed f8ec 	bl	800028c <__adddf3>
 80130b4:	4606      	mov	r6, r0
 80130b6:	4628      	mov	r0, r5
 80130b8:	460f      	mov	r7, r1
 80130ba:	f7ed fa33 	bl	8000524 <__aeabi_i2d>
 80130be:	a364      	add	r3, pc, #400	; (adr r3, 8013250 <_dtoa_r+0x2e0>)
 80130c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c4:	f7ed fa98 	bl	80005f8 <__aeabi_dmul>
 80130c8:	4602      	mov	r2, r0
 80130ca:	460b      	mov	r3, r1
 80130cc:	4630      	mov	r0, r6
 80130ce:	4639      	mov	r1, r7
 80130d0:	f7ed f8dc 	bl	800028c <__adddf3>
 80130d4:	4606      	mov	r6, r0
 80130d6:	460f      	mov	r7, r1
 80130d8:	f7ed fd3e 	bl	8000b58 <__aeabi_d2iz>
 80130dc:	2200      	movs	r2, #0
 80130de:	4683      	mov	fp, r0
 80130e0:	2300      	movs	r3, #0
 80130e2:	4630      	mov	r0, r6
 80130e4:	4639      	mov	r1, r7
 80130e6:	f7ed fcf9 	bl	8000adc <__aeabi_dcmplt>
 80130ea:	b148      	cbz	r0, 8013100 <_dtoa_r+0x190>
 80130ec:	4658      	mov	r0, fp
 80130ee:	f7ed fa19 	bl	8000524 <__aeabi_i2d>
 80130f2:	4632      	mov	r2, r6
 80130f4:	463b      	mov	r3, r7
 80130f6:	f7ed fce7 	bl	8000ac8 <__aeabi_dcmpeq>
 80130fa:	b908      	cbnz	r0, 8013100 <_dtoa_r+0x190>
 80130fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013100:	f1bb 0f16 	cmp.w	fp, #22
 8013104:	d857      	bhi.n	80131b6 <_dtoa_r+0x246>
 8013106:	4b5b      	ldr	r3, [pc, #364]	; (8013274 <_dtoa_r+0x304>)
 8013108:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013110:	ec51 0b18 	vmov	r0, r1, d8
 8013114:	f7ed fce2 	bl	8000adc <__aeabi_dcmplt>
 8013118:	2800      	cmp	r0, #0
 801311a:	d04e      	beq.n	80131ba <_dtoa_r+0x24a>
 801311c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013120:	2300      	movs	r3, #0
 8013122:	930c      	str	r3, [sp, #48]	; 0x30
 8013124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013126:	1b5b      	subs	r3, r3, r5
 8013128:	1e5a      	subs	r2, r3, #1
 801312a:	bf45      	ittet	mi
 801312c:	f1c3 0301 	rsbmi	r3, r3, #1
 8013130:	9305      	strmi	r3, [sp, #20]
 8013132:	2300      	movpl	r3, #0
 8013134:	2300      	movmi	r3, #0
 8013136:	9206      	str	r2, [sp, #24]
 8013138:	bf54      	ite	pl
 801313a:	9305      	strpl	r3, [sp, #20]
 801313c:	9306      	strmi	r3, [sp, #24]
 801313e:	f1bb 0f00 	cmp.w	fp, #0
 8013142:	db3c      	blt.n	80131be <_dtoa_r+0x24e>
 8013144:	9b06      	ldr	r3, [sp, #24]
 8013146:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801314a:	445b      	add	r3, fp
 801314c:	9306      	str	r3, [sp, #24]
 801314e:	2300      	movs	r3, #0
 8013150:	9308      	str	r3, [sp, #32]
 8013152:	9b07      	ldr	r3, [sp, #28]
 8013154:	2b09      	cmp	r3, #9
 8013156:	d868      	bhi.n	801322a <_dtoa_r+0x2ba>
 8013158:	2b05      	cmp	r3, #5
 801315a:	bfc4      	itt	gt
 801315c:	3b04      	subgt	r3, #4
 801315e:	9307      	strgt	r3, [sp, #28]
 8013160:	9b07      	ldr	r3, [sp, #28]
 8013162:	f1a3 0302 	sub.w	r3, r3, #2
 8013166:	bfcc      	ite	gt
 8013168:	2500      	movgt	r5, #0
 801316a:	2501      	movle	r5, #1
 801316c:	2b03      	cmp	r3, #3
 801316e:	f200 8085 	bhi.w	801327c <_dtoa_r+0x30c>
 8013172:	e8df f003 	tbb	[pc, r3]
 8013176:	3b2e      	.short	0x3b2e
 8013178:	5839      	.short	0x5839
 801317a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801317e:	441d      	add	r5, r3
 8013180:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013184:	2b20      	cmp	r3, #32
 8013186:	bfc1      	itttt	gt
 8013188:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801318c:	fa08 f803 	lslgt.w	r8, r8, r3
 8013190:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8013194:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013198:	bfd6      	itet	le
 801319a:	f1c3 0320 	rsble	r3, r3, #32
 801319e:	ea48 0003 	orrgt.w	r0, r8, r3
 80131a2:	fa06 f003 	lslle.w	r0, r6, r3
 80131a6:	f7ed f9ad 	bl	8000504 <__aeabi_ui2d>
 80131aa:	2201      	movs	r2, #1
 80131ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80131b0:	3d01      	subs	r5, #1
 80131b2:	920e      	str	r2, [sp, #56]	; 0x38
 80131b4:	e76f      	b.n	8013096 <_dtoa_r+0x126>
 80131b6:	2301      	movs	r3, #1
 80131b8:	e7b3      	b.n	8013122 <_dtoa_r+0x1b2>
 80131ba:	900c      	str	r0, [sp, #48]	; 0x30
 80131bc:	e7b2      	b.n	8013124 <_dtoa_r+0x1b4>
 80131be:	9b05      	ldr	r3, [sp, #20]
 80131c0:	eba3 030b 	sub.w	r3, r3, fp
 80131c4:	9305      	str	r3, [sp, #20]
 80131c6:	f1cb 0300 	rsb	r3, fp, #0
 80131ca:	9308      	str	r3, [sp, #32]
 80131cc:	2300      	movs	r3, #0
 80131ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80131d0:	e7bf      	b.n	8013152 <_dtoa_r+0x1e2>
 80131d2:	2300      	movs	r3, #0
 80131d4:	9309      	str	r3, [sp, #36]	; 0x24
 80131d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131d8:	2b00      	cmp	r3, #0
 80131da:	dc52      	bgt.n	8013282 <_dtoa_r+0x312>
 80131dc:	2301      	movs	r3, #1
 80131de:	9301      	str	r3, [sp, #4]
 80131e0:	9304      	str	r3, [sp, #16]
 80131e2:	461a      	mov	r2, r3
 80131e4:	920a      	str	r2, [sp, #40]	; 0x28
 80131e6:	e00b      	b.n	8013200 <_dtoa_r+0x290>
 80131e8:	2301      	movs	r3, #1
 80131ea:	e7f3      	b.n	80131d4 <_dtoa_r+0x264>
 80131ec:	2300      	movs	r3, #0
 80131ee:	9309      	str	r3, [sp, #36]	; 0x24
 80131f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131f2:	445b      	add	r3, fp
 80131f4:	9301      	str	r3, [sp, #4]
 80131f6:	3301      	adds	r3, #1
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	9304      	str	r3, [sp, #16]
 80131fc:	bfb8      	it	lt
 80131fe:	2301      	movlt	r3, #1
 8013200:	69e0      	ldr	r0, [r4, #28]
 8013202:	2100      	movs	r1, #0
 8013204:	2204      	movs	r2, #4
 8013206:	f102 0614 	add.w	r6, r2, #20
 801320a:	429e      	cmp	r6, r3
 801320c:	d93d      	bls.n	801328a <_dtoa_r+0x31a>
 801320e:	6041      	str	r1, [r0, #4]
 8013210:	4620      	mov	r0, r4
 8013212:	f001 f855 	bl	80142c0 <_Balloc>
 8013216:	9000      	str	r0, [sp, #0]
 8013218:	2800      	cmp	r0, #0
 801321a:	d139      	bne.n	8013290 <_dtoa_r+0x320>
 801321c:	4b16      	ldr	r3, [pc, #88]	; (8013278 <_dtoa_r+0x308>)
 801321e:	4602      	mov	r2, r0
 8013220:	f240 11af 	movw	r1, #431	; 0x1af
 8013224:	e6bd      	b.n	8012fa2 <_dtoa_r+0x32>
 8013226:	2301      	movs	r3, #1
 8013228:	e7e1      	b.n	80131ee <_dtoa_r+0x27e>
 801322a:	2501      	movs	r5, #1
 801322c:	2300      	movs	r3, #0
 801322e:	9307      	str	r3, [sp, #28]
 8013230:	9509      	str	r5, [sp, #36]	; 0x24
 8013232:	f04f 33ff 	mov.w	r3, #4294967295
 8013236:	9301      	str	r3, [sp, #4]
 8013238:	9304      	str	r3, [sp, #16]
 801323a:	2200      	movs	r2, #0
 801323c:	2312      	movs	r3, #18
 801323e:	e7d1      	b.n	80131e4 <_dtoa_r+0x274>
 8013240:	636f4361 	.word	0x636f4361
 8013244:	3fd287a7 	.word	0x3fd287a7
 8013248:	8b60c8b3 	.word	0x8b60c8b3
 801324c:	3fc68a28 	.word	0x3fc68a28
 8013250:	509f79fb 	.word	0x509f79fb
 8013254:	3fd34413 	.word	0x3fd34413
 8013258:	08018a1a 	.word	0x08018a1a
 801325c:	08018adc 	.word	0x08018adc
 8013260:	7ff00000 	.word	0x7ff00000
 8013264:	08018ad8 	.word	0x08018ad8
 8013268:	08018acf 	.word	0x08018acf
 801326c:	080189f2 	.word	0x080189f2
 8013270:	3ff80000 	.word	0x3ff80000
 8013274:	08018c28 	.word	0x08018c28
 8013278:	08018b34 	.word	0x08018b34
 801327c:	2301      	movs	r3, #1
 801327e:	9309      	str	r3, [sp, #36]	; 0x24
 8013280:	e7d7      	b.n	8013232 <_dtoa_r+0x2c2>
 8013282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013284:	9301      	str	r3, [sp, #4]
 8013286:	9304      	str	r3, [sp, #16]
 8013288:	e7ba      	b.n	8013200 <_dtoa_r+0x290>
 801328a:	3101      	adds	r1, #1
 801328c:	0052      	lsls	r2, r2, #1
 801328e:	e7ba      	b.n	8013206 <_dtoa_r+0x296>
 8013290:	69e3      	ldr	r3, [r4, #28]
 8013292:	9a00      	ldr	r2, [sp, #0]
 8013294:	601a      	str	r2, [r3, #0]
 8013296:	9b04      	ldr	r3, [sp, #16]
 8013298:	2b0e      	cmp	r3, #14
 801329a:	f200 80a8 	bhi.w	80133ee <_dtoa_r+0x47e>
 801329e:	2d00      	cmp	r5, #0
 80132a0:	f000 80a5 	beq.w	80133ee <_dtoa_r+0x47e>
 80132a4:	f1bb 0f00 	cmp.w	fp, #0
 80132a8:	dd38      	ble.n	801331c <_dtoa_r+0x3ac>
 80132aa:	4bc0      	ldr	r3, [pc, #768]	; (80135ac <_dtoa_r+0x63c>)
 80132ac:	f00b 020f 	and.w	r2, fp, #15
 80132b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80132b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80132bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80132c0:	d019      	beq.n	80132f6 <_dtoa_r+0x386>
 80132c2:	4bbb      	ldr	r3, [pc, #748]	; (80135b0 <_dtoa_r+0x640>)
 80132c4:	ec51 0b18 	vmov	r0, r1, d8
 80132c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80132cc:	f7ed fabe 	bl	800084c <__aeabi_ddiv>
 80132d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132d4:	f008 080f 	and.w	r8, r8, #15
 80132d8:	2503      	movs	r5, #3
 80132da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80135b0 <_dtoa_r+0x640>
 80132de:	f1b8 0f00 	cmp.w	r8, #0
 80132e2:	d10a      	bne.n	80132fa <_dtoa_r+0x38a>
 80132e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132e8:	4632      	mov	r2, r6
 80132ea:	463b      	mov	r3, r7
 80132ec:	f7ed faae 	bl	800084c <__aeabi_ddiv>
 80132f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132f4:	e02b      	b.n	801334e <_dtoa_r+0x3de>
 80132f6:	2502      	movs	r5, #2
 80132f8:	e7ef      	b.n	80132da <_dtoa_r+0x36a>
 80132fa:	f018 0f01 	tst.w	r8, #1
 80132fe:	d008      	beq.n	8013312 <_dtoa_r+0x3a2>
 8013300:	4630      	mov	r0, r6
 8013302:	4639      	mov	r1, r7
 8013304:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013308:	f7ed f976 	bl	80005f8 <__aeabi_dmul>
 801330c:	3501      	adds	r5, #1
 801330e:	4606      	mov	r6, r0
 8013310:	460f      	mov	r7, r1
 8013312:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013316:	f109 0908 	add.w	r9, r9, #8
 801331a:	e7e0      	b.n	80132de <_dtoa_r+0x36e>
 801331c:	f000 809f 	beq.w	801345e <_dtoa_r+0x4ee>
 8013320:	f1cb 0600 	rsb	r6, fp, #0
 8013324:	4ba1      	ldr	r3, [pc, #644]	; (80135ac <_dtoa_r+0x63c>)
 8013326:	4fa2      	ldr	r7, [pc, #648]	; (80135b0 <_dtoa_r+0x640>)
 8013328:	f006 020f 	and.w	r2, r6, #15
 801332c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013334:	ec51 0b18 	vmov	r0, r1, d8
 8013338:	f7ed f95e 	bl	80005f8 <__aeabi_dmul>
 801333c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013340:	1136      	asrs	r6, r6, #4
 8013342:	2300      	movs	r3, #0
 8013344:	2502      	movs	r5, #2
 8013346:	2e00      	cmp	r6, #0
 8013348:	d17e      	bne.n	8013448 <_dtoa_r+0x4d8>
 801334a:	2b00      	cmp	r3, #0
 801334c:	d1d0      	bne.n	80132f0 <_dtoa_r+0x380>
 801334e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013350:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013354:	2b00      	cmp	r3, #0
 8013356:	f000 8084 	beq.w	8013462 <_dtoa_r+0x4f2>
 801335a:	4b96      	ldr	r3, [pc, #600]	; (80135b4 <_dtoa_r+0x644>)
 801335c:	2200      	movs	r2, #0
 801335e:	4640      	mov	r0, r8
 8013360:	4649      	mov	r1, r9
 8013362:	f7ed fbbb 	bl	8000adc <__aeabi_dcmplt>
 8013366:	2800      	cmp	r0, #0
 8013368:	d07b      	beq.n	8013462 <_dtoa_r+0x4f2>
 801336a:	9b04      	ldr	r3, [sp, #16]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d078      	beq.n	8013462 <_dtoa_r+0x4f2>
 8013370:	9b01      	ldr	r3, [sp, #4]
 8013372:	2b00      	cmp	r3, #0
 8013374:	dd39      	ble.n	80133ea <_dtoa_r+0x47a>
 8013376:	4b90      	ldr	r3, [pc, #576]	; (80135b8 <_dtoa_r+0x648>)
 8013378:	2200      	movs	r2, #0
 801337a:	4640      	mov	r0, r8
 801337c:	4649      	mov	r1, r9
 801337e:	f7ed f93b 	bl	80005f8 <__aeabi_dmul>
 8013382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013386:	9e01      	ldr	r6, [sp, #4]
 8013388:	f10b 37ff 	add.w	r7, fp, #4294967295
 801338c:	3501      	adds	r5, #1
 801338e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013392:	4628      	mov	r0, r5
 8013394:	f7ed f8c6 	bl	8000524 <__aeabi_i2d>
 8013398:	4642      	mov	r2, r8
 801339a:	464b      	mov	r3, r9
 801339c:	f7ed f92c 	bl	80005f8 <__aeabi_dmul>
 80133a0:	4b86      	ldr	r3, [pc, #536]	; (80135bc <_dtoa_r+0x64c>)
 80133a2:	2200      	movs	r2, #0
 80133a4:	f7ec ff72 	bl	800028c <__adddf3>
 80133a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80133ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133b0:	9303      	str	r3, [sp, #12]
 80133b2:	2e00      	cmp	r6, #0
 80133b4:	d158      	bne.n	8013468 <_dtoa_r+0x4f8>
 80133b6:	4b82      	ldr	r3, [pc, #520]	; (80135c0 <_dtoa_r+0x650>)
 80133b8:	2200      	movs	r2, #0
 80133ba:	4640      	mov	r0, r8
 80133bc:	4649      	mov	r1, r9
 80133be:	f7ec ff63 	bl	8000288 <__aeabi_dsub>
 80133c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133c6:	4680      	mov	r8, r0
 80133c8:	4689      	mov	r9, r1
 80133ca:	f7ed fba5 	bl	8000b18 <__aeabi_dcmpgt>
 80133ce:	2800      	cmp	r0, #0
 80133d0:	f040 8296 	bne.w	8013900 <_dtoa_r+0x990>
 80133d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80133d8:	4640      	mov	r0, r8
 80133da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80133de:	4649      	mov	r1, r9
 80133e0:	f7ed fb7c 	bl	8000adc <__aeabi_dcmplt>
 80133e4:	2800      	cmp	r0, #0
 80133e6:	f040 8289 	bne.w	80138fc <_dtoa_r+0x98c>
 80133ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80133ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	f2c0 814e 	blt.w	8013692 <_dtoa_r+0x722>
 80133f6:	f1bb 0f0e 	cmp.w	fp, #14
 80133fa:	f300 814a 	bgt.w	8013692 <_dtoa_r+0x722>
 80133fe:	4b6b      	ldr	r3, [pc, #428]	; (80135ac <_dtoa_r+0x63c>)
 8013400:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013404:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801340a:	2b00      	cmp	r3, #0
 801340c:	f280 80dc 	bge.w	80135c8 <_dtoa_r+0x658>
 8013410:	9b04      	ldr	r3, [sp, #16]
 8013412:	2b00      	cmp	r3, #0
 8013414:	f300 80d8 	bgt.w	80135c8 <_dtoa_r+0x658>
 8013418:	f040 826f 	bne.w	80138fa <_dtoa_r+0x98a>
 801341c:	4b68      	ldr	r3, [pc, #416]	; (80135c0 <_dtoa_r+0x650>)
 801341e:	2200      	movs	r2, #0
 8013420:	4640      	mov	r0, r8
 8013422:	4649      	mov	r1, r9
 8013424:	f7ed f8e8 	bl	80005f8 <__aeabi_dmul>
 8013428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801342c:	f7ed fb6a 	bl	8000b04 <__aeabi_dcmpge>
 8013430:	9e04      	ldr	r6, [sp, #16]
 8013432:	4637      	mov	r7, r6
 8013434:	2800      	cmp	r0, #0
 8013436:	f040 8245 	bne.w	80138c4 <_dtoa_r+0x954>
 801343a:	9d00      	ldr	r5, [sp, #0]
 801343c:	2331      	movs	r3, #49	; 0x31
 801343e:	f805 3b01 	strb.w	r3, [r5], #1
 8013442:	f10b 0b01 	add.w	fp, fp, #1
 8013446:	e241      	b.n	80138cc <_dtoa_r+0x95c>
 8013448:	07f2      	lsls	r2, r6, #31
 801344a:	d505      	bpl.n	8013458 <_dtoa_r+0x4e8>
 801344c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013450:	f7ed f8d2 	bl	80005f8 <__aeabi_dmul>
 8013454:	3501      	adds	r5, #1
 8013456:	2301      	movs	r3, #1
 8013458:	1076      	asrs	r6, r6, #1
 801345a:	3708      	adds	r7, #8
 801345c:	e773      	b.n	8013346 <_dtoa_r+0x3d6>
 801345e:	2502      	movs	r5, #2
 8013460:	e775      	b.n	801334e <_dtoa_r+0x3de>
 8013462:	9e04      	ldr	r6, [sp, #16]
 8013464:	465f      	mov	r7, fp
 8013466:	e792      	b.n	801338e <_dtoa_r+0x41e>
 8013468:	9900      	ldr	r1, [sp, #0]
 801346a:	4b50      	ldr	r3, [pc, #320]	; (80135ac <_dtoa_r+0x63c>)
 801346c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013470:	4431      	add	r1, r6
 8013472:	9102      	str	r1, [sp, #8]
 8013474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013476:	eeb0 9a47 	vmov.f32	s18, s14
 801347a:	eef0 9a67 	vmov.f32	s19, s15
 801347e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013482:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013486:	2900      	cmp	r1, #0
 8013488:	d044      	beq.n	8013514 <_dtoa_r+0x5a4>
 801348a:	494e      	ldr	r1, [pc, #312]	; (80135c4 <_dtoa_r+0x654>)
 801348c:	2000      	movs	r0, #0
 801348e:	f7ed f9dd 	bl	800084c <__aeabi_ddiv>
 8013492:	ec53 2b19 	vmov	r2, r3, d9
 8013496:	f7ec fef7 	bl	8000288 <__aeabi_dsub>
 801349a:	9d00      	ldr	r5, [sp, #0]
 801349c:	ec41 0b19 	vmov	d9, r0, r1
 80134a0:	4649      	mov	r1, r9
 80134a2:	4640      	mov	r0, r8
 80134a4:	f7ed fb58 	bl	8000b58 <__aeabi_d2iz>
 80134a8:	4606      	mov	r6, r0
 80134aa:	f7ed f83b 	bl	8000524 <__aeabi_i2d>
 80134ae:	4602      	mov	r2, r0
 80134b0:	460b      	mov	r3, r1
 80134b2:	4640      	mov	r0, r8
 80134b4:	4649      	mov	r1, r9
 80134b6:	f7ec fee7 	bl	8000288 <__aeabi_dsub>
 80134ba:	3630      	adds	r6, #48	; 0x30
 80134bc:	f805 6b01 	strb.w	r6, [r5], #1
 80134c0:	ec53 2b19 	vmov	r2, r3, d9
 80134c4:	4680      	mov	r8, r0
 80134c6:	4689      	mov	r9, r1
 80134c8:	f7ed fb08 	bl	8000adc <__aeabi_dcmplt>
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d164      	bne.n	801359a <_dtoa_r+0x62a>
 80134d0:	4642      	mov	r2, r8
 80134d2:	464b      	mov	r3, r9
 80134d4:	4937      	ldr	r1, [pc, #220]	; (80135b4 <_dtoa_r+0x644>)
 80134d6:	2000      	movs	r0, #0
 80134d8:	f7ec fed6 	bl	8000288 <__aeabi_dsub>
 80134dc:	ec53 2b19 	vmov	r2, r3, d9
 80134e0:	f7ed fafc 	bl	8000adc <__aeabi_dcmplt>
 80134e4:	2800      	cmp	r0, #0
 80134e6:	f040 80b6 	bne.w	8013656 <_dtoa_r+0x6e6>
 80134ea:	9b02      	ldr	r3, [sp, #8]
 80134ec:	429d      	cmp	r5, r3
 80134ee:	f43f af7c 	beq.w	80133ea <_dtoa_r+0x47a>
 80134f2:	4b31      	ldr	r3, [pc, #196]	; (80135b8 <_dtoa_r+0x648>)
 80134f4:	ec51 0b19 	vmov	r0, r1, d9
 80134f8:	2200      	movs	r2, #0
 80134fa:	f7ed f87d 	bl	80005f8 <__aeabi_dmul>
 80134fe:	4b2e      	ldr	r3, [pc, #184]	; (80135b8 <_dtoa_r+0x648>)
 8013500:	ec41 0b19 	vmov	d9, r0, r1
 8013504:	2200      	movs	r2, #0
 8013506:	4640      	mov	r0, r8
 8013508:	4649      	mov	r1, r9
 801350a:	f7ed f875 	bl	80005f8 <__aeabi_dmul>
 801350e:	4680      	mov	r8, r0
 8013510:	4689      	mov	r9, r1
 8013512:	e7c5      	b.n	80134a0 <_dtoa_r+0x530>
 8013514:	ec51 0b17 	vmov	r0, r1, d7
 8013518:	f7ed f86e 	bl	80005f8 <__aeabi_dmul>
 801351c:	9b02      	ldr	r3, [sp, #8]
 801351e:	9d00      	ldr	r5, [sp, #0]
 8013520:	930f      	str	r3, [sp, #60]	; 0x3c
 8013522:	ec41 0b19 	vmov	d9, r0, r1
 8013526:	4649      	mov	r1, r9
 8013528:	4640      	mov	r0, r8
 801352a:	f7ed fb15 	bl	8000b58 <__aeabi_d2iz>
 801352e:	4606      	mov	r6, r0
 8013530:	f7ec fff8 	bl	8000524 <__aeabi_i2d>
 8013534:	3630      	adds	r6, #48	; 0x30
 8013536:	4602      	mov	r2, r0
 8013538:	460b      	mov	r3, r1
 801353a:	4640      	mov	r0, r8
 801353c:	4649      	mov	r1, r9
 801353e:	f7ec fea3 	bl	8000288 <__aeabi_dsub>
 8013542:	f805 6b01 	strb.w	r6, [r5], #1
 8013546:	9b02      	ldr	r3, [sp, #8]
 8013548:	429d      	cmp	r5, r3
 801354a:	4680      	mov	r8, r0
 801354c:	4689      	mov	r9, r1
 801354e:	f04f 0200 	mov.w	r2, #0
 8013552:	d124      	bne.n	801359e <_dtoa_r+0x62e>
 8013554:	4b1b      	ldr	r3, [pc, #108]	; (80135c4 <_dtoa_r+0x654>)
 8013556:	ec51 0b19 	vmov	r0, r1, d9
 801355a:	f7ec fe97 	bl	800028c <__adddf3>
 801355e:	4602      	mov	r2, r0
 8013560:	460b      	mov	r3, r1
 8013562:	4640      	mov	r0, r8
 8013564:	4649      	mov	r1, r9
 8013566:	f7ed fad7 	bl	8000b18 <__aeabi_dcmpgt>
 801356a:	2800      	cmp	r0, #0
 801356c:	d173      	bne.n	8013656 <_dtoa_r+0x6e6>
 801356e:	ec53 2b19 	vmov	r2, r3, d9
 8013572:	4914      	ldr	r1, [pc, #80]	; (80135c4 <_dtoa_r+0x654>)
 8013574:	2000      	movs	r0, #0
 8013576:	f7ec fe87 	bl	8000288 <__aeabi_dsub>
 801357a:	4602      	mov	r2, r0
 801357c:	460b      	mov	r3, r1
 801357e:	4640      	mov	r0, r8
 8013580:	4649      	mov	r1, r9
 8013582:	f7ed faab 	bl	8000adc <__aeabi_dcmplt>
 8013586:	2800      	cmp	r0, #0
 8013588:	f43f af2f 	beq.w	80133ea <_dtoa_r+0x47a>
 801358c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801358e:	1e6b      	subs	r3, r5, #1
 8013590:	930f      	str	r3, [sp, #60]	; 0x3c
 8013592:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013596:	2b30      	cmp	r3, #48	; 0x30
 8013598:	d0f8      	beq.n	801358c <_dtoa_r+0x61c>
 801359a:	46bb      	mov	fp, r7
 801359c:	e04a      	b.n	8013634 <_dtoa_r+0x6c4>
 801359e:	4b06      	ldr	r3, [pc, #24]	; (80135b8 <_dtoa_r+0x648>)
 80135a0:	f7ed f82a 	bl	80005f8 <__aeabi_dmul>
 80135a4:	4680      	mov	r8, r0
 80135a6:	4689      	mov	r9, r1
 80135a8:	e7bd      	b.n	8013526 <_dtoa_r+0x5b6>
 80135aa:	bf00      	nop
 80135ac:	08018c28 	.word	0x08018c28
 80135b0:	08018c00 	.word	0x08018c00
 80135b4:	3ff00000 	.word	0x3ff00000
 80135b8:	40240000 	.word	0x40240000
 80135bc:	401c0000 	.word	0x401c0000
 80135c0:	40140000 	.word	0x40140000
 80135c4:	3fe00000 	.word	0x3fe00000
 80135c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80135cc:	9d00      	ldr	r5, [sp, #0]
 80135ce:	4642      	mov	r2, r8
 80135d0:	464b      	mov	r3, r9
 80135d2:	4630      	mov	r0, r6
 80135d4:	4639      	mov	r1, r7
 80135d6:	f7ed f939 	bl	800084c <__aeabi_ddiv>
 80135da:	f7ed fabd 	bl	8000b58 <__aeabi_d2iz>
 80135de:	9001      	str	r0, [sp, #4]
 80135e0:	f7ec ffa0 	bl	8000524 <__aeabi_i2d>
 80135e4:	4642      	mov	r2, r8
 80135e6:	464b      	mov	r3, r9
 80135e8:	f7ed f806 	bl	80005f8 <__aeabi_dmul>
 80135ec:	4602      	mov	r2, r0
 80135ee:	460b      	mov	r3, r1
 80135f0:	4630      	mov	r0, r6
 80135f2:	4639      	mov	r1, r7
 80135f4:	f7ec fe48 	bl	8000288 <__aeabi_dsub>
 80135f8:	9e01      	ldr	r6, [sp, #4]
 80135fa:	9f04      	ldr	r7, [sp, #16]
 80135fc:	3630      	adds	r6, #48	; 0x30
 80135fe:	f805 6b01 	strb.w	r6, [r5], #1
 8013602:	9e00      	ldr	r6, [sp, #0]
 8013604:	1bae      	subs	r6, r5, r6
 8013606:	42b7      	cmp	r7, r6
 8013608:	4602      	mov	r2, r0
 801360a:	460b      	mov	r3, r1
 801360c:	d134      	bne.n	8013678 <_dtoa_r+0x708>
 801360e:	f7ec fe3d 	bl	800028c <__adddf3>
 8013612:	4642      	mov	r2, r8
 8013614:	464b      	mov	r3, r9
 8013616:	4606      	mov	r6, r0
 8013618:	460f      	mov	r7, r1
 801361a:	f7ed fa7d 	bl	8000b18 <__aeabi_dcmpgt>
 801361e:	b9c8      	cbnz	r0, 8013654 <_dtoa_r+0x6e4>
 8013620:	4642      	mov	r2, r8
 8013622:	464b      	mov	r3, r9
 8013624:	4630      	mov	r0, r6
 8013626:	4639      	mov	r1, r7
 8013628:	f7ed fa4e 	bl	8000ac8 <__aeabi_dcmpeq>
 801362c:	b110      	cbz	r0, 8013634 <_dtoa_r+0x6c4>
 801362e:	9b01      	ldr	r3, [sp, #4]
 8013630:	07db      	lsls	r3, r3, #31
 8013632:	d40f      	bmi.n	8013654 <_dtoa_r+0x6e4>
 8013634:	4651      	mov	r1, sl
 8013636:	4620      	mov	r0, r4
 8013638:	f000 fe82 	bl	8014340 <_Bfree>
 801363c:	2300      	movs	r3, #0
 801363e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013640:	702b      	strb	r3, [r5, #0]
 8013642:	f10b 0301 	add.w	r3, fp, #1
 8013646:	6013      	str	r3, [r2, #0]
 8013648:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801364a:	2b00      	cmp	r3, #0
 801364c:	f43f ace2 	beq.w	8013014 <_dtoa_r+0xa4>
 8013650:	601d      	str	r5, [r3, #0]
 8013652:	e4df      	b.n	8013014 <_dtoa_r+0xa4>
 8013654:	465f      	mov	r7, fp
 8013656:	462b      	mov	r3, r5
 8013658:	461d      	mov	r5, r3
 801365a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801365e:	2a39      	cmp	r2, #57	; 0x39
 8013660:	d106      	bne.n	8013670 <_dtoa_r+0x700>
 8013662:	9a00      	ldr	r2, [sp, #0]
 8013664:	429a      	cmp	r2, r3
 8013666:	d1f7      	bne.n	8013658 <_dtoa_r+0x6e8>
 8013668:	9900      	ldr	r1, [sp, #0]
 801366a:	2230      	movs	r2, #48	; 0x30
 801366c:	3701      	adds	r7, #1
 801366e:	700a      	strb	r2, [r1, #0]
 8013670:	781a      	ldrb	r2, [r3, #0]
 8013672:	3201      	adds	r2, #1
 8013674:	701a      	strb	r2, [r3, #0]
 8013676:	e790      	b.n	801359a <_dtoa_r+0x62a>
 8013678:	4ba3      	ldr	r3, [pc, #652]	; (8013908 <_dtoa_r+0x998>)
 801367a:	2200      	movs	r2, #0
 801367c:	f7ec ffbc 	bl	80005f8 <__aeabi_dmul>
 8013680:	2200      	movs	r2, #0
 8013682:	2300      	movs	r3, #0
 8013684:	4606      	mov	r6, r0
 8013686:	460f      	mov	r7, r1
 8013688:	f7ed fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 801368c:	2800      	cmp	r0, #0
 801368e:	d09e      	beq.n	80135ce <_dtoa_r+0x65e>
 8013690:	e7d0      	b.n	8013634 <_dtoa_r+0x6c4>
 8013692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013694:	2a00      	cmp	r2, #0
 8013696:	f000 80ca 	beq.w	801382e <_dtoa_r+0x8be>
 801369a:	9a07      	ldr	r2, [sp, #28]
 801369c:	2a01      	cmp	r2, #1
 801369e:	f300 80ad 	bgt.w	80137fc <_dtoa_r+0x88c>
 80136a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136a4:	2a00      	cmp	r2, #0
 80136a6:	f000 80a5 	beq.w	80137f4 <_dtoa_r+0x884>
 80136aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80136ae:	9e08      	ldr	r6, [sp, #32]
 80136b0:	9d05      	ldr	r5, [sp, #20]
 80136b2:	9a05      	ldr	r2, [sp, #20]
 80136b4:	441a      	add	r2, r3
 80136b6:	9205      	str	r2, [sp, #20]
 80136b8:	9a06      	ldr	r2, [sp, #24]
 80136ba:	2101      	movs	r1, #1
 80136bc:	441a      	add	r2, r3
 80136be:	4620      	mov	r0, r4
 80136c0:	9206      	str	r2, [sp, #24]
 80136c2:	f000 ff3d 	bl	8014540 <__i2b>
 80136c6:	4607      	mov	r7, r0
 80136c8:	b165      	cbz	r5, 80136e4 <_dtoa_r+0x774>
 80136ca:	9b06      	ldr	r3, [sp, #24]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	dd09      	ble.n	80136e4 <_dtoa_r+0x774>
 80136d0:	42ab      	cmp	r3, r5
 80136d2:	9a05      	ldr	r2, [sp, #20]
 80136d4:	bfa8      	it	ge
 80136d6:	462b      	movge	r3, r5
 80136d8:	1ad2      	subs	r2, r2, r3
 80136da:	9205      	str	r2, [sp, #20]
 80136dc:	9a06      	ldr	r2, [sp, #24]
 80136de:	1aed      	subs	r5, r5, r3
 80136e0:	1ad3      	subs	r3, r2, r3
 80136e2:	9306      	str	r3, [sp, #24]
 80136e4:	9b08      	ldr	r3, [sp, #32]
 80136e6:	b1f3      	cbz	r3, 8013726 <_dtoa_r+0x7b6>
 80136e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f000 80a3 	beq.w	8013836 <_dtoa_r+0x8c6>
 80136f0:	2e00      	cmp	r6, #0
 80136f2:	dd10      	ble.n	8013716 <_dtoa_r+0x7a6>
 80136f4:	4639      	mov	r1, r7
 80136f6:	4632      	mov	r2, r6
 80136f8:	4620      	mov	r0, r4
 80136fa:	f000 ffe1 	bl	80146c0 <__pow5mult>
 80136fe:	4652      	mov	r2, sl
 8013700:	4601      	mov	r1, r0
 8013702:	4607      	mov	r7, r0
 8013704:	4620      	mov	r0, r4
 8013706:	f000 ff31 	bl	801456c <__multiply>
 801370a:	4651      	mov	r1, sl
 801370c:	4680      	mov	r8, r0
 801370e:	4620      	mov	r0, r4
 8013710:	f000 fe16 	bl	8014340 <_Bfree>
 8013714:	46c2      	mov	sl, r8
 8013716:	9b08      	ldr	r3, [sp, #32]
 8013718:	1b9a      	subs	r2, r3, r6
 801371a:	d004      	beq.n	8013726 <_dtoa_r+0x7b6>
 801371c:	4651      	mov	r1, sl
 801371e:	4620      	mov	r0, r4
 8013720:	f000 ffce 	bl	80146c0 <__pow5mult>
 8013724:	4682      	mov	sl, r0
 8013726:	2101      	movs	r1, #1
 8013728:	4620      	mov	r0, r4
 801372a:	f000 ff09 	bl	8014540 <__i2b>
 801372e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013730:	2b00      	cmp	r3, #0
 8013732:	4606      	mov	r6, r0
 8013734:	f340 8081 	ble.w	801383a <_dtoa_r+0x8ca>
 8013738:	461a      	mov	r2, r3
 801373a:	4601      	mov	r1, r0
 801373c:	4620      	mov	r0, r4
 801373e:	f000 ffbf 	bl	80146c0 <__pow5mult>
 8013742:	9b07      	ldr	r3, [sp, #28]
 8013744:	2b01      	cmp	r3, #1
 8013746:	4606      	mov	r6, r0
 8013748:	dd7a      	ble.n	8013840 <_dtoa_r+0x8d0>
 801374a:	f04f 0800 	mov.w	r8, #0
 801374e:	6933      	ldr	r3, [r6, #16]
 8013750:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013754:	6918      	ldr	r0, [r3, #16]
 8013756:	f000 fea5 	bl	80144a4 <__hi0bits>
 801375a:	f1c0 0020 	rsb	r0, r0, #32
 801375e:	9b06      	ldr	r3, [sp, #24]
 8013760:	4418      	add	r0, r3
 8013762:	f010 001f 	ands.w	r0, r0, #31
 8013766:	f000 8094 	beq.w	8013892 <_dtoa_r+0x922>
 801376a:	f1c0 0320 	rsb	r3, r0, #32
 801376e:	2b04      	cmp	r3, #4
 8013770:	f340 8085 	ble.w	801387e <_dtoa_r+0x90e>
 8013774:	9b05      	ldr	r3, [sp, #20]
 8013776:	f1c0 001c 	rsb	r0, r0, #28
 801377a:	4403      	add	r3, r0
 801377c:	9305      	str	r3, [sp, #20]
 801377e:	9b06      	ldr	r3, [sp, #24]
 8013780:	4403      	add	r3, r0
 8013782:	4405      	add	r5, r0
 8013784:	9306      	str	r3, [sp, #24]
 8013786:	9b05      	ldr	r3, [sp, #20]
 8013788:	2b00      	cmp	r3, #0
 801378a:	dd05      	ble.n	8013798 <_dtoa_r+0x828>
 801378c:	4651      	mov	r1, sl
 801378e:	461a      	mov	r2, r3
 8013790:	4620      	mov	r0, r4
 8013792:	f000 ffef 	bl	8014774 <__lshift>
 8013796:	4682      	mov	sl, r0
 8013798:	9b06      	ldr	r3, [sp, #24]
 801379a:	2b00      	cmp	r3, #0
 801379c:	dd05      	ble.n	80137aa <_dtoa_r+0x83a>
 801379e:	4631      	mov	r1, r6
 80137a0:	461a      	mov	r2, r3
 80137a2:	4620      	mov	r0, r4
 80137a4:	f000 ffe6 	bl	8014774 <__lshift>
 80137a8:	4606      	mov	r6, r0
 80137aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d072      	beq.n	8013896 <_dtoa_r+0x926>
 80137b0:	4631      	mov	r1, r6
 80137b2:	4650      	mov	r0, sl
 80137b4:	f001 f84a 	bl	801484c <__mcmp>
 80137b8:	2800      	cmp	r0, #0
 80137ba:	da6c      	bge.n	8013896 <_dtoa_r+0x926>
 80137bc:	2300      	movs	r3, #0
 80137be:	4651      	mov	r1, sl
 80137c0:	220a      	movs	r2, #10
 80137c2:	4620      	mov	r0, r4
 80137c4:	f000 fdde 	bl	8014384 <__multadd>
 80137c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80137ce:	4682      	mov	sl, r0
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f000 81b0 	beq.w	8013b36 <_dtoa_r+0xbc6>
 80137d6:	2300      	movs	r3, #0
 80137d8:	4639      	mov	r1, r7
 80137da:	220a      	movs	r2, #10
 80137dc:	4620      	mov	r0, r4
 80137de:	f000 fdd1 	bl	8014384 <__multadd>
 80137e2:	9b01      	ldr	r3, [sp, #4]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	4607      	mov	r7, r0
 80137e8:	f300 8096 	bgt.w	8013918 <_dtoa_r+0x9a8>
 80137ec:	9b07      	ldr	r3, [sp, #28]
 80137ee:	2b02      	cmp	r3, #2
 80137f0:	dc59      	bgt.n	80138a6 <_dtoa_r+0x936>
 80137f2:	e091      	b.n	8013918 <_dtoa_r+0x9a8>
 80137f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80137f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80137fa:	e758      	b.n	80136ae <_dtoa_r+0x73e>
 80137fc:	9b04      	ldr	r3, [sp, #16]
 80137fe:	1e5e      	subs	r6, r3, #1
 8013800:	9b08      	ldr	r3, [sp, #32]
 8013802:	42b3      	cmp	r3, r6
 8013804:	bfbf      	itttt	lt
 8013806:	9b08      	ldrlt	r3, [sp, #32]
 8013808:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801380a:	9608      	strlt	r6, [sp, #32]
 801380c:	1af3      	sublt	r3, r6, r3
 801380e:	bfb4      	ite	lt
 8013810:	18d2      	addlt	r2, r2, r3
 8013812:	1b9e      	subge	r6, r3, r6
 8013814:	9b04      	ldr	r3, [sp, #16]
 8013816:	bfbc      	itt	lt
 8013818:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801381a:	2600      	movlt	r6, #0
 801381c:	2b00      	cmp	r3, #0
 801381e:	bfb7      	itett	lt
 8013820:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013824:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013828:	1a9d      	sublt	r5, r3, r2
 801382a:	2300      	movlt	r3, #0
 801382c:	e741      	b.n	80136b2 <_dtoa_r+0x742>
 801382e:	9e08      	ldr	r6, [sp, #32]
 8013830:	9d05      	ldr	r5, [sp, #20]
 8013832:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013834:	e748      	b.n	80136c8 <_dtoa_r+0x758>
 8013836:	9a08      	ldr	r2, [sp, #32]
 8013838:	e770      	b.n	801371c <_dtoa_r+0x7ac>
 801383a:	9b07      	ldr	r3, [sp, #28]
 801383c:	2b01      	cmp	r3, #1
 801383e:	dc19      	bgt.n	8013874 <_dtoa_r+0x904>
 8013840:	9b02      	ldr	r3, [sp, #8]
 8013842:	b9bb      	cbnz	r3, 8013874 <_dtoa_r+0x904>
 8013844:	9b03      	ldr	r3, [sp, #12]
 8013846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801384a:	b99b      	cbnz	r3, 8013874 <_dtoa_r+0x904>
 801384c:	9b03      	ldr	r3, [sp, #12]
 801384e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013852:	0d1b      	lsrs	r3, r3, #20
 8013854:	051b      	lsls	r3, r3, #20
 8013856:	b183      	cbz	r3, 801387a <_dtoa_r+0x90a>
 8013858:	9b05      	ldr	r3, [sp, #20]
 801385a:	3301      	adds	r3, #1
 801385c:	9305      	str	r3, [sp, #20]
 801385e:	9b06      	ldr	r3, [sp, #24]
 8013860:	3301      	adds	r3, #1
 8013862:	9306      	str	r3, [sp, #24]
 8013864:	f04f 0801 	mov.w	r8, #1
 8013868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801386a:	2b00      	cmp	r3, #0
 801386c:	f47f af6f 	bne.w	801374e <_dtoa_r+0x7de>
 8013870:	2001      	movs	r0, #1
 8013872:	e774      	b.n	801375e <_dtoa_r+0x7ee>
 8013874:	f04f 0800 	mov.w	r8, #0
 8013878:	e7f6      	b.n	8013868 <_dtoa_r+0x8f8>
 801387a:	4698      	mov	r8, r3
 801387c:	e7f4      	b.n	8013868 <_dtoa_r+0x8f8>
 801387e:	d082      	beq.n	8013786 <_dtoa_r+0x816>
 8013880:	9a05      	ldr	r2, [sp, #20]
 8013882:	331c      	adds	r3, #28
 8013884:	441a      	add	r2, r3
 8013886:	9205      	str	r2, [sp, #20]
 8013888:	9a06      	ldr	r2, [sp, #24]
 801388a:	441a      	add	r2, r3
 801388c:	441d      	add	r5, r3
 801388e:	9206      	str	r2, [sp, #24]
 8013890:	e779      	b.n	8013786 <_dtoa_r+0x816>
 8013892:	4603      	mov	r3, r0
 8013894:	e7f4      	b.n	8013880 <_dtoa_r+0x910>
 8013896:	9b04      	ldr	r3, [sp, #16]
 8013898:	2b00      	cmp	r3, #0
 801389a:	dc37      	bgt.n	801390c <_dtoa_r+0x99c>
 801389c:	9b07      	ldr	r3, [sp, #28]
 801389e:	2b02      	cmp	r3, #2
 80138a0:	dd34      	ble.n	801390c <_dtoa_r+0x99c>
 80138a2:	9b04      	ldr	r3, [sp, #16]
 80138a4:	9301      	str	r3, [sp, #4]
 80138a6:	9b01      	ldr	r3, [sp, #4]
 80138a8:	b963      	cbnz	r3, 80138c4 <_dtoa_r+0x954>
 80138aa:	4631      	mov	r1, r6
 80138ac:	2205      	movs	r2, #5
 80138ae:	4620      	mov	r0, r4
 80138b0:	f000 fd68 	bl	8014384 <__multadd>
 80138b4:	4601      	mov	r1, r0
 80138b6:	4606      	mov	r6, r0
 80138b8:	4650      	mov	r0, sl
 80138ba:	f000 ffc7 	bl	801484c <__mcmp>
 80138be:	2800      	cmp	r0, #0
 80138c0:	f73f adbb 	bgt.w	801343a <_dtoa_r+0x4ca>
 80138c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138c6:	9d00      	ldr	r5, [sp, #0]
 80138c8:	ea6f 0b03 	mvn.w	fp, r3
 80138cc:	f04f 0800 	mov.w	r8, #0
 80138d0:	4631      	mov	r1, r6
 80138d2:	4620      	mov	r0, r4
 80138d4:	f000 fd34 	bl	8014340 <_Bfree>
 80138d8:	2f00      	cmp	r7, #0
 80138da:	f43f aeab 	beq.w	8013634 <_dtoa_r+0x6c4>
 80138de:	f1b8 0f00 	cmp.w	r8, #0
 80138e2:	d005      	beq.n	80138f0 <_dtoa_r+0x980>
 80138e4:	45b8      	cmp	r8, r7
 80138e6:	d003      	beq.n	80138f0 <_dtoa_r+0x980>
 80138e8:	4641      	mov	r1, r8
 80138ea:	4620      	mov	r0, r4
 80138ec:	f000 fd28 	bl	8014340 <_Bfree>
 80138f0:	4639      	mov	r1, r7
 80138f2:	4620      	mov	r0, r4
 80138f4:	f000 fd24 	bl	8014340 <_Bfree>
 80138f8:	e69c      	b.n	8013634 <_dtoa_r+0x6c4>
 80138fa:	2600      	movs	r6, #0
 80138fc:	4637      	mov	r7, r6
 80138fe:	e7e1      	b.n	80138c4 <_dtoa_r+0x954>
 8013900:	46bb      	mov	fp, r7
 8013902:	4637      	mov	r7, r6
 8013904:	e599      	b.n	801343a <_dtoa_r+0x4ca>
 8013906:	bf00      	nop
 8013908:	40240000 	.word	0x40240000
 801390c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801390e:	2b00      	cmp	r3, #0
 8013910:	f000 80c8 	beq.w	8013aa4 <_dtoa_r+0xb34>
 8013914:	9b04      	ldr	r3, [sp, #16]
 8013916:	9301      	str	r3, [sp, #4]
 8013918:	2d00      	cmp	r5, #0
 801391a:	dd05      	ble.n	8013928 <_dtoa_r+0x9b8>
 801391c:	4639      	mov	r1, r7
 801391e:	462a      	mov	r2, r5
 8013920:	4620      	mov	r0, r4
 8013922:	f000 ff27 	bl	8014774 <__lshift>
 8013926:	4607      	mov	r7, r0
 8013928:	f1b8 0f00 	cmp.w	r8, #0
 801392c:	d05b      	beq.n	80139e6 <_dtoa_r+0xa76>
 801392e:	6879      	ldr	r1, [r7, #4]
 8013930:	4620      	mov	r0, r4
 8013932:	f000 fcc5 	bl	80142c0 <_Balloc>
 8013936:	4605      	mov	r5, r0
 8013938:	b928      	cbnz	r0, 8013946 <_dtoa_r+0x9d6>
 801393a:	4b83      	ldr	r3, [pc, #524]	; (8013b48 <_dtoa_r+0xbd8>)
 801393c:	4602      	mov	r2, r0
 801393e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013942:	f7ff bb2e 	b.w	8012fa2 <_dtoa_r+0x32>
 8013946:	693a      	ldr	r2, [r7, #16]
 8013948:	3202      	adds	r2, #2
 801394a:	0092      	lsls	r2, r2, #2
 801394c:	f107 010c 	add.w	r1, r7, #12
 8013950:	300c      	adds	r0, #12
 8013952:	f7ff fa4a 	bl	8012dea <memcpy>
 8013956:	2201      	movs	r2, #1
 8013958:	4629      	mov	r1, r5
 801395a:	4620      	mov	r0, r4
 801395c:	f000 ff0a 	bl	8014774 <__lshift>
 8013960:	9b00      	ldr	r3, [sp, #0]
 8013962:	3301      	adds	r3, #1
 8013964:	9304      	str	r3, [sp, #16]
 8013966:	e9dd 2300 	ldrd	r2, r3, [sp]
 801396a:	4413      	add	r3, r2
 801396c:	9308      	str	r3, [sp, #32]
 801396e:	9b02      	ldr	r3, [sp, #8]
 8013970:	f003 0301 	and.w	r3, r3, #1
 8013974:	46b8      	mov	r8, r7
 8013976:	9306      	str	r3, [sp, #24]
 8013978:	4607      	mov	r7, r0
 801397a:	9b04      	ldr	r3, [sp, #16]
 801397c:	4631      	mov	r1, r6
 801397e:	3b01      	subs	r3, #1
 8013980:	4650      	mov	r0, sl
 8013982:	9301      	str	r3, [sp, #4]
 8013984:	f7ff fa6c 	bl	8012e60 <quorem>
 8013988:	4641      	mov	r1, r8
 801398a:	9002      	str	r0, [sp, #8]
 801398c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013990:	4650      	mov	r0, sl
 8013992:	f000 ff5b 	bl	801484c <__mcmp>
 8013996:	463a      	mov	r2, r7
 8013998:	9005      	str	r0, [sp, #20]
 801399a:	4631      	mov	r1, r6
 801399c:	4620      	mov	r0, r4
 801399e:	f000 ff71 	bl	8014884 <__mdiff>
 80139a2:	68c2      	ldr	r2, [r0, #12]
 80139a4:	4605      	mov	r5, r0
 80139a6:	bb02      	cbnz	r2, 80139ea <_dtoa_r+0xa7a>
 80139a8:	4601      	mov	r1, r0
 80139aa:	4650      	mov	r0, sl
 80139ac:	f000 ff4e 	bl	801484c <__mcmp>
 80139b0:	4602      	mov	r2, r0
 80139b2:	4629      	mov	r1, r5
 80139b4:	4620      	mov	r0, r4
 80139b6:	9209      	str	r2, [sp, #36]	; 0x24
 80139b8:	f000 fcc2 	bl	8014340 <_Bfree>
 80139bc:	9b07      	ldr	r3, [sp, #28]
 80139be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139c0:	9d04      	ldr	r5, [sp, #16]
 80139c2:	ea43 0102 	orr.w	r1, r3, r2
 80139c6:	9b06      	ldr	r3, [sp, #24]
 80139c8:	4319      	orrs	r1, r3
 80139ca:	d110      	bne.n	80139ee <_dtoa_r+0xa7e>
 80139cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80139d0:	d029      	beq.n	8013a26 <_dtoa_r+0xab6>
 80139d2:	9b05      	ldr	r3, [sp, #20]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	dd02      	ble.n	80139de <_dtoa_r+0xa6e>
 80139d8:	9b02      	ldr	r3, [sp, #8]
 80139da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80139de:	9b01      	ldr	r3, [sp, #4]
 80139e0:	f883 9000 	strb.w	r9, [r3]
 80139e4:	e774      	b.n	80138d0 <_dtoa_r+0x960>
 80139e6:	4638      	mov	r0, r7
 80139e8:	e7ba      	b.n	8013960 <_dtoa_r+0x9f0>
 80139ea:	2201      	movs	r2, #1
 80139ec:	e7e1      	b.n	80139b2 <_dtoa_r+0xa42>
 80139ee:	9b05      	ldr	r3, [sp, #20]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	db04      	blt.n	80139fe <_dtoa_r+0xa8e>
 80139f4:	9907      	ldr	r1, [sp, #28]
 80139f6:	430b      	orrs	r3, r1
 80139f8:	9906      	ldr	r1, [sp, #24]
 80139fa:	430b      	orrs	r3, r1
 80139fc:	d120      	bne.n	8013a40 <_dtoa_r+0xad0>
 80139fe:	2a00      	cmp	r2, #0
 8013a00:	dded      	ble.n	80139de <_dtoa_r+0xa6e>
 8013a02:	4651      	mov	r1, sl
 8013a04:	2201      	movs	r2, #1
 8013a06:	4620      	mov	r0, r4
 8013a08:	f000 feb4 	bl	8014774 <__lshift>
 8013a0c:	4631      	mov	r1, r6
 8013a0e:	4682      	mov	sl, r0
 8013a10:	f000 ff1c 	bl	801484c <__mcmp>
 8013a14:	2800      	cmp	r0, #0
 8013a16:	dc03      	bgt.n	8013a20 <_dtoa_r+0xab0>
 8013a18:	d1e1      	bne.n	80139de <_dtoa_r+0xa6e>
 8013a1a:	f019 0f01 	tst.w	r9, #1
 8013a1e:	d0de      	beq.n	80139de <_dtoa_r+0xa6e>
 8013a20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013a24:	d1d8      	bne.n	80139d8 <_dtoa_r+0xa68>
 8013a26:	9a01      	ldr	r2, [sp, #4]
 8013a28:	2339      	movs	r3, #57	; 0x39
 8013a2a:	7013      	strb	r3, [r2, #0]
 8013a2c:	462b      	mov	r3, r5
 8013a2e:	461d      	mov	r5, r3
 8013a30:	3b01      	subs	r3, #1
 8013a32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013a36:	2a39      	cmp	r2, #57	; 0x39
 8013a38:	d06c      	beq.n	8013b14 <_dtoa_r+0xba4>
 8013a3a:	3201      	adds	r2, #1
 8013a3c:	701a      	strb	r2, [r3, #0]
 8013a3e:	e747      	b.n	80138d0 <_dtoa_r+0x960>
 8013a40:	2a00      	cmp	r2, #0
 8013a42:	dd07      	ble.n	8013a54 <_dtoa_r+0xae4>
 8013a44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013a48:	d0ed      	beq.n	8013a26 <_dtoa_r+0xab6>
 8013a4a:	9a01      	ldr	r2, [sp, #4]
 8013a4c:	f109 0301 	add.w	r3, r9, #1
 8013a50:	7013      	strb	r3, [r2, #0]
 8013a52:	e73d      	b.n	80138d0 <_dtoa_r+0x960>
 8013a54:	9b04      	ldr	r3, [sp, #16]
 8013a56:	9a08      	ldr	r2, [sp, #32]
 8013a58:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	d043      	beq.n	8013ae8 <_dtoa_r+0xb78>
 8013a60:	4651      	mov	r1, sl
 8013a62:	2300      	movs	r3, #0
 8013a64:	220a      	movs	r2, #10
 8013a66:	4620      	mov	r0, r4
 8013a68:	f000 fc8c 	bl	8014384 <__multadd>
 8013a6c:	45b8      	cmp	r8, r7
 8013a6e:	4682      	mov	sl, r0
 8013a70:	f04f 0300 	mov.w	r3, #0
 8013a74:	f04f 020a 	mov.w	r2, #10
 8013a78:	4641      	mov	r1, r8
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	d107      	bne.n	8013a8e <_dtoa_r+0xb1e>
 8013a7e:	f000 fc81 	bl	8014384 <__multadd>
 8013a82:	4680      	mov	r8, r0
 8013a84:	4607      	mov	r7, r0
 8013a86:	9b04      	ldr	r3, [sp, #16]
 8013a88:	3301      	adds	r3, #1
 8013a8a:	9304      	str	r3, [sp, #16]
 8013a8c:	e775      	b.n	801397a <_dtoa_r+0xa0a>
 8013a8e:	f000 fc79 	bl	8014384 <__multadd>
 8013a92:	4639      	mov	r1, r7
 8013a94:	4680      	mov	r8, r0
 8013a96:	2300      	movs	r3, #0
 8013a98:	220a      	movs	r2, #10
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	f000 fc72 	bl	8014384 <__multadd>
 8013aa0:	4607      	mov	r7, r0
 8013aa2:	e7f0      	b.n	8013a86 <_dtoa_r+0xb16>
 8013aa4:	9b04      	ldr	r3, [sp, #16]
 8013aa6:	9301      	str	r3, [sp, #4]
 8013aa8:	9d00      	ldr	r5, [sp, #0]
 8013aaa:	4631      	mov	r1, r6
 8013aac:	4650      	mov	r0, sl
 8013aae:	f7ff f9d7 	bl	8012e60 <quorem>
 8013ab2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013ab6:	9b00      	ldr	r3, [sp, #0]
 8013ab8:	f805 9b01 	strb.w	r9, [r5], #1
 8013abc:	1aea      	subs	r2, r5, r3
 8013abe:	9b01      	ldr	r3, [sp, #4]
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	dd07      	ble.n	8013ad4 <_dtoa_r+0xb64>
 8013ac4:	4651      	mov	r1, sl
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	220a      	movs	r2, #10
 8013aca:	4620      	mov	r0, r4
 8013acc:	f000 fc5a 	bl	8014384 <__multadd>
 8013ad0:	4682      	mov	sl, r0
 8013ad2:	e7ea      	b.n	8013aaa <_dtoa_r+0xb3a>
 8013ad4:	9b01      	ldr	r3, [sp, #4]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	bfc8      	it	gt
 8013ada:	461d      	movgt	r5, r3
 8013adc:	9b00      	ldr	r3, [sp, #0]
 8013ade:	bfd8      	it	le
 8013ae0:	2501      	movle	r5, #1
 8013ae2:	441d      	add	r5, r3
 8013ae4:	f04f 0800 	mov.w	r8, #0
 8013ae8:	4651      	mov	r1, sl
 8013aea:	2201      	movs	r2, #1
 8013aec:	4620      	mov	r0, r4
 8013aee:	f000 fe41 	bl	8014774 <__lshift>
 8013af2:	4631      	mov	r1, r6
 8013af4:	4682      	mov	sl, r0
 8013af6:	f000 fea9 	bl	801484c <__mcmp>
 8013afa:	2800      	cmp	r0, #0
 8013afc:	dc96      	bgt.n	8013a2c <_dtoa_r+0xabc>
 8013afe:	d102      	bne.n	8013b06 <_dtoa_r+0xb96>
 8013b00:	f019 0f01 	tst.w	r9, #1
 8013b04:	d192      	bne.n	8013a2c <_dtoa_r+0xabc>
 8013b06:	462b      	mov	r3, r5
 8013b08:	461d      	mov	r5, r3
 8013b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b0e:	2a30      	cmp	r2, #48	; 0x30
 8013b10:	d0fa      	beq.n	8013b08 <_dtoa_r+0xb98>
 8013b12:	e6dd      	b.n	80138d0 <_dtoa_r+0x960>
 8013b14:	9a00      	ldr	r2, [sp, #0]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d189      	bne.n	8013a2e <_dtoa_r+0xabe>
 8013b1a:	f10b 0b01 	add.w	fp, fp, #1
 8013b1e:	2331      	movs	r3, #49	; 0x31
 8013b20:	e796      	b.n	8013a50 <_dtoa_r+0xae0>
 8013b22:	4b0a      	ldr	r3, [pc, #40]	; (8013b4c <_dtoa_r+0xbdc>)
 8013b24:	f7ff ba99 	b.w	801305a <_dtoa_r+0xea>
 8013b28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	f47f aa6d 	bne.w	801300a <_dtoa_r+0x9a>
 8013b30:	4b07      	ldr	r3, [pc, #28]	; (8013b50 <_dtoa_r+0xbe0>)
 8013b32:	f7ff ba92 	b.w	801305a <_dtoa_r+0xea>
 8013b36:	9b01      	ldr	r3, [sp, #4]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	dcb5      	bgt.n	8013aa8 <_dtoa_r+0xb38>
 8013b3c:	9b07      	ldr	r3, [sp, #28]
 8013b3e:	2b02      	cmp	r3, #2
 8013b40:	f73f aeb1 	bgt.w	80138a6 <_dtoa_r+0x936>
 8013b44:	e7b0      	b.n	8013aa8 <_dtoa_r+0xb38>
 8013b46:	bf00      	nop
 8013b48:	08018b34 	.word	0x08018b34
 8013b4c:	080189f1 	.word	0x080189f1
 8013b50:	08018acf 	.word	0x08018acf

08013b54 <_free_r>:
 8013b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b56:	2900      	cmp	r1, #0
 8013b58:	d044      	beq.n	8013be4 <_free_r+0x90>
 8013b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b5e:	9001      	str	r0, [sp, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	f1a1 0404 	sub.w	r4, r1, #4
 8013b66:	bfb8      	it	lt
 8013b68:	18e4      	addlt	r4, r4, r3
 8013b6a:	f7fd f93f 	bl	8010dec <__malloc_lock>
 8013b6e:	4a1e      	ldr	r2, [pc, #120]	; (8013be8 <_free_r+0x94>)
 8013b70:	9801      	ldr	r0, [sp, #4]
 8013b72:	6813      	ldr	r3, [r2, #0]
 8013b74:	b933      	cbnz	r3, 8013b84 <_free_r+0x30>
 8013b76:	6063      	str	r3, [r4, #4]
 8013b78:	6014      	str	r4, [r2, #0]
 8013b7a:	b003      	add	sp, #12
 8013b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b80:	f7fd b93a 	b.w	8010df8 <__malloc_unlock>
 8013b84:	42a3      	cmp	r3, r4
 8013b86:	d908      	bls.n	8013b9a <_free_r+0x46>
 8013b88:	6825      	ldr	r5, [r4, #0]
 8013b8a:	1961      	adds	r1, r4, r5
 8013b8c:	428b      	cmp	r3, r1
 8013b8e:	bf01      	itttt	eq
 8013b90:	6819      	ldreq	r1, [r3, #0]
 8013b92:	685b      	ldreq	r3, [r3, #4]
 8013b94:	1949      	addeq	r1, r1, r5
 8013b96:	6021      	streq	r1, [r4, #0]
 8013b98:	e7ed      	b.n	8013b76 <_free_r+0x22>
 8013b9a:	461a      	mov	r2, r3
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	b10b      	cbz	r3, 8013ba4 <_free_r+0x50>
 8013ba0:	42a3      	cmp	r3, r4
 8013ba2:	d9fa      	bls.n	8013b9a <_free_r+0x46>
 8013ba4:	6811      	ldr	r1, [r2, #0]
 8013ba6:	1855      	adds	r5, r2, r1
 8013ba8:	42a5      	cmp	r5, r4
 8013baa:	d10b      	bne.n	8013bc4 <_free_r+0x70>
 8013bac:	6824      	ldr	r4, [r4, #0]
 8013bae:	4421      	add	r1, r4
 8013bb0:	1854      	adds	r4, r2, r1
 8013bb2:	42a3      	cmp	r3, r4
 8013bb4:	6011      	str	r1, [r2, #0]
 8013bb6:	d1e0      	bne.n	8013b7a <_free_r+0x26>
 8013bb8:	681c      	ldr	r4, [r3, #0]
 8013bba:	685b      	ldr	r3, [r3, #4]
 8013bbc:	6053      	str	r3, [r2, #4]
 8013bbe:	440c      	add	r4, r1
 8013bc0:	6014      	str	r4, [r2, #0]
 8013bc2:	e7da      	b.n	8013b7a <_free_r+0x26>
 8013bc4:	d902      	bls.n	8013bcc <_free_r+0x78>
 8013bc6:	230c      	movs	r3, #12
 8013bc8:	6003      	str	r3, [r0, #0]
 8013bca:	e7d6      	b.n	8013b7a <_free_r+0x26>
 8013bcc:	6825      	ldr	r5, [r4, #0]
 8013bce:	1961      	adds	r1, r4, r5
 8013bd0:	428b      	cmp	r3, r1
 8013bd2:	bf04      	itt	eq
 8013bd4:	6819      	ldreq	r1, [r3, #0]
 8013bd6:	685b      	ldreq	r3, [r3, #4]
 8013bd8:	6063      	str	r3, [r4, #4]
 8013bda:	bf04      	itt	eq
 8013bdc:	1949      	addeq	r1, r1, r5
 8013bde:	6021      	streq	r1, [r4, #0]
 8013be0:	6054      	str	r4, [r2, #4]
 8013be2:	e7ca      	b.n	8013b7a <_free_r+0x26>
 8013be4:	b003      	add	sp, #12
 8013be6:	bd30      	pop	{r4, r5, pc}
 8013be8:	20001494 	.word	0x20001494

08013bec <rshift>:
 8013bec:	6903      	ldr	r3, [r0, #16]
 8013bee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013bf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013bfa:	f100 0414 	add.w	r4, r0, #20
 8013bfe:	dd45      	ble.n	8013c8c <rshift+0xa0>
 8013c00:	f011 011f 	ands.w	r1, r1, #31
 8013c04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013c08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013c0c:	d10c      	bne.n	8013c28 <rshift+0x3c>
 8013c0e:	f100 0710 	add.w	r7, r0, #16
 8013c12:	4629      	mov	r1, r5
 8013c14:	42b1      	cmp	r1, r6
 8013c16:	d334      	bcc.n	8013c82 <rshift+0x96>
 8013c18:	1a9b      	subs	r3, r3, r2
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	1eea      	subs	r2, r5, #3
 8013c1e:	4296      	cmp	r6, r2
 8013c20:	bf38      	it	cc
 8013c22:	2300      	movcc	r3, #0
 8013c24:	4423      	add	r3, r4
 8013c26:	e015      	b.n	8013c54 <rshift+0x68>
 8013c28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013c2c:	f1c1 0820 	rsb	r8, r1, #32
 8013c30:	40cf      	lsrs	r7, r1
 8013c32:	f105 0e04 	add.w	lr, r5, #4
 8013c36:	46a1      	mov	r9, r4
 8013c38:	4576      	cmp	r6, lr
 8013c3a:	46f4      	mov	ip, lr
 8013c3c:	d815      	bhi.n	8013c6a <rshift+0x7e>
 8013c3e:	1a9a      	subs	r2, r3, r2
 8013c40:	0092      	lsls	r2, r2, #2
 8013c42:	3a04      	subs	r2, #4
 8013c44:	3501      	adds	r5, #1
 8013c46:	42ae      	cmp	r6, r5
 8013c48:	bf38      	it	cc
 8013c4a:	2200      	movcc	r2, #0
 8013c4c:	18a3      	adds	r3, r4, r2
 8013c4e:	50a7      	str	r7, [r4, r2]
 8013c50:	b107      	cbz	r7, 8013c54 <rshift+0x68>
 8013c52:	3304      	adds	r3, #4
 8013c54:	1b1a      	subs	r2, r3, r4
 8013c56:	42a3      	cmp	r3, r4
 8013c58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013c5c:	bf08      	it	eq
 8013c5e:	2300      	moveq	r3, #0
 8013c60:	6102      	str	r2, [r0, #16]
 8013c62:	bf08      	it	eq
 8013c64:	6143      	streq	r3, [r0, #20]
 8013c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c6a:	f8dc c000 	ldr.w	ip, [ip]
 8013c6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8013c72:	ea4c 0707 	orr.w	r7, ip, r7
 8013c76:	f849 7b04 	str.w	r7, [r9], #4
 8013c7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013c7e:	40cf      	lsrs	r7, r1
 8013c80:	e7da      	b.n	8013c38 <rshift+0x4c>
 8013c82:	f851 cb04 	ldr.w	ip, [r1], #4
 8013c86:	f847 cf04 	str.w	ip, [r7, #4]!
 8013c8a:	e7c3      	b.n	8013c14 <rshift+0x28>
 8013c8c:	4623      	mov	r3, r4
 8013c8e:	e7e1      	b.n	8013c54 <rshift+0x68>

08013c90 <__hexdig_fun>:
 8013c90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013c94:	2b09      	cmp	r3, #9
 8013c96:	d802      	bhi.n	8013c9e <__hexdig_fun+0xe>
 8013c98:	3820      	subs	r0, #32
 8013c9a:	b2c0      	uxtb	r0, r0
 8013c9c:	4770      	bx	lr
 8013c9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013ca2:	2b05      	cmp	r3, #5
 8013ca4:	d801      	bhi.n	8013caa <__hexdig_fun+0x1a>
 8013ca6:	3847      	subs	r0, #71	; 0x47
 8013ca8:	e7f7      	b.n	8013c9a <__hexdig_fun+0xa>
 8013caa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013cae:	2b05      	cmp	r3, #5
 8013cb0:	d801      	bhi.n	8013cb6 <__hexdig_fun+0x26>
 8013cb2:	3827      	subs	r0, #39	; 0x27
 8013cb4:	e7f1      	b.n	8013c9a <__hexdig_fun+0xa>
 8013cb6:	2000      	movs	r0, #0
 8013cb8:	4770      	bx	lr
	...

08013cbc <__gethex>:
 8013cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cc0:	4617      	mov	r7, r2
 8013cc2:	680a      	ldr	r2, [r1, #0]
 8013cc4:	b085      	sub	sp, #20
 8013cc6:	f102 0b02 	add.w	fp, r2, #2
 8013cca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013cce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013cd2:	4681      	mov	r9, r0
 8013cd4:	468a      	mov	sl, r1
 8013cd6:	9302      	str	r3, [sp, #8]
 8013cd8:	32fe      	adds	r2, #254	; 0xfe
 8013cda:	eb02 030b 	add.w	r3, r2, fp
 8013cde:	46d8      	mov	r8, fp
 8013ce0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013ce4:	9301      	str	r3, [sp, #4]
 8013ce6:	2830      	cmp	r0, #48	; 0x30
 8013ce8:	d0f7      	beq.n	8013cda <__gethex+0x1e>
 8013cea:	f7ff ffd1 	bl	8013c90 <__hexdig_fun>
 8013cee:	4604      	mov	r4, r0
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	d138      	bne.n	8013d66 <__gethex+0xaa>
 8013cf4:	49a7      	ldr	r1, [pc, #668]	; (8013f94 <__gethex+0x2d8>)
 8013cf6:	2201      	movs	r2, #1
 8013cf8:	4640      	mov	r0, r8
 8013cfa:	f7fe ff62 	bl	8012bc2 <strncmp>
 8013cfe:	4606      	mov	r6, r0
 8013d00:	2800      	cmp	r0, #0
 8013d02:	d169      	bne.n	8013dd8 <__gethex+0x11c>
 8013d04:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013d08:	465d      	mov	r5, fp
 8013d0a:	f7ff ffc1 	bl	8013c90 <__hexdig_fun>
 8013d0e:	2800      	cmp	r0, #0
 8013d10:	d064      	beq.n	8013ddc <__gethex+0x120>
 8013d12:	465a      	mov	r2, fp
 8013d14:	7810      	ldrb	r0, [r2, #0]
 8013d16:	2830      	cmp	r0, #48	; 0x30
 8013d18:	4690      	mov	r8, r2
 8013d1a:	f102 0201 	add.w	r2, r2, #1
 8013d1e:	d0f9      	beq.n	8013d14 <__gethex+0x58>
 8013d20:	f7ff ffb6 	bl	8013c90 <__hexdig_fun>
 8013d24:	2301      	movs	r3, #1
 8013d26:	fab0 f480 	clz	r4, r0
 8013d2a:	0964      	lsrs	r4, r4, #5
 8013d2c:	465e      	mov	r6, fp
 8013d2e:	9301      	str	r3, [sp, #4]
 8013d30:	4642      	mov	r2, r8
 8013d32:	4615      	mov	r5, r2
 8013d34:	3201      	adds	r2, #1
 8013d36:	7828      	ldrb	r0, [r5, #0]
 8013d38:	f7ff ffaa 	bl	8013c90 <__hexdig_fun>
 8013d3c:	2800      	cmp	r0, #0
 8013d3e:	d1f8      	bne.n	8013d32 <__gethex+0x76>
 8013d40:	4994      	ldr	r1, [pc, #592]	; (8013f94 <__gethex+0x2d8>)
 8013d42:	2201      	movs	r2, #1
 8013d44:	4628      	mov	r0, r5
 8013d46:	f7fe ff3c 	bl	8012bc2 <strncmp>
 8013d4a:	b978      	cbnz	r0, 8013d6c <__gethex+0xb0>
 8013d4c:	b946      	cbnz	r6, 8013d60 <__gethex+0xa4>
 8013d4e:	1c6e      	adds	r6, r5, #1
 8013d50:	4632      	mov	r2, r6
 8013d52:	4615      	mov	r5, r2
 8013d54:	3201      	adds	r2, #1
 8013d56:	7828      	ldrb	r0, [r5, #0]
 8013d58:	f7ff ff9a 	bl	8013c90 <__hexdig_fun>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	d1f8      	bne.n	8013d52 <__gethex+0x96>
 8013d60:	1b73      	subs	r3, r6, r5
 8013d62:	009e      	lsls	r6, r3, #2
 8013d64:	e004      	b.n	8013d70 <__gethex+0xb4>
 8013d66:	2400      	movs	r4, #0
 8013d68:	4626      	mov	r6, r4
 8013d6a:	e7e1      	b.n	8013d30 <__gethex+0x74>
 8013d6c:	2e00      	cmp	r6, #0
 8013d6e:	d1f7      	bne.n	8013d60 <__gethex+0xa4>
 8013d70:	782b      	ldrb	r3, [r5, #0]
 8013d72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013d76:	2b50      	cmp	r3, #80	; 0x50
 8013d78:	d13d      	bne.n	8013df6 <__gethex+0x13a>
 8013d7a:	786b      	ldrb	r3, [r5, #1]
 8013d7c:	2b2b      	cmp	r3, #43	; 0x2b
 8013d7e:	d02f      	beq.n	8013de0 <__gethex+0x124>
 8013d80:	2b2d      	cmp	r3, #45	; 0x2d
 8013d82:	d031      	beq.n	8013de8 <__gethex+0x12c>
 8013d84:	1c69      	adds	r1, r5, #1
 8013d86:	f04f 0b00 	mov.w	fp, #0
 8013d8a:	7808      	ldrb	r0, [r1, #0]
 8013d8c:	f7ff ff80 	bl	8013c90 <__hexdig_fun>
 8013d90:	1e42      	subs	r2, r0, #1
 8013d92:	b2d2      	uxtb	r2, r2
 8013d94:	2a18      	cmp	r2, #24
 8013d96:	d82e      	bhi.n	8013df6 <__gethex+0x13a>
 8013d98:	f1a0 0210 	sub.w	r2, r0, #16
 8013d9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013da0:	f7ff ff76 	bl	8013c90 <__hexdig_fun>
 8013da4:	f100 3cff 	add.w	ip, r0, #4294967295
 8013da8:	fa5f fc8c 	uxtb.w	ip, ip
 8013dac:	f1bc 0f18 	cmp.w	ip, #24
 8013db0:	d91d      	bls.n	8013dee <__gethex+0x132>
 8013db2:	f1bb 0f00 	cmp.w	fp, #0
 8013db6:	d000      	beq.n	8013dba <__gethex+0xfe>
 8013db8:	4252      	negs	r2, r2
 8013dba:	4416      	add	r6, r2
 8013dbc:	f8ca 1000 	str.w	r1, [sl]
 8013dc0:	b1dc      	cbz	r4, 8013dfa <__gethex+0x13e>
 8013dc2:	9b01      	ldr	r3, [sp, #4]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	bf14      	ite	ne
 8013dc8:	f04f 0800 	movne.w	r8, #0
 8013dcc:	f04f 0806 	moveq.w	r8, #6
 8013dd0:	4640      	mov	r0, r8
 8013dd2:	b005      	add	sp, #20
 8013dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd8:	4645      	mov	r5, r8
 8013dda:	4626      	mov	r6, r4
 8013ddc:	2401      	movs	r4, #1
 8013dde:	e7c7      	b.n	8013d70 <__gethex+0xb4>
 8013de0:	f04f 0b00 	mov.w	fp, #0
 8013de4:	1ca9      	adds	r1, r5, #2
 8013de6:	e7d0      	b.n	8013d8a <__gethex+0xce>
 8013de8:	f04f 0b01 	mov.w	fp, #1
 8013dec:	e7fa      	b.n	8013de4 <__gethex+0x128>
 8013dee:	230a      	movs	r3, #10
 8013df0:	fb03 0002 	mla	r0, r3, r2, r0
 8013df4:	e7d0      	b.n	8013d98 <__gethex+0xdc>
 8013df6:	4629      	mov	r1, r5
 8013df8:	e7e0      	b.n	8013dbc <__gethex+0x100>
 8013dfa:	eba5 0308 	sub.w	r3, r5, r8
 8013dfe:	3b01      	subs	r3, #1
 8013e00:	4621      	mov	r1, r4
 8013e02:	2b07      	cmp	r3, #7
 8013e04:	dc0a      	bgt.n	8013e1c <__gethex+0x160>
 8013e06:	4648      	mov	r0, r9
 8013e08:	f000 fa5a 	bl	80142c0 <_Balloc>
 8013e0c:	4604      	mov	r4, r0
 8013e0e:	b940      	cbnz	r0, 8013e22 <__gethex+0x166>
 8013e10:	4b61      	ldr	r3, [pc, #388]	; (8013f98 <__gethex+0x2dc>)
 8013e12:	4602      	mov	r2, r0
 8013e14:	21e4      	movs	r1, #228	; 0xe4
 8013e16:	4861      	ldr	r0, [pc, #388]	; (8013f9c <__gethex+0x2e0>)
 8013e18:	f7ff f804 	bl	8012e24 <__assert_func>
 8013e1c:	3101      	adds	r1, #1
 8013e1e:	105b      	asrs	r3, r3, #1
 8013e20:	e7ef      	b.n	8013e02 <__gethex+0x146>
 8013e22:	f100 0a14 	add.w	sl, r0, #20
 8013e26:	2300      	movs	r3, #0
 8013e28:	495a      	ldr	r1, [pc, #360]	; (8013f94 <__gethex+0x2d8>)
 8013e2a:	f8cd a004 	str.w	sl, [sp, #4]
 8013e2e:	469b      	mov	fp, r3
 8013e30:	45a8      	cmp	r8, r5
 8013e32:	d342      	bcc.n	8013eba <__gethex+0x1fe>
 8013e34:	9801      	ldr	r0, [sp, #4]
 8013e36:	f840 bb04 	str.w	fp, [r0], #4
 8013e3a:	eba0 000a 	sub.w	r0, r0, sl
 8013e3e:	1080      	asrs	r0, r0, #2
 8013e40:	6120      	str	r0, [r4, #16]
 8013e42:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013e46:	4658      	mov	r0, fp
 8013e48:	f000 fb2c 	bl	80144a4 <__hi0bits>
 8013e4c:	683d      	ldr	r5, [r7, #0]
 8013e4e:	eba8 0000 	sub.w	r0, r8, r0
 8013e52:	42a8      	cmp	r0, r5
 8013e54:	dd59      	ble.n	8013f0a <__gethex+0x24e>
 8013e56:	eba0 0805 	sub.w	r8, r0, r5
 8013e5a:	4641      	mov	r1, r8
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	f000 febb 	bl	8014bd8 <__any_on>
 8013e62:	4683      	mov	fp, r0
 8013e64:	b1b8      	cbz	r0, 8013e96 <__gethex+0x1da>
 8013e66:	f108 33ff 	add.w	r3, r8, #4294967295
 8013e6a:	1159      	asrs	r1, r3, #5
 8013e6c:	f003 021f 	and.w	r2, r3, #31
 8013e70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013e74:	f04f 0b01 	mov.w	fp, #1
 8013e78:	fa0b f202 	lsl.w	r2, fp, r2
 8013e7c:	420a      	tst	r2, r1
 8013e7e:	d00a      	beq.n	8013e96 <__gethex+0x1da>
 8013e80:	455b      	cmp	r3, fp
 8013e82:	dd06      	ble.n	8013e92 <__gethex+0x1d6>
 8013e84:	f1a8 0102 	sub.w	r1, r8, #2
 8013e88:	4620      	mov	r0, r4
 8013e8a:	f000 fea5 	bl	8014bd8 <__any_on>
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d138      	bne.n	8013f04 <__gethex+0x248>
 8013e92:	f04f 0b02 	mov.w	fp, #2
 8013e96:	4641      	mov	r1, r8
 8013e98:	4620      	mov	r0, r4
 8013e9a:	f7ff fea7 	bl	8013bec <rshift>
 8013e9e:	4446      	add	r6, r8
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	42b3      	cmp	r3, r6
 8013ea4:	da41      	bge.n	8013f2a <__gethex+0x26e>
 8013ea6:	4621      	mov	r1, r4
 8013ea8:	4648      	mov	r0, r9
 8013eaa:	f000 fa49 	bl	8014340 <_Bfree>
 8013eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	6013      	str	r3, [r2, #0]
 8013eb4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013eb8:	e78a      	b.n	8013dd0 <__gethex+0x114>
 8013eba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8013ebe:	2a2e      	cmp	r2, #46	; 0x2e
 8013ec0:	d014      	beq.n	8013eec <__gethex+0x230>
 8013ec2:	2b20      	cmp	r3, #32
 8013ec4:	d106      	bne.n	8013ed4 <__gethex+0x218>
 8013ec6:	9b01      	ldr	r3, [sp, #4]
 8013ec8:	f843 bb04 	str.w	fp, [r3], #4
 8013ecc:	f04f 0b00 	mov.w	fp, #0
 8013ed0:	9301      	str	r3, [sp, #4]
 8013ed2:	465b      	mov	r3, fp
 8013ed4:	7828      	ldrb	r0, [r5, #0]
 8013ed6:	9303      	str	r3, [sp, #12]
 8013ed8:	f7ff feda 	bl	8013c90 <__hexdig_fun>
 8013edc:	9b03      	ldr	r3, [sp, #12]
 8013ede:	f000 000f 	and.w	r0, r0, #15
 8013ee2:	4098      	lsls	r0, r3
 8013ee4:	ea4b 0b00 	orr.w	fp, fp, r0
 8013ee8:	3304      	adds	r3, #4
 8013eea:	e7a1      	b.n	8013e30 <__gethex+0x174>
 8013eec:	45a8      	cmp	r8, r5
 8013eee:	d8e8      	bhi.n	8013ec2 <__gethex+0x206>
 8013ef0:	2201      	movs	r2, #1
 8013ef2:	4628      	mov	r0, r5
 8013ef4:	9303      	str	r3, [sp, #12]
 8013ef6:	f7fe fe64 	bl	8012bc2 <strncmp>
 8013efa:	4926      	ldr	r1, [pc, #152]	; (8013f94 <__gethex+0x2d8>)
 8013efc:	9b03      	ldr	r3, [sp, #12]
 8013efe:	2800      	cmp	r0, #0
 8013f00:	d1df      	bne.n	8013ec2 <__gethex+0x206>
 8013f02:	e795      	b.n	8013e30 <__gethex+0x174>
 8013f04:	f04f 0b03 	mov.w	fp, #3
 8013f08:	e7c5      	b.n	8013e96 <__gethex+0x1da>
 8013f0a:	da0b      	bge.n	8013f24 <__gethex+0x268>
 8013f0c:	eba5 0800 	sub.w	r8, r5, r0
 8013f10:	4621      	mov	r1, r4
 8013f12:	4642      	mov	r2, r8
 8013f14:	4648      	mov	r0, r9
 8013f16:	f000 fc2d 	bl	8014774 <__lshift>
 8013f1a:	eba6 0608 	sub.w	r6, r6, r8
 8013f1e:	4604      	mov	r4, r0
 8013f20:	f100 0a14 	add.w	sl, r0, #20
 8013f24:	f04f 0b00 	mov.w	fp, #0
 8013f28:	e7ba      	b.n	8013ea0 <__gethex+0x1e4>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	42b3      	cmp	r3, r6
 8013f2e:	dd73      	ble.n	8014018 <__gethex+0x35c>
 8013f30:	1b9e      	subs	r6, r3, r6
 8013f32:	42b5      	cmp	r5, r6
 8013f34:	dc34      	bgt.n	8013fa0 <__gethex+0x2e4>
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	2b02      	cmp	r3, #2
 8013f3a:	d023      	beq.n	8013f84 <__gethex+0x2c8>
 8013f3c:	2b03      	cmp	r3, #3
 8013f3e:	d025      	beq.n	8013f8c <__gethex+0x2d0>
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	d115      	bne.n	8013f70 <__gethex+0x2b4>
 8013f44:	42b5      	cmp	r5, r6
 8013f46:	d113      	bne.n	8013f70 <__gethex+0x2b4>
 8013f48:	2d01      	cmp	r5, #1
 8013f4a:	d10b      	bne.n	8013f64 <__gethex+0x2a8>
 8013f4c:	9a02      	ldr	r2, [sp, #8]
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6013      	str	r3, [r2, #0]
 8013f52:	2301      	movs	r3, #1
 8013f54:	6123      	str	r3, [r4, #16]
 8013f56:	f8ca 3000 	str.w	r3, [sl]
 8013f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f5c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8013f60:	601c      	str	r4, [r3, #0]
 8013f62:	e735      	b.n	8013dd0 <__gethex+0x114>
 8013f64:	1e69      	subs	r1, r5, #1
 8013f66:	4620      	mov	r0, r4
 8013f68:	f000 fe36 	bl	8014bd8 <__any_on>
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	d1ed      	bne.n	8013f4c <__gethex+0x290>
 8013f70:	4621      	mov	r1, r4
 8013f72:	4648      	mov	r0, r9
 8013f74:	f000 f9e4 	bl	8014340 <_Bfree>
 8013f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	6013      	str	r3, [r2, #0]
 8013f7e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8013f82:	e725      	b.n	8013dd0 <__gethex+0x114>
 8013f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d1f2      	bne.n	8013f70 <__gethex+0x2b4>
 8013f8a:	e7df      	b.n	8013f4c <__gethex+0x290>
 8013f8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d1dc      	bne.n	8013f4c <__gethex+0x290>
 8013f92:	e7ed      	b.n	8013f70 <__gethex+0x2b4>
 8013f94:	0801888c 	.word	0x0801888c
 8013f98:	08018b34 	.word	0x08018b34
 8013f9c:	08018b45 	.word	0x08018b45
 8013fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8013fa4:	f1bb 0f00 	cmp.w	fp, #0
 8013fa8:	d133      	bne.n	8014012 <__gethex+0x356>
 8013faa:	f1b8 0f00 	cmp.w	r8, #0
 8013fae:	d004      	beq.n	8013fba <__gethex+0x2fe>
 8013fb0:	4641      	mov	r1, r8
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f000 fe10 	bl	8014bd8 <__any_on>
 8013fb8:	4683      	mov	fp, r0
 8013fba:	ea4f 1268 	mov.w	r2, r8, asr #5
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013fc4:	f008 081f 	and.w	r8, r8, #31
 8013fc8:	fa03 f308 	lsl.w	r3, r3, r8
 8013fcc:	4213      	tst	r3, r2
 8013fce:	4631      	mov	r1, r6
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	bf18      	it	ne
 8013fd4:	f04b 0b02 	orrne.w	fp, fp, #2
 8013fd8:	1bad      	subs	r5, r5, r6
 8013fda:	f7ff fe07 	bl	8013bec <rshift>
 8013fde:	687e      	ldr	r6, [r7, #4]
 8013fe0:	f04f 0802 	mov.w	r8, #2
 8013fe4:	f1bb 0f00 	cmp.w	fp, #0
 8013fe8:	d04a      	beq.n	8014080 <__gethex+0x3c4>
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2b02      	cmp	r3, #2
 8013fee:	d016      	beq.n	801401e <__gethex+0x362>
 8013ff0:	2b03      	cmp	r3, #3
 8013ff2:	d018      	beq.n	8014026 <__gethex+0x36a>
 8013ff4:	2b01      	cmp	r3, #1
 8013ff6:	d109      	bne.n	801400c <__gethex+0x350>
 8013ff8:	f01b 0f02 	tst.w	fp, #2
 8013ffc:	d006      	beq.n	801400c <__gethex+0x350>
 8013ffe:	f8da 3000 	ldr.w	r3, [sl]
 8014002:	ea4b 0b03 	orr.w	fp, fp, r3
 8014006:	f01b 0f01 	tst.w	fp, #1
 801400a:	d10f      	bne.n	801402c <__gethex+0x370>
 801400c:	f048 0810 	orr.w	r8, r8, #16
 8014010:	e036      	b.n	8014080 <__gethex+0x3c4>
 8014012:	f04f 0b01 	mov.w	fp, #1
 8014016:	e7d0      	b.n	8013fba <__gethex+0x2fe>
 8014018:	f04f 0801 	mov.w	r8, #1
 801401c:	e7e2      	b.n	8013fe4 <__gethex+0x328>
 801401e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014020:	f1c3 0301 	rsb	r3, r3, #1
 8014024:	930f      	str	r3, [sp, #60]	; 0x3c
 8014026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014028:	2b00      	cmp	r3, #0
 801402a:	d0ef      	beq.n	801400c <__gethex+0x350>
 801402c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014030:	f104 0214 	add.w	r2, r4, #20
 8014034:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014038:	9301      	str	r3, [sp, #4]
 801403a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801403e:	2300      	movs	r3, #0
 8014040:	4694      	mov	ip, r2
 8014042:	f852 1b04 	ldr.w	r1, [r2], #4
 8014046:	f1b1 3fff 	cmp.w	r1, #4294967295
 801404a:	d01e      	beq.n	801408a <__gethex+0x3ce>
 801404c:	3101      	adds	r1, #1
 801404e:	f8cc 1000 	str.w	r1, [ip]
 8014052:	f1b8 0f02 	cmp.w	r8, #2
 8014056:	f104 0214 	add.w	r2, r4, #20
 801405a:	d13d      	bne.n	80140d8 <__gethex+0x41c>
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	3b01      	subs	r3, #1
 8014060:	42ab      	cmp	r3, r5
 8014062:	d10b      	bne.n	801407c <__gethex+0x3c0>
 8014064:	1169      	asrs	r1, r5, #5
 8014066:	2301      	movs	r3, #1
 8014068:	f005 051f 	and.w	r5, r5, #31
 801406c:	fa03 f505 	lsl.w	r5, r3, r5
 8014070:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014074:	421d      	tst	r5, r3
 8014076:	bf18      	it	ne
 8014078:	f04f 0801 	movne.w	r8, #1
 801407c:	f048 0820 	orr.w	r8, r8, #32
 8014080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014082:	601c      	str	r4, [r3, #0]
 8014084:	9b02      	ldr	r3, [sp, #8]
 8014086:	601e      	str	r6, [r3, #0]
 8014088:	e6a2      	b.n	8013dd0 <__gethex+0x114>
 801408a:	4290      	cmp	r0, r2
 801408c:	f842 3c04 	str.w	r3, [r2, #-4]
 8014090:	d8d6      	bhi.n	8014040 <__gethex+0x384>
 8014092:	68a2      	ldr	r2, [r4, #8]
 8014094:	4593      	cmp	fp, r2
 8014096:	db17      	blt.n	80140c8 <__gethex+0x40c>
 8014098:	6861      	ldr	r1, [r4, #4]
 801409a:	4648      	mov	r0, r9
 801409c:	3101      	adds	r1, #1
 801409e:	f000 f90f 	bl	80142c0 <_Balloc>
 80140a2:	4682      	mov	sl, r0
 80140a4:	b918      	cbnz	r0, 80140ae <__gethex+0x3f2>
 80140a6:	4b1b      	ldr	r3, [pc, #108]	; (8014114 <__gethex+0x458>)
 80140a8:	4602      	mov	r2, r0
 80140aa:	2184      	movs	r1, #132	; 0x84
 80140ac:	e6b3      	b.n	8013e16 <__gethex+0x15a>
 80140ae:	6922      	ldr	r2, [r4, #16]
 80140b0:	3202      	adds	r2, #2
 80140b2:	f104 010c 	add.w	r1, r4, #12
 80140b6:	0092      	lsls	r2, r2, #2
 80140b8:	300c      	adds	r0, #12
 80140ba:	f7fe fe96 	bl	8012dea <memcpy>
 80140be:	4621      	mov	r1, r4
 80140c0:	4648      	mov	r0, r9
 80140c2:	f000 f93d 	bl	8014340 <_Bfree>
 80140c6:	4654      	mov	r4, sl
 80140c8:	6922      	ldr	r2, [r4, #16]
 80140ca:	1c51      	adds	r1, r2, #1
 80140cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80140d0:	6121      	str	r1, [r4, #16]
 80140d2:	2101      	movs	r1, #1
 80140d4:	6151      	str	r1, [r2, #20]
 80140d6:	e7bc      	b.n	8014052 <__gethex+0x396>
 80140d8:	6921      	ldr	r1, [r4, #16]
 80140da:	4559      	cmp	r1, fp
 80140dc:	dd0b      	ble.n	80140f6 <__gethex+0x43a>
 80140de:	2101      	movs	r1, #1
 80140e0:	4620      	mov	r0, r4
 80140e2:	f7ff fd83 	bl	8013bec <rshift>
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	3601      	adds	r6, #1
 80140ea:	42b3      	cmp	r3, r6
 80140ec:	f6ff aedb 	blt.w	8013ea6 <__gethex+0x1ea>
 80140f0:	f04f 0801 	mov.w	r8, #1
 80140f4:	e7c2      	b.n	801407c <__gethex+0x3c0>
 80140f6:	f015 051f 	ands.w	r5, r5, #31
 80140fa:	d0f9      	beq.n	80140f0 <__gethex+0x434>
 80140fc:	9b01      	ldr	r3, [sp, #4]
 80140fe:	441a      	add	r2, r3
 8014100:	f1c5 0520 	rsb	r5, r5, #32
 8014104:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014108:	f000 f9cc 	bl	80144a4 <__hi0bits>
 801410c:	42a8      	cmp	r0, r5
 801410e:	dbe6      	blt.n	80140de <__gethex+0x422>
 8014110:	e7ee      	b.n	80140f0 <__gethex+0x434>
 8014112:	bf00      	nop
 8014114:	08018b34 	.word	0x08018b34

08014118 <L_shift>:
 8014118:	f1c2 0208 	rsb	r2, r2, #8
 801411c:	0092      	lsls	r2, r2, #2
 801411e:	b570      	push	{r4, r5, r6, lr}
 8014120:	f1c2 0620 	rsb	r6, r2, #32
 8014124:	6843      	ldr	r3, [r0, #4]
 8014126:	6804      	ldr	r4, [r0, #0]
 8014128:	fa03 f506 	lsl.w	r5, r3, r6
 801412c:	432c      	orrs	r4, r5
 801412e:	40d3      	lsrs	r3, r2
 8014130:	6004      	str	r4, [r0, #0]
 8014132:	f840 3f04 	str.w	r3, [r0, #4]!
 8014136:	4288      	cmp	r0, r1
 8014138:	d3f4      	bcc.n	8014124 <L_shift+0xc>
 801413a:	bd70      	pop	{r4, r5, r6, pc}

0801413c <__match>:
 801413c:	b530      	push	{r4, r5, lr}
 801413e:	6803      	ldr	r3, [r0, #0]
 8014140:	3301      	adds	r3, #1
 8014142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014146:	b914      	cbnz	r4, 801414e <__match+0x12>
 8014148:	6003      	str	r3, [r0, #0]
 801414a:	2001      	movs	r0, #1
 801414c:	bd30      	pop	{r4, r5, pc}
 801414e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014152:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014156:	2d19      	cmp	r5, #25
 8014158:	bf98      	it	ls
 801415a:	3220      	addls	r2, #32
 801415c:	42a2      	cmp	r2, r4
 801415e:	d0f0      	beq.n	8014142 <__match+0x6>
 8014160:	2000      	movs	r0, #0
 8014162:	e7f3      	b.n	801414c <__match+0x10>

08014164 <__hexnan>:
 8014164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014168:	680b      	ldr	r3, [r1, #0]
 801416a:	6801      	ldr	r1, [r0, #0]
 801416c:	115e      	asrs	r6, r3, #5
 801416e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014172:	f013 031f 	ands.w	r3, r3, #31
 8014176:	b087      	sub	sp, #28
 8014178:	bf18      	it	ne
 801417a:	3604      	addne	r6, #4
 801417c:	2500      	movs	r5, #0
 801417e:	1f37      	subs	r7, r6, #4
 8014180:	4682      	mov	sl, r0
 8014182:	4690      	mov	r8, r2
 8014184:	9301      	str	r3, [sp, #4]
 8014186:	f846 5c04 	str.w	r5, [r6, #-4]
 801418a:	46b9      	mov	r9, r7
 801418c:	463c      	mov	r4, r7
 801418e:	9502      	str	r5, [sp, #8]
 8014190:	46ab      	mov	fp, r5
 8014192:	784a      	ldrb	r2, [r1, #1]
 8014194:	1c4b      	adds	r3, r1, #1
 8014196:	9303      	str	r3, [sp, #12]
 8014198:	b342      	cbz	r2, 80141ec <__hexnan+0x88>
 801419a:	4610      	mov	r0, r2
 801419c:	9105      	str	r1, [sp, #20]
 801419e:	9204      	str	r2, [sp, #16]
 80141a0:	f7ff fd76 	bl	8013c90 <__hexdig_fun>
 80141a4:	2800      	cmp	r0, #0
 80141a6:	d14f      	bne.n	8014248 <__hexnan+0xe4>
 80141a8:	9a04      	ldr	r2, [sp, #16]
 80141aa:	9905      	ldr	r1, [sp, #20]
 80141ac:	2a20      	cmp	r2, #32
 80141ae:	d818      	bhi.n	80141e2 <__hexnan+0x7e>
 80141b0:	9b02      	ldr	r3, [sp, #8]
 80141b2:	459b      	cmp	fp, r3
 80141b4:	dd13      	ble.n	80141de <__hexnan+0x7a>
 80141b6:	454c      	cmp	r4, r9
 80141b8:	d206      	bcs.n	80141c8 <__hexnan+0x64>
 80141ba:	2d07      	cmp	r5, #7
 80141bc:	dc04      	bgt.n	80141c8 <__hexnan+0x64>
 80141be:	462a      	mov	r2, r5
 80141c0:	4649      	mov	r1, r9
 80141c2:	4620      	mov	r0, r4
 80141c4:	f7ff ffa8 	bl	8014118 <L_shift>
 80141c8:	4544      	cmp	r4, r8
 80141ca:	d950      	bls.n	801426e <__hexnan+0x10a>
 80141cc:	2300      	movs	r3, #0
 80141ce:	f1a4 0904 	sub.w	r9, r4, #4
 80141d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80141d6:	f8cd b008 	str.w	fp, [sp, #8]
 80141da:	464c      	mov	r4, r9
 80141dc:	461d      	mov	r5, r3
 80141de:	9903      	ldr	r1, [sp, #12]
 80141e0:	e7d7      	b.n	8014192 <__hexnan+0x2e>
 80141e2:	2a29      	cmp	r2, #41	; 0x29
 80141e4:	d155      	bne.n	8014292 <__hexnan+0x12e>
 80141e6:	3102      	adds	r1, #2
 80141e8:	f8ca 1000 	str.w	r1, [sl]
 80141ec:	f1bb 0f00 	cmp.w	fp, #0
 80141f0:	d04f      	beq.n	8014292 <__hexnan+0x12e>
 80141f2:	454c      	cmp	r4, r9
 80141f4:	d206      	bcs.n	8014204 <__hexnan+0xa0>
 80141f6:	2d07      	cmp	r5, #7
 80141f8:	dc04      	bgt.n	8014204 <__hexnan+0xa0>
 80141fa:	462a      	mov	r2, r5
 80141fc:	4649      	mov	r1, r9
 80141fe:	4620      	mov	r0, r4
 8014200:	f7ff ff8a 	bl	8014118 <L_shift>
 8014204:	4544      	cmp	r4, r8
 8014206:	d934      	bls.n	8014272 <__hexnan+0x10e>
 8014208:	f1a8 0204 	sub.w	r2, r8, #4
 801420c:	4623      	mov	r3, r4
 801420e:	f853 1b04 	ldr.w	r1, [r3], #4
 8014212:	f842 1f04 	str.w	r1, [r2, #4]!
 8014216:	429f      	cmp	r7, r3
 8014218:	d2f9      	bcs.n	801420e <__hexnan+0xaa>
 801421a:	1b3b      	subs	r3, r7, r4
 801421c:	f023 0303 	bic.w	r3, r3, #3
 8014220:	3304      	adds	r3, #4
 8014222:	3e03      	subs	r6, #3
 8014224:	3401      	adds	r4, #1
 8014226:	42a6      	cmp	r6, r4
 8014228:	bf38      	it	cc
 801422a:	2304      	movcc	r3, #4
 801422c:	4443      	add	r3, r8
 801422e:	2200      	movs	r2, #0
 8014230:	f843 2b04 	str.w	r2, [r3], #4
 8014234:	429f      	cmp	r7, r3
 8014236:	d2fb      	bcs.n	8014230 <__hexnan+0xcc>
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	b91b      	cbnz	r3, 8014244 <__hexnan+0xe0>
 801423c:	4547      	cmp	r7, r8
 801423e:	d126      	bne.n	801428e <__hexnan+0x12a>
 8014240:	2301      	movs	r3, #1
 8014242:	603b      	str	r3, [r7, #0]
 8014244:	2005      	movs	r0, #5
 8014246:	e025      	b.n	8014294 <__hexnan+0x130>
 8014248:	3501      	adds	r5, #1
 801424a:	2d08      	cmp	r5, #8
 801424c:	f10b 0b01 	add.w	fp, fp, #1
 8014250:	dd06      	ble.n	8014260 <__hexnan+0xfc>
 8014252:	4544      	cmp	r4, r8
 8014254:	d9c3      	bls.n	80141de <__hexnan+0x7a>
 8014256:	2300      	movs	r3, #0
 8014258:	f844 3c04 	str.w	r3, [r4, #-4]
 801425c:	2501      	movs	r5, #1
 801425e:	3c04      	subs	r4, #4
 8014260:	6822      	ldr	r2, [r4, #0]
 8014262:	f000 000f 	and.w	r0, r0, #15
 8014266:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801426a:	6020      	str	r0, [r4, #0]
 801426c:	e7b7      	b.n	80141de <__hexnan+0x7a>
 801426e:	2508      	movs	r5, #8
 8014270:	e7b5      	b.n	80141de <__hexnan+0x7a>
 8014272:	9b01      	ldr	r3, [sp, #4]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d0df      	beq.n	8014238 <__hexnan+0xd4>
 8014278:	f1c3 0320 	rsb	r3, r3, #32
 801427c:	f04f 32ff 	mov.w	r2, #4294967295
 8014280:	40da      	lsrs	r2, r3
 8014282:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014286:	4013      	ands	r3, r2
 8014288:	f846 3c04 	str.w	r3, [r6, #-4]
 801428c:	e7d4      	b.n	8014238 <__hexnan+0xd4>
 801428e:	3f04      	subs	r7, #4
 8014290:	e7d2      	b.n	8014238 <__hexnan+0xd4>
 8014292:	2004      	movs	r0, #4
 8014294:	b007      	add	sp, #28
 8014296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801429a <__ascii_mbtowc>:
 801429a:	b082      	sub	sp, #8
 801429c:	b901      	cbnz	r1, 80142a0 <__ascii_mbtowc+0x6>
 801429e:	a901      	add	r1, sp, #4
 80142a0:	b142      	cbz	r2, 80142b4 <__ascii_mbtowc+0x1a>
 80142a2:	b14b      	cbz	r3, 80142b8 <__ascii_mbtowc+0x1e>
 80142a4:	7813      	ldrb	r3, [r2, #0]
 80142a6:	600b      	str	r3, [r1, #0]
 80142a8:	7812      	ldrb	r2, [r2, #0]
 80142aa:	1e10      	subs	r0, r2, #0
 80142ac:	bf18      	it	ne
 80142ae:	2001      	movne	r0, #1
 80142b0:	b002      	add	sp, #8
 80142b2:	4770      	bx	lr
 80142b4:	4610      	mov	r0, r2
 80142b6:	e7fb      	b.n	80142b0 <__ascii_mbtowc+0x16>
 80142b8:	f06f 0001 	mvn.w	r0, #1
 80142bc:	e7f8      	b.n	80142b0 <__ascii_mbtowc+0x16>
	...

080142c0 <_Balloc>:
 80142c0:	b570      	push	{r4, r5, r6, lr}
 80142c2:	69c6      	ldr	r6, [r0, #28]
 80142c4:	4604      	mov	r4, r0
 80142c6:	460d      	mov	r5, r1
 80142c8:	b976      	cbnz	r6, 80142e8 <_Balloc+0x28>
 80142ca:	2010      	movs	r0, #16
 80142cc:	f7fc fcde 	bl	8010c8c <malloc>
 80142d0:	4602      	mov	r2, r0
 80142d2:	61e0      	str	r0, [r4, #28]
 80142d4:	b920      	cbnz	r0, 80142e0 <_Balloc+0x20>
 80142d6:	4b18      	ldr	r3, [pc, #96]	; (8014338 <_Balloc+0x78>)
 80142d8:	4818      	ldr	r0, [pc, #96]	; (801433c <_Balloc+0x7c>)
 80142da:	216b      	movs	r1, #107	; 0x6b
 80142dc:	f7fe fda2 	bl	8012e24 <__assert_func>
 80142e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80142e4:	6006      	str	r6, [r0, #0]
 80142e6:	60c6      	str	r6, [r0, #12]
 80142e8:	69e6      	ldr	r6, [r4, #28]
 80142ea:	68f3      	ldr	r3, [r6, #12]
 80142ec:	b183      	cbz	r3, 8014310 <_Balloc+0x50>
 80142ee:	69e3      	ldr	r3, [r4, #28]
 80142f0:	68db      	ldr	r3, [r3, #12]
 80142f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80142f6:	b9b8      	cbnz	r0, 8014328 <_Balloc+0x68>
 80142f8:	2101      	movs	r1, #1
 80142fa:	fa01 f605 	lsl.w	r6, r1, r5
 80142fe:	1d72      	adds	r2, r6, #5
 8014300:	0092      	lsls	r2, r2, #2
 8014302:	4620      	mov	r0, r4
 8014304:	f000 fecf 	bl	80150a6 <_calloc_r>
 8014308:	b160      	cbz	r0, 8014324 <_Balloc+0x64>
 801430a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801430e:	e00e      	b.n	801432e <_Balloc+0x6e>
 8014310:	2221      	movs	r2, #33	; 0x21
 8014312:	2104      	movs	r1, #4
 8014314:	4620      	mov	r0, r4
 8014316:	f000 fec6 	bl	80150a6 <_calloc_r>
 801431a:	69e3      	ldr	r3, [r4, #28]
 801431c:	60f0      	str	r0, [r6, #12]
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d1e4      	bne.n	80142ee <_Balloc+0x2e>
 8014324:	2000      	movs	r0, #0
 8014326:	bd70      	pop	{r4, r5, r6, pc}
 8014328:	6802      	ldr	r2, [r0, #0]
 801432a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801432e:	2300      	movs	r3, #0
 8014330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014334:	e7f7      	b.n	8014326 <_Balloc+0x66>
 8014336:	bf00      	nop
 8014338:	08018a1a 	.word	0x08018a1a
 801433c:	08018ba5 	.word	0x08018ba5

08014340 <_Bfree>:
 8014340:	b570      	push	{r4, r5, r6, lr}
 8014342:	69c6      	ldr	r6, [r0, #28]
 8014344:	4605      	mov	r5, r0
 8014346:	460c      	mov	r4, r1
 8014348:	b976      	cbnz	r6, 8014368 <_Bfree+0x28>
 801434a:	2010      	movs	r0, #16
 801434c:	f7fc fc9e 	bl	8010c8c <malloc>
 8014350:	4602      	mov	r2, r0
 8014352:	61e8      	str	r0, [r5, #28]
 8014354:	b920      	cbnz	r0, 8014360 <_Bfree+0x20>
 8014356:	4b09      	ldr	r3, [pc, #36]	; (801437c <_Bfree+0x3c>)
 8014358:	4809      	ldr	r0, [pc, #36]	; (8014380 <_Bfree+0x40>)
 801435a:	218f      	movs	r1, #143	; 0x8f
 801435c:	f7fe fd62 	bl	8012e24 <__assert_func>
 8014360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014364:	6006      	str	r6, [r0, #0]
 8014366:	60c6      	str	r6, [r0, #12]
 8014368:	b13c      	cbz	r4, 801437a <_Bfree+0x3a>
 801436a:	69eb      	ldr	r3, [r5, #28]
 801436c:	6862      	ldr	r2, [r4, #4]
 801436e:	68db      	ldr	r3, [r3, #12]
 8014370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014374:	6021      	str	r1, [r4, #0]
 8014376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801437a:	bd70      	pop	{r4, r5, r6, pc}
 801437c:	08018a1a 	.word	0x08018a1a
 8014380:	08018ba5 	.word	0x08018ba5

08014384 <__multadd>:
 8014384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014388:	690d      	ldr	r5, [r1, #16]
 801438a:	4607      	mov	r7, r0
 801438c:	460c      	mov	r4, r1
 801438e:	461e      	mov	r6, r3
 8014390:	f101 0c14 	add.w	ip, r1, #20
 8014394:	2000      	movs	r0, #0
 8014396:	f8dc 3000 	ldr.w	r3, [ip]
 801439a:	b299      	uxth	r1, r3
 801439c:	fb02 6101 	mla	r1, r2, r1, r6
 80143a0:	0c1e      	lsrs	r6, r3, #16
 80143a2:	0c0b      	lsrs	r3, r1, #16
 80143a4:	fb02 3306 	mla	r3, r2, r6, r3
 80143a8:	b289      	uxth	r1, r1
 80143aa:	3001      	adds	r0, #1
 80143ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80143b0:	4285      	cmp	r5, r0
 80143b2:	f84c 1b04 	str.w	r1, [ip], #4
 80143b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80143ba:	dcec      	bgt.n	8014396 <__multadd+0x12>
 80143bc:	b30e      	cbz	r6, 8014402 <__multadd+0x7e>
 80143be:	68a3      	ldr	r3, [r4, #8]
 80143c0:	42ab      	cmp	r3, r5
 80143c2:	dc19      	bgt.n	80143f8 <__multadd+0x74>
 80143c4:	6861      	ldr	r1, [r4, #4]
 80143c6:	4638      	mov	r0, r7
 80143c8:	3101      	adds	r1, #1
 80143ca:	f7ff ff79 	bl	80142c0 <_Balloc>
 80143ce:	4680      	mov	r8, r0
 80143d0:	b928      	cbnz	r0, 80143de <__multadd+0x5a>
 80143d2:	4602      	mov	r2, r0
 80143d4:	4b0c      	ldr	r3, [pc, #48]	; (8014408 <__multadd+0x84>)
 80143d6:	480d      	ldr	r0, [pc, #52]	; (801440c <__multadd+0x88>)
 80143d8:	21ba      	movs	r1, #186	; 0xba
 80143da:	f7fe fd23 	bl	8012e24 <__assert_func>
 80143de:	6922      	ldr	r2, [r4, #16]
 80143e0:	3202      	adds	r2, #2
 80143e2:	f104 010c 	add.w	r1, r4, #12
 80143e6:	0092      	lsls	r2, r2, #2
 80143e8:	300c      	adds	r0, #12
 80143ea:	f7fe fcfe 	bl	8012dea <memcpy>
 80143ee:	4621      	mov	r1, r4
 80143f0:	4638      	mov	r0, r7
 80143f2:	f7ff ffa5 	bl	8014340 <_Bfree>
 80143f6:	4644      	mov	r4, r8
 80143f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80143fc:	3501      	adds	r5, #1
 80143fe:	615e      	str	r6, [r3, #20]
 8014400:	6125      	str	r5, [r4, #16]
 8014402:	4620      	mov	r0, r4
 8014404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014408:	08018b34 	.word	0x08018b34
 801440c:	08018ba5 	.word	0x08018ba5

08014410 <__s2b>:
 8014410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014414:	460c      	mov	r4, r1
 8014416:	4615      	mov	r5, r2
 8014418:	461f      	mov	r7, r3
 801441a:	2209      	movs	r2, #9
 801441c:	3308      	adds	r3, #8
 801441e:	4606      	mov	r6, r0
 8014420:	fb93 f3f2 	sdiv	r3, r3, r2
 8014424:	2100      	movs	r1, #0
 8014426:	2201      	movs	r2, #1
 8014428:	429a      	cmp	r2, r3
 801442a:	db09      	blt.n	8014440 <__s2b+0x30>
 801442c:	4630      	mov	r0, r6
 801442e:	f7ff ff47 	bl	80142c0 <_Balloc>
 8014432:	b940      	cbnz	r0, 8014446 <__s2b+0x36>
 8014434:	4602      	mov	r2, r0
 8014436:	4b19      	ldr	r3, [pc, #100]	; (801449c <__s2b+0x8c>)
 8014438:	4819      	ldr	r0, [pc, #100]	; (80144a0 <__s2b+0x90>)
 801443a:	21d3      	movs	r1, #211	; 0xd3
 801443c:	f7fe fcf2 	bl	8012e24 <__assert_func>
 8014440:	0052      	lsls	r2, r2, #1
 8014442:	3101      	adds	r1, #1
 8014444:	e7f0      	b.n	8014428 <__s2b+0x18>
 8014446:	9b08      	ldr	r3, [sp, #32]
 8014448:	6143      	str	r3, [r0, #20]
 801444a:	2d09      	cmp	r5, #9
 801444c:	f04f 0301 	mov.w	r3, #1
 8014450:	6103      	str	r3, [r0, #16]
 8014452:	dd16      	ble.n	8014482 <__s2b+0x72>
 8014454:	f104 0909 	add.w	r9, r4, #9
 8014458:	46c8      	mov	r8, r9
 801445a:	442c      	add	r4, r5
 801445c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014460:	4601      	mov	r1, r0
 8014462:	3b30      	subs	r3, #48	; 0x30
 8014464:	220a      	movs	r2, #10
 8014466:	4630      	mov	r0, r6
 8014468:	f7ff ff8c 	bl	8014384 <__multadd>
 801446c:	45a0      	cmp	r8, r4
 801446e:	d1f5      	bne.n	801445c <__s2b+0x4c>
 8014470:	f1a5 0408 	sub.w	r4, r5, #8
 8014474:	444c      	add	r4, r9
 8014476:	1b2d      	subs	r5, r5, r4
 8014478:	1963      	adds	r3, r4, r5
 801447a:	42bb      	cmp	r3, r7
 801447c:	db04      	blt.n	8014488 <__s2b+0x78>
 801447e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014482:	340a      	adds	r4, #10
 8014484:	2509      	movs	r5, #9
 8014486:	e7f6      	b.n	8014476 <__s2b+0x66>
 8014488:	f814 3b01 	ldrb.w	r3, [r4], #1
 801448c:	4601      	mov	r1, r0
 801448e:	3b30      	subs	r3, #48	; 0x30
 8014490:	220a      	movs	r2, #10
 8014492:	4630      	mov	r0, r6
 8014494:	f7ff ff76 	bl	8014384 <__multadd>
 8014498:	e7ee      	b.n	8014478 <__s2b+0x68>
 801449a:	bf00      	nop
 801449c:	08018b34 	.word	0x08018b34
 80144a0:	08018ba5 	.word	0x08018ba5

080144a4 <__hi0bits>:
 80144a4:	0c03      	lsrs	r3, r0, #16
 80144a6:	041b      	lsls	r3, r3, #16
 80144a8:	b9d3      	cbnz	r3, 80144e0 <__hi0bits+0x3c>
 80144aa:	0400      	lsls	r0, r0, #16
 80144ac:	2310      	movs	r3, #16
 80144ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80144b2:	bf04      	itt	eq
 80144b4:	0200      	lsleq	r0, r0, #8
 80144b6:	3308      	addeq	r3, #8
 80144b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80144bc:	bf04      	itt	eq
 80144be:	0100      	lsleq	r0, r0, #4
 80144c0:	3304      	addeq	r3, #4
 80144c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80144c6:	bf04      	itt	eq
 80144c8:	0080      	lsleq	r0, r0, #2
 80144ca:	3302      	addeq	r3, #2
 80144cc:	2800      	cmp	r0, #0
 80144ce:	db05      	blt.n	80144dc <__hi0bits+0x38>
 80144d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80144d4:	f103 0301 	add.w	r3, r3, #1
 80144d8:	bf08      	it	eq
 80144da:	2320      	moveq	r3, #32
 80144dc:	4618      	mov	r0, r3
 80144de:	4770      	bx	lr
 80144e0:	2300      	movs	r3, #0
 80144e2:	e7e4      	b.n	80144ae <__hi0bits+0xa>

080144e4 <__lo0bits>:
 80144e4:	6803      	ldr	r3, [r0, #0]
 80144e6:	f013 0207 	ands.w	r2, r3, #7
 80144ea:	d00c      	beq.n	8014506 <__lo0bits+0x22>
 80144ec:	07d9      	lsls	r1, r3, #31
 80144ee:	d422      	bmi.n	8014536 <__lo0bits+0x52>
 80144f0:	079a      	lsls	r2, r3, #30
 80144f2:	bf49      	itett	mi
 80144f4:	085b      	lsrmi	r3, r3, #1
 80144f6:	089b      	lsrpl	r3, r3, #2
 80144f8:	6003      	strmi	r3, [r0, #0]
 80144fa:	2201      	movmi	r2, #1
 80144fc:	bf5c      	itt	pl
 80144fe:	6003      	strpl	r3, [r0, #0]
 8014500:	2202      	movpl	r2, #2
 8014502:	4610      	mov	r0, r2
 8014504:	4770      	bx	lr
 8014506:	b299      	uxth	r1, r3
 8014508:	b909      	cbnz	r1, 801450e <__lo0bits+0x2a>
 801450a:	0c1b      	lsrs	r3, r3, #16
 801450c:	2210      	movs	r2, #16
 801450e:	b2d9      	uxtb	r1, r3
 8014510:	b909      	cbnz	r1, 8014516 <__lo0bits+0x32>
 8014512:	3208      	adds	r2, #8
 8014514:	0a1b      	lsrs	r3, r3, #8
 8014516:	0719      	lsls	r1, r3, #28
 8014518:	bf04      	itt	eq
 801451a:	091b      	lsreq	r3, r3, #4
 801451c:	3204      	addeq	r2, #4
 801451e:	0799      	lsls	r1, r3, #30
 8014520:	bf04      	itt	eq
 8014522:	089b      	lsreq	r3, r3, #2
 8014524:	3202      	addeq	r2, #2
 8014526:	07d9      	lsls	r1, r3, #31
 8014528:	d403      	bmi.n	8014532 <__lo0bits+0x4e>
 801452a:	085b      	lsrs	r3, r3, #1
 801452c:	f102 0201 	add.w	r2, r2, #1
 8014530:	d003      	beq.n	801453a <__lo0bits+0x56>
 8014532:	6003      	str	r3, [r0, #0]
 8014534:	e7e5      	b.n	8014502 <__lo0bits+0x1e>
 8014536:	2200      	movs	r2, #0
 8014538:	e7e3      	b.n	8014502 <__lo0bits+0x1e>
 801453a:	2220      	movs	r2, #32
 801453c:	e7e1      	b.n	8014502 <__lo0bits+0x1e>
	...

08014540 <__i2b>:
 8014540:	b510      	push	{r4, lr}
 8014542:	460c      	mov	r4, r1
 8014544:	2101      	movs	r1, #1
 8014546:	f7ff febb 	bl	80142c0 <_Balloc>
 801454a:	4602      	mov	r2, r0
 801454c:	b928      	cbnz	r0, 801455a <__i2b+0x1a>
 801454e:	4b05      	ldr	r3, [pc, #20]	; (8014564 <__i2b+0x24>)
 8014550:	4805      	ldr	r0, [pc, #20]	; (8014568 <__i2b+0x28>)
 8014552:	f240 1145 	movw	r1, #325	; 0x145
 8014556:	f7fe fc65 	bl	8012e24 <__assert_func>
 801455a:	2301      	movs	r3, #1
 801455c:	6144      	str	r4, [r0, #20]
 801455e:	6103      	str	r3, [r0, #16]
 8014560:	bd10      	pop	{r4, pc}
 8014562:	bf00      	nop
 8014564:	08018b34 	.word	0x08018b34
 8014568:	08018ba5 	.word	0x08018ba5

0801456c <__multiply>:
 801456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014570:	4691      	mov	r9, r2
 8014572:	690a      	ldr	r2, [r1, #16]
 8014574:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014578:	429a      	cmp	r2, r3
 801457a:	bfb8      	it	lt
 801457c:	460b      	movlt	r3, r1
 801457e:	460c      	mov	r4, r1
 8014580:	bfbc      	itt	lt
 8014582:	464c      	movlt	r4, r9
 8014584:	4699      	movlt	r9, r3
 8014586:	6927      	ldr	r7, [r4, #16]
 8014588:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801458c:	68a3      	ldr	r3, [r4, #8]
 801458e:	6861      	ldr	r1, [r4, #4]
 8014590:	eb07 060a 	add.w	r6, r7, sl
 8014594:	42b3      	cmp	r3, r6
 8014596:	b085      	sub	sp, #20
 8014598:	bfb8      	it	lt
 801459a:	3101      	addlt	r1, #1
 801459c:	f7ff fe90 	bl	80142c0 <_Balloc>
 80145a0:	b930      	cbnz	r0, 80145b0 <__multiply+0x44>
 80145a2:	4602      	mov	r2, r0
 80145a4:	4b44      	ldr	r3, [pc, #272]	; (80146b8 <__multiply+0x14c>)
 80145a6:	4845      	ldr	r0, [pc, #276]	; (80146bc <__multiply+0x150>)
 80145a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80145ac:	f7fe fc3a 	bl	8012e24 <__assert_func>
 80145b0:	f100 0514 	add.w	r5, r0, #20
 80145b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80145b8:	462b      	mov	r3, r5
 80145ba:	2200      	movs	r2, #0
 80145bc:	4543      	cmp	r3, r8
 80145be:	d321      	bcc.n	8014604 <__multiply+0x98>
 80145c0:	f104 0314 	add.w	r3, r4, #20
 80145c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80145c8:	f109 0314 	add.w	r3, r9, #20
 80145cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80145d0:	9202      	str	r2, [sp, #8]
 80145d2:	1b3a      	subs	r2, r7, r4
 80145d4:	3a15      	subs	r2, #21
 80145d6:	f022 0203 	bic.w	r2, r2, #3
 80145da:	3204      	adds	r2, #4
 80145dc:	f104 0115 	add.w	r1, r4, #21
 80145e0:	428f      	cmp	r7, r1
 80145e2:	bf38      	it	cc
 80145e4:	2204      	movcc	r2, #4
 80145e6:	9201      	str	r2, [sp, #4]
 80145e8:	9a02      	ldr	r2, [sp, #8]
 80145ea:	9303      	str	r3, [sp, #12]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d80c      	bhi.n	801460a <__multiply+0x9e>
 80145f0:	2e00      	cmp	r6, #0
 80145f2:	dd03      	ble.n	80145fc <__multiply+0x90>
 80145f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d05b      	beq.n	80146b4 <__multiply+0x148>
 80145fc:	6106      	str	r6, [r0, #16]
 80145fe:	b005      	add	sp, #20
 8014600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014604:	f843 2b04 	str.w	r2, [r3], #4
 8014608:	e7d8      	b.n	80145bc <__multiply+0x50>
 801460a:	f8b3 a000 	ldrh.w	sl, [r3]
 801460e:	f1ba 0f00 	cmp.w	sl, #0
 8014612:	d024      	beq.n	801465e <__multiply+0xf2>
 8014614:	f104 0e14 	add.w	lr, r4, #20
 8014618:	46a9      	mov	r9, r5
 801461a:	f04f 0c00 	mov.w	ip, #0
 801461e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014622:	f8d9 1000 	ldr.w	r1, [r9]
 8014626:	fa1f fb82 	uxth.w	fp, r2
 801462a:	b289      	uxth	r1, r1
 801462c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014630:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014634:	f8d9 2000 	ldr.w	r2, [r9]
 8014638:	4461      	add	r1, ip
 801463a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801463e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014646:	b289      	uxth	r1, r1
 8014648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801464c:	4577      	cmp	r7, lr
 801464e:	f849 1b04 	str.w	r1, [r9], #4
 8014652:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014656:	d8e2      	bhi.n	801461e <__multiply+0xb2>
 8014658:	9a01      	ldr	r2, [sp, #4]
 801465a:	f845 c002 	str.w	ip, [r5, r2]
 801465e:	9a03      	ldr	r2, [sp, #12]
 8014660:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014664:	3304      	adds	r3, #4
 8014666:	f1b9 0f00 	cmp.w	r9, #0
 801466a:	d021      	beq.n	80146b0 <__multiply+0x144>
 801466c:	6829      	ldr	r1, [r5, #0]
 801466e:	f104 0c14 	add.w	ip, r4, #20
 8014672:	46ae      	mov	lr, r5
 8014674:	f04f 0a00 	mov.w	sl, #0
 8014678:	f8bc b000 	ldrh.w	fp, [ip]
 801467c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014680:	fb09 220b 	mla	r2, r9, fp, r2
 8014684:	4452      	add	r2, sl
 8014686:	b289      	uxth	r1, r1
 8014688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801468c:	f84e 1b04 	str.w	r1, [lr], #4
 8014690:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014694:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014698:	f8be 1000 	ldrh.w	r1, [lr]
 801469c:	fb09 110a 	mla	r1, r9, sl, r1
 80146a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80146a4:	4567      	cmp	r7, ip
 80146a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80146aa:	d8e5      	bhi.n	8014678 <__multiply+0x10c>
 80146ac:	9a01      	ldr	r2, [sp, #4]
 80146ae:	50a9      	str	r1, [r5, r2]
 80146b0:	3504      	adds	r5, #4
 80146b2:	e799      	b.n	80145e8 <__multiply+0x7c>
 80146b4:	3e01      	subs	r6, #1
 80146b6:	e79b      	b.n	80145f0 <__multiply+0x84>
 80146b8:	08018b34 	.word	0x08018b34
 80146bc:	08018ba5 	.word	0x08018ba5

080146c0 <__pow5mult>:
 80146c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146c4:	4615      	mov	r5, r2
 80146c6:	f012 0203 	ands.w	r2, r2, #3
 80146ca:	4606      	mov	r6, r0
 80146cc:	460f      	mov	r7, r1
 80146ce:	d007      	beq.n	80146e0 <__pow5mult+0x20>
 80146d0:	4c25      	ldr	r4, [pc, #148]	; (8014768 <__pow5mult+0xa8>)
 80146d2:	3a01      	subs	r2, #1
 80146d4:	2300      	movs	r3, #0
 80146d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80146da:	f7ff fe53 	bl	8014384 <__multadd>
 80146de:	4607      	mov	r7, r0
 80146e0:	10ad      	asrs	r5, r5, #2
 80146e2:	d03d      	beq.n	8014760 <__pow5mult+0xa0>
 80146e4:	69f4      	ldr	r4, [r6, #28]
 80146e6:	b97c      	cbnz	r4, 8014708 <__pow5mult+0x48>
 80146e8:	2010      	movs	r0, #16
 80146ea:	f7fc facf 	bl	8010c8c <malloc>
 80146ee:	4602      	mov	r2, r0
 80146f0:	61f0      	str	r0, [r6, #28]
 80146f2:	b928      	cbnz	r0, 8014700 <__pow5mult+0x40>
 80146f4:	4b1d      	ldr	r3, [pc, #116]	; (801476c <__pow5mult+0xac>)
 80146f6:	481e      	ldr	r0, [pc, #120]	; (8014770 <__pow5mult+0xb0>)
 80146f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80146fc:	f7fe fb92 	bl	8012e24 <__assert_func>
 8014700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014704:	6004      	str	r4, [r0, #0]
 8014706:	60c4      	str	r4, [r0, #12]
 8014708:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801470c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014710:	b94c      	cbnz	r4, 8014726 <__pow5mult+0x66>
 8014712:	f240 2171 	movw	r1, #625	; 0x271
 8014716:	4630      	mov	r0, r6
 8014718:	f7ff ff12 	bl	8014540 <__i2b>
 801471c:	2300      	movs	r3, #0
 801471e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014722:	4604      	mov	r4, r0
 8014724:	6003      	str	r3, [r0, #0]
 8014726:	f04f 0900 	mov.w	r9, #0
 801472a:	07eb      	lsls	r3, r5, #31
 801472c:	d50a      	bpl.n	8014744 <__pow5mult+0x84>
 801472e:	4639      	mov	r1, r7
 8014730:	4622      	mov	r2, r4
 8014732:	4630      	mov	r0, r6
 8014734:	f7ff ff1a 	bl	801456c <__multiply>
 8014738:	4639      	mov	r1, r7
 801473a:	4680      	mov	r8, r0
 801473c:	4630      	mov	r0, r6
 801473e:	f7ff fdff 	bl	8014340 <_Bfree>
 8014742:	4647      	mov	r7, r8
 8014744:	106d      	asrs	r5, r5, #1
 8014746:	d00b      	beq.n	8014760 <__pow5mult+0xa0>
 8014748:	6820      	ldr	r0, [r4, #0]
 801474a:	b938      	cbnz	r0, 801475c <__pow5mult+0x9c>
 801474c:	4622      	mov	r2, r4
 801474e:	4621      	mov	r1, r4
 8014750:	4630      	mov	r0, r6
 8014752:	f7ff ff0b 	bl	801456c <__multiply>
 8014756:	6020      	str	r0, [r4, #0]
 8014758:	f8c0 9000 	str.w	r9, [r0]
 801475c:	4604      	mov	r4, r0
 801475e:	e7e4      	b.n	801472a <__pow5mult+0x6a>
 8014760:	4638      	mov	r0, r7
 8014762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014766:	bf00      	nop
 8014768:	08018cf0 	.word	0x08018cf0
 801476c:	08018a1a 	.word	0x08018a1a
 8014770:	08018ba5 	.word	0x08018ba5

08014774 <__lshift>:
 8014774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014778:	460c      	mov	r4, r1
 801477a:	6849      	ldr	r1, [r1, #4]
 801477c:	6923      	ldr	r3, [r4, #16]
 801477e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014782:	68a3      	ldr	r3, [r4, #8]
 8014784:	4607      	mov	r7, r0
 8014786:	4691      	mov	r9, r2
 8014788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801478c:	f108 0601 	add.w	r6, r8, #1
 8014790:	42b3      	cmp	r3, r6
 8014792:	db0b      	blt.n	80147ac <__lshift+0x38>
 8014794:	4638      	mov	r0, r7
 8014796:	f7ff fd93 	bl	80142c0 <_Balloc>
 801479a:	4605      	mov	r5, r0
 801479c:	b948      	cbnz	r0, 80147b2 <__lshift+0x3e>
 801479e:	4602      	mov	r2, r0
 80147a0:	4b28      	ldr	r3, [pc, #160]	; (8014844 <__lshift+0xd0>)
 80147a2:	4829      	ldr	r0, [pc, #164]	; (8014848 <__lshift+0xd4>)
 80147a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80147a8:	f7fe fb3c 	bl	8012e24 <__assert_func>
 80147ac:	3101      	adds	r1, #1
 80147ae:	005b      	lsls	r3, r3, #1
 80147b0:	e7ee      	b.n	8014790 <__lshift+0x1c>
 80147b2:	2300      	movs	r3, #0
 80147b4:	f100 0114 	add.w	r1, r0, #20
 80147b8:	f100 0210 	add.w	r2, r0, #16
 80147bc:	4618      	mov	r0, r3
 80147be:	4553      	cmp	r3, sl
 80147c0:	db33      	blt.n	801482a <__lshift+0xb6>
 80147c2:	6920      	ldr	r0, [r4, #16]
 80147c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80147c8:	f104 0314 	add.w	r3, r4, #20
 80147cc:	f019 091f 	ands.w	r9, r9, #31
 80147d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80147d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80147d8:	d02b      	beq.n	8014832 <__lshift+0xbe>
 80147da:	f1c9 0e20 	rsb	lr, r9, #32
 80147de:	468a      	mov	sl, r1
 80147e0:	2200      	movs	r2, #0
 80147e2:	6818      	ldr	r0, [r3, #0]
 80147e4:	fa00 f009 	lsl.w	r0, r0, r9
 80147e8:	4310      	orrs	r0, r2
 80147ea:	f84a 0b04 	str.w	r0, [sl], #4
 80147ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80147f2:	459c      	cmp	ip, r3
 80147f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80147f8:	d8f3      	bhi.n	80147e2 <__lshift+0x6e>
 80147fa:	ebac 0304 	sub.w	r3, ip, r4
 80147fe:	3b15      	subs	r3, #21
 8014800:	f023 0303 	bic.w	r3, r3, #3
 8014804:	3304      	adds	r3, #4
 8014806:	f104 0015 	add.w	r0, r4, #21
 801480a:	4584      	cmp	ip, r0
 801480c:	bf38      	it	cc
 801480e:	2304      	movcc	r3, #4
 8014810:	50ca      	str	r2, [r1, r3]
 8014812:	b10a      	cbz	r2, 8014818 <__lshift+0xa4>
 8014814:	f108 0602 	add.w	r6, r8, #2
 8014818:	3e01      	subs	r6, #1
 801481a:	4638      	mov	r0, r7
 801481c:	612e      	str	r6, [r5, #16]
 801481e:	4621      	mov	r1, r4
 8014820:	f7ff fd8e 	bl	8014340 <_Bfree>
 8014824:	4628      	mov	r0, r5
 8014826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801482a:	f842 0f04 	str.w	r0, [r2, #4]!
 801482e:	3301      	adds	r3, #1
 8014830:	e7c5      	b.n	80147be <__lshift+0x4a>
 8014832:	3904      	subs	r1, #4
 8014834:	f853 2b04 	ldr.w	r2, [r3], #4
 8014838:	f841 2f04 	str.w	r2, [r1, #4]!
 801483c:	459c      	cmp	ip, r3
 801483e:	d8f9      	bhi.n	8014834 <__lshift+0xc0>
 8014840:	e7ea      	b.n	8014818 <__lshift+0xa4>
 8014842:	bf00      	nop
 8014844:	08018b34 	.word	0x08018b34
 8014848:	08018ba5 	.word	0x08018ba5

0801484c <__mcmp>:
 801484c:	b530      	push	{r4, r5, lr}
 801484e:	6902      	ldr	r2, [r0, #16]
 8014850:	690c      	ldr	r4, [r1, #16]
 8014852:	1b12      	subs	r2, r2, r4
 8014854:	d10e      	bne.n	8014874 <__mcmp+0x28>
 8014856:	f100 0314 	add.w	r3, r0, #20
 801485a:	3114      	adds	r1, #20
 801485c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014860:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014864:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014868:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801486c:	42a5      	cmp	r5, r4
 801486e:	d003      	beq.n	8014878 <__mcmp+0x2c>
 8014870:	d305      	bcc.n	801487e <__mcmp+0x32>
 8014872:	2201      	movs	r2, #1
 8014874:	4610      	mov	r0, r2
 8014876:	bd30      	pop	{r4, r5, pc}
 8014878:	4283      	cmp	r3, r0
 801487a:	d3f3      	bcc.n	8014864 <__mcmp+0x18>
 801487c:	e7fa      	b.n	8014874 <__mcmp+0x28>
 801487e:	f04f 32ff 	mov.w	r2, #4294967295
 8014882:	e7f7      	b.n	8014874 <__mcmp+0x28>

08014884 <__mdiff>:
 8014884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014888:	460c      	mov	r4, r1
 801488a:	4606      	mov	r6, r0
 801488c:	4611      	mov	r1, r2
 801488e:	4620      	mov	r0, r4
 8014890:	4690      	mov	r8, r2
 8014892:	f7ff ffdb 	bl	801484c <__mcmp>
 8014896:	1e05      	subs	r5, r0, #0
 8014898:	d110      	bne.n	80148bc <__mdiff+0x38>
 801489a:	4629      	mov	r1, r5
 801489c:	4630      	mov	r0, r6
 801489e:	f7ff fd0f 	bl	80142c0 <_Balloc>
 80148a2:	b930      	cbnz	r0, 80148b2 <__mdiff+0x2e>
 80148a4:	4b3a      	ldr	r3, [pc, #232]	; (8014990 <__mdiff+0x10c>)
 80148a6:	4602      	mov	r2, r0
 80148a8:	f240 2137 	movw	r1, #567	; 0x237
 80148ac:	4839      	ldr	r0, [pc, #228]	; (8014994 <__mdiff+0x110>)
 80148ae:	f7fe fab9 	bl	8012e24 <__assert_func>
 80148b2:	2301      	movs	r3, #1
 80148b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80148b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148bc:	bfa4      	itt	ge
 80148be:	4643      	movge	r3, r8
 80148c0:	46a0      	movge	r8, r4
 80148c2:	4630      	mov	r0, r6
 80148c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80148c8:	bfa6      	itte	ge
 80148ca:	461c      	movge	r4, r3
 80148cc:	2500      	movge	r5, #0
 80148ce:	2501      	movlt	r5, #1
 80148d0:	f7ff fcf6 	bl	80142c0 <_Balloc>
 80148d4:	b920      	cbnz	r0, 80148e0 <__mdiff+0x5c>
 80148d6:	4b2e      	ldr	r3, [pc, #184]	; (8014990 <__mdiff+0x10c>)
 80148d8:	4602      	mov	r2, r0
 80148da:	f240 2145 	movw	r1, #581	; 0x245
 80148de:	e7e5      	b.n	80148ac <__mdiff+0x28>
 80148e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80148e4:	6926      	ldr	r6, [r4, #16]
 80148e6:	60c5      	str	r5, [r0, #12]
 80148e8:	f104 0914 	add.w	r9, r4, #20
 80148ec:	f108 0514 	add.w	r5, r8, #20
 80148f0:	f100 0e14 	add.w	lr, r0, #20
 80148f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80148f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80148fc:	f108 0210 	add.w	r2, r8, #16
 8014900:	46f2      	mov	sl, lr
 8014902:	2100      	movs	r1, #0
 8014904:	f859 3b04 	ldr.w	r3, [r9], #4
 8014908:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801490c:	fa11 f88b 	uxtah	r8, r1, fp
 8014910:	b299      	uxth	r1, r3
 8014912:	0c1b      	lsrs	r3, r3, #16
 8014914:	eba8 0801 	sub.w	r8, r8, r1
 8014918:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801491c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014920:	fa1f f888 	uxth.w	r8, r8
 8014924:	1419      	asrs	r1, r3, #16
 8014926:	454e      	cmp	r6, r9
 8014928:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801492c:	f84a 3b04 	str.w	r3, [sl], #4
 8014930:	d8e8      	bhi.n	8014904 <__mdiff+0x80>
 8014932:	1b33      	subs	r3, r6, r4
 8014934:	3b15      	subs	r3, #21
 8014936:	f023 0303 	bic.w	r3, r3, #3
 801493a:	3304      	adds	r3, #4
 801493c:	3415      	adds	r4, #21
 801493e:	42a6      	cmp	r6, r4
 8014940:	bf38      	it	cc
 8014942:	2304      	movcc	r3, #4
 8014944:	441d      	add	r5, r3
 8014946:	4473      	add	r3, lr
 8014948:	469e      	mov	lr, r3
 801494a:	462e      	mov	r6, r5
 801494c:	4566      	cmp	r6, ip
 801494e:	d30e      	bcc.n	801496e <__mdiff+0xea>
 8014950:	f10c 0203 	add.w	r2, ip, #3
 8014954:	1b52      	subs	r2, r2, r5
 8014956:	f022 0203 	bic.w	r2, r2, #3
 801495a:	3d03      	subs	r5, #3
 801495c:	45ac      	cmp	ip, r5
 801495e:	bf38      	it	cc
 8014960:	2200      	movcc	r2, #0
 8014962:	4413      	add	r3, r2
 8014964:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014968:	b17a      	cbz	r2, 801498a <__mdiff+0x106>
 801496a:	6107      	str	r7, [r0, #16]
 801496c:	e7a4      	b.n	80148b8 <__mdiff+0x34>
 801496e:	f856 8b04 	ldr.w	r8, [r6], #4
 8014972:	fa11 f288 	uxtah	r2, r1, r8
 8014976:	1414      	asrs	r4, r2, #16
 8014978:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801497c:	b292      	uxth	r2, r2
 801497e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014982:	f84e 2b04 	str.w	r2, [lr], #4
 8014986:	1421      	asrs	r1, r4, #16
 8014988:	e7e0      	b.n	801494c <__mdiff+0xc8>
 801498a:	3f01      	subs	r7, #1
 801498c:	e7ea      	b.n	8014964 <__mdiff+0xe0>
 801498e:	bf00      	nop
 8014990:	08018b34 	.word	0x08018b34
 8014994:	08018ba5 	.word	0x08018ba5

08014998 <__ulp>:
 8014998:	b082      	sub	sp, #8
 801499a:	ed8d 0b00 	vstr	d0, [sp]
 801499e:	9a01      	ldr	r2, [sp, #4]
 80149a0:	4b0f      	ldr	r3, [pc, #60]	; (80149e0 <__ulp+0x48>)
 80149a2:	4013      	ands	r3, r2
 80149a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	dc08      	bgt.n	80149be <__ulp+0x26>
 80149ac:	425b      	negs	r3, r3
 80149ae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80149b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80149b6:	da04      	bge.n	80149c2 <__ulp+0x2a>
 80149b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80149bc:	4113      	asrs	r3, r2
 80149be:	2200      	movs	r2, #0
 80149c0:	e008      	b.n	80149d4 <__ulp+0x3c>
 80149c2:	f1a2 0314 	sub.w	r3, r2, #20
 80149c6:	2b1e      	cmp	r3, #30
 80149c8:	bfda      	itte	le
 80149ca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80149ce:	40da      	lsrle	r2, r3
 80149d0:	2201      	movgt	r2, #1
 80149d2:	2300      	movs	r3, #0
 80149d4:	4619      	mov	r1, r3
 80149d6:	4610      	mov	r0, r2
 80149d8:	ec41 0b10 	vmov	d0, r0, r1
 80149dc:	b002      	add	sp, #8
 80149de:	4770      	bx	lr
 80149e0:	7ff00000 	.word	0x7ff00000

080149e4 <__b2d>:
 80149e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149e8:	6906      	ldr	r6, [r0, #16]
 80149ea:	f100 0814 	add.w	r8, r0, #20
 80149ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80149f2:	1f37      	subs	r7, r6, #4
 80149f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80149f8:	4610      	mov	r0, r2
 80149fa:	f7ff fd53 	bl	80144a4 <__hi0bits>
 80149fe:	f1c0 0320 	rsb	r3, r0, #32
 8014a02:	280a      	cmp	r0, #10
 8014a04:	600b      	str	r3, [r1, #0]
 8014a06:	491b      	ldr	r1, [pc, #108]	; (8014a74 <__b2d+0x90>)
 8014a08:	dc15      	bgt.n	8014a36 <__b2d+0x52>
 8014a0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8014a0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8014a12:	45b8      	cmp	r8, r7
 8014a14:	ea43 0501 	orr.w	r5, r3, r1
 8014a18:	bf34      	ite	cc
 8014a1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014a1e:	2300      	movcs	r3, #0
 8014a20:	3015      	adds	r0, #21
 8014a22:	fa02 f000 	lsl.w	r0, r2, r0
 8014a26:	fa23 f30c 	lsr.w	r3, r3, ip
 8014a2a:	4303      	orrs	r3, r0
 8014a2c:	461c      	mov	r4, r3
 8014a2e:	ec45 4b10 	vmov	d0, r4, r5
 8014a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a36:	45b8      	cmp	r8, r7
 8014a38:	bf3a      	itte	cc
 8014a3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014a3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8014a42:	2300      	movcs	r3, #0
 8014a44:	380b      	subs	r0, #11
 8014a46:	d012      	beq.n	8014a6e <__b2d+0x8a>
 8014a48:	f1c0 0120 	rsb	r1, r0, #32
 8014a4c:	fa23 f401 	lsr.w	r4, r3, r1
 8014a50:	4082      	lsls	r2, r0
 8014a52:	4322      	orrs	r2, r4
 8014a54:	4547      	cmp	r7, r8
 8014a56:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8014a5a:	bf8c      	ite	hi
 8014a5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014a60:	2200      	movls	r2, #0
 8014a62:	4083      	lsls	r3, r0
 8014a64:	40ca      	lsrs	r2, r1
 8014a66:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014a6a:	4313      	orrs	r3, r2
 8014a6c:	e7de      	b.n	8014a2c <__b2d+0x48>
 8014a6e:	ea42 0501 	orr.w	r5, r2, r1
 8014a72:	e7db      	b.n	8014a2c <__b2d+0x48>
 8014a74:	3ff00000 	.word	0x3ff00000

08014a78 <__d2b>:
 8014a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a7c:	460f      	mov	r7, r1
 8014a7e:	2101      	movs	r1, #1
 8014a80:	ec59 8b10 	vmov	r8, r9, d0
 8014a84:	4616      	mov	r6, r2
 8014a86:	f7ff fc1b 	bl	80142c0 <_Balloc>
 8014a8a:	4604      	mov	r4, r0
 8014a8c:	b930      	cbnz	r0, 8014a9c <__d2b+0x24>
 8014a8e:	4602      	mov	r2, r0
 8014a90:	4b24      	ldr	r3, [pc, #144]	; (8014b24 <__d2b+0xac>)
 8014a92:	4825      	ldr	r0, [pc, #148]	; (8014b28 <__d2b+0xb0>)
 8014a94:	f240 310f 	movw	r1, #783	; 0x30f
 8014a98:	f7fe f9c4 	bl	8012e24 <__assert_func>
 8014a9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014aa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014aa4:	bb2d      	cbnz	r5, 8014af2 <__d2b+0x7a>
 8014aa6:	9301      	str	r3, [sp, #4]
 8014aa8:	f1b8 0300 	subs.w	r3, r8, #0
 8014aac:	d026      	beq.n	8014afc <__d2b+0x84>
 8014aae:	4668      	mov	r0, sp
 8014ab0:	9300      	str	r3, [sp, #0]
 8014ab2:	f7ff fd17 	bl	80144e4 <__lo0bits>
 8014ab6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014aba:	b1e8      	cbz	r0, 8014af8 <__d2b+0x80>
 8014abc:	f1c0 0320 	rsb	r3, r0, #32
 8014ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8014ac4:	430b      	orrs	r3, r1
 8014ac6:	40c2      	lsrs	r2, r0
 8014ac8:	6163      	str	r3, [r4, #20]
 8014aca:	9201      	str	r2, [sp, #4]
 8014acc:	9b01      	ldr	r3, [sp, #4]
 8014ace:	61a3      	str	r3, [r4, #24]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	bf14      	ite	ne
 8014ad4:	2202      	movne	r2, #2
 8014ad6:	2201      	moveq	r2, #1
 8014ad8:	6122      	str	r2, [r4, #16]
 8014ada:	b1bd      	cbz	r5, 8014b0c <__d2b+0x94>
 8014adc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014ae0:	4405      	add	r5, r0
 8014ae2:	603d      	str	r5, [r7, #0]
 8014ae4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014ae8:	6030      	str	r0, [r6, #0]
 8014aea:	4620      	mov	r0, r4
 8014aec:	b003      	add	sp, #12
 8014aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014af6:	e7d6      	b.n	8014aa6 <__d2b+0x2e>
 8014af8:	6161      	str	r1, [r4, #20]
 8014afa:	e7e7      	b.n	8014acc <__d2b+0x54>
 8014afc:	a801      	add	r0, sp, #4
 8014afe:	f7ff fcf1 	bl	80144e4 <__lo0bits>
 8014b02:	9b01      	ldr	r3, [sp, #4]
 8014b04:	6163      	str	r3, [r4, #20]
 8014b06:	3020      	adds	r0, #32
 8014b08:	2201      	movs	r2, #1
 8014b0a:	e7e5      	b.n	8014ad8 <__d2b+0x60>
 8014b0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014b10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014b14:	6038      	str	r0, [r7, #0]
 8014b16:	6918      	ldr	r0, [r3, #16]
 8014b18:	f7ff fcc4 	bl	80144a4 <__hi0bits>
 8014b1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014b20:	e7e2      	b.n	8014ae8 <__d2b+0x70>
 8014b22:	bf00      	nop
 8014b24:	08018b34 	.word	0x08018b34
 8014b28:	08018ba5 	.word	0x08018ba5

08014b2c <__ratio>:
 8014b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b30:	4688      	mov	r8, r1
 8014b32:	4669      	mov	r1, sp
 8014b34:	4681      	mov	r9, r0
 8014b36:	f7ff ff55 	bl	80149e4 <__b2d>
 8014b3a:	a901      	add	r1, sp, #4
 8014b3c:	4640      	mov	r0, r8
 8014b3e:	ec55 4b10 	vmov	r4, r5, d0
 8014b42:	f7ff ff4f 	bl	80149e4 <__b2d>
 8014b46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014b4a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014b4e:	eba3 0c02 	sub.w	ip, r3, r2
 8014b52:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014b56:	1a9b      	subs	r3, r3, r2
 8014b58:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014b5c:	ec51 0b10 	vmov	r0, r1, d0
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	bfd6      	itet	le
 8014b64:	460a      	movle	r2, r1
 8014b66:	462a      	movgt	r2, r5
 8014b68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014b6c:	468b      	mov	fp, r1
 8014b6e:	462f      	mov	r7, r5
 8014b70:	bfd4      	ite	le
 8014b72:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014b76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	ee10 2a10 	vmov	r2, s0
 8014b80:	465b      	mov	r3, fp
 8014b82:	4639      	mov	r1, r7
 8014b84:	f7eb fe62 	bl	800084c <__aeabi_ddiv>
 8014b88:	ec41 0b10 	vmov	d0, r0, r1
 8014b8c:	b003      	add	sp, #12
 8014b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b92 <__copybits>:
 8014b92:	3901      	subs	r1, #1
 8014b94:	b570      	push	{r4, r5, r6, lr}
 8014b96:	1149      	asrs	r1, r1, #5
 8014b98:	6914      	ldr	r4, [r2, #16]
 8014b9a:	3101      	adds	r1, #1
 8014b9c:	f102 0314 	add.w	r3, r2, #20
 8014ba0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014ba4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014ba8:	1f05      	subs	r5, r0, #4
 8014baa:	42a3      	cmp	r3, r4
 8014bac:	d30c      	bcc.n	8014bc8 <__copybits+0x36>
 8014bae:	1aa3      	subs	r3, r4, r2
 8014bb0:	3b11      	subs	r3, #17
 8014bb2:	f023 0303 	bic.w	r3, r3, #3
 8014bb6:	3211      	adds	r2, #17
 8014bb8:	42a2      	cmp	r2, r4
 8014bba:	bf88      	it	hi
 8014bbc:	2300      	movhi	r3, #0
 8014bbe:	4418      	add	r0, r3
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	4288      	cmp	r0, r1
 8014bc4:	d305      	bcc.n	8014bd2 <__copybits+0x40>
 8014bc6:	bd70      	pop	{r4, r5, r6, pc}
 8014bc8:	f853 6b04 	ldr.w	r6, [r3], #4
 8014bcc:	f845 6f04 	str.w	r6, [r5, #4]!
 8014bd0:	e7eb      	b.n	8014baa <__copybits+0x18>
 8014bd2:	f840 3b04 	str.w	r3, [r0], #4
 8014bd6:	e7f4      	b.n	8014bc2 <__copybits+0x30>

08014bd8 <__any_on>:
 8014bd8:	f100 0214 	add.w	r2, r0, #20
 8014bdc:	6900      	ldr	r0, [r0, #16]
 8014bde:	114b      	asrs	r3, r1, #5
 8014be0:	4298      	cmp	r0, r3
 8014be2:	b510      	push	{r4, lr}
 8014be4:	db11      	blt.n	8014c0a <__any_on+0x32>
 8014be6:	dd0a      	ble.n	8014bfe <__any_on+0x26>
 8014be8:	f011 011f 	ands.w	r1, r1, #31
 8014bec:	d007      	beq.n	8014bfe <__any_on+0x26>
 8014bee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014bf2:	fa24 f001 	lsr.w	r0, r4, r1
 8014bf6:	fa00 f101 	lsl.w	r1, r0, r1
 8014bfa:	428c      	cmp	r4, r1
 8014bfc:	d10b      	bne.n	8014c16 <__any_on+0x3e>
 8014bfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014c02:	4293      	cmp	r3, r2
 8014c04:	d803      	bhi.n	8014c0e <__any_on+0x36>
 8014c06:	2000      	movs	r0, #0
 8014c08:	bd10      	pop	{r4, pc}
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	e7f7      	b.n	8014bfe <__any_on+0x26>
 8014c0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014c12:	2900      	cmp	r1, #0
 8014c14:	d0f5      	beq.n	8014c02 <__any_on+0x2a>
 8014c16:	2001      	movs	r0, #1
 8014c18:	e7f6      	b.n	8014c08 <__any_on+0x30>

08014c1a <__ascii_wctomb>:
 8014c1a:	b149      	cbz	r1, 8014c30 <__ascii_wctomb+0x16>
 8014c1c:	2aff      	cmp	r2, #255	; 0xff
 8014c1e:	bf85      	ittet	hi
 8014c20:	238a      	movhi	r3, #138	; 0x8a
 8014c22:	6003      	strhi	r3, [r0, #0]
 8014c24:	700a      	strbls	r2, [r1, #0]
 8014c26:	f04f 30ff 	movhi.w	r0, #4294967295
 8014c2a:	bf98      	it	ls
 8014c2c:	2001      	movls	r0, #1
 8014c2e:	4770      	bx	lr
 8014c30:	4608      	mov	r0, r1
 8014c32:	4770      	bx	lr

08014c34 <__ssputs_r>:
 8014c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c38:	688e      	ldr	r6, [r1, #8]
 8014c3a:	461f      	mov	r7, r3
 8014c3c:	42be      	cmp	r6, r7
 8014c3e:	680b      	ldr	r3, [r1, #0]
 8014c40:	4682      	mov	sl, r0
 8014c42:	460c      	mov	r4, r1
 8014c44:	4690      	mov	r8, r2
 8014c46:	d82c      	bhi.n	8014ca2 <__ssputs_r+0x6e>
 8014c48:	898a      	ldrh	r2, [r1, #12]
 8014c4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014c4e:	d026      	beq.n	8014c9e <__ssputs_r+0x6a>
 8014c50:	6965      	ldr	r5, [r4, #20]
 8014c52:	6909      	ldr	r1, [r1, #16]
 8014c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c58:	eba3 0901 	sub.w	r9, r3, r1
 8014c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014c60:	1c7b      	adds	r3, r7, #1
 8014c62:	444b      	add	r3, r9
 8014c64:	106d      	asrs	r5, r5, #1
 8014c66:	429d      	cmp	r5, r3
 8014c68:	bf38      	it	cc
 8014c6a:	461d      	movcc	r5, r3
 8014c6c:	0553      	lsls	r3, r2, #21
 8014c6e:	d527      	bpl.n	8014cc0 <__ssputs_r+0x8c>
 8014c70:	4629      	mov	r1, r5
 8014c72:	f7fc f83b 	bl	8010cec <_malloc_r>
 8014c76:	4606      	mov	r6, r0
 8014c78:	b360      	cbz	r0, 8014cd4 <__ssputs_r+0xa0>
 8014c7a:	6921      	ldr	r1, [r4, #16]
 8014c7c:	464a      	mov	r2, r9
 8014c7e:	f7fe f8b4 	bl	8012dea <memcpy>
 8014c82:	89a3      	ldrh	r3, [r4, #12]
 8014c84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c8c:	81a3      	strh	r3, [r4, #12]
 8014c8e:	6126      	str	r6, [r4, #16]
 8014c90:	6165      	str	r5, [r4, #20]
 8014c92:	444e      	add	r6, r9
 8014c94:	eba5 0509 	sub.w	r5, r5, r9
 8014c98:	6026      	str	r6, [r4, #0]
 8014c9a:	60a5      	str	r5, [r4, #8]
 8014c9c:	463e      	mov	r6, r7
 8014c9e:	42be      	cmp	r6, r7
 8014ca0:	d900      	bls.n	8014ca4 <__ssputs_r+0x70>
 8014ca2:	463e      	mov	r6, r7
 8014ca4:	6820      	ldr	r0, [r4, #0]
 8014ca6:	4632      	mov	r2, r6
 8014ca8:	4641      	mov	r1, r8
 8014caa:	f000 f9db 	bl	8015064 <memmove>
 8014cae:	68a3      	ldr	r3, [r4, #8]
 8014cb0:	1b9b      	subs	r3, r3, r6
 8014cb2:	60a3      	str	r3, [r4, #8]
 8014cb4:	6823      	ldr	r3, [r4, #0]
 8014cb6:	4433      	add	r3, r6
 8014cb8:	6023      	str	r3, [r4, #0]
 8014cba:	2000      	movs	r0, #0
 8014cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cc0:	462a      	mov	r2, r5
 8014cc2:	f000 fa06 	bl	80150d2 <_realloc_r>
 8014cc6:	4606      	mov	r6, r0
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	d1e0      	bne.n	8014c8e <__ssputs_r+0x5a>
 8014ccc:	6921      	ldr	r1, [r4, #16]
 8014cce:	4650      	mov	r0, sl
 8014cd0:	f7fe ff40 	bl	8013b54 <_free_r>
 8014cd4:	230c      	movs	r3, #12
 8014cd6:	f8ca 3000 	str.w	r3, [sl]
 8014cda:	89a3      	ldrh	r3, [r4, #12]
 8014cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ce0:	81a3      	strh	r3, [r4, #12]
 8014ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ce6:	e7e9      	b.n	8014cbc <__ssputs_r+0x88>

08014ce8 <_svfiprintf_r>:
 8014ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cec:	4698      	mov	r8, r3
 8014cee:	898b      	ldrh	r3, [r1, #12]
 8014cf0:	061b      	lsls	r3, r3, #24
 8014cf2:	b09d      	sub	sp, #116	; 0x74
 8014cf4:	4607      	mov	r7, r0
 8014cf6:	460d      	mov	r5, r1
 8014cf8:	4614      	mov	r4, r2
 8014cfa:	d50e      	bpl.n	8014d1a <_svfiprintf_r+0x32>
 8014cfc:	690b      	ldr	r3, [r1, #16]
 8014cfe:	b963      	cbnz	r3, 8014d1a <_svfiprintf_r+0x32>
 8014d00:	2140      	movs	r1, #64	; 0x40
 8014d02:	f7fb fff3 	bl	8010cec <_malloc_r>
 8014d06:	6028      	str	r0, [r5, #0]
 8014d08:	6128      	str	r0, [r5, #16]
 8014d0a:	b920      	cbnz	r0, 8014d16 <_svfiprintf_r+0x2e>
 8014d0c:	230c      	movs	r3, #12
 8014d0e:	603b      	str	r3, [r7, #0]
 8014d10:	f04f 30ff 	mov.w	r0, #4294967295
 8014d14:	e0d0      	b.n	8014eb8 <_svfiprintf_r+0x1d0>
 8014d16:	2340      	movs	r3, #64	; 0x40
 8014d18:	616b      	str	r3, [r5, #20]
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8014d1e:	2320      	movs	r3, #32
 8014d20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d28:	2330      	movs	r3, #48	; 0x30
 8014d2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014ed0 <_svfiprintf_r+0x1e8>
 8014d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d32:	f04f 0901 	mov.w	r9, #1
 8014d36:	4623      	mov	r3, r4
 8014d38:	469a      	mov	sl, r3
 8014d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d3e:	b10a      	cbz	r2, 8014d44 <_svfiprintf_r+0x5c>
 8014d40:	2a25      	cmp	r2, #37	; 0x25
 8014d42:	d1f9      	bne.n	8014d38 <_svfiprintf_r+0x50>
 8014d44:	ebba 0b04 	subs.w	fp, sl, r4
 8014d48:	d00b      	beq.n	8014d62 <_svfiprintf_r+0x7a>
 8014d4a:	465b      	mov	r3, fp
 8014d4c:	4622      	mov	r2, r4
 8014d4e:	4629      	mov	r1, r5
 8014d50:	4638      	mov	r0, r7
 8014d52:	f7ff ff6f 	bl	8014c34 <__ssputs_r>
 8014d56:	3001      	adds	r0, #1
 8014d58:	f000 80a9 	beq.w	8014eae <_svfiprintf_r+0x1c6>
 8014d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d5e:	445a      	add	r2, fp
 8014d60:	9209      	str	r2, [sp, #36]	; 0x24
 8014d62:	f89a 3000 	ldrb.w	r3, [sl]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	f000 80a1 	beq.w	8014eae <_svfiprintf_r+0x1c6>
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8014d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d76:	f10a 0a01 	add.w	sl, sl, #1
 8014d7a:	9304      	str	r3, [sp, #16]
 8014d7c:	9307      	str	r3, [sp, #28]
 8014d7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d82:	931a      	str	r3, [sp, #104]	; 0x68
 8014d84:	4654      	mov	r4, sl
 8014d86:	2205      	movs	r2, #5
 8014d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d8c:	4850      	ldr	r0, [pc, #320]	; (8014ed0 <_svfiprintf_r+0x1e8>)
 8014d8e:	f7eb fa1f 	bl	80001d0 <memchr>
 8014d92:	9a04      	ldr	r2, [sp, #16]
 8014d94:	b9d8      	cbnz	r0, 8014dce <_svfiprintf_r+0xe6>
 8014d96:	06d0      	lsls	r0, r2, #27
 8014d98:	bf44      	itt	mi
 8014d9a:	2320      	movmi	r3, #32
 8014d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014da0:	0711      	lsls	r1, r2, #28
 8014da2:	bf44      	itt	mi
 8014da4:	232b      	movmi	r3, #43	; 0x2b
 8014da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014daa:	f89a 3000 	ldrb.w	r3, [sl]
 8014dae:	2b2a      	cmp	r3, #42	; 0x2a
 8014db0:	d015      	beq.n	8014dde <_svfiprintf_r+0xf6>
 8014db2:	9a07      	ldr	r2, [sp, #28]
 8014db4:	4654      	mov	r4, sl
 8014db6:	2000      	movs	r0, #0
 8014db8:	f04f 0c0a 	mov.w	ip, #10
 8014dbc:	4621      	mov	r1, r4
 8014dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014dc2:	3b30      	subs	r3, #48	; 0x30
 8014dc4:	2b09      	cmp	r3, #9
 8014dc6:	d94d      	bls.n	8014e64 <_svfiprintf_r+0x17c>
 8014dc8:	b1b0      	cbz	r0, 8014df8 <_svfiprintf_r+0x110>
 8014dca:	9207      	str	r2, [sp, #28]
 8014dcc:	e014      	b.n	8014df8 <_svfiprintf_r+0x110>
 8014dce:	eba0 0308 	sub.w	r3, r0, r8
 8014dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8014dd6:	4313      	orrs	r3, r2
 8014dd8:	9304      	str	r3, [sp, #16]
 8014dda:	46a2      	mov	sl, r4
 8014ddc:	e7d2      	b.n	8014d84 <_svfiprintf_r+0x9c>
 8014dde:	9b03      	ldr	r3, [sp, #12]
 8014de0:	1d19      	adds	r1, r3, #4
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	9103      	str	r1, [sp, #12]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	bfbb      	ittet	lt
 8014dea:	425b      	neglt	r3, r3
 8014dec:	f042 0202 	orrlt.w	r2, r2, #2
 8014df0:	9307      	strge	r3, [sp, #28]
 8014df2:	9307      	strlt	r3, [sp, #28]
 8014df4:	bfb8      	it	lt
 8014df6:	9204      	strlt	r2, [sp, #16]
 8014df8:	7823      	ldrb	r3, [r4, #0]
 8014dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8014dfc:	d10c      	bne.n	8014e18 <_svfiprintf_r+0x130>
 8014dfe:	7863      	ldrb	r3, [r4, #1]
 8014e00:	2b2a      	cmp	r3, #42	; 0x2a
 8014e02:	d134      	bne.n	8014e6e <_svfiprintf_r+0x186>
 8014e04:	9b03      	ldr	r3, [sp, #12]
 8014e06:	1d1a      	adds	r2, r3, #4
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	9203      	str	r2, [sp, #12]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	bfb8      	it	lt
 8014e10:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e14:	3402      	adds	r4, #2
 8014e16:	9305      	str	r3, [sp, #20]
 8014e18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014ee0 <_svfiprintf_r+0x1f8>
 8014e1c:	7821      	ldrb	r1, [r4, #0]
 8014e1e:	2203      	movs	r2, #3
 8014e20:	4650      	mov	r0, sl
 8014e22:	f7eb f9d5 	bl	80001d0 <memchr>
 8014e26:	b138      	cbz	r0, 8014e38 <_svfiprintf_r+0x150>
 8014e28:	9b04      	ldr	r3, [sp, #16]
 8014e2a:	eba0 000a 	sub.w	r0, r0, sl
 8014e2e:	2240      	movs	r2, #64	; 0x40
 8014e30:	4082      	lsls	r2, r0
 8014e32:	4313      	orrs	r3, r2
 8014e34:	3401      	adds	r4, #1
 8014e36:	9304      	str	r3, [sp, #16]
 8014e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e3c:	4825      	ldr	r0, [pc, #148]	; (8014ed4 <_svfiprintf_r+0x1ec>)
 8014e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e42:	2206      	movs	r2, #6
 8014e44:	f7eb f9c4 	bl	80001d0 <memchr>
 8014e48:	2800      	cmp	r0, #0
 8014e4a:	d038      	beq.n	8014ebe <_svfiprintf_r+0x1d6>
 8014e4c:	4b22      	ldr	r3, [pc, #136]	; (8014ed8 <_svfiprintf_r+0x1f0>)
 8014e4e:	bb1b      	cbnz	r3, 8014e98 <_svfiprintf_r+0x1b0>
 8014e50:	9b03      	ldr	r3, [sp, #12]
 8014e52:	3307      	adds	r3, #7
 8014e54:	f023 0307 	bic.w	r3, r3, #7
 8014e58:	3308      	adds	r3, #8
 8014e5a:	9303      	str	r3, [sp, #12]
 8014e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e5e:	4433      	add	r3, r6
 8014e60:	9309      	str	r3, [sp, #36]	; 0x24
 8014e62:	e768      	b.n	8014d36 <_svfiprintf_r+0x4e>
 8014e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e68:	460c      	mov	r4, r1
 8014e6a:	2001      	movs	r0, #1
 8014e6c:	e7a6      	b.n	8014dbc <_svfiprintf_r+0xd4>
 8014e6e:	2300      	movs	r3, #0
 8014e70:	3401      	adds	r4, #1
 8014e72:	9305      	str	r3, [sp, #20]
 8014e74:	4619      	mov	r1, r3
 8014e76:	f04f 0c0a 	mov.w	ip, #10
 8014e7a:	4620      	mov	r0, r4
 8014e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e80:	3a30      	subs	r2, #48	; 0x30
 8014e82:	2a09      	cmp	r2, #9
 8014e84:	d903      	bls.n	8014e8e <_svfiprintf_r+0x1a6>
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d0c6      	beq.n	8014e18 <_svfiprintf_r+0x130>
 8014e8a:	9105      	str	r1, [sp, #20]
 8014e8c:	e7c4      	b.n	8014e18 <_svfiprintf_r+0x130>
 8014e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e92:	4604      	mov	r4, r0
 8014e94:	2301      	movs	r3, #1
 8014e96:	e7f0      	b.n	8014e7a <_svfiprintf_r+0x192>
 8014e98:	ab03      	add	r3, sp, #12
 8014e9a:	9300      	str	r3, [sp, #0]
 8014e9c:	462a      	mov	r2, r5
 8014e9e:	4b0f      	ldr	r3, [pc, #60]	; (8014edc <_svfiprintf_r+0x1f4>)
 8014ea0:	a904      	add	r1, sp, #16
 8014ea2:	4638      	mov	r0, r7
 8014ea4:	f7fc ff56 	bl	8011d54 <_printf_float>
 8014ea8:	1c42      	adds	r2, r0, #1
 8014eaa:	4606      	mov	r6, r0
 8014eac:	d1d6      	bne.n	8014e5c <_svfiprintf_r+0x174>
 8014eae:	89ab      	ldrh	r3, [r5, #12]
 8014eb0:	065b      	lsls	r3, r3, #25
 8014eb2:	f53f af2d 	bmi.w	8014d10 <_svfiprintf_r+0x28>
 8014eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014eb8:	b01d      	add	sp, #116	; 0x74
 8014eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ebe:	ab03      	add	r3, sp, #12
 8014ec0:	9300      	str	r3, [sp, #0]
 8014ec2:	462a      	mov	r2, r5
 8014ec4:	4b05      	ldr	r3, [pc, #20]	; (8014edc <_svfiprintf_r+0x1f4>)
 8014ec6:	a904      	add	r1, sp, #16
 8014ec8:	4638      	mov	r0, r7
 8014eca:	f7fd f9e7 	bl	801229c <_printf_i>
 8014ece:	e7eb      	b.n	8014ea8 <_svfiprintf_r+0x1c0>
 8014ed0:	08018cfc 	.word	0x08018cfc
 8014ed4:	08018d06 	.word	0x08018d06
 8014ed8:	08011d55 	.word	0x08011d55
 8014edc:	08014c35 	.word	0x08014c35
 8014ee0:	08018d02 	.word	0x08018d02

08014ee4 <__sflush_r>:
 8014ee4:	898a      	ldrh	r2, [r1, #12]
 8014ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eea:	4605      	mov	r5, r0
 8014eec:	0710      	lsls	r0, r2, #28
 8014eee:	460c      	mov	r4, r1
 8014ef0:	d458      	bmi.n	8014fa4 <__sflush_r+0xc0>
 8014ef2:	684b      	ldr	r3, [r1, #4]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	dc05      	bgt.n	8014f04 <__sflush_r+0x20>
 8014ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	dc02      	bgt.n	8014f04 <__sflush_r+0x20>
 8014efe:	2000      	movs	r0, #0
 8014f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f06:	2e00      	cmp	r6, #0
 8014f08:	d0f9      	beq.n	8014efe <__sflush_r+0x1a>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f10:	682f      	ldr	r7, [r5, #0]
 8014f12:	6a21      	ldr	r1, [r4, #32]
 8014f14:	602b      	str	r3, [r5, #0]
 8014f16:	d032      	beq.n	8014f7e <__sflush_r+0x9a>
 8014f18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f1a:	89a3      	ldrh	r3, [r4, #12]
 8014f1c:	075a      	lsls	r2, r3, #29
 8014f1e:	d505      	bpl.n	8014f2c <__sflush_r+0x48>
 8014f20:	6863      	ldr	r3, [r4, #4]
 8014f22:	1ac0      	subs	r0, r0, r3
 8014f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f26:	b10b      	cbz	r3, 8014f2c <__sflush_r+0x48>
 8014f28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014f2a:	1ac0      	subs	r0, r0, r3
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	4602      	mov	r2, r0
 8014f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f32:	6a21      	ldr	r1, [r4, #32]
 8014f34:	4628      	mov	r0, r5
 8014f36:	47b0      	blx	r6
 8014f38:	1c43      	adds	r3, r0, #1
 8014f3a:	89a3      	ldrh	r3, [r4, #12]
 8014f3c:	d106      	bne.n	8014f4c <__sflush_r+0x68>
 8014f3e:	6829      	ldr	r1, [r5, #0]
 8014f40:	291d      	cmp	r1, #29
 8014f42:	d82b      	bhi.n	8014f9c <__sflush_r+0xb8>
 8014f44:	4a29      	ldr	r2, [pc, #164]	; (8014fec <__sflush_r+0x108>)
 8014f46:	410a      	asrs	r2, r1
 8014f48:	07d6      	lsls	r6, r2, #31
 8014f4a:	d427      	bmi.n	8014f9c <__sflush_r+0xb8>
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	6062      	str	r2, [r4, #4]
 8014f50:	04d9      	lsls	r1, r3, #19
 8014f52:	6922      	ldr	r2, [r4, #16]
 8014f54:	6022      	str	r2, [r4, #0]
 8014f56:	d504      	bpl.n	8014f62 <__sflush_r+0x7e>
 8014f58:	1c42      	adds	r2, r0, #1
 8014f5a:	d101      	bne.n	8014f60 <__sflush_r+0x7c>
 8014f5c:	682b      	ldr	r3, [r5, #0]
 8014f5e:	b903      	cbnz	r3, 8014f62 <__sflush_r+0x7e>
 8014f60:	6560      	str	r0, [r4, #84]	; 0x54
 8014f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f64:	602f      	str	r7, [r5, #0]
 8014f66:	2900      	cmp	r1, #0
 8014f68:	d0c9      	beq.n	8014efe <__sflush_r+0x1a>
 8014f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f6e:	4299      	cmp	r1, r3
 8014f70:	d002      	beq.n	8014f78 <__sflush_r+0x94>
 8014f72:	4628      	mov	r0, r5
 8014f74:	f7fe fdee 	bl	8013b54 <_free_r>
 8014f78:	2000      	movs	r0, #0
 8014f7a:	6360      	str	r0, [r4, #52]	; 0x34
 8014f7c:	e7c0      	b.n	8014f00 <__sflush_r+0x1c>
 8014f7e:	2301      	movs	r3, #1
 8014f80:	4628      	mov	r0, r5
 8014f82:	47b0      	blx	r6
 8014f84:	1c41      	adds	r1, r0, #1
 8014f86:	d1c8      	bne.n	8014f1a <__sflush_r+0x36>
 8014f88:	682b      	ldr	r3, [r5, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d0c5      	beq.n	8014f1a <__sflush_r+0x36>
 8014f8e:	2b1d      	cmp	r3, #29
 8014f90:	d001      	beq.n	8014f96 <__sflush_r+0xb2>
 8014f92:	2b16      	cmp	r3, #22
 8014f94:	d101      	bne.n	8014f9a <__sflush_r+0xb6>
 8014f96:	602f      	str	r7, [r5, #0]
 8014f98:	e7b1      	b.n	8014efe <__sflush_r+0x1a>
 8014f9a:	89a3      	ldrh	r3, [r4, #12]
 8014f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fa0:	81a3      	strh	r3, [r4, #12]
 8014fa2:	e7ad      	b.n	8014f00 <__sflush_r+0x1c>
 8014fa4:	690f      	ldr	r7, [r1, #16]
 8014fa6:	2f00      	cmp	r7, #0
 8014fa8:	d0a9      	beq.n	8014efe <__sflush_r+0x1a>
 8014faa:	0793      	lsls	r3, r2, #30
 8014fac:	680e      	ldr	r6, [r1, #0]
 8014fae:	bf08      	it	eq
 8014fb0:	694b      	ldreq	r3, [r1, #20]
 8014fb2:	600f      	str	r7, [r1, #0]
 8014fb4:	bf18      	it	ne
 8014fb6:	2300      	movne	r3, #0
 8014fb8:	eba6 0807 	sub.w	r8, r6, r7
 8014fbc:	608b      	str	r3, [r1, #8]
 8014fbe:	f1b8 0f00 	cmp.w	r8, #0
 8014fc2:	dd9c      	ble.n	8014efe <__sflush_r+0x1a>
 8014fc4:	6a21      	ldr	r1, [r4, #32]
 8014fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014fc8:	4643      	mov	r3, r8
 8014fca:	463a      	mov	r2, r7
 8014fcc:	4628      	mov	r0, r5
 8014fce:	47b0      	blx	r6
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	dc06      	bgt.n	8014fe2 <__sflush_r+0xfe>
 8014fd4:	89a3      	ldrh	r3, [r4, #12]
 8014fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fda:	81a3      	strh	r3, [r4, #12]
 8014fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8014fe0:	e78e      	b.n	8014f00 <__sflush_r+0x1c>
 8014fe2:	4407      	add	r7, r0
 8014fe4:	eba8 0800 	sub.w	r8, r8, r0
 8014fe8:	e7e9      	b.n	8014fbe <__sflush_r+0xda>
 8014fea:	bf00      	nop
 8014fec:	dfbffffe 	.word	0xdfbffffe

08014ff0 <_fflush_r>:
 8014ff0:	b538      	push	{r3, r4, r5, lr}
 8014ff2:	690b      	ldr	r3, [r1, #16]
 8014ff4:	4605      	mov	r5, r0
 8014ff6:	460c      	mov	r4, r1
 8014ff8:	b913      	cbnz	r3, 8015000 <_fflush_r+0x10>
 8014ffa:	2500      	movs	r5, #0
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	bd38      	pop	{r3, r4, r5, pc}
 8015000:	b118      	cbz	r0, 801500a <_fflush_r+0x1a>
 8015002:	6a03      	ldr	r3, [r0, #32]
 8015004:	b90b      	cbnz	r3, 801500a <_fflush_r+0x1a>
 8015006:	f7fd fd07 	bl	8012a18 <__sinit>
 801500a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d0f3      	beq.n	8014ffa <_fflush_r+0xa>
 8015012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015014:	07d0      	lsls	r0, r2, #31
 8015016:	d404      	bmi.n	8015022 <_fflush_r+0x32>
 8015018:	0599      	lsls	r1, r3, #22
 801501a:	d402      	bmi.n	8015022 <_fflush_r+0x32>
 801501c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801501e:	f7fd feda 	bl	8012dd6 <__retarget_lock_acquire_recursive>
 8015022:	4628      	mov	r0, r5
 8015024:	4621      	mov	r1, r4
 8015026:	f7ff ff5d 	bl	8014ee4 <__sflush_r>
 801502a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801502c:	07da      	lsls	r2, r3, #31
 801502e:	4605      	mov	r5, r0
 8015030:	d4e4      	bmi.n	8014ffc <_fflush_r+0xc>
 8015032:	89a3      	ldrh	r3, [r4, #12]
 8015034:	059b      	lsls	r3, r3, #22
 8015036:	d4e1      	bmi.n	8014ffc <_fflush_r+0xc>
 8015038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801503a:	f7fd fecd 	bl	8012dd8 <__retarget_lock_release_recursive>
 801503e:	e7dd      	b.n	8014ffc <_fflush_r+0xc>

08015040 <fiprintf>:
 8015040:	b40e      	push	{r1, r2, r3}
 8015042:	b503      	push	{r0, r1, lr}
 8015044:	4601      	mov	r1, r0
 8015046:	ab03      	add	r3, sp, #12
 8015048:	4805      	ldr	r0, [pc, #20]	; (8015060 <fiprintf+0x20>)
 801504a:	f853 2b04 	ldr.w	r2, [r3], #4
 801504e:	6800      	ldr	r0, [r0, #0]
 8015050:	9301      	str	r3, [sp, #4]
 8015052:	f000 f897 	bl	8015184 <_vfiprintf_r>
 8015056:	b002      	add	sp, #8
 8015058:	f85d eb04 	ldr.w	lr, [sp], #4
 801505c:	b003      	add	sp, #12
 801505e:	4770      	bx	lr
 8015060:	20000310 	.word	0x20000310

08015064 <memmove>:
 8015064:	4288      	cmp	r0, r1
 8015066:	b510      	push	{r4, lr}
 8015068:	eb01 0402 	add.w	r4, r1, r2
 801506c:	d902      	bls.n	8015074 <memmove+0x10>
 801506e:	4284      	cmp	r4, r0
 8015070:	4623      	mov	r3, r4
 8015072:	d807      	bhi.n	8015084 <memmove+0x20>
 8015074:	1e43      	subs	r3, r0, #1
 8015076:	42a1      	cmp	r1, r4
 8015078:	d008      	beq.n	801508c <memmove+0x28>
 801507a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801507e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015082:	e7f8      	b.n	8015076 <memmove+0x12>
 8015084:	4402      	add	r2, r0
 8015086:	4601      	mov	r1, r0
 8015088:	428a      	cmp	r2, r1
 801508a:	d100      	bne.n	801508e <memmove+0x2a>
 801508c:	bd10      	pop	{r4, pc}
 801508e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015096:	e7f7      	b.n	8015088 <memmove+0x24>

08015098 <abort>:
 8015098:	b508      	push	{r3, lr}
 801509a:	2006      	movs	r0, #6
 801509c:	f000 fa4a 	bl	8015534 <raise>
 80150a0:	2001      	movs	r0, #1
 80150a2:	f7ef f9d5 	bl	8004450 <_exit>

080150a6 <_calloc_r>:
 80150a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80150a8:	fba1 2402 	umull	r2, r4, r1, r2
 80150ac:	b94c      	cbnz	r4, 80150c2 <_calloc_r+0x1c>
 80150ae:	4611      	mov	r1, r2
 80150b0:	9201      	str	r2, [sp, #4]
 80150b2:	f7fb fe1b 	bl	8010cec <_malloc_r>
 80150b6:	9a01      	ldr	r2, [sp, #4]
 80150b8:	4605      	mov	r5, r0
 80150ba:	b930      	cbnz	r0, 80150ca <_calloc_r+0x24>
 80150bc:	4628      	mov	r0, r5
 80150be:	b003      	add	sp, #12
 80150c0:	bd30      	pop	{r4, r5, pc}
 80150c2:	220c      	movs	r2, #12
 80150c4:	6002      	str	r2, [r0, #0]
 80150c6:	2500      	movs	r5, #0
 80150c8:	e7f8      	b.n	80150bc <_calloc_r+0x16>
 80150ca:	4621      	mov	r1, r4
 80150cc:	f7fd fd71 	bl	8012bb2 <memset>
 80150d0:	e7f4      	b.n	80150bc <_calloc_r+0x16>

080150d2 <_realloc_r>:
 80150d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150d6:	4680      	mov	r8, r0
 80150d8:	4614      	mov	r4, r2
 80150da:	460e      	mov	r6, r1
 80150dc:	b921      	cbnz	r1, 80150e8 <_realloc_r+0x16>
 80150de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150e2:	4611      	mov	r1, r2
 80150e4:	f7fb be02 	b.w	8010cec <_malloc_r>
 80150e8:	b92a      	cbnz	r2, 80150f6 <_realloc_r+0x24>
 80150ea:	f7fe fd33 	bl	8013b54 <_free_r>
 80150ee:	4625      	mov	r5, r4
 80150f0:	4628      	mov	r0, r5
 80150f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150f6:	f000 fa39 	bl	801556c <_malloc_usable_size_r>
 80150fa:	4284      	cmp	r4, r0
 80150fc:	4607      	mov	r7, r0
 80150fe:	d802      	bhi.n	8015106 <_realloc_r+0x34>
 8015100:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015104:	d812      	bhi.n	801512c <_realloc_r+0x5a>
 8015106:	4621      	mov	r1, r4
 8015108:	4640      	mov	r0, r8
 801510a:	f7fb fdef 	bl	8010cec <_malloc_r>
 801510e:	4605      	mov	r5, r0
 8015110:	2800      	cmp	r0, #0
 8015112:	d0ed      	beq.n	80150f0 <_realloc_r+0x1e>
 8015114:	42bc      	cmp	r4, r7
 8015116:	4622      	mov	r2, r4
 8015118:	4631      	mov	r1, r6
 801511a:	bf28      	it	cs
 801511c:	463a      	movcs	r2, r7
 801511e:	f7fd fe64 	bl	8012dea <memcpy>
 8015122:	4631      	mov	r1, r6
 8015124:	4640      	mov	r0, r8
 8015126:	f7fe fd15 	bl	8013b54 <_free_r>
 801512a:	e7e1      	b.n	80150f0 <_realloc_r+0x1e>
 801512c:	4635      	mov	r5, r6
 801512e:	e7df      	b.n	80150f0 <_realloc_r+0x1e>

08015130 <__sfputc_r>:
 8015130:	6893      	ldr	r3, [r2, #8]
 8015132:	3b01      	subs	r3, #1
 8015134:	2b00      	cmp	r3, #0
 8015136:	b410      	push	{r4}
 8015138:	6093      	str	r3, [r2, #8]
 801513a:	da08      	bge.n	801514e <__sfputc_r+0x1e>
 801513c:	6994      	ldr	r4, [r2, #24]
 801513e:	42a3      	cmp	r3, r4
 8015140:	db01      	blt.n	8015146 <__sfputc_r+0x16>
 8015142:	290a      	cmp	r1, #10
 8015144:	d103      	bne.n	801514e <__sfputc_r+0x1e>
 8015146:	f85d 4b04 	ldr.w	r4, [sp], #4
 801514a:	f000 b935 	b.w	80153b8 <__swbuf_r>
 801514e:	6813      	ldr	r3, [r2, #0]
 8015150:	1c58      	adds	r0, r3, #1
 8015152:	6010      	str	r0, [r2, #0]
 8015154:	7019      	strb	r1, [r3, #0]
 8015156:	4608      	mov	r0, r1
 8015158:	f85d 4b04 	ldr.w	r4, [sp], #4
 801515c:	4770      	bx	lr

0801515e <__sfputs_r>:
 801515e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015160:	4606      	mov	r6, r0
 8015162:	460f      	mov	r7, r1
 8015164:	4614      	mov	r4, r2
 8015166:	18d5      	adds	r5, r2, r3
 8015168:	42ac      	cmp	r4, r5
 801516a:	d101      	bne.n	8015170 <__sfputs_r+0x12>
 801516c:	2000      	movs	r0, #0
 801516e:	e007      	b.n	8015180 <__sfputs_r+0x22>
 8015170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015174:	463a      	mov	r2, r7
 8015176:	4630      	mov	r0, r6
 8015178:	f7ff ffda 	bl	8015130 <__sfputc_r>
 801517c:	1c43      	adds	r3, r0, #1
 801517e:	d1f3      	bne.n	8015168 <__sfputs_r+0xa>
 8015180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015184 <_vfiprintf_r>:
 8015184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015188:	460d      	mov	r5, r1
 801518a:	b09d      	sub	sp, #116	; 0x74
 801518c:	4614      	mov	r4, r2
 801518e:	4698      	mov	r8, r3
 8015190:	4606      	mov	r6, r0
 8015192:	b118      	cbz	r0, 801519c <_vfiprintf_r+0x18>
 8015194:	6a03      	ldr	r3, [r0, #32]
 8015196:	b90b      	cbnz	r3, 801519c <_vfiprintf_r+0x18>
 8015198:	f7fd fc3e 	bl	8012a18 <__sinit>
 801519c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801519e:	07d9      	lsls	r1, r3, #31
 80151a0:	d405      	bmi.n	80151ae <_vfiprintf_r+0x2a>
 80151a2:	89ab      	ldrh	r3, [r5, #12]
 80151a4:	059a      	lsls	r2, r3, #22
 80151a6:	d402      	bmi.n	80151ae <_vfiprintf_r+0x2a>
 80151a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151aa:	f7fd fe14 	bl	8012dd6 <__retarget_lock_acquire_recursive>
 80151ae:	89ab      	ldrh	r3, [r5, #12]
 80151b0:	071b      	lsls	r3, r3, #28
 80151b2:	d501      	bpl.n	80151b8 <_vfiprintf_r+0x34>
 80151b4:	692b      	ldr	r3, [r5, #16]
 80151b6:	b99b      	cbnz	r3, 80151e0 <_vfiprintf_r+0x5c>
 80151b8:	4629      	mov	r1, r5
 80151ba:	4630      	mov	r0, r6
 80151bc:	f000 f93a 	bl	8015434 <__swsetup_r>
 80151c0:	b170      	cbz	r0, 80151e0 <_vfiprintf_r+0x5c>
 80151c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151c4:	07dc      	lsls	r4, r3, #31
 80151c6:	d504      	bpl.n	80151d2 <_vfiprintf_r+0x4e>
 80151c8:	f04f 30ff 	mov.w	r0, #4294967295
 80151cc:	b01d      	add	sp, #116	; 0x74
 80151ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151d2:	89ab      	ldrh	r3, [r5, #12]
 80151d4:	0598      	lsls	r0, r3, #22
 80151d6:	d4f7      	bmi.n	80151c8 <_vfiprintf_r+0x44>
 80151d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151da:	f7fd fdfd 	bl	8012dd8 <__retarget_lock_release_recursive>
 80151de:	e7f3      	b.n	80151c8 <_vfiprintf_r+0x44>
 80151e0:	2300      	movs	r3, #0
 80151e2:	9309      	str	r3, [sp, #36]	; 0x24
 80151e4:	2320      	movs	r3, #32
 80151e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80151ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80151ee:	2330      	movs	r3, #48	; 0x30
 80151f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80153a4 <_vfiprintf_r+0x220>
 80151f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80151f8:	f04f 0901 	mov.w	r9, #1
 80151fc:	4623      	mov	r3, r4
 80151fe:	469a      	mov	sl, r3
 8015200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015204:	b10a      	cbz	r2, 801520a <_vfiprintf_r+0x86>
 8015206:	2a25      	cmp	r2, #37	; 0x25
 8015208:	d1f9      	bne.n	80151fe <_vfiprintf_r+0x7a>
 801520a:	ebba 0b04 	subs.w	fp, sl, r4
 801520e:	d00b      	beq.n	8015228 <_vfiprintf_r+0xa4>
 8015210:	465b      	mov	r3, fp
 8015212:	4622      	mov	r2, r4
 8015214:	4629      	mov	r1, r5
 8015216:	4630      	mov	r0, r6
 8015218:	f7ff ffa1 	bl	801515e <__sfputs_r>
 801521c:	3001      	adds	r0, #1
 801521e:	f000 80a9 	beq.w	8015374 <_vfiprintf_r+0x1f0>
 8015222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015224:	445a      	add	r2, fp
 8015226:	9209      	str	r2, [sp, #36]	; 0x24
 8015228:	f89a 3000 	ldrb.w	r3, [sl]
 801522c:	2b00      	cmp	r3, #0
 801522e:	f000 80a1 	beq.w	8015374 <_vfiprintf_r+0x1f0>
 8015232:	2300      	movs	r3, #0
 8015234:	f04f 32ff 	mov.w	r2, #4294967295
 8015238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801523c:	f10a 0a01 	add.w	sl, sl, #1
 8015240:	9304      	str	r3, [sp, #16]
 8015242:	9307      	str	r3, [sp, #28]
 8015244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015248:	931a      	str	r3, [sp, #104]	; 0x68
 801524a:	4654      	mov	r4, sl
 801524c:	2205      	movs	r2, #5
 801524e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015252:	4854      	ldr	r0, [pc, #336]	; (80153a4 <_vfiprintf_r+0x220>)
 8015254:	f7ea ffbc 	bl	80001d0 <memchr>
 8015258:	9a04      	ldr	r2, [sp, #16]
 801525a:	b9d8      	cbnz	r0, 8015294 <_vfiprintf_r+0x110>
 801525c:	06d1      	lsls	r1, r2, #27
 801525e:	bf44      	itt	mi
 8015260:	2320      	movmi	r3, #32
 8015262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015266:	0713      	lsls	r3, r2, #28
 8015268:	bf44      	itt	mi
 801526a:	232b      	movmi	r3, #43	; 0x2b
 801526c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015270:	f89a 3000 	ldrb.w	r3, [sl]
 8015274:	2b2a      	cmp	r3, #42	; 0x2a
 8015276:	d015      	beq.n	80152a4 <_vfiprintf_r+0x120>
 8015278:	9a07      	ldr	r2, [sp, #28]
 801527a:	4654      	mov	r4, sl
 801527c:	2000      	movs	r0, #0
 801527e:	f04f 0c0a 	mov.w	ip, #10
 8015282:	4621      	mov	r1, r4
 8015284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015288:	3b30      	subs	r3, #48	; 0x30
 801528a:	2b09      	cmp	r3, #9
 801528c:	d94d      	bls.n	801532a <_vfiprintf_r+0x1a6>
 801528e:	b1b0      	cbz	r0, 80152be <_vfiprintf_r+0x13a>
 8015290:	9207      	str	r2, [sp, #28]
 8015292:	e014      	b.n	80152be <_vfiprintf_r+0x13a>
 8015294:	eba0 0308 	sub.w	r3, r0, r8
 8015298:	fa09 f303 	lsl.w	r3, r9, r3
 801529c:	4313      	orrs	r3, r2
 801529e:	9304      	str	r3, [sp, #16]
 80152a0:	46a2      	mov	sl, r4
 80152a2:	e7d2      	b.n	801524a <_vfiprintf_r+0xc6>
 80152a4:	9b03      	ldr	r3, [sp, #12]
 80152a6:	1d19      	adds	r1, r3, #4
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	9103      	str	r1, [sp, #12]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	bfbb      	ittet	lt
 80152b0:	425b      	neglt	r3, r3
 80152b2:	f042 0202 	orrlt.w	r2, r2, #2
 80152b6:	9307      	strge	r3, [sp, #28]
 80152b8:	9307      	strlt	r3, [sp, #28]
 80152ba:	bfb8      	it	lt
 80152bc:	9204      	strlt	r2, [sp, #16]
 80152be:	7823      	ldrb	r3, [r4, #0]
 80152c0:	2b2e      	cmp	r3, #46	; 0x2e
 80152c2:	d10c      	bne.n	80152de <_vfiprintf_r+0x15a>
 80152c4:	7863      	ldrb	r3, [r4, #1]
 80152c6:	2b2a      	cmp	r3, #42	; 0x2a
 80152c8:	d134      	bne.n	8015334 <_vfiprintf_r+0x1b0>
 80152ca:	9b03      	ldr	r3, [sp, #12]
 80152cc:	1d1a      	adds	r2, r3, #4
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	9203      	str	r2, [sp, #12]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	bfb8      	it	lt
 80152d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80152da:	3402      	adds	r4, #2
 80152dc:	9305      	str	r3, [sp, #20]
 80152de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80153b4 <_vfiprintf_r+0x230>
 80152e2:	7821      	ldrb	r1, [r4, #0]
 80152e4:	2203      	movs	r2, #3
 80152e6:	4650      	mov	r0, sl
 80152e8:	f7ea ff72 	bl	80001d0 <memchr>
 80152ec:	b138      	cbz	r0, 80152fe <_vfiprintf_r+0x17a>
 80152ee:	9b04      	ldr	r3, [sp, #16]
 80152f0:	eba0 000a 	sub.w	r0, r0, sl
 80152f4:	2240      	movs	r2, #64	; 0x40
 80152f6:	4082      	lsls	r2, r0
 80152f8:	4313      	orrs	r3, r2
 80152fa:	3401      	adds	r4, #1
 80152fc:	9304      	str	r3, [sp, #16]
 80152fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015302:	4829      	ldr	r0, [pc, #164]	; (80153a8 <_vfiprintf_r+0x224>)
 8015304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015308:	2206      	movs	r2, #6
 801530a:	f7ea ff61 	bl	80001d0 <memchr>
 801530e:	2800      	cmp	r0, #0
 8015310:	d03f      	beq.n	8015392 <_vfiprintf_r+0x20e>
 8015312:	4b26      	ldr	r3, [pc, #152]	; (80153ac <_vfiprintf_r+0x228>)
 8015314:	bb1b      	cbnz	r3, 801535e <_vfiprintf_r+0x1da>
 8015316:	9b03      	ldr	r3, [sp, #12]
 8015318:	3307      	adds	r3, #7
 801531a:	f023 0307 	bic.w	r3, r3, #7
 801531e:	3308      	adds	r3, #8
 8015320:	9303      	str	r3, [sp, #12]
 8015322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015324:	443b      	add	r3, r7
 8015326:	9309      	str	r3, [sp, #36]	; 0x24
 8015328:	e768      	b.n	80151fc <_vfiprintf_r+0x78>
 801532a:	fb0c 3202 	mla	r2, ip, r2, r3
 801532e:	460c      	mov	r4, r1
 8015330:	2001      	movs	r0, #1
 8015332:	e7a6      	b.n	8015282 <_vfiprintf_r+0xfe>
 8015334:	2300      	movs	r3, #0
 8015336:	3401      	adds	r4, #1
 8015338:	9305      	str	r3, [sp, #20]
 801533a:	4619      	mov	r1, r3
 801533c:	f04f 0c0a 	mov.w	ip, #10
 8015340:	4620      	mov	r0, r4
 8015342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015346:	3a30      	subs	r2, #48	; 0x30
 8015348:	2a09      	cmp	r2, #9
 801534a:	d903      	bls.n	8015354 <_vfiprintf_r+0x1d0>
 801534c:	2b00      	cmp	r3, #0
 801534e:	d0c6      	beq.n	80152de <_vfiprintf_r+0x15a>
 8015350:	9105      	str	r1, [sp, #20]
 8015352:	e7c4      	b.n	80152de <_vfiprintf_r+0x15a>
 8015354:	fb0c 2101 	mla	r1, ip, r1, r2
 8015358:	4604      	mov	r4, r0
 801535a:	2301      	movs	r3, #1
 801535c:	e7f0      	b.n	8015340 <_vfiprintf_r+0x1bc>
 801535e:	ab03      	add	r3, sp, #12
 8015360:	9300      	str	r3, [sp, #0]
 8015362:	462a      	mov	r2, r5
 8015364:	4b12      	ldr	r3, [pc, #72]	; (80153b0 <_vfiprintf_r+0x22c>)
 8015366:	a904      	add	r1, sp, #16
 8015368:	4630      	mov	r0, r6
 801536a:	f7fc fcf3 	bl	8011d54 <_printf_float>
 801536e:	4607      	mov	r7, r0
 8015370:	1c78      	adds	r0, r7, #1
 8015372:	d1d6      	bne.n	8015322 <_vfiprintf_r+0x19e>
 8015374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015376:	07d9      	lsls	r1, r3, #31
 8015378:	d405      	bmi.n	8015386 <_vfiprintf_r+0x202>
 801537a:	89ab      	ldrh	r3, [r5, #12]
 801537c:	059a      	lsls	r2, r3, #22
 801537e:	d402      	bmi.n	8015386 <_vfiprintf_r+0x202>
 8015380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015382:	f7fd fd29 	bl	8012dd8 <__retarget_lock_release_recursive>
 8015386:	89ab      	ldrh	r3, [r5, #12]
 8015388:	065b      	lsls	r3, r3, #25
 801538a:	f53f af1d 	bmi.w	80151c8 <_vfiprintf_r+0x44>
 801538e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015390:	e71c      	b.n	80151cc <_vfiprintf_r+0x48>
 8015392:	ab03      	add	r3, sp, #12
 8015394:	9300      	str	r3, [sp, #0]
 8015396:	462a      	mov	r2, r5
 8015398:	4b05      	ldr	r3, [pc, #20]	; (80153b0 <_vfiprintf_r+0x22c>)
 801539a:	a904      	add	r1, sp, #16
 801539c:	4630      	mov	r0, r6
 801539e:	f7fc ff7d 	bl	801229c <_printf_i>
 80153a2:	e7e4      	b.n	801536e <_vfiprintf_r+0x1ea>
 80153a4:	08018cfc 	.word	0x08018cfc
 80153a8:	08018d06 	.word	0x08018d06
 80153ac:	08011d55 	.word	0x08011d55
 80153b0:	0801515f 	.word	0x0801515f
 80153b4:	08018d02 	.word	0x08018d02

080153b8 <__swbuf_r>:
 80153b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ba:	460e      	mov	r6, r1
 80153bc:	4614      	mov	r4, r2
 80153be:	4605      	mov	r5, r0
 80153c0:	b118      	cbz	r0, 80153ca <__swbuf_r+0x12>
 80153c2:	6a03      	ldr	r3, [r0, #32]
 80153c4:	b90b      	cbnz	r3, 80153ca <__swbuf_r+0x12>
 80153c6:	f7fd fb27 	bl	8012a18 <__sinit>
 80153ca:	69a3      	ldr	r3, [r4, #24]
 80153cc:	60a3      	str	r3, [r4, #8]
 80153ce:	89a3      	ldrh	r3, [r4, #12]
 80153d0:	071a      	lsls	r2, r3, #28
 80153d2:	d525      	bpl.n	8015420 <__swbuf_r+0x68>
 80153d4:	6923      	ldr	r3, [r4, #16]
 80153d6:	b31b      	cbz	r3, 8015420 <__swbuf_r+0x68>
 80153d8:	6823      	ldr	r3, [r4, #0]
 80153da:	6922      	ldr	r2, [r4, #16]
 80153dc:	1a98      	subs	r0, r3, r2
 80153de:	6963      	ldr	r3, [r4, #20]
 80153e0:	b2f6      	uxtb	r6, r6
 80153e2:	4283      	cmp	r3, r0
 80153e4:	4637      	mov	r7, r6
 80153e6:	dc04      	bgt.n	80153f2 <__swbuf_r+0x3a>
 80153e8:	4621      	mov	r1, r4
 80153ea:	4628      	mov	r0, r5
 80153ec:	f7ff fe00 	bl	8014ff0 <_fflush_r>
 80153f0:	b9e0      	cbnz	r0, 801542c <__swbuf_r+0x74>
 80153f2:	68a3      	ldr	r3, [r4, #8]
 80153f4:	3b01      	subs	r3, #1
 80153f6:	60a3      	str	r3, [r4, #8]
 80153f8:	6823      	ldr	r3, [r4, #0]
 80153fa:	1c5a      	adds	r2, r3, #1
 80153fc:	6022      	str	r2, [r4, #0]
 80153fe:	701e      	strb	r6, [r3, #0]
 8015400:	6962      	ldr	r2, [r4, #20]
 8015402:	1c43      	adds	r3, r0, #1
 8015404:	429a      	cmp	r2, r3
 8015406:	d004      	beq.n	8015412 <__swbuf_r+0x5a>
 8015408:	89a3      	ldrh	r3, [r4, #12]
 801540a:	07db      	lsls	r3, r3, #31
 801540c:	d506      	bpl.n	801541c <__swbuf_r+0x64>
 801540e:	2e0a      	cmp	r6, #10
 8015410:	d104      	bne.n	801541c <__swbuf_r+0x64>
 8015412:	4621      	mov	r1, r4
 8015414:	4628      	mov	r0, r5
 8015416:	f7ff fdeb 	bl	8014ff0 <_fflush_r>
 801541a:	b938      	cbnz	r0, 801542c <__swbuf_r+0x74>
 801541c:	4638      	mov	r0, r7
 801541e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015420:	4621      	mov	r1, r4
 8015422:	4628      	mov	r0, r5
 8015424:	f000 f806 	bl	8015434 <__swsetup_r>
 8015428:	2800      	cmp	r0, #0
 801542a:	d0d5      	beq.n	80153d8 <__swbuf_r+0x20>
 801542c:	f04f 37ff 	mov.w	r7, #4294967295
 8015430:	e7f4      	b.n	801541c <__swbuf_r+0x64>
	...

08015434 <__swsetup_r>:
 8015434:	b538      	push	{r3, r4, r5, lr}
 8015436:	4b2a      	ldr	r3, [pc, #168]	; (80154e0 <__swsetup_r+0xac>)
 8015438:	4605      	mov	r5, r0
 801543a:	6818      	ldr	r0, [r3, #0]
 801543c:	460c      	mov	r4, r1
 801543e:	b118      	cbz	r0, 8015448 <__swsetup_r+0x14>
 8015440:	6a03      	ldr	r3, [r0, #32]
 8015442:	b90b      	cbnz	r3, 8015448 <__swsetup_r+0x14>
 8015444:	f7fd fae8 	bl	8012a18 <__sinit>
 8015448:	89a3      	ldrh	r3, [r4, #12]
 801544a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801544e:	0718      	lsls	r0, r3, #28
 8015450:	d422      	bmi.n	8015498 <__swsetup_r+0x64>
 8015452:	06d9      	lsls	r1, r3, #27
 8015454:	d407      	bmi.n	8015466 <__swsetup_r+0x32>
 8015456:	2309      	movs	r3, #9
 8015458:	602b      	str	r3, [r5, #0]
 801545a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801545e:	81a3      	strh	r3, [r4, #12]
 8015460:	f04f 30ff 	mov.w	r0, #4294967295
 8015464:	e034      	b.n	80154d0 <__swsetup_r+0x9c>
 8015466:	0758      	lsls	r0, r3, #29
 8015468:	d512      	bpl.n	8015490 <__swsetup_r+0x5c>
 801546a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801546c:	b141      	cbz	r1, 8015480 <__swsetup_r+0x4c>
 801546e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015472:	4299      	cmp	r1, r3
 8015474:	d002      	beq.n	801547c <__swsetup_r+0x48>
 8015476:	4628      	mov	r0, r5
 8015478:	f7fe fb6c 	bl	8013b54 <_free_r>
 801547c:	2300      	movs	r3, #0
 801547e:	6363      	str	r3, [r4, #52]	; 0x34
 8015480:	89a3      	ldrh	r3, [r4, #12]
 8015482:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015486:	81a3      	strh	r3, [r4, #12]
 8015488:	2300      	movs	r3, #0
 801548a:	6063      	str	r3, [r4, #4]
 801548c:	6923      	ldr	r3, [r4, #16]
 801548e:	6023      	str	r3, [r4, #0]
 8015490:	89a3      	ldrh	r3, [r4, #12]
 8015492:	f043 0308 	orr.w	r3, r3, #8
 8015496:	81a3      	strh	r3, [r4, #12]
 8015498:	6923      	ldr	r3, [r4, #16]
 801549a:	b94b      	cbnz	r3, 80154b0 <__swsetup_r+0x7c>
 801549c:	89a3      	ldrh	r3, [r4, #12]
 801549e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80154a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80154a6:	d003      	beq.n	80154b0 <__swsetup_r+0x7c>
 80154a8:	4621      	mov	r1, r4
 80154aa:	4628      	mov	r0, r5
 80154ac:	f000 f88c 	bl	80155c8 <__smakebuf_r>
 80154b0:	89a0      	ldrh	r0, [r4, #12]
 80154b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80154b6:	f010 0301 	ands.w	r3, r0, #1
 80154ba:	d00a      	beq.n	80154d2 <__swsetup_r+0x9e>
 80154bc:	2300      	movs	r3, #0
 80154be:	60a3      	str	r3, [r4, #8]
 80154c0:	6963      	ldr	r3, [r4, #20]
 80154c2:	425b      	negs	r3, r3
 80154c4:	61a3      	str	r3, [r4, #24]
 80154c6:	6923      	ldr	r3, [r4, #16]
 80154c8:	b943      	cbnz	r3, 80154dc <__swsetup_r+0xa8>
 80154ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80154ce:	d1c4      	bne.n	801545a <__swsetup_r+0x26>
 80154d0:	bd38      	pop	{r3, r4, r5, pc}
 80154d2:	0781      	lsls	r1, r0, #30
 80154d4:	bf58      	it	pl
 80154d6:	6963      	ldrpl	r3, [r4, #20]
 80154d8:	60a3      	str	r3, [r4, #8]
 80154da:	e7f4      	b.n	80154c6 <__swsetup_r+0x92>
 80154dc:	2000      	movs	r0, #0
 80154de:	e7f7      	b.n	80154d0 <__swsetup_r+0x9c>
 80154e0:	20000310 	.word	0x20000310

080154e4 <_raise_r>:
 80154e4:	291f      	cmp	r1, #31
 80154e6:	b538      	push	{r3, r4, r5, lr}
 80154e8:	4604      	mov	r4, r0
 80154ea:	460d      	mov	r5, r1
 80154ec:	d904      	bls.n	80154f8 <_raise_r+0x14>
 80154ee:	2316      	movs	r3, #22
 80154f0:	6003      	str	r3, [r0, #0]
 80154f2:	f04f 30ff 	mov.w	r0, #4294967295
 80154f6:	bd38      	pop	{r3, r4, r5, pc}
 80154f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80154fa:	b112      	cbz	r2, 8015502 <_raise_r+0x1e>
 80154fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015500:	b94b      	cbnz	r3, 8015516 <_raise_r+0x32>
 8015502:	4620      	mov	r0, r4
 8015504:	f000 f830 	bl	8015568 <_getpid_r>
 8015508:	462a      	mov	r2, r5
 801550a:	4601      	mov	r1, r0
 801550c:	4620      	mov	r0, r4
 801550e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015512:	f000 b817 	b.w	8015544 <_kill_r>
 8015516:	2b01      	cmp	r3, #1
 8015518:	d00a      	beq.n	8015530 <_raise_r+0x4c>
 801551a:	1c59      	adds	r1, r3, #1
 801551c:	d103      	bne.n	8015526 <_raise_r+0x42>
 801551e:	2316      	movs	r3, #22
 8015520:	6003      	str	r3, [r0, #0]
 8015522:	2001      	movs	r0, #1
 8015524:	e7e7      	b.n	80154f6 <_raise_r+0x12>
 8015526:	2400      	movs	r4, #0
 8015528:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801552c:	4628      	mov	r0, r5
 801552e:	4798      	blx	r3
 8015530:	2000      	movs	r0, #0
 8015532:	e7e0      	b.n	80154f6 <_raise_r+0x12>

08015534 <raise>:
 8015534:	4b02      	ldr	r3, [pc, #8]	; (8015540 <raise+0xc>)
 8015536:	4601      	mov	r1, r0
 8015538:	6818      	ldr	r0, [r3, #0]
 801553a:	f7ff bfd3 	b.w	80154e4 <_raise_r>
 801553e:	bf00      	nop
 8015540:	20000310 	.word	0x20000310

08015544 <_kill_r>:
 8015544:	b538      	push	{r3, r4, r5, lr}
 8015546:	4d07      	ldr	r5, [pc, #28]	; (8015564 <_kill_r+0x20>)
 8015548:	2300      	movs	r3, #0
 801554a:	4604      	mov	r4, r0
 801554c:	4608      	mov	r0, r1
 801554e:	4611      	mov	r1, r2
 8015550:	602b      	str	r3, [r5, #0]
 8015552:	f7ee ff6d 	bl	8004430 <_kill>
 8015556:	1c43      	adds	r3, r0, #1
 8015558:	d102      	bne.n	8015560 <_kill_r+0x1c>
 801555a:	682b      	ldr	r3, [r5, #0]
 801555c:	b103      	cbz	r3, 8015560 <_kill_r+0x1c>
 801555e:	6023      	str	r3, [r4, #0]
 8015560:	bd38      	pop	{r3, r4, r5, pc}
 8015562:	bf00      	nop
 8015564:	200015d8 	.word	0x200015d8

08015568 <_getpid_r>:
 8015568:	f7ee bf5a 	b.w	8004420 <_getpid>

0801556c <_malloc_usable_size_r>:
 801556c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015570:	1f18      	subs	r0, r3, #4
 8015572:	2b00      	cmp	r3, #0
 8015574:	bfbc      	itt	lt
 8015576:	580b      	ldrlt	r3, [r1, r0]
 8015578:	18c0      	addlt	r0, r0, r3
 801557a:	4770      	bx	lr

0801557c <__swhatbuf_r>:
 801557c:	b570      	push	{r4, r5, r6, lr}
 801557e:	460c      	mov	r4, r1
 8015580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015584:	2900      	cmp	r1, #0
 8015586:	b096      	sub	sp, #88	; 0x58
 8015588:	4615      	mov	r5, r2
 801558a:	461e      	mov	r6, r3
 801558c:	da0d      	bge.n	80155aa <__swhatbuf_r+0x2e>
 801558e:	89a3      	ldrh	r3, [r4, #12]
 8015590:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015594:	f04f 0100 	mov.w	r1, #0
 8015598:	bf0c      	ite	eq
 801559a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801559e:	2340      	movne	r3, #64	; 0x40
 80155a0:	2000      	movs	r0, #0
 80155a2:	6031      	str	r1, [r6, #0]
 80155a4:	602b      	str	r3, [r5, #0]
 80155a6:	b016      	add	sp, #88	; 0x58
 80155a8:	bd70      	pop	{r4, r5, r6, pc}
 80155aa:	466a      	mov	r2, sp
 80155ac:	f000 f848 	bl	8015640 <_fstat_r>
 80155b0:	2800      	cmp	r0, #0
 80155b2:	dbec      	blt.n	801558e <__swhatbuf_r+0x12>
 80155b4:	9901      	ldr	r1, [sp, #4]
 80155b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80155ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80155be:	4259      	negs	r1, r3
 80155c0:	4159      	adcs	r1, r3
 80155c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80155c6:	e7eb      	b.n	80155a0 <__swhatbuf_r+0x24>

080155c8 <__smakebuf_r>:
 80155c8:	898b      	ldrh	r3, [r1, #12]
 80155ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80155cc:	079d      	lsls	r5, r3, #30
 80155ce:	4606      	mov	r6, r0
 80155d0:	460c      	mov	r4, r1
 80155d2:	d507      	bpl.n	80155e4 <__smakebuf_r+0x1c>
 80155d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80155d8:	6023      	str	r3, [r4, #0]
 80155da:	6123      	str	r3, [r4, #16]
 80155dc:	2301      	movs	r3, #1
 80155de:	6163      	str	r3, [r4, #20]
 80155e0:	b002      	add	sp, #8
 80155e2:	bd70      	pop	{r4, r5, r6, pc}
 80155e4:	ab01      	add	r3, sp, #4
 80155e6:	466a      	mov	r2, sp
 80155e8:	f7ff ffc8 	bl	801557c <__swhatbuf_r>
 80155ec:	9900      	ldr	r1, [sp, #0]
 80155ee:	4605      	mov	r5, r0
 80155f0:	4630      	mov	r0, r6
 80155f2:	f7fb fb7b 	bl	8010cec <_malloc_r>
 80155f6:	b948      	cbnz	r0, 801560c <__smakebuf_r+0x44>
 80155f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155fc:	059a      	lsls	r2, r3, #22
 80155fe:	d4ef      	bmi.n	80155e0 <__smakebuf_r+0x18>
 8015600:	f023 0303 	bic.w	r3, r3, #3
 8015604:	f043 0302 	orr.w	r3, r3, #2
 8015608:	81a3      	strh	r3, [r4, #12]
 801560a:	e7e3      	b.n	80155d4 <__smakebuf_r+0xc>
 801560c:	89a3      	ldrh	r3, [r4, #12]
 801560e:	6020      	str	r0, [r4, #0]
 8015610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015614:	81a3      	strh	r3, [r4, #12]
 8015616:	9b00      	ldr	r3, [sp, #0]
 8015618:	6163      	str	r3, [r4, #20]
 801561a:	9b01      	ldr	r3, [sp, #4]
 801561c:	6120      	str	r0, [r4, #16]
 801561e:	b15b      	cbz	r3, 8015638 <__smakebuf_r+0x70>
 8015620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015624:	4630      	mov	r0, r6
 8015626:	f000 f81d 	bl	8015664 <_isatty_r>
 801562a:	b128      	cbz	r0, 8015638 <__smakebuf_r+0x70>
 801562c:	89a3      	ldrh	r3, [r4, #12]
 801562e:	f023 0303 	bic.w	r3, r3, #3
 8015632:	f043 0301 	orr.w	r3, r3, #1
 8015636:	81a3      	strh	r3, [r4, #12]
 8015638:	89a3      	ldrh	r3, [r4, #12]
 801563a:	431d      	orrs	r5, r3
 801563c:	81a5      	strh	r5, [r4, #12]
 801563e:	e7cf      	b.n	80155e0 <__smakebuf_r+0x18>

08015640 <_fstat_r>:
 8015640:	b538      	push	{r3, r4, r5, lr}
 8015642:	4d07      	ldr	r5, [pc, #28]	; (8015660 <_fstat_r+0x20>)
 8015644:	2300      	movs	r3, #0
 8015646:	4604      	mov	r4, r0
 8015648:	4608      	mov	r0, r1
 801564a:	4611      	mov	r1, r2
 801564c:	602b      	str	r3, [r5, #0]
 801564e:	f7ee ff4e 	bl	80044ee <_fstat>
 8015652:	1c43      	adds	r3, r0, #1
 8015654:	d102      	bne.n	801565c <_fstat_r+0x1c>
 8015656:	682b      	ldr	r3, [r5, #0]
 8015658:	b103      	cbz	r3, 801565c <_fstat_r+0x1c>
 801565a:	6023      	str	r3, [r4, #0]
 801565c:	bd38      	pop	{r3, r4, r5, pc}
 801565e:	bf00      	nop
 8015660:	200015d8 	.word	0x200015d8

08015664 <_isatty_r>:
 8015664:	b538      	push	{r3, r4, r5, lr}
 8015666:	4d06      	ldr	r5, [pc, #24]	; (8015680 <_isatty_r+0x1c>)
 8015668:	2300      	movs	r3, #0
 801566a:	4604      	mov	r4, r0
 801566c:	4608      	mov	r0, r1
 801566e:	602b      	str	r3, [r5, #0]
 8015670:	f7ee ff4d 	bl	800450e <_isatty>
 8015674:	1c43      	adds	r3, r0, #1
 8015676:	d102      	bne.n	801567e <_isatty_r+0x1a>
 8015678:	682b      	ldr	r3, [r5, #0]
 801567a:	b103      	cbz	r3, 801567e <_isatty_r+0x1a>
 801567c:	6023      	str	r3, [r4, #0]
 801567e:	bd38      	pop	{r3, r4, r5, pc}
 8015680:	200015d8 	.word	0x200015d8
 8015684:	00000000 	.word	0x00000000

08015688 <cos>:
 8015688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801568a:	ec53 2b10 	vmov	r2, r3, d0
 801568e:	4826      	ldr	r0, [pc, #152]	; (8015728 <cos+0xa0>)
 8015690:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015694:	4281      	cmp	r1, r0
 8015696:	dc06      	bgt.n	80156a6 <cos+0x1e>
 8015698:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8015720 <cos+0x98>
 801569c:	b005      	add	sp, #20
 801569e:	f85d eb04 	ldr.w	lr, [sp], #4
 80156a2:	f000 b961 	b.w	8015968 <__kernel_cos>
 80156a6:	4821      	ldr	r0, [pc, #132]	; (801572c <cos+0xa4>)
 80156a8:	4281      	cmp	r1, r0
 80156aa:	dd09      	ble.n	80156c0 <cos+0x38>
 80156ac:	ee10 0a10 	vmov	r0, s0
 80156b0:	4619      	mov	r1, r3
 80156b2:	f7ea fde9 	bl	8000288 <__aeabi_dsub>
 80156b6:	ec41 0b10 	vmov	d0, r0, r1
 80156ba:	b005      	add	sp, #20
 80156bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80156c0:	4668      	mov	r0, sp
 80156c2:	f000 fad9 	bl	8015c78 <__ieee754_rem_pio2>
 80156c6:	f000 0003 	and.w	r0, r0, #3
 80156ca:	2801      	cmp	r0, #1
 80156cc:	d00b      	beq.n	80156e6 <cos+0x5e>
 80156ce:	2802      	cmp	r0, #2
 80156d0:	d016      	beq.n	8015700 <cos+0x78>
 80156d2:	b9e0      	cbnz	r0, 801570e <cos+0x86>
 80156d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80156d8:	ed9d 0b00 	vldr	d0, [sp]
 80156dc:	f000 f944 	bl	8015968 <__kernel_cos>
 80156e0:	ec51 0b10 	vmov	r0, r1, d0
 80156e4:	e7e7      	b.n	80156b6 <cos+0x2e>
 80156e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80156ea:	ed9d 0b00 	vldr	d0, [sp]
 80156ee:	f000 fa03 	bl	8015af8 <__kernel_sin>
 80156f2:	ec53 2b10 	vmov	r2, r3, d0
 80156f6:	ee10 0a10 	vmov	r0, s0
 80156fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80156fe:	e7da      	b.n	80156b6 <cos+0x2e>
 8015700:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015704:	ed9d 0b00 	vldr	d0, [sp]
 8015708:	f000 f92e 	bl	8015968 <__kernel_cos>
 801570c:	e7f1      	b.n	80156f2 <cos+0x6a>
 801570e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015712:	ed9d 0b00 	vldr	d0, [sp]
 8015716:	2001      	movs	r0, #1
 8015718:	f000 f9ee 	bl	8015af8 <__kernel_sin>
 801571c:	e7e0      	b.n	80156e0 <cos+0x58>
 801571e:	bf00      	nop
	...
 8015728:	3fe921fb 	.word	0x3fe921fb
 801572c:	7fefffff 	.word	0x7fefffff

08015730 <sin>:
 8015730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015732:	ec53 2b10 	vmov	r2, r3, d0
 8015736:	4828      	ldr	r0, [pc, #160]	; (80157d8 <sin+0xa8>)
 8015738:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801573c:	4281      	cmp	r1, r0
 801573e:	dc07      	bgt.n	8015750 <sin+0x20>
 8015740:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80157d0 <sin+0xa0>
 8015744:	2000      	movs	r0, #0
 8015746:	b005      	add	sp, #20
 8015748:	f85d eb04 	ldr.w	lr, [sp], #4
 801574c:	f000 b9d4 	b.w	8015af8 <__kernel_sin>
 8015750:	4822      	ldr	r0, [pc, #136]	; (80157dc <sin+0xac>)
 8015752:	4281      	cmp	r1, r0
 8015754:	dd09      	ble.n	801576a <sin+0x3a>
 8015756:	ee10 0a10 	vmov	r0, s0
 801575a:	4619      	mov	r1, r3
 801575c:	f7ea fd94 	bl	8000288 <__aeabi_dsub>
 8015760:	ec41 0b10 	vmov	d0, r0, r1
 8015764:	b005      	add	sp, #20
 8015766:	f85d fb04 	ldr.w	pc, [sp], #4
 801576a:	4668      	mov	r0, sp
 801576c:	f000 fa84 	bl	8015c78 <__ieee754_rem_pio2>
 8015770:	f000 0003 	and.w	r0, r0, #3
 8015774:	2801      	cmp	r0, #1
 8015776:	d00c      	beq.n	8015792 <sin+0x62>
 8015778:	2802      	cmp	r0, #2
 801577a:	d011      	beq.n	80157a0 <sin+0x70>
 801577c:	b9f0      	cbnz	r0, 80157bc <sin+0x8c>
 801577e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015782:	ed9d 0b00 	vldr	d0, [sp]
 8015786:	2001      	movs	r0, #1
 8015788:	f000 f9b6 	bl	8015af8 <__kernel_sin>
 801578c:	ec51 0b10 	vmov	r0, r1, d0
 8015790:	e7e6      	b.n	8015760 <sin+0x30>
 8015792:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015796:	ed9d 0b00 	vldr	d0, [sp]
 801579a:	f000 f8e5 	bl	8015968 <__kernel_cos>
 801579e:	e7f5      	b.n	801578c <sin+0x5c>
 80157a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80157a4:	ed9d 0b00 	vldr	d0, [sp]
 80157a8:	2001      	movs	r0, #1
 80157aa:	f000 f9a5 	bl	8015af8 <__kernel_sin>
 80157ae:	ec53 2b10 	vmov	r2, r3, d0
 80157b2:	ee10 0a10 	vmov	r0, s0
 80157b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80157ba:	e7d1      	b.n	8015760 <sin+0x30>
 80157bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80157c0:	ed9d 0b00 	vldr	d0, [sp]
 80157c4:	f000 f8d0 	bl	8015968 <__kernel_cos>
 80157c8:	e7f1      	b.n	80157ae <sin+0x7e>
 80157ca:	bf00      	nop
 80157cc:	f3af 8000 	nop.w
	...
 80157d8:	3fe921fb 	.word	0x3fe921fb
 80157dc:	7fefffff 	.word	0x7fefffff

080157e0 <expf>:
 80157e0:	b508      	push	{r3, lr}
 80157e2:	ed2d 8b02 	vpush	{d8}
 80157e6:	eef0 8a40 	vmov.f32	s17, s0
 80157ea:	f000 fc55 	bl	8016098 <__ieee754_expf>
 80157ee:	eeb0 8a40 	vmov.f32	s16, s0
 80157f2:	eeb0 0a68 	vmov.f32	s0, s17
 80157f6:	f000 f829 	bl	801584c <finitef>
 80157fa:	b160      	cbz	r0, 8015816 <expf+0x36>
 80157fc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801583c <expf+0x5c>
 8015800:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015808:	dd0a      	ble.n	8015820 <expf+0x40>
 801580a:	f7fd fab9 	bl	8012d80 <__errno>
 801580e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8015840 <expf+0x60>
 8015812:	2322      	movs	r3, #34	; 0x22
 8015814:	6003      	str	r3, [r0, #0]
 8015816:	eeb0 0a48 	vmov.f32	s0, s16
 801581a:	ecbd 8b02 	vpop	{d8}
 801581e:	bd08      	pop	{r3, pc}
 8015820:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015844 <expf+0x64>
 8015824:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801582c:	d5f3      	bpl.n	8015816 <expf+0x36>
 801582e:	f7fd faa7 	bl	8012d80 <__errno>
 8015832:	2322      	movs	r3, #34	; 0x22
 8015834:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8015848 <expf+0x68>
 8015838:	6003      	str	r3, [r0, #0]
 801583a:	e7ec      	b.n	8015816 <expf+0x36>
 801583c:	42b17217 	.word	0x42b17217
 8015840:	7f800000 	.word	0x7f800000
 8015844:	c2cff1b5 	.word	0xc2cff1b5
 8015848:	00000000 	.word	0x00000000

0801584c <finitef>:
 801584c:	b082      	sub	sp, #8
 801584e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015852:	9801      	ldr	r0, [sp, #4]
 8015854:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015858:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801585c:	bfac      	ite	ge
 801585e:	2000      	movge	r0, #0
 8015860:	2001      	movlt	r0, #1
 8015862:	b002      	add	sp, #8
 8015864:	4770      	bx	lr
	...

08015868 <floor>:
 8015868:	ec51 0b10 	vmov	r0, r1, d0
 801586c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015874:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8015878:	2e13      	cmp	r6, #19
 801587a:	ee10 5a10 	vmov	r5, s0
 801587e:	ee10 8a10 	vmov	r8, s0
 8015882:	460c      	mov	r4, r1
 8015884:	dc31      	bgt.n	80158ea <floor+0x82>
 8015886:	2e00      	cmp	r6, #0
 8015888:	da14      	bge.n	80158b4 <floor+0x4c>
 801588a:	a333      	add	r3, pc, #204	; (adr r3, 8015958 <floor+0xf0>)
 801588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015890:	f7ea fcfc 	bl	800028c <__adddf3>
 8015894:	2200      	movs	r2, #0
 8015896:	2300      	movs	r3, #0
 8015898:	f7eb f93e 	bl	8000b18 <__aeabi_dcmpgt>
 801589c:	b138      	cbz	r0, 80158ae <floor+0x46>
 801589e:	2c00      	cmp	r4, #0
 80158a0:	da53      	bge.n	801594a <floor+0xe2>
 80158a2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80158a6:	4325      	orrs	r5, r4
 80158a8:	d052      	beq.n	8015950 <floor+0xe8>
 80158aa:	4c2d      	ldr	r4, [pc, #180]	; (8015960 <floor+0xf8>)
 80158ac:	2500      	movs	r5, #0
 80158ae:	4621      	mov	r1, r4
 80158b0:	4628      	mov	r0, r5
 80158b2:	e024      	b.n	80158fe <floor+0x96>
 80158b4:	4f2b      	ldr	r7, [pc, #172]	; (8015964 <floor+0xfc>)
 80158b6:	4137      	asrs	r7, r6
 80158b8:	ea01 0307 	and.w	r3, r1, r7
 80158bc:	4303      	orrs	r3, r0
 80158be:	d01e      	beq.n	80158fe <floor+0x96>
 80158c0:	a325      	add	r3, pc, #148	; (adr r3, 8015958 <floor+0xf0>)
 80158c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c6:	f7ea fce1 	bl	800028c <__adddf3>
 80158ca:	2200      	movs	r2, #0
 80158cc:	2300      	movs	r3, #0
 80158ce:	f7eb f923 	bl	8000b18 <__aeabi_dcmpgt>
 80158d2:	2800      	cmp	r0, #0
 80158d4:	d0eb      	beq.n	80158ae <floor+0x46>
 80158d6:	2c00      	cmp	r4, #0
 80158d8:	bfbe      	ittt	lt
 80158da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80158de:	4133      	asrlt	r3, r6
 80158e0:	18e4      	addlt	r4, r4, r3
 80158e2:	ea24 0407 	bic.w	r4, r4, r7
 80158e6:	2500      	movs	r5, #0
 80158e8:	e7e1      	b.n	80158ae <floor+0x46>
 80158ea:	2e33      	cmp	r6, #51	; 0x33
 80158ec:	dd0b      	ble.n	8015906 <floor+0x9e>
 80158ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80158f2:	d104      	bne.n	80158fe <floor+0x96>
 80158f4:	ee10 2a10 	vmov	r2, s0
 80158f8:	460b      	mov	r3, r1
 80158fa:	f7ea fcc7 	bl	800028c <__adddf3>
 80158fe:	ec41 0b10 	vmov	d0, r0, r1
 8015902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015906:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801590a:	f04f 37ff 	mov.w	r7, #4294967295
 801590e:	40df      	lsrs	r7, r3
 8015910:	4238      	tst	r0, r7
 8015912:	d0f4      	beq.n	80158fe <floor+0x96>
 8015914:	a310      	add	r3, pc, #64	; (adr r3, 8015958 <floor+0xf0>)
 8015916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801591a:	f7ea fcb7 	bl	800028c <__adddf3>
 801591e:	2200      	movs	r2, #0
 8015920:	2300      	movs	r3, #0
 8015922:	f7eb f8f9 	bl	8000b18 <__aeabi_dcmpgt>
 8015926:	2800      	cmp	r0, #0
 8015928:	d0c1      	beq.n	80158ae <floor+0x46>
 801592a:	2c00      	cmp	r4, #0
 801592c:	da0a      	bge.n	8015944 <floor+0xdc>
 801592e:	2e14      	cmp	r6, #20
 8015930:	d101      	bne.n	8015936 <floor+0xce>
 8015932:	3401      	adds	r4, #1
 8015934:	e006      	b.n	8015944 <floor+0xdc>
 8015936:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801593a:	2301      	movs	r3, #1
 801593c:	40b3      	lsls	r3, r6
 801593e:	441d      	add	r5, r3
 8015940:	45a8      	cmp	r8, r5
 8015942:	d8f6      	bhi.n	8015932 <floor+0xca>
 8015944:	ea25 0507 	bic.w	r5, r5, r7
 8015948:	e7b1      	b.n	80158ae <floor+0x46>
 801594a:	2500      	movs	r5, #0
 801594c:	462c      	mov	r4, r5
 801594e:	e7ae      	b.n	80158ae <floor+0x46>
 8015950:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015954:	e7ab      	b.n	80158ae <floor+0x46>
 8015956:	bf00      	nop
 8015958:	8800759c 	.word	0x8800759c
 801595c:	7e37e43c 	.word	0x7e37e43c
 8015960:	bff00000 	.word	0xbff00000
 8015964:	000fffff 	.word	0x000fffff

08015968 <__kernel_cos>:
 8015968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801596c:	ec57 6b10 	vmov	r6, r7, d0
 8015970:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015974:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015978:	ed8d 1b00 	vstr	d1, [sp]
 801597c:	da07      	bge.n	801598e <__kernel_cos+0x26>
 801597e:	ee10 0a10 	vmov	r0, s0
 8015982:	4639      	mov	r1, r7
 8015984:	f7eb f8e8 	bl	8000b58 <__aeabi_d2iz>
 8015988:	2800      	cmp	r0, #0
 801598a:	f000 8088 	beq.w	8015a9e <__kernel_cos+0x136>
 801598e:	4632      	mov	r2, r6
 8015990:	463b      	mov	r3, r7
 8015992:	4630      	mov	r0, r6
 8015994:	4639      	mov	r1, r7
 8015996:	f7ea fe2f 	bl	80005f8 <__aeabi_dmul>
 801599a:	4b51      	ldr	r3, [pc, #324]	; (8015ae0 <__kernel_cos+0x178>)
 801599c:	2200      	movs	r2, #0
 801599e:	4604      	mov	r4, r0
 80159a0:	460d      	mov	r5, r1
 80159a2:	f7ea fe29 	bl	80005f8 <__aeabi_dmul>
 80159a6:	a340      	add	r3, pc, #256	; (adr r3, 8015aa8 <__kernel_cos+0x140>)
 80159a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ac:	4682      	mov	sl, r0
 80159ae:	468b      	mov	fp, r1
 80159b0:	4620      	mov	r0, r4
 80159b2:	4629      	mov	r1, r5
 80159b4:	f7ea fe20 	bl	80005f8 <__aeabi_dmul>
 80159b8:	a33d      	add	r3, pc, #244	; (adr r3, 8015ab0 <__kernel_cos+0x148>)
 80159ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159be:	f7ea fc65 	bl	800028c <__adddf3>
 80159c2:	4622      	mov	r2, r4
 80159c4:	462b      	mov	r3, r5
 80159c6:	f7ea fe17 	bl	80005f8 <__aeabi_dmul>
 80159ca:	a33b      	add	r3, pc, #236	; (adr r3, 8015ab8 <__kernel_cos+0x150>)
 80159cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d0:	f7ea fc5a 	bl	8000288 <__aeabi_dsub>
 80159d4:	4622      	mov	r2, r4
 80159d6:	462b      	mov	r3, r5
 80159d8:	f7ea fe0e 	bl	80005f8 <__aeabi_dmul>
 80159dc:	a338      	add	r3, pc, #224	; (adr r3, 8015ac0 <__kernel_cos+0x158>)
 80159de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e2:	f7ea fc53 	bl	800028c <__adddf3>
 80159e6:	4622      	mov	r2, r4
 80159e8:	462b      	mov	r3, r5
 80159ea:	f7ea fe05 	bl	80005f8 <__aeabi_dmul>
 80159ee:	a336      	add	r3, pc, #216	; (adr r3, 8015ac8 <__kernel_cos+0x160>)
 80159f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f4:	f7ea fc48 	bl	8000288 <__aeabi_dsub>
 80159f8:	4622      	mov	r2, r4
 80159fa:	462b      	mov	r3, r5
 80159fc:	f7ea fdfc 	bl	80005f8 <__aeabi_dmul>
 8015a00:	a333      	add	r3, pc, #204	; (adr r3, 8015ad0 <__kernel_cos+0x168>)
 8015a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a06:	f7ea fc41 	bl	800028c <__adddf3>
 8015a0a:	4622      	mov	r2, r4
 8015a0c:	462b      	mov	r3, r5
 8015a0e:	f7ea fdf3 	bl	80005f8 <__aeabi_dmul>
 8015a12:	4622      	mov	r2, r4
 8015a14:	462b      	mov	r3, r5
 8015a16:	f7ea fdef 	bl	80005f8 <__aeabi_dmul>
 8015a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a1e:	4604      	mov	r4, r0
 8015a20:	460d      	mov	r5, r1
 8015a22:	4630      	mov	r0, r6
 8015a24:	4639      	mov	r1, r7
 8015a26:	f7ea fde7 	bl	80005f8 <__aeabi_dmul>
 8015a2a:	460b      	mov	r3, r1
 8015a2c:	4602      	mov	r2, r0
 8015a2e:	4629      	mov	r1, r5
 8015a30:	4620      	mov	r0, r4
 8015a32:	f7ea fc29 	bl	8000288 <__aeabi_dsub>
 8015a36:	4b2b      	ldr	r3, [pc, #172]	; (8015ae4 <__kernel_cos+0x17c>)
 8015a38:	4598      	cmp	r8, r3
 8015a3a:	4606      	mov	r6, r0
 8015a3c:	460f      	mov	r7, r1
 8015a3e:	dc10      	bgt.n	8015a62 <__kernel_cos+0xfa>
 8015a40:	4602      	mov	r2, r0
 8015a42:	460b      	mov	r3, r1
 8015a44:	4650      	mov	r0, sl
 8015a46:	4659      	mov	r1, fp
 8015a48:	f7ea fc1e 	bl	8000288 <__aeabi_dsub>
 8015a4c:	460b      	mov	r3, r1
 8015a4e:	4926      	ldr	r1, [pc, #152]	; (8015ae8 <__kernel_cos+0x180>)
 8015a50:	4602      	mov	r2, r0
 8015a52:	2000      	movs	r0, #0
 8015a54:	f7ea fc18 	bl	8000288 <__aeabi_dsub>
 8015a58:	ec41 0b10 	vmov	d0, r0, r1
 8015a5c:	b003      	add	sp, #12
 8015a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a62:	4b22      	ldr	r3, [pc, #136]	; (8015aec <__kernel_cos+0x184>)
 8015a64:	4920      	ldr	r1, [pc, #128]	; (8015ae8 <__kernel_cos+0x180>)
 8015a66:	4598      	cmp	r8, r3
 8015a68:	bfcc      	ite	gt
 8015a6a:	4d21      	ldrgt	r5, [pc, #132]	; (8015af0 <__kernel_cos+0x188>)
 8015a6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8015a70:	2400      	movs	r4, #0
 8015a72:	4622      	mov	r2, r4
 8015a74:	462b      	mov	r3, r5
 8015a76:	2000      	movs	r0, #0
 8015a78:	f7ea fc06 	bl	8000288 <__aeabi_dsub>
 8015a7c:	4622      	mov	r2, r4
 8015a7e:	4680      	mov	r8, r0
 8015a80:	4689      	mov	r9, r1
 8015a82:	462b      	mov	r3, r5
 8015a84:	4650      	mov	r0, sl
 8015a86:	4659      	mov	r1, fp
 8015a88:	f7ea fbfe 	bl	8000288 <__aeabi_dsub>
 8015a8c:	4632      	mov	r2, r6
 8015a8e:	463b      	mov	r3, r7
 8015a90:	f7ea fbfa 	bl	8000288 <__aeabi_dsub>
 8015a94:	4602      	mov	r2, r0
 8015a96:	460b      	mov	r3, r1
 8015a98:	4640      	mov	r0, r8
 8015a9a:	4649      	mov	r1, r9
 8015a9c:	e7da      	b.n	8015a54 <__kernel_cos+0xec>
 8015a9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015ad8 <__kernel_cos+0x170>
 8015aa2:	e7db      	b.n	8015a5c <__kernel_cos+0xf4>
 8015aa4:	f3af 8000 	nop.w
 8015aa8:	be8838d4 	.word	0xbe8838d4
 8015aac:	bda8fae9 	.word	0xbda8fae9
 8015ab0:	bdb4b1c4 	.word	0xbdb4b1c4
 8015ab4:	3e21ee9e 	.word	0x3e21ee9e
 8015ab8:	809c52ad 	.word	0x809c52ad
 8015abc:	3e927e4f 	.word	0x3e927e4f
 8015ac0:	19cb1590 	.word	0x19cb1590
 8015ac4:	3efa01a0 	.word	0x3efa01a0
 8015ac8:	16c15177 	.word	0x16c15177
 8015acc:	3f56c16c 	.word	0x3f56c16c
 8015ad0:	5555554c 	.word	0x5555554c
 8015ad4:	3fa55555 	.word	0x3fa55555
 8015ad8:	00000000 	.word	0x00000000
 8015adc:	3ff00000 	.word	0x3ff00000
 8015ae0:	3fe00000 	.word	0x3fe00000
 8015ae4:	3fd33332 	.word	0x3fd33332
 8015ae8:	3ff00000 	.word	0x3ff00000
 8015aec:	3fe90000 	.word	0x3fe90000
 8015af0:	3fd20000 	.word	0x3fd20000
 8015af4:	00000000 	.word	0x00000000

08015af8 <__kernel_sin>:
 8015af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015afc:	ed2d 8b04 	vpush	{d8-d9}
 8015b00:	eeb0 8a41 	vmov.f32	s16, s2
 8015b04:	eef0 8a61 	vmov.f32	s17, s3
 8015b08:	ec55 4b10 	vmov	r4, r5, d0
 8015b0c:	b083      	sub	sp, #12
 8015b0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015b12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015b16:	9001      	str	r0, [sp, #4]
 8015b18:	da06      	bge.n	8015b28 <__kernel_sin+0x30>
 8015b1a:	ee10 0a10 	vmov	r0, s0
 8015b1e:	4629      	mov	r1, r5
 8015b20:	f7eb f81a 	bl	8000b58 <__aeabi_d2iz>
 8015b24:	2800      	cmp	r0, #0
 8015b26:	d051      	beq.n	8015bcc <__kernel_sin+0xd4>
 8015b28:	4622      	mov	r2, r4
 8015b2a:	462b      	mov	r3, r5
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	4629      	mov	r1, r5
 8015b30:	f7ea fd62 	bl	80005f8 <__aeabi_dmul>
 8015b34:	4682      	mov	sl, r0
 8015b36:	468b      	mov	fp, r1
 8015b38:	4602      	mov	r2, r0
 8015b3a:	460b      	mov	r3, r1
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	4629      	mov	r1, r5
 8015b40:	f7ea fd5a 	bl	80005f8 <__aeabi_dmul>
 8015b44:	a341      	add	r3, pc, #260	; (adr r3, 8015c4c <__kernel_sin+0x154>)
 8015b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b4a:	4680      	mov	r8, r0
 8015b4c:	4689      	mov	r9, r1
 8015b4e:	4650      	mov	r0, sl
 8015b50:	4659      	mov	r1, fp
 8015b52:	f7ea fd51 	bl	80005f8 <__aeabi_dmul>
 8015b56:	a33f      	add	r3, pc, #252	; (adr r3, 8015c54 <__kernel_sin+0x15c>)
 8015b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5c:	f7ea fb94 	bl	8000288 <__aeabi_dsub>
 8015b60:	4652      	mov	r2, sl
 8015b62:	465b      	mov	r3, fp
 8015b64:	f7ea fd48 	bl	80005f8 <__aeabi_dmul>
 8015b68:	a33c      	add	r3, pc, #240	; (adr r3, 8015c5c <__kernel_sin+0x164>)
 8015b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6e:	f7ea fb8d 	bl	800028c <__adddf3>
 8015b72:	4652      	mov	r2, sl
 8015b74:	465b      	mov	r3, fp
 8015b76:	f7ea fd3f 	bl	80005f8 <__aeabi_dmul>
 8015b7a:	a33a      	add	r3, pc, #232	; (adr r3, 8015c64 <__kernel_sin+0x16c>)
 8015b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b80:	f7ea fb82 	bl	8000288 <__aeabi_dsub>
 8015b84:	4652      	mov	r2, sl
 8015b86:	465b      	mov	r3, fp
 8015b88:	f7ea fd36 	bl	80005f8 <__aeabi_dmul>
 8015b8c:	a337      	add	r3, pc, #220	; (adr r3, 8015c6c <__kernel_sin+0x174>)
 8015b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b92:	f7ea fb7b 	bl	800028c <__adddf3>
 8015b96:	9b01      	ldr	r3, [sp, #4]
 8015b98:	4606      	mov	r6, r0
 8015b9a:	460f      	mov	r7, r1
 8015b9c:	b9eb      	cbnz	r3, 8015bda <__kernel_sin+0xe2>
 8015b9e:	4602      	mov	r2, r0
 8015ba0:	460b      	mov	r3, r1
 8015ba2:	4650      	mov	r0, sl
 8015ba4:	4659      	mov	r1, fp
 8015ba6:	f7ea fd27 	bl	80005f8 <__aeabi_dmul>
 8015baa:	a325      	add	r3, pc, #148	; (adr r3, 8015c40 <__kernel_sin+0x148>)
 8015bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb0:	f7ea fb6a 	bl	8000288 <__aeabi_dsub>
 8015bb4:	4642      	mov	r2, r8
 8015bb6:	464b      	mov	r3, r9
 8015bb8:	f7ea fd1e 	bl	80005f8 <__aeabi_dmul>
 8015bbc:	4602      	mov	r2, r0
 8015bbe:	460b      	mov	r3, r1
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	4629      	mov	r1, r5
 8015bc4:	f7ea fb62 	bl	800028c <__adddf3>
 8015bc8:	4604      	mov	r4, r0
 8015bca:	460d      	mov	r5, r1
 8015bcc:	ec45 4b10 	vmov	d0, r4, r5
 8015bd0:	b003      	add	sp, #12
 8015bd2:	ecbd 8b04 	vpop	{d8-d9}
 8015bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bda:	4b1b      	ldr	r3, [pc, #108]	; (8015c48 <__kernel_sin+0x150>)
 8015bdc:	ec51 0b18 	vmov	r0, r1, d8
 8015be0:	2200      	movs	r2, #0
 8015be2:	f7ea fd09 	bl	80005f8 <__aeabi_dmul>
 8015be6:	4632      	mov	r2, r6
 8015be8:	ec41 0b19 	vmov	d9, r0, r1
 8015bec:	463b      	mov	r3, r7
 8015bee:	4640      	mov	r0, r8
 8015bf0:	4649      	mov	r1, r9
 8015bf2:	f7ea fd01 	bl	80005f8 <__aeabi_dmul>
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	460b      	mov	r3, r1
 8015bfa:	ec51 0b19 	vmov	r0, r1, d9
 8015bfe:	f7ea fb43 	bl	8000288 <__aeabi_dsub>
 8015c02:	4652      	mov	r2, sl
 8015c04:	465b      	mov	r3, fp
 8015c06:	f7ea fcf7 	bl	80005f8 <__aeabi_dmul>
 8015c0a:	ec53 2b18 	vmov	r2, r3, d8
 8015c0e:	f7ea fb3b 	bl	8000288 <__aeabi_dsub>
 8015c12:	a30b      	add	r3, pc, #44	; (adr r3, 8015c40 <__kernel_sin+0x148>)
 8015c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c18:	4606      	mov	r6, r0
 8015c1a:	460f      	mov	r7, r1
 8015c1c:	4640      	mov	r0, r8
 8015c1e:	4649      	mov	r1, r9
 8015c20:	f7ea fcea 	bl	80005f8 <__aeabi_dmul>
 8015c24:	4602      	mov	r2, r0
 8015c26:	460b      	mov	r3, r1
 8015c28:	4630      	mov	r0, r6
 8015c2a:	4639      	mov	r1, r7
 8015c2c:	f7ea fb2e 	bl	800028c <__adddf3>
 8015c30:	4602      	mov	r2, r0
 8015c32:	460b      	mov	r3, r1
 8015c34:	4620      	mov	r0, r4
 8015c36:	4629      	mov	r1, r5
 8015c38:	f7ea fb26 	bl	8000288 <__aeabi_dsub>
 8015c3c:	e7c4      	b.n	8015bc8 <__kernel_sin+0xd0>
 8015c3e:	bf00      	nop
 8015c40:	55555549 	.word	0x55555549
 8015c44:	3fc55555 	.word	0x3fc55555
 8015c48:	3fe00000 	.word	0x3fe00000
 8015c4c:	5acfd57c 	.word	0x5acfd57c
 8015c50:	3de5d93a 	.word	0x3de5d93a
 8015c54:	8a2b9ceb 	.word	0x8a2b9ceb
 8015c58:	3e5ae5e6 	.word	0x3e5ae5e6
 8015c5c:	57b1fe7d 	.word	0x57b1fe7d
 8015c60:	3ec71de3 	.word	0x3ec71de3
 8015c64:	19c161d5 	.word	0x19c161d5
 8015c68:	3f2a01a0 	.word	0x3f2a01a0
 8015c6c:	1110f8a6 	.word	0x1110f8a6
 8015c70:	3f811111 	.word	0x3f811111
 8015c74:	00000000 	.word	0x00000000

08015c78 <__ieee754_rem_pio2>:
 8015c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c7c:	ed2d 8b02 	vpush	{d8}
 8015c80:	ec55 4b10 	vmov	r4, r5, d0
 8015c84:	4bca      	ldr	r3, [pc, #808]	; (8015fb0 <__ieee754_rem_pio2+0x338>)
 8015c86:	b08b      	sub	sp, #44	; 0x2c
 8015c88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8015c8c:	4598      	cmp	r8, r3
 8015c8e:	4682      	mov	sl, r0
 8015c90:	9502      	str	r5, [sp, #8]
 8015c92:	dc08      	bgt.n	8015ca6 <__ieee754_rem_pio2+0x2e>
 8015c94:	2200      	movs	r2, #0
 8015c96:	2300      	movs	r3, #0
 8015c98:	ed80 0b00 	vstr	d0, [r0]
 8015c9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015ca0:	f04f 0b00 	mov.w	fp, #0
 8015ca4:	e028      	b.n	8015cf8 <__ieee754_rem_pio2+0x80>
 8015ca6:	4bc3      	ldr	r3, [pc, #780]	; (8015fb4 <__ieee754_rem_pio2+0x33c>)
 8015ca8:	4598      	cmp	r8, r3
 8015caa:	dc78      	bgt.n	8015d9e <__ieee754_rem_pio2+0x126>
 8015cac:	9b02      	ldr	r3, [sp, #8]
 8015cae:	4ec2      	ldr	r6, [pc, #776]	; (8015fb8 <__ieee754_rem_pio2+0x340>)
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	ee10 0a10 	vmov	r0, s0
 8015cb6:	a3b0      	add	r3, pc, #704	; (adr r3, 8015f78 <__ieee754_rem_pio2+0x300>)
 8015cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cbc:	4629      	mov	r1, r5
 8015cbe:	dd39      	ble.n	8015d34 <__ieee754_rem_pio2+0xbc>
 8015cc0:	f7ea fae2 	bl	8000288 <__aeabi_dsub>
 8015cc4:	45b0      	cmp	r8, r6
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	460d      	mov	r5, r1
 8015cca:	d01b      	beq.n	8015d04 <__ieee754_rem_pio2+0x8c>
 8015ccc:	a3ac      	add	r3, pc, #688	; (adr r3, 8015f80 <__ieee754_rem_pio2+0x308>)
 8015cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd2:	f7ea fad9 	bl	8000288 <__aeabi_dsub>
 8015cd6:	4602      	mov	r2, r0
 8015cd8:	460b      	mov	r3, r1
 8015cda:	e9ca 2300 	strd	r2, r3, [sl]
 8015cde:	4620      	mov	r0, r4
 8015ce0:	4629      	mov	r1, r5
 8015ce2:	f7ea fad1 	bl	8000288 <__aeabi_dsub>
 8015ce6:	a3a6      	add	r3, pc, #664	; (adr r3, 8015f80 <__ieee754_rem_pio2+0x308>)
 8015ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cec:	f7ea facc 	bl	8000288 <__aeabi_dsub>
 8015cf0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015cf4:	f04f 0b01 	mov.w	fp, #1
 8015cf8:	4658      	mov	r0, fp
 8015cfa:	b00b      	add	sp, #44	; 0x2c
 8015cfc:	ecbd 8b02 	vpop	{d8}
 8015d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d04:	a3a0      	add	r3, pc, #640	; (adr r3, 8015f88 <__ieee754_rem_pio2+0x310>)
 8015d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d0a:	f7ea fabd 	bl	8000288 <__aeabi_dsub>
 8015d0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8015f90 <__ieee754_rem_pio2+0x318>)
 8015d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d14:	4604      	mov	r4, r0
 8015d16:	460d      	mov	r5, r1
 8015d18:	f7ea fab6 	bl	8000288 <__aeabi_dsub>
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	460b      	mov	r3, r1
 8015d20:	e9ca 2300 	strd	r2, r3, [sl]
 8015d24:	4620      	mov	r0, r4
 8015d26:	4629      	mov	r1, r5
 8015d28:	f7ea faae 	bl	8000288 <__aeabi_dsub>
 8015d2c:	a398      	add	r3, pc, #608	; (adr r3, 8015f90 <__ieee754_rem_pio2+0x318>)
 8015d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d32:	e7db      	b.n	8015cec <__ieee754_rem_pio2+0x74>
 8015d34:	f7ea faaa 	bl	800028c <__adddf3>
 8015d38:	45b0      	cmp	r8, r6
 8015d3a:	4604      	mov	r4, r0
 8015d3c:	460d      	mov	r5, r1
 8015d3e:	d016      	beq.n	8015d6e <__ieee754_rem_pio2+0xf6>
 8015d40:	a38f      	add	r3, pc, #572	; (adr r3, 8015f80 <__ieee754_rem_pio2+0x308>)
 8015d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d46:	f7ea faa1 	bl	800028c <__adddf3>
 8015d4a:	4602      	mov	r2, r0
 8015d4c:	460b      	mov	r3, r1
 8015d4e:	e9ca 2300 	strd	r2, r3, [sl]
 8015d52:	4620      	mov	r0, r4
 8015d54:	4629      	mov	r1, r5
 8015d56:	f7ea fa97 	bl	8000288 <__aeabi_dsub>
 8015d5a:	a389      	add	r3, pc, #548	; (adr r3, 8015f80 <__ieee754_rem_pio2+0x308>)
 8015d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d60:	f7ea fa94 	bl	800028c <__adddf3>
 8015d64:	f04f 3bff 	mov.w	fp, #4294967295
 8015d68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015d6c:	e7c4      	b.n	8015cf8 <__ieee754_rem_pio2+0x80>
 8015d6e:	a386      	add	r3, pc, #536	; (adr r3, 8015f88 <__ieee754_rem_pio2+0x310>)
 8015d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d74:	f7ea fa8a 	bl	800028c <__adddf3>
 8015d78:	a385      	add	r3, pc, #532	; (adr r3, 8015f90 <__ieee754_rem_pio2+0x318>)
 8015d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d7e:	4604      	mov	r4, r0
 8015d80:	460d      	mov	r5, r1
 8015d82:	f7ea fa83 	bl	800028c <__adddf3>
 8015d86:	4602      	mov	r2, r0
 8015d88:	460b      	mov	r3, r1
 8015d8a:	e9ca 2300 	strd	r2, r3, [sl]
 8015d8e:	4620      	mov	r0, r4
 8015d90:	4629      	mov	r1, r5
 8015d92:	f7ea fa79 	bl	8000288 <__aeabi_dsub>
 8015d96:	a37e      	add	r3, pc, #504	; (adr r3, 8015f90 <__ieee754_rem_pio2+0x318>)
 8015d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d9c:	e7e0      	b.n	8015d60 <__ieee754_rem_pio2+0xe8>
 8015d9e:	4b87      	ldr	r3, [pc, #540]	; (8015fbc <__ieee754_rem_pio2+0x344>)
 8015da0:	4598      	cmp	r8, r3
 8015da2:	f300 80d8 	bgt.w	8015f56 <__ieee754_rem_pio2+0x2de>
 8015da6:	f000 f96d 	bl	8016084 <fabs>
 8015daa:	ec55 4b10 	vmov	r4, r5, d0
 8015dae:	ee10 0a10 	vmov	r0, s0
 8015db2:	a379      	add	r3, pc, #484	; (adr r3, 8015f98 <__ieee754_rem_pio2+0x320>)
 8015db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015db8:	4629      	mov	r1, r5
 8015dba:	f7ea fc1d 	bl	80005f8 <__aeabi_dmul>
 8015dbe:	4b80      	ldr	r3, [pc, #512]	; (8015fc0 <__ieee754_rem_pio2+0x348>)
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	f7ea fa63 	bl	800028c <__adddf3>
 8015dc6:	f7ea fec7 	bl	8000b58 <__aeabi_d2iz>
 8015dca:	4683      	mov	fp, r0
 8015dcc:	f7ea fbaa 	bl	8000524 <__aeabi_i2d>
 8015dd0:	4602      	mov	r2, r0
 8015dd2:	460b      	mov	r3, r1
 8015dd4:	ec43 2b18 	vmov	d8, r2, r3
 8015dd8:	a367      	add	r3, pc, #412	; (adr r3, 8015f78 <__ieee754_rem_pio2+0x300>)
 8015dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dde:	f7ea fc0b 	bl	80005f8 <__aeabi_dmul>
 8015de2:	4602      	mov	r2, r0
 8015de4:	460b      	mov	r3, r1
 8015de6:	4620      	mov	r0, r4
 8015de8:	4629      	mov	r1, r5
 8015dea:	f7ea fa4d 	bl	8000288 <__aeabi_dsub>
 8015dee:	a364      	add	r3, pc, #400	; (adr r3, 8015f80 <__ieee754_rem_pio2+0x308>)
 8015df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df4:	4606      	mov	r6, r0
 8015df6:	460f      	mov	r7, r1
 8015df8:	ec51 0b18 	vmov	r0, r1, d8
 8015dfc:	f7ea fbfc 	bl	80005f8 <__aeabi_dmul>
 8015e00:	f1bb 0f1f 	cmp.w	fp, #31
 8015e04:	4604      	mov	r4, r0
 8015e06:	460d      	mov	r5, r1
 8015e08:	dc0d      	bgt.n	8015e26 <__ieee754_rem_pio2+0x1ae>
 8015e0a:	4b6e      	ldr	r3, [pc, #440]	; (8015fc4 <__ieee754_rem_pio2+0x34c>)
 8015e0c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8015e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e14:	4543      	cmp	r3, r8
 8015e16:	d006      	beq.n	8015e26 <__ieee754_rem_pio2+0x1ae>
 8015e18:	4622      	mov	r2, r4
 8015e1a:	462b      	mov	r3, r5
 8015e1c:	4630      	mov	r0, r6
 8015e1e:	4639      	mov	r1, r7
 8015e20:	f7ea fa32 	bl	8000288 <__aeabi_dsub>
 8015e24:	e00e      	b.n	8015e44 <__ieee754_rem_pio2+0x1cc>
 8015e26:	462b      	mov	r3, r5
 8015e28:	4622      	mov	r2, r4
 8015e2a:	4630      	mov	r0, r6
 8015e2c:	4639      	mov	r1, r7
 8015e2e:	f7ea fa2b 	bl	8000288 <__aeabi_dsub>
 8015e32:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015e36:	9303      	str	r3, [sp, #12]
 8015e38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015e3c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8015e40:	2b10      	cmp	r3, #16
 8015e42:	dc02      	bgt.n	8015e4a <__ieee754_rem_pio2+0x1d2>
 8015e44:	e9ca 0100 	strd	r0, r1, [sl]
 8015e48:	e039      	b.n	8015ebe <__ieee754_rem_pio2+0x246>
 8015e4a:	a34f      	add	r3, pc, #316	; (adr r3, 8015f88 <__ieee754_rem_pio2+0x310>)
 8015e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e50:	ec51 0b18 	vmov	r0, r1, d8
 8015e54:	f7ea fbd0 	bl	80005f8 <__aeabi_dmul>
 8015e58:	4604      	mov	r4, r0
 8015e5a:	460d      	mov	r5, r1
 8015e5c:	4602      	mov	r2, r0
 8015e5e:	460b      	mov	r3, r1
 8015e60:	4630      	mov	r0, r6
 8015e62:	4639      	mov	r1, r7
 8015e64:	f7ea fa10 	bl	8000288 <__aeabi_dsub>
 8015e68:	4602      	mov	r2, r0
 8015e6a:	460b      	mov	r3, r1
 8015e6c:	4680      	mov	r8, r0
 8015e6e:	4689      	mov	r9, r1
 8015e70:	4630      	mov	r0, r6
 8015e72:	4639      	mov	r1, r7
 8015e74:	f7ea fa08 	bl	8000288 <__aeabi_dsub>
 8015e78:	4622      	mov	r2, r4
 8015e7a:	462b      	mov	r3, r5
 8015e7c:	f7ea fa04 	bl	8000288 <__aeabi_dsub>
 8015e80:	a343      	add	r3, pc, #268	; (adr r3, 8015f90 <__ieee754_rem_pio2+0x318>)
 8015e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e86:	4604      	mov	r4, r0
 8015e88:	460d      	mov	r5, r1
 8015e8a:	ec51 0b18 	vmov	r0, r1, d8
 8015e8e:	f7ea fbb3 	bl	80005f8 <__aeabi_dmul>
 8015e92:	4622      	mov	r2, r4
 8015e94:	462b      	mov	r3, r5
 8015e96:	f7ea f9f7 	bl	8000288 <__aeabi_dsub>
 8015e9a:	4602      	mov	r2, r0
 8015e9c:	460b      	mov	r3, r1
 8015e9e:	4604      	mov	r4, r0
 8015ea0:	460d      	mov	r5, r1
 8015ea2:	4640      	mov	r0, r8
 8015ea4:	4649      	mov	r1, r9
 8015ea6:	f7ea f9ef 	bl	8000288 <__aeabi_dsub>
 8015eaa:	9a03      	ldr	r2, [sp, #12]
 8015eac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015eb0:	1ad3      	subs	r3, r2, r3
 8015eb2:	2b31      	cmp	r3, #49	; 0x31
 8015eb4:	dc24      	bgt.n	8015f00 <__ieee754_rem_pio2+0x288>
 8015eb6:	e9ca 0100 	strd	r0, r1, [sl]
 8015eba:	4646      	mov	r6, r8
 8015ebc:	464f      	mov	r7, r9
 8015ebe:	e9da 8900 	ldrd	r8, r9, [sl]
 8015ec2:	4630      	mov	r0, r6
 8015ec4:	4642      	mov	r2, r8
 8015ec6:	464b      	mov	r3, r9
 8015ec8:	4639      	mov	r1, r7
 8015eca:	f7ea f9dd 	bl	8000288 <__aeabi_dsub>
 8015ece:	462b      	mov	r3, r5
 8015ed0:	4622      	mov	r2, r4
 8015ed2:	f7ea f9d9 	bl	8000288 <__aeabi_dsub>
 8015ed6:	9b02      	ldr	r3, [sp, #8]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015ede:	f6bf af0b 	bge.w	8015cf8 <__ieee754_rem_pio2+0x80>
 8015ee2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015ee6:	f8ca 3004 	str.w	r3, [sl, #4]
 8015eea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015eee:	f8ca 8000 	str.w	r8, [sl]
 8015ef2:	f8ca 0008 	str.w	r0, [sl, #8]
 8015ef6:	f8ca 300c 	str.w	r3, [sl, #12]
 8015efa:	f1cb 0b00 	rsb	fp, fp, #0
 8015efe:	e6fb      	b.n	8015cf8 <__ieee754_rem_pio2+0x80>
 8015f00:	a327      	add	r3, pc, #156	; (adr r3, 8015fa0 <__ieee754_rem_pio2+0x328>)
 8015f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f06:	ec51 0b18 	vmov	r0, r1, d8
 8015f0a:	f7ea fb75 	bl	80005f8 <__aeabi_dmul>
 8015f0e:	4604      	mov	r4, r0
 8015f10:	460d      	mov	r5, r1
 8015f12:	4602      	mov	r2, r0
 8015f14:	460b      	mov	r3, r1
 8015f16:	4640      	mov	r0, r8
 8015f18:	4649      	mov	r1, r9
 8015f1a:	f7ea f9b5 	bl	8000288 <__aeabi_dsub>
 8015f1e:	4602      	mov	r2, r0
 8015f20:	460b      	mov	r3, r1
 8015f22:	4606      	mov	r6, r0
 8015f24:	460f      	mov	r7, r1
 8015f26:	4640      	mov	r0, r8
 8015f28:	4649      	mov	r1, r9
 8015f2a:	f7ea f9ad 	bl	8000288 <__aeabi_dsub>
 8015f2e:	4622      	mov	r2, r4
 8015f30:	462b      	mov	r3, r5
 8015f32:	f7ea f9a9 	bl	8000288 <__aeabi_dsub>
 8015f36:	a31c      	add	r3, pc, #112	; (adr r3, 8015fa8 <__ieee754_rem_pio2+0x330>)
 8015f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f3c:	4604      	mov	r4, r0
 8015f3e:	460d      	mov	r5, r1
 8015f40:	ec51 0b18 	vmov	r0, r1, d8
 8015f44:	f7ea fb58 	bl	80005f8 <__aeabi_dmul>
 8015f48:	4622      	mov	r2, r4
 8015f4a:	462b      	mov	r3, r5
 8015f4c:	f7ea f99c 	bl	8000288 <__aeabi_dsub>
 8015f50:	4604      	mov	r4, r0
 8015f52:	460d      	mov	r5, r1
 8015f54:	e760      	b.n	8015e18 <__ieee754_rem_pio2+0x1a0>
 8015f56:	4b1c      	ldr	r3, [pc, #112]	; (8015fc8 <__ieee754_rem_pio2+0x350>)
 8015f58:	4598      	cmp	r8, r3
 8015f5a:	dd37      	ble.n	8015fcc <__ieee754_rem_pio2+0x354>
 8015f5c:	ee10 2a10 	vmov	r2, s0
 8015f60:	462b      	mov	r3, r5
 8015f62:	4620      	mov	r0, r4
 8015f64:	4629      	mov	r1, r5
 8015f66:	f7ea f98f 	bl	8000288 <__aeabi_dsub>
 8015f6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015f6e:	e9ca 0100 	strd	r0, r1, [sl]
 8015f72:	e695      	b.n	8015ca0 <__ieee754_rem_pio2+0x28>
 8015f74:	f3af 8000 	nop.w
 8015f78:	54400000 	.word	0x54400000
 8015f7c:	3ff921fb 	.word	0x3ff921fb
 8015f80:	1a626331 	.word	0x1a626331
 8015f84:	3dd0b461 	.word	0x3dd0b461
 8015f88:	1a600000 	.word	0x1a600000
 8015f8c:	3dd0b461 	.word	0x3dd0b461
 8015f90:	2e037073 	.word	0x2e037073
 8015f94:	3ba3198a 	.word	0x3ba3198a
 8015f98:	6dc9c883 	.word	0x6dc9c883
 8015f9c:	3fe45f30 	.word	0x3fe45f30
 8015fa0:	2e000000 	.word	0x2e000000
 8015fa4:	3ba3198a 	.word	0x3ba3198a
 8015fa8:	252049c1 	.word	0x252049c1
 8015fac:	397b839a 	.word	0x397b839a
 8015fb0:	3fe921fb 	.word	0x3fe921fb
 8015fb4:	4002d97b 	.word	0x4002d97b
 8015fb8:	3ff921fb 	.word	0x3ff921fb
 8015fbc:	413921fb 	.word	0x413921fb
 8015fc0:	3fe00000 	.word	0x3fe00000
 8015fc4:	08018d10 	.word	0x08018d10
 8015fc8:	7fefffff 	.word	0x7fefffff
 8015fcc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8015fd0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8015fd4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8015fd8:	4620      	mov	r0, r4
 8015fda:	460d      	mov	r5, r1
 8015fdc:	f7ea fdbc 	bl	8000b58 <__aeabi_d2iz>
 8015fe0:	f7ea faa0 	bl	8000524 <__aeabi_i2d>
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	460b      	mov	r3, r1
 8015fe8:	4620      	mov	r0, r4
 8015fea:	4629      	mov	r1, r5
 8015fec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015ff0:	f7ea f94a 	bl	8000288 <__aeabi_dsub>
 8015ff4:	4b21      	ldr	r3, [pc, #132]	; (801607c <__ieee754_rem_pio2+0x404>)
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	f7ea fafe 	bl	80005f8 <__aeabi_dmul>
 8015ffc:	460d      	mov	r5, r1
 8015ffe:	4604      	mov	r4, r0
 8016000:	f7ea fdaa 	bl	8000b58 <__aeabi_d2iz>
 8016004:	f7ea fa8e 	bl	8000524 <__aeabi_i2d>
 8016008:	4602      	mov	r2, r0
 801600a:	460b      	mov	r3, r1
 801600c:	4620      	mov	r0, r4
 801600e:	4629      	mov	r1, r5
 8016010:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016014:	f7ea f938 	bl	8000288 <__aeabi_dsub>
 8016018:	4b18      	ldr	r3, [pc, #96]	; (801607c <__ieee754_rem_pio2+0x404>)
 801601a:	2200      	movs	r2, #0
 801601c:	f7ea faec 	bl	80005f8 <__aeabi_dmul>
 8016020:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016024:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8016028:	2703      	movs	r7, #3
 801602a:	2400      	movs	r4, #0
 801602c:	2500      	movs	r5, #0
 801602e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8016032:	4622      	mov	r2, r4
 8016034:	462b      	mov	r3, r5
 8016036:	46b9      	mov	r9, r7
 8016038:	3f01      	subs	r7, #1
 801603a:	f7ea fd45 	bl	8000ac8 <__aeabi_dcmpeq>
 801603e:	2800      	cmp	r0, #0
 8016040:	d1f5      	bne.n	801602e <__ieee754_rem_pio2+0x3b6>
 8016042:	4b0f      	ldr	r3, [pc, #60]	; (8016080 <__ieee754_rem_pio2+0x408>)
 8016044:	9301      	str	r3, [sp, #4]
 8016046:	2302      	movs	r3, #2
 8016048:	9300      	str	r3, [sp, #0]
 801604a:	4632      	mov	r2, r6
 801604c:	464b      	mov	r3, r9
 801604e:	4651      	mov	r1, sl
 8016050:	a804      	add	r0, sp, #16
 8016052:	f000 f911 	bl	8016278 <__kernel_rem_pio2>
 8016056:	9b02      	ldr	r3, [sp, #8]
 8016058:	2b00      	cmp	r3, #0
 801605a:	4683      	mov	fp, r0
 801605c:	f6bf ae4c 	bge.w	8015cf8 <__ieee754_rem_pio2+0x80>
 8016060:	e9da 2100 	ldrd	r2, r1, [sl]
 8016064:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016068:	e9ca 2300 	strd	r2, r3, [sl]
 801606c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8016070:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016074:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8016078:	e73f      	b.n	8015efa <__ieee754_rem_pio2+0x282>
 801607a:	bf00      	nop
 801607c:	41700000 	.word	0x41700000
 8016080:	08018d90 	.word	0x08018d90

08016084 <fabs>:
 8016084:	ec51 0b10 	vmov	r0, r1, d0
 8016088:	ee10 2a10 	vmov	r2, s0
 801608c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016090:	ec43 2b10 	vmov	d0, r2, r3
 8016094:	4770      	bx	lr
	...

08016098 <__ieee754_expf>:
 8016098:	ee10 2a10 	vmov	r2, s0
 801609c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80160a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80160a4:	d902      	bls.n	80160ac <__ieee754_expf+0x14>
 80160a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80160aa:	4770      	bx	lr
 80160ac:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80160b0:	d106      	bne.n	80160c0 <__ieee754_expf+0x28>
 80160b2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80161ec <__ieee754_expf+0x154>
 80160b6:	2900      	cmp	r1, #0
 80160b8:	bf18      	it	ne
 80160ba:	eeb0 0a67 	vmovne.f32	s0, s15
 80160be:	4770      	bx	lr
 80160c0:	484b      	ldr	r0, [pc, #300]	; (80161f0 <__ieee754_expf+0x158>)
 80160c2:	4282      	cmp	r2, r0
 80160c4:	dd02      	ble.n	80160cc <__ieee754_expf+0x34>
 80160c6:	2000      	movs	r0, #0
 80160c8:	f000 b8d0 	b.w	801626c <__math_oflowf>
 80160cc:	2a00      	cmp	r2, #0
 80160ce:	da05      	bge.n	80160dc <__ieee754_expf+0x44>
 80160d0:	4a48      	ldr	r2, [pc, #288]	; (80161f4 <__ieee754_expf+0x15c>)
 80160d2:	4293      	cmp	r3, r2
 80160d4:	d902      	bls.n	80160dc <__ieee754_expf+0x44>
 80160d6:	2000      	movs	r0, #0
 80160d8:	f000 b8c2 	b.w	8016260 <__math_uflowf>
 80160dc:	4a46      	ldr	r2, [pc, #280]	; (80161f8 <__ieee754_expf+0x160>)
 80160de:	4293      	cmp	r3, r2
 80160e0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80160e4:	d952      	bls.n	801618c <__ieee754_expf+0xf4>
 80160e6:	4a45      	ldr	r2, [pc, #276]	; (80161fc <__ieee754_expf+0x164>)
 80160e8:	4293      	cmp	r3, r2
 80160ea:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80160ee:	d834      	bhi.n	801615a <__ieee754_expf+0xc2>
 80160f0:	4b43      	ldr	r3, [pc, #268]	; (8016200 <__ieee754_expf+0x168>)
 80160f2:	4413      	add	r3, r2
 80160f4:	ed93 7a00 	vldr	s14, [r3]
 80160f8:	4b42      	ldr	r3, [pc, #264]	; (8016204 <__ieee754_expf+0x16c>)
 80160fa:	4413      	add	r3, r2
 80160fc:	ee30 7a47 	vsub.f32	s14, s0, s14
 8016100:	f1c1 0201 	rsb	r2, r1, #1
 8016104:	edd3 7a00 	vldr	s15, [r3]
 8016108:	1a52      	subs	r2, r2, r1
 801610a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801610e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8016112:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016208 <__ieee754_expf+0x170>
 8016116:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801620c <__ieee754_expf+0x174>
 801611a:	eee6 6a05 	vfma.f32	s13, s12, s10
 801611e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8016210 <__ieee754_expf+0x178>
 8016122:	eea6 5a86 	vfma.f32	s10, s13, s12
 8016126:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8016214 <__ieee754_expf+0x17c>
 801612a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801612e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8016218 <__ieee754_expf+0x180>
 8016132:	eea6 5a86 	vfma.f32	s10, s13, s12
 8016136:	eef0 6a40 	vmov.f32	s13, s0
 801613a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801613e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8016142:	ee20 5a26 	vmul.f32	s10, s0, s13
 8016146:	bb92      	cbnz	r2, 80161ae <__ieee754_expf+0x116>
 8016148:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801614c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8016150:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016154:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8016158:	4770      	bx	lr
 801615a:	4b30      	ldr	r3, [pc, #192]	; (801621c <__ieee754_expf+0x184>)
 801615c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8016220 <__ieee754_expf+0x188>
 8016160:	eddf 6a30 	vldr	s13, [pc, #192]	; 8016224 <__ieee754_expf+0x18c>
 8016164:	4413      	add	r3, r2
 8016166:	edd3 7a00 	vldr	s15, [r3]
 801616a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801616e:	eeb0 7a40 	vmov.f32	s14, s0
 8016172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016176:	ee17 2a90 	vmov	r2, s15
 801617a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801617e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016182:	eddf 6a29 	vldr	s13, [pc, #164]	; 8016228 <__ieee754_expf+0x190>
 8016186:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801618a:	e7be      	b.n	801610a <__ieee754_expf+0x72>
 801618c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8016190:	d20b      	bcs.n	80161aa <__ieee754_expf+0x112>
 8016192:	eddf 6a26 	vldr	s13, [pc, #152]	; 801622c <__ieee754_expf+0x194>
 8016196:	ee70 6a26 	vadd.f32	s13, s0, s13
 801619a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801619e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161a2:	dd02      	ble.n	80161aa <__ieee754_expf+0x112>
 80161a4:	ee30 0a25 	vadd.f32	s0, s0, s11
 80161a8:	4770      	bx	lr
 80161aa:	2200      	movs	r2, #0
 80161ac:	e7af      	b.n	801610e <__ieee754_expf+0x76>
 80161ae:	ee36 6a66 	vsub.f32	s12, s12, s13
 80161b2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80161b6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80161ba:	bfb8      	it	lt
 80161bc:	3264      	addlt	r2, #100	; 0x64
 80161be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80161c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80161c6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80161ca:	ee17 3a90 	vmov	r3, s15
 80161ce:	bfab      	itete	ge
 80161d0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80161d4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80161d8:	ee00 3a10 	vmovge	s0, r3
 80161dc:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8016230 <__ieee754_expf+0x198>
 80161e0:	bfbc      	itt	lt
 80161e2:	ee00 3a10 	vmovlt	s0, r3
 80161e6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80161ea:	4770      	bx	lr
 80161ec:	00000000 	.word	0x00000000
 80161f0:	42b17217 	.word	0x42b17217
 80161f4:	42cff1b5 	.word	0x42cff1b5
 80161f8:	3eb17218 	.word	0x3eb17218
 80161fc:	3f851591 	.word	0x3f851591
 8016200:	08018ea0 	.word	0x08018ea0
 8016204:	08018ea8 	.word	0x08018ea8
 8016208:	3331bb4c 	.word	0x3331bb4c
 801620c:	b5ddea0e 	.word	0xb5ddea0e
 8016210:	388ab355 	.word	0x388ab355
 8016214:	bb360b61 	.word	0xbb360b61
 8016218:	3e2aaaab 	.word	0x3e2aaaab
 801621c:	08018e98 	.word	0x08018e98
 8016220:	3fb8aa3b 	.word	0x3fb8aa3b
 8016224:	3f317180 	.word	0x3f317180
 8016228:	3717f7d1 	.word	0x3717f7d1
 801622c:	7149f2ca 	.word	0x7149f2ca
 8016230:	0d800000 	.word	0x0d800000

08016234 <with_errnof>:
 8016234:	b513      	push	{r0, r1, r4, lr}
 8016236:	4604      	mov	r4, r0
 8016238:	ed8d 0a01 	vstr	s0, [sp, #4]
 801623c:	f7fc fda0 	bl	8012d80 <__errno>
 8016240:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016244:	6004      	str	r4, [r0, #0]
 8016246:	b002      	add	sp, #8
 8016248:	bd10      	pop	{r4, pc}

0801624a <xflowf>:
 801624a:	b130      	cbz	r0, 801625a <xflowf+0x10>
 801624c:	eef1 7a40 	vneg.f32	s15, s0
 8016250:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016254:	2022      	movs	r0, #34	; 0x22
 8016256:	f7ff bfed 	b.w	8016234 <with_errnof>
 801625a:	eef0 7a40 	vmov.f32	s15, s0
 801625e:	e7f7      	b.n	8016250 <xflowf+0x6>

08016260 <__math_uflowf>:
 8016260:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016268 <__math_uflowf+0x8>
 8016264:	f7ff bff1 	b.w	801624a <xflowf>
 8016268:	10000000 	.word	0x10000000

0801626c <__math_oflowf>:
 801626c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016274 <__math_oflowf+0x8>
 8016270:	f7ff bfeb 	b.w	801624a <xflowf>
 8016274:	70000000 	.word	0x70000000

08016278 <__kernel_rem_pio2>:
 8016278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801627c:	ed2d 8b02 	vpush	{d8}
 8016280:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8016284:	f112 0f14 	cmn.w	r2, #20
 8016288:	9306      	str	r3, [sp, #24]
 801628a:	9104      	str	r1, [sp, #16]
 801628c:	4bc2      	ldr	r3, [pc, #776]	; (8016598 <__kernel_rem_pio2+0x320>)
 801628e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8016290:	9009      	str	r0, [sp, #36]	; 0x24
 8016292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016296:	9300      	str	r3, [sp, #0]
 8016298:	9b06      	ldr	r3, [sp, #24]
 801629a:	f103 33ff 	add.w	r3, r3, #4294967295
 801629e:	bfa8      	it	ge
 80162a0:	1ed4      	subge	r4, r2, #3
 80162a2:	9305      	str	r3, [sp, #20]
 80162a4:	bfb2      	itee	lt
 80162a6:	2400      	movlt	r4, #0
 80162a8:	2318      	movge	r3, #24
 80162aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80162ae:	f06f 0317 	mvn.w	r3, #23
 80162b2:	fb04 3303 	mla	r3, r4, r3, r3
 80162b6:	eb03 0a02 	add.w	sl, r3, r2
 80162ba:	9b00      	ldr	r3, [sp, #0]
 80162bc:	9a05      	ldr	r2, [sp, #20]
 80162be:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8016588 <__kernel_rem_pio2+0x310>
 80162c2:	eb03 0802 	add.w	r8, r3, r2
 80162c6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80162c8:	1aa7      	subs	r7, r4, r2
 80162ca:	ae20      	add	r6, sp, #128	; 0x80
 80162cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80162d0:	2500      	movs	r5, #0
 80162d2:	4545      	cmp	r5, r8
 80162d4:	dd13      	ble.n	80162fe <__kernel_rem_pio2+0x86>
 80162d6:	9b06      	ldr	r3, [sp, #24]
 80162d8:	aa20      	add	r2, sp, #128	; 0x80
 80162da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80162de:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80162e2:	f04f 0800 	mov.w	r8, #0
 80162e6:	9b00      	ldr	r3, [sp, #0]
 80162e8:	4598      	cmp	r8, r3
 80162ea:	dc31      	bgt.n	8016350 <__kernel_rem_pio2+0xd8>
 80162ec:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8016588 <__kernel_rem_pio2+0x310>
 80162f0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80162f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80162f8:	462f      	mov	r7, r5
 80162fa:	2600      	movs	r6, #0
 80162fc:	e01b      	b.n	8016336 <__kernel_rem_pio2+0xbe>
 80162fe:	42ef      	cmn	r7, r5
 8016300:	d407      	bmi.n	8016312 <__kernel_rem_pio2+0x9a>
 8016302:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016306:	f7ea f90d 	bl	8000524 <__aeabi_i2d>
 801630a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801630e:	3501      	adds	r5, #1
 8016310:	e7df      	b.n	80162d2 <__kernel_rem_pio2+0x5a>
 8016312:	ec51 0b18 	vmov	r0, r1, d8
 8016316:	e7f8      	b.n	801630a <__kernel_rem_pio2+0x92>
 8016318:	e9d7 2300 	ldrd	r2, r3, [r7]
 801631c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8016320:	f7ea f96a 	bl	80005f8 <__aeabi_dmul>
 8016324:	4602      	mov	r2, r0
 8016326:	460b      	mov	r3, r1
 8016328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801632c:	f7e9 ffae 	bl	800028c <__adddf3>
 8016330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016334:	3601      	adds	r6, #1
 8016336:	9b05      	ldr	r3, [sp, #20]
 8016338:	429e      	cmp	r6, r3
 801633a:	f1a7 0708 	sub.w	r7, r7, #8
 801633e:	ddeb      	ble.n	8016318 <__kernel_rem_pio2+0xa0>
 8016340:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016344:	f108 0801 	add.w	r8, r8, #1
 8016348:	ecab 7b02 	vstmia	fp!, {d7}
 801634c:	3508      	adds	r5, #8
 801634e:	e7ca      	b.n	80162e6 <__kernel_rem_pio2+0x6e>
 8016350:	9b00      	ldr	r3, [sp, #0]
 8016352:	aa0c      	add	r2, sp, #48	; 0x30
 8016354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016358:	930b      	str	r3, [sp, #44]	; 0x2c
 801635a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801635c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016360:	9c00      	ldr	r4, [sp, #0]
 8016362:	930a      	str	r3, [sp, #40]	; 0x28
 8016364:	00e3      	lsls	r3, r4, #3
 8016366:	9308      	str	r3, [sp, #32]
 8016368:	ab98      	add	r3, sp, #608	; 0x260
 801636a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801636e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8016372:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8016376:	ab70      	add	r3, sp, #448	; 0x1c0
 8016378:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801637c:	46c3      	mov	fp, r8
 801637e:	46a1      	mov	r9, r4
 8016380:	f1b9 0f00 	cmp.w	r9, #0
 8016384:	f1a5 0508 	sub.w	r5, r5, #8
 8016388:	dc77      	bgt.n	801647a <__kernel_rem_pio2+0x202>
 801638a:	ec47 6b10 	vmov	d0, r6, r7
 801638e:	4650      	mov	r0, sl
 8016390:	f000 fac2 	bl	8016918 <scalbn>
 8016394:	ec57 6b10 	vmov	r6, r7, d0
 8016398:	2200      	movs	r2, #0
 801639a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801639e:	ee10 0a10 	vmov	r0, s0
 80163a2:	4639      	mov	r1, r7
 80163a4:	f7ea f928 	bl	80005f8 <__aeabi_dmul>
 80163a8:	ec41 0b10 	vmov	d0, r0, r1
 80163ac:	f7ff fa5c 	bl	8015868 <floor>
 80163b0:	4b7a      	ldr	r3, [pc, #488]	; (801659c <__kernel_rem_pio2+0x324>)
 80163b2:	ec51 0b10 	vmov	r0, r1, d0
 80163b6:	2200      	movs	r2, #0
 80163b8:	f7ea f91e 	bl	80005f8 <__aeabi_dmul>
 80163bc:	4602      	mov	r2, r0
 80163be:	460b      	mov	r3, r1
 80163c0:	4630      	mov	r0, r6
 80163c2:	4639      	mov	r1, r7
 80163c4:	f7e9 ff60 	bl	8000288 <__aeabi_dsub>
 80163c8:	460f      	mov	r7, r1
 80163ca:	4606      	mov	r6, r0
 80163cc:	f7ea fbc4 	bl	8000b58 <__aeabi_d2iz>
 80163d0:	9002      	str	r0, [sp, #8]
 80163d2:	f7ea f8a7 	bl	8000524 <__aeabi_i2d>
 80163d6:	4602      	mov	r2, r0
 80163d8:	460b      	mov	r3, r1
 80163da:	4630      	mov	r0, r6
 80163dc:	4639      	mov	r1, r7
 80163de:	f7e9 ff53 	bl	8000288 <__aeabi_dsub>
 80163e2:	f1ba 0f00 	cmp.w	sl, #0
 80163e6:	4606      	mov	r6, r0
 80163e8:	460f      	mov	r7, r1
 80163ea:	dd6d      	ble.n	80164c8 <__kernel_rem_pio2+0x250>
 80163ec:	1e61      	subs	r1, r4, #1
 80163ee:	ab0c      	add	r3, sp, #48	; 0x30
 80163f0:	9d02      	ldr	r5, [sp, #8]
 80163f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80163f6:	f1ca 0018 	rsb	r0, sl, #24
 80163fa:	fa43 f200 	asr.w	r2, r3, r0
 80163fe:	4415      	add	r5, r2
 8016400:	4082      	lsls	r2, r0
 8016402:	1a9b      	subs	r3, r3, r2
 8016404:	aa0c      	add	r2, sp, #48	; 0x30
 8016406:	9502      	str	r5, [sp, #8]
 8016408:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801640c:	f1ca 0217 	rsb	r2, sl, #23
 8016410:	fa43 fb02 	asr.w	fp, r3, r2
 8016414:	f1bb 0f00 	cmp.w	fp, #0
 8016418:	dd65      	ble.n	80164e6 <__kernel_rem_pio2+0x26e>
 801641a:	9b02      	ldr	r3, [sp, #8]
 801641c:	2200      	movs	r2, #0
 801641e:	3301      	adds	r3, #1
 8016420:	9302      	str	r3, [sp, #8]
 8016422:	4615      	mov	r5, r2
 8016424:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016428:	4294      	cmp	r4, r2
 801642a:	f300 809f 	bgt.w	801656c <__kernel_rem_pio2+0x2f4>
 801642e:	f1ba 0f00 	cmp.w	sl, #0
 8016432:	dd07      	ble.n	8016444 <__kernel_rem_pio2+0x1cc>
 8016434:	f1ba 0f01 	cmp.w	sl, #1
 8016438:	f000 80c1 	beq.w	80165be <__kernel_rem_pio2+0x346>
 801643c:	f1ba 0f02 	cmp.w	sl, #2
 8016440:	f000 80c7 	beq.w	80165d2 <__kernel_rem_pio2+0x35a>
 8016444:	f1bb 0f02 	cmp.w	fp, #2
 8016448:	d14d      	bne.n	80164e6 <__kernel_rem_pio2+0x26e>
 801644a:	4632      	mov	r2, r6
 801644c:	463b      	mov	r3, r7
 801644e:	4954      	ldr	r1, [pc, #336]	; (80165a0 <__kernel_rem_pio2+0x328>)
 8016450:	2000      	movs	r0, #0
 8016452:	f7e9 ff19 	bl	8000288 <__aeabi_dsub>
 8016456:	4606      	mov	r6, r0
 8016458:	460f      	mov	r7, r1
 801645a:	2d00      	cmp	r5, #0
 801645c:	d043      	beq.n	80164e6 <__kernel_rem_pio2+0x26e>
 801645e:	4650      	mov	r0, sl
 8016460:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8016590 <__kernel_rem_pio2+0x318>
 8016464:	f000 fa58 	bl	8016918 <scalbn>
 8016468:	4630      	mov	r0, r6
 801646a:	4639      	mov	r1, r7
 801646c:	ec53 2b10 	vmov	r2, r3, d0
 8016470:	f7e9 ff0a 	bl	8000288 <__aeabi_dsub>
 8016474:	4606      	mov	r6, r0
 8016476:	460f      	mov	r7, r1
 8016478:	e035      	b.n	80164e6 <__kernel_rem_pio2+0x26e>
 801647a:	4b4a      	ldr	r3, [pc, #296]	; (80165a4 <__kernel_rem_pio2+0x32c>)
 801647c:	2200      	movs	r2, #0
 801647e:	4630      	mov	r0, r6
 8016480:	4639      	mov	r1, r7
 8016482:	f7ea f8b9 	bl	80005f8 <__aeabi_dmul>
 8016486:	f7ea fb67 	bl	8000b58 <__aeabi_d2iz>
 801648a:	f7ea f84b 	bl	8000524 <__aeabi_i2d>
 801648e:	4602      	mov	r2, r0
 8016490:	460b      	mov	r3, r1
 8016492:	ec43 2b18 	vmov	d8, r2, r3
 8016496:	4b44      	ldr	r3, [pc, #272]	; (80165a8 <__kernel_rem_pio2+0x330>)
 8016498:	2200      	movs	r2, #0
 801649a:	f7ea f8ad 	bl	80005f8 <__aeabi_dmul>
 801649e:	4602      	mov	r2, r0
 80164a0:	460b      	mov	r3, r1
 80164a2:	4630      	mov	r0, r6
 80164a4:	4639      	mov	r1, r7
 80164a6:	f7e9 feef 	bl	8000288 <__aeabi_dsub>
 80164aa:	f7ea fb55 	bl	8000b58 <__aeabi_d2iz>
 80164ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80164b2:	f84b 0b04 	str.w	r0, [fp], #4
 80164b6:	ec51 0b18 	vmov	r0, r1, d8
 80164ba:	f7e9 fee7 	bl	800028c <__adddf3>
 80164be:	f109 39ff 	add.w	r9, r9, #4294967295
 80164c2:	4606      	mov	r6, r0
 80164c4:	460f      	mov	r7, r1
 80164c6:	e75b      	b.n	8016380 <__kernel_rem_pio2+0x108>
 80164c8:	d106      	bne.n	80164d8 <__kernel_rem_pio2+0x260>
 80164ca:	1e63      	subs	r3, r4, #1
 80164cc:	aa0c      	add	r2, sp, #48	; 0x30
 80164ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80164d2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80164d6:	e79d      	b.n	8016414 <__kernel_rem_pio2+0x19c>
 80164d8:	4b34      	ldr	r3, [pc, #208]	; (80165ac <__kernel_rem_pio2+0x334>)
 80164da:	2200      	movs	r2, #0
 80164dc:	f7ea fb12 	bl	8000b04 <__aeabi_dcmpge>
 80164e0:	2800      	cmp	r0, #0
 80164e2:	d140      	bne.n	8016566 <__kernel_rem_pio2+0x2ee>
 80164e4:	4683      	mov	fp, r0
 80164e6:	2200      	movs	r2, #0
 80164e8:	2300      	movs	r3, #0
 80164ea:	4630      	mov	r0, r6
 80164ec:	4639      	mov	r1, r7
 80164ee:	f7ea faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80164f2:	2800      	cmp	r0, #0
 80164f4:	f000 80c1 	beq.w	801667a <__kernel_rem_pio2+0x402>
 80164f8:	1e65      	subs	r5, r4, #1
 80164fa:	462b      	mov	r3, r5
 80164fc:	2200      	movs	r2, #0
 80164fe:	9900      	ldr	r1, [sp, #0]
 8016500:	428b      	cmp	r3, r1
 8016502:	da6d      	bge.n	80165e0 <__kernel_rem_pio2+0x368>
 8016504:	2a00      	cmp	r2, #0
 8016506:	f000 808a 	beq.w	801661e <__kernel_rem_pio2+0x3a6>
 801650a:	ab0c      	add	r3, sp, #48	; 0x30
 801650c:	f1aa 0a18 	sub.w	sl, sl, #24
 8016510:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8016514:	2b00      	cmp	r3, #0
 8016516:	f000 80ae 	beq.w	8016676 <__kernel_rem_pio2+0x3fe>
 801651a:	4650      	mov	r0, sl
 801651c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8016590 <__kernel_rem_pio2+0x318>
 8016520:	f000 f9fa 	bl	8016918 <scalbn>
 8016524:	1c6b      	adds	r3, r5, #1
 8016526:	00da      	lsls	r2, r3, #3
 8016528:	9205      	str	r2, [sp, #20]
 801652a:	ec57 6b10 	vmov	r6, r7, d0
 801652e:	aa70      	add	r2, sp, #448	; 0x1c0
 8016530:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80165a4 <__kernel_rem_pio2+0x32c>
 8016534:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8016538:	462c      	mov	r4, r5
 801653a:	f04f 0800 	mov.w	r8, #0
 801653e:	2c00      	cmp	r4, #0
 8016540:	f280 80d4 	bge.w	80166ec <__kernel_rem_pio2+0x474>
 8016544:	462c      	mov	r4, r5
 8016546:	2c00      	cmp	r4, #0
 8016548:	f2c0 8102 	blt.w	8016750 <__kernel_rem_pio2+0x4d8>
 801654c:	4b18      	ldr	r3, [pc, #96]	; (80165b0 <__kernel_rem_pio2+0x338>)
 801654e:	461e      	mov	r6, r3
 8016550:	ab70      	add	r3, sp, #448	; 0x1c0
 8016552:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8016556:	1b2b      	subs	r3, r5, r4
 8016558:	f04f 0900 	mov.w	r9, #0
 801655c:	f04f 0a00 	mov.w	sl, #0
 8016560:	2700      	movs	r7, #0
 8016562:	9306      	str	r3, [sp, #24]
 8016564:	e0e6      	b.n	8016734 <__kernel_rem_pio2+0x4bc>
 8016566:	f04f 0b02 	mov.w	fp, #2
 801656a:	e756      	b.n	801641a <__kernel_rem_pio2+0x1a2>
 801656c:	f8d8 3000 	ldr.w	r3, [r8]
 8016570:	bb05      	cbnz	r5, 80165b4 <__kernel_rem_pio2+0x33c>
 8016572:	b123      	cbz	r3, 801657e <__kernel_rem_pio2+0x306>
 8016574:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016578:	f8c8 3000 	str.w	r3, [r8]
 801657c:	2301      	movs	r3, #1
 801657e:	3201      	adds	r2, #1
 8016580:	f108 0804 	add.w	r8, r8, #4
 8016584:	461d      	mov	r5, r3
 8016586:	e74f      	b.n	8016428 <__kernel_rem_pio2+0x1b0>
	...
 8016594:	3ff00000 	.word	0x3ff00000
 8016598:	08018ef0 	.word	0x08018ef0
 801659c:	40200000 	.word	0x40200000
 80165a0:	3ff00000 	.word	0x3ff00000
 80165a4:	3e700000 	.word	0x3e700000
 80165a8:	41700000 	.word	0x41700000
 80165ac:	3fe00000 	.word	0x3fe00000
 80165b0:	08018eb0 	.word	0x08018eb0
 80165b4:	1acb      	subs	r3, r1, r3
 80165b6:	f8c8 3000 	str.w	r3, [r8]
 80165ba:	462b      	mov	r3, r5
 80165bc:	e7df      	b.n	801657e <__kernel_rem_pio2+0x306>
 80165be:	1e62      	subs	r2, r4, #1
 80165c0:	ab0c      	add	r3, sp, #48	; 0x30
 80165c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80165ca:	a90c      	add	r1, sp, #48	; 0x30
 80165cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80165d0:	e738      	b.n	8016444 <__kernel_rem_pio2+0x1cc>
 80165d2:	1e62      	subs	r2, r4, #1
 80165d4:	ab0c      	add	r3, sp, #48	; 0x30
 80165d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165da:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80165de:	e7f4      	b.n	80165ca <__kernel_rem_pio2+0x352>
 80165e0:	a90c      	add	r1, sp, #48	; 0x30
 80165e2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80165e6:	3b01      	subs	r3, #1
 80165e8:	430a      	orrs	r2, r1
 80165ea:	e788      	b.n	80164fe <__kernel_rem_pio2+0x286>
 80165ec:	3301      	adds	r3, #1
 80165ee:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80165f2:	2900      	cmp	r1, #0
 80165f4:	d0fa      	beq.n	80165ec <__kernel_rem_pio2+0x374>
 80165f6:	9a08      	ldr	r2, [sp, #32]
 80165f8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80165fc:	446a      	add	r2, sp
 80165fe:	3a98      	subs	r2, #152	; 0x98
 8016600:	9208      	str	r2, [sp, #32]
 8016602:	9a06      	ldr	r2, [sp, #24]
 8016604:	a920      	add	r1, sp, #128	; 0x80
 8016606:	18a2      	adds	r2, r4, r2
 8016608:	18e3      	adds	r3, r4, r3
 801660a:	f104 0801 	add.w	r8, r4, #1
 801660e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8016612:	9302      	str	r3, [sp, #8]
 8016614:	9b02      	ldr	r3, [sp, #8]
 8016616:	4543      	cmp	r3, r8
 8016618:	da04      	bge.n	8016624 <__kernel_rem_pio2+0x3ac>
 801661a:	461c      	mov	r4, r3
 801661c:	e6a2      	b.n	8016364 <__kernel_rem_pio2+0xec>
 801661e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016620:	2301      	movs	r3, #1
 8016622:	e7e4      	b.n	80165ee <__kernel_rem_pio2+0x376>
 8016624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016626:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801662a:	f7e9 ff7b 	bl	8000524 <__aeabi_i2d>
 801662e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8016632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016634:	46ab      	mov	fp, r5
 8016636:	461c      	mov	r4, r3
 8016638:	f04f 0900 	mov.w	r9, #0
 801663c:	2600      	movs	r6, #0
 801663e:	2700      	movs	r7, #0
 8016640:	9b05      	ldr	r3, [sp, #20]
 8016642:	4599      	cmp	r9, r3
 8016644:	dd06      	ble.n	8016654 <__kernel_rem_pio2+0x3dc>
 8016646:	9b08      	ldr	r3, [sp, #32]
 8016648:	e8e3 6702 	strd	r6, r7, [r3], #8
 801664c:	f108 0801 	add.w	r8, r8, #1
 8016650:	9308      	str	r3, [sp, #32]
 8016652:	e7df      	b.n	8016614 <__kernel_rem_pio2+0x39c>
 8016654:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016658:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801665c:	f7e9 ffcc 	bl	80005f8 <__aeabi_dmul>
 8016660:	4602      	mov	r2, r0
 8016662:	460b      	mov	r3, r1
 8016664:	4630      	mov	r0, r6
 8016666:	4639      	mov	r1, r7
 8016668:	f7e9 fe10 	bl	800028c <__adddf3>
 801666c:	f109 0901 	add.w	r9, r9, #1
 8016670:	4606      	mov	r6, r0
 8016672:	460f      	mov	r7, r1
 8016674:	e7e4      	b.n	8016640 <__kernel_rem_pio2+0x3c8>
 8016676:	3d01      	subs	r5, #1
 8016678:	e747      	b.n	801650a <__kernel_rem_pio2+0x292>
 801667a:	ec47 6b10 	vmov	d0, r6, r7
 801667e:	f1ca 0000 	rsb	r0, sl, #0
 8016682:	f000 f949 	bl	8016918 <scalbn>
 8016686:	ec57 6b10 	vmov	r6, r7, d0
 801668a:	4ba0      	ldr	r3, [pc, #640]	; (801690c <__kernel_rem_pio2+0x694>)
 801668c:	ee10 0a10 	vmov	r0, s0
 8016690:	2200      	movs	r2, #0
 8016692:	4639      	mov	r1, r7
 8016694:	f7ea fa36 	bl	8000b04 <__aeabi_dcmpge>
 8016698:	b1f8      	cbz	r0, 80166da <__kernel_rem_pio2+0x462>
 801669a:	4b9d      	ldr	r3, [pc, #628]	; (8016910 <__kernel_rem_pio2+0x698>)
 801669c:	2200      	movs	r2, #0
 801669e:	4630      	mov	r0, r6
 80166a0:	4639      	mov	r1, r7
 80166a2:	f7e9 ffa9 	bl	80005f8 <__aeabi_dmul>
 80166a6:	f7ea fa57 	bl	8000b58 <__aeabi_d2iz>
 80166aa:	4680      	mov	r8, r0
 80166ac:	f7e9 ff3a 	bl	8000524 <__aeabi_i2d>
 80166b0:	4b96      	ldr	r3, [pc, #600]	; (801690c <__kernel_rem_pio2+0x694>)
 80166b2:	2200      	movs	r2, #0
 80166b4:	f7e9 ffa0 	bl	80005f8 <__aeabi_dmul>
 80166b8:	460b      	mov	r3, r1
 80166ba:	4602      	mov	r2, r0
 80166bc:	4639      	mov	r1, r7
 80166be:	4630      	mov	r0, r6
 80166c0:	f7e9 fde2 	bl	8000288 <__aeabi_dsub>
 80166c4:	f7ea fa48 	bl	8000b58 <__aeabi_d2iz>
 80166c8:	1c65      	adds	r5, r4, #1
 80166ca:	ab0c      	add	r3, sp, #48	; 0x30
 80166cc:	f10a 0a18 	add.w	sl, sl, #24
 80166d0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80166d4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80166d8:	e71f      	b.n	801651a <__kernel_rem_pio2+0x2a2>
 80166da:	4630      	mov	r0, r6
 80166dc:	4639      	mov	r1, r7
 80166de:	f7ea fa3b 	bl	8000b58 <__aeabi_d2iz>
 80166e2:	ab0c      	add	r3, sp, #48	; 0x30
 80166e4:	4625      	mov	r5, r4
 80166e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80166ea:	e716      	b.n	801651a <__kernel_rem_pio2+0x2a2>
 80166ec:	ab0c      	add	r3, sp, #48	; 0x30
 80166ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80166f2:	f7e9 ff17 	bl	8000524 <__aeabi_i2d>
 80166f6:	4632      	mov	r2, r6
 80166f8:	463b      	mov	r3, r7
 80166fa:	f7e9 ff7d 	bl	80005f8 <__aeabi_dmul>
 80166fe:	4642      	mov	r2, r8
 8016700:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8016704:	464b      	mov	r3, r9
 8016706:	4630      	mov	r0, r6
 8016708:	4639      	mov	r1, r7
 801670a:	f7e9 ff75 	bl	80005f8 <__aeabi_dmul>
 801670e:	3c01      	subs	r4, #1
 8016710:	4606      	mov	r6, r0
 8016712:	460f      	mov	r7, r1
 8016714:	e713      	b.n	801653e <__kernel_rem_pio2+0x2c6>
 8016716:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801671a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801671e:	f7e9 ff6b 	bl	80005f8 <__aeabi_dmul>
 8016722:	4602      	mov	r2, r0
 8016724:	460b      	mov	r3, r1
 8016726:	4648      	mov	r0, r9
 8016728:	4651      	mov	r1, sl
 801672a:	f7e9 fdaf 	bl	800028c <__adddf3>
 801672e:	3701      	adds	r7, #1
 8016730:	4681      	mov	r9, r0
 8016732:	468a      	mov	sl, r1
 8016734:	9b00      	ldr	r3, [sp, #0]
 8016736:	429f      	cmp	r7, r3
 8016738:	dc02      	bgt.n	8016740 <__kernel_rem_pio2+0x4c8>
 801673a:	9b06      	ldr	r3, [sp, #24]
 801673c:	429f      	cmp	r7, r3
 801673e:	ddea      	ble.n	8016716 <__kernel_rem_pio2+0x49e>
 8016740:	9a06      	ldr	r2, [sp, #24]
 8016742:	ab48      	add	r3, sp, #288	; 0x120
 8016744:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8016748:	e9c6 9a00 	strd	r9, sl, [r6]
 801674c:	3c01      	subs	r4, #1
 801674e:	e6fa      	b.n	8016546 <__kernel_rem_pio2+0x2ce>
 8016750:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016752:	2b02      	cmp	r3, #2
 8016754:	dc0b      	bgt.n	801676e <__kernel_rem_pio2+0x4f6>
 8016756:	2b00      	cmp	r3, #0
 8016758:	dc39      	bgt.n	80167ce <__kernel_rem_pio2+0x556>
 801675a:	d05d      	beq.n	8016818 <__kernel_rem_pio2+0x5a0>
 801675c:	9b02      	ldr	r3, [sp, #8]
 801675e:	f003 0007 	and.w	r0, r3, #7
 8016762:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8016766:	ecbd 8b02 	vpop	{d8}
 801676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016770:	2b03      	cmp	r3, #3
 8016772:	d1f3      	bne.n	801675c <__kernel_rem_pio2+0x4e4>
 8016774:	9b05      	ldr	r3, [sp, #20]
 8016776:	9500      	str	r5, [sp, #0]
 8016778:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801677c:	eb0d 0403 	add.w	r4, sp, r3
 8016780:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8016784:	46a2      	mov	sl, r4
 8016786:	9b00      	ldr	r3, [sp, #0]
 8016788:	2b00      	cmp	r3, #0
 801678a:	f1aa 0a08 	sub.w	sl, sl, #8
 801678e:	dc69      	bgt.n	8016864 <__kernel_rem_pio2+0x5ec>
 8016790:	46aa      	mov	sl, r5
 8016792:	f1ba 0f01 	cmp.w	sl, #1
 8016796:	f1a4 0408 	sub.w	r4, r4, #8
 801679a:	f300 8083 	bgt.w	80168a4 <__kernel_rem_pio2+0x62c>
 801679e:	9c05      	ldr	r4, [sp, #20]
 80167a0:	ab48      	add	r3, sp, #288	; 0x120
 80167a2:	441c      	add	r4, r3
 80167a4:	2000      	movs	r0, #0
 80167a6:	2100      	movs	r1, #0
 80167a8:	2d01      	cmp	r5, #1
 80167aa:	f300 809a 	bgt.w	80168e2 <__kernel_rem_pio2+0x66a>
 80167ae:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80167b2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80167b6:	f1bb 0f00 	cmp.w	fp, #0
 80167ba:	f040 8098 	bne.w	80168ee <__kernel_rem_pio2+0x676>
 80167be:	9b04      	ldr	r3, [sp, #16]
 80167c0:	e9c3 7800 	strd	r7, r8, [r3]
 80167c4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80167c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80167cc:	e7c6      	b.n	801675c <__kernel_rem_pio2+0x4e4>
 80167ce:	9e05      	ldr	r6, [sp, #20]
 80167d0:	ab48      	add	r3, sp, #288	; 0x120
 80167d2:	441e      	add	r6, r3
 80167d4:	462c      	mov	r4, r5
 80167d6:	2000      	movs	r0, #0
 80167d8:	2100      	movs	r1, #0
 80167da:	2c00      	cmp	r4, #0
 80167dc:	da33      	bge.n	8016846 <__kernel_rem_pio2+0x5ce>
 80167de:	f1bb 0f00 	cmp.w	fp, #0
 80167e2:	d036      	beq.n	8016852 <__kernel_rem_pio2+0x5da>
 80167e4:	4602      	mov	r2, r0
 80167e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80167ea:	9c04      	ldr	r4, [sp, #16]
 80167ec:	e9c4 2300 	strd	r2, r3, [r4]
 80167f0:	4602      	mov	r2, r0
 80167f2:	460b      	mov	r3, r1
 80167f4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80167f8:	f7e9 fd46 	bl	8000288 <__aeabi_dsub>
 80167fc:	ae4a      	add	r6, sp, #296	; 0x128
 80167fe:	2401      	movs	r4, #1
 8016800:	42a5      	cmp	r5, r4
 8016802:	da29      	bge.n	8016858 <__kernel_rem_pio2+0x5e0>
 8016804:	f1bb 0f00 	cmp.w	fp, #0
 8016808:	d002      	beq.n	8016810 <__kernel_rem_pio2+0x598>
 801680a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801680e:	4619      	mov	r1, r3
 8016810:	9b04      	ldr	r3, [sp, #16]
 8016812:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016816:	e7a1      	b.n	801675c <__kernel_rem_pio2+0x4e4>
 8016818:	9c05      	ldr	r4, [sp, #20]
 801681a:	ab48      	add	r3, sp, #288	; 0x120
 801681c:	441c      	add	r4, r3
 801681e:	2000      	movs	r0, #0
 8016820:	2100      	movs	r1, #0
 8016822:	2d00      	cmp	r5, #0
 8016824:	da09      	bge.n	801683a <__kernel_rem_pio2+0x5c2>
 8016826:	f1bb 0f00 	cmp.w	fp, #0
 801682a:	d002      	beq.n	8016832 <__kernel_rem_pio2+0x5ba>
 801682c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016830:	4619      	mov	r1, r3
 8016832:	9b04      	ldr	r3, [sp, #16]
 8016834:	e9c3 0100 	strd	r0, r1, [r3]
 8016838:	e790      	b.n	801675c <__kernel_rem_pio2+0x4e4>
 801683a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801683e:	f7e9 fd25 	bl	800028c <__adddf3>
 8016842:	3d01      	subs	r5, #1
 8016844:	e7ed      	b.n	8016822 <__kernel_rem_pio2+0x5aa>
 8016846:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801684a:	f7e9 fd1f 	bl	800028c <__adddf3>
 801684e:	3c01      	subs	r4, #1
 8016850:	e7c3      	b.n	80167da <__kernel_rem_pio2+0x562>
 8016852:	4602      	mov	r2, r0
 8016854:	460b      	mov	r3, r1
 8016856:	e7c8      	b.n	80167ea <__kernel_rem_pio2+0x572>
 8016858:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801685c:	f7e9 fd16 	bl	800028c <__adddf3>
 8016860:	3401      	adds	r4, #1
 8016862:	e7cd      	b.n	8016800 <__kernel_rem_pio2+0x588>
 8016864:	e9da 8900 	ldrd	r8, r9, [sl]
 8016868:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801686c:	9b00      	ldr	r3, [sp, #0]
 801686e:	3b01      	subs	r3, #1
 8016870:	9300      	str	r3, [sp, #0]
 8016872:	4632      	mov	r2, r6
 8016874:	463b      	mov	r3, r7
 8016876:	4640      	mov	r0, r8
 8016878:	4649      	mov	r1, r9
 801687a:	f7e9 fd07 	bl	800028c <__adddf3>
 801687e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016882:	4602      	mov	r2, r0
 8016884:	460b      	mov	r3, r1
 8016886:	4640      	mov	r0, r8
 8016888:	4649      	mov	r1, r9
 801688a:	f7e9 fcfd 	bl	8000288 <__aeabi_dsub>
 801688e:	4632      	mov	r2, r6
 8016890:	463b      	mov	r3, r7
 8016892:	f7e9 fcfb 	bl	800028c <__adddf3>
 8016896:	ed9d 7b06 	vldr	d7, [sp, #24]
 801689a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801689e:	ed8a 7b00 	vstr	d7, [sl]
 80168a2:	e770      	b.n	8016786 <__kernel_rem_pio2+0x50e>
 80168a4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80168a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80168ac:	4640      	mov	r0, r8
 80168ae:	4632      	mov	r2, r6
 80168b0:	463b      	mov	r3, r7
 80168b2:	4649      	mov	r1, r9
 80168b4:	f7e9 fcea 	bl	800028c <__adddf3>
 80168b8:	e9cd 0100 	strd	r0, r1, [sp]
 80168bc:	4602      	mov	r2, r0
 80168be:	460b      	mov	r3, r1
 80168c0:	4640      	mov	r0, r8
 80168c2:	4649      	mov	r1, r9
 80168c4:	f7e9 fce0 	bl	8000288 <__aeabi_dsub>
 80168c8:	4632      	mov	r2, r6
 80168ca:	463b      	mov	r3, r7
 80168cc:	f7e9 fcde 	bl	800028c <__adddf3>
 80168d0:	ed9d 7b00 	vldr	d7, [sp]
 80168d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80168d8:	ed84 7b00 	vstr	d7, [r4]
 80168dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80168e0:	e757      	b.n	8016792 <__kernel_rem_pio2+0x51a>
 80168e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80168e6:	f7e9 fcd1 	bl	800028c <__adddf3>
 80168ea:	3d01      	subs	r5, #1
 80168ec:	e75c      	b.n	80167a8 <__kernel_rem_pio2+0x530>
 80168ee:	9b04      	ldr	r3, [sp, #16]
 80168f0:	9a04      	ldr	r2, [sp, #16]
 80168f2:	601f      	str	r7, [r3, #0]
 80168f4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80168f8:	605c      	str	r4, [r3, #4]
 80168fa:	609d      	str	r5, [r3, #8]
 80168fc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016900:	60d3      	str	r3, [r2, #12]
 8016902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016906:	6110      	str	r0, [r2, #16]
 8016908:	6153      	str	r3, [r2, #20]
 801690a:	e727      	b.n	801675c <__kernel_rem_pio2+0x4e4>
 801690c:	41700000 	.word	0x41700000
 8016910:	3e700000 	.word	0x3e700000
 8016914:	00000000 	.word	0x00000000

08016918 <scalbn>:
 8016918:	b570      	push	{r4, r5, r6, lr}
 801691a:	ec55 4b10 	vmov	r4, r5, d0
 801691e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016922:	4606      	mov	r6, r0
 8016924:	462b      	mov	r3, r5
 8016926:	b999      	cbnz	r1, 8016950 <scalbn+0x38>
 8016928:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801692c:	4323      	orrs	r3, r4
 801692e:	d03f      	beq.n	80169b0 <scalbn+0x98>
 8016930:	4b35      	ldr	r3, [pc, #212]	; (8016a08 <scalbn+0xf0>)
 8016932:	4629      	mov	r1, r5
 8016934:	ee10 0a10 	vmov	r0, s0
 8016938:	2200      	movs	r2, #0
 801693a:	f7e9 fe5d 	bl	80005f8 <__aeabi_dmul>
 801693e:	4b33      	ldr	r3, [pc, #204]	; (8016a0c <scalbn+0xf4>)
 8016940:	429e      	cmp	r6, r3
 8016942:	4604      	mov	r4, r0
 8016944:	460d      	mov	r5, r1
 8016946:	da10      	bge.n	801696a <scalbn+0x52>
 8016948:	a327      	add	r3, pc, #156	; (adr r3, 80169e8 <scalbn+0xd0>)
 801694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801694e:	e01f      	b.n	8016990 <scalbn+0x78>
 8016950:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8016954:	4291      	cmp	r1, r2
 8016956:	d10c      	bne.n	8016972 <scalbn+0x5a>
 8016958:	ee10 2a10 	vmov	r2, s0
 801695c:	4620      	mov	r0, r4
 801695e:	4629      	mov	r1, r5
 8016960:	f7e9 fc94 	bl	800028c <__adddf3>
 8016964:	4604      	mov	r4, r0
 8016966:	460d      	mov	r5, r1
 8016968:	e022      	b.n	80169b0 <scalbn+0x98>
 801696a:	460b      	mov	r3, r1
 801696c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016970:	3936      	subs	r1, #54	; 0x36
 8016972:	f24c 3250 	movw	r2, #50000	; 0xc350
 8016976:	4296      	cmp	r6, r2
 8016978:	dd0d      	ble.n	8016996 <scalbn+0x7e>
 801697a:	2d00      	cmp	r5, #0
 801697c:	a11c      	add	r1, pc, #112	; (adr r1, 80169f0 <scalbn+0xd8>)
 801697e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016982:	da02      	bge.n	801698a <scalbn+0x72>
 8016984:	a11c      	add	r1, pc, #112	; (adr r1, 80169f8 <scalbn+0xe0>)
 8016986:	e9d1 0100 	ldrd	r0, r1, [r1]
 801698a:	a319      	add	r3, pc, #100	; (adr r3, 80169f0 <scalbn+0xd8>)
 801698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016990:	f7e9 fe32 	bl	80005f8 <__aeabi_dmul>
 8016994:	e7e6      	b.n	8016964 <scalbn+0x4c>
 8016996:	1872      	adds	r2, r6, r1
 8016998:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801699c:	428a      	cmp	r2, r1
 801699e:	dcec      	bgt.n	801697a <scalbn+0x62>
 80169a0:	2a00      	cmp	r2, #0
 80169a2:	dd08      	ble.n	80169b6 <scalbn+0x9e>
 80169a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80169a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80169ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80169b0:	ec45 4b10 	vmov	d0, r4, r5
 80169b4:	bd70      	pop	{r4, r5, r6, pc}
 80169b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80169ba:	da08      	bge.n	80169ce <scalbn+0xb6>
 80169bc:	2d00      	cmp	r5, #0
 80169be:	a10a      	add	r1, pc, #40	; (adr r1, 80169e8 <scalbn+0xd0>)
 80169c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169c4:	dac0      	bge.n	8016948 <scalbn+0x30>
 80169c6:	a10e      	add	r1, pc, #56	; (adr r1, 8016a00 <scalbn+0xe8>)
 80169c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169cc:	e7bc      	b.n	8016948 <scalbn+0x30>
 80169ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80169d2:	3236      	adds	r2, #54	; 0x36
 80169d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80169d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80169dc:	4620      	mov	r0, r4
 80169de:	4b0c      	ldr	r3, [pc, #48]	; (8016a10 <scalbn+0xf8>)
 80169e0:	2200      	movs	r2, #0
 80169e2:	e7d5      	b.n	8016990 <scalbn+0x78>
 80169e4:	f3af 8000 	nop.w
 80169e8:	c2f8f359 	.word	0xc2f8f359
 80169ec:	01a56e1f 	.word	0x01a56e1f
 80169f0:	8800759c 	.word	0x8800759c
 80169f4:	7e37e43c 	.word	0x7e37e43c
 80169f8:	8800759c 	.word	0x8800759c
 80169fc:	fe37e43c 	.word	0xfe37e43c
 8016a00:	c2f8f359 	.word	0xc2f8f359
 8016a04:	81a56e1f 	.word	0x81a56e1f
 8016a08:	43500000 	.word	0x43500000
 8016a0c:	ffff3cb0 	.word	0xffff3cb0
 8016a10:	3c900000 	.word	0x3c900000

08016a14 <_init>:
 8016a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a16:	bf00      	nop
 8016a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a1a:	bc08      	pop	{r3}
 8016a1c:	469e      	mov	lr, r3
 8016a1e:	4770      	bx	lr

08016a20 <_fini>:
 8016a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a22:	bf00      	nop
 8016a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a26:	bc08      	pop	{r3}
 8016a28:	469e      	mov	lr, r3
 8016a2a:	4770      	bx	lr
