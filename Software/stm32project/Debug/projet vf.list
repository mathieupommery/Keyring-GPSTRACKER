
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c0a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025c8  0801c230  0801c230  0002c230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e7f8  0801e7f8  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  0801e7f8  0801e7f8  0002e7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e800  0801e800  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e800  0801e800  0002e800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e804  0801e804  0002e804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0801e808  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002400  20000308  0801eb10  00030308  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002708  0801eb10  00032708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e20c  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006582  00000000  00000000  0005e587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002370  00000000  00000000  00064b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b37  00000000  00000000  00066e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a764  00000000  00000000  000689b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031b85  00000000  00000000  0009311b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8d98  00000000  00000000  000c4ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000afb4  00000000  00000000  001ada38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001b89ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c218 	.word	0x0801c218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	0801c218 	.word	0x0801c218

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <PADS_continuous_init>:


}


uint8_t PADS_continuous_init(I2C_HandleTypeDef *i2c){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]

	uint8_t ctrl_2=0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	72fb      	strb	r3, [r7, #11]
	uint8_t ctrl_1=0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	72bb      	strb	r3, [r7, #10]
	int check=0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x11, 1, &ctrl_2, 1, 100)!=HAL_OK){
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 030b 	add.w	r3, r7, #11
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2211      	movs	r2, #17
 8001016:	21bb      	movs	r1, #187	; 0xbb
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f008 fa73 	bl	8009504 <HAL_I2C_Mem_Read>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <PADS_continuous_init+0x38>
			check=1;
 8001024:	2301      	movs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
		}

	ctrl_2|=0b00000010;
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	72fb      	strb	r3, [r7, #11]

	if(HAL_I2C_Mem_Write(i2c, 0xBA, 0x11, 1, &ctrl_2, 1, 100)!=HAL_OK){
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030b 	add.w	r3, r7, #11
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2211      	movs	r2, #17
 8001044:	21ba      	movs	r1, #186	; 0xba
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f008 f948 	bl	80092dc <HAL_I2C_Mem_Write>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <PADS_continuous_init+0x66>
			check=1;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
		}

	if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x10, 1, &ctrl_1, 1, 100)!=HAL_OK){
 8001056:	2364      	movs	r3, #100	; 0x64
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	2301      	movs	r3, #1
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	f107 030a 	add.w	r3, r7, #10
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	2210      	movs	r2, #16
 8001068:	21bb      	movs	r1, #187	; 0xbb
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f008 fa4a 	bl	8009504 <HAL_I2C_Mem_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <PADS_continuous_init+0x8a>
				check=1;
 8001076:	2301      	movs	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
			}


	ctrl_1|=0b01001110;
 800107a:	7abb      	ldrb	r3, [r7, #10]
 800107c:	f043 034e 	orr.w	r3, r3, #78	; 0x4e
 8001080:	b2db      	uxtb	r3, r3
 8001082:	72bb      	strb	r3, [r7, #10]

	ctrl_1&=0b11001111;
 8001084:	7abb      	ldrb	r3, [r7, #10]
 8001086:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800108a:	b2db      	uxtb	r3, r3
 800108c:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Mem_Write(i2c, 0xBA, 0x10, 1, &ctrl_1, 1, 100)!=HAL_OK){
 800108e:	2364      	movs	r3, #100	; 0x64
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	2301      	movs	r3, #1
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	f107 030a 	add.w	r3, r7, #10
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	2210      	movs	r2, #16
 80010a0:	21ba      	movs	r1, #186	; 0xba
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f008 f91a 	bl	80092dc <HAL_I2C_Mem_Write>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <PADS_continuous_init+0xc2>
				check=1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
			}



	return check;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	b2db      	uxtb	r3, r3

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <PADS_continuous_read>:

uint8_t PADS_continuous_read(I2C_HandleTypeDef *i2c){
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	ed2d 8b02 	vpush	{d8}
 80010c6:	b08e      	sub	sp, #56	; 0x38
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	6078      	str	r0, [r7, #4]
		int check=0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
		uint8_t recarray[5];
		int16_t intbuffertemp=0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	847b      	strh	r3, [r7, #34]	; 0x22
		int32_t intbufferpres=0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
		double tmoy=0;
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x28, 1, &recarray[0], 1, 100)!=HAL_OK){
 80010e4:	2364      	movs	r3, #100	; 0x64
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	2228      	movs	r2, #40	; 0x28
 80010f6:	21bb      	movs	r1, #187	; 0xbb
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f008 fa03 	bl	8009504 <HAL_I2C_Mem_Read>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <PADS_continuous_read+0x48>
			check=1;
 8001104:	2301      	movs	r3, #1
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x29, 1, &recarray[1], 1, 100)!=HAL_OK){
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	3301      	adds	r3, #1
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2229      	movs	r2, #41	; 0x29
 800111c:	21bb      	movs	r1, #187	; 0xbb
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f008 f9f0 	bl	8009504 <HAL_I2C_Mem_Read>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <PADS_continuous_read+0x6e>
			check=1;
 800112a:	2301      	movs	r3, #1
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2A, 1, &recarray[2], 1, 100)!=HAL_OK){
 800112e:	2364      	movs	r3, #100	; 0x64
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2301      	movs	r3, #1
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	3302      	adds	r3, #2
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	222a      	movs	r2, #42	; 0x2a
 8001142:	21bb      	movs	r1, #187	; 0xbb
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f008 f9dd 	bl	8009504 <HAL_I2C_Mem_Read>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <PADS_continuous_read+0x94>
			check=1;
 8001150:	2301      	movs	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2B, 1, &recarray[3], 1, 100)!=HAL_OK){
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	3303      	adds	r3, #3
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	222b      	movs	r2, #43	; 0x2b
 8001168:	21bb      	movs	r1, #187	; 0xbb
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f008 f9ca 	bl	8009504 <HAL_I2C_Mem_Read>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <PADS_continuous_read+0xba>
			check=1;
 8001176:	2301      	movs	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xBB, 0x2C, 1, &recarray[4], 1, 100)!=HAL_OK){
 800117a:	2364      	movs	r3, #100	; 0x64
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	2301      	movs	r3, #1
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	3304      	adds	r3, #4
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	222c      	movs	r2, #44	; 0x2c
 800118e:	21bb      	movs	r1, #187	; 0xbb
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f008 f9b7 	bl	8009504 <HAL_I2C_Mem_Read>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <PADS_continuous_read+0xe0>
			check=1;
 800119c:	2301      	movs	r3, #1
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if(check==0){
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 80c9 	bne.w	800133a <PADS_continuous_read+0x27a>

		intbufferpres=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 80011a8:	7abb      	ldrb	r3, [r7, #10]
 80011aa:	041a      	lsls	r2, r3, #16
 80011ac:	7a7b      	ldrb	r3, [r7, #9]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	4313      	orrs	r3, r2
 80011b2:	7a3a      	ldrb	r2, [r7, #8]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61fb      	str	r3, [r7, #28]
		intbuffertemp=(recarray[4]<<8)|(recarray[3]);
 80011b8:	7b3b      	ldrb	r3, [r7, #12]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b21a      	sxth	r2, r3
 80011be:	7afb      	ldrb	r3, [r7, #11]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	847b      	strh	r3, [r7, #34]	; 0x22
		finaltemp=(float)intbuffertemp*0.01;
 80011c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f9b7 	bl	8000548 <__aeabi_f2d>
 80011da:	a36d      	add	r3, pc, #436	; (adr r3, 8001390 <PADS_continuous_read+0x2d0>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa0a 	bl	80005f8 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fcfc 	bl	8000be8 <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a61      	ldr	r2, [pc, #388]	; (8001378 <PADS_continuous_read+0x2b8>)
 80011f4:	6013      	str	r3, [r2, #0]
		finalpress=(float) intbufferpres*(0.00002441406);
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001200:	ee17 0a90 	vmov	r0, s15
 8001204:	f7ff f9a0 	bl	8000548 <__aeabi_f2d>
 8001208:	a351      	add	r3, pc, #324	; (adr r3, 8001350 <PADS_continuous_read+0x290>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff f9f3 	bl	80005f8 <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f7ff fce5 	bl	8000be8 <__aeabi_d2f>
 800121e:	4603      	mov	r3, r0
 8001220:	4a56      	ldr	r2, [pc, #344]	; (800137c <PADS_continuous_read+0x2bc>)
 8001222:	6013      	str	r3, [r2, #0]

		//alt=(double)(288.15/0.0065)*(1-pow((double)(finalpress*1000.0)/101325.0, (double)(287.05*0.0065)/(9.80665)));
		alt=(float) ((8.314*293.15)/(9.80665*0.028964))*logf((float)101325.0/(finalpress*1000.0));
 8001224:	4b55      	ldr	r3, [pc, #340]	; (800137c <PADS_continuous_read+0x2bc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f98d 	bl	8000548 <__aeabi_f2d>
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b53      	ldr	r3, [pc, #332]	; (8001380 <PADS_continuous_read+0x2c0>)
 8001234:	f7ff f9e0 	bl	80005f8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	a146      	add	r1, pc, #280	; (adr r1, 8001358 <PADS_continuous_read+0x298>)
 800123e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001242:	f7ff fb03 	bl	800084c <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fccb 	bl	8000be8 <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	ee00 3a10 	vmov	s0, r3
 8001258:	f019 fa10 	bl	801a67c <logf>
 800125c:	eef0 7a40 	vmov.f32	s15, s0
 8001260:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001384 <PADS_continuous_read+0x2c4>
 8001264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001268:	4b47      	ldr	r3, [pc, #284]	; (8001388 <PADS_continuous_read+0x2c8>)
 800126a:	edc3 7a00 	vstr	s15, [r3]
		tmoy=(float) 293.15+finaltemp+(0.0065*alt)/2;
 800126e:	4b42      	ldr	r3, [pc, #264]	; (8001378 <PADS_continuous_read+0x2b8>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800138c <PADS_continuous_read+0x2cc>
 8001278:	ee77 7a87 	vadd.f32	s15, s15, s14
 800127c:	ee17 0a90 	vmov	r0, s15
 8001280:	f7ff f962 	bl	8000548 <__aeabi_f2d>
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <PADS_continuous_read+0x2c8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f95b 	bl	8000548 <__aeabi_f2d>
 8001292:	a333      	add	r3, pc, #204	; (adr r3, 8001360 <PADS_continuous_read+0x2a0>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9ae 	bl	80005f8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ac:	f7ff face 	bl	800084c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7fe ffe8 	bl	800028c <__adddf3>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		alt=(float) ((8.314*tmoy)/(9.80665*0.028964))*logf((float)101325.0/(finalpress*1000.0));
 80012c4:	a328      	add	r3, pc, #160	; (adr r3, 8001368 <PADS_continuous_read+0x2a8>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ce:	f7ff f993 	bl	80005f8 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	a325      	add	r3, pc, #148	; (adr r3, 8001370 <PADS_continuous_read+0x2b0>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff fab4 	bl	800084c <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fc7c 	bl	8000be8 <__aeabi_d2f>
 80012f0:	ee08 0a10 	vmov	s16, r0
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <PADS_continuous_read+0x2bc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f925 	bl	8000548 <__aeabi_f2d>
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <PADS_continuous_read+0x2c0>)
 8001304:	f7ff f978 	bl	80005f8 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	a112      	add	r1, pc, #72	; (adr r1, 8001358 <PADS_continuous_read+0x298>)
 800130e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001312:	f7ff fa9b 	bl	800084c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc63 	bl	8000be8 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	ee00 3a10 	vmov	s0, r3
 8001328:	f019 f9a8 	bl	801a67c <logf>
 800132c:	eef0 7a40 	vmov.f32	s15, s0
 8001330:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <PADS_continuous_read+0x2c8>)
 8001336:	edc3 7a00 	vstr	s15, [r3]



		}

		return check;
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	b2db      	uxtb	r3, r3





}
 800133e:	4618      	mov	r0, r3
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	ecbd 8b02 	vpop	{d8}
 8001348:	bdb0      	pop	{r4, r5, r7, pc}
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	6d9e99d7 	.word	0x6d9e99d7
 8001354:	3ef99999 	.word	0x3ef99999
 8001358:	00000000 	.word	0x00000000
 800135c:	40f8bcd0 	.word	0x40f8bcd0
 8001360:	76c8b439 	.word	0x76c8b439
 8001364:	3f7a9fbe 	.word	0x3f7a9fbe
 8001368:	9ba5e354 	.word	0x9ba5e354
 800136c:	4020a0c4 	.word	0x4020a0c4
 8001370:	50527f89 	.word	0x50527f89
 8001374:	3fd22db5 	.word	0x3fd22db5
 8001378:	20000324 	.word	0x20000324
 800137c:	20000328 	.word	0x20000328
 8001380:	408f4000 	.word	0x408f4000
 8001384:	460612a4 	.word	0x460612a4
 8001388:	2000032c 	.word	0x2000032c
 800138c:	43929333 	.word	0x43929333
 8001390:	47ae147b 	.word	0x47ae147b
 8001394:	3f847ae1 	.word	0x3f847ae1

08001398 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ae:	4b38      	ldr	r3, [pc, #224]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013b0:	4a38      	ldr	r2, [pc, #224]	; (8001494 <MX_ADC1_Init+0xfc>)
 80013b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013b4:	4b36      	ldr	r3, [pc, #216]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ba:	4b35      	ldr	r3, [pc, #212]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013c6:	4b32      	ldr	r3, [pc, #200]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013cc:	4b30      	ldr	r3, [pc, #192]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013ce:	2204      	movs	r2, #4
 80013d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013d2:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013da:	2201      	movs	r2, #1
 80013dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013e0:	2203      	movs	r2, #3
 80013e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013ee:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013f4:	4b26      	ldr	r3, [pc, #152]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <MX_ADC1_Init+0xf8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <MX_ADC1_Init+0xf8>)
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <MX_ADC1_Init+0xf8>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001412:	481f      	ldr	r0, [pc, #124]	; (8001490 <MX_ADC1_Init+0xf8>)
 8001414:	f005 fefe 	bl	8007214 <HAL_ADC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800141e:	f000 fd62 	bl	8001ee6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <MX_ADC1_Init+0x100>)
 8001424:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001426:	2306      	movs	r3, #6
 8001428:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800142a:	2307      	movs	r3, #7
 800142c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800142e:	237f      	movs	r3, #127	; 0x7f
 8001430:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001432:	2304      	movs	r3, #4
 8001434:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	4619      	mov	r1, r3
 800143e:	4814      	ldr	r0, [pc, #80]	; (8001490 <MX_ADC1_Init+0xf8>)
 8001440:	f006 fa80 	bl	8007944 <HAL_ADC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800144a:	f000 fd4c 	bl	8001ee6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <MX_ADC1_Init+0x104>)
 8001450:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001452:	230c      	movs	r3, #12
 8001454:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4619      	mov	r1, r3
 800145a:	480d      	ldr	r0, [pc, #52]	; (8001490 <MX_ADC1_Init+0xf8>)
 800145c:	f006 fa72 	bl	8007944 <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001466:	f000 fd3e 	bl	8001ee6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <MX_ADC1_Init+0x108>)
 800146c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800146e:	2312      	movs	r3, #18
 8001470:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001472:	463b      	mov	r3, r7
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_ADC1_Init+0xf8>)
 8001478:	f006 fa64 	bl	8007944 <HAL_ADC_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001482:	f000 fd30 	bl	8001ee6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000338 	.word	0x20000338
 8001494:	50040000 	.word	0x50040000
 8001498:	80000001 	.word	0x80000001
 800149c:	c7520000 	.word	0xc7520000
 80014a0:	25b00200 	.word	0x25b00200

080014a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2f      	ldr	r2, [pc, #188]	; (8001580 <HAL_ADC_MspInit+0xdc>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d157      	bne.n	8001576 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014c6:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	4a2e      	ldr	r2, [pc, #184]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4a28      	ldr	r2, [pc, #160]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014f6:	2310      	movs	r3, #16
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014fa:	230b      	movs	r3, #11
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150c:	f007 fba0 	bl	8008c50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 8001512:	4a1e      	ldr	r2, [pc, #120]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001514:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 8001530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001534:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 8001538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800154a:	480f      	ldr	r0, [pc, #60]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 800154c:	f007 f86c 	bl	8008628 <HAL_DMA_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001556:	f000 fcc6 	bl	8001ee6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 800155e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001560:	4a09      	ldr	r2, [pc, #36]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2012      	movs	r0, #18
 800156c:	f007 f817 	bl	800859e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001570:	2012      	movs	r0, #18
 8001572:	f007 f830 	bl	80085d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	50040000 	.word	0x50040000
 8001584:	40021000 	.word	0x40021000
 8001588:	2000039c 	.word	0x2000039c
 800158c:	40020008 	.word	0x40020008

08001590 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_ADC_ConvCpltCallback+0x160>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	f040 8091 	bne.w	80016c8 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80015a6:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_ADC_ConvCpltCallback+0x164>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffba 	bl	8000524 <__aeabi_i2d>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	a14a      	add	r1, pc, #296	; (adr r1, 80016e0 <HAL_ADC_ConvCpltCallback+0x150>)
 80015b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015ba:	f7ff f947 	bl	800084c <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fb0f 	bl	8000be8 <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a4a      	ldr	r2, [pc, #296]	; (80016f8 <HAL_ADC_ConvCpltCallback+0x168>)
 80015ce:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80015d0:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <HAL_ADC_ConvCpltCallback+0x16c>)
 80015d2:	ed93 7a00 	vldr	s14, [r3]
 80015d6:	4b4a      	ldr	r3, [pc, #296]	; (8001700 <HAL_ADC_ConvCpltCallback+0x170>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e0:	ee17 0a90 	vmov	r0, s15
 80015e4:	f7fe ffb0 	bl	8000548 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	4944      	ldr	r1, [pc, #272]	; (8001704 <HAL_ADC_ConvCpltCallback+0x174>)
 80015f2:	f7ff f92b 	bl	800084c <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4690      	mov	r8, r2
 80015fc:	4699      	mov	r9, r3
 80015fe:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001600:	885b      	ldrh	r3, [r3, #2]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff8e 	bl	8000524 <__aeabi_i2d>
 8001608:	4604      	mov	r4, r0
 800160a:	460d      	mov	r5, r1
 800160c:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <HAL_ADC_ConvCpltCallback+0x168>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff99 	bl	8000548 <__aeabi_f2d>
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_ADC_ConvCpltCallback+0x178>)
 800161c:	f7ff f916 	bl	800084c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4620      	mov	r0, r4
 8001626:	4629      	mov	r1, r5
 8001628:	f7fe ffe6 	bl	80005f8 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4614      	mov	r4, r2
 8001632:	461d      	mov	r5, r3
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <HAL_ADC_ConvCpltCallback+0x170>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff85 	bl	8000548 <__aeabi_f2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4620      	mov	r0, r4
 8001644:	4629      	mov	r1, r5
 8001646:	f7fe fe1f 	bl	8000288 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4640      	mov	r0, r8
 8001650:	4649      	mov	r1, r9
 8001652:	f7fe ffd1 	bl	80005f8 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fac3 	bl	8000be8 <__aeabi_d2f>
 8001662:	ee07 0a10 	vmov	s14, r0
 8001666:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001670:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001676:	889b      	ldrh	r3, [r3, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff53 	bl	8000524 <__aeabi_i2d>
 800167e:	a31a      	add	r3, pc, #104	; (adr r3, 80016e8 <HAL_ADC_ConvCpltCallback+0x158>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7ff f8e2 	bl	800084c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	f7fe fdfa 	bl	800028c <__adddf3>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4614      	mov	r4, r2
 800169e:	461d      	mov	r5, r3
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_ADC_ConvCpltCallback+0x168>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff4f 	bl	8000548 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe ffa1 	bl	80005f8 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa93 	bl	8000be8 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_ADC_ConvCpltCallback+0x180>)
 80016c6:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80016c8:	2203      	movs	r2, #3
 80016ca:	490a      	ldr	r1, [pc, #40]	; (80016f4 <HAL_ADC_ConvCpltCallback+0x164>)
 80016cc:	4811      	ldr	r0, [pc, #68]	; (8001714 <HAL_ADC_ConvCpltCallback+0x184>)
 80016ce:	f005 fee3 	bl	8007498 <HAL_ADC_Start_DMA>



}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016dc:	f3af 8000 	nop.w
 80016e0:	d70a3d70 	.word	0xd70a3d70
 80016e4:	40b36323 	.word	0x40b36323
 80016e8:	00000000 	.word	0x00000000
 80016ec:	40affe00 	.word	0x40affe00
 80016f0:	50040000 	.word	0x50040000
 80016f4:	20000748 	.word	0x20000748
 80016f8:	20000754 	.word	0x20000754
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000004 	.word	0x20000004
 8001704:	40590000 	.word	0x40590000
 8001708:	40080000 	.word	0x40080000
 800170c:	20000750 	.word	0x20000750
 8001710:	20000758 	.word	0x20000758
 8001714:	20000338 	.word	0x20000338

08001718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_DMA_Init+0x80>)
 8001720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001722:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <MX_DMA_Init+0x80>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6493      	str	r3, [r2, #72]	; 0x48
 800172a:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_DMA_Init+0x80>)
 800172c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_DMA_Init+0x80>)
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <MX_DMA_Init+0x80>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6493      	str	r3, [r2, #72]	; 0x48
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_DMA_Init+0x80>)
 8001744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	200b      	movs	r0, #11
 8001754:	f006 ff23 	bl	800859e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001758:	200b      	movs	r0, #11
 800175a:	f006 ff3c 	bl	80085d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	200c      	movs	r0, #12
 8001764:	f006 ff1b 	bl	800859e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001768:	200c      	movs	r0, #12
 800176a:	f006 ff34 	bl	80085d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	200d      	movs	r0, #13
 8001774:	f006 ff13 	bl	800859e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001778:	200d      	movs	r0, #13
 800177a:	f006 ff2c 	bl	80085d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2045      	movs	r0, #69	; 0x45
 8001784:	f006 ff0b 	bl	800859e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001788:	2045      	movs	r0, #69	; 0x45
 800178a:	f006 ff24 	bl	80085d6 <HAL_NVIC_EnableIRQ>

}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000

0800179c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b38      	ldr	r3, [pc, #224]	; (8001894 <MX_GPIO_Init+0xf8>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a37      	ldr	r2, [pc, #220]	; (8001894 <MX_GPIO_Init+0xf8>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b35      	ldr	r3, [pc, #212]	; (8001894 <MX_GPIO_Init+0xf8>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <MX_GPIO_Init+0xf8>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a31      	ldr	r2, [pc, #196]	; (8001894 <MX_GPIO_Init+0xf8>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <MX_GPIO_Init+0xf8>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2102      	movs	r1, #2
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ea:	f007 fc7d 	bl	80090e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2101      	movs	r1, #1
 80017f2:	4829      	ldr	r0, [pc, #164]	; (8001898 <MX_GPIO_Init+0xfc>)
 80017f4:	f007 fc78 	bl	80090e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017f8:	2302      	movs	r3, #2
 80017fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f007 fa1d 	bl	8008c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001816:	2301      	movs	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4619      	mov	r1, r3
 800182c:	481a      	ldr	r0, [pc, #104]	; (8001898 <MX_GPIO_Init+0xfc>)
 800182e:	f007 fa0f 	bl	8008c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001832:	2302      	movs	r3, #2
 8001834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001836:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800183a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	4814      	ldr	r0, [pc, #80]	; (8001898 <MX_GPIO_Init+0xfc>)
 8001848:	f007 fa02 	bl	8008c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800184c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001852:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001866:	f007 f9f3 	bl	8008c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2101      	movs	r1, #1
 800186e:	2007      	movs	r0, #7
 8001870:	f006 fe95 	bl	800859e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001874:	2007      	movs	r0, #7
 8001876:	f006 feae 	bl	80085d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2102      	movs	r1, #2
 800187e:	2017      	movs	r0, #23
 8001880:	f006 fe8d 	bl	800859e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001884:	2017      	movs	r0, #23
 8001886:	f006 fea6 	bl	80085d6 <HAL_NVIC_EnableIRQ>

}
 800188a:	bf00      	nop
 800188c:	3720      	adds	r7, #32
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	48000400 	.word	0x48000400

0800189c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_I2C1_Init+0x74>)
 80018a2:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <MX_I2C1_Init+0x78>)
 80018a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_I2C1_Init+0x74>)
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <MX_I2C1_Init+0x7c>)
 80018aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_I2C1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_I2C1_Init+0x74>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_I2C1_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_I2C1_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_I2C1_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_I2C1_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_I2C1_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d6:	480e      	ldr	r0, [pc, #56]	; (8001910 <MX_I2C1_Init+0x74>)
 80018d8:	f007 fc36 	bl	8009148 <HAL_I2C_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018e2:	f000 fb00 	bl	8001ee6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4809      	ldr	r0, [pc, #36]	; (8001910 <MX_I2C1_Init+0x74>)
 80018ea:	f008 f9dd 	bl	8009ca8 <HAL_I2CEx_ConfigAnalogFilter>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018f4:	f000 faf7 	bl	8001ee6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_I2C1_Init+0x74>)
 80018fc:	f008 fa1f 	bl	8009d3e <HAL_I2CEx_ConfigDigitalFilter>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001906:	f000 faee 	bl	8001ee6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200003e4 	.word	0x200003e4
 8001914:	40005400 	.word	0x40005400
 8001918:	00202538 	.word	0x00202538

0800191c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <MX_I2C3_Init+0x7c>)
 8001922:	4a1e      	ldr	r2, [pc, #120]	; (800199c <MX_I2C3_Init+0x80>)
 8001924:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_I2C3_Init+0x7c>)
 8001928:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <MX_I2C3_Init+0x84>)
 800192a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <MX_I2C3_Init+0x7c>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <MX_I2C3_Init+0x7c>)
 8001934:	2201      	movs	r2, #1
 8001936:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_I2C3_Init+0x7c>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <MX_I2C3_Init+0x7c>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_I2C3_Init+0x7c>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_I2C3_Init+0x7c>)
 800194c:	2200      	movs	r2, #0
 800194e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C3_Init+0x7c>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001956:	4810      	ldr	r0, [pc, #64]	; (8001998 <MX_I2C3_Init+0x7c>)
 8001958:	f007 fbf6 	bl	8009148 <HAL_I2C_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001962:	f000 fac0 	bl	8001ee6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001966:	2100      	movs	r1, #0
 8001968:	480b      	ldr	r0, [pc, #44]	; (8001998 <MX_I2C3_Init+0x7c>)
 800196a:	f008 f99d 	bl	8009ca8 <HAL_I2CEx_ConfigAnalogFilter>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001974:	f000 fab7 	bl	8001ee6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001978:	2100      	movs	r1, #0
 800197a:	4807      	ldr	r0, [pc, #28]	; (8001998 <MX_I2C3_Init+0x7c>)
 800197c:	f008 f9df 	bl	8009d3e <HAL_I2CEx_ConfigDigitalFilter>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001986:	f000 faae 	bl	8001ee6 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 800198a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800198e:	f008 fa23 	bl	8009dd8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000438 	.word	0x20000438
 800199c:	40005c00 	.word	0x40005c00
 80019a0:	00100618 	.word	0x00100618

080019a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0a2      	sub	sp, #136	; 0x88
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	2254      	movs	r2, #84	; 0x54
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f016 f80c 	bl	80179e2 <memset>
  if(i2cHandle->Instance==I2C1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <HAL_I2C_MspInit+0x16c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d13a      	bne.n	8001a4a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019d4:	2340      	movs	r3, #64	; 0x40
 80019d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019d8:	2300      	movs	r3, #0
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00a fe43 	bl	800c66c <HAL_RCCEx_PeriphCLKConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019ec:	f000 fa7b 	bl	8001ee6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b48      	ldr	r3, [pc, #288]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	4a47      	ldr	r2, [pc, #284]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fc:	4b45      	ldr	r3, [pc, #276]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a0c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0e:	2312      	movs	r3, #18
 8001a10:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2c:	f007 f910 	bl	8008c50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a30:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	4a37      	ldr	r2, [pc, #220]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3c:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a48:	e05d      	b.n	8001b06 <HAL_I2C_MspInit+0x162>
  else if(i2cHandle->Instance==I2C3)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a32      	ldr	r2, [pc, #200]	; (8001b18 <HAL_I2C_MspInit+0x174>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d158      	bne.n	8001b06 <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a58:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8001a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00a fe01 	bl	800c66c <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001a70:	f000 fa39 	bl	8001ee6 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a78:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa8:	2312      	movs	r3, #18
 8001aaa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f007 f8c3 	bl	8008c50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aca:	2310      	movs	r3, #16
 8001acc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ace:	2312      	movs	r3, #18
 8001ad0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001adc:	2304      	movs	r3, #4
 8001ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <HAL_I2C_MspInit+0x178>)
 8001aea:	f007 f8b1 	bl	8008c50 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001af4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001af8:	6593      	str	r3, [r2, #88]	; 0x58
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_I2C_MspInit+0x170>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
}
 8001b06:	bf00      	nop
 8001b08:	3788      	adds	r7, #136	; 0x88
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40005400 	.word	0x40005400
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40005c00 	.word	0x40005c00
 8001b1c:	48000400 	.word	0x48000400

08001b20 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <HAL_I2C_MspDeInit+0x68>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d112      	bne.n	8001b58 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_I2C_MspDeInit+0x6c>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <HAL_I2C_MspDeInit+0x6c>)
 8001b38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b3c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8001b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f007 f9ed 	bl	8008f24 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8001b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b52:	f007 f9e7 	bl	8008f24 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001b56:	e013      	b.n	8001b80 <HAL_I2C_MspDeInit+0x60>
  else if(i2cHandle->Instance==I2C3)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_I2C_MspDeInit+0x70>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d10e      	bne.n	8001b80 <HAL_I2C_MspDeInit+0x60>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_I2C_MspDeInit+0x6c>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_I2C_MspDeInit+0x6c>)
 8001b68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b6c:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f007 f9d6 	bl	8008f24 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8001b78:	2110      	movs	r1, #16
 8001b7a:	4806      	ldr	r0, [pc, #24]	; (8001b94 <HAL_I2C_MspDeInit+0x74>)
 8001b7c:	f007 f9d2 	bl	8008f24 <HAL_GPIO_DeInit>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40005c00 	.word	0x40005c00
 8001b94:	48000400 	.word	0x48000400

08001b98 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba8:	d130      	bne.n	8001c0c <HAL_GPIO_EXTI_Callback+0x74>

		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8)== GPIO_PIN_RESET){
 8001baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb2:	f007 fa81 	bl	80090b8 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x38>

					boutonAtime=0;
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 8001bc2:	f005 f91d 	bl	8006e00 <HAL_GetTick>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e010      	b.n	8001bf2 <HAL_GPIO_EXTI_Callback+0x5a>


				}
				else{
					BTN_A++;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001bd8:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8001bda:	f005 f911 	bl	8006e00 <HAL_GetTick>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001bea:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001bfa:	db07      	blt.n	8001c0c <HAL_GPIO_EXTI_Callback+0x74>
					BTN_A_LONG++;
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_GPIO_EXTI_Callback+0xec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	4a20      	ldr	r2, [pc, #128]	; (8001c84 <HAL_GPIO_EXTI_Callback+0xec>)
 8001c04:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_1){
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d12e      	bne.n	8001c70 <HAL_GPIO_EXTI_Callback+0xd8>

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)== GPIO_PIN_RESET){
 8001c12:	2102      	movs	r1, #2
 8001c14:	481c      	ldr	r0, [pc, #112]	; (8001c88 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001c16:	f007 fa4f 	bl	80090b8 <HAL_GPIO_ReadPin>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_GPIO_EXTI_Callback+0x9c>

			boutonBtime=0;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8001c26:	f005 f8eb 	bl	8006e00 <HAL_GetTick>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e010      	b.n	8001c56 <HAL_GPIO_EXTI_Callback+0xbe>


		}
		else{
			BTN_B++;
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001c3c:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 8001c3e:	f005 f8df 	bl	8006e00 <HAL_GetTick>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001c4e:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001c5e:	db07      	blt.n	8001c70 <HAL_GPIO_EXTI_Callback+0xd8>
			BTN_B_LONG++;
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x100>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x100>)
 8001c68:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
		}



	}
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000b54 	.word	0x20000b54
 8001c7c:	20000b5c 	.word	0x20000b5c
 8001c80:	20000720 	.word	0x20000720
 8001c84:	20000b68 	.word	0x20000b68
 8001c88:	48000400 	.word	0x48000400
 8001c8c:	20000b58 	.word	0x20000b58
 8001c90:	20000b60 	.word	0x20000b60
 8001c94:	20000724 	.word	0x20000724
 8001c98:	20000b64 	.word	0x20000b64

08001c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca2:	f005 f844 	bl	8006d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca6:	f000 f89d 	bl	8001de4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001caa:	f000 f8ee 	bl	8001e8a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cae:	f7ff fd75 	bl	800179c <MX_GPIO_Init>
  MX_DMA_Init();
 8001cb2:	f7ff fd31 	bl	8001718 <MX_DMA_Init>
  MX_I2C3_Init();
 8001cb6:	f7ff fe31 	bl	800191c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001cba:	f004 fde3 	bl	8006884 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001cbe:	f7ff fb6b 	bl	8001398 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001cc2:	f004 fad9 	bl	8006278 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001cc6:	f013 f949 	bl	8014f5c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001cca:	f7ff fde7 	bl	800189c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001cce:	f004 fe05 	bl	80068dc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001cd2:	f000 fda1 	bl	8002818 <MX_SPI1_Init>
  MX_TIM7_Init();
 8001cd6:	f004 fb53 	bl	8006380 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001cda:	f004 fb1b 	bl	8006314 <MX_TIM6_Init>
  MX_TIM15_Init();
 8001cde:	f004 fb87 	bl	80063f0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Abort(&huart1);
 8001ce2:	4830      	ldr	r0, [pc, #192]	; (8001da4 <main+0x108>)
 8001ce4:	f00c fe7c 	bl	800e9e0 <HAL_UART_Abort>
  HAL_UART_DeInit(&huart1);
 8001ce8:	482e      	ldr	r0, [pc, #184]	; (8001da4 <main+0x108>)
 8001cea:	f00c fd65 	bl	800e7b8 <HAL_UART_DeInit>

  HAL_I2C_DeInit(&hi2c1);
 8001cee:	482e      	ldr	r0, [pc, #184]	; (8001da8 <main+0x10c>)
 8001cf0:	f007 fac5 	bl	800927e <HAL_I2C_DeInit>



	ssd1306_Init();
 8001cf4:	f001 f890 	bl	8002e18 <ssd1306_Init>

	HAL_Delay(10);
 8001cf8:	200a      	movs	r0, #10
 8001cfa:	f005 f88d 	bl	8006e18 <HAL_Delay>
	ssd1306_Fill(Black);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f001 f8f4 	bl	8002eec <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 8001d04:	2301      	movs	r3, #1
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2340      	movs	r3, #64	; 0x40
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2340      	movs	r3, #64	; 0x40
 8001d0e:	4a27      	ldr	r2, [pc, #156]	; (8001dac <main+0x110>)
 8001d10:	2120      	movs	r1, #32
 8001d12:	2020      	movs	r0, #32
 8001d14:	f001 fbbc 	bl	8003490 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001d18:	f001 f900 	bl	8002f1c <ssd1306_UpdateScreen>


	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	4924      	ldr	r1, [pc, #144]	; (8001db0 <main+0x114>)
 8001d20:	4824      	ldr	r0, [pc, #144]	; (8001db4 <main+0x118>)
 8001d22:	f005 fbb9 	bl	8007498 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001d26:	4824      	ldr	r0, [pc, #144]	; (8001db8 <main+0x11c>)
 8001d28:	f00c f8aa 	bl	800de80 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim15);
 8001d2c:	4823      	ldr	r0, [pc, #140]	; (8001dbc <main+0x120>)
 8001d2e:	f00c f8f3 	bl	800df18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001d32:	4823      	ldr	r0, [pc, #140]	; (8001dc0 <main+0x124>)
 8001d34:	f00c f8f0 	bl	800df18 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d40:	f007 f9d2 	bl	80090e8 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001d44:	2064      	movs	r0, #100	; 0x64
 8001d46:	f005 f867 	bl	8006e18 <HAL_Delay>
	HAL_UART_Abort(&hlpuart1);
 8001d4a:	481e      	ldr	r0, [pc, #120]	; (8001dc4 <main+0x128>)
 8001d4c:	f00c fe48 	bl	800e9e0 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001d50:	2240      	movs	r2, #64	; 0x40
 8001d52:	491d      	ldr	r1, [pc, #116]	; (8001dc8 <main+0x12c>)
 8001d54:	481b      	ldr	r0, [pc, #108]	; (8001dc4 <main+0x128>)
 8001d56:	f00c fdf7 	bl	800e948 <HAL_UART_Receive_DMA>

	memset(flashread,'1',256);
 8001d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d5e:	2131      	movs	r1, #49	; 0x31
 8001d60:	481a      	ldr	r0, [pc, #104]	; (8001dcc <main+0x130>)
 8001d62:	f015 fe3e 	bl	80179e2 <memset>
	memset(flashwrite,'\0',256);
 8001d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <main+0x134>)
 8001d6e:	f015 fe38 	bl	80179e2 <memset>
	memset((uint8_t *)bufferscreen ,'\0',50);
 8001d72:	2232      	movs	r2, #50	; 0x32
 8001d74:	2100      	movs	r1, #0
 8001d76:	4817      	ldr	r0, [pc, #92]	; (8001dd4 <main+0x138>)
 8001d78:	f015 fe33 	bl	80179e2 <memset>

	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_0);
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <main+0x13c>)
 8001d80:	4916      	ldr	r1, [pc, #88]	; (8001ddc <main+0x140>)
 8001d82:	4817      	ldr	r0, [pc, #92]	; (8001de0 <main+0x144>)
 8001d84:	f012 ffd1 	bl	8014d2a <SPIF_Init>



	getindex();
 8001d88:	f000 ff12 	bl	8002bb0 <getindex>

	ssd1306_Fill(Black);
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f001 f8ad 	bl	8002eec <ssd1306_Fill>

	HAL_Delay(700);
 8001d92:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001d96:	f005 f83f 	bl	8006e18 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		statemachine();
 8001d9a:	f001 fe4d 	bl	8003a38 <statemachine>
		ssd1306_UpdateScreen();
 8001d9e:	f001 f8bd 	bl	8002f1c <ssd1306_UpdateScreen>
		statemachine();
 8001da2:	e7fa      	b.n	8001d9a <main+0xfe>
 8001da4:	200012d8 	.word	0x200012d8
 8001da8:	200003e4 	.word	0x200003e4
 8001dac:	0801c584 	.word	0x0801c584
 8001db0:	20000748 	.word	0x20000748
 8001db4:	20000338 	.word	0x20000338
 8001db8:	20001120 	.word	0x20001120
 8001dbc:	20001204 	.word	0x20001204
 8001dc0:	2000116c 	.word	0x2000116c
 8001dc4:	20001250 	.word	0x20001250
 8001dc8:	2000049c 	.word	0x2000049c
 8001dcc:	2000085c 	.word	0x2000085c
 8001dd0:	2000075c 	.word	0x2000075c
 8001dd4:	20000980 	.word	0x20000980
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	20000bdc 	.word	0x20000bdc
 8001de0:	20000728 	.word	0x20000728

08001de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b096      	sub	sp, #88	; 0x58
 8001de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	2244      	movs	r2, #68	; 0x44
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f015 fdf5 	bl	80179e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df8:	463b      	mov	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e0a:	f009 fd91 	bl	800b930 <HAL_PWREx_ControlVoltageScaling>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e14:	f000 f867 	bl	8001ee6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e18:	2310      	movs	r3, #16
 8001e1a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e24:	2360      	movs	r3, #96	; 0x60
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001e34:	2314      	movs	r3, #20
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e40:	2302      	movs	r3, #2
 8001e42:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f009 fdd7 	bl	800b9fc <HAL_RCC_OscConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001e54:	f000 f847 	bl	8001ee6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e58:	230f      	movs	r3, #15
 8001e5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e64:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001e68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e6e:	463b      	mov	r3, r7
 8001e70:	2102      	movs	r1, #2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f00a f9d6 	bl	800c224 <HAL_RCC_ClockConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e7e:	f000 f832 	bl	8001ee6 <Error_Handler>
  }
}
 8001e82:	bf00      	nop
 8001e84:	3758      	adds	r7, #88	; 0x58
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b096      	sub	sp, #88	; 0x58
 8001e8e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2254      	movs	r2, #84	; 0x54
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f015 fda3 	bl	80179e2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001e9c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ea0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ea2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001ea8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001eac:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001eb6:	2318      	movs	r3, #24
 8001eb8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001ec6:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001eca:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00a fbcc 	bl	800c66c <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001eda:	f000 f804 	bl	8001ee6 <Error_Handler>
  }
}
 8001ede:	bf00      	nop
 8001ee0:	3758      	adds	r7, #88	; 0x58
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eea:	b672      	cpsid	i
}
 8001eec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001eee:	e7fe      	b.n	8001eee <Error_Handler+0x8>

08001ef0 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7fe f9b9 	bl	8000270 <strlen>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d801      	bhi.n	8001f08 <gps_checksum+0x18>
 8001f04:	2300      	movs	r3, #0
 8001f06:	e038      	b.n	8001f7a <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7fe f9b1 	bl	8000270 <strlen>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	3b04      	subs	r3, #4
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe f9a8 	bl	8000270 <strlen>
 8001f20:	4603      	mov	r3, r0
 8001f22:	3b03      	subs	r3, #3
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	e00a      	b.n	8001f4c <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	4053      	eors	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7fe f98f 	bl	8000270 <strlen>
 8001f52:	4603      	mov	r3, r0
 8001f54:	1f5a      	subs	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d8ec      	bhi.n	8001f36 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	2210      	movs	r2, #16
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f014 fd63 	bl	8016a30 <strtol>
 8001f6a:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d101      	bne.n	8001f78 <gps_checksum+0x88>
        return 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001f78:	2300      	movs	r3, #0
    }
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b0b7      	sub	sp, #220	; 0xdc
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	2264      	movs	r2, #100	; 0x64
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f015 fd20 	bl	80179e2 <memset>
    char *marker = strtok(inputString, ",");
 8001fa2:	49c2      	ldr	r1, [pc, #776]	; (80022ac <nmea_GPGGA+0x328>)
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	f015 fd37 	bl	8017a18 <strtok>
 8001faa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001fae:	e027      	b.n	8002000 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001fb0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001fb4:	f7fe f95c 	bl	8000270 <strlen>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001fc0:	1c63      	adds	r3, r4, #1
 8001fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	f013 fd7a 	bl	8015ac0 <malloc>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	00a3      	lsls	r3, r4, #2
 8001fd2:	33d8      	adds	r3, #216	; 0xd8
 8001fd4:	443b      	add	r3, r7
 8001fd6:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	33d8      	adds	r3, #216	; 0xd8
 8001fe4:	443b      	add	r3, r7
 8001fe6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001fea:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f015 fe0b 	bl	8017c0a <strcpy>
        marker = strtok(NULL, ",");
 8001ff4:	49ad      	ldr	r1, [pc, #692]	; (80022ac <nmea_GPGGA+0x328>)
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f015 fd0e 	bl	8017a18 <strtok>
 8001ffc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8002000:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1d3      	bne.n	8001fb0 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8002008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	332c      	adds	r3, #44	; 0x2c
 800201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f015 fdf2 	bl	8017c0a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002026:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800202a:	2b53      	cmp	r3, #83	; 0x53
 800202c:	d004      	beq.n	8002038 <nmea_GPGGA+0xb4>
 800202e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8002032:	2b4e      	cmp	r3, #78	; 0x4e
 8002034:	f040 8159 	bne.w	80022ea <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800203e:	e010      	b.n	8002062 <nmea_GPGGA+0xde>
 8002040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002046:	4413      	add	r3, r2
 8002048:	7819      	ldrb	r1, [r3, #0]
 800204a:	f107 021c 	add.w	r2, r7, #28
 800204e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002052:	4413      	add	r3, r2
 8002054:	460a      	mov	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800205c:	3301      	adds	r3, #1
 800205e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002062:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002066:	2b01      	cmp	r3, #1
 8002068:	ddea      	ble.n	8002040 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002070:	e011      	b.n	8002096 <nmea_GPGGA+0x112>
 8002072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002074:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002078:	3302      	adds	r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	7819      	ldrb	r1, [r3, #0]
 800207e:	f107 0214 	add.w	r2, r7, #20
 8002082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002086:	4413      	add	r3, r2
 8002088:	460a      	mov	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002090:	3301      	adds	r3, #1
 8002092:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800209a:	2b05      	cmp	r3, #5
 800209c:	dde9      	ble.n	8002072 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	220a      	movs	r2, #10
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f014 fcc2 	bl	8016a30 <strtol>
 80020ac:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f014 fbd0 	bl	801685c <strtof>
 80020bc:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80020c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020cc:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80020d0:	ed9f 6a77 	vldr	s12, [pc, #476]	; 80022b0 <nmea_GPGGA+0x32c>
 80020d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020dc:	ee17 0a90 	vmov	r0, s15
 80020e0:	f7fe fa32 	bl	8000548 <__aeabi_f2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80020f2:	e010      	b.n	8002116 <nmea_GPGGA+0x192>
 80020f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020fa:	4413      	add	r3, r2
 80020fc:	7819      	ldrb	r1, [r3, #0]
 80020fe:	f107 0210 	add.w	r2, r7, #16
 8002102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002106:	4413      	add	r3, r2
 8002108:	460a      	mov	r2, r1
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002110:	3301      	adds	r3, #1
 8002112:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800211a:	2b02      	cmp	r3, #2
 800211c:	ddea      	ble.n	80020f4 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002124:	e011      	b.n	800214a <nmea_GPGGA+0x1c6>
 8002126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800212c:	3303      	adds	r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	7819      	ldrb	r1, [r3, #0]
 8002132:	f107 0208 	add.w	r2, r7, #8
 8002136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800213a:	4413      	add	r3, r2
 800213c:	460a      	mov	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002144:	3301      	adds	r3, #1
 8002146:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800214a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800214e:	2b05      	cmp	r3, #5
 8002150:	dde9      	ble.n	8002126 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002152:	f107 0310 	add.w	r3, r7, #16
 8002156:	220a      	movs	r2, #10
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f014 fc68 	bl	8016a30 <strtol>
 8002160:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002164:	f107 0308 	add.w	r3, r7, #8
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f014 fb76 	bl	801685c <strtof>
 8002170:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002174:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002178:	ee07 3a90 	vmov	s15, r3
 800217c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002180:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8002184:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 80022b0 <nmea_GPGGA+0x32c>
 8002188:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800218c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002190:	ee17 0a90 	vmov	r0, s15
 8002194:	f7fe f9d8 	bl	8000548 <__aeabi_f2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80021ac:	f7fe fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d176      	bne.n	80022a4 <nmea_GPGGA+0x320>
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80021c2:	f7fe fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d16b      	bne.n	80022a4 <nmea_GPGGA+0x320>
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <nmea_GPGGA+0x330>)
 80021d2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80021d6:	f7fe fc81 	bl	8000adc <__aeabi_dcmplt>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d061      	beq.n	80022a4 <nmea_GPGGA+0x320>
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <nmea_GPGGA+0x334>)
 80021e6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80021ea:	f7fe fc77 	bl	8000adc <__aeabi_dcmplt>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d057      	beq.n	80022a4 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80021fa:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8002204:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800220c:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8002216:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8002218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f014 fb1d 	bl	801685c <strtof>
 8002222:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8002226:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800222a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	d102      	bne.n	800223a <nmea_GPGGA+0x2b6>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	e001      	b.n	800223e <nmea_GPGGA+0x2ba>
 800223a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8002242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002244:	220a      	movs	r2, #10
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f014 fbf1 	bl	8016a30 <strtol>
 800224e:	4602      	mov	r2, r0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8002254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002256:	220a      	movs	r2, #10
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f014 fbe8 	bl	8016a30 <strtol>
 8002260:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8002264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002268:	2b00      	cmp	r3, #0
 800226a:	bfcc      	ite	gt
 800226c:	2301      	movgt	r3, #1
 800226e:	2300      	movle	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8002278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f014 faed 	bl	801685c <strtof>
 8002282:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8002286:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800228a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	d102      	bne.n	800229a <nmea_GPGGA+0x316>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	e001      	b.n	800229e <nmea_GPGGA+0x31a>
 800229a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80022a2:	e022      	b.n	80022ea <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80022aa:	e016      	b.n	80022da <nmea_GPGGA+0x356>
 80022ac:	0801c230 	.word	0x0801c230
 80022b0:	42700000 	.word	0x42700000
 80022b4:	40568000 	.word	0x40568000
 80022b8:	40668000 	.word	0x40668000
 80022bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	33d8      	adds	r3, #216	; 0xd8
 80022c4:	443b      	add	r3, r7
 80022c6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f013 fc00 	bl	8015ad0 <free>
 80022d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022d4:	3301      	adds	r3, #1
 80022d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80022da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dbea      	blt.n	80022bc <nmea_GPGGA+0x338>
            return 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e019      	b.n	800231e <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022f0:	e00e      	b.n	8002310 <nmea_GPGGA+0x38c>
 80022f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	33d8      	adds	r3, #216	; 0xd8
 80022fa:	443b      	add	r3, r7
 80022fc:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002300:	4618      	mov	r0, r3
 8002302:	f013 fbe5 	bl	8015ad0 <free>
 8002306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800230a:	3301      	adds	r3, #1
 800230c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002310:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002318:	429a      	cmp	r2, r3
 800231a:	dbea      	blt.n	80022f2 <nmea_GPGGA+0x36e>
    return 1;
 800231c:	2301      	movs	r3, #1
}
 800231e:	4618      	mov	r0, r3
 8002320:	37dc      	adds	r7, #220	; 0xdc
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	bf00      	nop

08002328 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b0a3      	sub	sp, #140	; 0x8c
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	2264      	movs	r2, #100	; 0x64
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f015 fb4e 	bl	80179e2 <memset>
    char *marker = strtok(inputString, ",");
 8002346:	493b      	ldr	r1, [pc, #236]	; (8002434 <nmea_GPGSA+0x10c>)
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f015 fb65 	bl	8017a18 <strtok>
 800234e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8002352:	e027      	b.n	80023a4 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002354:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002358:	f7fd ff8a 	bl	8000270 <strlen>
 800235c:	4603      	mov	r3, r0
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8002364:	1c63      	adds	r3, r4, #1
 8002366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800236a:	4610      	mov	r0, r2
 800236c:	f013 fba8 	bl	8015ac0 <malloc>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	00a3      	lsls	r3, r4, #2
 8002376:	3388      	adds	r3, #136	; 0x88
 8002378:	443b      	add	r3, r7
 800237a:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800237e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002382:	3b01      	subs	r3, #1
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	3388      	adds	r3, #136	; 0x88
 8002388:	443b      	add	r3, r7
 800238a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800238e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002392:	4618      	mov	r0, r3
 8002394:	f015 fc39 	bl	8017c0a <strcpy>
        marker = strtok(NULL, ",");
 8002398:	4926      	ldr	r1, [pc, #152]	; (8002434 <nmea_GPGSA+0x10c>)
 800239a:	2000      	movs	r0, #0
 800239c:	f015 fb3c 	bl	8017a18 <strtok>
 80023a0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80023a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1d3      	bne.n	8002354 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	220a      	movs	r2, #10
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f014 fb3c 	bl	8016a30 <strtol>
 80023b8:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80023ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023bc:	2b01      	cmp	r3, #1
 80023be:	bfcc      	ite	gt
 80023c0:	2301      	movgt	r3, #1
 80023c2:	2300      	movle	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 80023d0:	2303      	movs	r3, #3
 80023d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80023d4:	e00e      	b.n	80023f4 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 80023d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	3388      	adds	r3, #136	; 0x88
 80023dc:	443b      	add	r3, r7
 80023de:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <nmea_GPGSA+0xc6>
            satelliteCount++;
 80023e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023ea:	3301      	adds	r3, #1
 80023ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 80023ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f0:	3301      	adds	r3, #1
 80023f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80023f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f6:	2b0e      	cmp	r3, #14
 80023f8:	dded      	ble.n	80023d6 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8002400:	2300      	movs	r3, #0
 8002402:	677b      	str	r3, [r7, #116]	; 0x74
 8002404:	e00b      	b.n	800241e <nmea_GPGSA+0xf6>
 8002406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	3388      	adds	r3, #136	; 0x88
 800240c:	443b      	add	r3, r7
 800240e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002412:	4618      	mov	r0, r3
 8002414:	f013 fb5c 	bl	8015ad0 <free>
 8002418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241a:	3301      	adds	r3, #1
 800241c:	677b      	str	r3, [r7, #116]	; 0x74
 800241e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002424:	429a      	cmp	r2, r3
 8002426:	dbee      	blt.n	8002406 <nmea_GPGSA+0xde>
    return 1;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	378c      	adds	r7, #140	; 0x8c
 800242e:	46bd      	mov	sp, r7
 8002430:	bd90      	pop	{r4, r7, pc}
 8002432:	bf00      	nop
 8002434:	0801c230 	.word	0x0801c230

08002438 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b0a1      	sub	sp, #132	; 0x84
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	2264      	movs	r2, #100	; 0x64
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f015 fac7 	bl	80179e2 <memset>
    char *marker = strtok(inputString, ",");
 8002454:	4930      	ldr	r1, [pc, #192]	; (8002518 <nmea_GNRMC+0xe0>)
 8002456:	6838      	ldr	r0, [r7, #0]
 8002458:	f015 fade 	bl	8017a18 <strtok>
 800245c:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 800245e:	e021      	b.n	80024a4 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002460:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002462:	f7fd ff05 	bl	8000270 <strlen>
 8002466:	4603      	mov	r3, r0
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800246c:	1c63      	adds	r3, r4, #1
 800246e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002470:	4610      	mov	r0, r2
 8002472:	f013 fb25 	bl	8015ac0 <malloc>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	00a3      	lsls	r3, r4, #2
 800247c:	3380      	adds	r3, #128	; 0x80
 800247e:	443b      	add	r3, r7
 8002480:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8002484:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002486:	3b01      	subs	r3, #1
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	3380      	adds	r3, #128	; 0x80
 800248c:	443b      	add	r3, r7
 800248e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002492:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002494:	4618      	mov	r0, r3
 8002496:	f015 fbb8 	bl	8017c0a <strcpy>
        marker = strtok(NULL, ",");
 800249a:	491f      	ldr	r1, [pc, #124]	; (8002518 <nmea_GNRMC+0xe0>)
 800249c:	2000      	movs	r0, #0
 800249e:	f015 fabb 	bl	8017a18 <strtok>
 80024a2:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 80024a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1da      	bne.n	8002460 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f014 f9d4 	bl	801685c <strtof>
 80024b4:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 80024b8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80024ba:	f7fe f845 	bl	8000548 <__aeabi_f2d>
 80024be:	a314      	add	r3, pc, #80	; (adr r3, 8002510 <nmea_GNRMC+0xd8>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fe f9c2 	bl	800084c <__aeabi_ddiv>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fb8a 	bl	8000be8 <__aeabi_d2f>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80024da:	2300      	movs	r3, #0
 80024dc:	677b      	str	r3, [r7, #116]	; 0x74
 80024de:	e00b      	b.n	80024f8 <nmea_GNRMC+0xc0>
 80024e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	3380      	adds	r3, #128	; 0x80
 80024e6:	443b      	add	r3, r7
 80024e8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f013 faef 	bl	8015ad0 <free>
 80024f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f4:	3301      	adds	r3, #1
 80024f6:	677b      	str	r3, [r7, #116]	; 0x74
 80024f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024fc:	429a      	cmp	r2, r3
 80024fe:	dbef      	blt.n	80024e0 <nmea_GNRMC+0xa8>
    return 1;
 8002500:	2301      	movs	r3, #1
}
 8002502:	4618      	mov	r0, r3
 8002504:	3784      	adds	r7, #132	; 0x84
 8002506:	46bd      	mov	sp, r7
 8002508:	bd90      	pop	{r4, r7, pc}
 800250a:	bf00      	nop
 800250c:	f3af 8000 	nop.w
 8002510:	be76c8b4 	.word	0xbe76c8b4
 8002514:	3fff1a9f 	.word	0x3fff1a9f
 8002518:	0801c230 	.word	0x0801c230

0800251c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8002526:	223c      	movs	r2, #60	; 0x3c
 8002528:	2100      	movs	r1, #0
 800252a:	484e      	ldr	r0, [pc, #312]	; (8002664 <nmea_parse+0x148>)
 800252c:	f015 fa59 	bl	80179e2 <memset>
    char * token = strtok(buffer, "$");
 8002530:	494d      	ldr	r1, [pc, #308]	; (8002668 <nmea_parse+0x14c>)
 8002532:	6838      	ldr	r0, [r7, #0]
 8002534:	f015 fa70 	bl	8017a18 <strtok>
 8002538:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 800253e:	e01d      	b.n	800257c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002540:	6978      	ldr	r0, [r7, #20]
 8002542:	f7fd fe95 	bl	8000270 <strlen>
 8002546:	4603      	mov	r3, r0
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	693c      	ldr	r4, [r7, #16]
 800254c:	1c63      	adds	r3, r4, #1
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	4610      	mov	r0, r2
 8002552:	f013 fab5 	bl	8015ac0 <malloc>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	4b42      	ldr	r3, [pc, #264]	; (8002664 <nmea_parse+0x148>)
 800255c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	3b01      	subs	r3, #1
 8002564:	4a3f      	ldr	r2, [pc, #252]	; (8002664 <nmea_parse+0x148>)
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	6979      	ldr	r1, [r7, #20]
 800256c:	4618      	mov	r0, r3
 800256e:	f015 fb4c 	bl	8017c0a <strcpy>
        token = strtok(NULL, "$");
 8002572:	493d      	ldr	r1, [pc, #244]	; (8002668 <nmea_parse+0x14c>)
 8002574:	2000      	movs	r0, #0
 8002576:	f015 fa4f 	bl	8017a18 <strtok>
 800257a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1de      	bne.n	8002540 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	e052      	b.n	800262e <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002588:	4a36      	ldr	r2, [pc, #216]	; (8002664 <nmea_parse+0x148>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	4936      	ldr	r1, [pc, #216]	; (800266c <nmea_parse+0x150>)
 8002592:	4618      	mov	r0, r3
 8002594:	f015 fa9c 	bl	8017ad0 <strstr>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d044      	beq.n	8002628 <nmea_parse+0x10c>
 800259e:	4a31      	ldr	r2, [pc, #196]	; (8002664 <nmea_parse+0x148>)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fca2 	bl	8001ef0 <gps_checksum>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d03a      	beq.n	8002628 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 80025b2:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <nmea_parse+0x148>)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	492d      	ldr	r1, [pc, #180]	; (8002670 <nmea_parse+0x154>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f015 fa87 	bl	8017ad0 <strstr>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <nmea_parse+0x148>)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff30 	bl	8002438 <nmea_GNRMC>
 80025d8:	e026      	b.n	8002628 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80025da:	4a22      	ldr	r2, [pc, #136]	; (8002664 <nmea_parse+0x148>)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	4924      	ldr	r1, [pc, #144]	; (8002674 <nmea_parse+0x158>)
 80025e4:	4618      	mov	r0, r3
 80025e6:	f015 fa73 	bl	8017ad0 <strstr>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 80025f0:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <nmea_parse+0x148>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fe94 	bl	8002328 <nmea_GPGSA>
 8002600:	e012      	b.n	8002628 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8002602:	4a18      	ldr	r2, [pc, #96]	; (8002664 <nmea_parse+0x148>)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260a:	491b      	ldr	r1, [pc, #108]	; (8002678 <nmea_parse+0x15c>)
 800260c:	4618      	mov	r0, r3
 800260e:	f015 fa5f 	bl	8017ad0 <strstr>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8002618:	4a12      	ldr	r2, [pc, #72]	; (8002664 <nmea_parse+0x148>)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fcae 	bl	8001f84 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3301      	adds	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	429a      	cmp	r2, r3
 8002634:	dba8      	blt.n	8002588 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	e009      	b.n	8002650 <nmea_parse+0x134>
 800263c:	4a09      	ldr	r2, [pc, #36]	; (8002664 <nmea_parse+0x148>)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	4618      	mov	r0, r3
 8002646:	f013 fa43 	bl	8015ad0 <free>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3301      	adds	r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	dbf1      	blt.n	800263c <nmea_parse+0x120>


}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}
 8002662:	bf00      	nop
 8002664:	20000b6c 	.word	0x20000b6c
 8002668:	0801c234 	.word	0x0801c234
 800266c:	0801c238 	.word	0x0801c238
 8002670:	0801c23c 	.word	0x0801c23c
 8002674:	0801c244 	.word	0x0801c244
 8002678:	0801c24c 	.word	0x0801c24c
 800267c:	00000000 	.word	0x00000000

08002680 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 8002680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002684:	b08a      	sub	sp, #40	; 0x28
 8002686:	af00      	add	r7, sp, #0
 8002688:	ed87 0b06 	vstr	d0, [r7, #24]
 800268c:	ed87 1b04 	vstr	d1, [r7, #16]
 8002690:	ed87 2b02 	vstr	d2, [r7, #8]
 8002694:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 80026a4:	a358      	add	r3, pc, #352	; (adr r3, 8002808 <distancecalc+0x188>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ae:	f7fd ffa3 	bl	80005f8 <__aeabi_dmul>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	ec43 2b17 	vmov	d7, r2, r3
 80026ba:	eeb0 0a47 	vmov.f32	s0, s14
 80026be:	eef0 0a67 	vmov.f32	s1, s15
 80026c2:	f018 f86a 	bl	801a79a <sinl>
 80026c6:	ec55 4b10 	vmov	r4, r5, d0
 80026ca:	a34f      	add	r3, pc, #316	; (adr r3, 8002808 <distancecalc+0x188>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026d4:	f7fd ff90 	bl	80005f8 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	ec43 2b17 	vmov	d7, r2, r3
 80026e0:	eeb0 0a47 	vmov.f32	s0, s14
 80026e4:	eef0 0a67 	vmov.f32	s1, s15
 80026e8:	f018 f857 	bl	801a79a <sinl>
 80026ec:	ec53 2b10 	vmov	r2, r3, d0
 80026f0:	4620      	mov	r0, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	f7fd ff80 	bl	80005f8 <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	a341      	add	r3, pc, #260	; (adr r3, 8002808 <distancecalc+0x188>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800270a:	f7fd ff75 	bl	80005f8 <__aeabi_dmul>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	ec43 2b17 	vmov	d7, r2, r3
 8002716:	eeb0 0a47 	vmov.f32	s0, s14
 800271a:	eef0 0a67 	vmov.f32	s1, s15
 800271e:	f018 f83a 	bl	801a796 <cosl>
 8002722:	ec59 8b10 	vmov	r8, r9, d0
 8002726:	a338      	add	r3, pc, #224	; (adr r3, 8002808 <distancecalc+0x188>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002730:	f7fd ff62 	bl	80005f8 <__aeabi_dmul>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	ec43 2b17 	vmov	d7, r2, r3
 800273c:	eeb0 0a47 	vmov.f32	s0, s14
 8002740:	eef0 0a67 	vmov.f32	s1, s15
 8002744:	f018 f827 	bl	801a796 <cosl>
 8002748:	ec53 2b10 	vmov	r2, r3, d0
 800274c:	4640      	mov	r0, r8
 800274e:	4649      	mov	r1, r9
 8002750:	f7fd ff52 	bl	80005f8 <__aeabi_dmul>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4690      	mov	r8, r2
 800275a:	4699      	mov	r9, r3
 800275c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002764:	f7fd fd90 	bl	8000288 <__aeabi_dsub>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	a325      	add	r3, pc, #148	; (adr r3, 8002808 <distancecalc+0x188>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fd ff3f 	bl	80005f8 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	ec43 2b17 	vmov	d7, r2, r3
 8002782:	eeb0 0a47 	vmov.f32	s0, s14
 8002786:	eef0 0a67 	vmov.f32	s1, s15
 800278a:	f018 f804 	bl	801a796 <cosl>
 800278e:	ec53 2b10 	vmov	r2, r3, d0
 8002792:	4640      	mov	r0, r8
 8002794:	4649      	mov	r1, r9
 8002796:	f7fd ff2f 	bl	80005f8 <__aeabi_dmul>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fd fd73 	bl	800028c <__adddf3>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	ec43 2b17 	vmov	d7, r2, r3
 80027ae:	eeb0 1a47 	vmov.f32	s2, s14
 80027b2:	eef0 1a67 	vmov.f32	s3, s15
 80027b6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002800 <distancecalc+0x180>
 80027ba:	f017 ff8d 	bl	801a6d8 <fmin>
 80027be:	eeb0 7a40 	vmov.f32	s14, s0
 80027c2:	eef0 7a60 	vmov.f32	s15, s1
 80027c6:	eeb0 0a47 	vmov.f32	s0, s14
 80027ca:	eef0 0a67 	vmov.f32	s1, s15
 80027ce:	f017 ffe6 	bl	801a79e <acosl>
 80027d2:	ec51 0b10 	vmov	r0, r1, d0
 80027d6:	a30e      	add	r3, pc, #56	; (adr r3, 8002810 <distancecalc+0x190>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	f7fd ff0c 	bl	80005f8 <__aeabi_dmul>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80027e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80027f0:	eeb0 0a47 	vmov.f32	s0, s14
 80027f4:	eef0 0a67 	vmov.f32	s1, s15
 80027f8:	3728      	adds	r7, #40	; 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002800:	00000000 	.word	0x00000000
 8002804:	3ff00000 	.word	0x3ff00000
 8002808:	a2529d39 	.word	0xa2529d39
 800280c:	3f91df46 	.word	0x3f91df46
 8002810:	00000000 	.word	0x00000000
 8002814:	41584dae 	.word	0x41584dae

08002818 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <MX_SPI1_Init+0x74>)
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <MX_SPI1_Init+0x78>)
 8002820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <MX_SPI1_Init+0x74>)
 8002824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <MX_SPI1_Init+0x74>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002830:	4b16      	ldr	r3, [pc, #88]	; (800288c <MX_SPI1_Init+0x74>)
 8002832:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002836:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <MX_SPI1_Init+0x74>)
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <MX_SPI1_Init+0x74>)
 8002840:	2200      	movs	r2, #0
 8002842:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_SPI1_Init+0x74>)
 8002846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_SPI1_Init+0x74>)
 800284e:	2210      	movs	r2, #16
 8002850:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <MX_SPI1_Init+0x74>)
 8002854:	2200      	movs	r2, #0
 8002856:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <MX_SPI1_Init+0x74>)
 800285a:	2200      	movs	r2, #0
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <MX_SPI1_Init+0x74>)
 8002860:	2200      	movs	r2, #0
 8002862:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <MX_SPI1_Init+0x74>)
 8002866:	2207      	movs	r2, #7
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <MX_SPI1_Init+0x74>)
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <MX_SPI1_Init+0x74>)
 8002872:	2208      	movs	r2, #8
 8002874:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002876:	4805      	ldr	r0, [pc, #20]	; (800288c <MX_SPI1_Init+0x74>)
 8002878:	f00a f9e0 	bl	800cc3c <HAL_SPI_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002882:	f7ff fb30 	bl	8001ee6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000bdc 	.word	0x20000bdc
 8002890:	40013000 	.word	0x40013000

08002894 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a53      	ldr	r2, [pc, #332]	; (8002a00 <HAL_SPI_MspInit+0x16c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	f040 809f 	bne.w	80029f6 <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028b8:	4b52      	ldr	r3, [pc, #328]	; (8002a04 <HAL_SPI_MspInit+0x170>)
 80028ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028bc:	4a51      	ldr	r2, [pc, #324]	; (8002a04 <HAL_SPI_MspInit+0x170>)
 80028be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028c2:	6613      	str	r3, [r2, #96]	; 0x60
 80028c4:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <HAL_SPI_MspInit+0x170>)
 80028c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d0:	4b4c      	ldr	r3, [pc, #304]	; (8002a04 <HAL_SPI_MspInit+0x170>)
 80028d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d4:	4a4b      	ldr	r2, [pc, #300]	; (8002a04 <HAL_SPI_MspInit+0x170>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028dc:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <HAL_SPI_MspInit+0x170>)
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e8:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <HAL_SPI_MspInit+0x170>)
 80028ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ec:	4a45      	ldr	r2, [pc, #276]	; (8002a04 <HAL_SPI_MspInit+0x170>)
 80028ee:	f043 0302 	orr.w	r3, r3, #2
 80028f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <HAL_SPI_MspInit+0x170>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002900:	2360      	movs	r3, #96	; 0x60
 8002902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002910:	2305      	movs	r3, #5
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4619      	mov	r1, r3
 800291a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800291e:	f006 f997 	bl	8008c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002922:	2320      	movs	r3, #32
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002932:	2305      	movs	r3, #5
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4832      	ldr	r0, [pc, #200]	; (8002a08 <HAL_SPI_MspInit+0x174>)
 800293e:	f006 f987 	bl	8008c50 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002942:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 8002944:	4a32      	ldr	r2, [pc, #200]	; (8002a10 <HAL_SPI_MspInit+0x17c>)
 8002946:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002948:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 800294a:	2201      	movs	r2, #1
 800294c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800294e:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002960:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002966:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 8002974:	2200      	movs	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002978:	4824      	ldr	r0, [pc, #144]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 800297a:	f005 fe55 	bl	8008628 <HAL_DMA_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 8002984:	f7ff faaf 	bl	8001ee6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a20      	ldr	r2, [pc, #128]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 800298c:	659a      	str	r2, [r3, #88]	; 0x58
 800298e:	4a1f      	ldr	r2, [pc, #124]	; (8002a0c <HAL_SPI_MspInit+0x178>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002994:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 8002996:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <HAL_SPI_MspInit+0x184>)
 8002998:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 800299c:	2201      	movs	r2, #1
 800299e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a0:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 80029a2:	2210      	movs	r2, #16
 80029a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b2:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80029ca:	4812      	ldr	r0, [pc, #72]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 80029cc:	f005 fe2c 	bl	8008628 <HAL_DMA_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 80029d6:	f7ff fa86 	bl	8001ee6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
 80029e0:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_SPI_MspInit+0x180>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2100      	movs	r1, #0
 80029ea:	2023      	movs	r0, #35	; 0x23
 80029ec:	f005 fdd7 	bl	800859e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80029f0:	2023      	movs	r0, #35	; 0x23
 80029f2:	f005 fdf0 	bl	80085d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80029f6:	bf00      	nop
 80029f8:	3728      	adds	r7, #40	; 0x28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40013000 	.word	0x40013000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	48000400 	.word	0x48000400
 8002a0c:	20000c40 	.word	0x20000c40
 8002a10:	4002001c 	.word	0x4002001c
 8002a14:	20000c88 	.word	0x20000c88
 8002a18:	40020030 	.word	0x40020030
 8002a1c:	00000000 	.word	0x00000000

08002a20 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a24:	ed2d 8b02 	vpush	{d8}
 8002a28:	b0a7      	sub	sp, #156	; 0x9c
 8002a2a:	af16      	add	r7, sp, #88	; 0x58
 8002a2c:	6378      	str	r0, [r7, #52]	; 0x34
 8002a2e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 8002a32:	edc7 0a0b 	vstr	s1, [r7, #44]	; 0x2c
 8002a36:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a38:	627a      	str	r2, [r7, #36]	; 0x24
 8002a3a:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	63fb      	str	r3, [r7, #60]	; 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8002a42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a44:	f7fd fd80 	bl	8000548 <__aeabi_f2d>
 8002a48:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a4e:	f7fd fd7b 	bl	8000548 <__aeabi_f2d>
 8002a52:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd74 	bl	8000548 <__aeabi_f2d>
 8002a60:	a332      	add	r3, pc, #200	; (adr r3, 8002b2c <csvframe+0x10c>)
 8002a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a66:	f7fd fdc7 	bl	80005f8 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	ec43 2b18 	vmov	d8, r2, r3
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd60 	bl	8000548 <__aeabi_f2d>
 8002a88:	4682      	mov	sl, r0
 8002a8a:	468b      	mov	fp, r1
 8002a8c:	6a38      	ldr	r0, [r7, #32]
 8002a8e:	f7fd fd5b 	bl	8000548 <__aeabi_f2d>
 8002a92:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <csvframe+0xf0>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <csvframe+0xf4>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <csvframe+0xf8>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <csvframe+0xfc>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461e      	mov	r6, r3
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <csvframe+0x100>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <csvframe+0x104>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	9315      	str	r3, [sp, #84]	; 0x54
 8002ab6:	9214      	str	r2, [sp, #80]	; 0x50
 8002ab8:	9613      	str	r6, [sp, #76]	; 0x4c
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	9212      	str	r2, [sp, #72]	; 0x48
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	9211      	str	r2, [sp, #68]	; 0x44
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	9310      	str	r3, [sp, #64]	; 0x40
 8002ac6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	930c      	str	r3, [sp, #48]	; 0x30
 8002ace:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002ad2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002ad6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002ada:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002ade:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ae2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002ae6:	ed97 7b06 	vldr	d7, [r7, #24]
 8002aea:	ed8d 7b00 	vstr	d7, [sp]
 8002aee:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <csvframe+0x108>)
 8002af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002af4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002af6:	f014 fedd 	bl	80178b4 <sniprintf>
 8002afa:	63f8      	str	r0, [r7, #60]	; 0x3c
	return framesize;
 8002afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3744      	adds	r7, #68	; 0x44
 8002b02:	46bd      	mov	sp, r7
 8002b04:	ecbd 8b02 	vpop	{d8}
 8002b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b0c:	f3af 8000 	nop.w
 8002b10:	2000000a 	.word	0x2000000a
 8002b14:	20000009 	.word	0x20000009
 8002b18:	20000008 	.word	0x20000008
 8002b1c:	20000b4d 	.word	0x20000b4d
 8002b20:	20000b4e 	.word	0x20000b4e
 8002b24:	20000b4c 	.word	0x20000b4c
 8002b28:	0801c254 	.word	0x0801c254
 8002b2c:	cccccccd 	.word	0xcccccccd
 8002b30:	400ccccc 	.word	0x400ccccc

08002b34 <storeindex>:


void storeindex(void){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b09c      	sub	sp, #112	; 0x70
 8002b38:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8002b3a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002b3e:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8002b40:	463b      	mov	r3, r7
 8002b42:	2264      	movs	r2, #100	; 0x64
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f014 ff4b 	bl	80179e2 <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <storeindex+0x6c>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <storeindex+0x70>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4638      	mov	r0, r7
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <storeindex+0x74>)
 8002b5c:	2164      	movs	r1, #100	; 0x64
 8002b5e:	f014 fea9 	bl	80178b4 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002b62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	da00      	bge.n	8002b6a <storeindex+0x36>
 8002b68:	330f      	adds	r3, #15
 8002b6a:	111b      	asrs	r3, r3, #4
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fcd9 	bl	8000524 <__aeabi_i2d>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7fd ffed 	bl	8000b58 <__aeabi_d2iz>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4619      	mov	r1, r3
 8002b82:	480a      	ldr	r0, [pc, #40]	; (8002bac <storeindex+0x78>)
 8002b84:	f012 f91d 	bl	8014dc2 <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8002b88:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b8a:	463a      	mov	r2, r7
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2364      	movs	r3, #100	; 0x64
 8002b92:	4806      	ldr	r0, [pc, #24]	; (8002bac <storeindex+0x78>)
 8002b94:	f012 f998 	bl	8014ec8 <SPIF_WritePage>

}
 8002b98:	bf00      	nop
 8002b9a:	3768      	adds	r7, #104	; 0x68
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	2000095c 	.word	0x2000095c
 8002ba4:	20000960 	.word	0x20000960
 8002ba8:	0801c2a8 	.word	0x0801c2a8
 8002bac:	20000728 	.word	0x20000728

08002bb0 <getindex>:

void getindex(void){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8002bb6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002bba:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2332      	movs	r3, #50	; 0x32
 8002bc4:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <getindex+0xc4>)
 8002bc6:	482c      	ldr	r0, [pc, #176]	; (8002c78 <getindex+0xc8>)
 8002bc8:	f012 f99c 	bl	8014f04 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8002bcc:	220a      	movs	r2, #10
 8002bce:	2124      	movs	r1, #36	; 0x24
 8002bd0:	482a      	ldr	r0, [pc, #168]	; (8002c7c <getindex+0xcc>)
 8002bd2:	f014 ff06 	bl	80179e2 <memset>
	memset(numbuf2,'$',10);
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	2124      	movs	r1, #36	; 0x24
 8002bda:	4829      	ldr	r0, [pc, #164]	; (8002c80 <getindex+0xd0>)
 8002bdc:	f014 ff01 	bl	80179e2 <memset>
	int cnt=0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8002be4:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <getindex+0xc4>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	2b09      	cmp	r3, #9
 8002bee:	dc3a      	bgt.n	8002c66 <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8002bf0:	e00b      	b.n	8002c0a <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8002bf2:	4a20      	ldr	r2, [pc, #128]	; (8002c74 <getindex+0xc4>)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	7819      	ldrb	r1, [r3, #0]
 8002bfa:	4a20      	ldr	r2, [pc, #128]	; (8002c7c <getindex+0xcc>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	460a      	mov	r2, r1
 8002c02:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3301      	adds	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8002c0a:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <getindex+0xc4>)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b24      	cmp	r3, #36	; 0x24
 8002c14:	d1ed      	bne.n	8002bf2 <getindex+0x42>
		  }
		  cnt++;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8002c20:	e00e      	b.n	8002c40 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8002c22:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <getindex+0xc4>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	7819      	ldrb	r1, [r3, #0]
 8002c2a:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <getindex+0xd0>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4413      	add	r3, r2
 8002c30:	460a      	mov	r2, r1
 8002c32:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	3301      	adds	r3, #1
 8002c38:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8002c40:	4a0c      	ldr	r2, [pc, #48]	; (8002c74 <getindex+0xc4>)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4413      	add	r3, r2
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b24      	cmp	r3, #36	; 0x24
 8002c4a:	d1ea      	bne.n	8002c22 <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8002c4c:	480b      	ldr	r0, [pc, #44]	; (8002c7c <getindex+0xcc>)
 8002c4e:	f012 ff33 	bl	8015ab8 <atoi>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <getindex+0xd4>)
 8002c56:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8002c58:	4809      	ldr	r0, [pc, #36]	; (8002c80 <getindex+0xd0>)
 8002c5a:	f012 ff2d 	bl	8015ab8 <atoi>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <getindex+0xd8>)
 8002c62:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8002c64:	e001      	b.n	8002c6a <getindex+0xba>
		storeindex();
 8002c66:	f7ff ff65 	bl	8002b34 <storeindex>
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000ba8 	.word	0x20000ba8
 8002c78:	20000728 	.word	0x20000728
 8002c7c:	20000968 	.word	0x20000968
 8002c80:	20000974 	.word	0x20000974
 8002c84:	2000095c 	.word	0x2000095c
 8002c88:	20000960 	.word	0x20000960

08002c8c <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8002c96:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <writebuffertoflash+0x108>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11b      	bne.n	8002cdc <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8002ca4:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <writebuffertoflash+0x10c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d117      	bne.n	8002cdc <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8002cac:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <writebuffertoflash+0x108>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da00      	bge.n	8002cb8 <writebuffertoflash+0x2c>
 8002cb6:	330f      	adds	r3, #15
 8002cb8:	111b      	asrs	r3, r3, #4
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd fc32 	bl	8000524 <__aeabi_i2d>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f7fd ff46 	bl	8000b58 <__aeabi_d2iz>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4832      	ldr	r0, [pc, #200]	; (8002d9c <writebuffertoflash+0x110>)
 8002cd2:	f012 f876 	bl	8014dc2 <SPIF_EraseSector>
		sectoreraseen=1;
 8002cd6:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <writebuffertoflash+0x10c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <writebuffertoflash+0x114>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	2bff      	cmp	r3, #255	; 0xff
 8002ce6:	dc11      	bgt.n	8002d0c <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8002ce8:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <writebuffertoflash+0x108>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4619      	mov	r1, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	4a2b      	ldr	r2, [pc, #172]	; (8002da0 <writebuffertoflash+0x114>)
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	9200      	str	r2, [sp, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4828      	ldr	r0, [pc, #160]	; (8002d9c <writebuffertoflash+0x110>)
 8002cfa:	f012 f8e5 	bl	8014ec8 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8002cfe:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <writebuffertoflash+0x114>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <writebuffertoflash+0x114>)
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e03c      	b.n	8002d86 <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8002d0c:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <writebuffertoflash+0x108>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <writebuffertoflash+0x114>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <writebuffertoflash+0x114>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	481d      	ldr	r0, [pc, #116]	; (8002d9c <writebuffertoflash+0x110>)
 8002d28:	f012 f8ce 	bl	8014ec8 <SPIF_WritePage>
		HAL_Delay(100);
 8002d2c:	2064      	movs	r0, #100	; 0x64
 8002d2e:	f004 f873 	bl	8006e18 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8002d32:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <writebuffertoflash+0x108>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <writebuffertoflash+0x114>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d42:	461a      	mov	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	1899      	adds	r1, r3, r2
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <writebuffertoflash+0x114>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	2300      	movs	r3, #0
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	4601      	mov	r1, r0
 8002d60:	480e      	ldr	r0, [pc, #56]	; (8002d9c <writebuffertoflash+0x110>)
 8002d62:	f012 f8b1 	bl	8014ec8 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <writebuffertoflash+0x108>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <writebuffertoflash+0x108>)
 8002d6e:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <writebuffertoflash+0x10c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <writebuffertoflash+0x114>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <writebuffertoflash+0x114>)
 8002d84:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8002d86:	f7ff fed5 	bl	8002b34 <storeindex>

}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000960 	.word	0x20000960
 8002d98:	20000964 	.word	0x20000964
 8002d9c:	20000728 	.word	0x20000728
 8002da0:	2000095c 	.word	0x2000095c

08002da4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af04      	add	r7, sp, #16
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	9302      	str	r3, [sp, #8]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2178      	movs	r1, #120	; 0x78
 8002dd2:	4803      	ldr	r0, [pc, #12]	; (8002de0 <ssd1306_WriteCommand+0x2c>)
 8002dd4:	f006 fa82 	bl	80092dc <HAL_I2C_Mem_Write>
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000438 	.word	0x20000438

08002de4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af04      	add	r7, sp, #16
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f04f 32ff 	mov.w	r2, #4294967295
 8002df6:	9202      	str	r2, [sp, #8]
 8002df8:	9301      	str	r3, [sp, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2301      	movs	r3, #1
 8002e00:	2240      	movs	r2, #64	; 0x40
 8002e02:	2178      	movs	r1, #120	; 0x78
 8002e04:	4803      	ldr	r0, [pc, #12]	; (8002e14 <ssd1306_WriteData+0x30>)
 8002e06:	f006 fa69 	bl	80092dc <HAL_I2C_Mem_Write>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000438 	.word	0x20000438

08002e18 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002e1c:	f7ff ffc2 	bl	8002da4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002e20:	2064      	movs	r0, #100	; 0x64
 8002e22:	f003 fff9 	bl	8006e18 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002e26:	2000      	movs	r0, #0
 8002e28:	f000 fba0 	bl	800356c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002e2c:	2020      	movs	r0, #32
 8002e2e:	f7ff ffc1 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7ff ffbe 	bl	8002db4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e38:	20b0      	movs	r0, #176	; 0xb0
 8002e3a:	f7ff ffbb 	bl	8002db4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002e3e:	20c8      	movs	r0, #200	; 0xc8
 8002e40:	f7ff ffb8 	bl	8002db4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff ffb5 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002e4a:	2010      	movs	r0, #16
 8002e4c:	f7ff ffb2 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002e50:	2040      	movs	r0, #64	; 0x40
 8002e52:	f7ff ffaf 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002e56:	20ff      	movs	r0, #255	; 0xff
 8002e58:	f000 fb75 	bl	8003546 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002e5c:	20a1      	movs	r0, #161	; 0xa1
 8002e5e:	f7ff ffa9 	bl	8002db4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002e62:	20a6      	movs	r0, #166	; 0xa6
 8002e64:	f7ff ffa6 	bl	8002db4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002e68:	20a8      	movs	r0, #168	; 0xa8
 8002e6a:	f7ff ffa3 	bl	8002db4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002e6e:	203f      	movs	r0, #63	; 0x3f
 8002e70:	f7ff ffa0 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e74:	20a4      	movs	r0, #164	; 0xa4
 8002e76:	f7ff ff9d 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002e7a:	20d3      	movs	r0, #211	; 0xd3
 8002e7c:	f7ff ff9a 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7ff ff97 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e86:	20d5      	movs	r0, #213	; 0xd5
 8002e88:	f7ff ff94 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002e8c:	20f0      	movs	r0, #240	; 0xf0
 8002e8e:	f7ff ff91 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002e92:	20d9      	movs	r0, #217	; 0xd9
 8002e94:	f7ff ff8e 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002e98:	2022      	movs	r0, #34	; 0x22
 8002e9a:	f7ff ff8b 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002e9e:	20da      	movs	r0, #218	; 0xda
 8002ea0:	f7ff ff88 	bl	8002db4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002ea4:	2012      	movs	r0, #18
 8002ea6:	f7ff ff85 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002eaa:	20db      	movs	r0, #219	; 0xdb
 8002eac:	f7ff ff82 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002eb0:	2020      	movs	r0, #32
 8002eb2:	f7ff ff7f 	bl	8002db4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002eb6:	208d      	movs	r0, #141	; 0x8d
 8002eb8:	f7ff ff7c 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002ebc:	2014      	movs	r0, #20
 8002ebe:	f7ff ff79 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f000 fb52 	bl	800356c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f000 f80f 	bl	8002eec <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002ece:	f000 f825 	bl	8002f1c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <ssd1306_Init+0xd0>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <ssd1306_Init+0xd0>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002ede:	4b02      	ldr	r3, [pc, #8]	; (8002ee8 <ssd1306_Init+0xd0>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	711a      	strb	r2, [r3, #4]
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200010d0 	.word	0x200010d0

08002eec <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <ssd1306_Fill+0x14>
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <ssd1306_Fill+0x16>
 8002f00:	23ff      	movs	r3, #255	; 0xff
 8002f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f06:	4619      	mov	r1, r3
 8002f08:	4803      	ldr	r0, [pc, #12]	; (8002f18 <ssd1306_Fill+0x2c>)
 8002f0a:	f014 fd6a 	bl	80179e2 <memset>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000cd0 	.word	0x20000cd0

08002f1c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f22:	2300      	movs	r3, #0
 8002f24:	71fb      	strb	r3, [r7, #7]
 8002f26:	e016      	b.n	8002f56 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	3b50      	subs	r3, #80	; 0x50
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff40 	bl	8002db4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7ff ff3d 	bl	8002db4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002f3a:	2010      	movs	r0, #16
 8002f3c:	f7ff ff3a 	bl	8002db4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	01db      	lsls	r3, r3, #7
 8002f44:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <ssd1306_UpdateScreen+0x4c>)
 8002f46:	4413      	add	r3, r2
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff4a 	bl	8002de4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	3301      	adds	r3, #1
 8002f54:	71fb      	strb	r3, [r7, #7]
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	2b07      	cmp	r3, #7
 8002f5a:	d9e5      	bls.n	8002f28 <ssd1306_UpdateScreen+0xc>
    }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000cd0 	.word	0x20000cd0

08002f6c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
 8002f76:	460b      	mov	r3, r1
 8002f78:	71bb      	strb	r3, [r7, #6]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db3d      	blt.n	8003002 <ssd1306_DrawPixel+0x96>
 8002f86:	79bb      	ldrb	r3, [r7, #6]
 8002f88:	2b3f      	cmp	r3, #63	; 0x3f
 8002f8a:	d83a      	bhi.n	8003002 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002f8c:	797b      	ldrb	r3, [r7, #5]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d11a      	bne.n	8002fc8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f92:	79fa      	ldrb	r2, [r7, #7]
 8002f94:	79bb      	ldrb	r3, [r7, #6]
 8002f96:	08db      	lsrs	r3, r3, #3
 8002f98:	b2d8      	uxtb	r0, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	01db      	lsls	r3, r3, #7
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <ssd1306_DrawPixel+0xa4>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	b25a      	sxtb	r2, r3
 8002fa6:	79bb      	ldrb	r3, [r7, #6]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	b25b      	sxtb	r3, r3
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	b259      	sxtb	r1, r3
 8002fb8:	79fa      	ldrb	r2, [r7, #7]
 8002fba:	4603      	mov	r3, r0
 8002fbc:	01db      	lsls	r3, r3, #7
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b2c9      	uxtb	r1, r1
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <ssd1306_DrawPixel+0xa4>)
 8002fc4:	54d1      	strb	r1, [r2, r3]
 8002fc6:	e01d      	b.n	8003004 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002fc8:	79fa      	ldrb	r2, [r7, #7]
 8002fca:	79bb      	ldrb	r3, [r7, #6]
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	b2d8      	uxtb	r0, r3
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	01db      	lsls	r3, r3, #7
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <ssd1306_DrawPixel+0xa4>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	b25a      	sxtb	r2, r3
 8002fdc:	79bb      	ldrb	r3, [r7, #6]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	4013      	ands	r3, r2
 8002ff0:	b259      	sxtb	r1, r3
 8002ff2:	79fa      	ldrb	r2, [r7, #7]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	01db      	lsls	r3, r3, #7
 8002ff8:	4413      	add	r3, r2
 8002ffa:	b2c9      	uxtb	r1, r1
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <ssd1306_DrawPixel+0xa4>)
 8002ffe:	54d1      	strb	r1, [r2, r3]
 8003000:	e000      	b.n	8003004 <ssd1306_DrawPixel+0x98>
        return;
 8003002:	bf00      	nop
    }
}
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000cd0 	.word	0x20000cd0

08003014 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003014:	b590      	push	{r4, r7, lr}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	4604      	mov	r4, r0
 800301c:	1d38      	adds	r0, r7, #4
 800301e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003022:	461a      	mov	r2, r3
 8003024:	4623      	mov	r3, r4
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	4613      	mov	r3, r2
 800302a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b1f      	cmp	r3, #31
 8003030:	d902      	bls.n	8003038 <ssd1306_WriteChar+0x24>
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b7e      	cmp	r3, #126	; 0x7e
 8003036:	d901      	bls.n	800303c <ssd1306_WriteChar+0x28>
        return 0;
 8003038:	2300      	movs	r3, #0
 800303a:	e06d      	b.n	8003118 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800303c:	4b38      	ldr	r3, [pc, #224]	; (8003120 <ssd1306_WriteChar+0x10c>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	793b      	ldrb	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	2b80      	cmp	r3, #128	; 0x80
 8003048:	dc06      	bgt.n	8003058 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800304a:	4b35      	ldr	r3, [pc, #212]	; (8003120 <ssd1306_WriteChar+0x10c>)
 800304c:	885b      	ldrh	r3, [r3, #2]
 800304e:	461a      	mov	r2, r3
 8003050:	797b      	ldrb	r3, [r7, #5]
 8003052:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	dd01      	ble.n	800305c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003058:	2300      	movs	r3, #0
 800305a:	e05d      	b.n	8003118 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	e04c      	b.n	80030fc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	3b20      	subs	r3, #32
 8003068:	7979      	ldrb	r1, [r7, #5]
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4619      	mov	r1, r3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	440b      	add	r3, r1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e034      	b.n	80030ec <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003092:	4b23      	ldr	r3, [pc, #140]	; (8003120 <ssd1306_WriteChar+0x10c>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4413      	add	r3, r2
 800309e:	b2d8      	uxtb	r0, r3
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <ssd1306_WriteChar+0x10c>)
 80030a2:	885b      	ldrh	r3, [r3, #2]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	7bba      	ldrb	r2, [r7, #14]
 80030b0:	4619      	mov	r1, r3
 80030b2:	f7ff ff5b 	bl	8002f6c <ssd1306_DrawPixel>
 80030b6:	e016      	b.n	80030e6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <ssd1306_WriteChar+0x10c>)
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	b2d8      	uxtb	r0, r3
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <ssd1306_WriteChar+0x10c>)
 80030c8:	885b      	ldrh	r3, [r3, #2]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	b2d9      	uxtb	r1, r3
 80030d4:	7bbb      	ldrb	r3, [r7, #14]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	f7ff ff43 	bl	8002f6c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	793b      	ldrb	r3, [r7, #4]
 80030ee:	461a      	mov	r2, r3
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d3c5      	bcc.n	8003082 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	797b      	ldrb	r3, [r7, #5]
 80030fe:	461a      	mov	r2, r3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4293      	cmp	r3, r2
 8003104:	d3ad      	bcc.n	8003062 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <ssd1306_WriteChar+0x10c>)
 8003108:	881a      	ldrh	r2, [r3, #0]
 800310a:	793b      	ldrb	r3, [r7, #4]
 800310c:	b29b      	uxth	r3, r3
 800310e:	4413      	add	r3, r2
 8003110:	b29a      	uxth	r2, r3
 8003112:	4b03      	ldr	r3, [pc, #12]	; (8003120 <ssd1306_WriteChar+0x10c>)
 8003114:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003116:	7bfb      	ldrb	r3, [r7, #15]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3724      	adds	r7, #36	; 0x24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd90      	pop	{r4, r7, pc}
 8003120:	200010d0 	.word	0x200010d0

08003124 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	1d38      	adds	r0, r7, #4
 800312e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003132:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003134:	e012      	b.n	800315c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	7818      	ldrb	r0, [r3, #0]
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	1d3a      	adds	r2, r7, #4
 800313e:	ca06      	ldmia	r2, {r1, r2}
 8003140:	f7ff ff68 	bl	8003014 <ssd1306_WriteChar>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d002      	beq.n	8003156 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	e008      	b.n	8003168 <ssd1306_WriteString+0x44>
        }
        str++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3301      	adds	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e8      	bne.n	8003136 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	781b      	ldrb	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	460a      	mov	r2, r1
 800317a:	71fb      	strb	r3, [r7, #7]
 800317c:	4613      	mov	r3, r2
 800317e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	b29a      	uxth	r2, r3
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <ssd1306_SetCursor+0x2c>)
 8003186:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003188:	79bb      	ldrb	r3, [r7, #6]
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <ssd1306_SetCursor+0x2c>)
 800318e:	805a      	strh	r2, [r3, #2]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	200010d0 	.word	0x200010d0

080031a0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b089      	sub	sp, #36	; 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4604      	mov	r4, r0
 80031a8:	4608      	mov	r0, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	461a      	mov	r2, r3
 80031ae:	4623      	mov	r3, r4
 80031b0:	71fb      	strb	r3, [r7, #7]
 80031b2:	4603      	mov	r3, r0
 80031b4:	71bb      	strb	r3, [r7, #6]
 80031b6:	460b      	mov	r3, r1
 80031b8:	717b      	strb	r3, [r7, #5]
 80031ba:	4613      	mov	r3, r2
 80031bc:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80031be:	797a      	ldrb	r2, [r7, #5]
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bfb8      	it	lt
 80031c8:	425b      	neglt	r3, r3
 80031ca:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80031cc:	793a      	ldrb	r2, [r7, #4]
 80031ce:	79bb      	ldrb	r3, [r7, #6]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bfb8      	it	lt
 80031d6:	425b      	neglt	r3, r3
 80031d8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80031da:	79fa      	ldrb	r2, [r7, #7]
 80031dc:	797b      	ldrb	r3, [r7, #5]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d201      	bcs.n	80031e6 <ssd1306_Line+0x46>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e001      	b.n	80031ea <ssd1306_Line+0x4a>
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80031ec:	79ba      	ldrb	r2, [r7, #6]
 80031ee:	793b      	ldrb	r3, [r7, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d201      	bcs.n	80031f8 <ssd1306_Line+0x58>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e001      	b.n	80031fc <ssd1306_Line+0x5c>
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
 80031fc:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8003206:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800320a:	7939      	ldrb	r1, [r7, #4]
 800320c:	797b      	ldrb	r3, [r7, #5]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff feac 	bl	8002f6c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8003214:	e024      	b.n	8003260 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8003216:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800321a:	79b9      	ldrb	r1, [r7, #6]
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fea4 	bl	8002f6c <ssd1306_DrawPixel>
        error2 = error * 2;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	425b      	negs	r3, r3
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	429a      	cmp	r2, r3
 8003232:	dd08      	ble.n	8003246 <ssd1306_Line+0xa6>
            error -= deltaY;
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	4413      	add	r3, r2
 8003244:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	429a      	cmp	r2, r3
 800324c:	da08      	bge.n	8003260 <ssd1306_Line+0xc0>
            error += deltaX;
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4413      	add	r3, r2
 8003254:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	79bb      	ldrb	r3, [r7, #6]
 800325c:	4413      	add	r3, r2
 800325e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003260:	79fa      	ldrb	r2, [r7, #7]
 8003262:	797b      	ldrb	r3, [r7, #5]
 8003264:	429a      	cmp	r2, r3
 8003266:	d1d6      	bne.n	8003216 <ssd1306_Line+0x76>
 8003268:	79ba      	ldrb	r2, [r7, #6]
 800326a:	793b      	ldrb	r3, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d1d2      	bne.n	8003216 <ssd1306_Line+0x76>
        }
    }
    return;
 8003270:	bf00      	nop
}
 8003272:	3724      	adds	r7, #36	; 0x24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}

08003278 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	4604      	mov	r4, r0
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4623      	mov	r3, r4
 8003288:	71fb      	strb	r3, [r7, #7]
 800328a:	4603      	mov	r3, r0
 800328c:	71bb      	strb	r3, [r7, #6]
 800328e:	460b      	mov	r3, r1
 8003290:	717b      	strb	r3, [r7, #5]
 8003292:	4613      	mov	r3, r2
 8003294:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8003296:	797b      	ldrb	r3, [r7, #5]
 8003298:	425b      	negs	r3, r3
 800329a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80032a0:	797b      	ldrb	r3, [r7, #5]
 80032a2:	f1c3 0301 	rsb	r3, r3, #1
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	db65      	blt.n	800337e <ssd1306_DrawCircle+0x106>
 80032b2:	79bb      	ldrb	r3, [r7, #6]
 80032b4:	2b3f      	cmp	r3, #63	; 0x3f
 80032b6:	d862      	bhi.n	800337e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	79fa      	ldrb	r2, [r7, #7]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	b2d8      	uxtb	r0, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	79bb      	ldrb	r3, [r7, #6]
 80032c8:	4413      	add	r3, r2
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	793a      	ldrb	r2, [r7, #4]
 80032ce:	4619      	mov	r1, r3
 80032d0:	f7ff fe4c 	bl	8002f6c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	4413      	add	r3, r2
 80032dc:	b2d8      	uxtb	r0, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	79bb      	ldrb	r3, [r7, #6]
 80032e4:	4413      	add	r3, r2
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	793a      	ldrb	r2, [r7, #4]
 80032ea:	4619      	mov	r1, r3
 80032ec:	f7ff fe3e 	bl	8002f6c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	4413      	add	r3, r2
 80032f8:	b2d8      	uxtb	r0, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	79ba      	ldrb	r2, [r7, #6]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	793a      	ldrb	r2, [r7, #4]
 8003306:	4619      	mov	r1, r3
 8003308:	f7ff fe30 	bl	8002f6c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	79fa      	ldrb	r2, [r7, #7]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	b2d8      	uxtb	r0, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	79ba      	ldrb	r2, [r7, #6]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	793a      	ldrb	r2, [r7, #4]
 8003322:	4619      	mov	r1, r3
 8003324:	f7ff fe22 	bl	8002f6c <ssd1306_DrawPixel>
        e2 = err;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	dc13      	bgt.n	800335c <ssd1306_DrawCircle+0xe4>
            y++;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	3301      	adds	r3, #1
 8003338:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	3301      	adds	r3, #1
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	425b      	negs	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	429a      	cmp	r2, r3
 800334e:	d105      	bne.n	800335c <ssd1306_DrawCircle+0xe4>
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	429a      	cmp	r2, r3
 8003356:	dc01      	bgt.n	800335c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	429a      	cmp	r2, r3
 8003362:	dd08      	ble.n	8003376 <ssd1306_DrawCircle+0xfe>
            x++;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3301      	adds	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	3301      	adds	r3, #1
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	dd9d      	ble.n	80032b8 <ssd1306_DrawCircle+0x40>

    return;
 800337c:	e000      	b.n	8003380 <ssd1306_DrawCircle+0x108>
        return;
 800337e:	bf00      	nop
}
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	bd90      	pop	{r4, r7, pc}

08003386 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003386:	b590      	push	{r4, r7, lr}
 8003388:	b085      	sub	sp, #20
 800338a:	af02      	add	r7, sp, #8
 800338c:	4604      	mov	r4, r0
 800338e:	4608      	mov	r0, r1
 8003390:	4611      	mov	r1, r2
 8003392:	461a      	mov	r2, r3
 8003394:	4623      	mov	r3, r4
 8003396:	71fb      	strb	r3, [r7, #7]
 8003398:	4603      	mov	r3, r0
 800339a:	71bb      	strb	r3, [r7, #6]
 800339c:	460b      	mov	r3, r1
 800339e:	717b      	strb	r3, [r7, #5]
 80033a0:	4613      	mov	r3, r2
 80033a2:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80033a4:	79bc      	ldrb	r4, [r7, #6]
 80033a6:	797a      	ldrb	r2, [r7, #5]
 80033a8:	79b9      	ldrb	r1, [r7, #6]
 80033aa:	79f8      	ldrb	r0, [r7, #7]
 80033ac:	7e3b      	ldrb	r3, [r7, #24]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	4623      	mov	r3, r4
 80033b2:	f7ff fef5 	bl	80031a0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80033b6:	793c      	ldrb	r4, [r7, #4]
 80033b8:	797a      	ldrb	r2, [r7, #5]
 80033ba:	79b9      	ldrb	r1, [r7, #6]
 80033bc:	7978      	ldrb	r0, [r7, #5]
 80033be:	7e3b      	ldrb	r3, [r7, #24]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	4623      	mov	r3, r4
 80033c4:	f7ff feec 	bl	80031a0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80033c8:	793c      	ldrb	r4, [r7, #4]
 80033ca:	79fa      	ldrb	r2, [r7, #7]
 80033cc:	7939      	ldrb	r1, [r7, #4]
 80033ce:	7978      	ldrb	r0, [r7, #5]
 80033d0:	7e3b      	ldrb	r3, [r7, #24]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	4623      	mov	r3, r4
 80033d6:	f7ff fee3 	bl	80031a0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80033da:	79bc      	ldrb	r4, [r7, #6]
 80033dc:	79fa      	ldrb	r2, [r7, #7]
 80033de:	7939      	ldrb	r1, [r7, #4]
 80033e0:	79f8      	ldrb	r0, [r7, #7]
 80033e2:	7e3b      	ldrb	r3, [r7, #24]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	4623      	mov	r3, r4
 80033e8:	f7ff feda 	bl	80031a0 <ssd1306_Line>

    return;
 80033ec:	bf00      	nop
}
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd90      	pop	{r4, r7, pc}

080033f4 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4604      	mov	r4, r0
 80033fc:	4608      	mov	r0, r1
 80033fe:	4611      	mov	r1, r2
 8003400:	461a      	mov	r2, r3
 8003402:	4623      	mov	r3, r4
 8003404:	71fb      	strb	r3, [r7, #7]
 8003406:	4603      	mov	r3, r0
 8003408:	71bb      	strb	r3, [r7, #6]
 800340a:	460b      	mov	r3, r1
 800340c:	717b      	strb	r3, [r7, #5]
 800340e:	4613      	mov	r3, r2
 8003410:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8003412:	79fa      	ldrb	r2, [r7, #7]
 8003414:	797b      	ldrb	r3, [r7, #5]
 8003416:	4293      	cmp	r3, r2
 8003418:	bf28      	it	cs
 800341a:	4613      	movcs	r3, r2
 800341c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800341e:	797a      	ldrb	r2, [r7, #5]
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	4293      	cmp	r3, r2
 8003424:	bf38      	it	cc
 8003426:	4613      	movcc	r3, r2
 8003428:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800342a:	79ba      	ldrb	r2, [r7, #6]
 800342c:	793b      	ldrb	r3, [r7, #4]
 800342e:	4293      	cmp	r3, r2
 8003430:	bf28      	it	cs
 8003432:	4613      	movcs	r3, r2
 8003434:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8003436:	793a      	ldrb	r2, [r7, #4]
 8003438:	79bb      	ldrb	r3, [r7, #6]
 800343a:	4293      	cmp	r3, r2
 800343c:	bf38      	it	cc
 800343e:	4613      	movcc	r3, r2
 8003440:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003442:	7afb      	ldrb	r3, [r7, #11]
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	e017      	b.n	8003478 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003448:	7b7b      	ldrb	r3, [r7, #13]
 800344a:	73bb      	strb	r3, [r7, #14]
 800344c:	e009      	b.n	8003462 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800344e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003452:	7bf9      	ldrb	r1, [r7, #15]
 8003454:	7bbb      	ldrb	r3, [r7, #14]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fd88 	bl	8002f6c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800345c:	7bbb      	ldrb	r3, [r7, #14]
 800345e:	3301      	adds	r3, #1
 8003460:	73bb      	strb	r3, [r7, #14]
 8003462:	7bba      	ldrb	r2, [r7, #14]
 8003464:	7b3b      	ldrb	r3, [r7, #12]
 8003466:	429a      	cmp	r2, r3
 8003468:	d803      	bhi.n	8003472 <ssd1306_FillRectangle+0x7e>
 800346a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800346e:	2b00      	cmp	r3, #0
 8003470:	daed      	bge.n	800344e <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	3301      	adds	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	7abb      	ldrb	r3, [r7, #10]
 800347c:	429a      	cmp	r2, r3
 800347e:	d803      	bhi.n	8003488 <ssd1306_FillRectangle+0x94>
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b3f      	cmp	r3, #63	; 0x3f
 8003484:	d9e0      	bls.n	8003448 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8003486:	bf00      	nop
 8003488:	bf00      	nop
}
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	bd90      	pop	{r4, r7, pc}

08003490 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	603a      	str	r2, [r7, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
 800349e:	460b      	mov	r3, r1
 80034a0:	71bb      	strb	r3, [r7, #6]
 80034a2:	4613      	mov	r3, r2
 80034a4:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80034a6:	797b      	ldrb	r3, [r7, #5]
 80034a8:	3307      	adds	r3, #7
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da00      	bge.n	80034b0 <ssd1306_DrawBitmap+0x20>
 80034ae:	3307      	adds	r3, #7
 80034b0:	10db      	asrs	r3, r3, #3
 80034b2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	db3e      	blt.n	800353e <ssd1306_DrawBitmap+0xae>
 80034c0:	79bb      	ldrb	r3, [r7, #6]
 80034c2:	2b3f      	cmp	r3, #63	; 0x3f
 80034c4:	d83b      	bhi.n	800353e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80034c6:	2300      	movs	r3, #0
 80034c8:	73bb      	strb	r3, [r7, #14]
 80034ca:	e033      	b.n	8003534 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80034cc:	2300      	movs	r3, #0
 80034ce:	737b      	strb	r3, [r7, #13]
 80034d0:	e026      	b.n	8003520 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80034d2:	7b7b      	ldrb	r3, [r7, #13]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e00d      	b.n	8003500 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80034e4:	7bbb      	ldrb	r3, [r7, #14]
 80034e6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	7b7a      	ldrb	r2, [r7, #13]
 80034f0:	08d2      	lsrs	r2, r2, #3
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	4413      	add	r3, r2
 80034f6:	461a      	mov	r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8003500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003504:	2b00      	cmp	r3, #0
 8003506:	da08      	bge.n	800351a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8003508:	79fa      	ldrb	r2, [r7, #7]
 800350a:	7b7b      	ldrb	r3, [r7, #13]
 800350c:	4413      	add	r3, r2
 800350e:	b2db      	uxtb	r3, r3
 8003510:	7f3a      	ldrb	r2, [r7, #28]
 8003512:	79b9      	ldrb	r1, [r7, #6]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fd29 	bl	8002f6c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800351a:	7b7b      	ldrb	r3, [r7, #13]
 800351c:	3301      	adds	r3, #1
 800351e:	737b      	strb	r3, [r7, #13]
 8003520:	7b7a      	ldrb	r2, [r7, #13]
 8003522:	797b      	ldrb	r3, [r7, #5]
 8003524:	429a      	cmp	r2, r3
 8003526:	d3d4      	bcc.n	80034d2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003528:	7bbb      	ldrb	r3, [r7, #14]
 800352a:	3301      	adds	r3, #1
 800352c:	73bb      	strb	r3, [r7, #14]
 800352e:	79bb      	ldrb	r3, [r7, #6]
 8003530:	3301      	adds	r3, #1
 8003532:	71bb      	strb	r3, [r7, #6]
 8003534:	7bba      	ldrb	r2, [r7, #14]
 8003536:	7e3b      	ldrb	r3, [r7, #24]
 8003538:	429a      	cmp	r2, r3
 800353a:	d3c7      	bcc.n	80034cc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800353c:	e000      	b.n	8003540 <ssd1306_DrawBitmap+0xb0>
        return;
 800353e:	bf00      	nop
}
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003550:	2381      	movs	r3, #129	; 0x81
 8003552:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fc2c 	bl	8002db4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fc28 	bl	8002db4 <ssd1306_WriteCommand>
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800357c:	23af      	movs	r3, #175	; 0xaf
 800357e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <ssd1306_SetDisplayOn+0x38>)
 8003582:	2201      	movs	r2, #1
 8003584:	715a      	strb	r2, [r3, #5]
 8003586:	e004      	b.n	8003592 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003588:	23ae      	movs	r3, #174	; 0xae
 800358a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <ssd1306_SetDisplayOn+0x38>)
 800358e:	2200      	movs	r2, #0
 8003590:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fc0d 	bl	8002db4 <ssd1306_WriteCommand>
}
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200010d0 	.word	0x200010d0

080035a8 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80035b2:	60b8      	str	r0, [r7, #8]
 80035b4:	6079      	str	r1, [r7, #4]
 80035b6:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	330f      	adds	r3, #15
 80035be:	b2d8      	uxtb	r0, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	3301      	adds	r3, #1
 80035c6:	b2d9      	uxtb	r1, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	330f      	adds	r3, #15
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	3305      	adds	r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2401      	movs	r4, #1
 80035da:	9400      	str	r4, [sp, #0]
 80035dc:	f7ff fde0 	bl	80031a0 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3310      	adds	r3, #16
 80035e6:	b2d8      	uxtb	r0, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	b2d9      	uxtb	r1, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3310      	adds	r3, #16
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3305      	adds	r3, #5
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2401      	movs	r4, #1
 8003602:	9400      	str	r4, [sp, #0]
 8003604:	f7ff fdcc 	bl	80031a0 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	b2d8      	uxtb	r0, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	b2d9      	uxtb	r1, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	330e      	adds	r3, #14
 8003616:	b2da      	uxtb	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	3306      	adds	r3, #6
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2401      	movs	r4, #1
 8003622:	9400      	str	r4, [sp, #0]
 8003624:	f7ff feaf 	bl	8003386 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7fc ff8d 	bl	8000548 <__aeabi_f2d>
 800362e:	a396      	add	r3, pc, #600	; (adr r3, 8003888 <batterygauge+0x2e0>)
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f7fd fa5c 	bl	8000af0 <__aeabi_dcmple>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d02a      	beq.n	8003694 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	3302      	adds	r3, #2
 8003644:	b2d8      	uxtb	r0, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	3302      	adds	r3, #2
 800364c:	b2d9      	uxtb	r1, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	3303      	adds	r3, #3
 8003654:	b2da      	uxtb	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3304      	adds	r3, #4
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2401      	movs	r4, #1
 8003660:	9400      	str	r4, [sp, #0]
 8003662:	f7ff fe90 	bl	8003386 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d113      	bne.n	8003694 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3302      	adds	r3, #2
 8003672:	b2d8      	uxtb	r0, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3302      	adds	r3, #2
 800367a:	b2d9      	uxtb	r1, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	3303      	adds	r3, #3
 8003682:	b2da      	uxtb	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3304      	adds	r3, #4
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2401      	movs	r4, #1
 800368e:	9400      	str	r4, [sp, #0]
 8003690:	f7ff fe79 	bl	8003386 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7fc ff57 	bl	8000548 <__aeabi_f2d>
 800369a:	a37b      	add	r3, pc, #492	; (adr r3, 8003888 <batterygauge+0x2e0>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fd fa3a 	bl	8000b18 <__aeabi_dcmpgt>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d035      	beq.n	8003716 <batterygauge+0x16e>
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7fc ff4c 	bl	8000548 <__aeabi_f2d>
 80036b0:	a377      	add	r3, pc, #476	; (adr r3, 8003890 <batterygauge+0x2e8>)
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f7fd fa1b 	bl	8000af0 <__aeabi_dcmple>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d02a      	beq.n	8003716 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3302      	adds	r3, #2
 80036c6:	b2d8      	uxtb	r0, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3302      	adds	r3, #2
 80036ce:	b2d9      	uxtb	r1, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	3303      	adds	r3, #3
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	3304      	adds	r3, #4
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2401      	movs	r4, #1
 80036e2:	9400      	str	r4, [sp, #0]
 80036e4:	f7ff fe4f 	bl	8003386 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d113      	bne.n	8003716 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	3305      	adds	r3, #5
 80036f4:	b2d8      	uxtb	r0, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	3302      	adds	r3, #2
 80036fc:	b2d9      	uxtb	r1, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	3306      	adds	r3, #6
 8003704:	b2da      	uxtb	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	3304      	adds	r3, #4
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2401      	movs	r4, #1
 8003710:	9400      	str	r4, [sp, #0]
 8003712:	f7ff fe38 	bl	8003386 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7fc ff16 	bl	8000548 <__aeabi_f2d>
 800371c:	a35c      	add	r3, pc, #368	; (adr r3, 8003890 <batterygauge+0x2e8>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fd f9f9 	bl	8000b18 <__aeabi_dcmpgt>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d049      	beq.n	80037c0 <batterygauge+0x218>
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7fc ff0b 	bl	8000548 <__aeabi_f2d>
 8003732:	a359      	add	r3, pc, #356	; (adr r3, 8003898 <batterygauge+0x2f0>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fd f9da 	bl	8000af0 <__aeabi_dcmple>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d03e      	beq.n	80037c0 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	3302      	adds	r3, #2
 8003748:	b2d8      	uxtb	r0, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	3302      	adds	r3, #2
 8003750:	b2d9      	uxtb	r1, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	3303      	adds	r3, #3
 8003758:	b2da      	uxtb	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	3304      	adds	r3, #4
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2401      	movs	r4, #1
 8003764:	9400      	str	r4, [sp, #0]
 8003766:	f7ff fe0e 	bl	8003386 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	3305      	adds	r3, #5
 8003770:	b2d8      	uxtb	r0, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	3302      	adds	r3, #2
 8003778:	b2d9      	uxtb	r1, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	3306      	adds	r3, #6
 8003780:	b2da      	uxtb	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	3304      	adds	r3, #4
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2401      	movs	r4, #1
 800378c:	9400      	str	r4, [sp, #0]
 800378e:	f7ff fdfa 	bl	8003386 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d113      	bne.n	80037c0 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3308      	adds	r3, #8
 800379e:	b2d8      	uxtb	r0, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	3302      	adds	r3, #2
 80037a6:	b2d9      	uxtb	r1, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	3309      	adds	r3, #9
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	3304      	adds	r3, #4
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2401      	movs	r4, #1
 80037ba:	9400      	str	r4, [sp, #0]
 80037bc:	f7ff fde3 	bl	8003386 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7fc fec1 	bl	8000548 <__aeabi_f2d>
 80037c6:	a334      	add	r3, pc, #208	; (adr r3, 8003898 <batterygauge+0x2f0>)
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f7fd f9a4 	bl	8000b18 <__aeabi_dcmpgt>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d100      	bne.n	80037d8 <batterygauge+0x230>
	}




}
 80037d6:	e052      	b.n	800387e <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3302      	adds	r3, #2
 80037de:	b2d8      	uxtb	r0, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	3302      	adds	r3, #2
 80037e6:	b2d9      	uxtb	r1, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	3303      	adds	r3, #3
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	3304      	adds	r3, #4
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2401      	movs	r4, #1
 80037fa:	9400      	str	r4, [sp, #0]
 80037fc:	f7ff fdc3 	bl	8003386 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	3305      	adds	r3, #5
 8003806:	b2d8      	uxtb	r0, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	3302      	adds	r3, #2
 800380e:	b2d9      	uxtb	r1, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3306      	adds	r3, #6
 8003816:	b2da      	uxtb	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	3304      	adds	r3, #4
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2401      	movs	r4, #1
 8003822:	9400      	str	r4, [sp, #0]
 8003824:	f7ff fdaf 	bl	8003386 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	3308      	adds	r3, #8
 800382e:	b2d8      	uxtb	r0, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3302      	adds	r3, #2
 8003836:	b2d9      	uxtb	r1, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3309      	adds	r3, #9
 800383e:	b2da      	uxtb	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	3304      	adds	r3, #4
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2401      	movs	r4, #1
 800384a:	9400      	str	r4, [sp, #0]
 800384c:	f7ff fd9b 	bl	8003386 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d113      	bne.n	800387e <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	330b      	adds	r3, #11
 800385c:	b2d8      	uxtb	r0, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	3302      	adds	r3, #2
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	330c      	adds	r3, #12
 800386c:	b2da      	uxtb	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3304      	adds	r3, #4
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2401      	movs	r4, #1
 8003878:	9400      	str	r4, [sp, #0]
 800387a:	f7ff fd84 	bl	8003386 <ssd1306_DrawRectangle>
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bd90      	pop	{r4, r7, pc}
 8003886:	bf00      	nop
 8003888:	9999999a 	.word	0x9999999a
 800388c:	400d9999 	.word	0x400d9999
 8003890:	33333333 	.word	0x33333333
 8003894:	400f3333 	.word	0x400f3333
 8003898:	66666666 	.word	0x66666666
 800389c:	40106666 	.word	0x40106666

080038a0 <percentage>:

void percentage(float percent){
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fc fe4c 	bl	8000548 <__aeabi_f2d>
 80038b0:	a329      	add	r3, pc, #164	; (adr r3, 8003958 <percentage+0xb8>)
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f7fc fe9f 	bl	80005f8 <__aeabi_dmul>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <percentage+0xa8>)
 80038c8:	f7fc fce0 	bl	800028c <__adddf3>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	ec43 2b17 	vmov	d7, r2, r3
 80038d4:	eeb0 0a47 	vmov.f32	s0, s14
 80038d8:	eef0 0a67 	vmov.f32	s1, s15
 80038dc:	f016 ff64 	bl	801a7a8 <floor>
 80038e0:	ec53 2b10 	vmov	r2, r3, d0
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	f7fd f95e 	bl	8000ba8 <__aeabi_d2uiz>
 80038ec:	4603      	mov	r3, r0
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	2301      	movs	r3, #1
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2338      	movs	r3, #56	; 0x38
 80038f6:	2128      	movs	r1, #40	; 0x28
 80038f8:	2020      	movs	r0, #32
 80038fa:	f7ff fd7b 	bl	80033f4 <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 80038fe:	2301      	movs	r3, #1
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	2338      	movs	r3, #56	; 0x38
 8003904:	225f      	movs	r2, #95	; 0x5f
 8003906:	2128      	movs	r1, #40	; 0x28
 8003908:	2020      	movs	r0, #32
 800390a:	f7ff fd3c 	bl	8003386 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fc fe1a 	bl	8000548 <__aeabi_f2d>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	e9cd 2300 	strd	r2, r3, [sp]
 800391c:	4a0b      	ldr	r2, [pc, #44]	; (800394c <percentage+0xac>)
 800391e:	2114      	movs	r1, #20
 8003920:	480b      	ldr	r0, [pc, #44]	; (8003950 <percentage+0xb0>)
 8003922:	f013 ffc7 	bl	80178b4 <sniprintf>
	ssd1306_SetCursor(45,44);
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	202d      	movs	r0, #45	; 0x2d
 800392a:	f7ff fc21 	bl	8003170 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <percentage+0xb4>)
 8003930:	2301      	movs	r3, #1
 8003932:	ca06      	ldmia	r2, {r1, r2}
 8003934:	4806      	ldr	r0, [pc, #24]	; (8003950 <percentage+0xb0>)
 8003936:	f7ff fbf5 	bl	8003124 <ssd1306_WriteString>


}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	f3af 8000 	nop.w
 8003948:	40400000 	.word	0x40400000
 800394c:	0801c2b0 	.word	0x0801c2b0
 8003950:	20000980 	.word	0x20000980
 8003954:	2000000c 	.word	0x2000000c
 8003958:	47ae147b 	.word	0x47ae147b
 800395c:	3fe47ae1 	.word	0x3fe47ae1

08003960 <scrollText>:


uint16_t scrollText(uint8_t *text,FontDef Font,uint8_t x,uint8_t y,uint8_t widthonscreen,uint16_t offset) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	1d38      	adds	r0, r7, #4
 800396a:	e880 0006 	stmia.w	r0, {r1, r2}
 800396e:	70fb      	strb	r3, [r7, #3]
    uint8_t text_len = strlen((char *)text);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7fc fc7d 	bl	8000270 <strlen>
 8003976:	4603      	mov	r3, r0
 8003978:	77bb      	strb	r3, [r7, #30]
    uint16_t text_width = text_len * Font.FontWidth;
 800397a:	7fbb      	ldrb	r3, [r7, #30]
 800397c:	b29a      	uxth	r2, r3
 800397e:	793b      	ldrb	r3, [r7, #4]
 8003980:	b29b      	uxth	r3, r3
 8003982:	fb12 f303 	smulbb	r3, r2, r3
 8003986:	83bb      	strh	r3, [r7, #28]

        for (uint8_t i = x; i < widthonscreen; x++) {
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	76fb      	strb	r3, [r7, #27]
 800398c:	e016      	b.n	80039bc <scrollText+0x5c>
            for (uint8_t j = y; y < Font.FontHeight; y++) {
 800398e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003992:	74fb      	strb	r3, [r7, #19]
 8003994:	e00a      	b.n	80039ac <scrollText+0x4c>
                ssd1306_DrawPixel(i, j, Black);
 8003996:	7cf9      	ldrb	r1, [r7, #19]
 8003998:	7efb      	ldrb	r3, [r7, #27]
 800399a:	2200      	movs	r2, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fae5 	bl	8002f6c <ssd1306_DrawPixel>
            for (uint8_t j = y; y < Font.FontHeight; y++) {
 80039a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039a6:	3301      	adds	r3, #1
 80039a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80039ac:	797b      	ldrb	r3, [r7, #5]
 80039ae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d3ef      	bcc.n	8003996 <scrollText+0x36>
        for (uint8_t i = x; i < widthonscreen; x++) {
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	3301      	adds	r3, #1
 80039ba:	70fb      	strb	r3, [r7, #3]
 80039bc:	7efa      	ldrb	r2, [r7, #27]
 80039be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d3e3      	bcc.n	800398e <scrollText+0x2e>
            }
        }



        for (uint8_t i = 0; i < text_len; i++) {
 80039c6:	2300      	movs	r3, #0
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e02a      	b.n	8003a22 <scrollText+0xc2>
            int32_t char_x = x+widthonscreen + (i * Font.FontWidth) - offset;
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80039d2:	441a      	add	r2, r3
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
 80039d6:	7939      	ldrb	r1, [r7, #4]
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	441a      	add	r2, r3
 80039de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	617b      	str	r3, [r7, #20]

            if (char_x >= x && char_x < x+widthonscreen) {
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	db17      	blt.n	8003a1c <scrollText+0xbc>
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80039f2:	4413      	add	r3, r2
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	da10      	bge.n	8003a1c <scrollText+0xbc>
                ssd1306_SetCursor(char_x, y);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fbb3 	bl	8003170 <ssd1306_SetCursor>
                ssd1306_WriteChar(text[i], Font, White);
 8003a0a:	7ffb      	ldrb	r3, [r7, #31]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	7818      	ldrb	r0, [r3, #0]
 8003a12:	2301      	movs	r3, #1
 8003a14:	1d3a      	adds	r2, r7, #4
 8003a16:	ca06      	ldmia	r2, {r1, r2}
 8003a18:	f7ff fafc 	bl	8003014 <ssd1306_WriteChar>
        for (uint8_t i = 0; i < text_len; i++) {
 8003a1c:	7ffb      	ldrb	r3, [r7, #31]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	7ffa      	ldrb	r2, [r7, #31]
 8003a24:	7fbb      	ldrb	r3, [r7, #30]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3d0      	bcc.n	80039cc <scrollText+0x6c>
        }
        }
        return text_width;
 8003a2a:	8bbb      	ldrh	r3, [r7, #28]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	0000      	movs	r0, r0
	...

08003a38 <statemachine>:





void statemachine(void){
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3a:	ed2d 8b02 	vpush	{d8}
 8003a3e:	b08b      	sub	sp, #44	; 0x2c
 8003a40:	af04      	add	r7, sp, #16
	switch(state){
 8003a42:	4bb9      	ldr	r3, [pc, #740]	; (8003d28 <statemachine+0x2f0>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b0a      	cmp	r3, #10
 8003a48:	f202 8229 	bhi.w	8005e9e <statemachine+0x2466>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <statemachine+0x1c>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a81 	.word	0x08003a81
 8003a58:	08003e9f 	.word	0x08003e9f
 8003a5c:	08004303 	.word	0x08004303
 8003a60:	08004975 	.word	0x08004975
 8003a64:	08004a5f 	.word	0x08004a5f
 8003a68:	08004cc9 	.word	0x08004cc9
 8003a6c:	08005289 	.word	0x08005289
 8003a70:	0800578d 	.word	0x0800578d
 8003a74:	08005843 	.word	0x08005843
 8003a78:	08005b09 	.word	0x08005b09
 8003a7c:	08005d47 	.word	0x08005d47
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8003a80:	2000      	movs	r0, #0
 8003a82:	f7ff fa33 	bl	8002eec <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8003a86:	2120      	movs	r1, #32
 8003a88:	2020      	movs	r0, #32
 8003a8a:	f7ff fb71 	bl	8003170 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8003a8e:	49a7      	ldr	r1, [pc, #668]	; (8003d2c <statemachine+0x2f4>)
 8003a90:	48a7      	ldr	r0, [pc, #668]	; (8003d30 <statemachine+0x2f8>)
 8003a92:	f7fe fd43 	bl	800251c <nmea_parse>
				 if(myData.speed>=vitmax){
 8003a96:	4ba6      	ldr	r3, [pc, #664]	; (8003d30 <statemachine+0x2f8>)
 8003a98:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003a9c:	4ba5      	ldr	r3, [pc, #660]	; (8003d34 <statemachine+0x2fc>)
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	db03      	blt.n	8003ab4 <statemachine+0x7c>
									 vitmax=myData.speed;
 8003aac:	4ba0      	ldr	r3, [pc, #640]	; (8003d30 <statemachine+0x2f8>)
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	4aa0      	ldr	r2, [pc, #640]	; (8003d34 <statemachine+0x2fc>)
 8003ab2:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
								 float sec=0;
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 8003ac0:	4b9b      	ldr	r3, [pc, #620]	; (8003d30 <statemachine+0x2f8>)
 8003ac2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003ac6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ace:	d032      	beq.n	8003b36 <statemachine+0xfe>
									 pace=1000/(60*myData.speed);
 8003ad0:	4b97      	ldr	r3, [pc, #604]	; (8003d30 <statemachine+0x2f8>)
 8003ad2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003ad6:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8003d38 <statemachine+0x300>
 8003ada:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ade:	eddf 6a97 	vldr	s13, [pc, #604]	; 8003d3c <statemachine+0x304>
 8003ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae6:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 8003aea:	6978      	ldr	r0, [r7, #20]
 8003aec:	f7fc fd2c 	bl	8000548 <__aeabi_f2d>
 8003af0:	4604      	mov	r4, r0
 8003af2:	460d      	mov	r5, r1
 8003af4:	6978      	ldr	r0, [r7, #20]
 8003af6:	f7fc fd27 	bl	8000548 <__aeabi_f2d>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	ec43 2b10 	vmov	d0, r2, r3
 8003b02:	f016 fe51 	bl	801a7a8 <floor>
 8003b06:	ec53 2b10 	vmov	r2, r3, d0
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	f7fc fbbb 	bl	8000288 <__aeabi_dsub>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4610      	mov	r0, r2
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <statemachine+0x308>)
 8003b20:	f7fc fd6a 	bl	80005f8 <__aeabi_dmul>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f7fd f85c 	bl	8000be8 <__aeabi_d2f>
 8003b30:	4603      	mov	r3, r0
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	e001      	b.n	8003b3a <statemachine+0x102>
								 }
								 else {
									 pace=9999;
 8003b36:	4b83      	ldr	r3, [pc, #524]	; (8003d44 <statemachine+0x30c>)
 8003b38:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 8003b3a:	4b83      	ldr	r3, [pc, #524]	; (8003d48 <statemachine+0x310>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	f000 8114 	beq.w	8003d6c <statemachine+0x334>
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	f300 8151 	bgt.w	8003dec <statemachine+0x3b4>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <statemachine+0x11e>
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	f000 8082 	beq.w	8003c58 <statemachine+0x220>
 8003b54:	e14a      	b.n	8003dec <statemachine+0x3b4>


				 case STATE_SUMMARY:

						snprintf((char *)bufferscreen,15, "MaxV=%.1f",vitmax*3.6);
 8003b56:	4b77      	ldr	r3, [pc, #476]	; (8003d34 <statemachine+0x2fc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fcf4 	bl	8000548 <__aeabi_f2d>
 8003b60:	a36d      	add	r3, pc, #436	; (adr r3, 8003d18 <statemachine+0x2e0>)
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	f7fc fd47 	bl	80005f8 <__aeabi_dmul>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	e9cd 2300 	strd	r2, r3, [sp]
 8003b72:	4a76      	ldr	r2, [pc, #472]	; (8003d4c <statemachine+0x314>)
 8003b74:	210f      	movs	r1, #15
 8003b76:	4876      	ldr	r0, [pc, #472]	; (8003d50 <statemachine+0x318>)
 8003b78:	f013 fe9c 	bl	80178b4 <sniprintf>
						ssd1306_SetCursor(32, 32);
 8003b7c:	2120      	movs	r1, #32
 8003b7e:	2020      	movs	r0, #32
 8003b80:	f7ff faf6 	bl	8003170 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003b84:	4a73      	ldr	r2, [pc, #460]	; (8003d54 <statemachine+0x31c>)
 8003b86:	2301      	movs	r3, #1
 8003b88:	ca06      	ldmia	r2, {r1, r2}
 8003b8a:	4871      	ldr	r0, [pc, #452]	; (8003d50 <statemachine+0x318>)
 8003b8c:	f7ff faca 	bl	8003124 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "V=%0.1f",(myData.speed)*3.6);
 8003b90:	4b67      	ldr	r3, [pc, #412]	; (8003d30 <statemachine+0x2f8>)
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc fcd7 	bl	8000548 <__aeabi_f2d>
 8003b9a:	a35f      	add	r3, pc, #380	; (adr r3, 8003d18 <statemachine+0x2e0>)
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f7fc fd2a 	bl	80005f8 <__aeabi_dmul>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	e9cd 2300 	strd	r2, r3, [sp]
 8003bac:	4a6a      	ldr	r2, [pc, #424]	; (8003d58 <statemachine+0x320>)
 8003bae:	210f      	movs	r1, #15
 8003bb0:	4867      	ldr	r0, [pc, #412]	; (8003d50 <statemachine+0x318>)
 8003bb2:	f013 fe7f 	bl	80178b4 <sniprintf>
						ssd1306_SetCursor(32, 42);
 8003bb6:	212a      	movs	r1, #42	; 0x2a
 8003bb8:	2020      	movs	r0, #32
 8003bba:	f7ff fad9 	bl	8003170 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003bbe:	4a65      	ldr	r2, [pc, #404]	; (8003d54 <statemachine+0x31c>)
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	ca06      	ldmia	r2, {r1, r2}
 8003bc4:	4862      	ldr	r0, [pc, #392]	; (8003d50 <statemachine+0x318>)
 8003bc6:	f7ff faad 	bl	8003124 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 8003bca:	6978      	ldr	r0, [r7, #20]
 8003bcc:	f7fc fcbc 	bl	8000548 <__aeabi_f2d>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	ec43 2b10 	vmov	d0, r2, r3
 8003bd8:	f016 fde6 	bl	801a7a8 <floor>
 8003bdc:	eeb0 8a40 	vmov.f32	s16, s0
 8003be0:	eef0 8a60 	vmov.f32	s17, s1
 8003be4:	6938      	ldr	r0, [r7, #16]
 8003be6:	f7fc fcaf 	bl	8000548 <__aeabi_f2d>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	ec43 2b10 	vmov	d0, r2, r3
 8003bf2:	f016 fdd9 	bl	801a7a8 <floor>
 8003bf6:	eeb0 7a40 	vmov.f32	s14, s0
 8003bfa:	eef0 7a60 	vmov.f32	s15, s1
 8003bfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003c02:	ed8d 8b00 	vstr	d8, [sp]
 8003c06:	4a55      	ldr	r2, [pc, #340]	; (8003d5c <statemachine+0x324>)
 8003c08:	210f      	movs	r1, #15
 8003c0a:	4851      	ldr	r0, [pc, #324]	; (8003d50 <statemachine+0x318>)
 8003c0c:	f013 fe52 	bl	80178b4 <sniprintf>
						ssd1306_SetCursor(32, 52);
 8003c10:	2134      	movs	r1, #52	; 0x34
 8003c12:	2020      	movs	r0, #32
 8003c14:	f7ff faac 	bl	8003170 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003c18:	4a4e      	ldr	r2, [pc, #312]	; (8003d54 <statemachine+0x31c>)
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	ca06      	ldmia	r2, {r1, r2}
 8003c1e:	484c      	ldr	r0, [pc, #304]	; (8003d50 <statemachine+0x318>)
 8003c20:	f7ff fa80 	bl	8003124 <ssd1306_WriteString>



					 if(BTN_B>=1){
 8003c24:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <statemachine+0x328>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	dd08      	ble.n	8003c3e <statemachine+0x206>
								spdstate++;
 8003c2c:	4b46      	ldr	r3, [pc, #280]	; (8003d48 <statemachine+0x310>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	4b44      	ldr	r3, [pc, #272]	; (8003d48 <statemachine+0x310>)
 8003c36:	701a      	strb	r2, [r3, #0]
								BTN_B=0;
 8003c38:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <statemachine+0x328>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
					 					 				  	}
					 if(BTN_B_LONG>=1){
 8003c3e:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <statemachine+0x32c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f340 80cd 	ble.w	8003de2 <statemachine+0x3aa>
							  vitmax=0;
 8003c48:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <statemachine+0x2fc>)
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
							BTN_B_LONG=0;
 8003c50:	4b44      	ldr	r3, [pc, #272]	; (8003d64 <statemachine+0x32c>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
						}



					 break;
 8003c56:	e0c4      	b.n	8003de2 <statemachine+0x3aa>
				 case STATE_COMPTEUR:


						snprintf((char *)bufferscreen,15, "V=%0.1f",(myData.speed)*3.6);
 8003c58:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <statemachine+0x2f8>)
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fc fc73 	bl	8000548 <__aeabi_f2d>
 8003c62:	a32d      	add	r3, pc, #180	; (adr r3, 8003d18 <statemachine+0x2e0>)
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	f7fc fcc6 	bl	80005f8 <__aeabi_dmul>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	e9cd 2300 	strd	r2, r3, [sp]
 8003c74:	4a38      	ldr	r2, [pc, #224]	; (8003d58 <statemachine+0x320>)
 8003c76:	210f      	movs	r1, #15
 8003c78:	4835      	ldr	r0, [pc, #212]	; (8003d50 <statemachine+0x318>)
 8003c7a:	f013 fe1b 	bl	80178b4 <sniprintf>
						ssd1306_SetCursor(32, 54);
 8003c7e:	2136      	movs	r1, #54	; 0x36
 8003c80:	2020      	movs	r0, #32
 8003c82:	f7ff fa75 	bl	8003170 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003c86:	4a33      	ldr	r2, [pc, #204]	; (8003d54 <statemachine+0x31c>)
 8003c88:	2301      	movs	r3, #1
 8003c8a:	ca06      	ldmia	r2, {r1, r2}
 8003c8c:	4830      	ldr	r0, [pc, #192]	; (8003d50 <statemachine+0x318>)
 8003c8e:	f7ff fa49 	bl	8003124 <ssd1306_WriteString>
						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8003c92:	2301      	movs	r3, #1
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	2335      	movs	r3, #53	; 0x35
 8003c98:	225f      	movs	r2, #95	; 0x5f
 8003c9a:	2126      	movs	r1, #38	; 0x26
 8003c9c:	2020      	movs	r0, #32
 8003c9e:	f7ff fb72 	bl	8003386 <ssd1306_DrawRectangle>
						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8003ca2:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <statemachine+0x2f8>)
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fc fc4e 	bl	8000548 <__aeabi_f2d>
 8003cac:	a31c      	add	r3, pc, #112	; (adr r3, 8003d20 <statemachine+0x2e8>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f7fc fca1 	bl	80005f8 <__aeabi_dmul>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <statemachine+0x330>)
 8003cc4:	f7fc fae2 	bl	800028c <__adddf3>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	ec43 2b17 	vmov	d7, r2, r3
 8003cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8003cd4:	eef0 0a67 	vmov.f32	s1, s15
 8003cd8:	f016 fd66 	bl	801a7a8 <floor>
 8003cdc:	ec53 2b10 	vmov	r2, r3, d0
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f7fc ff38 	bl	8000b58 <__aeabi_d2iz>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	2301      	movs	r3, #1
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2335      	movs	r3, #53	; 0x35
 8003cf2:	2126      	movs	r1, #38	; 0x26
 8003cf4:	2020      	movs	r0, #32
 8003cf6:	f7ff fb7d 	bl	80033f4 <ssd1306_FillRectangle>



					 if(BTN_B>=1){
 8003cfa:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <statemachine+0x328>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	dd71      	ble.n	8003de6 <statemachine+0x3ae>
							spdstate++;
 8003d02:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <statemachine+0x310>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	3301      	adds	r3, #1
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <statemachine+0x310>)
 8003d0c:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <statemachine+0x328>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 8003d14:	e067      	b.n	8003de6 <statemachine+0x3ae>
 8003d16:	bf00      	nop
 8003d18:	cccccccd 	.word	0xcccccccd
 8003d1c:	400ccccc 	.word	0x400ccccc
 8003d20:	c28f5c29 	.word	0xc28f5c29
 8003d24:	3fe428f5 	.word	0x3fe428f5
 8003d28:	2000048c 	.word	0x2000048c
 8003d2c:	200004dc 	.word	0x200004dc
 8003d30:	200006e0 	.word	0x200006e0
 8003d34:	20000af8 	.word	0x20000af8
 8003d38:	42700000 	.word	0x42700000
 8003d3c:	447a0000 	.word	0x447a0000
 8003d40:	404e0000 	.word	0x404e0000
 8003d44:	461c3c00 	.word	0x461c3c00
 8003d48:	2000048e 	.word	0x2000048e
 8003d4c:	0801c2bc 	.word	0x0801c2bc
 8003d50:	20000980 	.word	0x20000980
 8003d54:	2000000c 	.word	0x2000000c
 8003d58:	0801c2c8 	.word	0x0801c2c8
 8003d5c:	0801c2d0 	.word	0x0801c2d0
 8003d60:	20000724 	.word	0x20000724
 8003d64:	20000b64 	.word	0x20000b64
 8003d68:	40400000 	.word	0x40400000
				 case STATE_GRAPH:


						ssd1306_SetCursor(32, 32);
 8003d6c:	2120      	movs	r1, #32
 8003d6e:	2020      	movs	r0, #32
 8003d70:	f7ff f9fe 	bl	8003170 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8003d74:	4b82      	ldr	r3, [pc, #520]	; (8003f80 <statemachine+0x548>)
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fc fbe5 	bl	8000548 <__aeabi_f2d>
 8003d7e:	a37e      	add	r3, pc, #504	; (adr r3, 8003f78 <statemachine+0x540>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f7fc fc38 	bl	80005f8 <__aeabi_dmul>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d90:	4a7c      	ldr	r2, [pc, #496]	; (8003f84 <statemachine+0x54c>)
 8003d92:	210f      	movs	r1, #15
 8003d94:	487c      	ldr	r0, [pc, #496]	; (8003f88 <statemachine+0x550>)
 8003d96:	f013 fd8d 	bl	80178b4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 8003d9a:	4a7c      	ldr	r2, [pc, #496]	; (8003f8c <statemachine+0x554>)
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	ca06      	ldmia	r2, {r1, r2}
 8003da0:	4879      	ldr	r0, [pc, #484]	; (8003f88 <statemachine+0x550>)
 8003da2:	f7ff f9bf 	bl	8003124 <ssd1306_WriteString>
						batterygauge(vbat,35, 54,1);
 8003da6:	4b7a      	ldr	r3, [pc, #488]	; (8003f90 <statemachine+0x558>)
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	2201      	movs	r2, #1
 8003dae:	2136      	movs	r1, #54	; 0x36
 8003db0:	2023      	movs	r0, #35	; 0x23
 8003db2:	eeb0 0a67 	vmov.f32	s0, s15
 8003db6:	f7ff fbf7 	bl	80035a8 <batterygauge>

					 if(BTN_B>=1){
 8003dba:	4b76      	ldr	r3, [pc, #472]	; (8003f94 <statemachine+0x55c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	dd13      	ble.n	8003dea <statemachine+0x3b2>
							spdstate--;
 8003dc2:	4b75      	ldr	r3, [pc, #468]	; (8003f98 <statemachine+0x560>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	4b73      	ldr	r3, [pc, #460]	; (8003f98 <statemachine+0x560>)
 8003dcc:	701a      	strb	r2, [r3, #0]
							spdstate--;
 8003dce:	4b72      	ldr	r3, [pc, #456]	; (8003f98 <statemachine+0x560>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4b70      	ldr	r3, [pc, #448]	; (8003f98 <statemachine+0x560>)
 8003dd8:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8003dda:	4b6e      	ldr	r3, [pc, #440]	; (8003f94 <statemachine+0x55c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8003de0:	e003      	b.n	8003dea <statemachine+0x3b2>
					 break;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <statemachine+0x3b4>
					 break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <statemachine+0x3b4>
					 break;
 8003dea:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8003dec:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <statemachine+0x564>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	dd0b      	ble.n	8003e0c <statemachine+0x3d4>
				 					state++;
 8003df4:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <statemachine+0x568>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <statemachine+0x568>)
 8003dfe:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8003e00:	4b66      	ldr	r3, [pc, #408]	; (8003f9c <statemachine+0x564>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 8003e06:	4b63      	ldr	r3, [pc, #396]	; (8003f94 <statemachine+0x55c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
				  	}
				 	 if(BTN_A_LONG>=1){
 8003e0c:	4b65      	ldr	r3, [pc, #404]	; (8003fa4 <statemachine+0x56c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f342 8030 	ble.w	8005e76 <statemachine+0x243e>
				 						 				 									state++;
 8003e16:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <statemachine+0x568>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4b60      	ldr	r3, [pc, #384]	; (8003fa0 <statemachine+0x568>)
 8003e20:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003e22:	4b5f      	ldr	r3, [pc, #380]	; (8003fa0 <statemachine+0x568>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	3301      	adds	r3, #1
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4b5d      	ldr	r3, [pc, #372]	; (8003fa0 <statemachine+0x568>)
 8003e2c:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003e2e:	4b5c      	ldr	r3, [pc, #368]	; (8003fa0 <statemachine+0x568>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	3301      	adds	r3, #1
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4b5a      	ldr	r3, [pc, #360]	; (8003fa0 <statemachine+0x568>)
 8003e38:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003e3a:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <statemachine+0x568>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4b57      	ldr	r3, [pc, #348]	; (8003fa0 <statemachine+0x568>)
 8003e44:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003e46:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <statemachine+0x568>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <statemachine+0x568>)
 8003e50:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003e52:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <statemachine+0x568>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4b51      	ldr	r3, [pc, #324]	; (8003fa0 <statemachine+0x568>)
 8003e5c:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003e5e:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <statemachine+0x568>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	3301      	adds	r3, #1
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4b4e      	ldr	r3, [pc, #312]	; (8003fa0 <statemachine+0x568>)
 8003e68:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003e6a:	4b4d      	ldr	r3, [pc, #308]	; (8003fa0 <statemachine+0x568>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4b4b      	ldr	r3, [pc, #300]	; (8003fa0 <statemachine+0x568>)
 8003e74:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003e76:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <statemachine+0x568>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4b48      	ldr	r3, [pc, #288]	; (8003fa0 <statemachine+0x568>)
 8003e80:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003e82:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <statemachine+0x568>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	3301      	adds	r3, #1
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <statemachine+0x568>)
 8003e8c:	701a      	strb	r2, [r3, #0]
				 						 				 									  			 	BTN_A_LONG=0;
 8003e8e:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <statemachine+0x56c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
				 						 				 									  			 	BTN_B=0;
 8003e94:	4b3f      	ldr	r3, [pc, #252]	; (8003f94 <statemachine+0x55c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
				 						 				 									  	}
				  break;
 8003e9a:	f001 bfec 	b.w	8005e76 <statemachine+0x243e>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f7ff f824 	bl	8002eec <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003ea4:	4940      	ldr	r1, [pc, #256]	; (8003fa8 <statemachine+0x570>)
 8003ea6:	4836      	ldr	r0, [pc, #216]	; (8003f80 <statemachine+0x548>)
 8003ea8:	f7fe fb38 	bl	800251c <nmea_parse>
			  switch(posstate){
 8003eac:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <statemachine+0x574>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	f200 8200 	bhi.w	80042b6 <statemachine+0x87e>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <statemachine+0x484>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ecd 	.word	0x08003ecd
 8003ec0:	08003fc1 	.word	0x08003fc1
 8003ec4:	0800407f 	.word	0x0800407f
 8003ec8:	0800413d 	.word	0x0800413d

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 32);
 8003ecc:	2120      	movs	r1, #32
 8003ece:	2020      	movs	r0, #32
 8003ed0:	f7ff f94e 	bl	8003170 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8003ed4:	4a36      	ldr	r2, [pc, #216]	; (8003fb0 <statemachine+0x578>)
 8003ed6:	210f      	movs	r1, #15
 8003ed8:	482b      	ldr	r0, [pc, #172]	; (8003f88 <statemachine+0x550>)
 8003eda:	f013 fceb 	bl	80178b4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003ede:	4a35      	ldr	r2, [pc, #212]	; (8003fb4 <statemachine+0x57c>)
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	ca06      	ldmia	r2, {r1, r2}
 8003ee4:	4828      	ldr	r0, [pc, #160]	; (8003f88 <statemachine+0x550>)
 8003ee6:	f7ff f91d 	bl	8003124 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <statemachine+0x548>)
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	e9cd 2300 	strd	r2, r3, [sp]
 8003ef4:	4a30      	ldr	r2, [pc, #192]	; (8003fb8 <statemachine+0x580>)
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	4823      	ldr	r0, [pc, #140]	; (8003f88 <statemachine+0x550>)
 8003efa:	f013 fcdb 	bl	80178b4 <sniprintf>
						ssd1306_SetCursor(32, 40);
 8003efe:	2128      	movs	r1, #40	; 0x28
 8003f00:	2020      	movs	r0, #32
 8003f02:	f7ff f935 	bl	8003170 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003f06:	4a2b      	ldr	r2, [pc, #172]	; (8003fb4 <statemachine+0x57c>)
 8003f08:	2301      	movs	r3, #1
 8003f0a:	ca06      	ldmia	r2, {r1, r2}
 8003f0c:	481e      	ldr	r0, [pc, #120]	; (8003f88 <statemachine+0x550>)
 8003f0e:	f7ff f909 	bl	8003124 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 8003f12:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <statemachine+0x584>)
 8003f14:	210f      	movs	r1, #15
 8003f16:	481c      	ldr	r0, [pc, #112]	; (8003f88 <statemachine+0x550>)
 8003f18:	f013 fccc 	bl	80178b4 <sniprintf>
						ssd1306_SetCursor(32, 48);
 8003f1c:	2130      	movs	r1, #48	; 0x30
 8003f1e:	2020      	movs	r0, #32
 8003f20:	f7ff f926 	bl	8003170 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003f24:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <statemachine+0x57c>)
 8003f26:	2301      	movs	r3, #1
 8003f28:	ca06      	ldmia	r2, {r1, r2}
 8003f2a:	4817      	ldr	r0, [pc, #92]	; (8003f88 <statemachine+0x550>)
 8003f2c:	f7ff f8fa 	bl	8003124 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <statemachine+0x548>)
 8003f32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f36:	e9cd 2300 	strd	r2, r3, [sp]
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <statemachine+0x580>)
 8003f3c:	210f      	movs	r1, #15
 8003f3e:	4812      	ldr	r0, [pc, #72]	; (8003f88 <statemachine+0x550>)
 8003f40:	f013 fcb8 	bl	80178b4 <sniprintf>
						ssd1306_SetCursor(32, 56);
 8003f44:	2138      	movs	r1, #56	; 0x38
 8003f46:	2020      	movs	r0, #32
 8003f48:	f7ff f912 	bl	8003170 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003f4c:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <statemachine+0x57c>)
 8003f4e:	2301      	movs	r3, #1
 8003f50:	ca06      	ldmia	r2, {r1, r2}
 8003f52:	480d      	ldr	r0, [pc, #52]	; (8003f88 <statemachine+0x550>)
 8003f54:	f7ff f8e6 	bl	8003124 <ssd1306_WriteString>
				  if(BTN_B>=1){
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <statemachine+0x55c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f340 817c 	ble.w	800425a <statemachine+0x822>
					  posstate++;
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <statemachine+0x574>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	3301      	adds	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4b10      	ldr	r3, [pc, #64]	; (8003fac <statemachine+0x574>)
 8003f6c:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <statemachine+0x55c>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]





				  break;
 8003f74:	e171      	b.n	800425a <statemachine+0x822>
 8003f76:	bf00      	nop
 8003f78:	cccccccd 	.word	0xcccccccd
 8003f7c:	400ccccc 	.word	0x400ccccc
 8003f80:	200006e0 	.word	0x200006e0
 8003f84:	0801c2e4 	.word	0x0801c2e4
 8003f88:	20000980 	.word	0x20000980
 8003f8c:	2000001c 	.word	0x2000001c
 8003f90:	20000758 	.word	0x20000758
 8003f94:	20000724 	.word	0x20000724
 8003f98:	2000048e 	.word	0x2000048e
 8003f9c:	20000720 	.word	0x20000720
 8003fa0:	2000048c 	.word	0x2000048c
 8003fa4:	20000b68 	.word	0x20000b68
 8003fa8:	200004dc 	.word	0x200004dc
 8003fac:	2000048f 	.word	0x2000048f
 8003fb0:	0801c2ec 	.word	0x0801c2ec
 8003fb4:	2000000c 	.word	0x2000000c
 8003fb8:	0801c2f8 	.word	0x0801c2f8
 8003fbc:	0801c300 	.word	0x0801c300
			  case STATE_LAT:
						ssd1306_SetCursor(32, 32);
 8003fc0:	2120      	movs	r1, #32
 8003fc2:	2020      	movs	r0, #32
 8003fc4:	f7ff f8d4 	bl	8003170 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 8003fc8:	4aa9      	ldr	r2, [pc, #676]	; (8004270 <statemachine+0x838>)
 8003fca:	210f      	movs	r1, #15
 8003fcc:	48a9      	ldr	r0, [pc, #676]	; (8004274 <statemachine+0x83c>)
 8003fce:	f013 fc71 	bl	80178b4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003fd2:	4aa9      	ldr	r2, [pc, #676]	; (8004278 <statemachine+0x840>)
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	ca06      	ldmia	r2, {r1, r2}
 8003fd8:	48a6      	ldr	r0, [pc, #664]	; (8004274 <statemachine+0x83c>)
 8003fda:	f7ff f8a3 	bl	8003124 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003fde:	4ba7      	ldr	r3, [pc, #668]	; (800427c <statemachine+0x844>)
 8003fe0:	7a1b      	ldrb	r3, [r3, #8]
 8003fe2:	4aa7      	ldr	r2, [pc, #668]	; (8004280 <statemachine+0x848>)
 8003fe4:	210f      	movs	r1, #15
 8003fe6:	48a3      	ldr	r0, [pc, #652]	; (8004274 <statemachine+0x83c>)
 8003fe8:	f013 fc64 	bl	80178b4 <sniprintf>
						ssd1306_SetCursor(32, 40);
 8003fec:	2128      	movs	r1, #40	; 0x28
 8003fee:	2020      	movs	r0, #32
 8003ff0:	f7ff f8be 	bl	8003170 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003ff4:	4aa0      	ldr	r2, [pc, #640]	; (8004278 <statemachine+0x840>)
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	ca06      	ldmia	r2, {r1, r2}
 8003ffa:	489e      	ldr	r0, [pc, #632]	; (8004274 <statemachine+0x83c>)
 8003ffc:	f7ff f892 	bl	8003124 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8004000:	4aa0      	ldr	r2, [pc, #640]	; (8004284 <statemachine+0x84c>)
 8004002:	210f      	movs	r1, #15
 8004004:	489b      	ldr	r0, [pc, #620]	; (8004274 <statemachine+0x83c>)
 8004006:	f013 fc55 	bl	80178b4 <sniprintf>
						ssd1306_SetCursor(32, 48);
 800400a:	2130      	movs	r1, #48	; 0x30
 800400c:	2020      	movs	r0, #32
 800400e:	f7ff f8af 	bl	8003170 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004012:	4a99      	ldr	r2, [pc, #612]	; (8004278 <statemachine+0x840>)
 8004014:	2301      	movs	r3, #1
 8004016:	ca06      	ldmia	r2, {r1, r2}
 8004018:	4896      	ldr	r0, [pc, #600]	; (8004274 <statemachine+0x83c>)
 800401a:	f7ff f883 	bl	8003124 <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 800401e:	4b97      	ldr	r3, [pc, #604]	; (800427c <statemachine+0x844>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	e9cd 2300 	strd	r2, r3, [sp]
 8004028:	4a97      	ldr	r2, [pc, #604]	; (8004288 <statemachine+0x850>)
 800402a:	210f      	movs	r1, #15
 800402c:	4891      	ldr	r0, [pc, #580]	; (8004274 <statemachine+0x83c>)
 800402e:	f013 fc41 	bl	80178b4 <sniprintf>
						ssd1306_SetCursor(32, 56);
 8004032:	2138      	movs	r1, #56	; 0x38
 8004034:	2020      	movs	r0, #32
 8004036:	f7ff f89b 	bl	8003170 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800403a:	4a8f      	ldr	r2, [pc, #572]	; (8004278 <statemachine+0x840>)
 800403c:	2301      	movs	r3, #1
 800403e:	ca06      	ldmia	r2, {r1, r2}
 8004040:	488c      	ldr	r0, [pc, #560]	; (8004274 <statemachine+0x83c>)
 8004042:	f7ff f86f 	bl	8003124 <ssd1306_WriteString>


				  if(BTN_B>=1){
 8004046:	4b91      	ldr	r3, [pc, #580]	; (800428c <statemachine+0x854>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	dd08      	ble.n	8004060 <statemachine+0x628>
				  					  posstate++;
 800404e:	4b90      	ldr	r3, [pc, #576]	; (8004290 <statemachine+0x858>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4b8e      	ldr	r3, [pc, #568]	; (8004290 <statemachine+0x858>)
 8004058:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800405a:	4b8c      	ldr	r3, [pc, #560]	; (800428c <statemachine+0x854>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8004060:	4b8c      	ldr	r3, [pc, #560]	; (8004294 <statemachine+0x85c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f340 80fa 	ble.w	800425e <statemachine+0x826>
									  posstate--;
 800406a:	4b89      	ldr	r3, [pc, #548]	; (8004290 <statemachine+0x858>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	3b01      	subs	r3, #1
 8004070:	b2da      	uxtb	r2, r3
 8004072:	4b87      	ldr	r3, [pc, #540]	; (8004290 <statemachine+0x858>)
 8004074:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8004076:	4b87      	ldr	r3, [pc, #540]	; (8004294 <statemachine+0x85c>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
								}



				  break;
 800407c:	e0ef      	b.n	800425e <statemachine+0x826>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 32);
 800407e:	2120      	movs	r1, #32
 8004080:	2020      	movs	r0, #32
 8004082:	f7ff f875 	bl	8003170 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 8004086:	4a84      	ldr	r2, [pc, #528]	; (8004298 <statemachine+0x860>)
 8004088:	210f      	movs	r1, #15
 800408a:	487a      	ldr	r0, [pc, #488]	; (8004274 <statemachine+0x83c>)
 800408c:	f013 fc12 	bl	80178b4 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004090:	4a79      	ldr	r2, [pc, #484]	; (8004278 <statemachine+0x840>)
 8004092:	2301      	movs	r3, #1
 8004094:	ca06      	ldmia	r2, {r1, r2}
 8004096:	4877      	ldr	r0, [pc, #476]	; (8004274 <statemachine+0x83c>)
 8004098:	f7ff f844 	bl	8003124 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800409c:	4b77      	ldr	r3, [pc, #476]	; (800427c <statemachine+0x844>)
 800409e:	7e1b      	ldrb	r3, [r3, #24]
 80040a0:	4a77      	ldr	r2, [pc, #476]	; (8004280 <statemachine+0x848>)
 80040a2:	210f      	movs	r1, #15
 80040a4:	4873      	ldr	r0, [pc, #460]	; (8004274 <statemachine+0x83c>)
 80040a6:	f013 fc05 	bl	80178b4 <sniprintf>
					ssd1306_SetCursor(32, 40);
 80040aa:	2128      	movs	r1, #40	; 0x28
 80040ac:	2020      	movs	r0, #32
 80040ae:	f7ff f85f 	bl	8003170 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80040b2:	4a71      	ldr	r2, [pc, #452]	; (8004278 <statemachine+0x840>)
 80040b4:	2301      	movs	r3, #1
 80040b6:	ca06      	ldmia	r2, {r1, r2}
 80040b8:	486e      	ldr	r0, [pc, #440]	; (8004274 <statemachine+0x83c>)
 80040ba:	f7ff f833 	bl	8003124 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 80040be:	4a77      	ldr	r2, [pc, #476]	; (800429c <statemachine+0x864>)
 80040c0:	210f      	movs	r1, #15
 80040c2:	486c      	ldr	r0, [pc, #432]	; (8004274 <statemachine+0x83c>)
 80040c4:	f013 fbf6 	bl	80178b4 <sniprintf>
					ssd1306_SetCursor(32, 48);
 80040c8:	2130      	movs	r1, #48	; 0x30
 80040ca:	2020      	movs	r0, #32
 80040cc:	f7ff f850 	bl	8003170 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80040d0:	4a69      	ldr	r2, [pc, #420]	; (8004278 <statemachine+0x840>)
 80040d2:	2301      	movs	r3, #1
 80040d4:	ca06      	ldmia	r2, {r1, r2}
 80040d6:	4867      	ldr	r0, [pc, #412]	; (8004274 <statemachine+0x83c>)
 80040d8:	f7ff f824 	bl	8003124 <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 80040dc:	4b67      	ldr	r3, [pc, #412]	; (800427c <statemachine+0x844>)
 80040de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80040e2:	e9cd 2300 	strd	r2, r3, [sp]
 80040e6:	4a68      	ldr	r2, [pc, #416]	; (8004288 <statemachine+0x850>)
 80040e8:	210f      	movs	r1, #15
 80040ea:	4862      	ldr	r0, [pc, #392]	; (8004274 <statemachine+0x83c>)
 80040ec:	f013 fbe2 	bl	80178b4 <sniprintf>
					ssd1306_SetCursor(32, 56);
 80040f0:	2138      	movs	r1, #56	; 0x38
 80040f2:	2020      	movs	r0, #32
 80040f4:	f7ff f83c 	bl	8003170 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80040f8:	4a5f      	ldr	r2, [pc, #380]	; (8004278 <statemachine+0x840>)
 80040fa:	2301      	movs	r3, #1
 80040fc:	ca06      	ldmia	r2, {r1, r2}
 80040fe:	485d      	ldr	r0, [pc, #372]	; (8004274 <statemachine+0x83c>)
 8004100:	f7ff f810 	bl	8003124 <ssd1306_WriteString>

				  if(BTN_B>=1){
 8004104:	4b61      	ldr	r3, [pc, #388]	; (800428c <statemachine+0x854>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	dd08      	ble.n	800411e <statemachine+0x6e6>
				  					  posstate++;
 800410c:	4b60      	ldr	r3, [pc, #384]	; (8004290 <statemachine+0x858>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	3301      	adds	r3, #1
 8004112:	b2da      	uxtb	r2, r3
 8004114:	4b5e      	ldr	r3, [pc, #376]	; (8004290 <statemachine+0x858>)
 8004116:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8004118:	4b5c      	ldr	r3, [pc, #368]	; (800428c <statemachine+0x854>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800411e:	4b5d      	ldr	r3, [pc, #372]	; (8004294 <statemachine+0x85c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f340 809d 	ble.w	8004262 <statemachine+0x82a>
									  posstate--;
 8004128:	4b59      	ldr	r3, [pc, #356]	; (8004290 <statemachine+0x858>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	3b01      	subs	r3, #1
 800412e:	b2da      	uxtb	r2, r3
 8004130:	4b57      	ldr	r3, [pc, #348]	; (8004290 <statemachine+0x858>)
 8004132:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8004134:	4b57      	ldr	r3, [pc, #348]	; (8004294 <statemachine+0x85c>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
								}

				  break;
 800413a:	e092      	b.n	8004262 <statemachine+0x82a>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 32);
 800413c:	2120      	movs	r1, #32
 800413e:	2020      	movs	r0, #32
 8004140:	f7ff f816 	bl	8003170 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 8004144:	4a56      	ldr	r2, [pc, #344]	; (80042a0 <statemachine+0x868>)
 8004146:	210f      	movs	r1, #15
 8004148:	484a      	ldr	r0, [pc, #296]	; (8004274 <statemachine+0x83c>)
 800414a:	f013 fbb3 	bl	80178b4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800414e:	4a4a      	ldr	r2, [pc, #296]	; (8004278 <statemachine+0x840>)
 8004150:	2301      	movs	r3, #1
 8004152:	ca06      	ldmia	r2, {r1, r2}
 8004154:	4847      	ldr	r0, [pc, #284]	; (8004274 <statemachine+0x83c>)
 8004156:	f7fe ffe5 	bl	8003124 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800415a:	4b48      	ldr	r3, [pc, #288]	; (800427c <statemachine+0x844>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc f9f2 	bl	8000548 <__aeabi_f2d>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	e9cd 2300 	strd	r2, r3, [sp]
 800416c:	4a4d      	ldr	r2, [pc, #308]	; (80042a4 <statemachine+0x86c>)
 800416e:	210f      	movs	r1, #15
 8004170:	4840      	ldr	r0, [pc, #256]	; (8004274 <statemachine+0x83c>)
 8004172:	f013 fb9f 	bl	80178b4 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8004176:	2128      	movs	r1, #40	; 0x28
 8004178:	2020      	movs	r0, #32
 800417a:	f7fe fff9 	bl	8003170 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800417e:	4a3e      	ldr	r2, [pc, #248]	; (8004278 <statemachine+0x840>)
 8004180:	2301      	movs	r3, #1
 8004182:	ca06      	ldmia	r2, {r1, r2}
 8004184:	483b      	ldr	r0, [pc, #236]	; (8004274 <statemachine+0x83c>)
 8004186:	f7fe ffcd 	bl	8003124 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 800418a:	4a47      	ldr	r2, [pc, #284]	; (80042a8 <statemachine+0x870>)
 800418c:	210f      	movs	r1, #15
 800418e:	4839      	ldr	r0, [pc, #228]	; (8004274 <statemachine+0x83c>)
 8004190:	f013 fb90 	bl	80178b4 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8004194:	2130      	movs	r1, #48	; 0x30
 8004196:	2020      	movs	r0, #32
 8004198:	f7fe ffea 	bl	8003170 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800419c:	4a36      	ldr	r2, [pc, #216]	; (8004278 <statemachine+0x840>)
 800419e:	2301      	movs	r3, #1
 80041a0:	ca06      	ldmia	r2, {r1, r2}
 80041a2:	4834      	ldr	r0, [pc, #208]	; (8004274 <statemachine+0x83c>)
 80041a4:	f7fe ffbe 	bl	8003124 <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 80041a8:	4b34      	ldr	r3, [pc, #208]	; (800427c <statemachine+0x844>)
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fc f9cb 	bl	8000548 <__aeabi_f2d>
 80041b2:	a32d      	add	r3, pc, #180	; (adr r3, 8004268 <statemachine+0x830>)
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f7fc fa1e 	bl	80005f8 <__aeabi_dmul>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4610      	mov	r0, r2
 80041c2:	4619      	mov	r1, r3
 80041c4:	f7fc fd10 	bl	8000be8 <__aeabi_d2f>
 80041c8:	4603      	mov	r3, r0
 80041ca:	ee00 3a10 	vmov	s0, r3
 80041ce:	f016 fa1f 	bl	801a610 <expf>
 80041d2:	eef0 7a40 	vmov.f32	s15, s0
 80041d6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80042ac <statemachine+0x874>
 80041da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041de:	ee17 0a90 	vmov	r0, s15
 80041e2:	f7fc f9b1 	bl	8000548 <__aeabi_f2d>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	e9cd 2300 	strd	r2, r3, [sp]
 80041ee:	4a30      	ldr	r2, [pc, #192]	; (80042b0 <statemachine+0x878>)
 80041f0:	210f      	movs	r1, #15
 80041f2:	4820      	ldr	r0, [pc, #128]	; (8004274 <statemachine+0x83c>)
 80041f4:	f013 fb5e 	bl	80178b4 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80041f8:	2138      	movs	r1, #56	; 0x38
 80041fa:	2020      	movs	r0, #32
 80041fc:	f7fe ffb8 	bl	8003170 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <statemachine+0x840>)
 8004202:	2301      	movs	r3, #1
 8004204:	ca06      	ldmia	r2, {r1, r2}
 8004206:	481b      	ldr	r0, [pc, #108]	; (8004274 <statemachine+0x83c>)
 8004208:	f7fe ff8c 	bl	8003124 <ssd1306_WriteString>

				  if(BTN_B>=1){
 800420c:	4b1f      	ldr	r3, [pc, #124]	; (800428c <statemachine+0x854>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	dd14      	ble.n	800423e <statemachine+0x806>
				  					posstate--;
 8004214:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <statemachine+0x858>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	3b01      	subs	r3, #1
 800421a:	b2da      	uxtb	r2, r3
 800421c:	4b1c      	ldr	r3, [pc, #112]	; (8004290 <statemachine+0x858>)
 800421e:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8004220:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <statemachine+0x858>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	3b01      	subs	r3, #1
 8004226:	b2da      	uxtb	r2, r3
 8004228:	4b19      	ldr	r3, [pc, #100]	; (8004290 <statemachine+0x858>)
 800422a:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 800422c:	4b18      	ldr	r3, [pc, #96]	; (8004290 <statemachine+0x858>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	3b01      	subs	r3, #1
 8004232:	b2da      	uxtb	r2, r3
 8004234:	4b16      	ldr	r3, [pc, #88]	; (8004290 <statemachine+0x858>)
 8004236:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8004238:	4b14      	ldr	r3, [pc, #80]	; (800428c <statemachine+0x854>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800423e:	4b15      	ldr	r3, [pc, #84]	; (8004294 <statemachine+0x85c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	dd36      	ble.n	80042b4 <statemachine+0x87c>
					  posstate--;
 8004246:	4b12      	ldr	r3, [pc, #72]	; (8004290 <statemachine+0x858>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	3b01      	subs	r3, #1
 800424c:	b2da      	uxtb	r2, r3
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <statemachine+0x858>)
 8004250:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <statemachine+0x85c>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
				}
				  break;
 8004258:	e02c      	b.n	80042b4 <statemachine+0x87c>
				  break;
 800425a:	bf00      	nop
 800425c:	e02b      	b.n	80042b6 <statemachine+0x87e>
				  break;
 800425e:	bf00      	nop
 8004260:	e029      	b.n	80042b6 <statemachine+0x87e>
				  break;
 8004262:	bf00      	nop
 8004264:	e027      	b.n	80042b6 <statemachine+0x87e>
 8004266:	bf00      	nop
 8004268:	fb798882 	.word	0xfb798882
 800426c:	bf1e1818 	.word	0xbf1e1818
 8004270:	0801c30c 	.word	0x0801c30c
 8004274:	20000980 	.word	0x20000980
 8004278:	2000000c 	.word	0x2000000c
 800427c:	200006e0 	.word	0x200006e0
 8004280:	0801c318 	.word	0x0801c318
 8004284:	0801c2ec 	.word	0x0801c2ec
 8004288:	0801c2f8 	.word	0x0801c2f8
 800428c:	20000724 	.word	0x20000724
 8004290:	2000048f 	.word	0x2000048f
 8004294:	20000b64 	.word	0x20000b64
 8004298:	0801c31c 	.word	0x0801c31c
 800429c:	0801c300 	.word	0x0801c300
 80042a0:	0801c328 	.word	0x0801c328
 80042a4:	0801c334 	.word	0x0801c334
 80042a8:	0801c33c 	.word	0x0801c33c
 80042ac:	447a0000 	.word	0x447a0000
 80042b0:	0801c348 	.word	0x0801c348
				  break;
 80042b4:	bf00      	nop
			  }

					if(BTN_A>=1){
 80042b6:	4b5d      	ldr	r3, [pc, #372]	; (800442c <statemachine+0x9f4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	dd0b      	ble.n	80042d6 <statemachine+0x89e>
							state++;
 80042be:	4b5c      	ldr	r3, [pc, #368]	; (8004430 <statemachine+0x9f8>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4b5a      	ldr	r3, [pc, #360]	; (8004430 <statemachine+0x9f8>)
 80042c8:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80042ca:	4b58      	ldr	r3, [pc, #352]	; (800442c <statemachine+0x9f4>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 80042d0:	4b58      	ldr	r3, [pc, #352]	; (8004434 <statemachine+0x9fc>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 80042d6:	4b58      	ldr	r3, [pc, #352]	; (8004438 <statemachine+0xa00>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f341 85cd 	ble.w	8005e7a <statemachine+0x2442>
									 									 									  			 	state--;
 80042e0:	4b53      	ldr	r3, [pc, #332]	; (8004430 <statemachine+0x9f8>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	4b51      	ldr	r3, [pc, #324]	; (8004430 <statemachine+0x9f8>)
 80042ea:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 80042ec:	4b4f      	ldr	r3, [pc, #316]	; (800442c <statemachine+0x9f4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 80042f2:	4b50      	ldr	r3, [pc, #320]	; (8004434 <statemachine+0x9fc>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 80042f8:	4b4f      	ldr	r3, [pc, #316]	; (8004438 <statemachine+0xa00>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 80042fe:	f001 bdbc 	b.w	8005e7a <statemachine+0x2442>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8004302:	2000      	movs	r0, #0
 8004304:	f7fe fdf2 	bl	8002eec <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8004308:	494c      	ldr	r1, [pc, #304]	; (800443c <statemachine+0xa04>)
 800430a:	484d      	ldr	r0, [pc, #308]	; (8004440 <statemachine+0xa08>)
 800430c:	f7fe f906 	bl	800251c <nmea_parse>
			  if(settimeen==0){
 8004310:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <statemachine+0xa0c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d141      	bne.n	800439c <statemachine+0x964>

							settimeen=1;
 8004318:	4b4a      	ldr	r3, [pc, #296]	; (8004444 <statemachine+0xa0c>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 800431e:	4b48      	ldr	r3, [pc, #288]	; (8004440 <statemachine+0xa08>)
 8004320:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	0092      	lsls	r2, r2, #2
 800432e:	4413      	add	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	b2da      	uxtb	r2, r3
 8004334:	4b42      	ldr	r3, [pc, #264]	; (8004440 <statemachine+0xa08>)
 8004336:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	b2db      	uxtb	r3, r3
 8004340:	4413      	add	r3, r2
 8004342:	b2da      	uxtb	r2, r3
 8004344:	4b40      	ldr	r3, [pc, #256]	; (8004448 <statemachine+0xa10>)
 8004346:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004348:	4b3d      	ldr	r3, [pc, #244]	; (8004440 <statemachine+0xa08>)
 800434a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	0092      	lsls	r2, r2, #2
 8004358:	4413      	add	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	b2da      	uxtb	r2, r3
 800435e:	4b38      	ldr	r3, [pc, #224]	; (8004440 <statemachine+0xa08>)
 8004360:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	b2db      	uxtb	r3, r3
 800436a:	4413      	add	r3, r2
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4b37      	ldr	r3, [pc, #220]	; (800444c <statemachine+0xa14>)
 8004370:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004372:	4b33      	ldr	r3, [pc, #204]	; (8004440 <statemachine+0xa08>)
 8004374:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	0092      	lsls	r2, r2, #2
 8004382:	4413      	add	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	4b2d      	ldr	r3, [pc, #180]	; (8004440 <statemachine+0xa08>)
 800438a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4413      	add	r3, r2
 8004396:	b2da      	uxtb	r2, r3
 8004398:	4b2d      	ldr	r3, [pc, #180]	; (8004450 <statemachine+0xa18>)
 800439a:	701a      	strb	r2, [r3, #0]


					  }


				  ssd1306_SetCursor(32, 32);
 800439c:	2120      	movs	r1, #32
 800439e:	2020      	movs	r0, #32
 80043a0:	f7fe fee6 	bl	8003170 <ssd1306_SetCursor>
				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 80043a4:	4a2b      	ldr	r2, [pc, #172]	; (8004454 <statemachine+0xa1c>)
 80043a6:	2301      	movs	r3, #1
 80043a8:	ca06      	ldmia	r2, {r1, r2}
 80043aa:	482b      	ldr	r0, [pc, #172]	; (8004458 <statemachine+0xa20>)
 80043ac:	f7fe feba 	bl	8003124 <ssd1306_WriteString>




				  switch(hrstate){
 80043b0:	4b2a      	ldr	r3, [pc, #168]	; (800445c <statemachine+0xa24>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <statemachine+0x986>
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d059      	beq.n	8004470 <statemachine+0xa38>
 80043bc:	e295      	b.n	80048ea <statemachine+0xeb2>
				  case STATE_DIGIT:
					 ssd1306_SetCursor(32, 42);
 80043be:	212a      	movs	r1, #42	; 0x2a
 80043c0:	2020      	movs	r0, #32
 80043c2:	f7fe fed5 	bl	8003170 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <statemachine+0xa10>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b1f      	ldr	r3, [pc, #124]	; (800444c <statemachine+0xa14>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	4a22      	ldr	r2, [pc, #136]	; (8004460 <statemachine+0xa28>)
 80043d6:	210f      	movs	r1, #15
 80043d8:	4822      	ldr	r0, [pc, #136]	; (8004464 <statemachine+0xa2c>)
 80043da:	f013 fa6b 	bl	80178b4 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80043de:	4a22      	ldr	r2, [pc, #136]	; (8004468 <statemachine+0xa30>)
 80043e0:	2301      	movs	r3, #1
 80043e2:	ca06      	ldmia	r2, {r1, r2}
 80043e4:	481f      	ldr	r0, [pc, #124]	; (8004464 <statemachine+0xa2c>)
 80043e6:	f7fe fe9d 	bl	8003124 <ssd1306_WriteString>
					ssd1306_SetCursor(32, 50);
 80043ea:	2132      	movs	r1, #50	; 0x32
 80043ec:	2020      	movs	r0, #32
 80043ee:	f7fe febf 	bl	8003170 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 80043f2:	4b17      	ldr	r3, [pc, #92]	; (8004450 <statemachine+0xa18>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	4a1d      	ldr	r2, [pc, #116]	; (800446c <statemachine+0xa34>)
 80043f8:	210f      	movs	r1, #15
 80043fa:	481a      	ldr	r0, [pc, #104]	; (8004464 <statemachine+0xa2c>)
 80043fc:	f013 fa5a 	bl	80178b4 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004400:	4a14      	ldr	r2, [pc, #80]	; (8004454 <statemachine+0xa1c>)
 8004402:	2301      	movs	r3, #1
 8004404:	ca06      	ldmia	r2, {r1, r2}
 8004406:	4817      	ldr	r0, [pc, #92]	; (8004464 <statemachine+0xa2c>)
 8004408:	f7fe fe8c 	bl	8003124 <ssd1306_WriteString>
					if(BTN_B>=1){
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <statemachine+0x9fc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f340 8267 	ble.w	80048e4 <statemachine+0xeac>
												hrstate++;
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <statemachine+0xa24>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4b0f      	ldr	r3, [pc, #60]	; (800445c <statemachine+0xa24>)
 8004420:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8004422:	4b04      	ldr	r3, [pc, #16]	; (8004434 <statemachine+0x9fc>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
											}




					  break;
 8004428:	e25c      	b.n	80048e4 <statemachine+0xeac>
 800442a:	bf00      	nop
 800442c:	20000720 	.word	0x20000720
 8004430:	2000048c 	.word	0x2000048c
 8004434:	20000724 	.word	0x20000724
 8004438:	20000b68 	.word	0x20000b68
 800443c:	200004dc 	.word	0x200004dc
 8004440:	200006e0 	.word	0x200006e0
 8004444:	20000b50 	.word	0x20000b50
 8004448:	20000b4d 	.word	0x20000b4d
 800444c:	20000b4e 	.word	0x20000b4e
 8004450:	20000b4c 	.word	0x20000b4c
 8004454:	2000000c 	.word	0x2000000c
 8004458:	0801c354 	.word	0x0801c354
 800445c:	2000048d 	.word	0x2000048d
 8004460:	0801c35c 	.word	0x0801c35c
 8004464:	20000980 	.word	0x20000980
 8004468:	20000014 	.word	0x20000014
 800446c:	0801c368 	.word	0x0801c368
				  case STATE_OLD:
					  if(HR>12){
 8004470:	4b91      	ldr	r3, [pc, #580]	; (80046b8 <statemachine+0xc80>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	d905      	bls.n	8004484 <statemachine+0xa4c>
						  HR=HR-12;
 8004478:	4b8f      	ldr	r3, [pc, #572]	; (80046b8 <statemachine+0xc80>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	3b0c      	subs	r3, #12
 800447e:	b2da      	uxtb	r2, r3
 8004480:	4b8d      	ldr	r3, [pc, #564]	; (80046b8 <statemachine+0xc80>)
 8004482:	701a      	strb	r2, [r3, #0]
					  }
					  ssd1306_DrawCircle(64, 48, 12, White);
 8004484:	2301      	movs	r3, #1
 8004486:	220c      	movs	r2, #12
 8004488:	2130      	movs	r1, #48	; 0x30
 800448a:	2040      	movs	r0, #64	; 0x40
 800448c:	f7fe fef4 	bl	8003278 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-HR)*M_PI/6)),48-floor(6*sin((3-HR)*M_PI/6)),White);
 8004490:	4b89      	ldr	r3, [pc, #548]	; (80046b8 <statemachine+0xc80>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	f1c3 0303 	rsb	r3, r3, #3
 8004498:	4618      	mov	r0, r3
 800449a:	f7fc f843 	bl	8000524 <__aeabi_i2d>
 800449e:	a384      	add	r3, pc, #528	; (adr r3, 80046b0 <statemachine+0xc78>)
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fc f8a8 	bl	80005f8 <__aeabi_dmul>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	4b81      	ldr	r3, [pc, #516]	; (80046bc <statemachine+0xc84>)
 80044b6:	f7fc f9c9 	bl	800084c <__aeabi_ddiv>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	ec43 2b17 	vmov	d7, r2, r3
 80044c2:	eeb0 0a47 	vmov.f32	s0, s14
 80044c6:	eef0 0a67 	vmov.f32	s1, s15
 80044ca:	f015 fff5 	bl	801a4b8 <cos>
 80044ce:	ec51 0b10 	vmov	r0, r1, d0
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	4b79      	ldr	r3, [pc, #484]	; (80046bc <statemachine+0xc84>)
 80044d8:	f7fc f88e 	bl	80005f8 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	ec43 2b17 	vmov	d7, r2, r3
 80044e4:	eeb0 0a47 	vmov.f32	s0, s14
 80044e8:	eef0 0a67 	vmov.f32	s1, s15
 80044ec:	f016 f95c 	bl	801a7a8 <floor>
 80044f0:	ec51 0b10 	vmov	r0, r1, d0
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	4b71      	ldr	r3, [pc, #452]	; (80046c0 <statemachine+0xc88>)
 80044fa:	f7fb fec7 	bl	800028c <__adddf3>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	f7fc fb4f 	bl	8000ba8 <__aeabi_d2uiz>
 800450a:	4603      	mov	r3, r0
 800450c:	b2dc      	uxtb	r4, r3
 800450e:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <statemachine+0xc80>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	f1c3 0303 	rsb	r3, r3, #3
 8004516:	4618      	mov	r0, r3
 8004518:	f7fc f804 	bl	8000524 <__aeabi_i2d>
 800451c:	a364      	add	r3, pc, #400	; (adr r3, 80046b0 <statemachine+0xc78>)
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	f7fc f869 	bl	80005f8 <__aeabi_dmul>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	4b62      	ldr	r3, [pc, #392]	; (80046bc <statemachine+0xc84>)
 8004534:	f7fc f98a 	bl	800084c <__aeabi_ddiv>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	ec43 2b17 	vmov	d7, r2, r3
 8004540:	eeb0 0a47 	vmov.f32	s0, s14
 8004544:	eef0 0a67 	vmov.f32	s1, s15
 8004548:	f016 f80a 	bl	801a560 <sin>
 800454c:	ec51 0b10 	vmov	r0, r1, d0
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	4b59      	ldr	r3, [pc, #356]	; (80046bc <statemachine+0xc84>)
 8004556:	f7fc f84f 	bl	80005f8 <__aeabi_dmul>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	ec43 2b17 	vmov	d7, r2, r3
 8004562:	eeb0 0a47 	vmov.f32	s0, s14
 8004566:	eef0 0a67 	vmov.f32	s1, s15
 800456a:	f016 f91d 	bl	801a7a8 <floor>
 800456e:	ec53 2b10 	vmov	r2, r3, d0
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	4953      	ldr	r1, [pc, #332]	; (80046c4 <statemachine+0xc8c>)
 8004578:	f7fb fe86 	bl	8000288 <__aeabi_dsub>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
 8004584:	f7fc fb10 	bl	8000ba8 <__aeabi_d2uiz>
 8004588:	4603      	mov	r3, r0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2201      	movs	r2, #1
 800458e:	9200      	str	r2, [sp, #0]
 8004590:	4622      	mov	r2, r4
 8004592:	2130      	movs	r1, #48	; 0x30
 8004594:	2040      	movs	r0, #64	; 0x40
 8004596:	f7fe fe03 	bl	80031a0 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-MINUTE)*M_PI/30)),48-floor(12*sin((15-MINUTE)*M_PI/30)),White);
 800459a:	4b4b      	ldr	r3, [pc, #300]	; (80046c8 <statemachine+0xc90>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	f1c3 030f 	rsb	r3, r3, #15
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fb ffbe 	bl	8000524 <__aeabi_i2d>
 80045a8:	a341      	add	r3, pc, #260	; (adr r3, 80046b0 <statemachine+0xc78>)
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f7fc f823 	bl	80005f8 <__aeabi_dmul>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	4b43      	ldr	r3, [pc, #268]	; (80046cc <statemachine+0xc94>)
 80045c0:	f7fc f944 	bl	800084c <__aeabi_ddiv>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	ec43 2b17 	vmov	d7, r2, r3
 80045cc:	eeb0 0a47 	vmov.f32	s0, s14
 80045d0:	eef0 0a67 	vmov.f32	s1, s15
 80045d4:	f015 ff70 	bl	801a4b8 <cos>
 80045d8:	ec51 0b10 	vmov	r0, r1, d0
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <statemachine+0xc98>)
 80045e2:	f7fc f809 	bl	80005f8 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	ec43 2b17 	vmov	d7, r2, r3
 80045ee:	eeb0 0a47 	vmov.f32	s0, s14
 80045f2:	eef0 0a67 	vmov.f32	s1, s15
 80045f6:	f016 f8d7 	bl	801a7a8 <floor>
 80045fa:	ec51 0b10 	vmov	r0, r1, d0
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	4b2f      	ldr	r3, [pc, #188]	; (80046c0 <statemachine+0xc88>)
 8004604:	f7fb fe42 	bl	800028c <__adddf3>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	f7fc faca 	bl	8000ba8 <__aeabi_d2uiz>
 8004614:	4603      	mov	r3, r0
 8004616:	b2dc      	uxtb	r4, r3
 8004618:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <statemachine+0xc90>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f1c3 030f 	rsb	r3, r3, #15
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb ff7f 	bl	8000524 <__aeabi_i2d>
 8004626:	a322      	add	r3, pc, #136	; (adr r3, 80046b0 <statemachine+0xc78>)
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fb ffe4 	bl	80005f8 <__aeabi_dmul>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	4b23      	ldr	r3, [pc, #140]	; (80046cc <statemachine+0xc94>)
 800463e:	f7fc f905 	bl	800084c <__aeabi_ddiv>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	ec43 2b17 	vmov	d7, r2, r3
 800464a:	eeb0 0a47 	vmov.f32	s0, s14
 800464e:	eef0 0a67 	vmov.f32	s1, s15
 8004652:	f015 ff85 	bl	801a560 <sin>
 8004656:	ec51 0b10 	vmov	r0, r1, d0
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <statemachine+0xc98>)
 8004660:	f7fb ffca 	bl	80005f8 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	ec43 2b17 	vmov	d7, r2, r3
 800466c:	eeb0 0a47 	vmov.f32	s0, s14
 8004670:	eef0 0a67 	vmov.f32	s1, s15
 8004674:	f016 f898 	bl	801a7a8 <floor>
 8004678:	ec53 2b10 	vmov	r2, r3, d0
 800467c:	f04f 0000 	mov.w	r0, #0
 8004680:	4910      	ldr	r1, [pc, #64]	; (80046c4 <statemachine+0xc8c>)
 8004682:	f7fb fe01 	bl	8000288 <__aeabi_dsub>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4610      	mov	r0, r2
 800468c:	4619      	mov	r1, r3
 800468e:	f7fc fa8b 	bl	8000ba8 <__aeabi_d2uiz>
 8004692:	4603      	mov	r3, r0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2201      	movs	r2, #1
 8004698:	9200      	str	r2, [sp, #0]
 800469a:	4622      	mov	r2, r4
 800469c:	2130      	movs	r1, #48	; 0x30
 800469e:	2040      	movs	r0, #64	; 0x40
 80046a0:	f7fe fd7e 	bl	80031a0 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e10a      	b.n	80048c0 <statemachine+0xe88>
 80046aa:	bf00      	nop
 80046ac:	f3af 8000 	nop.w
 80046b0:	54442d18 	.word	0x54442d18
 80046b4:	400921fb 	.word	0x400921fb
 80046b8:	20000b4d 	.word	0x20000b4d
 80046bc:	40180000 	.word	0x40180000
 80046c0:	40500000 	.word	0x40500000
 80046c4:	40480000 	.word	0x40480000
 80046c8:	20000b4e 	.word	0x20000b4e
 80046cc:	403e0000 	.word	0x403e0000
 80046d0:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7fb ff25 	bl	8000524 <__aeabi_i2d>
 80046da:	a399      	add	r3, pc, #612	; (adr r3, 8004940 <statemachine+0xf08>)
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f7fb ff8a 	bl	80005f8 <__aeabi_dmul>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4610      	mov	r0, r2
 80046ea:	4619      	mov	r1, r3
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	4b95      	ldr	r3, [pc, #596]	; (8004948 <statemachine+0xf10>)
 80046f2:	f7fc f8ab 	bl	800084c <__aeabi_ddiv>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	ec43 2b17 	vmov	d7, r2, r3
 80046fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004702:	eef0 0a67 	vmov.f32	s1, s15
 8004706:	f015 fed7 	bl	801a4b8 <cos>
 800470a:	ec51 0b10 	vmov	r0, r1, d0
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	4b8e      	ldr	r3, [pc, #568]	; (800494c <statemachine+0xf14>)
 8004714:	f7fb ff70 	bl	80005f8 <__aeabi_dmul>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	ec43 2b17 	vmov	d7, r2, r3
 8004720:	eeb0 0a47 	vmov.f32	s0, s14
 8004724:	eef0 0a67 	vmov.f32	s1, s15
 8004728:	f016 f83e 	bl	801a7a8 <floor>
 800472c:	ec51 0b10 	vmov	r0, r1, d0
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	4b86      	ldr	r3, [pc, #536]	; (8004950 <statemachine+0xf18>)
 8004736:	f7fb fda9 	bl	800028c <__adddf3>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	f7fc fa31 	bl	8000ba8 <__aeabi_d2uiz>
 8004746:	4603      	mov	r3, r0
 8004748:	b2dc      	uxtb	r4, r3
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7fb feea 	bl	8000524 <__aeabi_i2d>
 8004750:	a37b      	add	r3, pc, #492	; (adr r3, 8004940 <statemachine+0xf08>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fb ff4f 	bl	80005f8 <__aeabi_dmul>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	4b78      	ldr	r3, [pc, #480]	; (8004948 <statemachine+0xf10>)
 8004768:	f7fc f870 	bl	800084c <__aeabi_ddiv>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	ec43 2b17 	vmov	d7, r2, r3
 8004774:	eeb0 0a47 	vmov.f32	s0, s14
 8004778:	eef0 0a67 	vmov.f32	s1, s15
 800477c:	f015 fef0 	bl	801a560 <sin>
 8004780:	ec51 0b10 	vmov	r0, r1, d0
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	4b70      	ldr	r3, [pc, #448]	; (800494c <statemachine+0xf14>)
 800478a:	f7fb ff35 	bl	80005f8 <__aeabi_dmul>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	ec43 2b17 	vmov	d7, r2, r3
 8004796:	eeb0 0a47 	vmov.f32	s0, s14
 800479a:	eef0 0a67 	vmov.f32	s1, s15
 800479e:	f016 f803 	bl	801a7a8 <floor>
 80047a2:	ec51 0b10 	vmov	r0, r1, d0
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	4b6a      	ldr	r3, [pc, #424]	; (8004954 <statemachine+0xf1c>)
 80047ac:	f7fb fd6e 	bl	800028c <__adddf3>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	f7fc f9f6 	bl	8000ba8 <__aeabi_d2uiz>
 80047bc:	4603      	mov	r3, r0
 80047be:	b2dd      	uxtb	r5, r3
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7fb feaf 	bl	8000524 <__aeabi_i2d>
 80047c6:	a35e      	add	r3, pc, #376	; (adr r3, 8004940 <statemachine+0xf08>)
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f7fb ff14 	bl	80005f8 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	4b5a      	ldr	r3, [pc, #360]	; (8004948 <statemachine+0xf10>)
 80047de:	f7fc f835 	bl	800084c <__aeabi_ddiv>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	ec43 2b17 	vmov	d7, r2, r3
 80047ea:	eeb0 0a47 	vmov.f32	s0, s14
 80047ee:	eef0 0a67 	vmov.f32	s1, s15
 80047f2:	f015 fe61 	bl	801a4b8 <cos>
 80047f6:	ec51 0b10 	vmov	r0, r1, d0
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	4b56      	ldr	r3, [pc, #344]	; (8004958 <statemachine+0xf20>)
 8004800:	f7fb fefa 	bl	80005f8 <__aeabi_dmul>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	ec43 2b17 	vmov	d7, r2, r3
 800480c:	eeb0 0a47 	vmov.f32	s0, s14
 8004810:	eef0 0a67 	vmov.f32	s1, s15
 8004814:	f015 ffc8 	bl	801a7a8 <floor>
 8004818:	ec51 0b10 	vmov	r0, r1, d0
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <statemachine+0xf18>)
 8004822:	f7fb fd33 	bl	800028c <__adddf3>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	f7fc f9bb 	bl	8000ba8 <__aeabi_d2uiz>
 8004832:	4603      	mov	r3, r0
 8004834:	b2de      	uxtb	r6, r3
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7fb fe74 	bl	8000524 <__aeabi_i2d>
 800483c:	a340      	add	r3, pc, #256	; (adr r3, 8004940 <statemachine+0xf08>)
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f7fb fed9 	bl	80005f8 <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	4b3d      	ldr	r3, [pc, #244]	; (8004948 <statemachine+0xf10>)
 8004854:	f7fb fffa 	bl	800084c <__aeabi_ddiv>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	ec43 2b17 	vmov	d7, r2, r3
 8004860:	eeb0 0a47 	vmov.f32	s0, s14
 8004864:	eef0 0a67 	vmov.f32	s1, s15
 8004868:	f015 fe7a 	bl	801a560 <sin>
 800486c:	ec51 0b10 	vmov	r0, r1, d0
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	4b38      	ldr	r3, [pc, #224]	; (8004958 <statemachine+0xf20>)
 8004876:	f7fb febf 	bl	80005f8 <__aeabi_dmul>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	ec43 2b17 	vmov	d7, r2, r3
 8004882:	eeb0 0a47 	vmov.f32	s0, s14
 8004886:	eef0 0a67 	vmov.f32	s1, s15
 800488a:	f015 ff8d 	bl	801a7a8 <floor>
 800488e:	ec51 0b10 	vmov	r0, r1, d0
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <statemachine+0xf1c>)
 8004898:	f7fb fcf8 	bl	800028c <__adddf3>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4610      	mov	r0, r2
 80048a2:	4619      	mov	r1, r3
 80048a4:	f7fc f980 	bl	8000ba8 <__aeabi_d2uiz>
 80048a8:	4603      	mov	r3, r0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2201      	movs	r2, #1
 80048ae:	9200      	str	r2, [sp, #0]
 80048b0:	4632      	mov	r2, r6
 80048b2:	4629      	mov	r1, r5
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7fe fc73 	bl	80031a0 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	f77f af06 	ble.w	80046d4 <statemachine+0xc9c>
					  }
					  if(BTN_B>=1){
 80048c8:	4b24      	ldr	r3, [pc, #144]	; (800495c <statemachine+0xf24>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dd0b      	ble.n	80048e8 <statemachine+0xeb0>
					  	hrstate--;
 80048d0:	4b23      	ldr	r3, [pc, #140]	; (8004960 <statemachine+0xf28>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	4b21      	ldr	r3, [pc, #132]	; (8004960 <statemachine+0xf28>)
 80048da:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 80048dc:	4b1f      	ldr	r3, [pc, #124]	; (800495c <statemachine+0xf24>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
					  }


					  break;
 80048e2:	e001      	b.n	80048e8 <statemachine+0xeb0>
					  break;
 80048e4:	bf00      	nop
 80048e6:	e000      	b.n	80048ea <statemachine+0xeb2>
					  break;
 80048e8:	bf00      	nop

				  }

				  if(BTN_A>=1){
 80048ea:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <statemachine+0xf2c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	dd0e      	ble.n	8004910 <statemachine+0xed8>
			  		state++;
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <statemachine+0xf30>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <statemachine+0xf30>)
 80048fc:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 80048fe:	4b19      	ldr	r3, [pc, #100]	; (8004964 <statemachine+0xf2c>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004904:	4b15      	ldr	r3, [pc, #84]	; (800495c <statemachine+0xf24>)
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
			  		settimeen=0;
 800490a:	4b18      	ldr	r3, [pc, #96]	; (800496c <statemachine+0xf34>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
			  		}
				  if(BTN_A_LONG>=1){
 8004910:	4b17      	ldr	r3, [pc, #92]	; (8004970 <statemachine+0xf38>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f341 82b2 	ble.w	8005e7e <statemachine+0x2446>
				  									 									 									  			 	state--;
 800491a:	4b13      	ldr	r3, [pc, #76]	; (8004968 <statemachine+0xf30>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	3b01      	subs	r3, #1
 8004920:	b2da      	uxtb	r2, r3
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <statemachine+0xf30>)
 8004924:	701a      	strb	r2, [r3, #0]
				  									 									 									  			 	BTN_A=0;
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <statemachine+0xf2c>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_B=0;
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <statemachine+0xf24>)
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_A_LONG=0;
 8004932:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <statemachine+0xf38>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]





			  break;
 8004938:	f001 baa1 	b.w	8005e7e <statemachine+0x2446>
 800493c:	f3af 8000 	nop.w
 8004940:	54442d18 	.word	0x54442d18
 8004944:	400921fb 	.word	0x400921fb
 8004948:	40180000 	.word	0x40180000
 800494c:	40240000 	.word	0x40240000
 8004950:	40500000 	.word	0x40500000
 8004954:	40480000 	.word	0x40480000
 8004958:	40280000 	.word	0x40280000
 800495c:	20000724 	.word	0x20000724
 8004960:	2000048d 	.word	0x2000048d
 8004964:	20000720 	.word	0x20000720
 8004968:	2000048c 	.word	0x2000048c
 800496c:	20000b50 	.word	0x20000b50
 8004970:	20000b68 	.word	0x20000b68
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8004974:	2000      	movs	r0, #0
 8004976:	f7fe fab9 	bl	8002eec <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800497a:	497a      	ldr	r1, [pc, #488]	; (8004b64 <statemachine+0x112c>)
 800497c:	487a      	ldr	r0, [pc, #488]	; (8004b68 <statemachine+0x1130>)
 800497e:	f7fd fdcd 	bl	800251c <nmea_parse>
			snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8004982:	4b79      	ldr	r3, [pc, #484]	; (8004b68 <statemachine+0x1130>)
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fb fdde 	bl	8000548 <__aeabi_f2d>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	e9cd 2300 	strd	r2, r3, [sp]
 8004994:	4a75      	ldr	r2, [pc, #468]	; (8004b6c <statemachine+0x1134>)
 8004996:	210f      	movs	r1, #15
 8004998:	4875      	ldr	r0, [pc, #468]	; (8004b70 <statemachine+0x1138>)
 800499a:	f012 ff8b 	bl	80178b4 <sniprintf>
			ssd1306_SetCursor(32, 32);
 800499e:	2120      	movs	r1, #32
 80049a0:	2020      	movs	r0, #32
 80049a2:	f7fe fbe5 	bl	8003170 <ssd1306_SetCursor>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80049a6:	4a73      	ldr	r2, [pc, #460]	; (8004b74 <statemachine+0x113c>)
 80049a8:	2301      	movs	r3, #1
 80049aa:	ca06      	ldmia	r2, {r1, r2}
 80049ac:	4870      	ldr	r0, [pc, #448]	; (8004b70 <statemachine+0x1138>)
 80049ae:	f7fe fbb9 	bl	8003124 <ssd1306_WriteString>
			snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 80049b2:	4b71      	ldr	r3, [pc, #452]	; (8004b78 <statemachine+0x1140>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fb fdc6 	bl	8000548 <__aeabi_f2d>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	e9cd 2300 	strd	r2, r3, [sp]
 80049c4:	4a6d      	ldr	r2, [pc, #436]	; (8004b7c <statemachine+0x1144>)
 80049c6:	2114      	movs	r1, #20
 80049c8:	4869      	ldr	r0, [pc, #420]	; (8004b70 <statemachine+0x1138>)
 80049ca:	f012 ff73 	bl	80178b4 <sniprintf>
			ssd1306_SetCursor(32, 42);
 80049ce:	212a      	movs	r1, #42	; 0x2a
 80049d0:	2020      	movs	r0, #32
 80049d2:	f7fe fbcd 	bl	8003170 <ssd1306_SetCursor>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80049d6:	4a67      	ldr	r2, [pc, #412]	; (8004b74 <statemachine+0x113c>)
 80049d8:	2301      	movs	r3, #1
 80049da:	ca06      	ldmia	r2, {r1, r2}
 80049dc:	4864      	ldr	r0, [pc, #400]	; (8004b70 <statemachine+0x1138>)
 80049de:	f7fe fba1 	bl	8003124 <ssd1306_WriteString>
			ssd1306_SetCursor(32, 50);
 80049e2:	2132      	movs	r1, #50	; 0x32
 80049e4:	2020      	movs	r0, #32
 80049e6:	f7fe fbc3 	bl	8003170 <ssd1306_SetCursor>
			snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 80049ea:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <statemachine+0x1148>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fb fdaa 	bl	8000548 <__aeabi_f2d>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	e9cd 2300 	strd	r2, r3, [sp]
 80049fc:	4a61      	ldr	r2, [pc, #388]	; (8004b84 <statemachine+0x114c>)
 80049fe:	210f      	movs	r1, #15
 8004a00:	485b      	ldr	r0, [pc, #364]	; (8004b70 <statemachine+0x1138>)
 8004a02:	f012 ff57 	bl	80178b4 <sniprintf>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004a06:	4a5b      	ldr	r2, [pc, #364]	; (8004b74 <statemachine+0x113c>)
 8004a08:	2301      	movs	r3, #1
 8004a0a:	ca06      	ldmia	r2, {r1, r2}
 8004a0c:	4858      	ldr	r0, [pc, #352]	; (8004b70 <statemachine+0x1138>)
 8004a0e:	f7fe fb89 	bl	8003124 <ssd1306_WriteString>

			  if(BTN_A>=1){
 8004a12:	4b5d      	ldr	r3, [pc, #372]	; (8004b88 <statemachine+0x1150>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	dd0b      	ble.n	8004a32 <statemachine+0xffa>
			  		state++;
 8004a1a:	4b5c      	ldr	r3, [pc, #368]	; (8004b8c <statemachine+0x1154>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	4b5a      	ldr	r3, [pc, #360]	; (8004b8c <statemachine+0x1154>)
 8004a24:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8004a26:	4b58      	ldr	r3, [pc, #352]	; (8004b88 <statemachine+0x1150>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004a2c:	4b58      	ldr	r3, [pc, #352]	; (8004b90 <statemachine+0x1158>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
			  		}
			  if(BTN_A_LONG>=1){
 8004a32:	4b58      	ldr	r3, [pc, #352]	; (8004b94 <statemachine+0x115c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f341 8223 	ble.w	8005e82 <statemachine+0x244a>
			  				 									 									  			 	state--;
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <statemachine+0x1154>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	4b51      	ldr	r3, [pc, #324]	; (8004b8c <statemachine+0x1154>)
 8004a46:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8004a48:	4b4f      	ldr	r3, [pc, #316]	; (8004b88 <statemachine+0x1150>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8004a4e:	4b50      	ldr	r3, [pc, #320]	; (8004b90 <statemachine+0x1158>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8004a54:	4b4f      	ldr	r3, [pc, #316]	; (8004b94 <statemachine+0x115c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8004a5a:	f001 ba12 	b.w	8005e82 <statemachine+0x244a>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f7fe fa44 	bl	8002eec <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8004a64:	2120      	movs	r1, #32
 8004a66:	2020      	movs	r0, #32
 8004a68:	f7fe fb82 	bl	8003170 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8004a6c:	4a41      	ldr	r2, [pc, #260]	; (8004b74 <statemachine+0x113c>)
 8004a6e:	2301      	movs	r3, #1
 8004a70:	ca06      	ldmia	r2, {r1, r2}
 8004a72:	4849      	ldr	r0, [pc, #292]	; (8004b98 <statemachine+0x1160>)
 8004a74:	f7fe fb56 	bl	8003124 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8004a78:	2128      	movs	r1, #40	; 0x28
 8004a7a:	2020      	movs	r0, #32
 8004a7c:	f7fe fb78 	bl	8003170 <ssd1306_SetCursor>

			  switch(chronostate){
 8004a80:	4b46      	ldr	r3, [pc, #280]	; (8004b9c <statemachine+0x1164>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d03c      	beq.n	8004b02 <statemachine+0x10ca>
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	f300 8098 	bgt.w	8004bbe <statemachine+0x1186>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <statemachine+0x1060>
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d01d      	beq.n	8004ad2 <statemachine+0x109a>
 8004a96:	e092      	b.n	8004bbe <statemachine+0x1186>
			  case STATE_RESET:
				  min=0;
 8004a98:	4b41      	ldr	r3, [pc, #260]	; (8004ba0 <statemachine+0x1168>)
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8004aa0:	4b40      	ldr	r3, [pc, #256]	; (8004ba4 <statemachine+0x116c>)
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8004aa8:	4b3f      	ldr	r3, [pc, #252]	; (8004ba8 <statemachine+0x1170>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8004aae:	4b38      	ldr	r3, [pc, #224]	; (8004b90 <statemachine+0x1158>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	dd51      	ble.n	8004b5a <statemachine+0x1122>
				  		chronostate++;
 8004ab6:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <statemachine+0x1164>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	3301      	adds	r3, #1
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4b37      	ldr	r3, [pc, #220]	; (8004b9c <statemachine+0x1164>)
 8004ac0:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004ac2:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <statemachine+0x1158>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8004ac8:	4b38      	ldr	r3, [pc, #224]	; (8004bac <statemachine+0x1174>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a38      	ldr	r2, [pc, #224]	; (8004bb0 <statemachine+0x1178>)
 8004ace:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8004ad0:	e043      	b.n	8004b5a <statemachine+0x1122>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8004ad2:	4b36      	ldr	r3, [pc, #216]	; (8004bac <statemachine+0x1174>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <statemachine+0x1178>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	1ad2      	subs	r2, r2, r3
 8004adc:	4b35      	ldr	r3, [pc, #212]	; (8004bb4 <statemachine+0x117c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	4a31      	ldr	r2, [pc, #196]	; (8004ba8 <statemachine+0x1170>)
 8004ae4:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8004ae6:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <statemachine+0x1158>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	dd37      	ble.n	8004b5e <statemachine+0x1126>
				  		chronostate++;
 8004aee:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <statemachine+0x1164>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	3301      	adds	r3, #1
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <statemachine+0x1164>)
 8004af8:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004afa:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <statemachine+0x1158>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8004b00:	e02d      	b.n	8004b5e <statemachine+0x1126>
			  case STATE_PAUSE:
				  timehandler=calctime;
 8004b02:	4b29      	ldr	r3, [pc, #164]	; (8004ba8 <statemachine+0x1170>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2b      	ldr	r2, [pc, #172]	; (8004bb4 <statemachine+0x117c>)
 8004b08:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <statemachine+0x1158>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dd0c      	ble.n	8004b2c <statemachine+0x10f4>
				  			chronostate--;
 8004b12:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <statemachine+0x1164>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <statemachine+0x1164>)
 8004b1c:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <statemachine+0x1158>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8004b24:	4b21      	ldr	r3, [pc, #132]	; (8004bac <statemachine+0x1174>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <statemachine+0x1178>)
 8004b2a:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8004b2c:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <statemachine+0x1180>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	dd43      	ble.n	8004bbc <statemachine+0x1184>
				  				  	chronostate--;
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <statemachine+0x1164>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <statemachine+0x1164>)
 8004b3e:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8004b40:	4b16      	ldr	r3, [pc, #88]	; (8004b9c <statemachine+0x1164>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <statemachine+0x1164>)
 8004b4a:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <statemachine+0x1180>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8004b52:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <statemachine+0x117c>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8004b58:	e030      	b.n	8004bbc <statemachine+0x1184>
				  break;
 8004b5a:	bf00      	nop
 8004b5c:	e02f      	b.n	8004bbe <statemachine+0x1186>
				  break;
 8004b5e:	bf00      	nop
 8004b60:	e02d      	b.n	8004bbe <statemachine+0x1186>
 8004b62:	bf00      	nop
 8004b64:	200004dc 	.word	0x200004dc
 8004b68:	200006e0 	.word	0x200006e0
 8004b6c:	0801c374 	.word	0x0801c374
 8004b70:	20000980 	.word	0x20000980
 8004b74:	2000000c 	.word	0x2000000c
 8004b78:	20000758 	.word	0x20000758
 8004b7c:	0801c380 	.word	0x0801c380
 8004b80:	20000750 	.word	0x20000750
 8004b84:	0801c38c 	.word	0x0801c38c
 8004b88:	20000720 	.word	0x20000720
 8004b8c:	2000048c 	.word	0x2000048c
 8004b90:	20000724 	.word	0x20000724
 8004b94:	20000b68 	.word	0x20000b68
 8004b98:	0801c398 	.word	0x0801c398
 8004b9c:	20000490 	.word	0x20000490
 8004ba0:	20000b00 	.word	0x20000b00
 8004ba4:	20000afc 	.word	0x20000afc
 8004ba8:	20000b08 	.word	0x20000b08
 8004bac:	200013c0 	.word	0x200013c0
 8004bb0:	20000b04 	.word	0x20000b04
 8004bb4:	20000b0c 	.word	0x20000b0c
 8004bb8:	20000b64 	.word	0x20000b64
				  break;
 8004bbc:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8004bbe:	4ba4      	ldr	r3, [pc, #656]	; (8004e50 <statemachine+0x1418>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8004e54 <statemachine+0x141c>
 8004bce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bd2:	ee16 0a90 	vmov	r0, s13
 8004bd6:	f7fb fcb7 	bl	8000548 <__aeabi_f2d>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	ec43 2b10 	vmov	d0, r2, r3
 8004be2:	f015 fde1 	bl	801a7a8 <floor>
 8004be6:	ec53 2b10 	vmov	r2, r3, d0
 8004bea:	4610      	mov	r0, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	f7fb fffb 	bl	8000be8 <__aeabi_d2f>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4a98      	ldr	r2, [pc, #608]	; (8004e58 <statemachine+0x1420>)
 8004bf6:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8004bf8:	4b95      	ldr	r3, [pc, #596]	; (8004e50 <statemachine+0x1418>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c04:	4b94      	ldr	r3, [pc, #592]	; (8004e58 <statemachine+0x1420>)
 8004c06:	edd3 7a00 	vldr	s15, [r3]
 8004c0a:	eddf 6a92 	vldr	s13, [pc, #584]	; 8004e54 <statemachine+0x141c>
 8004c0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c16:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004e5c <statemachine+0x1424>
 8004c1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c1e:	4b90      	ldr	r3, [pc, #576]	; (8004e60 <statemachine+0x1428>)
 8004c20:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8004c24:	4b8c      	ldr	r3, [pc, #560]	; (8004e58 <statemachine+0x1420>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fb fc8d 	bl	8000548 <__aeabi_f2d>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	e9cd 2300 	strd	r2, r3, [sp]
 8004c36:	4a8b      	ldr	r2, [pc, #556]	; (8004e64 <statemachine+0x142c>)
 8004c38:	210f      	movs	r1, #15
 8004c3a:	488b      	ldr	r0, [pc, #556]	; (8004e68 <statemachine+0x1430>)
 8004c3c:	f012 fe3a 	bl	80178b4 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004c40:	4a8a      	ldr	r2, [pc, #552]	; (8004e6c <statemachine+0x1434>)
 8004c42:	2301      	movs	r3, #1
 8004c44:	ca06      	ldmia	r2, {r1, r2}
 8004c46:	4888      	ldr	r0, [pc, #544]	; (8004e68 <statemachine+0x1430>)
 8004c48:	f7fe fa6c 	bl	8003124 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8004c4c:	2132      	movs	r1, #50	; 0x32
 8004c4e:	2020      	movs	r0, #32
 8004c50:	f7fe fa8e 	bl	8003170 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8004c54:	4b82      	ldr	r3, [pc, #520]	; (8004e60 <statemachine+0x1428>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fb fc75 	bl	8000548 <__aeabi_f2d>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	e9cd 2300 	strd	r2, r3, [sp]
 8004c66:	4a82      	ldr	r2, [pc, #520]	; (8004e70 <statemachine+0x1438>)
 8004c68:	210f      	movs	r1, #15
 8004c6a:	487f      	ldr	r0, [pc, #508]	; (8004e68 <statemachine+0x1430>)
 8004c6c:	f012 fe22 	bl	80178b4 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004c70:	4a7e      	ldr	r2, [pc, #504]	; (8004e6c <statemachine+0x1434>)
 8004c72:	2301      	movs	r3, #1
 8004c74:	ca06      	ldmia	r2, {r1, r2}
 8004c76:	487c      	ldr	r0, [pc, #496]	; (8004e68 <statemachine+0x1430>)
 8004c78:	f7fe fa54 	bl	8003124 <ssd1306_WriteString>


			  if(BTN_A>=1){
 8004c7c:	4b7d      	ldr	r3, [pc, #500]	; (8004e74 <statemachine+0x143c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dd0b      	ble.n	8004c9c <statemachine+0x1264>
			 	state++;
 8004c84:	4b7c      	ldr	r3, [pc, #496]	; (8004e78 <statemachine+0x1440>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	4b7a      	ldr	r3, [pc, #488]	; (8004e78 <statemachine+0x1440>)
 8004c8e:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8004c90:	4b78      	ldr	r3, [pc, #480]	; (8004e74 <statemachine+0x143c>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8004c96:	4b79      	ldr	r3, [pc, #484]	; (8004e7c <statemachine+0x1444>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8004c9c:	4b78      	ldr	r3, [pc, #480]	; (8004e80 <statemachine+0x1448>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f341 80f0 	ble.w	8005e86 <statemachine+0x244e>
			  				 									 									  			 	state--;
 8004ca6:	4b74      	ldr	r3, [pc, #464]	; (8004e78 <statemachine+0x1440>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4b72      	ldr	r3, [pc, #456]	; (8004e78 <statemachine+0x1440>)
 8004cb0:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8004cb2:	4b70      	ldr	r3, [pc, #448]	; (8004e74 <statemachine+0x143c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8004cb8:	4b70      	ldr	r3, [pc, #448]	; (8004e7c <statemachine+0x1444>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8004cbe:	4b70      	ldr	r3, [pc, #448]	; (8004e80 <statemachine+0x1448>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8004cc4:	f001 b8df 	b.w	8005e86 <statemachine+0x244e>


			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 8004cc8:	2000      	movs	r0, #0
 8004cca:	f7fe f90f 	bl	8002eec <ssd1306_Fill>

				  if(settimeen==0){
 8004cce:	4b6d      	ldr	r3, [pc, #436]	; (8004e84 <statemachine+0x144c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d145      	bne.n	8004d62 <statemachine+0x132a>

					  if(myData.fix==1){
 8004cd6:	4b6c      	ldr	r3, [pc, #432]	; (8004e88 <statemachine+0x1450>)
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d141      	bne.n	8004d62 <statemachine+0x132a>
						settimeen=1;
 8004cde:	4b69      	ldr	r3, [pc, #420]	; (8004e84 <statemachine+0x144c>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
						HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004ce4:	4b68      	ldr	r3, [pc, #416]	; (8004e88 <statemachine+0x1450>)
 8004ce6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	0092      	lsls	r2, r2, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	4b63      	ldr	r3, [pc, #396]	; (8004e88 <statemachine+0x1450>)
 8004cfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	4413      	add	r3, r2
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	4b60      	ldr	r3, [pc, #384]	; (8004e8c <statemachine+0x1454>)
 8004d0c:	701a      	strb	r2, [r3, #0]
						MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004d0e:	4b5e      	ldr	r3, [pc, #376]	; (8004e88 <statemachine+0x1450>)
 8004d10:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	0092      	lsls	r2, r2, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	4b58      	ldr	r3, [pc, #352]	; (8004e88 <statemachine+0x1450>)
 8004d26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	4b56      	ldr	r3, [pc, #344]	; (8004e90 <statemachine+0x1458>)
 8004d36:	701a      	strb	r2, [r3, #0]
						SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004d38:	4b53      	ldr	r3, [pc, #332]	; (8004e88 <statemachine+0x1450>)
 8004d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	0092      	lsls	r2, r2, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	4b4e      	ldr	r3, [pc, #312]	; (8004e88 <statemachine+0x1450>)
 8004d50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	4b4d      	ldr	r3, [pc, #308]	; (8004e94 <statemachine+0x145c>)
 8004d60:	701a      	strb	r2, [r3, #0]





				  switch(balisestate){
 8004d62:	4b4d      	ldr	r3, [pc, #308]	; (8004e98 <statemachine+0x1460>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	f000 8236 	beq.w	80051d8 <statemachine+0x17a0>
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	f301 808c 	bgt.w	8005e8a <statemachine+0x2452>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d004      	beq.n	8004d80 <statemachine+0x1348>
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	f000 809e 	beq.w	8004eb8 <statemachine+0x1480>
					  				 									 									  	}

				  }


				  break;
 8004d7c:	f001 b885 	b.w	8005e8a <statemachine+0x2452>
					  ssd1306_SetCursor(32,32);
 8004d80:	2120      	movs	r1, #32
 8004d82:	2020      	movs	r0, #32
 8004d84:	f7fe f9f4 	bl	8003170 <ssd1306_SetCursor>
					  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004d88:	4a44      	ldr	r2, [pc, #272]	; (8004e9c <statemachine+0x1464>)
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	ca06      	ldmia	r2, {r1, r2}
 8004d8e:	4844      	ldr	r0, [pc, #272]	; (8004ea0 <statemachine+0x1468>)
 8004d90:	f7fe f9c8 	bl	8003124 <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "off=%d",pageoffset);
 8004d94:	4b43      	ldr	r3, [pc, #268]	; (8004ea4 <statemachine+0x146c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a43      	ldr	r2, [pc, #268]	; (8004ea8 <statemachine+0x1470>)
 8004d9a:	2132      	movs	r1, #50	; 0x32
 8004d9c:	4832      	ldr	r0, [pc, #200]	; (8004e68 <statemachine+0x1430>)
 8004d9e:	f012 fd89 	bl	80178b4 <sniprintf>
					  ssd1306_SetCursor(32,40);
 8004da2:	2128      	movs	r1, #40	; 0x28
 8004da4:	2020      	movs	r0, #32
 8004da6:	f7fe f9e3 	bl	8003170 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004daa:	4a3c      	ldr	r2, [pc, #240]	; (8004e9c <statemachine+0x1464>)
 8004dac:	2301      	movs	r3, #1
 8004dae:	ca06      	ldmia	r2, {r1, r2}
 8004db0:	482d      	ldr	r0, [pc, #180]	; (8004e68 <statemachine+0x1430>)
 8004db2:	f7fe f9b7 	bl	8003124 <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004db6:	4b3d      	ldr	r3, [pc, #244]	; (8004eac <statemachine+0x1474>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a3d      	ldr	r2, [pc, #244]	; (8004eb0 <statemachine+0x1478>)
 8004dbc:	2132      	movs	r1, #50	; 0x32
 8004dbe:	482a      	ldr	r0, [pc, #168]	; (8004e68 <statemachine+0x1430>)
 8004dc0:	f012 fd78 	bl	80178b4 <sniprintf>
					  ssd1306_SetCursor(32,48);
 8004dc4:	2130      	movs	r1, #48	; 0x30
 8004dc6:	2020      	movs	r0, #32
 8004dc8:	f7fe f9d2 	bl	8003170 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004dcc:	4a33      	ldr	r2, [pc, #204]	; (8004e9c <statemachine+0x1464>)
 8004dce:	2301      	movs	r3, #1
 8004dd0:	ca06      	ldmia	r2, {r1, r2}
 8004dd2:	4825      	ldr	r0, [pc, #148]	; (8004e68 <statemachine+0x1430>)
 8004dd4:	f7fe f9a6 	bl	8003124 <ssd1306_WriteString>
					  if(BTN_B>=1){
 8004dd8:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <statemachine+0x1444>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	dd0e      	ble.n	8004dfe <statemachine+0x13c6>
						balisestate++;
 8004de0:	4b2d      	ldr	r3, [pc, #180]	; (8004e98 <statemachine+0x1460>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <statemachine+0x1460>)
 8004dea:	701a      	strb	r2, [r3, #0]
						BTN_B=0;
 8004dec:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <statemachine+0x1444>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
						BTN_A=0;
 8004df2:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <statemachine+0x143c>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim7);
 8004df8:	482e      	ldr	r0, [pc, #184]	; (8004eb4 <statemachine+0x147c>)
 8004dfa:	f009 f88d 	bl	800df18 <HAL_TIM_Base_Start_IT>
					  if(BTN_A>=1){
 8004dfe:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <statemachine+0x143c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	dd0e      	ble.n	8004e24 <statemachine+0x13ec>
					  				  			 	state++;
 8004e06:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <statemachine+0x1440>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <statemachine+0x1440>)
 8004e10:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8004e12:	4b18      	ldr	r3, [pc, #96]	; (8004e74 <statemachine+0x143c>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8004e18:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <statemachine+0x1444>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
					  				  			 	settimeen=0;
 8004e1e:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <statemachine+0x144c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 8004e24:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <statemachine+0x1448>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f340 8227 	ble.w	800527c <statemachine+0x1844>
					  				 									 									  			 	state--;
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <statemachine+0x1440>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <statemachine+0x1440>)
 8004e38:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <statemachine+0x143c>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <statemachine+0x1444>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 8004e46:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <statemachine+0x1448>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
					  break;
 8004e4c:	e216      	b.n	800527c <statemachine+0x1844>
 8004e4e:	bf00      	nop
 8004e50:	20000b08 	.word	0x20000b08
 8004e54:	476a6000 	.word	0x476a6000
 8004e58:	20000b00 	.word	0x20000b00
 8004e5c:	447a0000 	.word	0x447a0000
 8004e60:	20000afc 	.word	0x20000afc
 8004e64:	0801c3a0 	.word	0x0801c3a0
 8004e68:	20000980 	.word	0x20000980
 8004e6c:	20000014 	.word	0x20000014
 8004e70:	0801c3ac 	.word	0x0801c3ac
 8004e74:	20000720 	.word	0x20000720
 8004e78:	2000048c 	.word	0x2000048c
 8004e7c:	20000724 	.word	0x20000724
 8004e80:	20000b68 	.word	0x20000b68
 8004e84:	20000b50 	.word	0x20000b50
 8004e88:	200006e0 	.word	0x200006e0
 8004e8c:	20000b4d 	.word	0x20000b4d
 8004e90:	20000b4e 	.word	0x20000b4e
 8004e94:	20000b4c 	.word	0x20000b4c
 8004e98:	20000492 	.word	0x20000492
 8004e9c:	2000000c 	.word	0x2000000c
 8004ea0:	0801c3b4 	.word	0x0801c3b4
 8004ea4:	2000095c 	.word	0x2000095c
 8004ea8:	0801c3bc 	.word	0x0801c3bc
 8004eac:	20000960 	.word	0x20000960
 8004eb0:	0801c3c4 	.word	0x0801c3c4
 8004eb4:	200011b8 	.word	0x200011b8
					  erasetime=HAL_GetTick();
 8004eb8:	f001 ffa2 	bl	8006e00 <HAL_GetTick>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4bab      	ldr	r3, [pc, #684]	; (8005170 <statemachine+0x1738>)
 8004ec2:	601a      	str	r2, [r3, #0]
					  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004ec4:	4bab      	ldr	r3, [pc, #684]	; (8005174 <statemachine+0x173c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f246 32fd 	movw	r2, #25597	; 0x63fd
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	dd05      	ble.n	8004edc <statemachine+0x14a4>
						  HAL_TIM_Base_Stop_IT(&htim7);
 8004ed0:	48a9      	ldr	r0, [pc, #676]	; (8005178 <statemachine+0x1740>)
 8004ed2:	f009 f875 	bl	800dfc0 <HAL_TIM_Base_Stop_IT>
						  balisestate=2;
 8004ed6:	4ba9      	ldr	r3, [pc, #676]	; (800517c <statemachine+0x1744>)
 8004ed8:	2202      	movs	r2, #2
 8004eda:	701a      	strb	r2, [r3, #0]
					  if(enablewrite==1){
 8004edc:	4ba8      	ldr	r3, [pc, #672]	; (8005180 <statemachine+0x1748>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	f040 80b0 	bne.w	8005046 <statemachine+0x160e>
						  oldlat=myData.latitude;
 8004ee6:	4ba7      	ldr	r3, [pc, #668]	; (8005184 <statemachine+0x174c>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	49a6      	ldr	r1, [pc, #664]	; (8005188 <statemachine+0x1750>)
 8004eee:	e9c1 2300 	strd	r2, r3, [r1]
						  oldlong=myData.longitude;
 8004ef2:	4ba4      	ldr	r3, [pc, #656]	; (8005184 <statemachine+0x174c>)
 8004ef4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004ef8:	49a4      	ldr	r1, [pc, #656]	; (800518c <statemachine+0x1754>)
 8004efa:	e9c1 2300 	strd	r2, r3, [r1]
						  nmea_parse(&myData, DataBuffer);
 8004efe:	49a4      	ldr	r1, [pc, #656]	; (8005190 <statemachine+0x1758>)
 8004f00:	48a0      	ldr	r0, [pc, #640]	; (8005184 <statemachine+0x174c>)
 8004f02:	f7fd fb0b 	bl	800251c <nmea_parse>
						  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004f06:	4ba0      	ldr	r3, [pc, #640]	; (8005188 <statemachine+0x1750>)
 8004f08:	ed93 7b00 	vldr	d7, [r3]
 8004f0c:	4b9d      	ldr	r3, [pc, #628]	; (8005184 <statemachine+0x174c>)
 8004f0e:	ed93 6b00 	vldr	d6, [r3]
 8004f12:	4b9e      	ldr	r3, [pc, #632]	; (800518c <statemachine+0x1754>)
 8004f14:	ed93 5b00 	vldr	d5, [r3]
 8004f18:	4b9a      	ldr	r3, [pc, #616]	; (8005184 <statemachine+0x174c>)
 8004f1a:	ed93 4b04 	vldr	d4, [r3, #16]
 8004f1e:	eeb0 3a44 	vmov.f32	s6, s8
 8004f22:	eef0 3a64 	vmov.f32	s7, s9
 8004f26:	eeb0 2a45 	vmov.f32	s4, s10
 8004f2a:	eef0 2a65 	vmov.f32	s5, s11
 8004f2e:	eeb0 1a46 	vmov.f32	s2, s12
 8004f32:	eef0 1a66 	vmov.f32	s3, s13
 8004f36:	eeb0 0a47 	vmov.f32	s0, s14
 8004f3a:	eef0 0a67 	vmov.f32	s1, s15
 8004f3e:	f7fd fb9f 	bl	8002680 <distancecalc>
 8004f42:	ec51 0b10 	vmov	r0, r1, d0
 8004f46:	a388      	add	r3, pc, #544	; (adr r3, 8005168 <statemachine+0x1730>)
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f7fb fde4 	bl	8000b18 <__aeabi_dcmpgt>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d02b      	beq.n	8004fae <statemachine+0x1576>
							  myData.latitude=oldlat;
 8004f56:	4b8c      	ldr	r3, [pc, #560]	; (8005188 <statemachine+0x1750>)
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	4989      	ldr	r1, [pc, #548]	; (8005184 <statemachine+0x174c>)
 8004f5e:	e9c1 2300 	strd	r2, r3, [r1]
							  myData.longitude=oldlong;
 8004f62:	4b8a      	ldr	r3, [pc, #552]	; (800518c <statemachine+0x1754>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	4986      	ldr	r1, [pc, #536]	; (8005184 <statemachine+0x174c>)
 8004f6a:	e9c1 2304 	strd	r2, r3, [r1, #16]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004f6e:	4b89      	ldr	r3, [pc, #548]	; (8005194 <statemachine+0x175c>)
 8004f70:	edd3 7a00 	vldr	s15, [r3]
 8004f74:	4b88      	ldr	r3, [pc, #544]	; (8005198 <statemachine+0x1760>)
 8004f76:	ed93 7a00 	vldr	s14, [r3]
 8004f7a:	4b82      	ldr	r3, [pc, #520]	; (8005184 <statemachine+0x174c>)
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	4a81      	ldr	r2, [pc, #516]	; (8005184 <statemachine+0x174c>)
 8004f80:	edd2 6a08 	vldr	s13, [r2, #32]
 8004f84:	eeb0 1a66 	vmov.f32	s2, s13
 8004f88:	461a      	mov	r2, r3
 8004f8a:	497e      	ldr	r1, [pc, #504]	; (8005184 <statemachine+0x174c>)
 8004f8c:	eef0 0a47 	vmov.f32	s1, s14
 8004f90:	eeb0 0a67 	vmov.f32	s0, s15
 8004f94:	4881      	ldr	r0, [pc, #516]	; (800519c <statemachine+0x1764>)
 8004f96:	f7fd fd43 	bl	8002a20 <csvframe>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4a80      	ldr	r2, [pc, #512]	; (80051a0 <statemachine+0x1768>)
 8004f9e:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004fa0:	4b7f      	ldr	r3, [pc, #508]	; (80051a0 <statemachine+0x1768>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	487d      	ldr	r0, [pc, #500]	; (800519c <statemachine+0x1764>)
 8004fa8:	f7fd fe70 	bl	8002c8c <writebuffertoflash>
 8004fac:	e048      	b.n	8005040 <statemachine+0x1608>
							  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004fae:	4b76      	ldr	r3, [pc, #472]	; (8005188 <statemachine+0x1750>)
 8004fb0:	ed93 7b00 	vldr	d7, [r3]
 8004fb4:	4b73      	ldr	r3, [pc, #460]	; (8005184 <statemachine+0x174c>)
 8004fb6:	ed93 6b00 	vldr	d6, [r3]
 8004fba:	4b74      	ldr	r3, [pc, #464]	; (800518c <statemachine+0x1754>)
 8004fbc:	ed93 5b00 	vldr	d5, [r3]
 8004fc0:	4b70      	ldr	r3, [pc, #448]	; (8005184 <statemachine+0x174c>)
 8004fc2:	ed93 4b04 	vldr	d4, [r3, #16]
 8004fc6:	eeb0 3a44 	vmov.f32	s6, s8
 8004fca:	eef0 3a64 	vmov.f32	s7, s9
 8004fce:	eeb0 2a45 	vmov.f32	s4, s10
 8004fd2:	eef0 2a65 	vmov.f32	s5, s11
 8004fd6:	eeb0 1a46 	vmov.f32	s2, s12
 8004fda:	eef0 1a66 	vmov.f32	s3, s13
 8004fde:	eeb0 0a47 	vmov.f32	s0, s14
 8004fe2:	eef0 0a67 	vmov.f32	s1, s15
 8004fe6:	f7fd fb4b 	bl	8002680 <distancecalc>
 8004fea:	ec51 0b10 	vmov	r0, r1, d0
 8004fee:	4b6d      	ldr	r3, [pc, #436]	; (80051a4 <statemachine+0x176c>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f7fb f94a 	bl	800028c <__adddf3>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4969      	ldr	r1, [pc, #420]	; (80051a4 <statemachine+0x176c>)
 8004ffe:	e9c1 2300 	strd	r2, r3, [r1]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8005002:	4b64      	ldr	r3, [pc, #400]	; (8005194 <statemachine+0x175c>)
 8005004:	edd3 7a00 	vldr	s15, [r3]
 8005008:	4b63      	ldr	r3, [pc, #396]	; (8005198 <statemachine+0x1760>)
 800500a:	ed93 7a00 	vldr	s14, [r3]
 800500e:	4b5d      	ldr	r3, [pc, #372]	; (8005184 <statemachine+0x174c>)
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	4a5c      	ldr	r2, [pc, #368]	; (8005184 <statemachine+0x174c>)
 8005014:	edd2 6a08 	vldr	s13, [r2, #32]
 8005018:	eeb0 1a66 	vmov.f32	s2, s13
 800501c:	461a      	mov	r2, r3
 800501e:	4959      	ldr	r1, [pc, #356]	; (8005184 <statemachine+0x174c>)
 8005020:	eef0 0a47 	vmov.f32	s1, s14
 8005024:	eeb0 0a67 	vmov.f32	s0, s15
 8005028:	485c      	ldr	r0, [pc, #368]	; (800519c <statemachine+0x1764>)
 800502a:	f7fd fcf9 	bl	8002a20 <csvframe>
 800502e:	4603      	mov	r3, r0
 8005030:	4a5b      	ldr	r2, [pc, #364]	; (80051a0 <statemachine+0x1768>)
 8005032:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8005034:	4b5a      	ldr	r3, [pc, #360]	; (80051a0 <statemachine+0x1768>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4619      	mov	r1, r3
 800503a:	4858      	ldr	r0, [pc, #352]	; (800519c <statemachine+0x1764>)
 800503c:	f7fd fe26 	bl	8002c8c <writebuffertoflash>
						  enablewrite=0;
 8005040:	4b4f      	ldr	r3, [pc, #316]	; (8005180 <statemachine+0x1748>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
					  if(doubledonnee==0){
 8005046:	4b58      	ldr	r3, [pc, #352]	; (80051a8 <statemachine+0x1770>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d111      	bne.n	8005072 <statemachine+0x163a>
					 	ssd1306_SetCursor(32,32);
 800504e:	2120      	movs	r1, #32
 8005050:	2020      	movs	r0, #32
 8005052:	f7fe f88d 	bl	8003170 <ssd1306_SetCursor>
					 	snprintf((char *)bufferscreen,50,"p=%d",pagenumber);
 8005056:	4b47      	ldr	r3, [pc, #284]	; (8005174 <statemachine+0x173c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a54      	ldr	r2, [pc, #336]	; (80051ac <statemachine+0x1774>)
 800505c:	2132      	movs	r1, #50	; 0x32
 800505e:	4854      	ldr	r0, [pc, #336]	; (80051b0 <statemachine+0x1778>)
 8005060:	f012 fc28 	bl	80178b4 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8005064:	4a53      	ldr	r2, [pc, #332]	; (80051b4 <statemachine+0x177c>)
 8005066:	2301      	movs	r3, #1
 8005068:	ca06      	ldmia	r2, {r1, r2}
 800506a:	4851      	ldr	r0, [pc, #324]	; (80051b0 <statemachine+0x1778>)
 800506c:	f7fe f85a 	bl	8003124 <ssd1306_WriteString>
 8005070:	e013      	b.n	800509a <statemachine+0x1662>
					 	ssd1306_SetCursor(32,32);
 8005072:	2120      	movs	r1, #32
 8005074:	2020      	movs	r0, #32
 8005076:	f7fe f87b 	bl	8003170 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 800507a:	4b4a      	ldr	r3, [pc, #296]	; (80051a4 <statemachine+0x176c>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	e9cd 2300 	strd	r2, r3, [sp]
 8005084:	4a4c      	ldr	r2, [pc, #304]	; (80051b8 <statemachine+0x1780>)
 8005086:	2132      	movs	r1, #50	; 0x32
 8005088:	4849      	ldr	r0, [pc, #292]	; (80051b0 <statemachine+0x1778>)
 800508a:	f012 fc13 	bl	80178b4 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800508e:	4a49      	ldr	r2, [pc, #292]	; (80051b4 <statemachine+0x177c>)
 8005090:	2301      	movs	r3, #1
 8005092:	ca06      	ldmia	r2, {r1, r2}
 8005094:	4846      	ldr	r0, [pc, #280]	; (80051b0 <statemachine+0x1778>)
 8005096:	f7fe f845 	bl	8003124 <ssd1306_WriteString>
					 	ssd1306_SetCursor(32,42);
 800509a:	212a      	movs	r1, #42	; 0x2a
 800509c:	2020      	movs	r0, #32
 800509e:	f7fe f867 	bl	8003170 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 80050a2:	4b38      	ldr	r3, [pc, #224]	; (8005184 <statemachine+0x174c>)
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	4a45      	ldr	r2, [pc, #276]	; (80051bc <statemachine+0x1784>)
 80050a8:	2132      	movs	r1, #50	; 0x32
 80050aa:	4841      	ldr	r0, [pc, #260]	; (80051b0 <statemachine+0x1778>)
 80050ac:	f012 fc02 	bl	80178b4 <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80050b0:	4a43      	ldr	r2, [pc, #268]	; (80051c0 <statemachine+0x1788>)
 80050b2:	2301      	movs	r3, #1
 80050b4:	ca06      	ldmia	r2, {r1, r2}
 80050b6:	483e      	ldr	r0, [pc, #248]	; (80051b0 <statemachine+0x1778>)
 80050b8:	f7fe f834 	bl	8003124 <ssd1306_WriteString>
					 	batterygauge(vbat,34, 50,1);
 80050bc:	4b36      	ldr	r3, [pc, #216]	; (8005198 <statemachine+0x1760>)
 80050be:	edd3 7a00 	vldr	s15, [r3]
 80050c2:	2201      	movs	r2, #1
 80050c4:	2132      	movs	r1, #50	; 0x32
 80050c6:	2022      	movs	r0, #34	; 0x22
 80050c8:	eeb0 0a67 	vmov.f32	s0, s15
 80050cc:	f7fe fa6c 	bl	80035a8 <batterygauge>
					 	ssd1306_SetCursor(60,50);
 80050d0:	2132      	movs	r1, #50	; 0x32
 80050d2:	203c      	movs	r0, #60	; 0x3c
 80050d4:	f7fe f84c 	bl	8003170 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 80050d8:	4b2f      	ldr	r3, [pc, #188]	; (8005198 <statemachine+0x1760>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fb fa33 	bl	8000548 <__aeabi_f2d>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	e9cd 2300 	strd	r2, r3, [sp]
 80050ea:	4a36      	ldr	r2, [pc, #216]	; (80051c4 <statemachine+0x178c>)
 80050ec:	2132      	movs	r1, #50	; 0x32
 80050ee:	4830      	ldr	r0, [pc, #192]	; (80051b0 <statemachine+0x1778>)
 80050f0:	f012 fbe0 	bl	80178b4 <sniprintf>
					 	if(cptdoubledonnee==3){
 80050f4:	4b34      	ldr	r3, [pc, #208]	; (80051c8 <statemachine+0x1790>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d108      	bne.n	800510e <statemachine+0x16d6>
					 	  		doubledonnee=1-doubledonnee;
 80050fc:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <statemachine+0x1770>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f1c3 0301 	rsb	r3, r3, #1
 8005104:	4a28      	ldr	r2, [pc, #160]	; (80051a8 <statemachine+0x1770>)
 8005106:	6013      	str	r3, [r2, #0]
					 	  		cptdoubledonnee=0;
 8005108:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <statemachine+0x1790>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
					 	erasetime=HAL_GetTick()-erasetime;
 800510e:	f001 fe77 	bl	8006e00 <HAL_GetTick>
 8005112:	4603      	mov	r3, r0
 8005114:	4a16      	ldr	r2, [pc, #88]	; (8005170 <statemachine+0x1738>)
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	461a      	mov	r2, r3
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <statemachine+0x1738>)
 800511e:	601a      	str	r2, [r3, #0]
					  if(BTN_B>=1){
 8005120:	4b2a      	ldr	r3, [pc, #168]	; (80051cc <statemachine+0x1794>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	dd0e      	ble.n	8005146 <statemachine+0x170e>
					  						  balisestate--;
 8005128:	4b14      	ldr	r3, [pc, #80]	; (800517c <statemachine+0x1744>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	3b01      	subs	r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	4b12      	ldr	r3, [pc, #72]	; (800517c <statemachine+0x1744>)
 8005132:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 8005134:	4b25      	ldr	r3, [pc, #148]	; (80051cc <statemachine+0x1794>)
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 800513a:	4b25      	ldr	r3, [pc, #148]	; (80051d0 <statemachine+0x1798>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
					  						  HAL_TIM_Base_Stop_IT(&htim7);
 8005140:	480d      	ldr	r0, [pc, #52]	; (8005178 <statemachine+0x1740>)
 8005142:	f008 ff3d 	bl	800dfc0 <HAL_TIM_Base_Stop_IT>
					  if(BTN_B_LONG>=1){
 8005146:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <statemachine+0x179c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f340 8099 	ble.w	8005282 <statemachine+0x184a>
						distanceparcouru=0;
 8005150:	4914      	ldr	r1, [pc, #80]	; (80051a4 <statemachine+0x176c>)
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	e9c1 2300 	strd	r2, r3, [r1]
					  	BTN_B_LONG=0;
 800515e:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <statemachine+0x179c>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
					  break;
 8005164:	e08d      	b.n	8005282 <statemachine+0x184a>
 8005166:	bf00      	nop
 8005168:	00000000 	.word	0x00000000
 800516c:	40616000 	.word	0x40616000
 8005170:	20000b14 	.word	0x20000b14
 8005174:	20000960 	.word	0x20000960
 8005178:	200011b8 	.word	0x200011b8
 800517c:	20000492 	.word	0x20000492
 8005180:	20000b48 	.word	0x20000b48
 8005184:	200006e0 	.word	0x200006e0
 8005188:	20000b38 	.word	0x20000b38
 800518c:	20000b40 	.word	0x20000b40
 8005190:	200004dc 	.word	0x200004dc
 8005194:	20000750 	.word	0x20000750
 8005198:	20000758 	.word	0x20000758
 800519c:	2000075c 	.word	0x2000075c
 80051a0:	20000b10 	.word	0x20000b10
 80051a4:	20000b30 	.word	0x20000b30
 80051a8:	20000b24 	.word	0x20000b24
 80051ac:	0801c3cc 	.word	0x0801c3cc
 80051b0:	20000980 	.word	0x20000980
 80051b4:	20000014 	.word	0x20000014
 80051b8:	0801c3d4 	.word	0x0801c3d4
 80051bc:	0801c3e0 	.word	0x0801c3e0
 80051c0:	2000000c 	.word	0x2000000c
 80051c4:	0801c3e8 	.word	0x0801c3e8
 80051c8:	20000b28 	.word	0x20000b28
 80051cc:	20000724 	.word	0x20000724
 80051d0:	20000720 	.word	0x20000720
 80051d4:	20000b64 	.word	0x20000b64
					  ssd1306_SetCursor(32,32);
 80051d8:	2120      	movs	r1, #32
 80051da:	2020      	movs	r0, #32
 80051dc:	f7fd ffc8 	bl	8003170 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 80051e0:	4aa2      	ldr	r2, [pc, #648]	; (800546c <statemachine+0x1a34>)
 80051e2:	2301      	movs	r3, #1
 80051e4:	ca06      	ldmia	r2, {r1, r2}
 80051e6:	48a2      	ldr	r0, [pc, #648]	; (8005470 <statemachine+0x1a38>)
 80051e8:	f7fd ff9c 	bl	8003124 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 80051ec:	2128      	movs	r1, #40	; 0x28
 80051ee:	2020      	movs	r0, #32
 80051f0:	f7fd ffbe 	bl	8003170 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 80051f4:	4a9d      	ldr	r2, [pc, #628]	; (800546c <statemachine+0x1a34>)
 80051f6:	2301      	movs	r3, #1
 80051f8:	ca06      	ldmia	r2, {r1, r2}
 80051fa:	489e      	ldr	r0, [pc, #632]	; (8005474 <statemachine+0x1a3c>)
 80051fc:	f7fd ff92 	bl	8003124 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 8005200:	2130      	movs	r1, #48	; 0x30
 8005202:	2020      	movs	r0, #32
 8005204:	f7fd ffb4 	bl	8003170 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8005208:	4b9b      	ldr	r3, [pc, #620]	; (8005478 <statemachine+0x1a40>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	4b9b      	ldr	r3, [pc, #620]	; (800547c <statemachine+0x1a44>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	4a9a      	ldr	r2, [pc, #616]	; (8005480 <statemachine+0x1a48>)
 8005216:	2132      	movs	r1, #50	; 0x32
 8005218:	489a      	ldr	r0, [pc, #616]	; (8005484 <statemachine+0x1a4c>)
 800521a:	f012 fb4b 	bl	80178b4 <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800521e:	4a93      	ldr	r2, [pc, #588]	; (800546c <statemachine+0x1a34>)
 8005220:	2301      	movs	r3, #1
 8005222:	ca06      	ldmia	r2, {r1, r2}
 8005224:	4897      	ldr	r0, [pc, #604]	; (8005484 <statemachine+0x1a4c>)
 8005226:	f7fd ff7d 	bl	8003124 <ssd1306_WriteString>
					  if(BTN_A>=1){
 800522a:	4b97      	ldr	r3, [pc, #604]	; (8005488 <statemachine+0x1a50>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	dd0e      	ble.n	8005250 <statemachine+0x1818>
					  				  			 	state++;
 8005232:	4b96      	ldr	r3, [pc, #600]	; (800548c <statemachine+0x1a54>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	3301      	adds	r3, #1
 8005238:	b2da      	uxtb	r2, r3
 800523a:	4b94      	ldr	r3, [pc, #592]	; (800548c <statemachine+0x1a54>)
 800523c:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 800523e:	4b92      	ldr	r3, [pc, #584]	; (8005488 <statemachine+0x1a50>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8005244:	4b92      	ldr	r3, [pc, #584]	; (8005490 <statemachine+0x1a58>)
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
					  				  			settimeen=0;
 800524a:	4b92      	ldr	r3, [pc, #584]	; (8005494 <statemachine+0x1a5c>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 8005250:	4b91      	ldr	r3, [pc, #580]	; (8005498 <statemachine+0x1a60>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f340 8618 	ble.w	8005e8a <statemachine+0x2452>
					  				 									 									  			 	state--;
 800525a:	4b8c      	ldr	r3, [pc, #560]	; (800548c <statemachine+0x1a54>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	3b01      	subs	r3, #1
 8005260:	b2da      	uxtb	r2, r3
 8005262:	4b8a      	ldr	r3, [pc, #552]	; (800548c <statemachine+0x1a54>)
 8005264:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8005266:	4b88      	ldr	r3, [pc, #544]	; (8005488 <statemachine+0x1a50>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 800526c:	4b88      	ldr	r3, [pc, #544]	; (8005490 <statemachine+0x1a58>)
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 8005272:	4b89      	ldr	r3, [pc, #548]	; (8005498 <statemachine+0x1a60>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
				  break;
 8005278:	f000 be07 	b.w	8005e8a <statemachine+0x2452>
					  break;
 800527c:	bf00      	nop
 800527e:	f000 be04 	b.w	8005e8a <statemachine+0x2452>
					  break;
 8005282:	bf00      	nop
				  break;
 8005284:	f000 be01 	b.w	8005e8a <statemachine+0x2452>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005288:	2000      	movs	r0, #0
 800528a:	f7fd fe2f 	bl	8002eec <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 800528e:	2120      	movs	r1, #32
 8005290:	2020      	movs	r0, #32
 8005292:	f7fd ff6d 	bl	8003170 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005296:	4a75      	ldr	r2, [pc, #468]	; (800546c <statemachine+0x1a34>)
 8005298:	2301      	movs	r3, #1
 800529a:	ca06      	ldmia	r2, {r1, r2}
 800529c:	487f      	ldr	r0, [pc, #508]	; (800549c <statemachine+0x1a64>)
 800529e:	f7fd ff41 	bl	8003124 <ssd1306_WriteString>
				  switch(usbstate){
 80052a2:	4b7f      	ldr	r3, [pc, #508]	; (80054a0 <statemachine+0x1a68>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	f000 8162 	beq.w	8005570 <statemachine+0x1b38>
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	f300 85ee 	bgt.w	8005e8e <statemachine+0x2456>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <statemachine+0x1886>
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d043      	beq.n	8005342 <statemachine+0x190a>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 80052ba:	f000 bde8 	b.w	8005e8e <statemachine+0x2456>
				 					  ssd1306_SetCursor(32,40);
 80052be:	2128      	movs	r1, #40	; 0x28
 80052c0:	2020      	movs	r0, #32
 80052c2:	f7fd ff55 	bl	8003170 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 80052c6:	4a69      	ldr	r2, [pc, #420]	; (800546c <statemachine+0x1a34>)
 80052c8:	2301      	movs	r3, #1
 80052ca:	ca06      	ldmia	r2, {r1, r2}
 80052cc:	4875      	ldr	r0, [pc, #468]	; (80054a4 <statemachine+0x1a6c>)
 80052ce:	f7fd ff29 	bl	8003124 <ssd1306_WriteString>
				 					  usbtransmiten=0;
 80052d2:	4b75      	ldr	r3, [pc, #468]	; (80054a8 <statemachine+0x1a70>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 80052d8:	4b6d      	ldr	r3, [pc, #436]	; (8005490 <statemachine+0x1a58>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	dd0b      	ble.n	80052f8 <statemachine+0x18c0>
				 						  usbstate++;
 80052e0:	4b6f      	ldr	r3, [pc, #444]	; (80054a0 <statemachine+0x1a68>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	4b6d      	ldr	r3, [pc, #436]	; (80054a0 <statemachine+0x1a68>)
 80052ea:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 80052ec:	4b68      	ldr	r3, [pc, #416]	; (8005490 <statemachine+0x1a58>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 80052f2:	4b65      	ldr	r3, [pc, #404]	; (8005488 <statemachine+0x1a50>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80052f8:	4b63      	ldr	r3, [pc, #396]	; (8005488 <statemachine+0x1a50>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	dd0b      	ble.n	8005318 <statemachine+0x18e0>
				 						 state++;
 8005300:	4b62      	ldr	r3, [pc, #392]	; (800548c <statemachine+0x1a54>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	4b60      	ldr	r3, [pc, #384]	; (800548c <statemachine+0x1a54>)
 800530a:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 800530c:	4b5e      	ldr	r3, [pc, #376]	; (8005488 <statemachine+0x1a50>)
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005312:	4b5f      	ldr	r3, [pc, #380]	; (8005490 <statemachine+0x1a58>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005318:	4b5f      	ldr	r3, [pc, #380]	; (8005498 <statemachine+0x1a60>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f340 8207 	ble.w	8005730 <statemachine+0x1cf8>
				 									 									 									  			 	state--;
 8005322:	4b5a      	ldr	r3, [pc, #360]	; (800548c <statemachine+0x1a54>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	3b01      	subs	r3, #1
 8005328:	b2da      	uxtb	r2, r3
 800532a:	4b58      	ldr	r3, [pc, #352]	; (800548c <statemachine+0x1a54>)
 800532c:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 800532e:	4b56      	ldr	r3, [pc, #344]	; (8005488 <statemachine+0x1a50>)
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005334:	4b56      	ldr	r3, [pc, #344]	; (8005490 <statemachine+0x1a58>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 800533a:	4b57      	ldr	r3, [pc, #348]	; (8005498 <statemachine+0x1a60>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]
				 					  break;
 8005340:	e1f6      	b.n	8005730 <statemachine+0x1cf8>
				 					 ssd1306_SetCursor(32,40);
 8005342:	2128      	movs	r1, #40	; 0x28
 8005344:	2020      	movs	r0, #32
 8005346:	f7fd ff13 	bl	8003170 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 800534a:	4a48      	ldr	r2, [pc, #288]	; (800546c <statemachine+0x1a34>)
 800534c:	2301      	movs	r3, #1
 800534e:	ca06      	ldmia	r2, {r1, r2}
 8005350:	4856      	ldr	r0, [pc, #344]	; (80054ac <statemachine+0x1a74>)
 8005352:	f7fd fee7 	bl	8003124 <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8005356:	2130      	movs	r1, #48	; 0x30
 8005358:	2020      	movs	r0, #32
 800535a:	f7fd ff09 	bl	8003170 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 800535e:	4a43      	ldr	r2, [pc, #268]	; (800546c <statemachine+0x1a34>)
 8005360:	2301      	movs	r3, #1
 8005362:	ca06      	ldmia	r2, {r1, r2}
 8005364:	4852      	ldr	r0, [pc, #328]	; (80054b0 <statemachine+0x1a78>)
 8005366:	f7fd fedd 	bl	8003124 <ssd1306_WriteString>
				 					if(erasedisplay==1){
 800536a:	4b52      	ldr	r3, [pc, #328]	; (80054b4 <statemachine+0x1a7c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d137      	bne.n	80053e2 <statemachine+0x19aa>
					 					 ssd1306_Fill(Black);
 8005372:	2000      	movs	r0, #0
 8005374:	f7fd fdba 	bl	8002eec <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8005378:	2120      	movs	r1, #32
 800537a:	2020      	movs	r0, #32
 800537c:	f7fd fef8 	bl	8003170 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005380:	4a3a      	ldr	r2, [pc, #232]	; (800546c <statemachine+0x1a34>)
 8005382:	2301      	movs	r3, #1
 8005384:	ca06      	ldmia	r2, {r1, r2}
 8005386:	4845      	ldr	r0, [pc, #276]	; (800549c <statemachine+0x1a64>)
 8005388:	f7fd fecc 	bl	8003124 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,40);
 800538c:	2128      	movs	r1, #40	; 0x28
 800538e:	2020      	movs	r0, #32
 8005390:	f7fd feee 	bl	8003170 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8005394:	4a48      	ldr	r2, [pc, #288]	; (80054b8 <statemachine+0x1a80>)
 8005396:	2301      	movs	r3, #1
 8005398:	ca06      	ldmia	r2, {r1, r2}
 800539a:	4848      	ldr	r0, [pc, #288]	; (80054bc <statemachine+0x1a84>)
 800539c:	f7fd fec2 	bl	8003124 <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 80053a0:	2138      	movs	r1, #56	; 0x38
 80053a2:	2020      	movs	r0, #32
 80053a4:	f7fd fee4 	bl	8003170 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 80053a8:	4b45      	ldr	r3, [pc, #276]	; (80054c0 <statemachine+0x1a88>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053b4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80054c4 <statemachine+0x1a8c>
 80053b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80053bc:	ee16 0a90 	vmov	r0, s13
 80053c0:	f7fb f8c2 	bl	8000548 <__aeabi_f2d>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	e9cd 2300 	strd	r2, r3, [sp]
 80053cc:	4a3e      	ldr	r2, [pc, #248]	; (80054c8 <statemachine+0x1a90>)
 80053ce:	2132      	movs	r1, #50	; 0x32
 80053d0:	482c      	ldr	r0, [pc, #176]	; (8005484 <statemachine+0x1a4c>)
 80053d2:	f012 fa6f 	bl	80178b4 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80053d6:	4a25      	ldr	r2, [pc, #148]	; (800546c <statemachine+0x1a34>)
 80053d8:	2301      	movs	r3, #1
 80053da:	ca06      	ldmia	r2, {r1, r2}
 80053dc:	4829      	ldr	r0, [pc, #164]	; (8005484 <statemachine+0x1a4c>)
 80053de:	f7fd fea1 	bl	8003124 <ssd1306_WriteString>
				 					if(BTN_A>=1){
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <statemachine+0x1a50>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f340 80b0 	ble.w	800554c <statemachine+0x1b14>
				 						erasetime=HAL_GetTick();
 80053ec:	f001 fd08 	bl	8006e00 <HAL_GetTick>
 80053f0:	4603      	mov	r3, r0
 80053f2:	461a      	mov	r2, r3
 80053f4:	4b32      	ldr	r3, [pc, #200]	; (80054c0 <statemachine+0x1a88>)
 80053f6:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 80053f8:	2300      	movs	r3, #0
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	e073      	b.n	80054e6 <statemachine+0x1aae>
				 							ssd1306_Fill(Black);
 80053fe:	2000      	movs	r0, #0
 8005400:	f7fd fd74 	bl	8002eec <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005404:	2120      	movs	r1, #32
 8005406:	2020      	movs	r0, #32
 8005408:	f7fd feb2 	bl	8003170 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 800540c:	4a17      	ldr	r2, [pc, #92]	; (800546c <statemachine+0x1a34>)
 800540e:	2301      	movs	r3, #1
 8005410:	ca06      	ldmia	r2, {r1, r2}
 8005412:	4822      	ldr	r0, [pc, #136]	; (800549c <statemachine+0x1a64>)
 8005414:	f7fd fe86 	bl	8003124 <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4619      	mov	r1, r3
 800541c:	482b      	ldr	r0, [pc, #172]	; (80054cc <statemachine+0x1a94>)
 800541e:	f00f fcd0 	bl	8014dc2 <SPIF_EraseSector>
				 							if(i>=1){
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	dd55      	ble.n	80054d4 <statemachine+0x1a9c>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2264      	movs	r2, #100	; 0x64
 800542c:	fb02 f303 	mul.w	r3, r2, r3
 8005430:	ee07 3a90 	vmov	s15, r3
 8005434:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005438:	4b10      	ldr	r3, [pc, #64]	; (800547c <statemachine+0x1a44>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	da00      	bge.n	8005442 <statemachine+0x1a0a>
 8005440:	330f      	adds	r3, #15
 8005442:	111b      	asrs	r3, r3, #4
 8005444:	4618      	mov	r0, r3
 8005446:	f7fb f86d 	bl	8000524 <__aeabi_i2d>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4610      	mov	r0, r2
 8005450:	4619      	mov	r1, r3
 8005452:	f7fb fb81 	bl	8000b58 <__aeabi_d2iz>
 8005456:	ee07 0a90 	vmov	s15, r0
 800545a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800545e:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005462:	eeb0 0a47 	vmov.f32	s0, s14
 8005466:	f7fe fa1b 	bl	80038a0 <percentage>
 800546a:	e037      	b.n	80054dc <statemachine+0x1aa4>
 800546c:	2000000c 	.word	0x2000000c
 8005470:	0801c3f0 	.word	0x0801c3f0
 8005474:	0801c3f8 	.word	0x0801c3f8
 8005478:	2000095c 	.word	0x2000095c
 800547c:	20000960 	.word	0x20000960
 8005480:	0801c400 	.word	0x0801c400
 8005484:	20000980 	.word	0x20000980
 8005488:	20000720 	.word	0x20000720
 800548c:	2000048c 	.word	0x2000048c
 8005490:	20000724 	.word	0x20000724
 8005494:	20000b50 	.word	0x20000b50
 8005498:	20000b68 	.word	0x20000b68
 800549c:	0801c408 	.word	0x0801c408
 80054a0:	20000491 	.word	0x20000491
 80054a4:	0801c40c 	.word	0x0801c40c
 80054a8:	20000b1c 	.word	0x20000b1c
 80054ac:	0801c418 	.word	0x0801c418
 80054b0:	0801c420 	.word	0x0801c420
 80054b4:	20000b18 	.word	0x20000b18
 80054b8:	20000014 	.word	0x20000014
 80054bc:	0801c42c 	.word	0x0801c42c
 80054c0:	20000b14 	.word	0x20000b14
 80054c4:	447a0000 	.word	0x447a0000
 80054c8:	0801c430 	.word	0x0801c430
 80054cc:	20000728 	.word	0x20000728
 80054d0:	00000000 	.word	0x00000000
				 								percentage((float) 0);
 80054d4:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80054d0 <statemachine+0x1a98>
 80054d8:	f7fe f9e2 	bl	80038a0 <percentage>
				 							ssd1306_UpdateScreen();
 80054dc:	f7fd fd1e 	bl	8002f1c <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	4b95      	ldr	r3, [pc, #596]	; (800573c <statemachine+0x1d04>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	da00      	bge.n	80054f0 <statemachine+0x1ab8>
 80054ee:	330f      	adds	r3, #15
 80054f0:	111b      	asrs	r3, r3, #4
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fb f816 	bl	8000524 <__aeabi_i2d>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	f7fb fb2a 	bl	8000b58 <__aeabi_d2iz>
 8005504:	4602      	mov	r2, r0
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4293      	cmp	r3, r2
 800550a:	f77f af78 	ble.w	80053fe <statemachine+0x19c6>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 800550e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8005512:	488b      	ldr	r0, [pc, #556]	; (8005740 <statemachine+0x1d08>)
 8005514:	f00f fc55 	bl	8014dc2 <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8005518:	f001 fc72 	bl	8006e00 <HAL_GetTick>
 800551c:	4603      	mov	r3, r0
 800551e:	4a89      	ldr	r2, [pc, #548]	; (8005744 <statemachine+0x1d0c>)
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	461a      	mov	r2, r3
 8005526:	4b87      	ldr	r3, [pc, #540]	; (8005744 <statemachine+0x1d0c>)
 8005528:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 800552a:	4b87      	ldr	r3, [pc, #540]	; (8005748 <statemachine+0x1d10>)
 800552c:	2201      	movs	r2, #1
 800552e:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8005530:	4b86      	ldr	r3, [pc, #536]	; (800574c <statemachine+0x1d14>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8005536:	4b81      	ldr	r3, [pc, #516]	; (800573c <statemachine+0x1d04>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
				 						storeindex();
 800553c:	f7fd fafa 	bl	8002b34 <storeindex>
				 						BTN_A=0;
 8005540:	4b83      	ldr	r3, [pc, #524]	; (8005750 <statemachine+0x1d18>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8005546:	4b83      	ldr	r3, [pc, #524]	; (8005754 <statemachine+0x1d1c>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 800554c:	4b81      	ldr	r3, [pc, #516]	; (8005754 <statemachine+0x1d1c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f340 80ef 	ble.w	8005734 <statemachine+0x1cfc>
					 						usbstate++;
 8005556:	4b80      	ldr	r3, [pc, #512]	; (8005758 <statemachine+0x1d20>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	b2da      	uxtb	r2, r3
 800555e:	4b7e      	ldr	r3, [pc, #504]	; (8005758 <statemachine+0x1d20>)
 8005560:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8005562:	4b7c      	ldr	r3, [pc, #496]	; (8005754 <statemachine+0x1d1c>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8005568:	4b79      	ldr	r3, [pc, #484]	; (8005750 <statemachine+0x1d18>)
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
				 			  break;
 800556e:	e0e1      	b.n	8005734 <statemachine+0x1cfc>
				 					ssd1306_Fill(Black);
 8005570:	2000      	movs	r0, #0
 8005572:	f7fd fcbb 	bl	8002eec <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8005576:	2128      	movs	r1, #40	; 0x28
 8005578:	2020      	movs	r0, #32
 800557a:	f7fd fdf9 	bl	8003170 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 800557e:	4a77      	ldr	r2, [pc, #476]	; (800575c <statemachine+0x1d24>)
 8005580:	2301      	movs	r3, #1
 8005582:	ca06      	ldmia	r2, {r1, r2}
 8005584:	4876      	ldr	r0, [pc, #472]	; (8005760 <statemachine+0x1d28>)
 8005586:	f7fd fdcd 	bl	8003124 <ssd1306_WriteString>
				 					if(pagenumber>0){
 800558a:	4b6c      	ldr	r3, [pc, #432]	; (800573c <statemachine+0x1d04>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	dd7d      	ble.n	800568e <statemachine+0x1c56>
				 					int i=0;
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]
				 					if(usbtransmiten==0){
 8005596:	4b73      	ldr	r3, [pc, #460]	; (8005764 <statemachine+0x1d2c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d165      	bne.n	800566a <statemachine+0x1c32>
				 						while(i<pagenumber){
 800559e:	e036      	b.n	800560e <statemachine+0x1bd6>
				 							ssd1306_Fill(Black);
 80055a0:	2000      	movs	r0, #0
 80055a2:	f7fd fca3 	bl	8002eec <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 80055a6:	2120      	movs	r1, #32
 80055a8:	2020      	movs	r0, #32
 80055aa:	f7fd fde1 	bl	8003170 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 80055ae:	4a6b      	ldr	r2, [pc, #428]	; (800575c <statemachine+0x1d24>)
 80055b0:	2301      	movs	r3, #1
 80055b2:	ca06      	ldmia	r2, {r1, r2}
 80055b4:	486a      	ldr	r0, [pc, #424]	; (8005760 <statemachine+0x1d28>)
 80055b6:	f7fd fdb5 	bl	8003124 <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	2300      	movs	r3, #0
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055c4:	4a68      	ldr	r2, [pc, #416]	; (8005768 <statemachine+0x1d30>)
 80055c6:	485e      	ldr	r0, [pc, #376]	; (8005740 <statemachine+0x1d08>)
 80055c8:	f00f fc9c 	bl	8014f04 <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 80055cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055d0:	4865      	ldr	r0, [pc, #404]	; (8005768 <statemachine+0x1d30>)
 80055d2:	f00f fd97 	bl	8015104 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2264      	movs	r2, #100	; 0x64
 80055da:	fb02 f303 	mul.w	r3, r2, r3
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055e6:	4b55      	ldr	r3, [pc, #340]	; (800573c <statemachine+0x1d04>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80055f6:	eeb0 0a66 	vmov.f32	s0, s13
 80055fa:	f7fe f951 	bl	80038a0 <percentage>
				 							ssd1306_UpdateScreen();
 80055fe:	f7fd fc8d 	bl	8002f1c <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 8005602:	207d      	movs	r0, #125	; 0x7d
 8005604:	f001 fc08 	bl	8006e18 <HAL_Delay>
				 							i++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3301      	adds	r3, #1
 800560c:	607b      	str	r3, [r7, #4]
				 						while(i<pagenumber){
 800560e:	4b4b      	ldr	r3, [pc, #300]	; (800573c <statemachine+0x1d04>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	dbc3      	blt.n	80055a0 <statemachine+0x1b68>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8005618:	4b48      	ldr	r3, [pc, #288]	; (800573c <statemachine+0x1d04>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4619      	mov	r1, r3
 800561e:	4b4b      	ldr	r3, [pc, #300]	; (800574c <statemachine+0x1d14>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	2300      	movs	r3, #0
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	4a4f      	ldr	r2, [pc, #316]	; (8005768 <statemachine+0x1d30>)
 800562c:	4844      	ldr	r0, [pc, #272]	; (8005740 <statemachine+0x1d08>)
 800562e:	f00f fc69 	bl	8014f04 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 8005632:	4b46      	ldr	r3, [pc, #280]	; (800574c <statemachine+0x1d14>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	4619      	mov	r1, r3
 800563a:	484b      	ldr	r0, [pc, #300]	; (8005768 <statemachine+0x1d30>)
 800563c:	f00f fd62 	bl	8015104 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 8005640:	207d      	movs	r0, #125	; 0x7d
 8005642:	f001 fbe9 	bl	8006e18 <HAL_Delay>
				 						int taillefin=0;
 8005646:	2300      	movs	r3, #0
 8005648:	603b      	str	r3, [r7, #0]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 800564a:	4a48      	ldr	r2, [pc, #288]	; (800576c <statemachine+0x1d34>)
 800564c:	2140      	movs	r1, #64	; 0x40
 800564e:	4848      	ldr	r0, [pc, #288]	; (8005770 <statemachine+0x1d38>)
 8005650:	f012 f930 	bl	80178b4 <sniprintf>
 8005654:	6038      	str	r0, [r7, #0]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	4619      	mov	r1, r3
 800565c:	4844      	ldr	r0, [pc, #272]	; (8005770 <statemachine+0x1d38>)
 800565e:	f00f fd51 	bl	8015104 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 8005662:	4b40      	ldr	r3, [pc, #256]	; (8005764 <statemachine+0x1d2c>)
 8005664:	2201      	movs	r2, #1
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e003      	b.n	8005672 <statemachine+0x1c3a>
				 						usbpercent=1;
 800566a:	4b42      	ldr	r3, [pc, #264]	; (8005774 <statemachine+0x1d3c>)
 800566c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005670:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 8005672:	2000      	movs	r0, #0
 8005674:	f7fd fc3a 	bl	8002eec <ssd1306_Fill>
				 					ssd1306_SetCursor(32,45);
 8005678:	212d      	movs	r1, #45	; 0x2d
 800567a:	2020      	movs	r0, #32
 800567c:	f7fd fd78 	bl	8003170 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8005680:	4a3d      	ldr	r2, [pc, #244]	; (8005778 <statemachine+0x1d40>)
 8005682:	2301      	movs	r3, #1
 8005684:	ca06      	ldmia	r2, {r1, r2}
 8005686:	483d      	ldr	r0, [pc, #244]	; (800577c <statemachine+0x1d44>)
 8005688:	f7fd fd4c 	bl	8003124 <ssd1306_WriteString>
 800568c:	e016      	b.n	80056bc <statemachine+0x1c84>
				 							ssd1306_Fill(Black);
 800568e:	2000      	movs	r0, #0
 8005690:	f7fd fc2c 	bl	8002eec <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 8005694:	2128      	movs	r1, #40	; 0x28
 8005696:	2020      	movs	r0, #32
 8005698:	f7fd fd6a 	bl	8003170 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 800569c:	4a2f      	ldr	r2, [pc, #188]	; (800575c <statemachine+0x1d24>)
 800569e:	2301      	movs	r3, #1
 80056a0:	ca06      	ldmia	r2, {r1, r2}
 80056a2:	482f      	ldr	r0, [pc, #188]	; (8005760 <statemachine+0x1d28>)
 80056a4:	f7fd fd3e 	bl	8003124 <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 80056a8:	2130      	movs	r1, #48	; 0x30
 80056aa:	2020      	movs	r0, #32
 80056ac:	f7fd fd60 	bl	8003170 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 80056b0:	4a2a      	ldr	r2, [pc, #168]	; (800575c <statemachine+0x1d24>)
 80056b2:	2301      	movs	r3, #1
 80056b4:	ca06      	ldmia	r2, {r1, r2}
 80056b6:	4832      	ldr	r0, [pc, #200]	; (8005780 <statemachine+0x1d48>)
 80056b8:	f7fd fd34 	bl	8003124 <ssd1306_WriteString>
				 					if(BTN_B>=1){
 80056bc:	4b25      	ldr	r3, [pc, #148]	; (8005754 <statemachine+0x1d1c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	dd11      	ble.n	80056e8 <statemachine+0x1cb0>
				 									 						usbstate--;
 80056c4:	4b24      	ldr	r3, [pc, #144]	; (8005758 <statemachine+0x1d20>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	4b22      	ldr	r3, [pc, #136]	; (8005758 <statemachine+0x1d20>)
 80056ce:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 80056d0:	4b21      	ldr	r3, [pc, #132]	; (8005758 <statemachine+0x1d20>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <statemachine+0x1d20>)
 80056da:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 80056dc:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <statemachine+0x1d1c>)
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 80056e2:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <statemachine+0x1d18>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 80056e8:	4b19      	ldr	r3, [pc, #100]	; (8005750 <statemachine+0x1d18>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dd0b      	ble.n	8005708 <statemachine+0x1cd0>
				 									  			 	state++;
 80056f0:	4b24      	ldr	r3, [pc, #144]	; (8005784 <statemachine+0x1d4c>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	4b22      	ldr	r3, [pc, #136]	; (8005784 <statemachine+0x1d4c>)
 80056fa:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 80056fc:	4b14      	ldr	r3, [pc, #80]	; (8005750 <statemachine+0x1d18>)
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005702:	4b14      	ldr	r3, [pc, #80]	; (8005754 <statemachine+0x1d1c>)
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005708:	4b1f      	ldr	r3, [pc, #124]	; (8005788 <statemachine+0x1d50>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	dd13      	ble.n	8005738 <statemachine+0x1d00>
				 									 									  			 	state--;
 8005710:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <statemachine+0x1d4c>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	3b01      	subs	r3, #1
 8005716:	b2da      	uxtb	r2, r3
 8005718:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <statemachine+0x1d4c>)
 800571a:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 800571c:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <statemachine+0x1d18>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 8005722:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <statemachine+0x1d1c>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 8005728:	4b17      	ldr	r3, [pc, #92]	; (8005788 <statemachine+0x1d50>)
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
				 					 break;
 800572e:	e003      	b.n	8005738 <statemachine+0x1d00>
				 					  break;
 8005730:	bf00      	nop
 8005732:	e3ac      	b.n	8005e8e <statemachine+0x2456>
				 			  break;
 8005734:	bf00      	nop
 8005736:	e3aa      	b.n	8005e8e <statemachine+0x2456>
				 					 break;
 8005738:	bf00      	nop
				  break;
 800573a:	e3a8      	b.n	8005e8e <statemachine+0x2456>
 800573c:	20000960 	.word	0x20000960
 8005740:	20000728 	.word	0x20000728
 8005744:	20000b14 	.word	0x20000b14
 8005748:	20000b18 	.word	0x20000b18
 800574c:	2000095c 	.word	0x2000095c
 8005750:	20000720 	.word	0x20000720
 8005754:	20000724 	.word	0x20000724
 8005758:	20000491 	.word	0x20000491
 800575c:	2000000c 	.word	0x2000000c
 8005760:	0801c438 	.word	0x0801c438
 8005764:	20000b1c 	.word	0x20000b1c
 8005768:	2000085c 	.word	0x2000085c
 800576c:	0801c440 	.word	0x0801c440
 8005770:	20000ab4 	.word	0x20000ab4
 8005774:	20000b20 	.word	0x20000b20
 8005778:	20000014 	.word	0x20000014
 800577c:	0801c450 	.word	0x0801c450
 8005780:	0801c458 	.word	0x0801c458
 8005784:	2000048c 	.word	0x2000048c
 8005788:	20000b68 	.word	0x20000b68



				  case STATE_MONITOR:
					  ssd1306_Fill(Black);
 800578c:	2000      	movs	r0, #0
 800578e:	f7fd fbad 	bl	8002eec <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 8005792:	2120      	movs	r1, #32
 8005794:	2020      	movs	r0, #32
 8005796:	f7fd fceb 	bl	8003170 <ssd1306_SetCursor>
					  ssd1306_WriteString("gputemp",Font_6x8,White);
 800579a:	4a92      	ldr	r2, [pc, #584]	; (80059e4 <statemachine+0x1fac>)
 800579c:	2301      	movs	r3, #1
 800579e:	ca06      	ldmia	r2, {r1, r2}
 80057a0:	4891      	ldr	r0, [pc, #580]	; (80059e8 <statemachine+0x1fb0>)
 80057a2:	f7fd fcbf 	bl	8003124 <ssd1306_WriteString>

					  usbbuffer[60]='$';
 80057a6:	4b91      	ldr	r3, [pc, #580]	; (80059ec <statemachine+0x1fb4>)
 80057a8:	2224      	movs	r2, #36	; 0x24
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					  getgpu((uint8_t  *)usbbuffer);
 80057ae:	488f      	ldr	r0, [pc, #572]	; (80059ec <statemachine+0x1fb4>)
 80057b0:	f001 fa3a 	bl	8006c28 <getgpu>
					  ssd1306_SetCursor(32,40);
 80057b4:	2128      	movs	r1, #40	; 0x28
 80057b6:	2020      	movs	r0, #32
 80057b8:	f7fd fcda 	bl	8003170 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"T=%d*C",gputemp);
 80057bc:	4b8c      	ldr	r3, [pc, #560]	; (80059f0 <statemachine+0x1fb8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a8c      	ldr	r2, [pc, #560]	; (80059f4 <statemachine+0x1fbc>)
 80057c2:	2132      	movs	r1, #50	; 0x32
 80057c4:	488c      	ldr	r0, [pc, #560]	; (80059f8 <statemachine+0x1fc0>)
 80057c6:	f012 f875 	bl	80178b4 <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen,Font_7x10,White);
 80057ca:	4a8c      	ldr	r2, [pc, #560]	; (80059fc <statemachine+0x1fc4>)
 80057cc:	2301      	movs	r3, #1
 80057ce:	ca06      	ldmia	r2, {r1, r2}
 80057d0:	4889      	ldr	r0, [pc, #548]	; (80059f8 <statemachine+0x1fc0>)
 80057d2:	f7fd fca7 	bl	8003124 <ssd1306_WriteString>
					  ssd1306_SetCursor(32,50);
 80057d6:	2132      	movs	r1, #50	; 0x32
 80057d8:	2020      	movs	r0, #32
 80057da:	f7fd fcc9 	bl	8003170 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"p=%dW",(int) gpupower);
 80057de:	4b88      	ldr	r3, [pc, #544]	; (8005a00 <statemachine+0x1fc8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a88      	ldr	r2, [pc, #544]	; (8005a04 <statemachine+0x1fcc>)
 80057e4:	2132      	movs	r1, #50	; 0x32
 80057e6:	4884      	ldr	r0, [pc, #528]	; (80059f8 <statemachine+0x1fc0>)
 80057e8:	f012 f864 	bl	80178b4 <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen,Font_7x10,White);
 80057ec:	4a83      	ldr	r2, [pc, #524]	; (80059fc <statemachine+0x1fc4>)
 80057ee:	2301      	movs	r3, #1
 80057f0:	ca06      	ldmia	r2, {r1, r2}
 80057f2:	4881      	ldr	r0, [pc, #516]	; (80059f8 <statemachine+0x1fc0>)
 80057f4:	f7fd fc96 	bl	8003124 <ssd1306_WriteString>


					  if(BTN_A>=1){
 80057f8:	4b83      	ldr	r3, [pc, #524]	; (8005a08 <statemachine+0x1fd0>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	dd0b      	ble.n	8005818 <statemachine+0x1de0>
					 				 									  			 	state++;
 8005800:	4b82      	ldr	r3, [pc, #520]	; (8005a0c <statemachine+0x1fd4>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	b2da      	uxtb	r2, r3
 8005808:	4b80      	ldr	r3, [pc, #512]	; (8005a0c <statemachine+0x1fd4>)
 800580a:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 800580c:	4b7e      	ldr	r3, [pc, #504]	; (8005a08 <statemachine+0x1fd0>)
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 8005812:	4b7f      	ldr	r3, [pc, #508]	; (8005a10 <statemachine+0x1fd8>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
					 				 									  	}
					 				 					if(BTN_A_LONG>=1){
 8005818:	4b7e      	ldr	r3, [pc, #504]	; (8005a14 <statemachine+0x1fdc>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	f340 8338 	ble.w	8005e92 <statemachine+0x245a>
					 				 									 									  			 	state--;
 8005822:	4b7a      	ldr	r3, [pc, #488]	; (8005a0c <statemachine+0x1fd4>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	3b01      	subs	r3, #1
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4b78      	ldr	r3, [pc, #480]	; (8005a0c <statemachine+0x1fd4>)
 800582c:	701a      	strb	r2, [r3, #0]
					 				 									 									  			 	BTN_A=0;
 800582e:	4b76      	ldr	r3, [pc, #472]	; (8005a08 <statemachine+0x1fd0>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
					 				 									 									  			 	BTN_B=0;
 8005834:	4b76      	ldr	r3, [pc, #472]	; (8005a10 <statemachine+0x1fd8>)
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
					 				 									 									  			 	BTN_A_LONG=0;
 800583a:	4b76      	ldr	r3, [pc, #472]	; (8005a14 <statemachine+0x1fdc>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
					 				 									 									  	}


					  break;
 8005840:	e327      	b.n	8005e92 <statemachine+0x245a>


				  case STATE_TARVOS:
					  ssd1306_Fill(Black);
 8005842:	2000      	movs	r0, #0
 8005844:	f7fd fb52 	bl	8002eec <ssd1306_Fill>
					  				  ssd1306_SetCursor(32,32);
 8005848:	2120      	movs	r1, #32
 800584a:	2020      	movs	r0, #32
 800584c:	f7fd fc90 	bl	8003170 <ssd1306_SetCursor>
					  				  ssd1306_WriteString("tarvos",Font_6x8,White);
 8005850:	4a64      	ldr	r2, [pc, #400]	; (80059e4 <statemachine+0x1fac>)
 8005852:	2301      	movs	r3, #1
 8005854:	ca06      	ldmia	r2, {r1, r2}
 8005856:	4870      	ldr	r0, [pc, #448]	; (8005a18 <statemachine+0x1fe0>)
 8005858:	f7fd fc64 	bl	8003124 <ssd1306_WriteString>
					  				  switch(tarvosstate){
 800585c:	4b6f      	ldr	r3, [pc, #444]	; (8005a1c <statemachine+0x1fe4>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b02      	cmp	r3, #2
 8005862:	f000 80f1 	beq.w	8005a48 <statemachine+0x2010>
 8005866:	2b02      	cmp	r3, #2
 8005868:	f300 8315 	bgt.w	8005e96 <statemachine+0x245e>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <statemachine+0x1e3e>
 8005870:	2b01      	cmp	r3, #1
 8005872:	d07d      	beq.n	8005970 <statemachine+0x1f38>





					  break;
 8005874:	e30f      	b.n	8005e96 <statemachine+0x245e>
					  				 					  ssd1306_SetCursor(32,40);
 8005876:	2128      	movs	r1, #40	; 0x28
 8005878:	2020      	movs	r0, #32
 800587a:	f7fd fc79 	bl	8003170 <ssd1306_SetCursor>
					  				 					  ssd1306_WriteString("push B",Font_6x8,White);
 800587e:	4a59      	ldr	r2, [pc, #356]	; (80059e4 <statemachine+0x1fac>)
 8005880:	2301      	movs	r3, #1
 8005882:	ca06      	ldmia	r2, {r1, r2}
 8005884:	4866      	ldr	r0, [pc, #408]	; (8005a20 <statemachine+0x1fe8>)
 8005886:	f7fd fc4d 	bl	8003124 <ssd1306_WriteString>
					  									  if(BTN_A>=1){
 800588a:	4b5f      	ldr	r3, [pc, #380]	; (8005a08 <statemachine+0x1fd0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	dd0b      	ble.n	80058aa <statemachine+0x1e72>
					  											state++;
 8005892:	4b5e      	ldr	r3, [pc, #376]	; (8005a0c <statemachine+0x1fd4>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	3301      	adds	r3, #1
 8005898:	b2da      	uxtb	r2, r3
 800589a:	4b5c      	ldr	r3, [pc, #368]	; (8005a0c <statemachine+0x1fd4>)
 800589c:	701a      	strb	r2, [r3, #0]
					  											BTN_A=0;
 800589e:	4b5a      	ldr	r3, [pc, #360]	; (8005a08 <statemachine+0x1fd0>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
					  											BTN_B=0;
 80058a4:	4b5a      	ldr	r3, [pc, #360]	; (8005a10 <statemachine+0x1fd8>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
					  									if(BTN_A_LONG>=1){
 80058aa:	4b5a      	ldr	r3, [pc, #360]	; (8005a14 <statemachine+0x1fdc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	dd0e      	ble.n	80058d0 <statemachine+0x1e98>
					  											state--;
 80058b2:	4b56      	ldr	r3, [pc, #344]	; (8005a0c <statemachine+0x1fd4>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	4b54      	ldr	r3, [pc, #336]	; (8005a0c <statemachine+0x1fd4>)
 80058bc:	701a      	strb	r2, [r3, #0]
					  											BTN_A=0;
 80058be:	4b52      	ldr	r3, [pc, #328]	; (8005a08 <statemachine+0x1fd0>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
					  											BTN_B=0;
 80058c4:	4b52      	ldr	r3, [pc, #328]	; (8005a10 <statemachine+0x1fd8>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
					  											BTN_A_LONG=0;
 80058ca:	4b52      	ldr	r3, [pc, #328]	; (8005a14 <statemachine+0x1fdc>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
					  				 					  if(BTN_B_LONG>=1){
 80058d0:	4b54      	ldr	r3, [pc, #336]	; (8005a24 <statemachine+0x1fec>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f340 8111 	ble.w	8005afc <statemachine+0x20c4>
					  				 						 huart1.Instance = USART1;
 80058da:	4b53      	ldr	r3, [pc, #332]	; (8005a28 <statemachine+0x1ff0>)
 80058dc:	4a53      	ldr	r2, [pc, #332]	; (8005a2c <statemachine+0x1ff4>)
 80058de:	601a      	str	r2, [r3, #0]
					  				 						 huart1.Init.BaudRate = 115200;
 80058e0:	4b51      	ldr	r3, [pc, #324]	; (8005a28 <statemachine+0x1ff0>)
 80058e2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058e6:	605a      	str	r2, [r3, #4]
					  				 						 huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058e8:	4b4f      	ldr	r3, [pc, #316]	; (8005a28 <statemachine+0x1ff0>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	609a      	str	r2, [r3, #8]
					  				 						 huart1.Init.StopBits = UART_STOPBITS_1;
 80058ee:	4b4e      	ldr	r3, [pc, #312]	; (8005a28 <statemachine+0x1ff0>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	60da      	str	r2, [r3, #12]
					  				 						 huart1.Init.Parity = UART_PARITY_NONE;
 80058f4:	4b4c      	ldr	r3, [pc, #304]	; (8005a28 <statemachine+0x1ff0>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	611a      	str	r2, [r3, #16]
					  				 						 huart1.Init.Mode = UART_MODE_TX_RX;
 80058fa:	4b4b      	ldr	r3, [pc, #300]	; (8005a28 <statemachine+0x1ff0>)
 80058fc:	220c      	movs	r2, #12
 80058fe:	615a      	str	r2, [r3, #20]
					  				 						 huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005900:	4b49      	ldr	r3, [pc, #292]	; (8005a28 <statemachine+0x1ff0>)
 8005902:	2200      	movs	r2, #0
 8005904:	619a      	str	r2, [r3, #24]
					  				 						 huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005906:	4b48      	ldr	r3, [pc, #288]	; (8005a28 <statemachine+0x1ff0>)
 8005908:	2200      	movs	r2, #0
 800590a:	61da      	str	r2, [r3, #28]
					  				 						 huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800590c:	4b46      	ldr	r3, [pc, #280]	; (8005a28 <statemachine+0x1ff0>)
 800590e:	2200      	movs	r2, #0
 8005910:	621a      	str	r2, [r3, #32]
					  				 						 huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005912:	4b45      	ldr	r3, [pc, #276]	; (8005a28 <statemachine+0x1ff0>)
 8005914:	2200      	movs	r2, #0
 8005916:	625a      	str	r2, [r3, #36]	; 0x24
					  				 						  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005918:	4843      	ldr	r0, [pc, #268]	; (8005a28 <statemachine+0x1ff0>)
 800591a:	f008 feff 	bl	800e71c <HAL_UART_Init>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d012      	beq.n	800594a <statemachine+0x1f12>
					  				 						ssd1306_Fill(Black);
 8005924:	2000      	movs	r0, #0
 8005926:	f7fd fae1 	bl	8002eec <ssd1306_Fill>
					  				 						 ssd1306_WriteString("problem",Font_6x8,White);
 800592a:	4a2e      	ldr	r2, [pc, #184]	; (80059e4 <statemachine+0x1fac>)
 800592c:	2301      	movs	r3, #1
 800592e:	ca06      	ldmia	r2, {r1, r2}
 8005930:	483f      	ldr	r0, [pc, #252]	; (8005a30 <statemachine+0x1ff8>)
 8005932:	f7fd fbf7 	bl	8003124 <ssd1306_WriteString>
					  				 						ssd1306_UpdateScreen();
 8005936:	f7fd faf1 	bl	8002f1c <ssd1306_UpdateScreen>
					  				 						HAL_Delay(1500);
 800593a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800593e:	f001 fa6b 	bl	8006e18 <HAL_Delay>
					  				 						correctentarvos=0;
 8005942:	4b3c      	ldr	r3, [pc, #240]	; (8005a34 <statemachine+0x1ffc>)
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	e002      	b.n	8005950 <statemachine+0x1f18>
					  				 							correctentarvos=1;
 800594a:	4b3a      	ldr	r3, [pc, #232]	; (8005a34 <statemachine+0x1ffc>)
 800594c:	2201      	movs	r2, #1
 800594e:	601a      	str	r2, [r3, #0]
					  				 						  HAL_Delay(10);
 8005950:	200a      	movs	r0, #10
 8005952:	f001 fa61 	bl	8006e18 <HAL_Delay>
					  				 						  tarvosstate++;
 8005956:	4b31      	ldr	r3, [pc, #196]	; (8005a1c <statemachine+0x1fe4>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	b2da      	uxtb	r2, r3
 800595e:	4b2f      	ldr	r3, [pc, #188]	; (8005a1c <statemachine+0x1fe4>)
 8005960:	701a      	strb	r2, [r3, #0]
					  				 						BTN_B_LONG=0;
 8005962:	4b30      	ldr	r3, [pc, #192]	; (8005a24 <statemachine+0x1fec>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
					  				 						BTN_A=0;
 8005968:	4b27      	ldr	r3, [pc, #156]	; (8005a08 <statemachine+0x1fd0>)
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
					  				 					  break;
 800596e:	e0c5      	b.n	8005afc <statemachine+0x20c4>
					  				 					 ssd1306_SetCursor(32,40);
 8005970:	2128      	movs	r1, #40	; 0x28
 8005972:	2020      	movs	r0, #32
 8005974:	f7fd fbfc 	bl	8003170 <ssd1306_SetCursor>
					  				 					ssd1306_WriteString("send1",Font_6x8,White);
 8005978:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <statemachine+0x1fac>)
 800597a:	2301      	movs	r3, #1
 800597c:	ca06      	ldmia	r2, {r1, r2}
 800597e:	482e      	ldr	r0, [pc, #184]	; (8005a38 <statemachine+0x2000>)
 8005980:	f7fd fbd0 	bl	8003124 <ssd1306_WriteString>
					  				 					if(correctentarvos==1){
 8005984:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <statemachine+0x1ffc>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d118      	bne.n	80059be <statemachine+0x1f86>
					  				 					snprintf((char  *)tarvosbuf,50,"cputemp=%0.2f\n\r",temp);
 800598c:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <statemachine+0x2004>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f7fa fdd9 	bl	8000548 <__aeabi_f2d>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	e9cd 2300 	strd	r2, r3, [sp]
 800599e:	4a28      	ldr	r2, [pc, #160]	; (8005a40 <statemachine+0x2008>)
 80059a0:	2132      	movs	r1, #50	; 0x32
 80059a2:	4828      	ldr	r0, [pc, #160]	; (8005a44 <statemachine+0x200c>)
 80059a4:	f011 ff86 	bl	80178b4 <sniprintf>
					  				 					HAL_UART_Transmit(&huart1,(uint8_t  *)tarvosbuf,sizeof(tarvosbuf),HAL_MAX_DELAY);
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ac:	2232      	movs	r2, #50	; 0x32
 80059ae:	4925      	ldr	r1, [pc, #148]	; (8005a44 <statemachine+0x200c>)
 80059b0:	481d      	ldr	r0, [pc, #116]	; (8005a28 <statemachine+0x1ff0>)
 80059b2:	f008 ff3e 	bl	800e832 <HAL_UART_Transmit>
					  				 					HAL_Delay(1000);
 80059b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059ba:	f001 fa2d 	bl	8006e18 <HAL_Delay>
					  				 					if(BTN_B>=1){
 80059be:	4b14      	ldr	r3, [pc, #80]	; (8005a10 <statemachine+0x1fd8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f340 809c 	ble.w	8005b00 <statemachine+0x20c8>
					  					 						tarvosstate++;
 80059c8:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <statemachine+0x1fe4>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	3301      	adds	r3, #1
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <statemachine+0x1fe4>)
 80059d2:	701a      	strb	r2, [r3, #0]
					  					 						  BTN_B=0;
 80059d4:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <statemachine+0x1fd8>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
					  					 						  BTN_A=0;
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <statemachine+0x1fd0>)
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
					  				 			  break;
 80059e0:	e08e      	b.n	8005b00 <statemachine+0x20c8>
 80059e2:	bf00      	nop
 80059e4:	2000000c 	.word	0x2000000c
 80059e8:	0801c460 	.word	0x0801c460
 80059ec:	20000ab4 	.word	0x20000ab4
 80059f0:	200010d8 	.word	0x200010d8
 80059f4:	0801c468 	.word	0x0801c468
 80059f8:	20000980 	.word	0x20000980
 80059fc:	20000014 	.word	0x20000014
 8005a00:	200010dc 	.word	0x200010dc
 8005a04:	0801c470 	.word	0x0801c470
 8005a08:	20000720 	.word	0x20000720
 8005a0c:	2000048c 	.word	0x2000048c
 8005a10:	20000724 	.word	0x20000724
 8005a14:	20000b68 	.word	0x20000b68
 8005a18:	0801c478 	.word	0x0801c478
 8005a1c:	20000493 	.word	0x20000493
 8005a20:	0801c480 	.word	0x0801c480
 8005a24:	20000b64 	.word	0x20000b64
 8005a28:	200012d8 	.word	0x200012d8
 8005a2c:	40013800 	.word	0x40013800
 8005a30:	0801c488 	.word	0x0801c488
 8005a34:	20001114 	.word	0x20001114
 8005a38:	0801c490 	.word	0x0801c490
 8005a3c:	20000750 	.word	0x20000750
 8005a40:	0801c498 	.word	0x0801c498
 8005a44:	200010e0 	.word	0x200010e0
					  				 					ssd1306_Fill(Black);
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f7fd fa4f 	bl	8002eec <ssd1306_Fill>
					  				 					ssd1306_SetCursor(32,40);
 8005a4e:	2128      	movs	r1, #40	; 0x28
 8005a50:	2020      	movs	r0, #32
 8005a52:	f7fd fb8d 	bl	8003170 <ssd1306_SetCursor>
					  				 					ssd1306_WriteString("send2",Font_6x8,White);
 8005a56:	4a7f      	ldr	r2, [pc, #508]	; (8005c54 <statemachine+0x221c>)
 8005a58:	2301      	movs	r3, #1
 8005a5a:	ca06      	ldmia	r2, {r1, r2}
 8005a5c:	487e      	ldr	r0, [pc, #504]	; (8005c58 <statemachine+0x2220>)
 8005a5e:	f7fd fb61 	bl	8003124 <ssd1306_WriteString>
					  				 					if(correctentarvos==1){
 8005a62:	4b7e      	ldr	r3, [pc, #504]	; (8005c5c <statemachine+0x2224>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d118      	bne.n	8005a9c <statemachine+0x2064>
					  				 						snprintf((char  *)tarvosbuf,50,"je suis à =%0.2f\n\r",vbat);
 8005a6a:	4b7d      	ldr	r3, [pc, #500]	; (8005c60 <statemachine+0x2228>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fa fd6a 	bl	8000548 <__aeabi_f2d>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	e9cd 2300 	strd	r2, r3, [sp]
 8005a7c:	4a79      	ldr	r2, [pc, #484]	; (8005c64 <statemachine+0x222c>)
 8005a7e:	2132      	movs	r1, #50	; 0x32
 8005a80:	4879      	ldr	r0, [pc, #484]	; (8005c68 <statemachine+0x2230>)
 8005a82:	f011 ff17 	bl	80178b4 <sniprintf>
					  				 						HAL_UART_Transmit(&huart1,(uint8_t  *)tarvosbuf,sizeof(tarvosbuf),HAL_MAX_DELAY);
 8005a86:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8a:	2232      	movs	r2, #50	; 0x32
 8005a8c:	4976      	ldr	r1, [pc, #472]	; (8005c68 <statemachine+0x2230>)
 8005a8e:	4877      	ldr	r0, [pc, #476]	; (8005c6c <statemachine+0x2234>)
 8005a90:	f008 fecf 	bl	800e832 <HAL_UART_Transmit>
					  				 						HAL_Delay(1000);
 8005a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a98:	f001 f9be 	bl	8006e18 <HAL_Delay>
					  				 					if(BTN_B>=1){
 8005a9c:	4b74      	ldr	r3, [pc, #464]	; (8005c70 <statemachine+0x2238>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	dd0b      	ble.n	8005abc <statemachine+0x2084>
					  				 									 						tarvosstate--;
 8005aa4:	4b73      	ldr	r3, [pc, #460]	; (8005c74 <statemachine+0x223c>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	4b71      	ldr	r3, [pc, #452]	; (8005c74 <statemachine+0x223c>)
 8005aae:	701a      	strb	r2, [r3, #0]
					  				 									 						  BTN_B=0;
 8005ab0:	4b6f      	ldr	r3, [pc, #444]	; (8005c70 <statemachine+0x2238>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
					  				 									 						  BTN_A=0;
 8005ab6:	4b70      	ldr	r3, [pc, #448]	; (8005c78 <statemachine+0x2240>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
					  				 					if(BTN_B_LONG>=1){
 8005abc:	4b6f      	ldr	r3, [pc, #444]	; (8005c7c <statemachine+0x2244>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	dd1f      	ble.n	8005b04 <statemachine+0x20cc>
					  				 						HAL_UART_Abort(&huart1);
 8005ac4:	4869      	ldr	r0, [pc, #420]	; (8005c6c <statemachine+0x2234>)
 8005ac6:	f008 ff8b 	bl	800e9e0 <HAL_UART_Abort>
					  				 						HAL_UART_DeInit(&huart1);
 8005aca:	4868      	ldr	r0, [pc, #416]	; (8005c6c <statemachine+0x2234>)
 8005acc:	f008 fe74 	bl	800e7b8 <HAL_UART_DeInit>
					  				 										  				 									 						tarvosstate--;
 8005ad0:	4b68      	ldr	r3, [pc, #416]	; (8005c74 <statemachine+0x223c>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	4b66      	ldr	r3, [pc, #408]	; (8005c74 <statemachine+0x223c>)
 8005ada:	701a      	strb	r2, [r3, #0]
					  				 										  				 									 					tarvosstate--;
 8005adc:	4b65      	ldr	r3, [pc, #404]	; (8005c74 <statemachine+0x223c>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	4b63      	ldr	r3, [pc, #396]	; (8005c74 <statemachine+0x223c>)
 8005ae6:	701a      	strb	r2, [r3, #0]
					  				 										  				 									 						  BTN_B_LONG=0;
 8005ae8:	4b64      	ldr	r3, [pc, #400]	; (8005c7c <statemachine+0x2244>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]
					  				 										  				 									 						  BTN_B=0;
 8005aee:	4b60      	ldr	r3, [pc, #384]	; (8005c70 <statemachine+0x2238>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
					  				 										  				 									 						  BTN_A=0;
 8005af4:	4b60      	ldr	r3, [pc, #384]	; (8005c78 <statemachine+0x2240>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
					  				 					 break;
 8005afa:	e003      	b.n	8005b04 <statemachine+0x20cc>
					  				 					  break;
 8005afc:	bf00      	nop
 8005afe:	e1ca      	b.n	8005e96 <statemachine+0x245e>
					  				 			  break;
 8005b00:	bf00      	nop
 8005b02:	e1c8      	b.n	8005e96 <statemachine+0x245e>
					  				 					 break;
 8005b04:	bf00      	nop
					  break;
 8005b06:	e1c6      	b.n	8005e96 <statemachine+0x245e>



					  				 case STATE_BARO:
					  									  ssd1306_Fill(Black);
 8005b08:	2000      	movs	r0, #0
 8005b0a:	f7fd f9ef 	bl	8002eec <ssd1306_Fill>
					  									  				  ssd1306_SetCursor(32,32);
 8005b0e:	2120      	movs	r1, #32
 8005b10:	2020      	movs	r0, #32
 8005b12:	f7fd fb2d 	bl	8003170 <ssd1306_SetCursor>
					  									  				  ssd1306_WriteString("baro",Font_6x8,White);
 8005b16:	4a4f      	ldr	r2, [pc, #316]	; (8005c54 <statemachine+0x221c>)
 8005b18:	2301      	movs	r3, #1
 8005b1a:	ca06      	ldmia	r2, {r1, r2}
 8005b1c:	4858      	ldr	r0, [pc, #352]	; (8005c80 <statemachine+0x2248>)
 8005b1e:	f7fd fb01 	bl	8003124 <ssd1306_WriteString>
					  									  				  switch(barostate){
 8005b22:	4b58      	ldr	r3, [pc, #352]	; (8005c84 <statemachine+0x224c>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <statemachine+0x20fa>
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	f000 80bc 	beq.w	8005ca8 <statemachine+0x2270>
					  									  				 			  break;


					  									  				 				  }

					  									  break;
 8005b30:	e1b4      	b.n	8005e9c <statemachine+0x2464>
					  									  				 					  ssd1306_SetCursor(32,40);
 8005b32:	2128      	movs	r1, #40	; 0x28
 8005b34:	2020      	movs	r0, #32
 8005b36:	f7fd fb1b 	bl	8003170 <ssd1306_SetCursor>
					  									  				 					  ssd1306_WriteString("push B",Font_6x8,White);
 8005b3a:	4a46      	ldr	r2, [pc, #280]	; (8005c54 <statemachine+0x221c>)
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	ca06      	ldmia	r2, {r1, r2}
 8005b40:	4851      	ldr	r0, [pc, #324]	; (8005c88 <statemachine+0x2250>)
 8005b42:	f7fd faef 	bl	8003124 <ssd1306_WriteString>
					  									  									  if(BTN_A>=1){
 8005b46:	4b4c      	ldr	r3, [pc, #304]	; (8005c78 <statemachine+0x2240>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	dd0b      	ble.n	8005b66 <statemachine+0x212e>
					  									  											state++;
 8005b4e:	4b4f      	ldr	r3, [pc, #316]	; (8005c8c <statemachine+0x2254>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	4b4d      	ldr	r3, [pc, #308]	; (8005c8c <statemachine+0x2254>)
 8005b58:	701a      	strb	r2, [r3, #0]
					  									  											BTN_A=0;
 8005b5a:	4b47      	ldr	r3, [pc, #284]	; (8005c78 <statemachine+0x2240>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
					  									  											BTN_B=0;
 8005b60:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <statemachine+0x2238>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
					  									  									if(BTN_A_LONG>=1){
 8005b66:	4b4a      	ldr	r3, [pc, #296]	; (8005c90 <statemachine+0x2258>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	dd0e      	ble.n	8005b8c <statemachine+0x2154>
					  									  											state--;
 8005b6e:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <statemachine+0x2254>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	4b45      	ldr	r3, [pc, #276]	; (8005c8c <statemachine+0x2254>)
 8005b78:	701a      	strb	r2, [r3, #0]
					  									  											BTN_A=0;
 8005b7a:	4b3f      	ldr	r3, [pc, #252]	; (8005c78 <statemachine+0x2240>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
					  									  											BTN_B=0;
 8005b80:	4b3b      	ldr	r3, [pc, #236]	; (8005c70 <statemachine+0x2238>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
					  									  											BTN_A_LONG=0;
 8005b86:	4b42      	ldr	r3, [pc, #264]	; (8005c90 <statemachine+0x2258>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
					  									  				 					  if(BTN_B_LONG>=1){
 8005b8c:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <statemachine+0x2244>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f340 80d4 	ble.w	8005d3e <statemachine+0x2306>
					  									  				 					 hi2c1.Instance = I2C1;
 8005b96:	4b3f      	ldr	r3, [pc, #252]	; (8005c94 <statemachine+0x225c>)
 8005b98:	4a3f      	ldr	r2, [pc, #252]	; (8005c98 <statemachine+0x2260>)
 8005b9a:	601a      	str	r2, [r3, #0]
					  									  				 					  hi2c1.Init.Timing = 0x00202538;
 8005b9c:	4b3d      	ldr	r3, [pc, #244]	; (8005c94 <statemachine+0x225c>)
 8005b9e:	4a3f      	ldr	r2, [pc, #252]	; (8005c9c <statemachine+0x2264>)
 8005ba0:	605a      	str	r2, [r3, #4]
					  									  				 					  hi2c1.Init.OwnAddress1 = 0;
 8005ba2:	4b3c      	ldr	r3, [pc, #240]	; (8005c94 <statemachine+0x225c>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	609a      	str	r2, [r3, #8]
					  									  				 					  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ba8:	4b3a      	ldr	r3, [pc, #232]	; (8005c94 <statemachine+0x225c>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	60da      	str	r2, [r3, #12]
					  									  				 					  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bae:	4b39      	ldr	r3, [pc, #228]	; (8005c94 <statemachine+0x225c>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	611a      	str	r2, [r3, #16]
					  									  				 					  hi2c1.Init.OwnAddress2 = 0;
 8005bb4:	4b37      	ldr	r3, [pc, #220]	; (8005c94 <statemachine+0x225c>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	615a      	str	r2, [r3, #20]
					  									  				 					  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005bba:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <statemachine+0x225c>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	619a      	str	r2, [r3, #24]
					  									  				 					  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bc0:	4b34      	ldr	r3, [pc, #208]	; (8005c94 <statemachine+0x225c>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	61da      	str	r2, [r3, #28]
					  									  				 					  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005bc6:	4b33      	ldr	r3, [pc, #204]	; (8005c94 <statemachine+0x225c>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	621a      	str	r2, [r3, #32]
					  									  				 					  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005bcc:	4831      	ldr	r0, [pc, #196]	; (8005c94 <statemachine+0x225c>)
 8005bce:	f003 fabb 	bl	8009148 <HAL_I2C_Init>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <statemachine+0x21a6>
					  									  				 						i2cerrcheck=1;
 8005bd8:	4b31      	ldr	r3, [pc, #196]	; (8005ca0 <statemachine+0x2268>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
					  									  				 					  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005bde:	2100      	movs	r1, #0
 8005be0:	482c      	ldr	r0, [pc, #176]	; (8005c94 <statemachine+0x225c>)
 8005be2:	f004 f861 	bl	8009ca8 <HAL_I2CEx_ConfigAnalogFilter>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <statemachine+0x21ba>
					  									  				 						i2cerrcheck=1;
 8005bec:	4b2c      	ldr	r3, [pc, #176]	; (8005ca0 <statemachine+0x2268>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
					  									  				 					  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4827      	ldr	r0, [pc, #156]	; (8005c94 <statemachine+0x225c>)
 8005bf6:	f004 f8a2 	bl	8009d3e <HAL_I2CEx_ConfigDigitalFilter>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <statemachine+0x21ce>
					  									  				 						i2cerrcheck=1;
 8005c00:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <statemachine+0x2268>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
					  									  				 					  if(i2cerrcheck>=1){
 8005c06:	4b26      	ldr	r3, [pc, #152]	; (8005ca0 <statemachine+0x2268>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	dd0f      	ble.n	8005c2e <statemachine+0x21f6>
					  									  				 						ssd1306_Fill(Black);
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f7fd f96c 	bl	8002eec <ssd1306_Fill>
					  									  				 						 ssd1306_WriteString("problem",Font_6x8,White);
 8005c14:	4a0f      	ldr	r2, [pc, #60]	; (8005c54 <statemachine+0x221c>)
 8005c16:	2301      	movs	r3, #1
 8005c18:	ca06      	ldmia	r2, {r1, r2}
 8005c1a:	4822      	ldr	r0, [pc, #136]	; (8005ca4 <statemachine+0x226c>)
 8005c1c:	f7fd fa82 	bl	8003124 <ssd1306_WriteString>
					  									  				 						ssd1306_UpdateScreen();
 8005c20:	f7fd f97c 	bl	8002f1c <ssd1306_UpdateScreen>
					  									  				 						HAL_Delay(1500);
 8005c24:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005c28:	f001 f8f6 	bl	8006e18 <HAL_Delay>
 8005c2c:	e00b      	b.n	8005c46 <statemachine+0x220e>
					  									  				 						HAL_Delay(10);
 8005c2e:	200a      	movs	r0, #10
 8005c30:	f001 f8f2 	bl	8006e18 <HAL_Delay>
					  									  				 						  barostate++;
 8005c34:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <statemachine+0x224c>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <statemachine+0x224c>)
 8005c3e:	701a      	strb	r2, [r3, #0]
					  									  				 						PADS_continuous_init(&hi2c1);
 8005c40:	4814      	ldr	r0, [pc, #80]	; (8005c94 <statemachine+0x225c>)
 8005c42:	f7fb f9d5 	bl	8000ff0 <PADS_continuous_init>
					  									  				 					BTN_B_LONG=0;
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <statemachine+0x2244>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
					  									  				 					BTN_A=0;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <statemachine+0x2240>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
					  									  				 					  break;
 8005c52:	e074      	b.n	8005d3e <statemachine+0x2306>
 8005c54:	2000000c 	.word	0x2000000c
 8005c58:	0801c4a8 	.word	0x0801c4a8
 8005c5c:	20001114 	.word	0x20001114
 8005c60:	20000758 	.word	0x20000758
 8005c64:	0801c4b0 	.word	0x0801c4b0
 8005c68:	200010e0 	.word	0x200010e0
 8005c6c:	200012d8 	.word	0x200012d8
 8005c70:	20000724 	.word	0x20000724
 8005c74:	20000493 	.word	0x20000493
 8005c78:	20000720 	.word	0x20000720
 8005c7c:	20000b64 	.word	0x20000b64
 8005c80:	0801c4c4 	.word	0x0801c4c4
 8005c84:	20000494 	.word	0x20000494
 8005c88:	0801c480 	.word	0x0801c480
 8005c8c:	2000048c 	.word	0x2000048c
 8005c90:	20000b68 	.word	0x20000b68
 8005c94:	200003e4 	.word	0x200003e4
 8005c98:	40005400 	.word	0x40005400
 8005c9c:	00202538 	.word	0x00202538
 8005ca0:	20001118 	.word	0x20001118
 8005ca4:	0801c488 	.word	0x0801c488
					  									  				 					 ssd1306_SetCursor(32,40);
 8005ca8:	2128      	movs	r1, #40	; 0x28
 8005caa:	2020      	movs	r0, #32
 8005cac:	f7fd fa60 	bl	8003170 <ssd1306_SetCursor>
					  									  				 					ssd1306_WriteString("read",Font_6x8,White);
 8005cb0:	4a7e      	ldr	r2, [pc, #504]	; (8005eac <statemachine+0x2474>)
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	ca06      	ldmia	r2, {r1, r2}
 8005cb6:	487e      	ldr	r0, [pc, #504]	; (8005eb0 <statemachine+0x2478>)
 8005cb8:	f7fd fa34 	bl	8003124 <ssd1306_WriteString>
					  									  				 					if(i2cerrcheck==0){
 8005cbc:	4b7d      	ldr	r3, [pc, #500]	; (8005eb4 <statemachine+0x247c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d128      	bne.n	8005d16 <statemachine+0x22de>
					  									  				 					PADS_continuous_read(&hi2c1);
 8005cc4:	487c      	ldr	r0, [pc, #496]	; (8005eb8 <statemachine+0x2480>)
 8005cc6:	f7fb f9fb 	bl	80010c0 <PADS_continuous_read>
					  									  				 				ssd1306_SetCursor(32,48);
 8005cca:	2130      	movs	r1, #48	; 0x30
 8005ccc:	2020      	movs	r0, #32
 8005cce:	f7fd fa4f 	bl	8003170 <ssd1306_SetCursor>
					  									  				 			snprintf((char  *)bufferscreen,50,"t=%d",inttemp);
 8005cd2:	4b7a      	ldr	r3, [pc, #488]	; (8005ebc <statemachine+0x2484>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a7a      	ldr	r2, [pc, #488]	; (8005ec0 <statemachine+0x2488>)
 8005cd8:	2132      	movs	r1, #50	; 0x32
 8005cda:	487a      	ldr	r0, [pc, #488]	; (8005ec4 <statemachine+0x248c>)
 8005cdc:	f011 fdea 	bl	80178b4 <sniprintf>
					  									  				 			ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8005ce0:	4a72      	ldr	r2, [pc, #456]	; (8005eac <statemachine+0x2474>)
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	ca06      	ldmia	r2, {r1, r2}
 8005ce6:	4877      	ldr	r0, [pc, #476]	; (8005ec4 <statemachine+0x248c>)
 8005ce8:	f7fd fa1c 	bl	8003124 <ssd1306_WriteString>
					  									  				 			snprintf((char  *)bufferscreen,50,"p=%d",intpress);
 8005cec:	4b76      	ldr	r3, [pc, #472]	; (8005ec8 <statemachine+0x2490>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a76      	ldr	r2, [pc, #472]	; (8005ecc <statemachine+0x2494>)
 8005cf2:	2132      	movs	r1, #50	; 0x32
 8005cf4:	4873      	ldr	r0, [pc, #460]	; (8005ec4 <statemachine+0x248c>)
 8005cf6:	f011 fddd 	bl	80178b4 <sniprintf>
					  									  				 		ssd1306_SetCursor(32,56);
 8005cfa:	2138      	movs	r1, #56	; 0x38
 8005cfc:	2020      	movs	r0, #32
 8005cfe:	f7fd fa37 	bl	8003170 <ssd1306_SetCursor>
					  									  				 	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 8005d02:	4a6a      	ldr	r2, [pc, #424]	; (8005eac <statemachine+0x2474>)
 8005d04:	2301      	movs	r3, #1
 8005d06:	ca06      	ldmia	r2, {r1, r2}
 8005d08:	486e      	ldr	r0, [pc, #440]	; (8005ec4 <statemachine+0x248c>)
 8005d0a:	f7fd fa0b 	bl	8003124 <ssd1306_WriteString>
					  									  				 	HAL_Delay(500);
 8005d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d12:	f001 f881 	bl	8006e18 <HAL_Delay>
					  									  				 					if(BTN_B_LONG>=1){
 8005d16:	4b6e      	ldr	r3, [pc, #440]	; (8005ed0 <statemachine+0x2498>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	dd11      	ble.n	8005d42 <statemachine+0x230a>
					  									  				 					HAL_I2C_DeInit(&hi2c1);
 8005d1e:	4866      	ldr	r0, [pc, #408]	; (8005eb8 <statemachine+0x2480>)
 8005d20:	f003 faad 	bl	800927e <HAL_I2C_DeInit>
					  									  					 						barostate--;
 8005d24:	4b6b      	ldr	r3, [pc, #428]	; (8005ed4 <statemachine+0x249c>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	4b69      	ldr	r3, [pc, #420]	; (8005ed4 <statemachine+0x249c>)
 8005d2e:	701a      	strb	r2, [r3, #0]
					  									  					 						  BTN_B_LONG=0;
 8005d30:	4b67      	ldr	r3, [pc, #412]	; (8005ed0 <statemachine+0x2498>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
					  									  					 						  BTN_A=0;
 8005d36:	4b68      	ldr	r3, [pc, #416]	; (8005ed8 <statemachine+0x24a0>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
					  									  				 			  break;
 8005d3c:	e001      	b.n	8005d42 <statemachine+0x230a>
					  									  				 					  break;
 8005d3e:	bf00      	nop
 8005d40:	e0ac      	b.n	8005e9c <statemachine+0x2464>
					  									  				 			  break;
 8005d42:	bf00      	nop
					  									  break;
 8005d44:	e0aa      	b.n	8005e9c <statemachine+0x2464>


				  case STATE_TEST:
					  ssd1306_Fill(Black);
 8005d46:	2000      	movs	r0, #0
 8005d48:	f7fd f8d0 	bl	8002eec <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 8005d4c:	2120      	movs	r1, #32
 8005d4e:	2020      	movs	r0, #32
 8005d50:	f7fd fa0e 	bl	8003170 <ssd1306_SetCursor>
					  ssd1306_WriteString("test",Font_6x8,White);
 8005d54:	4a55      	ldr	r2, [pc, #340]	; (8005eac <statemachine+0x2474>)
 8005d56:	2301      	movs	r3, #1
 8005d58:	ca06      	ldmia	r2, {r1, r2}
 8005d5a:	4860      	ldr	r0, [pc, #384]	; (8005edc <statemachine+0x24a4>)
 8005d5c:	f7fd f9e2 	bl	8003124 <ssd1306_WriteString>
					  memcpy((char  *)longbufferscreen,"ceci est un text plutot long, qui ne s'arrette toujours pas et pourtant il s'affiche complet",sizeof("ceci est un text plutot long, qui ne s'arrette toujours pas et pourtant il s'affiche complet"));
 8005d60:	225d      	movs	r2, #93	; 0x5d
 8005d62:	495f      	ldr	r1, [pc, #380]	; (8005ee0 <statemachine+0x24a8>)
 8005d64:	485f      	ldr	r0, [pc, #380]	; (8005ee4 <statemachine+0x24ac>)
 8005d66:	f011 ff58 	bl	8017c1a <memcpy>
					  scrolltextmax=scrollText(longbufferscreen,Font_7x10,32,40,32,offsetforscroltext);
 8005d6a:	4b5f      	ldr	r3, [pc, #380]	; (8005ee8 <statemachine+0x24b0>)
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	4a5f      	ldr	r2, [pc, #380]	; (8005eec <statemachine+0x24b4>)
 8005d70:	9302      	str	r3, [sp, #8]
 8005d72:	2320      	movs	r3, #32
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	2328      	movs	r3, #40	; 0x28
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	2320      	movs	r3, #32
 8005d7c:	ca06      	ldmia	r2, {r1, r2}
 8005d7e:	4859      	ldr	r0, [pc, #356]	; (8005ee4 <statemachine+0x24ac>)
 8005d80:	f7fd fdee 	bl	8003960 <scrollText>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	4b59      	ldr	r3, [pc, #356]	; (8005ef0 <statemachine+0x24b8>)
 8005d8a:	801a      	strh	r2, [r3, #0]
					  ssd1306_SetCursor(32,55);
 8005d8c:	2137      	movs	r1, #55	; 0x37
 8005d8e:	2020      	movs	r0, #32
 8005d90:	f7fd f9ee 	bl	8003170 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,50,"%d",offsetforscroltext);
 8005d94:	4b54      	ldr	r3, [pc, #336]	; (8005ee8 <statemachine+0x24b0>)
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	4a56      	ldr	r2, [pc, #344]	; (8005ef4 <statemachine+0x24bc>)
 8005d9a:	2132      	movs	r1, #50	; 0x32
 8005d9c:	4849      	ldr	r0, [pc, #292]	; (8005ec4 <statemachine+0x248c>)
 8005d9e:	f011 fd89 	bl	80178b4 <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005da2:	4a42      	ldr	r2, [pc, #264]	; (8005eac <statemachine+0x2474>)
 8005da4:	2301      	movs	r3, #1
 8005da6:	ca06      	ldmia	r2, {r1, r2}
 8005da8:	4846      	ldr	r0, [pc, #280]	; (8005ec4 <statemachine+0x248c>)
 8005daa:	f7fd f9bb 	bl	8003124 <ssd1306_WriteString>


					  if(offsetforscroltext>=scrolltextmax+16){
 8005dae:	4b50      	ldr	r3, [pc, #320]	; (8005ef0 <statemachine+0x24b8>)
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	330f      	adds	r3, #15
 8005db4:	4a4c      	ldr	r2, [pc, #304]	; (8005ee8 <statemachine+0x24b0>)
 8005db6:	8812      	ldrh	r2, [r2, #0]
 8005db8:	4293      	cmp	r3, r2
 8005dba:	da02      	bge.n	8005dc2 <statemachine+0x238a>
					  	  offsetforscroltext=0;
 8005dbc:	4b4a      	ldr	r3, [pc, #296]	; (8005ee8 <statemachine+0x24b0>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	801a      	strh	r2, [r3, #0]





					  if(BTN_A>=1){
 8005dc2:	4b45      	ldr	r3, [pc, #276]	; (8005ed8 <statemachine+0x24a0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	dd41      	ble.n	8005e4e <statemachine+0x2416>
					 				 									state--;
 8005dca:	4b4b      	ldr	r3, [pc, #300]	; (8005ef8 <statemachine+0x24c0>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	4b49      	ldr	r3, [pc, #292]	; (8005ef8 <statemachine+0x24c0>)
 8005dd4:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005dd6:	4b48      	ldr	r3, [pc, #288]	; (8005ef8 <statemachine+0x24c0>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	4b46      	ldr	r3, [pc, #280]	; (8005ef8 <statemachine+0x24c0>)
 8005de0:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005de2:	4b45      	ldr	r3, [pc, #276]	; (8005ef8 <statemachine+0x24c0>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	4b43      	ldr	r3, [pc, #268]	; (8005ef8 <statemachine+0x24c0>)
 8005dec:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005dee:	4b42      	ldr	r3, [pc, #264]	; (8005ef8 <statemachine+0x24c0>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	4b40      	ldr	r3, [pc, #256]	; (8005ef8 <statemachine+0x24c0>)
 8005df8:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005dfa:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <statemachine+0x24c0>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	4b3d      	ldr	r3, [pc, #244]	; (8005ef8 <statemachine+0x24c0>)
 8005e04:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005e06:	4b3c      	ldr	r3, [pc, #240]	; (8005ef8 <statemachine+0x24c0>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	4b3a      	ldr	r3, [pc, #232]	; (8005ef8 <statemachine+0x24c0>)
 8005e10:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005e12:	4b39      	ldr	r3, [pc, #228]	; (8005ef8 <statemachine+0x24c0>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	4b37      	ldr	r3, [pc, #220]	; (8005ef8 <statemachine+0x24c0>)
 8005e1c:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005e1e:	4b36      	ldr	r3, [pc, #216]	; (8005ef8 <statemachine+0x24c0>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	4b34      	ldr	r3, [pc, #208]	; (8005ef8 <statemachine+0x24c0>)
 8005e28:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005e2a:	4b33      	ldr	r3, [pc, #204]	; (8005ef8 <statemachine+0x24c0>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4b31      	ldr	r3, [pc, #196]	; (8005ef8 <statemachine+0x24c0>)
 8005e34:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005e36:	4b30      	ldr	r3, [pc, #192]	; (8005ef8 <statemachine+0x24c0>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	4b2e      	ldr	r3, [pc, #184]	; (8005ef8 <statemachine+0x24c0>)
 8005e40:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 8005e42:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <statemachine+0x24a0>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 8005e48:	4b2c      	ldr	r3, [pc, #176]	; (8005efc <statemachine+0x24c4>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
					 				 									  	}
					  if(BTN_A_LONG>=1){
 8005e4e:	4b2c      	ldr	r3, [pc, #176]	; (8005f00 <statemachine+0x24c8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	dd21      	ble.n	8005e9a <statemachine+0x2462>
					  				 									 									  			 	state--;
 8005e56:	4b28      	ldr	r3, [pc, #160]	; (8005ef8 <statemachine+0x24c0>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	4b26      	ldr	r3, [pc, #152]	; (8005ef8 <statemachine+0x24c0>)
 8005e60:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8005e62:	4b1d      	ldr	r3, [pc, #116]	; (8005ed8 <statemachine+0x24a0>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 8005e68:	4b24      	ldr	r3, [pc, #144]	; (8005efc <statemachine+0x24c4>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <statemachine+0x24c8>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
					  				 									 									  	}



					  break;
 8005e74:	e011      	b.n	8005e9a <statemachine+0x2462>
				  break;
 8005e76:	bf00      	nop
 8005e78:	e010      	b.n	8005e9c <statemachine+0x2464>
			  break;
 8005e7a:	bf00      	nop
 8005e7c:	e00e      	b.n	8005e9c <statemachine+0x2464>
			  break;
 8005e7e:	bf00      	nop
 8005e80:	e00c      	b.n	8005e9c <statemachine+0x2464>
			  break;
 8005e82:	bf00      	nop
 8005e84:	e00a      	b.n	8005e9c <statemachine+0x2464>
			  break;
 8005e86:	bf00      	nop
 8005e88:	e008      	b.n	8005e9c <statemachine+0x2464>
				  break;
 8005e8a:	bf00      	nop
 8005e8c:	e006      	b.n	8005e9c <statemachine+0x2464>
				  break;
 8005e8e:	bf00      	nop
 8005e90:	e004      	b.n	8005e9c <statemachine+0x2464>
					  break;
 8005e92:	bf00      	nop
 8005e94:	e002      	b.n	8005e9c <statemachine+0x2464>
					  break;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <statemachine+0x2464>
					  break;
 8005e9a:	bf00      	nop
	}
return ;
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
}
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	ecbd 8b02 	vpop	{d8}
 8005ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	2000000c 	.word	0x2000000c
 8005eb0:	0801c4cc 	.word	0x0801c4cc
 8005eb4:	20001118 	.word	0x20001118
 8005eb8:	200003e4 	.word	0x200003e4
 8005ebc:	20000330 	.word	0x20000330
 8005ec0:	0801c4d4 	.word	0x0801c4d4
 8005ec4:	20000980 	.word	0x20000980
 8005ec8:	20000334 	.word	0x20000334
 8005ecc:	0801c3cc 	.word	0x0801c3cc
 8005ed0:	20000b64 	.word	0x20000b64
 8005ed4:	20000494 	.word	0x20000494
 8005ed8:	20000720 	.word	0x20000720
 8005edc:	0801c4dc 	.word	0x0801c4dc
 8005ee0:	0801c4e4 	.word	0x0801c4e4
 8005ee4:	200009b4 	.word	0x200009b4
 8005ee8:	20000af4 	.word	0x20000af4
 8005eec:	20000014 	.word	0x20000014
 8005ef0:	20000af6 	.word	0x20000af6
 8005ef4:	0801c544 	.word	0x0801c544
 8005ef8:	2000048c 	.word	0x2000048c
 8005efc:	20000724 	.word	0x20000724
 8005f00:	20000b68 	.word	0x20000b68

08005f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <HAL_MspInit+0x44>)
 8005f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0e:	4a0e      	ldr	r2, [pc, #56]	; (8005f48 <HAL_MspInit+0x44>)
 8005f10:	f043 0301 	orr.w	r3, r3, #1
 8005f14:	6613      	str	r3, [r2, #96]	; 0x60
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <HAL_MspInit+0x44>)
 8005f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f22:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <HAL_MspInit+0x44>)
 8005f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f26:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <HAL_MspInit+0x44>)
 8005f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f2e:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <HAL_MspInit+0x44>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40021000 	.word	0x40021000

08005f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005f50:	e7fe      	b.n	8005f50 <NMI_Handler+0x4>

08005f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f52:	b480      	push	{r7}
 8005f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f56:	e7fe      	b.n	8005f56 <HardFault_Handler+0x4>

08005f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f5c:	e7fe      	b.n	8005f5c <MemManage_Handler+0x4>

08005f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f62:	e7fe      	b.n	8005f62 <BusFault_Handler+0x4>

08005f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f68:	e7fe      	b.n	8005f68 <UsageFault_Handler+0x4>

08005f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f7c:	bf00      	nop
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f86:	b480      	push	{r7}
 8005f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f8a:	bf00      	nop
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f98:	f000 ff1e 	bl	8006dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f9c:	bf00      	nop
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005fa4:	2002      	movs	r0, #2
 8005fa6:	f003 f8b7 	bl	8009118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005faa:	bf00      	nop
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005fb4:	4802      	ldr	r0, [pc, #8]	; (8005fc0 <DMA1_Channel1_IRQHandler+0x10>)
 8005fb6:	f002 fd60 	bl	8008a7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005fba:	bf00      	nop
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	2000039c 	.word	0x2000039c

08005fc4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005fc8:	4802      	ldr	r0, [pc, #8]	; (8005fd4 <DMA1_Channel2_IRQHandler+0x10>)
 8005fca:	f002 fd56 	bl	8008a7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005fce:	bf00      	nop
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000c40 	.word	0x20000c40

08005fd8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005fdc:	4802      	ldr	r0, [pc, #8]	; (8005fe8 <DMA1_Channel3_IRQHandler+0x10>)
 8005fde:	f002 fd4c 	bl	8008a7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005fe2:	bf00      	nop
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000c88 	.word	0x20000c88

08005fec <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005ff0:	4802      	ldr	r0, [pc, #8]	; (8005ffc <ADC1_IRQHandler+0x10>)
 8005ff2:	f001 fad5 	bl	80075a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005ff6:	bf00      	nop
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000338 	.word	0x20000338

08006000 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006004:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006008:	f003 f886 	bl	8009118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800600c:	bf00      	nop
 800600e:	bd80      	pop	{r7, pc}

08006010 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006014:	4803      	ldr	r0, [pc, #12]	; (8006024 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8006016:	f008 f802 	bl	800e01e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  updatedate();
 800601a:	f000 faab 	bl	8006574 <updatedate>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800601e:	bf00      	nop
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20001204 	.word	0x20001204

08006028 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800602c:	4802      	ldr	r0, [pc, #8]	; (8006038 <SPI1_IRQHandler+0x10>)
 800602e:	f007 fa7d 	bl	800d52c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006032:	bf00      	nop
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000bdc 	.word	0x20000bdc

0800603c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006040:	4805      	ldr	r0, [pc, #20]	; (8006058 <TIM6_DAC_IRQHandler+0x1c>)
 8006042:	f007 ffec 	bl	800e01e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  offsetforscroltext++;
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <TIM6_DAC_IRQHandler+0x20>)
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	3301      	adds	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	4b03      	ldr	r3, [pc, #12]	; (800605c <TIM6_DAC_IRQHandler+0x20>)
 8006050:	801a      	strh	r2, [r3, #0]



  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006052:	bf00      	nop
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	2000116c 	.word	0x2000116c
 800605c:	20000af4 	.word	0x20000af4

08006060 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  	cptdoubledonnee+=1;
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <TIM7_IRQHandler+0x20>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	4a05      	ldr	r2, [pc, #20]	; (8006080 <TIM7_IRQHandler+0x20>)
 800606c:	6013      	str	r3, [r2, #0]
  	enablewrite=1;
 800606e:	4b05      	ldr	r3, [pc, #20]	; (8006084 <TIM7_IRQHandler+0x24>)
 8006070:	2201      	movs	r2, #1
 8006072:	601a      	str	r2, [r3, #0]



  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006074:	4804      	ldr	r0, [pc, #16]	; (8006088 <TIM7_IRQHandler+0x28>)
 8006076:	f007 ffd2 	bl	800e01e <HAL_TIM_IRQHandler>




  /* USER CODE END TIM7_IRQn 1 */
}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000b28 	.word	0x20000b28
 8006084:	20000b48 	.word	0x20000b48
 8006088:	200011b8 	.word	0x200011b8

0800608c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006090:	4802      	ldr	r0, [pc, #8]	; (800609c <USB_IRQHandler+0x10>)
 8006092:	f003 ffe9 	bl	800a068 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8006096:	bf00      	nop
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200020a4 	.word	0x200020a4

080060a0 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 80060a4:	4802      	ldr	r0, [pc, #8]	; (80060b0 <DMA2_Channel7_IRQHandler+0x10>)
 80060a6:	f002 fce8 	bl	8008a7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80060aa:	bf00      	nop
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20001360 	.word	0x20001360

080060b4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80060b8:	4802      	ldr	r0, [pc, #8]	; (80060c4 <LPUART1_IRQHandler+0x10>)
 80060ba:	f008 fd8d 	bl	800ebd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80060be:	bf00      	nop
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20001250 	.word	0x20001250

080060c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return 1;
 80060cc:	2301      	movs	r3, #1
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <_kill>:

int _kill(int pid, int sig)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80060e2:	f011 fd65 	bl	8017bb0 <__errno>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2216      	movs	r2, #22
 80060ea:	601a      	str	r2, [r3, #0]
  return -1;
 80060ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <_exit>:

void _exit (int status)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006100:	f04f 31ff 	mov.w	r1, #4294967295
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff ffe7 	bl	80060d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800610a:	e7fe      	b.n	800610a <_exit+0x12>

0800610c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	e00a      	b.n	8006134 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800611e:	f3af 8000 	nop.w
 8006122:	4601      	mov	r1, r0
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	60ba      	str	r2, [r7, #8]
 800612a:	b2ca      	uxtb	r2, r1
 800612c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	3301      	adds	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	429a      	cmp	r2, r3
 800613a:	dbf0      	blt.n	800611e <_read+0x12>
  }

  return len;
 800613c:	687b      	ldr	r3, [r7, #4]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e009      	b.n	800616c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	60ba      	str	r2, [r7, #8]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	3301      	adds	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	dbf1      	blt.n	8006158 <_write+0x12>
  }
  return len;
 8006174:	687b      	ldr	r3, [r7, #4]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <_close>:

int _close(int file)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061a6:	605a      	str	r2, [r3, #4]
  return 0;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <_isatty>:

int _isatty(int file)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80061be:	2301      	movs	r3, #1
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061f0:	4a14      	ldr	r2, [pc, #80]	; (8006244 <_sbrk+0x5c>)
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <_sbrk+0x60>)
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061fc:	4b13      	ldr	r3, [pc, #76]	; (800624c <_sbrk+0x64>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006204:	4b11      	ldr	r3, [pc, #68]	; (800624c <_sbrk+0x64>)
 8006206:	4a12      	ldr	r2, [pc, #72]	; (8006250 <_sbrk+0x68>)
 8006208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800620a:	4b10      	ldr	r3, [pc, #64]	; (800624c <_sbrk+0x64>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	429a      	cmp	r2, r3
 8006216:	d207      	bcs.n	8006228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006218:	f011 fcca 	bl	8017bb0 <__errno>
 800621c:	4603      	mov	r3, r0
 800621e:	220c      	movs	r2, #12
 8006220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006222:	f04f 33ff 	mov.w	r3, #4294967295
 8006226:	e009      	b.n	800623c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006228:	4b08      	ldr	r3, [pc, #32]	; (800624c <_sbrk+0x64>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800622e:	4b07      	ldr	r3, [pc, #28]	; (800624c <_sbrk+0x64>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	4a05      	ldr	r2, [pc, #20]	; (800624c <_sbrk+0x64>)
 8006238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800623a:	68fb      	ldr	r3, [r7, #12]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20010000 	.word	0x20010000
 8006248:	00000400 	.word	0x00000400
 800624c:	2000111c 	.word	0x2000111c
 8006250:	20002708 	.word	0x20002708

08006254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <SystemInit+0x20>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	4a05      	ldr	r2, [pc, #20]	; (8006274 <SystemInit+0x20>)
 8006260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006268:	bf00      	nop
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	e000ed00 	.word	0xe000ed00

08006278 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800627e:	f107 0310 	add.w	r3, r7, #16
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	609a      	str	r2, [r3, #8]
 800628a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800628c:	1d3b      	adds	r3, r7, #4
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	605a      	str	r2, [r3, #4]
 8006294:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006296:	4b1e      	ldr	r3, [pc, #120]	; (8006310 <MX_TIM2_Init+0x98>)
 8006298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800629c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 800629e:	4b1c      	ldr	r3, [pc, #112]	; (8006310 <MX_TIM2_Init+0x98>)
 80062a0:	f240 128f 	movw	r2, #399	; 0x18f
 80062a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062a6:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <MX_TIM2_Init+0x98>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80062ac:	4b18      	ldr	r3, [pc, #96]	; (8006310 <MX_TIM2_Init+0x98>)
 80062ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80062b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062b4:	4b16      	ldr	r3, [pc, #88]	; (8006310 <MX_TIM2_Init+0x98>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062ba:	4b15      	ldr	r3, [pc, #84]	; (8006310 <MX_TIM2_Init+0x98>)
 80062bc:	2200      	movs	r2, #0
 80062be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80062c0:	4813      	ldr	r0, [pc, #76]	; (8006310 <MX_TIM2_Init+0x98>)
 80062c2:	f007 fd85 	bl	800ddd0 <HAL_TIM_Base_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80062cc:	f7fb fe0b 	bl	8001ee6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80062d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80062d6:	f107 0310 	add.w	r3, r7, #16
 80062da:	4619      	mov	r1, r3
 80062dc:	480c      	ldr	r0, [pc, #48]	; (8006310 <MX_TIM2_Init+0x98>)
 80062de:	f007 ffa0 	bl	800e222 <HAL_TIM_ConfigClockSource>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80062e8:	f7fb fdfd 	bl	8001ee6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80062ec:	2320      	movs	r3, #32
 80062ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	4619      	mov	r1, r3
 80062f8:	4805      	ldr	r0, [pc, #20]	; (8006310 <MX_TIM2_Init+0x98>)
 80062fa:	f008 f98b 	bl	800e614 <HAL_TIMEx_MasterConfigSynchronization>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8006304:	f7fb fdef 	bl	8001ee6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006308:	bf00      	nop
 800630a:	3720      	adds	r7, #32
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20001120 	.word	0x20001120

08006314 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006324:	4b14      	ldr	r3, [pc, #80]	; (8006378 <MX_TIM6_Init+0x64>)
 8006326:	4a15      	ldr	r2, [pc, #84]	; (800637c <MX_TIM6_Init+0x68>)
 8006328:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 800632a:	4b13      	ldr	r3, [pc, #76]	; (8006378 <MX_TIM6_Init+0x64>)
 800632c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8006330:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006332:	4b11      	ldr	r3, [pc, #68]	; (8006378 <MX_TIM6_Init+0x64>)
 8006334:	2200      	movs	r2, #0
 8006336:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 249;
 8006338:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <MX_TIM6_Init+0x64>)
 800633a:	22f9      	movs	r2, #249	; 0xf9
 800633c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800633e:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <MX_TIM6_Init+0x64>)
 8006340:	2200      	movs	r2, #0
 8006342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006344:	480c      	ldr	r0, [pc, #48]	; (8006378 <MX_TIM6_Init+0x64>)
 8006346:	f007 fd43 	bl	800ddd0 <HAL_TIM_Base_Init>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8006350:	f7fb fdc9 	bl	8001ee6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006354:	2300      	movs	r3, #0
 8006356:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800635c:	1d3b      	adds	r3, r7, #4
 800635e:	4619      	mov	r1, r3
 8006360:	4805      	ldr	r0, [pc, #20]	; (8006378 <MX_TIM6_Init+0x64>)
 8006362:	f008 f957 	bl	800e614 <HAL_TIMEx_MasterConfigSynchronization>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800636c:	f7fb fdbb 	bl	8001ee6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	2000116c 	.word	0x2000116c
 800637c:	40001000 	.word	0x40001000

08006380 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006390:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <MX_TIM7_Init+0x68>)
 8006392:	4a16      	ldr	r2, [pc, #88]	; (80063ec <MX_TIM7_Init+0x6c>)
 8006394:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000-1;
 8006396:	4b14      	ldr	r3, [pc, #80]	; (80063e8 <MX_TIM7_Init+0x68>)
 8006398:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800639c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800639e:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <MX_TIM7_Init+0x68>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80063a4:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <MX_TIM7_Init+0x68>)
 80063a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80063aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063ac:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <MX_TIM7_Init+0x68>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80063b2:	480d      	ldr	r0, [pc, #52]	; (80063e8 <MX_TIM7_Init+0x68>)
 80063b4:	f007 fd0c 	bl	800ddd0 <HAL_TIM_Base_Init>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80063be:	f7fb fd92 	bl	8001ee6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063c2:	2300      	movs	r3, #0
 80063c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80063ca:	1d3b      	adds	r3, r7, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4806      	ldr	r0, [pc, #24]	; (80063e8 <MX_TIM7_Init+0x68>)
 80063d0:	f008 f920 	bl	800e614 <HAL_TIMEx_MasterConfigSynchronization>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80063da:	f7fb fd84 	bl	8001ee6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80063de:	bf00      	nop
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	200011b8 	.word	0x200011b8
 80063ec:	40001400 	.word	0x40001400

080063f0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063f6:	f107 0310 	add.w	r3, r7, #16
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	609a      	str	r2, [r3, #8]
 8006402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006404:	1d3b      	adds	r3, r7, #4
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	605a      	str	r2, [r3, #4]
 800640c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800640e:	4b1f      	ldr	r3, [pc, #124]	; (800648c <MX_TIM15_Init+0x9c>)
 8006410:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <MX_TIM15_Init+0xa0>)
 8006412:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 39999;
 8006414:	4b1d      	ldr	r3, [pc, #116]	; (800648c <MX_TIM15_Init+0x9c>)
 8006416:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800641a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800641c:	4b1b      	ldr	r3, [pc, #108]	; (800648c <MX_TIM15_Init+0x9c>)
 800641e:	2200      	movs	r2, #0
 8006420:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8006422:	4b1a      	ldr	r3, [pc, #104]	; (800648c <MX_TIM15_Init+0x9c>)
 8006424:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006428:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800642a:	4b18      	ldr	r3, [pc, #96]	; (800648c <MX_TIM15_Init+0x9c>)
 800642c:	2200      	movs	r2, #0
 800642e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8006430:	4b16      	ldr	r3, [pc, #88]	; (800648c <MX_TIM15_Init+0x9c>)
 8006432:	2200      	movs	r2, #0
 8006434:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006436:	4b15      	ldr	r3, [pc, #84]	; (800648c <MX_TIM15_Init+0x9c>)
 8006438:	2200      	movs	r2, #0
 800643a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800643c:	4813      	ldr	r0, [pc, #76]	; (800648c <MX_TIM15_Init+0x9c>)
 800643e:	f007 fcc7 	bl	800ddd0 <HAL_TIM_Base_Init>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8006448:	f7fb fd4d 	bl	8001ee6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800644c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006450:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8006452:	f107 0310 	add.w	r3, r7, #16
 8006456:	4619      	mov	r1, r3
 8006458:	480c      	ldr	r0, [pc, #48]	; (800648c <MX_TIM15_Init+0x9c>)
 800645a:	f007 fee2 	bl	800e222 <HAL_TIM_ConfigClockSource>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8006464:	f7fb fd3f 	bl	8001ee6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006468:	2300      	movs	r3, #0
 800646a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006470:	1d3b      	adds	r3, r7, #4
 8006472:	4619      	mov	r1, r3
 8006474:	4805      	ldr	r0, [pc, #20]	; (800648c <MX_TIM15_Init+0x9c>)
 8006476:	f008 f8cd 	bl	800e614 <HAL_TIMEx_MasterConfigSynchronization>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8006480:	f7fb fd31 	bl	8001ee6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8006484:	bf00      	nop
 8006486:	3720      	adds	r7, #32
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20001204 	.word	0x20001204
 8006490:	40014000 	.word	0x40014000

08006494 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a4:	d10c      	bne.n	80064c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80064a6:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 80064a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064aa:	4a2e      	ldr	r2, [pc, #184]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	6593      	str	r3, [r2, #88]	; 0x58
 80064b2:	4b2c      	ldr	r3, [pc, #176]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80064be:	e04c      	b.n	800655a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a28      	ldr	r2, [pc, #160]	; (8006568 <HAL_TIM_Base_MspInit+0xd4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d114      	bne.n	80064f4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 80064cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ce:	4a25      	ldr	r2, [pc, #148]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 80064d0:	f043 0310 	orr.w	r3, r3, #16
 80064d4:	6593      	str	r3, [r2, #88]	; 0x58
 80064d6:	4b23      	ldr	r3, [pc, #140]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 80064d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 80064e2:	2200      	movs	r2, #0
 80064e4:	2104      	movs	r1, #4
 80064e6:	2036      	movs	r0, #54	; 0x36
 80064e8:	f002 f859 	bl	800859e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80064ec:	2036      	movs	r0, #54	; 0x36
 80064ee:	f002 f872 	bl	80085d6 <HAL_NVIC_EnableIRQ>
}
 80064f2:	e032      	b.n	800655a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1c      	ldr	r2, [pc, #112]	; (800656c <HAL_TIM_Base_MspInit+0xd8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d114      	bne.n	8006528 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80064fe:	4b19      	ldr	r3, [pc, #100]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 8006500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006502:	4a18      	ldr	r2, [pc, #96]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 8006504:	f043 0320 	orr.w	r3, r3, #32
 8006508:	6593      	str	r3, [r2, #88]	; 0x58
 800650a:	4b16      	ldr	r3, [pc, #88]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 800650c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006516:	2200      	movs	r2, #0
 8006518:	2100      	movs	r1, #0
 800651a:	2037      	movs	r0, #55	; 0x37
 800651c:	f002 f83f 	bl	800859e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006520:	2037      	movs	r0, #55	; 0x37
 8006522:	f002 f858 	bl	80085d6 <HAL_NVIC_EnableIRQ>
}
 8006526:	e018      	b.n	800655a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM15)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a10      	ldr	r2, [pc, #64]	; (8006570 <HAL_TIM_Base_MspInit+0xdc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d113      	bne.n	800655a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 8006534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006536:	4a0b      	ldr	r2, [pc, #44]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 8006538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800653c:	6613      	str	r3, [r2, #96]	; 0x60
 800653e:	4b09      	ldr	r3, [pc, #36]	; (8006564 <HAL_TIM_Base_MspInit+0xd0>)
 8006540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006546:	60bb      	str	r3, [r7, #8]
 8006548:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800654a:	2200      	movs	r2, #0
 800654c:	2100      	movs	r1, #0
 800654e:	2018      	movs	r0, #24
 8006550:	f002 f825 	bl	800859e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8006554:	2018      	movs	r0, #24
 8006556:	f002 f83e 	bl	80085d6 <HAL_NVIC_EnableIRQ>
}
 800655a:	bf00      	nop
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40021000 	.word	0x40021000
 8006568:	40001000 	.word	0x40001000
 800656c:	40001400 	.word	0x40001400
 8006570:	40014000 	.word	0x40014000

08006574 <updatedate>:
  /* USER CODE END TIM15_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0

	SEC+=1;
 8006578:	4b98      	ldr	r3, [pc, #608]	; (80067dc <updatedate+0x268>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	3301      	adds	r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	4b96      	ldr	r3, [pc, #600]	; (80067dc <updatedate+0x268>)
 8006582:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006584:	4b95      	ldr	r3, [pc, #596]	; (80067dc <updatedate+0x268>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b3b      	cmp	r3, #59	; 0x3b
 800658a:	d908      	bls.n	800659e <updatedate+0x2a>
		SEC=0;
 800658c:	4b93      	ldr	r3, [pc, #588]	; (80067dc <updatedate+0x268>)
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8006592:	4b93      	ldr	r3, [pc, #588]	; (80067e0 <updatedate+0x26c>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	3301      	adds	r3, #1
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4b91      	ldr	r3, [pc, #580]	; (80067e0 <updatedate+0x26c>)
 800659c:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 800659e:	4b90      	ldr	r3, [pc, #576]	; (80067e0 <updatedate+0x26c>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b3b      	cmp	r3, #59	; 0x3b
 80065a4:	d908      	bls.n	80065b8 <updatedate+0x44>

		MINUTE=0;
 80065a6:	4b8e      	ldr	r3, [pc, #568]	; (80067e0 <updatedate+0x26c>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
		HR+=1;
 80065ac:	4b8d      	ldr	r3, [pc, #564]	; (80067e4 <updatedate+0x270>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	3301      	adds	r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	4b8b      	ldr	r3, [pc, #556]	; (80067e4 <updatedate+0x270>)
 80065b6:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 80065b8:	4b8a      	ldr	r3, [pc, #552]	; (80067e4 <updatedate+0x270>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b17      	cmp	r3, #23
 80065be:	d908      	bls.n	80065d2 <updatedate+0x5e>
		HR=0;
 80065c0:	4b88      	ldr	r3, [pc, #544]	; (80067e4 <updatedate+0x270>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 80065c6:	4b88      	ldr	r3, [pc, #544]	; (80067e8 <updatedate+0x274>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	3301      	adds	r3, #1
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	4b86      	ldr	r3, [pc, #536]	; (80067e8 <updatedate+0x274>)
 80065d0:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 80065d2:	4b86      	ldr	r3, [pc, #536]	; (80067ec <updatedate+0x278>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b0b      	cmp	r3, #11
 80065d8:	f200 8137 	bhi.w	800684a <updatedate+0x2d6>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <updatedate+0x70>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	08006615 	.word	0x08006615
 80065e8:	0800663f 	.word	0x0800663f
 80065ec:	08006669 	.word	0x08006669
 80065f0:	08006693 	.word	0x08006693
 80065f4:	080066bd 	.word	0x080066bd
 80065f8:	080066e7 	.word	0x080066e7
 80065fc:	08006711 	.word	0x08006711
 8006600:	0800673b 	.word	0x0800673b
 8006604:	08006763 	.word	0x08006763
 8006608:	0800678b 	.word	0x0800678b
 800660c:	080067b3 	.word	0x080067b3
 8006610:	080067f5 	.word	0x080067f5

	case JANVIER:
		if(JOURS>31){
 8006614:	4b74      	ldr	r3, [pc, #464]	; (80067e8 <updatedate+0x274>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b1f      	cmp	r3, #31
 800661a:	f240 80ff 	bls.w	800681c <updatedate+0x2a8>
			JOURS=1;
 800661e:	4b72      	ldr	r3, [pc, #456]	; (80067e8 <updatedate+0x274>)
 8006620:	2201      	movs	r2, #1
 8006622:	701a      	strb	r2, [r3, #0]
			mois++;
 8006624:	4b71      	ldr	r3, [pc, #452]	; (80067ec <updatedate+0x278>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	4b6f      	ldr	r3, [pc, #444]	; (80067ec <updatedate+0x278>)
 800662e:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8006630:	4b6f      	ldr	r3, [pc, #444]	; (80067f0 <updatedate+0x27c>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	3301      	adds	r3, #1
 8006636:	b2da      	uxtb	r2, r3
 8006638:	4b6d      	ldr	r3, [pc, #436]	; (80067f0 <updatedate+0x27c>)
 800663a:	701a      	strb	r2, [r3, #0]
		}

		break;
 800663c:	e0ee      	b.n	800681c <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 800663e:	4b6a      	ldr	r3, [pc, #424]	; (80067e8 <updatedate+0x274>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b1d      	cmp	r3, #29
 8006644:	f240 80ec 	bls.w	8006820 <updatedate+0x2ac>
					JOURS=1;
 8006648:	4b67      	ldr	r3, [pc, #412]	; (80067e8 <updatedate+0x274>)
 800664a:	2201      	movs	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]
					mois++;
 800664e:	4b67      	ldr	r3, [pc, #412]	; (80067ec <updatedate+0x278>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	3301      	adds	r3, #1
 8006654:	b2da      	uxtb	r2, r3
 8006656:	4b65      	ldr	r3, [pc, #404]	; (80067ec <updatedate+0x278>)
 8006658:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800665a:	4b65      	ldr	r3, [pc, #404]	; (80067f0 <updatedate+0x27c>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	3301      	adds	r3, #1
 8006660:	b2da      	uxtb	r2, r3
 8006662:	4b63      	ldr	r3, [pc, #396]	; (80067f0 <updatedate+0x27c>)
 8006664:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006666:	e0db      	b.n	8006820 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8006668:	4b5f      	ldr	r3, [pc, #380]	; (80067e8 <updatedate+0x274>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b1f      	cmp	r3, #31
 800666e:	f240 80d9 	bls.w	8006824 <updatedate+0x2b0>
					JOURS=1;
 8006672:	4b5d      	ldr	r3, [pc, #372]	; (80067e8 <updatedate+0x274>)
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
					mois++;
 8006678:	4b5c      	ldr	r3, [pc, #368]	; (80067ec <updatedate+0x278>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	b2da      	uxtb	r2, r3
 8006680:	4b5a      	ldr	r3, [pc, #360]	; (80067ec <updatedate+0x278>)
 8006682:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006684:	4b5a      	ldr	r3, [pc, #360]	; (80067f0 <updatedate+0x27c>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	4b58      	ldr	r3, [pc, #352]	; (80067f0 <updatedate+0x27c>)
 800668e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006690:	e0c8      	b.n	8006824 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8006692:	4b55      	ldr	r3, [pc, #340]	; (80067e8 <updatedate+0x274>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b1e      	cmp	r3, #30
 8006698:	f240 80c6 	bls.w	8006828 <updatedate+0x2b4>
					JOURS=1;
 800669c:	4b52      	ldr	r3, [pc, #328]	; (80067e8 <updatedate+0x274>)
 800669e:	2201      	movs	r2, #1
 80066a0:	701a      	strb	r2, [r3, #0]
					mois++;
 80066a2:	4b52      	ldr	r3, [pc, #328]	; (80067ec <updatedate+0x278>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	4b50      	ldr	r3, [pc, #320]	; (80067ec <updatedate+0x278>)
 80066ac:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80066ae:	4b50      	ldr	r3, [pc, #320]	; (80067f0 <updatedate+0x27c>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	3301      	adds	r3, #1
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	4b4e      	ldr	r3, [pc, #312]	; (80067f0 <updatedate+0x27c>)
 80066b8:	701a      	strb	r2, [r3, #0]
				}
		break;
 80066ba:	e0b5      	b.n	8006828 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 80066bc:	4b4a      	ldr	r3, [pc, #296]	; (80067e8 <updatedate+0x274>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b1f      	cmp	r3, #31
 80066c2:	f240 80b3 	bls.w	800682c <updatedate+0x2b8>
					JOURS=1;
 80066c6:	4b48      	ldr	r3, [pc, #288]	; (80067e8 <updatedate+0x274>)
 80066c8:	2201      	movs	r2, #1
 80066ca:	701a      	strb	r2, [r3, #0]
					mois++;
 80066cc:	4b47      	ldr	r3, [pc, #284]	; (80067ec <updatedate+0x278>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	4b45      	ldr	r3, [pc, #276]	; (80067ec <updatedate+0x278>)
 80066d6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80066d8:	4b45      	ldr	r3, [pc, #276]	; (80067f0 <updatedate+0x27c>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	3301      	adds	r3, #1
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	4b43      	ldr	r3, [pc, #268]	; (80067f0 <updatedate+0x27c>)
 80066e2:	701a      	strb	r2, [r3, #0]
				}
		break;
 80066e4:	e0a2      	b.n	800682c <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 80066e6:	4b40      	ldr	r3, [pc, #256]	; (80067e8 <updatedate+0x274>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b1e      	cmp	r3, #30
 80066ec:	f240 80a0 	bls.w	8006830 <updatedate+0x2bc>
					JOURS=1;
 80066f0:	4b3d      	ldr	r3, [pc, #244]	; (80067e8 <updatedate+0x274>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
					mois++;
 80066f6:	4b3d      	ldr	r3, [pc, #244]	; (80067ec <updatedate+0x278>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	4b3b      	ldr	r3, [pc, #236]	; (80067ec <updatedate+0x278>)
 8006700:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006702:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <updatedate+0x27c>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	b2da      	uxtb	r2, r3
 800670a:	4b39      	ldr	r3, [pc, #228]	; (80067f0 <updatedate+0x27c>)
 800670c:	701a      	strb	r2, [r3, #0]
				}
		break;
 800670e:	e08f      	b.n	8006830 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8006710:	4b35      	ldr	r3, [pc, #212]	; (80067e8 <updatedate+0x274>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b1f      	cmp	r3, #31
 8006716:	f240 808d 	bls.w	8006834 <updatedate+0x2c0>
					JOURS=1;
 800671a:	4b33      	ldr	r3, [pc, #204]	; (80067e8 <updatedate+0x274>)
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006720:	4b32      	ldr	r3, [pc, #200]	; (80067ec <updatedate+0x278>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	3301      	adds	r3, #1
 8006726:	b2da      	uxtb	r2, r3
 8006728:	4b30      	ldr	r3, [pc, #192]	; (80067ec <updatedate+0x278>)
 800672a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800672c:	4b30      	ldr	r3, [pc, #192]	; (80067f0 <updatedate+0x27c>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	3301      	adds	r3, #1
 8006732:	b2da      	uxtb	r2, r3
 8006734:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <updatedate+0x27c>)
 8006736:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006738:	e07c      	b.n	8006834 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 800673a:	4b2b      	ldr	r3, [pc, #172]	; (80067e8 <updatedate+0x274>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b1f      	cmp	r3, #31
 8006740:	d97a      	bls.n	8006838 <updatedate+0x2c4>
					JOURS=1;
 8006742:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <updatedate+0x274>)
 8006744:	2201      	movs	r2, #1
 8006746:	701a      	strb	r2, [r3, #0]
					mois++;
 8006748:	4b28      	ldr	r3, [pc, #160]	; (80067ec <updatedate+0x278>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	3301      	adds	r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	4b26      	ldr	r3, [pc, #152]	; (80067ec <updatedate+0x278>)
 8006752:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006754:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <updatedate+0x27c>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	3301      	adds	r3, #1
 800675a:	b2da      	uxtb	r2, r3
 800675c:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <updatedate+0x27c>)
 800675e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006760:	e06a      	b.n	8006838 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8006762:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <updatedate+0x274>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b1e      	cmp	r3, #30
 8006768:	d968      	bls.n	800683c <updatedate+0x2c8>
					JOURS=1;
 800676a:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <updatedate+0x274>)
 800676c:	2201      	movs	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006770:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <updatedate+0x278>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <updatedate+0x278>)
 800677a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800677c:	4b1c      	ldr	r3, [pc, #112]	; (80067f0 <updatedate+0x27c>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	3301      	adds	r3, #1
 8006782:	b2da      	uxtb	r2, r3
 8006784:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <updatedate+0x27c>)
 8006786:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006788:	e058      	b.n	800683c <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 800678a:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <updatedate+0x274>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b1f      	cmp	r3, #31
 8006790:	d956      	bls.n	8006840 <updatedate+0x2cc>
					JOURS=1;
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <updatedate+0x274>)
 8006794:	2201      	movs	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]
					mois++;
 8006798:	4b14      	ldr	r3, [pc, #80]	; (80067ec <updatedate+0x278>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	4b12      	ldr	r3, [pc, #72]	; (80067ec <updatedate+0x278>)
 80067a2:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80067a4:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <updatedate+0x27c>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <updatedate+0x27c>)
 80067ae:	701a      	strb	r2, [r3, #0]
				}
		break;
 80067b0:	e046      	b.n	8006840 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <updatedate+0x274>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b1e      	cmp	r3, #30
 80067b8:	d944      	bls.n	8006844 <updatedate+0x2d0>
					JOURS=1;
 80067ba:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <updatedate+0x274>)
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
					mois++;
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <updatedate+0x278>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	3301      	adds	r3, #1
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	4b08      	ldr	r3, [pc, #32]	; (80067ec <updatedate+0x278>)
 80067ca:	701a      	strb	r2, [r3, #0]
					MOIS++;
 80067cc:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <updatedate+0x27c>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <updatedate+0x27c>)
 80067d6:	701a      	strb	r2, [r3, #0]
				}
		break;
 80067d8:	e034      	b.n	8006844 <updatedate+0x2d0>
 80067da:	bf00      	nop
 80067dc:	20000b4c 	.word	0x20000b4c
 80067e0:	20000b4e 	.word	0x20000b4e
 80067e4:	20000b4d 	.word	0x20000b4d
 80067e8:	20000008 	.word	0x20000008
 80067ec:	20000b4f 	.word	0x20000b4f
 80067f0:	20000009 	.word	0x20000009
	case DECEMBRE:
		if(JOURS>31){
 80067f4:	4b1f      	ldr	r3, [pc, #124]	; (8006874 <updatedate+0x300>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b1f      	cmp	r3, #31
 80067fa:	d925      	bls.n	8006848 <updatedate+0x2d4>
					JOURS=1;
 80067fc:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <updatedate+0x300>)
 80067fe:	2201      	movs	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]
					mois++;
 8006802:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <updatedate+0x304>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <updatedate+0x304>)
 800680c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 800680e:	4b1b      	ldr	r3, [pc, #108]	; (800687c <updatedate+0x308>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	3301      	adds	r3, #1
 8006814:	b2da      	uxtb	r2, r3
 8006816:	4b19      	ldr	r3, [pc, #100]	; (800687c <updatedate+0x308>)
 8006818:	701a      	strb	r2, [r3, #0]
				}
		break;
 800681a:	e015      	b.n	8006848 <updatedate+0x2d4>
		break;
 800681c:	bf00      	nop
 800681e:	e014      	b.n	800684a <updatedate+0x2d6>
		break;
 8006820:	bf00      	nop
 8006822:	e012      	b.n	800684a <updatedate+0x2d6>
		break;
 8006824:	bf00      	nop
 8006826:	e010      	b.n	800684a <updatedate+0x2d6>
		break;
 8006828:	bf00      	nop
 800682a:	e00e      	b.n	800684a <updatedate+0x2d6>
		break;
 800682c:	bf00      	nop
 800682e:	e00c      	b.n	800684a <updatedate+0x2d6>
		break;
 8006830:	bf00      	nop
 8006832:	e00a      	b.n	800684a <updatedate+0x2d6>
		break;
 8006834:	bf00      	nop
 8006836:	e008      	b.n	800684a <updatedate+0x2d6>
		break;
 8006838:	bf00      	nop
 800683a:	e006      	b.n	800684a <updatedate+0x2d6>
		break;
 800683c:	bf00      	nop
 800683e:	e004      	b.n	800684a <updatedate+0x2d6>
		break;
 8006840:	bf00      	nop
 8006842:	e002      	b.n	800684a <updatedate+0x2d6>
		break;
 8006844:	bf00      	nop
 8006846:	e000      	b.n	800684a <updatedate+0x2d6>
		break;
 8006848:	bf00      	nop

	}

	if(MOIS>12){
 800684a:	4b0c      	ldr	r3, [pc, #48]	; (800687c <updatedate+0x308>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b0c      	cmp	r3, #12
 8006850:	d90b      	bls.n	800686a <updatedate+0x2f6>
		mois=JANVIER;
 8006852:	4b09      	ldr	r3, [pc, #36]	; (8006878 <updatedate+0x304>)
 8006854:	2200      	movs	r2, #0
 8006856:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8006858:	4b08      	ldr	r3, [pc, #32]	; (800687c <updatedate+0x308>)
 800685a:	2201      	movs	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 800685e:	4b08      	ldr	r3, [pc, #32]	; (8006880 <updatedate+0x30c>)
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	3301      	adds	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <updatedate+0x30c>)
 8006868:	801a      	strh	r2, [r3, #0]
	}
}
 800686a:	bf00      	nop
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	20000008 	.word	0x20000008
 8006878:	20000b4f 	.word	0x20000b4f
 800687c:	20000009 	.word	0x20000009
 8006880:	2000000a 	.word	0x2000000a

08006884 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006888:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <MX_LPUART1_UART_Init+0x50>)
 800688a:	4a13      	ldr	r2, [pc, #76]	; (80068d8 <MX_LPUART1_UART_Init+0x54>)
 800688c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800688e:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <MX_LPUART1_UART_Init+0x50>)
 8006890:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006894:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006896:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <MX_LPUART1_UART_Init+0x50>)
 8006898:	2200      	movs	r2, #0
 800689a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <MX_LPUART1_UART_Init+0x50>)
 800689e:	2200      	movs	r2, #0
 80068a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80068a2:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <MX_LPUART1_UART_Init+0x50>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <MX_LPUART1_UART_Init+0x50>)
 80068aa:	220c      	movs	r2, #12
 80068ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <MX_LPUART1_UART_Init+0x50>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068b4:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <MX_LPUART1_UART_Init+0x50>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <MX_LPUART1_UART_Init+0x50>)
 80068bc:	2200      	movs	r2, #0
 80068be:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80068c0:	4804      	ldr	r0, [pc, #16]	; (80068d4 <MX_LPUART1_UART_Init+0x50>)
 80068c2:	f007 ff2b 	bl	800e71c <HAL_UART_Init>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80068cc:	f7fb fb0b 	bl	8001ee6 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80068d0:	bf00      	nop
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20001250 	.word	0x20001250
 80068d8:	40008000 	.word	0x40008000

080068dc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80068e0:	4b14      	ldr	r3, [pc, #80]	; (8006934 <MX_USART1_UART_Init+0x58>)
 80068e2:	4a15      	ldr	r2, [pc, #84]	; (8006938 <MX_USART1_UART_Init+0x5c>)
 80068e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <MX_USART1_UART_Init+0x58>)
 80068e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80068ee:	4b11      	ldr	r3, [pc, #68]	; (8006934 <MX_USART1_UART_Init+0x58>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80068f4:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <MX_USART1_UART_Init+0x58>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80068fa:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <MX_USART1_UART_Init+0x58>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006900:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <MX_USART1_UART_Init+0x58>)
 8006902:	220c      	movs	r2, #12
 8006904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006906:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <MX_USART1_UART_Init+0x58>)
 8006908:	2200      	movs	r2, #0
 800690a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <MX_USART1_UART_Init+0x58>)
 800690e:	2200      	movs	r2, #0
 8006910:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006912:	4b08      	ldr	r3, [pc, #32]	; (8006934 <MX_USART1_UART_Init+0x58>)
 8006914:	2200      	movs	r2, #0
 8006916:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <MX_USART1_UART_Init+0x58>)
 800691a:	2200      	movs	r2, #0
 800691c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800691e:	4805      	ldr	r0, [pc, #20]	; (8006934 <MX_USART1_UART_Init+0x58>)
 8006920:	f007 fefc 	bl	800e71c <HAL_UART_Init>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800692a:	f7fb fadc 	bl	8001ee6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800692e:	bf00      	nop
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200012d8 	.word	0x200012d8
 8006938:	40013800 	.word	0x40013800

0800693c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b0a0      	sub	sp, #128	; 0x80
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006944:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	609a      	str	r2, [r3, #8]
 8006950:	60da      	str	r2, [r3, #12]
 8006952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006954:	f107 0318 	add.w	r3, r7, #24
 8006958:	2254      	movs	r2, #84	; 0x54
 800695a:	2100      	movs	r1, #0
 800695c:	4618      	mov	r0, r3
 800695e:	f011 f840 	bl	80179e2 <memset>
  if(uartHandle->Instance==LPUART1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a55      	ldr	r2, [pc, #340]	; (8006abc <HAL_UART_MspInit+0x180>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d168      	bne.n	8006a3e <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800696c:	2320      	movs	r3, #32
 800696e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006970:	2300      	movs	r3, #0
 8006972:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006974:	f107 0318 	add.w	r3, r7, #24
 8006978:	4618      	mov	r0, r3
 800697a:	f005 fe77 	bl	800c66c <HAL_RCCEx_PeriphCLKConfig>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006984:	f7fb faaf 	bl	8001ee6 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006988:	4b4d      	ldr	r3, [pc, #308]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 800698a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698c:	4a4c      	ldr	r2, [pc, #304]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	65d3      	str	r3, [r2, #92]	; 0x5c
 8006994:	4b4a      	ldr	r3, [pc, #296]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 8006996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069a0:	4b47      	ldr	r3, [pc, #284]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 80069a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a4:	4a46      	ldr	r2, [pc, #280]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069ac:	4b44      	ldr	r3, [pc, #272]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 80069ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80069b8:	230c      	movs	r3, #12
 80069ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069bc:	2302      	movs	r3, #2
 80069be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069c4:	2303      	movs	r3, #3
 80069c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80069c8:	2308      	movs	r3, #8
 80069ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80069d0:	4619      	mov	r1, r3
 80069d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069d6:	f002 f93b 	bl	8008c50 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80069da:	4b3a      	ldr	r3, [pc, #232]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 80069dc:	4a3a      	ldr	r2, [pc, #232]	; (8006ac8 <HAL_UART_MspInit+0x18c>)
 80069de:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 80069e0:	4b38      	ldr	r3, [pc, #224]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 80069e2:	2204      	movs	r2, #4
 80069e4:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069e6:	4b37      	ldr	r3, [pc, #220]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069ec:	4b35      	ldr	r3, [pc, #212]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069f2:	4b34      	ldr	r3, [pc, #208]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 80069f4:	2280      	movs	r2, #128	; 0x80
 80069f6:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069f8:	4b32      	ldr	r3, [pc, #200]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 8006a04:	4b2f      	ldr	r3, [pc, #188]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a0a:	4b2e      	ldr	r3, [pc, #184]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8006a10:	482c      	ldr	r0, [pc, #176]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 8006a12:	f001 fe09 	bl	8008628 <HAL_DMA_Init>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8006a1c:	f7fb fa63 	bl	8001ee6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a28      	ldr	r2, [pc, #160]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 8006a24:	675a      	str	r2, [r3, #116]	; 0x74
 8006a26:	4a27      	ldr	r2, [pc, #156]	; (8006ac4 <HAL_UART_MspInit+0x188>)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2100      	movs	r1, #0
 8006a30:	2046      	movs	r0, #70	; 0x46
 8006a32:	f001 fdb4 	bl	800859e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006a36:	2046      	movs	r0, #70	; 0x46
 8006a38:	f001 fdcd 	bl	80085d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006a3c:	e03a      	b.n	8006ab4 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a22      	ldr	r2, [pc, #136]	; (8006acc <HAL_UART_MspInit+0x190>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d135      	bne.n	8006ab4 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006a50:	f107 0318 	add.w	r3, r7, #24
 8006a54:	4618      	mov	r0, r3
 8006a56:	f005 fe09 	bl	800c66c <HAL_RCCEx_PeriphCLKConfig>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8006a60:	f7fb fa41 	bl	8001ee6 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a64:	4b16      	ldr	r3, [pc, #88]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 8006a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a68:	4a15      	ldr	r2, [pc, #84]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 8006a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8006a70:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 8006a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a7c:	4b10      	ldr	r3, [pc, #64]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 8006a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a80:	4a0f      	ldr	r2, [pc, #60]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 8006a82:	f043 0302 	orr.w	r3, r3, #2
 8006a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a88:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <HAL_UART_MspInit+0x184>)
 8006a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006a94:	23c0      	movs	r3, #192	; 0xc0
 8006a96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006aa4:	2307      	movs	r3, #7
 8006aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006aac:	4619      	mov	r1, r3
 8006aae:	4808      	ldr	r0, [pc, #32]	; (8006ad0 <HAL_UART_MspInit+0x194>)
 8006ab0:	f002 f8ce 	bl	8008c50 <HAL_GPIO_Init>
}
 8006ab4:	bf00      	nop
 8006ab6:	3780      	adds	r7, #128	; 0x80
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40008000 	.word	0x40008000
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	20001360 	.word	0x20001360
 8006ac8:	40020480 	.word	0x40020480
 8006acc:	40013800 	.word	0x40013800
 8006ad0:	48000400 	.word	0x48000400

08006ad4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a14      	ldr	r2, [pc, #80]	; (8006b34 <HAL_UART_MspDeInit+0x60>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d113      	bne.n	8006b0e <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <HAL_UART_MspDeInit+0x64>)
 8006ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aea:	4a13      	ldr	r2, [pc, #76]	; (8006b38 <HAL_UART_MspDeInit+0x64>)
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	65d3      	str	r3, [r2, #92]	; 0x5c

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006af2:	210c      	movs	r1, #12
 8006af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006af8:	f002 fa14 	bl	8008f24 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 fe49 	bl	8008798 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8006b06:	2046      	movs	r0, #70	; 0x46
 8006b08:	f001 fd73 	bl	80085f2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006b0c:	e00e      	b.n	8006b2c <HAL_UART_MspDeInit+0x58>
  else if(uartHandle->Instance==USART1)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <HAL_UART_MspDeInit+0x68>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d109      	bne.n	8006b2c <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART1_CLK_DISABLE();
 8006b18:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <HAL_UART_MspDeInit+0x64>)
 8006b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1c:	4a06      	ldr	r2, [pc, #24]	; (8006b38 <HAL_UART_MspDeInit+0x64>)
 8006b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b22:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8006b24:	21c0      	movs	r1, #192	; 0xc0
 8006b26:	4806      	ldr	r0, [pc, #24]	; (8006b40 <HAL_UART_MspDeInit+0x6c>)
 8006b28:	f002 f9fc 	bl	8008f24 <HAL_GPIO_DeInit>
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40008000 	.word	0x40008000
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	40013800 	.word	0x40013800
 8006b40:	48000400 	.word	0x48000400

08006b44 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8006b4c:	4b30      	ldr	r3, [pc, #192]	; (8006c10 <HAL_UART_RxCpltCallback+0xcc>)
 8006b4e:	881a      	ldrh	r2, [r3, #0]
 8006b50:	4b30      	ldr	r3, [pc, #192]	; (8006c14 <HAL_UART_RxCpltCallback+0xd0>)
 8006b52:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8006b54:	4b2f      	ldr	r3, [pc, #188]	; (8006c14 <HAL_UART_RxCpltCallback+0xd0>)
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8006b5c:	d922      	bls.n	8006ba4 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8006b5e:	4b2d      	ldr	r3, [pc, #180]	; (8006c14 <HAL_UART_RxCpltCallback+0xd0>)
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006b66:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8006b68:	4b2a      	ldr	r3, [pc, #168]	; (8006c14 <HAL_UART_RxCpltCallback+0xd0>)
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4b2a      	ldr	r3, [pc, #168]	; (8006c18 <HAL_UART_RxCpltCallback+0xd4>)
 8006b70:	4413      	add	r3, r2
 8006b72:	89fa      	ldrh	r2, [r7, #14]
 8006b74:	4929      	ldr	r1, [pc, #164]	; (8006c1c <HAL_UART_RxCpltCallback+0xd8>)
 8006b76:	4618      	mov	r0, r3
 8006b78:	f011 f84f 	bl	8017c1a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8006b7c:	4b25      	ldr	r3, [pc, #148]	; (8006c14 <HAL_UART_RxCpltCallback+0xd0>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8006b82:	89fb      	ldrh	r3, [r7, #14]
 8006b84:	4a25      	ldr	r2, [pc, #148]	; (8006c1c <HAL_UART_RxCpltCallback+0xd8>)
 8006b86:	1899      	adds	r1, r3, r2
 8006b88:	89fb      	ldrh	r3, [r7, #14]
 8006b8a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4821      	ldr	r0, [pc, #132]	; (8006c18 <HAL_UART_RxCpltCallback+0xd4>)
 8006b92:	f011 f842 	bl	8017c1a <memcpy>
				newPos = (64-datatocopy);  // update the position
 8006b96:	89fb      	ldrh	r3, [r7, #14]
 8006b98:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	4b1c      	ldr	r3, [pc, #112]	; (8006c10 <HAL_UART_RxCpltCallback+0xcc>)
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	e01e      	b.n	8006be2 <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8006ba4:	4b1b      	ldr	r3, [pc, #108]	; (8006c14 <HAL_UART_RxCpltCallback+0xd0>)
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <HAL_UART_RxCpltCallback+0xd4>)
 8006bac:	441a      	add	r2, r3
 8006bae:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <HAL_UART_RxCpltCallback+0xd8>)
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f8d1 c000 	ldr.w	ip, [r1]
 8006bbe:	684e      	ldr	r6, [r1, #4]
 8006bc0:	688d      	ldr	r5, [r1, #8]
 8006bc2:	68c9      	ldr	r1, [r1, #12]
 8006bc4:	f8c2 c000 	str.w	ip, [r2]
 8006bc8:	6056      	str	r6, [r2, #4]
 8006bca:	6095      	str	r5, [r2, #8]
 8006bcc:	60d1      	str	r1, [r2, #12]
 8006bce:	3310      	adds	r3, #16
 8006bd0:	3010      	adds	r0, #16
 8006bd2:	42a3      	cmp	r3, r4
 8006bd4:	d1ef      	bne.n	8006bb6 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8006bd6:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <HAL_UART_RxCpltCallback+0xd0>)
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	3340      	adds	r3, #64	; 0x40
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <HAL_UART_RxCpltCallback+0xcc>)
 8006be0:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 8006be2:	2240      	movs	r2, #64	; 0x40
 8006be4:	490d      	ldr	r1, [pc, #52]	; (8006c1c <HAL_UART_RxCpltCallback+0xd8>)
 8006be6:	480e      	ldr	r0, [pc, #56]	; (8006c20 <HAL_UART_RxCpltCallback+0xdc>)
 8006be8:	f007 feae 	bl	800e948 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8006bec:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <HAL_UART_RxCpltCallback+0xe0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	; (8006c24 <HAL_UART_RxCpltCallback+0xe0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0204 	bic.w	r2, r2, #4
 8006bfa:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 8006bfc:	2240      	movs	r2, #64	; 0x40
 8006bfe:	4907      	ldr	r1, [pc, #28]	; (8006c1c <HAL_UART_RxCpltCallback+0xd8>)
 8006c00:	4807      	ldr	r0, [pc, #28]	; (8006c20 <HAL_UART_RxCpltCallback+0xdc>)
 8006c02:	f007 fea1 	bl	800e948 <HAL_UART_Receive_DMA>
}
 8006c06:	bf00      	nop
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000498 	.word	0x20000498
 8006c14:	20000496 	.word	0x20000496
 8006c18:	200004dc 	.word	0x200004dc
 8006c1c:	2000049c 	.word	0x2000049c
 8006c20:	20001250 	.word	0x20001250
 8006c24:	20001360 	.word	0x20001360

08006c28 <getgpu>:
uint8_t usbnumbuf2[10];




void getgpu(uint8_t * usbbuffer){
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	usbbuffer[64]='$';
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3340      	adds	r3, #64	; 0x40
 8006c34:	2224      	movs	r2, #36	; 0x24
 8006c36:	701a      	strb	r2, [r3, #0]
	memset(usbnumbuf1,'$',10);
 8006c38:	220a      	movs	r2, #10
 8006c3a:	2124      	movs	r1, #36	; 0x24
 8006c3c:	4823      	ldr	r0, [pc, #140]	; (8006ccc <getgpu+0xa4>)
 8006c3e:	f010 fed0 	bl	80179e2 <memset>
	memset(usbnumbuf2,'$',10);
 8006c42:	220a      	movs	r2, #10
 8006c44:	2124      	movs	r1, #36	; 0x24
 8006c46:	4822      	ldr	r0, [pc, #136]	; (8006cd0 <getgpu+0xa8>)
 8006c48:	f010 fecb 	bl	80179e2 <memset>


	int cnt=0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]
	while(usbbuffer[cnt]!='$'){
 8006c50:	e00b      	b.n	8006c6a <getgpu+0x42>

		usbnumbuf1[cnt]=usbbuffer[cnt];
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	4413      	add	r3, r2
 8006c58:	7819      	ldrb	r1, [r3, #0]
 8006c5a:	4a1c      	ldr	r2, [pc, #112]	; (8006ccc <getgpu+0xa4>)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	460a      	mov	r2, r1
 8006c62:	701a      	strb	r2, [r3, #0]
				  cnt++;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]
	while(usbbuffer[cnt]!='$'){
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4413      	add	r3, r2
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b24      	cmp	r3, #36	; 0x24
 8006c74:	d1ed      	bne.n	8006c52 <getgpu+0x2a>
			  }
			  cnt++;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	60fb      	str	r3, [r7, #12]
			  int cnt1=0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60bb      	str	r3, [r7, #8]
			  while(usbbuffer[cnt]!='$'){
 8006c80:	e00e      	b.n	8006ca0 <getgpu+0x78>

			  		  usbnumbuf2[cnt1]=usbbuffer[cnt];
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	4413      	add	r3, r2
 8006c88:	7819      	ldrb	r1, [r3, #0]
 8006c8a:	4a11      	ldr	r2, [pc, #68]	; (8006cd0 <getgpu+0xa8>)
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4413      	add	r3, r2
 8006c90:	460a      	mov	r2, r1
 8006c92:	701a      	strb	r2, [r3, #0]
			  		  cnt1++;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60bb      	str	r3, [r7, #8]
			  		  cnt++;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]
			  while(usbbuffer[cnt]!='$'){
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b24      	cmp	r3, #36	; 0x24
 8006caa:	d1ea      	bne.n	8006c82 <getgpu+0x5a>
			  	  }

	gputemp=atoi((uint8_t *)usbnumbuf1);
 8006cac:	4807      	ldr	r0, [pc, #28]	; (8006ccc <getgpu+0xa4>)
 8006cae:	f00e ff03 	bl	8015ab8 <atoi>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	4a07      	ldr	r2, [pc, #28]	; (8006cd4 <getgpu+0xac>)
 8006cb6:	6013      	str	r3, [r2, #0]
	gpupower=atoi((uint8_t *)usbnumbuf2);
 8006cb8:	4805      	ldr	r0, [pc, #20]	; (8006cd0 <getgpu+0xa8>)
 8006cba:	f00e fefd 	bl	8015ab8 <atoi>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	4a05      	ldr	r2, [pc, #20]	; (8006cd8 <getgpu+0xb0>)
 8006cc2:	6013      	str	r3, [r2, #0]


}
 8006cc4:	bf00      	nop
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	200013a8 	.word	0x200013a8
 8006cd0:	200013b4 	.word	0x200013b4
 8006cd4:	200010d8 	.word	0x200010d8
 8006cd8:	200010dc 	.word	0x200010dc

08006cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006ce0:	f7ff fab8 	bl	8006254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ce4:	480c      	ldr	r0, [pc, #48]	; (8006d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8006ce6:	490d      	ldr	r1, [pc, #52]	; (8006d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006ce8:	4a0d      	ldr	r2, [pc, #52]	; (8006d20 <LoopForever+0xe>)
  movs r3, #0
 8006cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006cec:	e002      	b.n	8006cf4 <LoopCopyDataInit>

08006cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cf2:	3304      	adds	r3, #4

08006cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cf8:	d3f9      	bcc.n	8006cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cfa:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006cfc:	4c0a      	ldr	r4, [pc, #40]	; (8006d28 <LoopForever+0x16>)
  movs r3, #0
 8006cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d00:	e001      	b.n	8006d06 <LoopFillZerobss>

08006d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d04:	3204      	adds	r2, #4

08006d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d08:	d3fb      	bcc.n	8006d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006d0a:	f010 ff57 	bl	8017bbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006d0e:	f7fa ffc5 	bl	8001c9c <main>

08006d12 <LoopForever>:

LoopForever:
    b LoopForever
 8006d12:	e7fe      	b.n	8006d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006d14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d1c:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8006d20:	0801e808 	.word	0x0801e808
  ldr r2, =_sbss
 8006d24:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8006d28:	20002708 	.word	0x20002708

08006d2c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006d2c:	e7fe      	b.n	8006d2c <CAN1_RX0_IRQHandler>

08006d2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d38:	2003      	movs	r0, #3
 8006d3a:	f001 fc25 	bl	8008588 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006d3e:	200f      	movs	r0, #15
 8006d40:	f000 f80e 	bl	8006d60 <HAL_InitTick>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	71fb      	strb	r3, [r7, #7]
 8006d4e:	e001      	b.n	8006d54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006d50:	f7ff f8d8 	bl	8005f04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006d54:	79fb      	ldrb	r3, [r7, #7]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006d6c:	4b17      	ldr	r3, [pc, #92]	; (8006dcc <HAL_InitTick+0x6c>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d023      	beq.n	8006dbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006d74:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <HAL_InitTick+0x70>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4b14      	ldr	r3, [pc, #80]	; (8006dcc <HAL_InitTick+0x6c>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 fc3f 	bl	800860e <HAL_SYSTICK_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10f      	bne.n	8006db6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b0f      	cmp	r3, #15
 8006d9a:	d809      	bhi.n	8006db0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	f001 fbfb 	bl	800859e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006da8:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <HAL_InitTick+0x74>)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	e007      	b.n	8006dc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	73fb      	strb	r3, [r7, #15]
 8006db4:	e004      	b.n	8006dc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	73fb      	strb	r3, [r7, #15]
 8006dba:	e001      	b.n	8006dc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	2000002c 	.word	0x2000002c
 8006dd0:	20000024 	.word	0x20000024
 8006dd4:	20000028 	.word	0x20000028

08006dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006ddc:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <HAL_IncTick+0x20>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <HAL_IncTick+0x24>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4413      	add	r3, r2
 8006de8:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <HAL_IncTick+0x24>)
 8006dea:	6013      	str	r3, [r2, #0]
}
 8006dec:	bf00      	nop
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	2000002c 	.word	0x2000002c
 8006dfc:	200013c0 	.word	0x200013c0

08006e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  return uwTick;
 8006e04:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <HAL_GetTick+0x14>)
 8006e06:	681b      	ldr	r3, [r3, #0]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	200013c0 	.word	0x200013c0

08006e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e20:	f7ff ffee 	bl	8006e00 <HAL_GetTick>
 8006e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d005      	beq.n	8006e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006e32:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <HAL_Delay+0x44>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e3e:	bf00      	nop
 8006e40:	f7ff ffde 	bl	8006e00 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d8f7      	bhi.n	8006e40 <HAL_Delay+0x28>
  {
  }
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2000002c 	.word	0x2000002c

08006e60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	609a      	str	r2, [r3, #8]
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	609a      	str	r2, [r3, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3360      	adds	r3, #96	; 0x60
 8006eda:	461a      	mov	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <LL_ADC_SetOffset+0x44>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006f00:	bf00      	nop
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	03fff000 	.word	0x03fff000

08006f10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3360      	adds	r3, #96	; 0x60
 8006f1e:	461a      	mov	r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3360      	adds	r3, #96	; 0x60
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	431a      	orrs	r2, r3
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3330      	adds	r3, #48	; 0x30
 8006fa8:	461a      	mov	r2, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	0a1b      	lsrs	r3, r3, #8
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	f003 030c 	and.w	r3, r3, #12
 8006fb4:	4413      	add	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	211f      	movs	r1, #31
 8006fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	401a      	ands	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	0e9b      	lsrs	r3, r3, #26
 8006fd0:	f003 011f 	and.w	r1, r3, #31
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	fa01 f303 	lsl.w	r3, r1, r3
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007016:	b480      	push	{r7}
 8007018:	b087      	sub	sp, #28
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3314      	adds	r3, #20
 8007026:	461a      	mov	r2, r3
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	0e5b      	lsrs	r3, r3, #25
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	4413      	add	r3, r2
 8007034:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	0d1b      	lsrs	r3, r3, #20
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	2107      	movs	r1, #7
 8007044:	fa01 f303 	lsl.w	r3, r1, r3
 8007048:	43db      	mvns	r3, r3
 800704a:	401a      	ands	r2, r3
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	0d1b      	lsrs	r3, r3, #20
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	fa01 f303 	lsl.w	r3, r1, r3
 800705a:	431a      	orrs	r2, r3
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007060:	bf00      	nop
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007084:	43db      	mvns	r3, r3
 8007086:	401a      	ands	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f003 0318 	and.w	r3, r3, #24
 800708e:	4908      	ldr	r1, [pc, #32]	; (80070b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007090:	40d9      	lsrs	r1, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	400b      	ands	r3, r1
 8007096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800709a:	431a      	orrs	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80070a2:	bf00      	nop
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	0007ffff 	.word	0x0007ffff

080070b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80070c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	6093      	str	r3, [r2, #8]
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ec:	d101      	bne.n	80070f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007114:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800713c:	d101      	bne.n	8007142 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007164:	f043 0201 	orr.w	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <LL_ADC_IsEnabled+0x18>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <LL_ADC_IsEnabled+0x1a>
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80071b2:	f043 0204 	orr.w	r2, r3, #4
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d101      	bne.n	80071de <LL_ADC_REG_IsConversionOngoing+0x18>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 0308 	and.w	r3, r3, #8
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d101      	bne.n	8007204 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e126      	b.n	800747c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007238:	2b00      	cmp	r3, #0
 800723a:	d109      	bne.n	8007250 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7fa f931 	bl	80014a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff ff3f 	bl	80070d8 <LL_ADC_IsDeepPowerDownEnabled>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff ff25 	bl	80070b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff ff5a 	bl	8007128 <LL_ADC_IsInternalRegulatorEnabled>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d115      	bne.n	80072a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff ff3e 	bl	8007100 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007284:	4b7f      	ldr	r3, [pc, #508]	; (8007484 <HAL_ADC_Init+0x270>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	099b      	lsrs	r3, r3, #6
 800728a:	4a7f      	ldr	r2, [pc, #508]	; (8007488 <HAL_ADC_Init+0x274>)
 800728c:	fba2 2303 	umull	r2, r3, r2, r3
 8007290:	099b      	lsrs	r3, r3, #6
 8007292:	3301      	adds	r3, #1
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007298:	e002      	b.n	80072a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3b01      	subs	r3, #1
 800729e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1f9      	bne.n	800729a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff ff3c 	bl	8007128 <LL_ADC_IsInternalRegulatorEnabled>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10d      	bne.n	80072d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ba:	f043 0210 	orr.w	r2, r3, #16
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c6:	f043 0201 	orr.w	r2, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff ff75 	bl	80071c6 <LL_ADC_REG_IsConversionOngoing>
 80072dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f003 0310 	and.w	r3, r3, #16
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f040 80bf 	bne.w	800746a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f040 80bb 	bne.w	800746a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80072fc:	f043 0202 	orr.w	r2, r3, #2
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff ff35 	bl	8007178 <LL_ADC_IsEnabled>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10b      	bne.n	800732c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007314:	485d      	ldr	r0, [pc, #372]	; (800748c <HAL_ADC_Init+0x278>)
 8007316:	f7ff ff2f 	bl	8007178 <LL_ADC_IsEnabled>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d105      	bne.n	800732c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4619      	mov	r1, r3
 8007326:	485a      	ldr	r0, [pc, #360]	; (8007490 <HAL_ADC_Init+0x27c>)
 8007328:	f7ff fd9a 	bl	8006e60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	7e5b      	ldrb	r3, [r3, #25]
 8007330:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007336:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800733c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007342:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800734a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800734c:	4313      	orrs	r3, r2
 800734e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d106      	bne.n	8007368 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	3b01      	subs	r3, #1
 8007360:	045b      	lsls	r3, r3, #17
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	4313      	orrs	r3, r2
 8007366:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	2b00      	cmp	r3, #0
 800736e:	d009      	beq.n	8007384 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	4313      	orrs	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	4b42      	ldr	r3, [pc, #264]	; (8007494 <HAL_ADC_Init+0x280>)
 800738c:	4013      	ands	r3, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	69b9      	ldr	r1, [r7, #24]
 8007394:	430b      	orrs	r3, r1
 8007396:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff ff25 	bl	80071ec <LL_ADC_INJ_IsConversionOngoing>
 80073a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d13d      	bne.n	8007426 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d13a      	bne.n	8007426 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80073b4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80073be:	4313      	orrs	r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073cc:	f023 0302 	bic.w	r3, r3, #2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6812      	ldr	r2, [r2, #0]
 80073d4:	69b9      	ldr	r1, [r7, #24]
 80073d6:	430b      	orrs	r3, r1
 80073d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d118      	bne.n	8007416 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073ee:	f023 0304 	bic.w	r3, r3, #4
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073fa:	4311      	orrs	r1, r2
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007400:	4311      	orrs	r1, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007406:	430a      	orrs	r2, r1
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	611a      	str	r2, [r3, #16]
 8007414:	e007      	b.n	8007426 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691a      	ldr	r2, [r3, #16]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0201 	bic.w	r2, r2, #1
 8007424:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d10c      	bne.n	8007448 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007434:	f023 010f 	bic.w	r1, r3, #15
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	1e5a      	subs	r2, r3, #1
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	631a      	str	r2, [r3, #48]	; 0x30
 8007446:	e007      	b.n	8007458 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 020f 	bic.w	r2, r2, #15
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745c:	f023 0303 	bic.w	r3, r3, #3
 8007460:	f043 0201 	orr.w	r2, r3, #1
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	655a      	str	r2, [r3, #84]	; 0x54
 8007468:	e007      	b.n	800747a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746e:	f043 0210 	orr.w	r2, r3, #16
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800747a:	7ffb      	ldrb	r3, [r7, #31]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20000024 	.word	0x20000024
 8007488:	053e2d63 	.word	0x053e2d63
 800748c:	50040000 	.word	0x50040000
 8007490:	50040300 	.word	0x50040300
 8007494:	fff0c007 	.word	0xfff0c007

08007498 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff fe8c 	bl	80071c6 <LL_ADC_REG_IsConversionOngoing>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d167      	bne.n	8007584 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <HAL_ADC_Start_DMA+0x2a>
 80074be:	2302      	movs	r3, #2
 80074c0:	e063      	b.n	800758a <HAL_ADC_Start_DMA+0xf2>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fe1c 	bl	8008108 <ADC_Enable>
 80074d0:	4603      	mov	r3, r0
 80074d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d14f      	bne.n	800757a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d006      	beq.n	8007508 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fe:	f023 0206 	bic.w	r2, r3, #6
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	659a      	str	r2, [r3, #88]	; 0x58
 8007506:	e002      	b.n	800750e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007512:	4a20      	ldr	r2, [pc, #128]	; (8007594 <HAL_ADC_Start_DMA+0xfc>)
 8007514:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751a:	4a1f      	ldr	r2, [pc, #124]	; (8007598 <HAL_ADC_Start_DMA+0x100>)
 800751c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007522:	4a1e      	ldr	r2, [pc, #120]	; (800759c <HAL_ADC_Start_DMA+0x104>)
 8007524:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	221c      	movs	r2, #28
 800752c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0210 	orr.w	r2, r2, #16
 8007544:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f042 0201 	orr.w	r2, r2, #1
 8007554:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3340      	adds	r3, #64	; 0x40
 8007560:	4619      	mov	r1, r3
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f001 f9a9 	bl	80088bc <HAL_DMA_Start_IT>
 800756a:	4603      	mov	r3, r0
 800756c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff fe13 	bl	800719e <LL_ADC_REG_StartConversion>
 8007578:	e006      	b.n	8007588 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007582:	e001      	b.n	8007588 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007584:	2302      	movs	r3, #2
 8007586:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	08008215 	.word	0x08008215
 8007598:	080082ed 	.word	0x080082ed
 800759c:	08008309 	.word	0x08008309

080075a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80075a8:	2300      	movs	r3, #0
 80075aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d017      	beq.n	80075f6 <HAL_ADC_IRQHandler+0x56>
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d012      	beq.n	80075f6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d105      	bne.n	80075e8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fecf 	bl	800838c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2202      	movs	r2, #2
 80075f4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <HAL_ADC_IRQHandler+0x6a>
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f003 0304 	and.w	r3, r3, #4
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007610:	2b00      	cmp	r3, #0
 8007612:	d05e      	beq.n	80076d2 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d059      	beq.n	80076d2 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fc99 	bl	8006f72 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d03e      	beq.n	80076c4 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d135      	bne.n	80076c4 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b08      	cmp	r3, #8
 8007664:	d12e      	bne.n	80076c4 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff fdab 	bl	80071c6 <LL_ADC_REG_IsConversionOngoing>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d11a      	bne.n	80076ac <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 020c 	bic.w	r2, r2, #12
 8007684:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d112      	bne.n	80076c4 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a2:	f043 0201 	orr.w	r2, r3, #1
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	655a      	str	r2, [r3, #84]	; 0x54
 80076aa:	e00b      	b.n	80076c4 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b0:	f043 0210 	orr.w	r2, r3, #16
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076bc:	f043 0201 	orr.w	r2, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7f9 ff63 	bl	8001590 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	220c      	movs	r2, #12
 80076d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <HAL_ADC_IRQHandler+0x146>
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d072      	beq.n	80077d6 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d06d      	beq.n	80077d6 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fe:	f003 0310 	and.w	r3, r3, #16
 8007702:	2b00      	cmp	r3, #0
 8007704:	d105      	bne.n	8007712 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fc6a 	bl	8006ff0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800771c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff fc25 	bl	8006f72 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007728:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d047      	beq.n	80077c8 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <HAL_ADC_IRQHandler+0x1b2>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d03f      	beq.n	80077c8 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800774e:	2b00      	cmp	r3, #0
 8007750:	d13a      	bne.n	80077c8 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775c:	2b40      	cmp	r3, #64	; 0x40
 800775e:	d133      	bne.n	80077c8 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d12e      	bne.n	80077c8 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fd3c 	bl	80071ec <LL_ADC_INJ_IsConversionOngoing>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d11a      	bne.n	80077b0 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007788:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d112      	bne.n	80077c8 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a6:	f043 0201 	orr.w	r2, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	655a      	str	r2, [r3, #84]	; 0x54
 80077ae:	e00b      	b.n	80077c8 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b4:	f043 0210 	orr.w	r2, r3, #16
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c0:	f043 0201 	orr.w	r2, r3, #1
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fdb7 	bl	800833c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2260      	movs	r2, #96	; 0x60
 80077d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d011      	beq.n	8007804 <HAL_ADC_IRQHandler+0x264>
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00c      	beq.n	8007804 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f890 	bl	800791c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2280      	movs	r2, #128	; 0x80
 8007802:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780a:	2b00      	cmp	r3, #0
 800780c:	d012      	beq.n	8007834 <HAL_ADC_IRQHandler+0x294>
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00d      	beq.n	8007834 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fd9d 	bl	8008364 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007832:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800783a:	2b00      	cmp	r3, #0
 800783c:	d012      	beq.n	8007864 <HAL_ADC_IRQHandler+0x2c4>
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00d      	beq.n	8007864 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fd8f 	bl	8008378 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007862:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	f003 0310 	and.w	r3, r3, #16
 800786a:	2b00      	cmp	r3, #0
 800786c:	d02a      	beq.n	80078c4 <HAL_ADC_IRQHandler+0x324>
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f003 0310 	and.w	r3, r3, #16
 8007874:	2b00      	cmp	r3, #0
 8007876:	d025      	beq.n	80078c4 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8007880:	2301      	movs	r3, #1
 8007882:	61fb      	str	r3, [r7, #28]
 8007884:	e008      	b.n	8007898 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8007894:	2301      	movs	r3, #1
 8007896:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d10e      	bne.n	80078bc <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ae:	f043 0202 	orr.w	r2, r3, #2
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f83a 	bl	8007930 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2210      	movs	r2, #16
 80078c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d018      	beq.n	8007900 <HAL_ADC_IRQHandler+0x360>
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d013      	beq.n	8007900 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078dc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e8:	f043 0208 	orr.w	r2, r3, #8
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078f8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fd28 	bl	8008350 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007900:	bf00      	nop
 8007902:	3720      	adds	r7, #32
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b0b6      	sub	sp, #216	; 0xd8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007954:	2300      	movs	r3, #0
 8007956:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800795e:	2b01      	cmp	r3, #1
 8007960:	d101      	bne.n	8007966 <HAL_ADC_ConfigChannel+0x22>
 8007962:	2302      	movs	r3, #2
 8007964:	e3bb      	b.n	80080de <HAL_ADC_ConfigChannel+0x79a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f7ff fc27 	bl	80071c6 <LL_ADC_REG_IsConversionOngoing>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	f040 83a0 	bne.w	80080c0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b05      	cmp	r3, #5
 800798e:	d824      	bhi.n	80079da <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	3b02      	subs	r3, #2
 8007996:	2b03      	cmp	r3, #3
 8007998:	d81b      	bhi.n	80079d2 <HAL_ADC_ConfigChannel+0x8e>
 800799a:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <HAL_ADC_ConfigChannel+0x5c>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079b1 	.word	0x080079b1
 80079a4:	080079b9 	.word	0x080079b9
 80079a8:	080079c1 	.word	0x080079c1
 80079ac:	080079c9 	.word	0x080079c9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80079b0:	230c      	movs	r3, #12
 80079b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80079b6:	e010      	b.n	80079da <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80079b8:	2312      	movs	r3, #18
 80079ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80079be:	e00c      	b.n	80079da <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80079c0:	2318      	movs	r3, #24
 80079c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80079c6:	e008      	b.n	80079da <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80079c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80079d0:	e003      	b.n	80079da <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80079d2:	2306      	movs	r3, #6
 80079d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80079d8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80079e8:	f7ff fad6 	bl	8006f98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff fbe8 	bl	80071c6 <LL_ADC_REG_IsConversionOngoing>
 80079f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff fbf4 	bl	80071ec <LL_ADC_INJ_IsConversionOngoing>
 8007a04:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f040 81a4 	bne.w	8007d5a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f040 819f 	bne.w	8007d5a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	6819      	ldr	r1, [r3, #0]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f7ff faf4 	bl	8007016 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	695a      	ldr	r2, [r3, #20]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	08db      	lsrs	r3, r3, #3
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d00a      	beq.n	8007a66 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6818      	ldr	r0, [r3, #0]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	6919      	ldr	r1, [r3, #16]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a60:	f7ff fa32 	bl	8006ec8 <LL_ADC_SetOffset>
 8007a64:	e179      	b.n	8007d5a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff fa4f 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <HAL_ADC_ConfigChannel+0x14e>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff fa44 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	0e9b      	lsrs	r3, r3, #26
 8007a8c:	f003 021f 	and.w	r2, r3, #31
 8007a90:	e01e      	b.n	8007ad0 <HAL_ADC_ConfigChannel+0x18c>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2100      	movs	r1, #0
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff fa39 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007aa8:	fa93 f3a3 	rbit	r3, r3
 8007aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007ab8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8007ac0:	2320      	movs	r3, #32
 8007ac2:	e004      	b.n	8007ace <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8007ac4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ac8:	fab3 f383 	clz	r3, r3
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d105      	bne.n	8007ae8 <HAL_ADC_ConfigChannel+0x1a4>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	0e9b      	lsrs	r3, r3, #26
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	e018      	b.n	8007b1a <HAL_ADC_ConfigChannel+0x1d6>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007af0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007af4:	fa93 f3a3 	rbit	r3, r3
 8007af8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8007afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8007b04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8007b0c:	2320      	movs	r3, #32
 8007b0e:	e004      	b.n	8007b1a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8007b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b14:	fab3 f383 	clz	r3, r3
 8007b18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d106      	bne.n	8007b2c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	2100      	movs	r1, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff fa08 	bl	8006f3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2101      	movs	r1, #1
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff f9ec 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <HAL_ADC_ConfigChannel+0x214>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2101      	movs	r1, #1
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff f9e1 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	0e9b      	lsrs	r3, r3, #26
 8007b52:	f003 021f 	and.w	r2, r3, #31
 8007b56:	e01e      	b.n	8007b96 <HAL_ADC_ConfigChannel+0x252>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff f9d6 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b6e:	fa93 f3a3 	rbit	r3, r3
 8007b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8007b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8007b7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8007b86:	2320      	movs	r3, #32
 8007b88:	e004      	b.n	8007b94 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8007b8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b8e:	fab3 f383 	clz	r3, r3
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <HAL_ADC_ConfigChannel+0x26a>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	0e9b      	lsrs	r3, r3, #26
 8007ba8:	f003 031f 	and.w	r3, r3, #31
 8007bac:	e018      	b.n	8007be0 <HAL_ADC_ConfigChannel+0x29c>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bba:	fa93 f3a3 	rbit	r3, r3
 8007bbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8007bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8007bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8007bd2:	2320      	movs	r3, #32
 8007bd4:	e004      	b.n	8007be0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8007bd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bda:	fab3 f383 	clz	r3, r3
 8007bde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d106      	bne.n	8007bf2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2200      	movs	r2, #0
 8007bea:	2101      	movs	r1, #1
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff f9a5 	bl	8006f3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff f989 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <HAL_ADC_ConfigChannel+0x2da>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2102      	movs	r1, #2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7ff f97e 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007c14:	4603      	mov	r3, r0
 8007c16:	0e9b      	lsrs	r3, r3, #26
 8007c18:	f003 021f 	and.w	r2, r3, #31
 8007c1c:	e01e      	b.n	8007c5c <HAL_ADC_ConfigChannel+0x318>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2102      	movs	r1, #2
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff f973 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c34:	fa93 f3a3 	rbit	r3, r3
 8007c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8007c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8007c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8007c4c:	2320      	movs	r3, #32
 8007c4e:	e004      	b.n	8007c5a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8007c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c54:	fab3 f383 	clz	r3, r3
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d105      	bne.n	8007c74 <HAL_ADC_ConfigChannel+0x330>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	0e9b      	lsrs	r3, r3, #26
 8007c6e:	f003 031f 	and.w	r3, r3, #31
 8007c72:	e014      	b.n	8007c9e <HAL_ADC_ConfigChannel+0x35a>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c7c:	fa93 f3a3 	rbit	r3, r3
 8007c80:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8007c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8007c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8007c90:	2320      	movs	r3, #32
 8007c92:	e004      	b.n	8007c9e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8007c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c98:	fab3 f383 	clz	r3, r3
 8007c9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d106      	bne.n	8007cb0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2102      	movs	r1, #2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff f946 	bl	8006f3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2103      	movs	r1, #3
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff f92a 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <HAL_ADC_ConfigChannel+0x398>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2103      	movs	r1, #3
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7ff f91f 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	0e9b      	lsrs	r3, r3, #26
 8007cd6:	f003 021f 	and.w	r2, r3, #31
 8007cda:	e017      	b.n	8007d0c <HAL_ADC_ConfigChannel+0x3c8>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2103      	movs	r1, #3
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff f914 	bl	8006f10 <LL_ADC_GetOffsetChannel>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cee:	fa93 f3a3 	rbit	r3, r3
 8007cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8007cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8007cfe:	2320      	movs	r3, #32
 8007d00:	e003      	b.n	8007d0a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8007d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d04:	fab3 f383 	clz	r3, r3
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d105      	bne.n	8007d24 <HAL_ADC_ConfigChannel+0x3e0>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	0e9b      	lsrs	r3, r3, #26
 8007d1e:	f003 031f 	and.w	r3, r3, #31
 8007d22:	e011      	b.n	8007d48 <HAL_ADC_ConfigChannel+0x404>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d2c:	fa93 f3a3 	rbit	r3, r3
 8007d30:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8007d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d34:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8007d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8007d3c:	2320      	movs	r3, #32
 8007d3e:	e003      	b.n	8007d48 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8007d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d42:	fab3 f383 	clz	r3, r3
 8007d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d106      	bne.n	8007d5a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2200      	movs	r2, #0
 8007d52:	2103      	movs	r1, #3
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff f8f1 	bl	8006f3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fa0a 	bl	8007178 <LL_ADC_IsEnabled>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f040 8140 	bne.w	8007fec <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	6819      	ldr	r1, [r3, #0]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f7ff f977 	bl	800706c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	4a8f      	ldr	r2, [pc, #572]	; (8007fc0 <HAL_ADC_ConfigChannel+0x67c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	f040 8131 	bne.w	8007fec <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10b      	bne.n	8007db2 <HAL_ADC_ConfigChannel+0x46e>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	0e9b      	lsrs	r3, r3, #26
 8007da0:	3301      	adds	r3, #1
 8007da2:	f003 031f 	and.w	r3, r3, #31
 8007da6:	2b09      	cmp	r3, #9
 8007da8:	bf94      	ite	ls
 8007daa:	2301      	movls	r3, #1
 8007dac:	2300      	movhi	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	e019      	b.n	8007de6 <HAL_ADC_ConfigChannel+0x4a2>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dba:	fa93 f3a3 	rbit	r3, r3
 8007dbe:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8007dca:	2320      	movs	r3, #32
 8007dcc:	e003      	b.n	8007dd6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8007dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dd0:	fab3 f383 	clz	r3, r3
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	2b09      	cmp	r3, #9
 8007dde:	bf94      	ite	ls
 8007de0:	2301      	movls	r3, #1
 8007de2:	2300      	movhi	r3, #0
 8007de4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d079      	beq.n	8007ede <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d107      	bne.n	8007e06 <HAL_ADC_ConfigChannel+0x4c2>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	0e9b      	lsrs	r3, r3, #26
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	069b      	lsls	r3, r3, #26
 8007e00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007e04:	e015      	b.n	8007e32 <HAL_ADC_ConfigChannel+0x4ee>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0e:	fa93 f3a3 	rbit	r3, r3
 8007e12:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e16:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8007e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8007e1e:	2320      	movs	r3, #32
 8007e20:	e003      	b.n	8007e2a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8007e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e24:	fab3 f383 	clz	r3, r3
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	069b      	lsls	r3, r3, #26
 8007e2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d109      	bne.n	8007e52 <HAL_ADC_ConfigChannel+0x50e>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	0e9b      	lsrs	r3, r3, #26
 8007e44:	3301      	adds	r3, #1
 8007e46:	f003 031f 	and.w	r3, r3, #31
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e50:	e017      	b.n	8007e82 <HAL_ADC_ConfigChannel+0x53e>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e5a:	fa93 f3a3 	rbit	r3, r3
 8007e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e62:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007e6a:	2320      	movs	r3, #32
 8007e6c:	e003      	b.n	8007e76 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8007e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e70:	fab3 f383 	clz	r3, r3
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	3301      	adds	r3, #1
 8007e78:	f003 031f 	and.w	r3, r3, #31
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e82:	ea42 0103 	orr.w	r1, r2, r3
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <HAL_ADC_ConfigChannel+0x564>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	0e9b      	lsrs	r3, r3, #26
 8007e98:	3301      	adds	r3, #1
 8007e9a:	f003 021f 	and.w	r2, r3, #31
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	4413      	add	r3, r2
 8007ea4:	051b      	lsls	r3, r3, #20
 8007ea6:	e018      	b.n	8007eda <HAL_ADC_ConfigChannel+0x596>
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb0:	fa93 f3a3 	rbit	r3, r3
 8007eb4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8007ec0:	2320      	movs	r3, #32
 8007ec2:	e003      	b.n	8007ecc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	fab3 f383 	clz	r3, r3
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	3301      	adds	r3, #1
 8007ece:	f003 021f 	and.w	r2, r3, #31
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007eda:	430b      	orrs	r3, r1
 8007edc:	e081      	b.n	8007fe2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d107      	bne.n	8007efa <HAL_ADC_ConfigChannel+0x5b6>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	0e9b      	lsrs	r3, r3, #26
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	069b      	lsls	r3, r3, #26
 8007ef4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007ef8:	e015      	b.n	8007f26 <HAL_ADC_ConfigChannel+0x5e2>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	fa93 f3a3 	rbit	r3, r3
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8007f12:	2320      	movs	r3, #32
 8007f14:	e003      	b.n	8007f1e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f18:	fab3 f383 	clz	r3, r3
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	3301      	adds	r3, #1
 8007f20:	069b      	lsls	r3, r3, #26
 8007f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <HAL_ADC_ConfigChannel+0x602>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	0e9b      	lsrs	r3, r3, #26
 8007f38:	3301      	adds	r3, #1
 8007f3a:	f003 031f 	and.w	r3, r3, #31
 8007f3e:	2101      	movs	r1, #1
 8007f40:	fa01 f303 	lsl.w	r3, r1, r3
 8007f44:	e017      	b.n	8007f76 <HAL_ADC_ConfigChannel+0x632>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	fa93 f3a3 	rbit	r3, r3
 8007f52:	61bb      	str	r3, [r7, #24]
  return result;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8007f5e:	2320      	movs	r3, #32
 8007f60:	e003      	b.n	8007f6a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	fab3 f383 	clz	r3, r3
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	f003 031f 	and.w	r3, r3, #31
 8007f70:	2101      	movs	r1, #1
 8007f72:	fa01 f303 	lsl.w	r3, r1, r3
 8007f76:	ea42 0103 	orr.w	r1, r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10d      	bne.n	8007fa2 <HAL_ADC_ConfigChannel+0x65e>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	0e9b      	lsrs	r3, r3, #26
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	f003 021f 	and.w	r2, r3, #31
 8007f92:	4613      	mov	r3, r2
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	4413      	add	r3, r2
 8007f98:	3b1e      	subs	r3, #30
 8007f9a:	051b      	lsls	r3, r3, #20
 8007f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007fa0:	e01e      	b.n	8007fe0 <HAL_ADC_ConfigChannel+0x69c>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	fa93 f3a3 	rbit	r3, r3
 8007fae:	60fb      	str	r3, [r7, #12]
  return result;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d104      	bne.n	8007fc4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8007fba:	2320      	movs	r3, #32
 8007fbc:	e006      	b.n	8007fcc <HAL_ADC_ConfigChannel+0x688>
 8007fbe:	bf00      	nop
 8007fc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	fab3 f383 	clz	r3, r3
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	3301      	adds	r3, #1
 8007fce:	f003 021f 	and.w	r2, r3, #31
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3b1e      	subs	r3, #30
 8007fda:	051b      	lsls	r3, r3, #20
 8007fdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007fe0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	f7ff f815 	bl	8007016 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	4b3d      	ldr	r3, [pc, #244]	; (80080e8 <HAL_ADC_ConfigChannel+0x7a4>)
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d06c      	beq.n	80080d2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007ff8:	483c      	ldr	r0, [pc, #240]	; (80080ec <HAL_ADC_ConfigChannel+0x7a8>)
 8007ffa:	f7fe ff57 	bl	8006eac <LL_ADC_GetCommonPathInternalCh>
 8007ffe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a3a      	ldr	r2, [pc, #232]	; (80080f0 <HAL_ADC_ConfigChannel+0x7ac>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d127      	bne.n	800805c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800800c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d121      	bne.n	800805c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a35      	ldr	r2, [pc, #212]	; (80080f4 <HAL_ADC_ConfigChannel+0x7b0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d157      	bne.n	80080d2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008026:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800802a:	4619      	mov	r1, r3
 800802c:	482f      	ldr	r0, [pc, #188]	; (80080ec <HAL_ADC_ConfigChannel+0x7a8>)
 800802e:	f7fe ff2a 	bl	8006e86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008032:	4b31      	ldr	r3, [pc, #196]	; (80080f8 <HAL_ADC_ConfigChannel+0x7b4>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	099b      	lsrs	r3, r3, #6
 8008038:	4a30      	ldr	r2, [pc, #192]	; (80080fc <HAL_ADC_ConfigChannel+0x7b8>)
 800803a:	fba2 2303 	umull	r2, r3, r2, r3
 800803e:	099b      	lsrs	r3, r3, #6
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	4613      	mov	r3, r2
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800804c:	e002      	b.n	8008054 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	3b01      	subs	r3, #1
 8008052:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1f9      	bne.n	800804e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800805a:	e03a      	b.n	80080d2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a27      	ldr	r2, [pc, #156]	; (8008100 <HAL_ADC_ConfigChannel+0x7bc>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d113      	bne.n	800808e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800806a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10d      	bne.n	800808e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a1f      	ldr	r2, [pc, #124]	; (80080f4 <HAL_ADC_ConfigChannel+0x7b0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d12a      	bne.n	80080d2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800807c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008080:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008084:	4619      	mov	r1, r3
 8008086:	4819      	ldr	r0, [pc, #100]	; (80080ec <HAL_ADC_ConfigChannel+0x7a8>)
 8008088:	f7fe fefd 	bl	8006e86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800808c:	e021      	b.n	80080d2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1c      	ldr	r2, [pc, #112]	; (8008104 <HAL_ADC_ConfigChannel+0x7c0>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d11c      	bne.n	80080d2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008098:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800809c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d116      	bne.n	80080d2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a12      	ldr	r2, [pc, #72]	; (80080f4 <HAL_ADC_ConfigChannel+0x7b0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d111      	bne.n	80080d2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80080ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80080b6:	4619      	mov	r1, r3
 80080b8:	480c      	ldr	r0, [pc, #48]	; (80080ec <HAL_ADC_ConfigChannel+0x7a8>)
 80080ba:	f7fe fee4 	bl	8006e86 <LL_ADC_SetCommonPathInternalCh>
 80080be:	e008      	b.n	80080d2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c4:	f043 0220 	orr.w	r2, r3, #32
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80080da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80080de:	4618      	mov	r0, r3
 80080e0:	37d8      	adds	r7, #216	; 0xd8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	80080000 	.word	0x80080000
 80080ec:	50040300 	.word	0x50040300
 80080f0:	c7520000 	.word	0xc7520000
 80080f4:	50040000 	.word	0x50040000
 80080f8:	20000024 	.word	0x20000024
 80080fc:	053e2d63 	.word	0x053e2d63
 8008100:	cb840000 	.word	0xcb840000
 8008104:	80000001 	.word	0x80000001

08008108 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008110:	2300      	movs	r3, #0
 8008112:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff f82d 	bl	8007178 <LL_ADC_IsEnabled>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d169      	bne.n	80081f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	4b36      	ldr	r3, [pc, #216]	; (8008204 <ADC_Enable+0xfc>)
 800812c:	4013      	ands	r3, r2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00d      	beq.n	800814e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008136:	f043 0210 	orr.w	r2, r3, #16
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008142:	f043 0201 	orr.w	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e055      	b.n	80081fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fffc 	bl	8007150 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008158:	482b      	ldr	r0, [pc, #172]	; (8008208 <ADC_Enable+0x100>)
 800815a:	f7fe fea7 	bl	8006eac <LL_ADC_GetCommonPathInternalCh>
 800815e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008164:	2b00      	cmp	r3, #0
 8008166:	d013      	beq.n	8008190 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008168:	4b28      	ldr	r3, [pc, #160]	; (800820c <ADC_Enable+0x104>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	099b      	lsrs	r3, r3, #6
 800816e:	4a28      	ldr	r2, [pc, #160]	; (8008210 <ADC_Enable+0x108>)
 8008170:	fba2 2303 	umull	r2, r3, r2, r3
 8008174:	099b      	lsrs	r3, r3, #6
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	4613      	mov	r3, r2
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	4413      	add	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008182:	e002      	b.n	800818a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	3b01      	subs	r3, #1
 8008188:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f9      	bne.n	8008184 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008190:	f7fe fe36 	bl	8006e00 <HAL_GetTick>
 8008194:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008196:	e028      	b.n	80081ea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe ffeb 	bl	8007178 <LL_ADC_IsEnabled>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d104      	bne.n	80081b2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fe ffcf 	bl	8007150 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80081b2:	f7fe fe25 	bl	8006e00 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d914      	bls.n	80081ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d00d      	beq.n	80081ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d2:	f043 0210 	orr.w	r2, r3, #16
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081de:	f043 0201 	orr.w	r2, r3, #1
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e007      	b.n	80081fa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d1cf      	bne.n	8008198 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	8000003f 	.word	0x8000003f
 8008208:	50040300 	.word	0x50040300
 800820c:	20000024 	.word	0x20000024
 8008210:	053e2d63 	.word	0x053e2d63

08008214 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008220:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008226:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800822a:	2b00      	cmp	r3, #0
 800822c:	d14b      	bne.n	80082c6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008232:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b00      	cmp	r3, #0
 8008246:	d021      	beq.n	800828c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fe90 	bl	8006f72 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d032      	beq.n	80082be <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d12b      	bne.n	80082be <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d11f      	bne.n	80082be <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008282:	f043 0201 	orr.w	r2, r3, #1
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	655a      	str	r2, [r3, #84]	; 0x54
 800828a:	e018      	b.n	80082be <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d111      	bne.n	80082be <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d105      	bne.n	80082be <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b6:	f043 0201 	orr.w	r2, r3, #1
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7f9 f966 	bl	8001590 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80082c4:	e00e      	b.n	80082e4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ca:	f003 0310 	and.w	r3, r3, #16
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff fb2c 	bl	8007930 <HAL_ADC_ErrorCallback>
}
 80082d8:	e004      	b.n	80082e4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff fb04 	bl	8007908 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008326:	f043 0204 	orr.w	r2, r3, #4
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fafe 	bl	8007930 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083b0:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <__NVIC_SetPriorityGrouping+0x44>)
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80083bc:	4013      	ands	r3, r2
 80083be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80083cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083d2:	4a04      	ldr	r2, [pc, #16]	; (80083e4 <__NVIC_SetPriorityGrouping+0x44>)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	60d3      	str	r3, [r2, #12]
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	e000ed00 	.word	0xe000ed00

080083e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083ec:	4b04      	ldr	r3, [pc, #16]	; (8008400 <__NVIC_GetPriorityGrouping+0x18>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	0a1b      	lsrs	r3, r3, #8
 80083f2:	f003 0307 	and.w	r3, r3, #7
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	e000ed00 	.word	0xe000ed00

08008404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800840e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008412:	2b00      	cmp	r3, #0
 8008414:	db0b      	blt.n	800842e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	f003 021f 	and.w	r2, r3, #31
 800841c:	4907      	ldr	r1, [pc, #28]	; (800843c <__NVIC_EnableIRQ+0x38>)
 800841e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008422:	095b      	lsrs	r3, r3, #5
 8008424:	2001      	movs	r0, #1
 8008426:	fa00 f202 	lsl.w	r2, r0, r2
 800842a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	e000e100 	.word	0xe000e100

08008440 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800844a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800844e:	2b00      	cmp	r3, #0
 8008450:	db12      	blt.n	8008478 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	f003 021f 	and.w	r2, r3, #31
 8008458:	490a      	ldr	r1, [pc, #40]	; (8008484 <__NVIC_DisableIRQ+0x44>)
 800845a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	2001      	movs	r0, #1
 8008462:	fa00 f202 	lsl.w	r2, r0, r2
 8008466:	3320      	adds	r3, #32
 8008468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800846c:	f3bf 8f4f 	dsb	sy
}
 8008470:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008472:	f3bf 8f6f 	isb	sy
}
 8008476:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	e000e100 	.word	0xe000e100

08008488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008498:	2b00      	cmp	r3, #0
 800849a:	db0a      	blt.n	80084b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	490c      	ldr	r1, [pc, #48]	; (80084d4 <__NVIC_SetPriority+0x4c>)
 80084a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a6:	0112      	lsls	r2, r2, #4
 80084a8:	b2d2      	uxtb	r2, r2
 80084aa:	440b      	add	r3, r1
 80084ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80084b0:	e00a      	b.n	80084c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	4908      	ldr	r1, [pc, #32]	; (80084d8 <__NVIC_SetPriority+0x50>)
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	3b04      	subs	r3, #4
 80084c0:	0112      	lsls	r2, r2, #4
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	440b      	add	r3, r1
 80084c6:	761a      	strb	r2, [r3, #24]
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	e000e100 	.word	0xe000e100
 80084d8:	e000ed00 	.word	0xe000ed00

080084dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80084dc:	b480      	push	{r7}
 80084de:	b089      	sub	sp, #36	; 0x24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f003 0307 	and.w	r3, r3, #7
 80084ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	f1c3 0307 	rsb	r3, r3, #7
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	bf28      	it	cs
 80084fa:	2304      	movcs	r3, #4
 80084fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	3304      	adds	r3, #4
 8008502:	2b06      	cmp	r3, #6
 8008504:	d902      	bls.n	800850c <NVIC_EncodePriority+0x30>
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	3b03      	subs	r3, #3
 800850a:	e000      	b.n	800850e <NVIC_EncodePriority+0x32>
 800850c:	2300      	movs	r3, #0
 800850e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008510:	f04f 32ff 	mov.w	r2, #4294967295
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	fa02 f303 	lsl.w	r3, r2, r3
 800851a:	43da      	mvns	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	401a      	ands	r2, r3
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008524:	f04f 31ff 	mov.w	r1, #4294967295
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	fa01 f303 	lsl.w	r3, r1, r3
 800852e:	43d9      	mvns	r1, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008534:	4313      	orrs	r3, r2
         );
}
 8008536:	4618      	mov	r0, r3
 8008538:	3724      	adds	r7, #36	; 0x24
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
	...

08008544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3b01      	subs	r3, #1
 8008550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008554:	d301      	bcc.n	800855a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008556:	2301      	movs	r3, #1
 8008558:	e00f      	b.n	800857a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800855a:	4a0a      	ldr	r2, [pc, #40]	; (8008584 <SysTick_Config+0x40>)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3b01      	subs	r3, #1
 8008560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008562:	210f      	movs	r1, #15
 8008564:	f04f 30ff 	mov.w	r0, #4294967295
 8008568:	f7ff ff8e 	bl	8008488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <SysTick_Config+0x40>)
 800856e:	2200      	movs	r2, #0
 8008570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008572:	4b04      	ldr	r3, [pc, #16]	; (8008584 <SysTick_Config+0x40>)
 8008574:	2207      	movs	r2, #7
 8008576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	e000e010 	.word	0xe000e010

08008588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7ff ff05 	bl	80083a0 <__NVIC_SetPriorityGrouping>
}
 8008596:	bf00      	nop
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b086      	sub	sp, #24
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	4603      	mov	r3, r0
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	607a      	str	r2, [r7, #4]
 80085aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80085b0:	f7ff ff1a 	bl	80083e8 <__NVIC_GetPriorityGrouping>
 80085b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	68b9      	ldr	r1, [r7, #8]
 80085ba:	6978      	ldr	r0, [r7, #20]
 80085bc:	f7ff ff8e 	bl	80084dc <NVIC_EncodePriority>
 80085c0:	4602      	mov	r2, r0
 80085c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c6:	4611      	mov	r1, r2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff ff5d 	bl	8008488 <__NVIC_SetPriority>
}
 80085ce:	bf00      	nop
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	4603      	mov	r3, r0
 80085de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff ff0d 	bl	8008404 <__NVIC_EnableIRQ>
}
 80085ea:	bf00      	nop
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	4603      	mov	r3, r0
 80085fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80085fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff ff1d 	bl	8008440 <__NVIC_DisableIRQ>
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff ff94 	bl	8008544 <SysTick_Config>
 800861c:	4603      	mov	r3, r0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e098      	b.n	800876c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	4b4d      	ldr	r3, [pc, #308]	; (8008778 <HAL_DMA_Init+0x150>)
 8008642:	429a      	cmp	r2, r3
 8008644:	d80f      	bhi.n	8008666 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	4b4b      	ldr	r3, [pc, #300]	; (800877c <HAL_DMA_Init+0x154>)
 800864e:	4413      	add	r3, r2
 8008650:	4a4b      	ldr	r2, [pc, #300]	; (8008780 <HAL_DMA_Init+0x158>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	091b      	lsrs	r3, r3, #4
 8008658:	009a      	lsls	r2, r3, #2
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a48      	ldr	r2, [pc, #288]	; (8008784 <HAL_DMA_Init+0x15c>)
 8008662:	641a      	str	r2, [r3, #64]	; 0x40
 8008664:	e00e      	b.n	8008684 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	4b46      	ldr	r3, [pc, #280]	; (8008788 <HAL_DMA_Init+0x160>)
 800866e:	4413      	add	r3, r2
 8008670:	4a43      	ldr	r2, [pc, #268]	; (8008780 <HAL_DMA_Init+0x158>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	091b      	lsrs	r3, r3, #4
 8008678:	009a      	lsls	r2, r3, #2
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a42      	ldr	r2, [pc, #264]	; (800878c <HAL_DMA_Init+0x164>)
 8008682:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800869a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80086a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086de:	d039      	beq.n	8008754 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	4a27      	ldr	r2, [pc, #156]	; (8008784 <HAL_DMA_Init+0x15c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d11a      	bne.n	8008720 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80086ea:	4b29      	ldr	r3, [pc, #164]	; (8008790 <HAL_DMA_Init+0x168>)
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f2:	f003 031c 	and.w	r3, r3, #28
 80086f6:	210f      	movs	r1, #15
 80086f8:	fa01 f303 	lsl.w	r3, r1, r3
 80086fc:	43db      	mvns	r3, r3
 80086fe:	4924      	ldr	r1, [pc, #144]	; (8008790 <HAL_DMA_Init+0x168>)
 8008700:	4013      	ands	r3, r2
 8008702:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008704:	4b22      	ldr	r3, [pc, #136]	; (8008790 <HAL_DMA_Init+0x168>)
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6859      	ldr	r1, [r3, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008710:	f003 031c 	and.w	r3, r3, #28
 8008714:	fa01 f303 	lsl.w	r3, r1, r3
 8008718:	491d      	ldr	r1, [pc, #116]	; (8008790 <HAL_DMA_Init+0x168>)
 800871a:	4313      	orrs	r3, r2
 800871c:	600b      	str	r3, [r1, #0]
 800871e:	e019      	b.n	8008754 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008720:	4b1c      	ldr	r3, [pc, #112]	; (8008794 <HAL_DMA_Init+0x16c>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008728:	f003 031c 	and.w	r3, r3, #28
 800872c:	210f      	movs	r1, #15
 800872e:	fa01 f303 	lsl.w	r3, r1, r3
 8008732:	43db      	mvns	r3, r3
 8008734:	4917      	ldr	r1, [pc, #92]	; (8008794 <HAL_DMA_Init+0x16c>)
 8008736:	4013      	ands	r3, r2
 8008738:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800873a:	4b16      	ldr	r3, [pc, #88]	; (8008794 <HAL_DMA_Init+0x16c>)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6859      	ldr	r1, [r3, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008746:	f003 031c 	and.w	r3, r3, #28
 800874a:	fa01 f303 	lsl.w	r3, r1, r3
 800874e:	4911      	ldr	r1, [pc, #68]	; (8008794 <HAL_DMA_Init+0x16c>)
 8008750:	4313      	orrs	r3, r2
 8008752:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	40020407 	.word	0x40020407
 800877c:	bffdfff8 	.word	0xbffdfff8
 8008780:	cccccccd 	.word	0xcccccccd
 8008784:	40020000 	.word	0x40020000
 8008788:	bffdfbf8 	.word	0xbffdfbf8
 800878c:	40020400 	.word	0x40020400
 8008790:	400200a8 	.word	0x400200a8
 8008794:	400204a8 	.word	0x400204a8

08008798 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e072      	b.n	8008890 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0201 	bic.w	r2, r2, #1
 80087b8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	4b36      	ldr	r3, [pc, #216]	; (800889c <HAL_DMA_DeInit+0x104>)
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d80f      	bhi.n	80087e6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	4b34      	ldr	r3, [pc, #208]	; (80088a0 <HAL_DMA_DeInit+0x108>)
 80087ce:	4413      	add	r3, r2
 80087d0:	4a34      	ldr	r2, [pc, #208]	; (80088a4 <HAL_DMA_DeInit+0x10c>)
 80087d2:	fba2 2303 	umull	r2, r3, r2, r3
 80087d6:	091b      	lsrs	r3, r3, #4
 80087d8:	009a      	lsls	r2, r3, #2
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a31      	ldr	r2, [pc, #196]	; (80088a8 <HAL_DMA_DeInit+0x110>)
 80087e2:	641a      	str	r2, [r3, #64]	; 0x40
 80087e4:	e00e      	b.n	8008804 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	4b2f      	ldr	r3, [pc, #188]	; (80088ac <HAL_DMA_DeInit+0x114>)
 80087ee:	4413      	add	r3, r2
 80087f0:	4a2c      	ldr	r2, [pc, #176]	; (80088a4 <HAL_DMA_DeInit+0x10c>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	091b      	lsrs	r3, r3, #4
 80087f8:	009a      	lsls	r2, r3, #2
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a2b      	ldr	r2, [pc, #172]	; (80088b0 <HAL_DMA_DeInit+0x118>)
 8008802:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008810:	f003 021c 	and.w	r2, r3, #28
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008818:	2101      	movs	r1, #1
 800881a:	fa01 f202 	lsl.w	r2, r1, r2
 800881e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008824:	4a20      	ldr	r2, [pc, #128]	; (80088a8 <HAL_DMA_DeInit+0x110>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d10d      	bne.n	8008846 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800882a:	4b22      	ldr	r3, [pc, #136]	; (80088b4 <HAL_DMA_DeInit+0x11c>)
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008832:	f003 031c 	and.w	r3, r3, #28
 8008836:	210f      	movs	r1, #15
 8008838:	fa01 f303 	lsl.w	r3, r1, r3
 800883c:	43db      	mvns	r3, r3
 800883e:	491d      	ldr	r1, [pc, #116]	; (80088b4 <HAL_DMA_DeInit+0x11c>)
 8008840:	4013      	ands	r3, r2
 8008842:	600b      	str	r3, [r1, #0]
 8008844:	e00c      	b.n	8008860 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008846:	4b1c      	ldr	r3, [pc, #112]	; (80088b8 <HAL_DMA_DeInit+0x120>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884e:	f003 031c 	and.w	r3, r3, #28
 8008852:	210f      	movs	r1, #15
 8008854:	fa01 f303 	lsl.w	r3, r1, r3
 8008858:	43db      	mvns	r3, r3
 800885a:	4917      	ldr	r1, [pc, #92]	; (80088b8 <HAL_DMA_DeInit+0x120>)
 800885c:	4013      	ands	r3, r2
 800885e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	40020407 	.word	0x40020407
 80088a0:	bffdfff8 	.word	0xbffdfff8
 80088a4:	cccccccd 	.word	0xcccccccd
 80088a8:	40020000 	.word	0x40020000
 80088ac:	bffdfbf8 	.word	0xbffdfbf8
 80088b0:	40020400 	.word	0x40020400
 80088b4:	400200a8 	.word	0x400200a8
 80088b8:	400204a8 	.word	0x400204a8

080088bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_DMA_Start_IT+0x20>
 80088d8:	2302      	movs	r3, #2
 80088da:	e04b      	b.n	8008974 <HAL_DMA_Start_IT+0xb8>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d13a      	bne.n	8008966 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0201 	bic.w	r2, r2, #1
 800890c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	68b9      	ldr	r1, [r7, #8]
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 f96b 	bl	8008bf0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	2b00      	cmp	r3, #0
 8008920:	d008      	beq.n	8008934 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 020e 	orr.w	r2, r2, #14
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	e00f      	b.n	8008954 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0204 	bic.w	r2, r2, #4
 8008942:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 020a 	orr.w	r2, r2, #10
 8008952:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0201 	orr.w	r2, r2, #1
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	e005      	b.n	8008972 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800896e:	2302      	movs	r3, #2
 8008970:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b02      	cmp	r3, #2
 8008992:	d008      	beq.n	80089a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2204      	movs	r2, #4
 8008998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e022      	b.n	80089ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 020e 	bic.w	r2, r2, #14
 80089b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 0201 	bic.w	r2, r2, #1
 80089c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ca:	f003 021c 	and.w	r2, r3, #28
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d2:	2101      	movs	r1, #1
 80089d4:	fa01 f202 	lsl.w	r2, r1, r2
 80089d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d005      	beq.n	8008a1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2204      	movs	r2, #4
 8008a14:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	73fb      	strb	r3, [r7, #15]
 8008a1a:	e029      	b.n	8008a70 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 020e 	bic.w	r2, r2, #14
 8008a2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0201 	bic.w	r2, r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a40:	f003 021c 	and.w	r2, r3, #28
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a48:	2101      	movs	r1, #1
 8008a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a4e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	4798      	blx	r3
    }
  }
  return status;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a96:	f003 031c 	and.w	r3, r3, #28
 8008a9a:	2204      	movs	r2, #4
 8008a9c:	409a      	lsls	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d026      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x7a>
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d021      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d107      	bne.n	8008ace <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f022 0204 	bic.w	r2, r2, #4
 8008acc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad2:	f003 021c 	and.w	r2, r3, #28
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ada:	2104      	movs	r1, #4
 8008adc:	fa01 f202 	lsl.w	r2, r1, r2
 8008ae0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d071      	beq.n	8008bce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008af2:	e06c      	b.n	8008bce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af8:	f003 031c 	and.w	r3, r3, #28
 8008afc:	2202      	movs	r2, #2
 8008afe:	409a      	lsls	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4013      	ands	r3, r2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d02e      	beq.n	8008b66 <HAL_DMA_IRQHandler+0xec>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d029      	beq.n	8008b66 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10b      	bne.n	8008b38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 020a 	bic.w	r2, r2, #10
 8008b2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3c:	f003 021c 	and.w	r2, r3, #28
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b44:	2102      	movs	r1, #2
 8008b46:	fa01 f202 	lsl.w	r2, r1, r2
 8008b4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d038      	beq.n	8008bce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008b64:	e033      	b.n	8008bce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6a:	f003 031c 	and.w	r3, r3, #28
 8008b6e:	2208      	movs	r2, #8
 8008b70:	409a      	lsls	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4013      	ands	r3, r2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d02a      	beq.n	8008bd0 <HAL_DMA_IRQHandler+0x156>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d025      	beq.n	8008bd0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 020e 	bic.w	r2, r2, #14
 8008b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b98:	f003 021c 	and.w	r2, r3, #28
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8008ba6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
}
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c02:	f003 021c 	and.w	r2, r3, #28
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8008c10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	2b10      	cmp	r3, #16
 8008c20:	d108      	bne.n	8008c34 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008c32:	e007      	b.n	8008c44 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	60da      	str	r2, [r3, #12]
}
 8008c44:	bf00      	nop
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c5e:	e148      	b.n	8008ef2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	2101      	movs	r1, #1
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 813a 	beq.w	8008eec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f003 0303 	and.w	r3, r3, #3
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d005      	beq.n	8008c90 <HAL_GPIO_Init+0x40>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f003 0303 	and.w	r3, r3, #3
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d130      	bne.n	8008cf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	43db      	mvns	r3, r3
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	091b      	lsrs	r3, r3, #4
 8008cdc:	f003 0201 	and.w	r2, r3, #1
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d017      	beq.n	8008d2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	2203      	movs	r2, #3
 8008d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0e:	43db      	mvns	r3, r3
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	4013      	ands	r3, r2
 8008d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	005b      	lsls	r3, r3, #1
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d123      	bne.n	8008d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	08da      	lsrs	r2, r3, #3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3208      	adds	r2, #8
 8008d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	220f      	movs	r2, #15
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	43db      	mvns	r3, r3
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	691a      	ldr	r2, [r3, #16]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f003 0307 	and.w	r3, r3, #7
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	08da      	lsrs	r2, r3, #3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3208      	adds	r2, #8
 8008d7c:	6939      	ldr	r1, [r7, #16]
 8008d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	2203      	movs	r2, #3
 8008d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d92:	43db      	mvns	r3, r3
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	4013      	ands	r3, r2
 8008d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f003 0203 	and.w	r2, r3, #3
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	fa02 f303 	lsl.w	r3, r2, r3
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 8094 	beq.w	8008eec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dc4:	4b52      	ldr	r3, [pc, #328]	; (8008f10 <HAL_GPIO_Init+0x2c0>)
 8008dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc8:	4a51      	ldr	r2, [pc, #324]	; (8008f10 <HAL_GPIO_Init+0x2c0>)
 8008dca:	f043 0301 	orr.w	r3, r3, #1
 8008dce:	6613      	str	r3, [r2, #96]	; 0x60
 8008dd0:	4b4f      	ldr	r3, [pc, #316]	; (8008f10 <HAL_GPIO_Init+0x2c0>)
 8008dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008ddc:	4a4d      	ldr	r2, [pc, #308]	; (8008f14 <HAL_GPIO_Init+0x2c4>)
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	089b      	lsrs	r3, r3, #2
 8008de2:	3302      	adds	r3, #2
 8008de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f003 0303 	and.w	r3, r3, #3
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	220f      	movs	r2, #15
 8008df4:	fa02 f303 	lsl.w	r3, r2, r3
 8008df8:	43db      	mvns	r3, r3
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008e06:	d00d      	beq.n	8008e24 <HAL_GPIO_Init+0x1d4>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a43      	ldr	r2, [pc, #268]	; (8008f18 <HAL_GPIO_Init+0x2c8>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d007      	beq.n	8008e20 <HAL_GPIO_Init+0x1d0>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a42      	ldr	r2, [pc, #264]	; (8008f1c <HAL_GPIO_Init+0x2cc>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d101      	bne.n	8008e1c <HAL_GPIO_Init+0x1cc>
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e004      	b.n	8008e26 <HAL_GPIO_Init+0x1d6>
 8008e1c:	2307      	movs	r3, #7
 8008e1e:	e002      	b.n	8008e26 <HAL_GPIO_Init+0x1d6>
 8008e20:	2301      	movs	r3, #1
 8008e22:	e000      	b.n	8008e26 <HAL_GPIO_Init+0x1d6>
 8008e24:	2300      	movs	r3, #0
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	f002 0203 	and.w	r2, r2, #3
 8008e2c:	0092      	lsls	r2, r2, #2
 8008e2e:	4093      	lsls	r3, r2
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008e36:	4937      	ldr	r1, [pc, #220]	; (8008f14 <HAL_GPIO_Init+0x2c4>)
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	089b      	lsrs	r3, r3, #2
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e44:	4b36      	ldr	r3, [pc, #216]	; (8008f20 <HAL_GPIO_Init+0x2d0>)
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	4013      	ands	r3, r2
 8008e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008e68:	4a2d      	ldr	r2, [pc, #180]	; (8008f20 <HAL_GPIO_Init+0x2d0>)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008e6e:	4b2c      	ldr	r3, [pc, #176]	; (8008f20 <HAL_GPIO_Init+0x2d0>)
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	43db      	mvns	r3, r3
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008e92:	4a23      	ldr	r2, [pc, #140]	; (8008f20 <HAL_GPIO_Init+0x2d0>)
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008e98:	4b21      	ldr	r3, [pc, #132]	; (8008f20 <HAL_GPIO_Init+0x2d0>)
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008ebc:	4a18      	ldr	r2, [pc, #96]	; (8008f20 <HAL_GPIO_Init+0x2d0>)
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008ec2:	4b17      	ldr	r3, [pc, #92]	; (8008f20 <HAL_GPIO_Init+0x2d0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	43db      	mvns	r3, r3
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008ee6:	4a0e      	ldr	r2, [pc, #56]	; (8008f20 <HAL_GPIO_Init+0x2d0>)
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f47f aeaf 	bne.w	8008c60 <HAL_GPIO_Init+0x10>
  }
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	371c      	adds	r7, #28
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	40021000 	.word	0x40021000
 8008f14:	40010000 	.word	0x40010000
 8008f18:	48000400 	.word	0x48000400
 8008f1c:	48000800 	.word	0x48000800
 8008f20:	40010400 	.word	0x40010400

08008f24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008f32:	e0ab      	b.n	800908c <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008f34:	2201      	movs	r2, #1
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	4013      	ands	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 809e 	beq.w	8009086 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008f4a:	4a57      	ldr	r2, [pc, #348]	; (80090a8 <HAL_GPIO_DeInit+0x184>)
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	089b      	lsrs	r3, r3, #2
 8008f50:	3302      	adds	r3, #2
 8008f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f56:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	220f      	movs	r2, #15
 8008f62:	fa02 f303 	lsl.w	r3, r2, r3
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008f72:	d00d      	beq.n	8008f90 <HAL_GPIO_DeInit+0x6c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a4d      	ldr	r2, [pc, #308]	; (80090ac <HAL_GPIO_DeInit+0x188>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d007      	beq.n	8008f8c <HAL_GPIO_DeInit+0x68>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a4c      	ldr	r2, [pc, #304]	; (80090b0 <HAL_GPIO_DeInit+0x18c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d101      	bne.n	8008f88 <HAL_GPIO_DeInit+0x64>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e004      	b.n	8008f92 <HAL_GPIO_DeInit+0x6e>
 8008f88:	2307      	movs	r3, #7
 8008f8a:	e002      	b.n	8008f92 <HAL_GPIO_DeInit+0x6e>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e000      	b.n	8008f92 <HAL_GPIO_DeInit+0x6e>
 8008f90:	2300      	movs	r3, #0
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	f002 0203 	and.w	r2, r2, #3
 8008f98:	0092      	lsls	r2, r2, #2
 8008f9a:	4093      	lsls	r3, r2
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d132      	bne.n	8009008 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008fa2:	4b44      	ldr	r3, [pc, #272]	; (80090b4 <HAL_GPIO_DeInit+0x190>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	43db      	mvns	r3, r3
 8008faa:	4942      	ldr	r1, [pc, #264]	; (80090b4 <HAL_GPIO_DeInit+0x190>)
 8008fac:	4013      	ands	r3, r2
 8008fae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008fb0:	4b40      	ldr	r3, [pc, #256]	; (80090b4 <HAL_GPIO_DeInit+0x190>)
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	43db      	mvns	r3, r3
 8008fb8:	493e      	ldr	r1, [pc, #248]	; (80090b4 <HAL_GPIO_DeInit+0x190>)
 8008fba:	4013      	ands	r3, r2
 8008fbc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008fbe:	4b3d      	ldr	r3, [pc, #244]	; (80090b4 <HAL_GPIO_DeInit+0x190>)
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	43db      	mvns	r3, r3
 8008fc6:	493b      	ldr	r1, [pc, #236]	; (80090b4 <HAL_GPIO_DeInit+0x190>)
 8008fc8:	4013      	ands	r3, r2
 8008fca:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8008fcc:	4b39      	ldr	r3, [pc, #228]	; (80090b4 <HAL_GPIO_DeInit+0x190>)
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	4937      	ldr	r1, [pc, #220]	; (80090b4 <HAL_GPIO_DeInit+0x190>)
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	220f      	movs	r2, #15
 8008fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008fea:	4a2f      	ldr	r2, [pc, #188]	; (80090a8 <HAL_GPIO_DeInit+0x184>)
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	089b      	lsrs	r3, r3, #2
 8008ff0:	3302      	adds	r3, #2
 8008ff2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	43da      	mvns	r2, r3
 8008ffa:	482b      	ldr	r0, [pc, #172]	; (80090a8 <HAL_GPIO_DeInit+0x184>)
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	089b      	lsrs	r3, r3, #2
 8009000:	400a      	ands	r2, r1
 8009002:	3302      	adds	r3, #2
 8009004:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	2103      	movs	r1, #3
 8009012:	fa01 f303 	lsl.w	r3, r1, r3
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	08da      	lsrs	r2, r3, #3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3208      	adds	r2, #8
 8009024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f003 0307 	and.w	r3, r3, #7
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	220f      	movs	r2, #15
 8009032:	fa02 f303 	lsl.w	r3, r2, r3
 8009036:	43db      	mvns	r3, r3
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	08d2      	lsrs	r2, r2, #3
 800903c:	4019      	ands	r1, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3208      	adds	r2, #8
 8009042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689a      	ldr	r2, [r3, #8]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	2103      	movs	r1, #3
 8009050:	fa01 f303 	lsl.w	r3, r1, r3
 8009054:	43db      	mvns	r3, r3
 8009056:	401a      	ands	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	2101      	movs	r1, #1
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	fa01 f303 	lsl.w	r3, r1, r3
 8009068:	43db      	mvns	r3, r3
 800906a:	401a      	ands	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	2103      	movs	r1, #3
 800907a:	fa01 f303 	lsl.w	r3, r1, r3
 800907e:	43db      	mvns	r3, r3
 8009080:	401a      	ands	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	3301      	adds	r3, #1
 800908a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	fa22 f303 	lsr.w	r3, r2, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	f47f af4d 	bne.w	8008f34 <HAL_GPIO_DeInit+0x10>
  }
}
 800909a:	bf00      	nop
 800909c:	bf00      	nop
 800909e:	371c      	adds	r7, #28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	40010000 	.word	0x40010000
 80090ac:	48000400 	.word	0x48000400
 80090b0:	48000800 	.word	0x48000800
 80090b4:	40010400 	.word	0x40010400

080090b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691a      	ldr	r2, [r3, #16]
 80090c8:	887b      	ldrh	r3, [r7, #2]
 80090ca:	4013      	ands	r3, r2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80090d0:	2301      	movs	r3, #1
 80090d2:	73fb      	strb	r3, [r7, #15]
 80090d4:	e001      	b.n	80090da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80090d6:	2300      	movs	r3, #0
 80090d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090da:	7bfb      	ldrb	r3, [r7, #15]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	807b      	strh	r3, [r7, #2]
 80090f4:	4613      	mov	r3, r2
 80090f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80090f8:	787b      	ldrb	r3, [r7, #1]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80090fe:	887a      	ldrh	r2, [r7, #2]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009104:	e002      	b.n	800910c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009106:	887a      	ldrh	r2, [r7, #2]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009122:	4b08      	ldr	r3, [pc, #32]	; (8009144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009124:	695a      	ldr	r2, [r3, #20]
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	4013      	ands	r3, r2
 800912a:	2b00      	cmp	r3, #0
 800912c:	d006      	beq.n	800913c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800912e:	4a05      	ldr	r2, [pc, #20]	; (8009144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009130:	88fb      	ldrh	r3, [r7, #6]
 8009132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	4618      	mov	r0, r3
 8009138:	f7f8 fd2e 	bl	8001b98 <HAL_GPIO_EXTI_Callback>
  }
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	40010400 	.word	0x40010400

08009148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e08d      	b.n	8009276 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d106      	bne.n	8009174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7f8 fc18 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2224      	movs	r2, #36	; 0x24
 8009178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0201 	bic.w	r2, r2, #1
 800918a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009198:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d107      	bne.n	80091c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	689a      	ldr	r2, [r3, #8]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091be:	609a      	str	r2, [r3, #8]
 80091c0:	e006      	b.n	80091d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689a      	ldr	r2, [r3, #8]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80091ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d108      	bne.n	80091ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091e6:	605a      	str	r2, [r3, #4]
 80091e8:	e007      	b.n	80091fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	6812      	ldr	r2, [r2, #0]
 8009204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68da      	ldr	r2, [r3, #12]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800921c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691a      	ldr	r2, [r3, #16]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	430a      	orrs	r2, r1
 8009236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	69d9      	ldr	r1, [r3, #28]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a1a      	ldr	r2, [r3, #32]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2220      	movs	r2, #32
 8009262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e021      	b.n	80092d4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2224      	movs	r2, #36	; 0x24
 8009294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0201 	bic.w	r2, r2, #1
 80092a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7f8 fc39 	bl	8001b20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af02      	add	r7, sp, #8
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	4608      	mov	r0, r1
 80092e6:	4611      	mov	r1, r2
 80092e8:	461a      	mov	r2, r3
 80092ea:	4603      	mov	r3, r0
 80092ec:	817b      	strh	r3, [r7, #10]
 80092ee:	460b      	mov	r3, r1
 80092f0:	813b      	strh	r3, [r7, #8]
 80092f2:	4613      	mov	r3, r2
 80092f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b20      	cmp	r3, #32
 8009300:	f040 80f9 	bne.w	80094f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <HAL_I2C_Mem_Write+0x34>
 800930a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	d105      	bne.n	800931c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009316:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e0ed      	b.n	80094f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <HAL_I2C_Mem_Write+0x4e>
 8009326:	2302      	movs	r3, #2
 8009328:	e0e6      	b.n	80094f8 <HAL_I2C_Mem_Write+0x21c>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009332:	f7fd fd65 	bl	8006e00 <HAL_GetTick>
 8009336:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	2319      	movs	r3, #25
 800933e:	2201      	movs	r2, #1
 8009340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fac3 	bl	80098d0 <I2C_WaitOnFlagUntilTimeout>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e0d1      	b.n	80094f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2221      	movs	r2, #33	; 0x21
 8009358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2240      	movs	r2, #64	; 0x40
 8009360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a3a      	ldr	r2, [r7, #32]
 800936e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800937c:	88f8      	ldrh	r0, [r7, #6]
 800937e:	893a      	ldrh	r2, [r7, #8]
 8009380:	8979      	ldrh	r1, [r7, #10]
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	4603      	mov	r3, r0
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 f9d3 	bl	8009738 <I2C_RequestMemoryWrite>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e0a9      	b.n	80094f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	2bff      	cmp	r3, #255	; 0xff
 80093ac:	d90e      	bls.n	80093cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	22ff      	movs	r2, #255	; 0xff
 80093b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	8979      	ldrh	r1, [r7, #10]
 80093bc:	2300      	movs	r3, #0
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 fc3d 	bl	8009c44 <I2C_TransferConfig>
 80093ca:	e00f      	b.n	80093ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	8979      	ldrh	r1, [r7, #10]
 80093de:	2300      	movs	r3, #0
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 fc2c 	bl	8009c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fabc 	bl	800996e <I2C_WaitOnTXISFlagUntilTimeout>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e07b      	b.n	80094f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	781a      	ldrb	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800941a:	b29b      	uxth	r3, r3
 800941c:	3b01      	subs	r3, #1
 800941e:	b29a      	uxth	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009428:	3b01      	subs	r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009434:	b29b      	uxth	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d034      	beq.n	80094a4 <HAL_I2C_Mem_Write+0x1c8>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800943e:	2b00      	cmp	r3, #0
 8009440:	d130      	bne.n	80094a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	2200      	movs	r2, #0
 800944a:	2180      	movs	r1, #128	; 0x80
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 fa3f 	bl	80098d0 <I2C_WaitOnFlagUntilTimeout>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e04d      	b.n	80094f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009460:	b29b      	uxth	r3, r3
 8009462:	2bff      	cmp	r3, #255	; 0xff
 8009464:	d90e      	bls.n	8009484 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	22ff      	movs	r2, #255	; 0xff
 800946a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009470:	b2da      	uxtb	r2, r3
 8009472:	8979      	ldrh	r1, [r7, #10]
 8009474:	2300      	movs	r3, #0
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 fbe1 	bl	8009c44 <I2C_TransferConfig>
 8009482:	e00f      	b.n	80094a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009488:	b29a      	uxth	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009492:	b2da      	uxtb	r2, r3
 8009494:	8979      	ldrh	r1, [r7, #10]
 8009496:	2300      	movs	r3, #0
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 fbd0 	bl	8009c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d19e      	bne.n	80093ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 faa2 	bl	80099fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e01a      	b.n	80094f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2220      	movs	r2, #32
 80094c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6859      	ldr	r1, [r3, #4]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <HAL_I2C_Mem_Write+0x224>)
 80094d6:	400b      	ands	r3, r1
 80094d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2220      	movs	r2, #32
 80094de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	e000      	b.n	80094f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80094f6:	2302      	movs	r3, #2
  }
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	fe00e800 	.word	0xfe00e800

08009504 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af02      	add	r7, sp, #8
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	4608      	mov	r0, r1
 800950e:	4611      	mov	r1, r2
 8009510:	461a      	mov	r2, r3
 8009512:	4603      	mov	r3, r0
 8009514:	817b      	strh	r3, [r7, #10]
 8009516:	460b      	mov	r3, r1
 8009518:	813b      	strh	r3, [r7, #8]
 800951a:	4613      	mov	r3, r2
 800951c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b20      	cmp	r3, #32
 8009528:	f040 80fd 	bne.w	8009726 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <HAL_I2C_Mem_Read+0x34>
 8009532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009534:	2b00      	cmp	r3, #0
 8009536:	d105      	bne.n	8009544 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800953e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e0f1      	b.n	8009728 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <HAL_I2C_Mem_Read+0x4e>
 800954e:	2302      	movs	r3, #2
 8009550:	e0ea      	b.n	8009728 <HAL_I2C_Mem_Read+0x224>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800955a:	f7fd fc51 	bl	8006e00 <HAL_GetTick>
 800955e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	2319      	movs	r3, #25
 8009566:	2201      	movs	r2, #1
 8009568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 f9af 	bl	80098d0 <I2C_WaitOnFlagUntilTimeout>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e0d5      	b.n	8009728 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2222      	movs	r2, #34	; 0x22
 8009580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2240      	movs	r2, #64	; 0x40
 8009588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a3a      	ldr	r2, [r7, #32]
 8009596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800959c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80095a4:	88f8      	ldrh	r0, [r7, #6]
 80095a6:	893a      	ldrh	r2, [r7, #8]
 80095a8:	8979      	ldrh	r1, [r7, #10]
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	4603      	mov	r3, r0
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 f913 	bl	80097e0 <I2C_RequestMemoryRead>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d005      	beq.n	80095cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e0ad      	b.n	8009728 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2bff      	cmp	r3, #255	; 0xff
 80095d4:	d90e      	bls.n	80095f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	22ff      	movs	r2, #255	; 0xff
 80095da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	8979      	ldrh	r1, [r7, #10]
 80095e4:	4b52      	ldr	r3, [pc, #328]	; (8009730 <HAL_I2C_Mem_Read+0x22c>)
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 fb29 	bl	8009c44 <I2C_TransferConfig>
 80095f2:	e00f      	b.n	8009614 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009602:	b2da      	uxtb	r2, r3
 8009604:	8979      	ldrh	r1, [r7, #10]
 8009606:	4b4a      	ldr	r3, [pc, #296]	; (8009730 <HAL_I2C_Mem_Read+0x22c>)
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 fb18 	bl	8009c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	2200      	movs	r2, #0
 800961c:	2104      	movs	r1, #4
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 f956 	bl	80098d0 <I2C_WaitOnFlagUntilTimeout>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e07c      	b.n	8009728 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	b2d2      	uxtb	r2, r2
 800963a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800964a:	3b01      	subs	r3, #1
 800964c:	b29a      	uxth	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009656:	b29b      	uxth	r3, r3
 8009658:	3b01      	subs	r3, #1
 800965a:	b29a      	uxth	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d034      	beq.n	80096d4 <HAL_I2C_Mem_Read+0x1d0>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800966e:	2b00      	cmp	r3, #0
 8009670:	d130      	bne.n	80096d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	2200      	movs	r2, #0
 800967a:	2180      	movs	r1, #128	; 0x80
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 f927 	bl	80098d0 <I2C_WaitOnFlagUntilTimeout>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e04d      	b.n	8009728 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009690:	b29b      	uxth	r3, r3
 8009692:	2bff      	cmp	r3, #255	; 0xff
 8009694:	d90e      	bls.n	80096b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	22ff      	movs	r2, #255	; 0xff
 800969a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	8979      	ldrh	r1, [r7, #10]
 80096a4:	2300      	movs	r3, #0
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 fac9 	bl	8009c44 <I2C_TransferConfig>
 80096b2:	e00f      	b.n	80096d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	8979      	ldrh	r1, [r7, #10]
 80096c6:	2300      	movs	r3, #0
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fab8 	bl	8009c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d8:	b29b      	uxth	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d19a      	bne.n	8009614 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 f98a 	bl	80099fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e01a      	b.n	8009728 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2220      	movs	r2, #32
 80096f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6859      	ldr	r1, [r3, #4]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <HAL_I2C_Mem_Read+0x230>)
 8009706:	400b      	ands	r3, r1
 8009708:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2220      	movs	r2, #32
 800970e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	e000      	b.n	8009728 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009726:	2302      	movs	r3, #2
  }
}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	80002400 	.word	0x80002400
 8009734:	fe00e800 	.word	0xfe00e800

08009738 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af02      	add	r7, sp, #8
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	461a      	mov	r2, r3
 8009746:	4603      	mov	r3, r0
 8009748:	817b      	strh	r3, [r7, #10]
 800974a:	460b      	mov	r3, r1
 800974c:	813b      	strh	r3, [r7, #8]
 800974e:	4613      	mov	r3, r2
 8009750:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009752:	88fb      	ldrh	r3, [r7, #6]
 8009754:	b2da      	uxtb	r2, r3
 8009756:	8979      	ldrh	r1, [r7, #10]
 8009758:	4b20      	ldr	r3, [pc, #128]	; (80097dc <I2C_RequestMemoryWrite+0xa4>)
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 fa6f 	bl	8009c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	69b9      	ldr	r1, [r7, #24]
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 f8ff 	bl	800996e <I2C_WaitOnTXISFlagUntilTimeout>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e02c      	b.n	80097d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800977a:	88fb      	ldrh	r3, [r7, #6]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d105      	bne.n	800978c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009780:	893b      	ldrh	r3, [r7, #8]
 8009782:	b2da      	uxtb	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	629a      	str	r2, [r3, #40]	; 0x28
 800978a:	e015      	b.n	80097b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800978c:	893b      	ldrh	r3, [r7, #8]
 800978e:	0a1b      	lsrs	r3, r3, #8
 8009790:	b29b      	uxth	r3, r3
 8009792:	b2da      	uxtb	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800979a:	69fa      	ldr	r2, [r7, #28]
 800979c:	69b9      	ldr	r1, [r7, #24]
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 f8e5 	bl	800996e <I2C_WaitOnTXISFlagUntilTimeout>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e012      	b.n	80097d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097ae:	893b      	ldrh	r3, [r7, #8]
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	2200      	movs	r2, #0
 80097c0:	2180      	movs	r1, #128	; 0x80
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 f884 	bl	80098d0 <I2C_WaitOnFlagUntilTimeout>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e000      	b.n	80097d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	80002000 	.word	0x80002000

080097e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	4608      	mov	r0, r1
 80097ea:	4611      	mov	r1, r2
 80097ec:	461a      	mov	r2, r3
 80097ee:	4603      	mov	r3, r0
 80097f0:	817b      	strh	r3, [r7, #10]
 80097f2:	460b      	mov	r3, r1
 80097f4:	813b      	strh	r3, [r7, #8]
 80097f6:	4613      	mov	r3, r2
 80097f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80097fa:	88fb      	ldrh	r3, [r7, #6]
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	8979      	ldrh	r1, [r7, #10]
 8009800:	4b20      	ldr	r3, [pc, #128]	; (8009884 <I2C_RequestMemoryRead+0xa4>)
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	2300      	movs	r3, #0
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 fa1c 	bl	8009c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800980c:	69fa      	ldr	r2, [r7, #28]
 800980e:	69b9      	ldr	r1, [r7, #24]
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f000 f8ac 	bl	800996e <I2C_WaitOnTXISFlagUntilTimeout>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e02c      	b.n	800987a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009820:	88fb      	ldrh	r3, [r7, #6]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d105      	bne.n	8009832 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009826:	893b      	ldrh	r3, [r7, #8]
 8009828:	b2da      	uxtb	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	629a      	str	r2, [r3, #40]	; 0x28
 8009830:	e015      	b.n	800985e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009832:	893b      	ldrh	r3, [r7, #8]
 8009834:	0a1b      	lsrs	r3, r3, #8
 8009836:	b29b      	uxth	r3, r3
 8009838:	b2da      	uxtb	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	69b9      	ldr	r1, [r7, #24]
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 f892 	bl	800996e <I2C_WaitOnTXISFlagUntilTimeout>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e012      	b.n	800987a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009854:	893b      	ldrh	r3, [r7, #8]
 8009856:	b2da      	uxtb	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	2200      	movs	r2, #0
 8009866:	2140      	movs	r1, #64	; 0x40
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f831 	bl	80098d0 <I2C_WaitOnFlagUntilTimeout>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e000      	b.n	800987a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	80002000 	.word	0x80002000

08009888 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b02      	cmp	r3, #2
 800989c:	d103      	bne.n	80098a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2200      	movs	r2, #0
 80098a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d007      	beq.n	80098c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699a      	ldr	r2, [r3, #24]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f042 0201 	orr.w	r2, r2, #1
 80098c2:	619a      	str	r2, [r3, #24]
  }
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	4613      	mov	r3, r2
 80098de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098e0:	e031      	b.n	8009946 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e8:	d02d      	beq.n	8009946 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ea:	f7fd fa89 	bl	8006e00 <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d302      	bcc.n	8009900 <I2C_WaitOnFlagUntilTimeout+0x30>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d122      	bne.n	8009946 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699a      	ldr	r2, [r3, #24]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	4013      	ands	r3, r2
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	429a      	cmp	r2, r3
 800990e:	bf0c      	ite	eq
 8009910:	2301      	moveq	r3, #1
 8009912:	2300      	movne	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	461a      	mov	r2, r3
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	429a      	cmp	r2, r3
 800991c:	d113      	bne.n	8009946 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009922:	f043 0220 	orr.w	r2, r3, #32
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2220      	movs	r2, #32
 800992e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e00f      	b.n	8009966 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	699a      	ldr	r2, [r3, #24]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4013      	ands	r3, r2
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	429a      	cmp	r2, r3
 8009954:	bf0c      	ite	eq
 8009956:	2301      	moveq	r3, #1
 8009958:	2300      	movne	r3, #0
 800995a:	b2db      	uxtb	r3, r3
 800995c:	461a      	mov	r2, r3
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	429a      	cmp	r2, r3
 8009962:	d0be      	beq.n	80098e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800997a:	e033      	b.n	80099e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	68b9      	ldr	r1, [r7, #8]
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 f87f 	bl	8009a84 <I2C_IsErrorOccurred>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e031      	b.n	80099f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009996:	d025      	beq.n	80099e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009998:	f7fd fa32 	bl	8006e00 <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d302      	bcc.n	80099ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d11a      	bne.n	80099e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d013      	beq.n	80099e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c0:	f043 0220 	orr.w	r2, r3, #32
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2220      	movs	r2, #32
 80099cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e007      	b.n	80099f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d1c4      	bne.n	800997c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a08:	e02f      	b.n	8009a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 f838 	bl	8009a84 <I2C_IsErrorOccurred>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e02d      	b.n	8009a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1e:	f7fd f9ef 	bl	8006e00 <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d302      	bcc.n	8009a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d11a      	bne.n	8009a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d013      	beq.n	8009a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a46:	f043 0220 	orr.w	r2, r3, #32
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e007      	b.n	8009a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d1c8      	bne.n	8009a0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
	...

08009a84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08a      	sub	sp, #40	; 0x28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	f003 0310 	and.w	r3, r3, #16
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d068      	beq.n	8009b82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2210      	movs	r2, #16
 8009ab6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ab8:	e049      	b.n	8009b4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac0:	d045      	beq.n	8009b4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ac2:	f7fd f99d 	bl	8006e00 <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d302      	bcc.n	8009ad8 <I2C_IsErrorOccurred+0x54>
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d13a      	bne.n	8009b4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ae2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009aea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009afa:	d121      	bne.n	8009b40 <I2C_IsErrorOccurred+0xbc>
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b02:	d01d      	beq.n	8009b40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009b04:	7cfb      	ldrb	r3, [r7, #19]
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d01a      	beq.n	8009b40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b1a:	f7fd f971 	bl	8006e00 <HAL_GetTick>
 8009b1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b20:	e00e      	b.n	8009b40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b22:	f7fd f96d 	bl	8006e00 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b19      	cmp	r3, #25
 8009b2e:	d907      	bls.n	8009b40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	f043 0320 	orr.w	r3, r3, #32
 8009b36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009b3e:	e006      	b.n	8009b4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	f003 0320 	and.w	r3, r3, #32
 8009b4a:	2b20      	cmp	r3, #32
 8009b4c:	d1e9      	bne.n	8009b22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b20      	cmp	r3, #32
 8009b5a:	d003      	beq.n	8009b64 <I2C_IsErrorOccurred+0xe0>
 8009b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0aa      	beq.n	8009aba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d103      	bne.n	8009b74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2220      	movs	r2, #32
 8009b72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	f043 0304 	orr.w	r3, r3, #4
 8009b7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00b      	beq.n	8009bac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	f043 0301 	orr.w	r3, r3, #1
 8009b9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00b      	beq.n	8009bce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	f043 0308 	orr.w	r3, r3, #8
 8009bbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00b      	beq.n	8009bf0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	f043 0302 	orr.w	r3, r3, #2
 8009bde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d01c      	beq.n	8009c32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f7ff fe45 	bl	8009888 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6859      	ldr	r1, [r3, #4]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	4b0d      	ldr	r3, [pc, #52]	; (8009c40 <I2C_IsErrorOccurred+0x1bc>)
 8009c0a:	400b      	ands	r3, r1
 8009c0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	431a      	orrs	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3728      	adds	r7, #40	; 0x28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	fe00e800 	.word	0xfe00e800

08009c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	607b      	str	r3, [r7, #4]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	817b      	strh	r3, [r7, #10]
 8009c52:	4613      	mov	r3, r2
 8009c54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c56:	897b      	ldrh	r3, [r7, #10]
 8009c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c5c:	7a7b      	ldrb	r3, [r7, #9]
 8009c5e:	041b      	lsls	r3, r3, #16
 8009c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	0d5b      	lsrs	r3, r3, #21
 8009c7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c82:	4b08      	ldr	r3, [pc, #32]	; (8009ca4 <I2C_TransferConfig+0x60>)
 8009c84:	430b      	orrs	r3, r1
 8009c86:	43db      	mvns	r3, r3
 8009c88:	ea02 0103 	and.w	r1, r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	697a      	ldr	r2, [r7, #20]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c96:	bf00      	nop
 8009c98:	371c      	adds	r7, #28
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	03ff63ff 	.word	0x03ff63ff

08009ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d138      	bne.n	8009d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d101      	bne.n	8009ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e032      	b.n	8009d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2224      	movs	r2, #36	; 0x24
 8009cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f022 0201 	bic.w	r2, r2, #1
 8009cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6819      	ldr	r1, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f042 0201 	orr.w	r2, r2, #1
 8009d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e000      	b.n	8009d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d30:	2302      	movs	r3, #2
  }
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d139      	bne.n	8009dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d101      	bne.n	8009d62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d5e:	2302      	movs	r3, #2
 8009d60:	e033      	b.n	8009dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2224      	movs	r2, #36	; 0x24
 8009d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0201 	bic.w	r2, r2, #1
 8009d80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	021b      	lsls	r3, r3, #8
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f042 0201 	orr.w	r2, r2, #1
 8009db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	e000      	b.n	8009dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009dc8:	2302      	movs	r3, #2
  }
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
	...

08009dd8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009de0:	4b0b      	ldr	r3, [pc, #44]	; (8009e10 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009de4:	4a0a      	ldr	r2, [pc, #40]	; (8009e10 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009de6:	f043 0301 	orr.w	r3, r3, #1
 8009dea:	6613      	str	r3, [r2, #96]	; 0x60
 8009dec:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009df0:	f003 0301 	and.w	r3, r3, #1
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009df8:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	4905      	ldr	r1, [pc, #20]	; (8009e14 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	604b      	str	r3, [r1, #4]
}
 8009e04:	bf00      	nop
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	40021000 	.word	0x40021000
 8009e14:	40010000 	.word	0x40010000

08009e18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e1a:	b08b      	sub	sp, #44	; 0x2c
 8009e1c:	af06      	add	r7, sp, #24
 8009e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e0f8      	b.n	800a01c <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d106      	bne.n	8009e44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f00b faba 	bl	80153b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2203      	movs	r2, #3
 8009e48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f006 f843 	bl	800fedc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	603b      	str	r3, [r7, #0]
 8009e5c:	687e      	ldr	r6, [r7, #4]
 8009e5e:	466d      	mov	r5, sp
 8009e60:	f106 0410 	add.w	r4, r6, #16
 8009e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	1d33      	adds	r3, r6, #4
 8009e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e70:	6838      	ldr	r0, [r7, #0]
 8009e72:	f006 f80b 	bl	800fe8c <USB_CoreInit>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d005      	beq.n	8009e88 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e0c9      	b.n	800a01c <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f006 f83f 	bl	800ff12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e94:	2300      	movs	r3, #0
 8009e96:	73fb      	strb	r3, [r7, #15]
 8009e98:	e040      	b.n	8009f1c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	440b      	add	r3, r1
 8009eaa:	3301      	adds	r3, #1
 8009eac:	2201      	movs	r2, #1
 8009eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	00db      	lsls	r3, r3, #3
 8009ebe:	440b      	add	r3, r1
 8009ec0:	7bfa      	ldrb	r2, [r7, #15]
 8009ec2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	4613      	mov	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	440b      	add	r3, r1
 8009ed4:	3303      	adds	r3, #3
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009eda:	7bfa      	ldrb	r2, [r7, #15]
 8009edc:	6879      	ldr	r1, [r7, #4]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	00db      	lsls	r3, r3, #3
 8009ee6:	440b      	add	r3, r1
 8009ee8:	3338      	adds	r3, #56	; 0x38
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009eee:	7bfa      	ldrb	r2, [r7, #15]
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	440b      	add	r3, r1
 8009efc:	333c      	adds	r3, #60	; 0x3c
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f02:	7bfa      	ldrb	r2, [r7, #15]
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	4613      	mov	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	440b      	add	r3, r1
 8009f10:	3340      	adds	r3, #64	; 0x40
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	73fb      	strb	r3, [r7, #15]
 8009f1c:	7bfa      	ldrb	r2, [r7, #15]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d3b9      	bcc.n	8009e9a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
 8009f2a:	e044      	b.n	8009fb6 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f2c:	7bfa      	ldrb	r2, [r7, #15]
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	00db      	lsls	r3, r3, #3
 8009f38:	440b      	add	r3, r1
 8009f3a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8009f3e:	2200      	movs	r2, #0
 8009f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f42:	7bfa      	ldrb	r2, [r7, #15]
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	4613      	mov	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	00db      	lsls	r3, r3, #3
 8009f4e:	440b      	add	r3, r1
 8009f50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009f54:	7bfa      	ldrb	r2, [r7, #15]
 8009f56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f58:	7bfa      	ldrb	r2, [r7, #15]
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	440b      	add	r3, r1
 8009f66:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f6e:	7bfa      	ldrb	r2, [r7, #15]
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	440b      	add	r3, r1
 8009f7c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f84:	7bfa      	ldrb	r2, [r7, #15]
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	00db      	lsls	r3, r3, #3
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009f96:	2200      	movs	r2, #0
 8009f98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009f9a:	7bfa      	ldrb	r2, [r7, #15]
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	00db      	lsls	r3, r3, #3
 8009fa6:	440b      	add	r3, r1
 8009fa8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	73fb      	strb	r3, [r7, #15]
 8009fb6:	7bfa      	ldrb	r2, [r7, #15]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d3b5      	bcc.n	8009f2c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	603b      	str	r3, [r7, #0]
 8009fc6:	687e      	ldr	r6, [r7, #4]
 8009fc8:	466d      	mov	r5, sp
 8009fca:	f106 0410 	add.w	r4, r6, #16
 8009fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	602b      	str	r3, [r5, #0]
 8009fd6:	1d33      	adds	r3, r6, #4
 8009fd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009fda:	6838      	ldr	r0, [r7, #0]
 8009fdc:	f005 ffa6 	bl	800ff2c <USB_DevInit>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d005      	beq.n	8009ff2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e014      	b.n	800a01c <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d102      	bne.n	800a010 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f001 fc58 	bl	800b8c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4618      	mov	r0, r3
 800a016:	f008 fa37 	bl	8012488 <USB_DevDisconnect>

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a024 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <HAL_PCD_Start+0x16>
 800a036:	2302      	movs	r3, #2
 800a038:	e012      	b.n	800a060 <HAL_PCD_Start+0x3c>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4618      	mov	r0, r3
 800a048:	f005 ff31 	bl	800feae <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4618      	mov	r0, r3
 800a052:	f008 fa02 	bl	801245a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4618      	mov	r0, r3
 800a076:	f008 fa1c 	bl	80124b2 <USB_ReadInterrupts>
 800a07a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fb13 	bl	800a6b2 <PCD_EP_ISR_Handler>

    return;
 800a08c:	e110      	b.n	800a2b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a094:	2b00      	cmp	r3, #0
 800a096:	d013      	beq.n	800a0c0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0aa:	b292      	uxth	r2, r2
 800a0ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f00b f9fc 	bl	80154ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f8fc 	bl	800a2b6 <HAL_PCD_SetAddress>

    return;
 800a0be:	e0f7      	b.n	800a2b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00c      	beq.n	800a0e4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a0dc:	b292      	uxth	r2, r2
 800a0de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a0e2:	e0e5      	b.n	800a2b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00c      	beq.n	800a108 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a100:	b292      	uxth	r2, r2
 800a102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a106:	e0d3      	b.n	800a2b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d034      	beq.n	800a17c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0204 	bic.w	r2, r2, #4
 800a124:	b292      	uxth	r2, r2
 800a126:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a132:	b29a      	uxth	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f022 0208 	bic.w	r2, r2, #8
 800a13c:	b292      	uxth	r2, r2
 800a13e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d107      	bne.n	800a15c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a154:	2100      	movs	r1, #0
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f00b fc5a 	bl	8015a10 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f00b f9df 	bl	8015520 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a174:	b292      	uxth	r2, r2
 800a176:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a17a:	e099      	b.n	800a2b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a182:	2b00      	cmp	r3, #0
 800a184:	d027      	beq.n	800a1d6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a18e:	b29a      	uxth	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f042 0208 	orr.w	r2, r2, #8
 800a198:	b292      	uxth	r2, r2
 800a19a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1b0:	b292      	uxth	r2, r2
 800a1b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f042 0204 	orr.w	r2, r2, #4
 800a1c8:	b292      	uxth	r2, r2
 800a1ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f00b f98c 	bl	80154ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a1d4:	e06c      	b.n	800a2b0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d040      	beq.n	800a262 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1f2:	b292      	uxth	r2, r2
 800a1f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d12b      	bne.n	800a25a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f042 0204 	orr.w	r2, r2, #4
 800a214:	b292      	uxth	r2, r2
 800a216:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a222:	b29a      	uxth	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f042 0208 	orr.w	r2, r2, #8
 800a22c:	b292      	uxth	r2, r2
 800a22e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a242:	b29b      	uxth	r3, r3
 800a244:	089b      	lsrs	r3, r3, #2
 800a246:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a250:	2101      	movs	r1, #1
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f00b fbdc 	bl	8015a10 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a258:	e02a      	b.n	800a2b0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f00b f946 	bl	80154ec <HAL_PCD_SuspendCallback>
    return;
 800a260:	e026      	b.n	800a2b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00f      	beq.n	800a28c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a274:	b29a      	uxth	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a27e:	b292      	uxth	r2, r2
 800a280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f00b f904 	bl	8015492 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a28a:	e011      	b.n	800a2b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00c      	beq.n	800a2b0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2a8:	b292      	uxth	r2, r2
 800a2aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a2ae:	bf00      	nop
  }
}
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d101      	bne.n	800a2d0 <HAL_PCD_SetAddress+0x1a>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e013      	b.n	800a2f8 <HAL_PCD_SetAddress+0x42>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	78fa      	ldrb	r2, [r7, #3]
 800a2dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	78fa      	ldrb	r2, [r7, #3]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f008 f8a2 	bl	8012432 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	4608      	mov	r0, r1
 800a30a:	4611      	mov	r1, r2
 800a30c:	461a      	mov	r2, r3
 800a30e:	4603      	mov	r3, r0
 800a310:	70fb      	strb	r3, [r7, #3]
 800a312:	460b      	mov	r3, r1
 800a314:	803b      	strh	r3, [r7, #0]
 800a316:	4613      	mov	r3, r2
 800a318:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a31e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a322:	2b00      	cmp	r3, #0
 800a324:	da0e      	bge.n	800a344 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a326:	78fb      	ldrb	r3, [r7, #3]
 800a328:	f003 0307 	and.w	r3, r3, #7
 800a32c:	1c5a      	adds	r2, r3, #1
 800a32e:	4613      	mov	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	00db      	lsls	r3, r3, #3
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	4413      	add	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2201      	movs	r2, #1
 800a340:	705a      	strb	r2, [r3, #1]
 800a342:	e00e      	b.n	800a362 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	f003 0207 	and.w	r2, r3, #7
 800a34a:	4613      	mov	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	4413      	add	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a362:	78fb      	ldrb	r3, [r7, #3]
 800a364:	f003 0307 	and.w	r3, r3, #7
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a36e:	883a      	ldrh	r2, [r7, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	78ba      	ldrb	r2, [r7, #2]
 800a378:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a37a:	78bb      	ldrb	r3, [r7, #2]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d102      	bne.n	800a386 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d101      	bne.n	800a394 <HAL_PCD_EP_Open+0x94>
 800a390:	2302      	movs	r3, #2
 800a392:	e00e      	b.n	800a3b2 <HAL_PCD_EP_Open+0xb2>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68f9      	ldr	r1, [r7, #12]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f005 fde4 	bl	800ff70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800a3b0:	7afb      	ldrb	r3, [r7, #11]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a3c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	da0e      	bge.n	800a3ec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3ce:	78fb      	ldrb	r3, [r7, #3]
 800a3d0:	f003 0307 	and.w	r3, r3, #7
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	705a      	strb	r2, [r3, #1]
 800a3ea:	e00e      	b.n	800a40a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3ec:	78fb      	ldrb	r3, [r7, #3]
 800a3ee:	f003 0207 	and.w	r2, r3, #7
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	4413      	add	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	f003 0307 	and.w	r3, r3, #7
 800a410:	b2da      	uxtb	r2, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d101      	bne.n	800a424 <HAL_PCD_EP_Close+0x6a>
 800a420:	2302      	movs	r3, #2
 800a422:	e00e      	b.n	800a442 <HAL_PCD_EP_Close+0x88>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68f9      	ldr	r1, [r7, #12]
 800a432:	4618      	mov	r0, r3
 800a434:	f006 f960 	bl	80106f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b086      	sub	sp, #24
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	603b      	str	r3, [r7, #0]
 800a456:	460b      	mov	r3, r1
 800a458:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a45a:	7afb      	ldrb	r3, [r7, #11]
 800a45c:	f003 0207 	and.w	r2, r3, #7
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	4413      	add	r3, r2
 800a470:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2200      	movs	r2, #0
 800a482:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	2200      	movs	r2, #0
 800a488:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a48a:	7afb      	ldrb	r3, [r7, #11]
 800a48c:	f003 0307 	and.w	r3, r3, #7
 800a490:	b2da      	uxtb	r2, r3
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6979      	ldr	r1, [r7, #20]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f006 fb18 	bl	8010ad2 <USB_EPStartXfer>

  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	f003 0207 	and.w	r2, r3, #7
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	00db      	lsls	r3, r3, #3
 800a4c8:	440b      	add	r3, r1
 800a4ca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a4ce:	681b      	ldr	r3, [r3, #0]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	607a      	str	r2, [r7, #4]
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2200      	movs	r2, #0
 800a520:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2201      	movs	r2, #1
 800a526:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a528:	7afb      	ldrb	r3, [r7, #11]
 800a52a:	f003 0307 	and.w	r3, r3, #7
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6979      	ldr	r1, [r7, #20]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f006 fac9 	bl	8010ad2 <USB_EPStartXfer>

  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3718      	adds	r7, #24
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a556:	78fb      	ldrb	r3, [r7, #3]
 800a558:	f003 0207 	and.w	r2, r3, #7
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	429a      	cmp	r2, r3
 800a562:	d901      	bls.n	800a568 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	e04c      	b.n	800a602 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	da0e      	bge.n	800a58e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	4613      	mov	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	4413      	add	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2201      	movs	r2, #1
 800a58a:	705a      	strb	r2, [r3, #1]
 800a58c:	e00c      	b.n	800a5a8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a58e:	78fa      	ldrb	r2, [r7, #3]
 800a590:	4613      	mov	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	4413      	add	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	f003 0307 	and.w	r3, r3, #7
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d101      	bne.n	800a5c8 <HAL_PCD_EP_SetStall+0x7e>
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	e01c      	b.n	800a602 <HAL_PCD_EP_SetStall+0xb8>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68f9      	ldr	r1, [r7, #12]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f007 fe2c 	bl	8012234 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5dc:	78fb      	ldrb	r3, [r7, #3]
 800a5de:	f003 0307 	and.w	r3, r3, #7
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d108      	bne.n	800a5f8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	f007 ff6d 	bl	80124d2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a616:	78fb      	ldrb	r3, [r7, #3]
 800a618:	f003 020f 	and.w	r2, r3, #15
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	429a      	cmp	r2, r3
 800a622:	d901      	bls.n	800a628 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e040      	b.n	800a6aa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	da0e      	bge.n	800a64e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a630:	78fb      	ldrb	r3, [r7, #3]
 800a632:	f003 0307 	and.w	r3, r3, #7
 800a636:	1c5a      	adds	r2, r3, #1
 800a638:	4613      	mov	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	4413      	add	r3, r2
 800a644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2201      	movs	r2, #1
 800a64a:	705a      	strb	r2, [r3, #1]
 800a64c:	e00e      	b.n	800a66c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	f003 0207 	and.w	r2, r3, #7
 800a654:	4613      	mov	r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	4413      	add	r3, r2
 800a664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a672:	78fb      	ldrb	r3, [r7, #3]
 800a674:	f003 0307 	and.w	r3, r3, #7
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a684:	2b01      	cmp	r3, #1
 800a686:	d101      	bne.n	800a68c <HAL_PCD_EP_ClrStall+0x82>
 800a688:	2302      	movs	r3, #2
 800a68a:	e00e      	b.n	800a6aa <HAL_PCD_EP_ClrStall+0xa0>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68f9      	ldr	r1, [r7, #12]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f007 fe1b 	bl	80122d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b096      	sub	sp, #88	; 0x58
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a6ba:	e3b1      	b.n	800ae20 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a6c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a6c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 030f 	and.w	r3, r3, #15
 800a6d2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800a6d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f040 8173 	bne.w	800a9c6 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a6e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a6e4:	f003 0310 	and.w	r3, r3, #16
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d150      	bne.n	800a78e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	881b      	ldrh	r3, [r3, #0]
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a6f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6fc:	81fb      	strh	r3, [r7, #14]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	89fb      	ldrh	r3, [r7, #14]
 800a704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3328      	adds	r3, #40	; 0x28
 800a714:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a71e:	b29b      	uxth	r3, r3
 800a720:	461a      	mov	r2, r3
 800a722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	00db      	lsls	r3, r3, #3
 800a728:	4413      	add	r3, r2
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	6812      	ldr	r2, [r2, #0]
 800a72e:	4413      	add	r3, r2
 800a730:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a73a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a73c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a740:	695a      	ldr	r2, [r3, #20]
 800a742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	441a      	add	r2, r3
 800a748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a74a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a74c:	2100      	movs	r1, #0
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f00a fe85 	bl	801545e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 835f 	beq.w	800ae20 <PCD_EP_ISR_Handler+0x76e>
 800a762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	2b00      	cmp	r3, #0
 800a768:	f040 835a 	bne.w	800ae20 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a772:	b2db      	uxtb	r3, r3
 800a774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	b292      	uxth	r2, r2
 800a780:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a78c:	e348      	b.n	800ae20 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a794:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a7a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a7a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d032      	beq.n	800a812 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	00db      	lsls	r3, r3, #3
 800a7be:	4413      	add	r3, r2
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	6812      	ldr	r2, [r2, #0]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7ca:	881b      	ldrh	r3, [r3, #0]
 800a7cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a7d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800a7de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7e0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a7e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7e4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	f007 fec1 	bl	801256e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	823b      	strh	r3, [r7, #16]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	8a3a      	ldrh	r2, [r7, #16]
 800a802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a806:	b292      	uxth	r2, r2
 800a808:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f00a fdfa 	bl	8015404 <HAL_PCD_SetupStageCallback>
 800a810:	e306      	b.n	800ae20 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a812:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a816:	2b00      	cmp	r3, #0
 800a818:	f280 8302 	bge.w	800ae20 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	881b      	ldrh	r3, [r3, #0]
 800a822:	b29a      	uxth	r2, r3
 800a824:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a828:	4013      	ands	r3, r2
 800a82a:	83fb      	strh	r3, [r7, #30]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	8bfa      	ldrh	r2, [r7, #30]
 800a832:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a836:	b292      	uxth	r2, r2
 800a838:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a842:	b29b      	uxth	r3, r3
 800a844:	461a      	mov	r2, r3
 800a846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	4413      	add	r3, r2
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	6812      	ldr	r2, [r2, #0]
 800a852:	4413      	add	r3, r2
 800a854:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a85e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a860:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d019      	beq.n	800a89e <PCD_EP_ISR_Handler+0x1ec>
 800a86a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d015      	beq.n	800a89e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6818      	ldr	r0, [r3, #0]
 800a876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a878:	6959      	ldr	r1, [r3, #20]
 800a87a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a87c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a87e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a880:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a882:	b29b      	uxth	r3, r3
 800a884:	f007 fe73 	bl	801256e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a88a:	695a      	ldr	r2, [r3, #20]
 800a88c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a88e:	69db      	ldr	r3, [r3, #28]
 800a890:	441a      	add	r2, r3
 800a892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a894:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a896:	2100      	movs	r1, #0
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f00a fdc5 	bl	8015428 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a8a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a8ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f040 82b5 	bne.w	800ae20 <PCD_EP_ISR_Handler+0x76e>
 800a8b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a8ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a8be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8c2:	f000 82ad 	beq.w	800ae20 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	61bb      	str	r3, [r7, #24]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	4413      	add	r3, r2
 800a8dc:	61bb      	str	r3, [r7, #24]
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	801a      	strh	r2, [r3, #0]
 800a8f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	2b3e      	cmp	r3, #62	; 0x3e
 800a8fc:	d91d      	bls.n	800a93a <PCD_EP_ISR_Handler+0x288>
 800a8fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	095b      	lsrs	r3, r3, #5
 800a904:	647b      	str	r3, [r7, #68]	; 0x44
 800a906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	f003 031f 	and.w	r3, r3, #31
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d102      	bne.n	800a918 <PCD_EP_ISR_Handler+0x266>
 800a912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a914:	3b01      	subs	r3, #1
 800a916:	647b      	str	r3, [r7, #68]	; 0x44
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a920:	b29b      	uxth	r3, r3
 800a922:	029b      	lsls	r3, r3, #10
 800a924:	b29b      	uxth	r3, r3
 800a926:	4313      	orrs	r3, r2
 800a928:	b29b      	uxth	r3, r3
 800a92a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a92e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a932:	b29a      	uxth	r2, r3
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	801a      	strh	r2, [r3, #0]
 800a938:	e026      	b.n	800a988 <PCD_EP_ISR_Handler+0x2d6>
 800a93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10a      	bne.n	800a958 <PCD_EP_ISR_Handler+0x2a6>
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	b29b      	uxth	r3, r3
 800a948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a94c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a950:	b29a      	uxth	r2, r3
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	801a      	strh	r2, [r3, #0]
 800a956:	e017      	b.n	800a988 <PCD_EP_ISR_Handler+0x2d6>
 800a958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	085b      	lsrs	r3, r3, #1
 800a95e:	647b      	str	r3, [r7, #68]	; 0x44
 800a960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <PCD_EP_ISR_Handler+0x2c0>
 800a96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a96e:	3301      	adds	r3, #1
 800a970:	647b      	str	r3, [r7, #68]	; 0x44
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	881b      	ldrh	r3, [r3, #0]
 800a976:	b29a      	uxth	r2, r3
 800a978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	029b      	lsls	r3, r3, #10
 800a97e:	b29b      	uxth	r3, r3
 800a980:	4313      	orrs	r3, r2
 800a982:	b29a      	uxth	r2, r3
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a998:	827b      	strh	r3, [r7, #18]
 800a99a:	8a7b      	ldrh	r3, [r7, #18]
 800a99c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9a0:	827b      	strh	r3, [r7, #18]
 800a9a2:	8a7b      	ldrh	r3, [r7, #18]
 800a9a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a9a8:	827b      	strh	r3, [r7, #18]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	8a7b      	ldrh	r3, [r7, #18]
 800a9b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	8013      	strh	r3, [r2, #0]
 800a9c4:	e22c      	b.n	800ae20 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a9da:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f280 80f6 	bge.w	800abd0 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	461a      	mov	r2, r3
 800aa06:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800aa12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa16:	b292      	uxth	r2, r2
 800aa18:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800aa1a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800aa1e:	4613      	mov	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	00db      	lsls	r3, r3, #3
 800aa26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800aa30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa32:	7b1b      	ldrb	r3, [r3, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d123      	bne.n	800aa80 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	461a      	mov	r2, r3
 800aa44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	4413      	add	r3, r2
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	6812      	ldr	r2, [r2, #0]
 800aa50:	4413      	add	r3, r2
 800aa52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa56:	881b      	ldrh	r3, [r3, #0]
 800aa58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800aa60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 808e 	beq.w	800ab86 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6818      	ldr	r0, [r3, #0]
 800aa6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa70:	6959      	ldr	r1, [r3, #20]
 800aa72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa74:	88da      	ldrh	r2, [r3, #6]
 800aa76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa7a:	f007 fd78 	bl	801256e <USB_ReadPMA>
 800aa7e:	e082      	b.n	800ab86 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800aa80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa82:	78db      	ldrb	r3, [r3, #3]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d10a      	bne.n	800aa9e <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800aa88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f9d3 	bl	800ae3c <HAL_PCD_EP_DB_Receive>
 800aa96:	4603      	mov	r3, r0
 800aa98:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800aa9c:	e073      	b.n	800ab86 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	461a      	mov	r2, r3
 800aac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	441a      	add	r2, r3
 800aaca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800aace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aada:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aade:	b29b      	uxth	r3, r3
 800aae0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d022      	beq.n	800ab42 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	461a      	mov	r2, r3
 800ab08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	00db      	lsls	r3, r3, #3
 800ab0e:	4413      	add	r3, r2
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	6812      	ldr	r2, [r2, #0]
 800ab14:	4413      	add	r3, r2
 800ab16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800ab24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d02c      	beq.n	800ab86 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6818      	ldr	r0, [r3, #0]
 800ab30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab32:	6959      	ldr	r1, [r3, #20]
 800ab34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab36:	891a      	ldrh	r2, [r3, #8]
 800ab38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ab3c:	f007 fd17 	bl	801256e <USB_ReadPMA>
 800ab40:	e021      	b.n	800ab86 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	4413      	add	r3, r2
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	6812      	ldr	r2, [r2, #0]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800ab6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d009      	beq.n	800ab86 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6818      	ldr	r0, [r3, #0]
 800ab76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab78:	6959      	ldr	r1, [r3, #20]
 800ab7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab7c:	895a      	ldrh	r2, [r3, #10]
 800ab7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ab82:	f007 fcf4 	bl	801256e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ab86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab88:	69da      	ldr	r2, [r3, #28]
 800ab8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ab8e:	441a      	add	r2, r3
 800ab90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ab94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab96:	695a      	ldr	r2, [r3, #20]
 800ab98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ab9c:	441a      	add	r2, r3
 800ab9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aba0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800aba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d005      	beq.n	800abb6 <PCD_EP_ISR_Handler+0x504>
 800abaa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800abae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d206      	bcs.n	800abc4 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800abb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	4619      	mov	r1, r3
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f00a fc33 	bl	8015428 <HAL_PCD_DataOutStageCallback>
 800abc2:	e005      	b.n	800abd0 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abca:	4618      	mov	r0, r3
 800abcc:	f005 ff81 	bl	8010ad2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800abd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800abd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 8121 	beq.w	800ae20 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800abde:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	4613      	mov	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	4413      	add	r3, r2
 800abf0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	461a      	mov	r2, r3
 800abf8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800ac08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	441a      	add	r2, r3
 800ac1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ac2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac30:	78db      	ldrb	r3, [r3, #3]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	f040 80a2 	bne.w	800ad7c <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 800ac38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ac3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac40:	7b1b      	ldrb	r3, [r3, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 8093 	beq.w	800ad6e <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ac48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ac4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d046      	beq.n	800ace2 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ac54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac56:	785b      	ldrb	r3, [r3, #1]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d126      	bne.n	800acaa <PCD_EP_ISR_Handler+0x5f8>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	627b      	str	r3, [r7, #36]	; 0x24
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	4413      	add	r3, r2
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
 800ac74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	00da      	lsls	r2, r3, #3
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac82:	623b      	str	r3, [r7, #32]
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	881b      	ldrh	r3, [r3, #0]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	801a      	strh	r2, [r3, #0]
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	6a3b      	ldr	r3, [r7, #32]
 800aca6:	801a      	strh	r2, [r3, #0]
 800aca8:	e061      	b.n	800ad6e <PCD_EP_ISR_Handler+0x6bc>
 800acaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acac:	785b      	ldrb	r3, [r3, #1]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d15d      	bne.n	800ad6e <PCD_EP_ISR_Handler+0x6bc>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	461a      	mov	r2, r3
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	4413      	add	r3, r2
 800acc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	00da      	lsls	r2, r3, #3
 800acd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd2:	4413      	add	r3, r2
 800acd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acd8:	62bb      	str	r3, [r7, #40]	; 0x28
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	2200      	movs	r2, #0
 800acde:	801a      	strh	r2, [r3, #0]
 800ace0:	e045      	b.n	800ad6e <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acea:	785b      	ldrb	r3, [r3, #1]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d126      	bne.n	800ad3e <PCD_EP_ISR_Handler+0x68c>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	637b      	str	r3, [r7, #52]	; 0x34
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	461a      	mov	r2, r3
 800ad02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad04:	4413      	add	r3, r2
 800ad06:	637b      	str	r3, [r7, #52]	; 0x34
 800ad08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	00da      	lsls	r2, r3, #3
 800ad0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad10:	4413      	add	r3, r2
 800ad12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad16:	633b      	str	r3, [r7, #48]	; 0x30
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	881b      	ldrh	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad26:	801a      	strh	r2, [r3, #0]
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	801a      	strh	r2, [r3, #0]
 800ad3c:	e017      	b.n	800ad6e <PCD_EP_ISR_Handler+0x6bc>
 800ad3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad40:	785b      	ldrb	r3, [r3, #1]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d113      	bne.n	800ad6e <PCD_EP_ISR_Handler+0x6bc>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	461a      	mov	r2, r3
 800ad52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad54:	4413      	add	r3, r2
 800ad56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	00da      	lsls	r2, r3, #3
 800ad5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad60:	4413      	add	r3, r2
 800ad62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad66:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ad6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f00a fb72 	bl	801545e <HAL_PCD_DataInStageCallback>
 800ad7a:	e051      	b.n	800ae20 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ad7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ad80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d144      	bne.n	800ae12 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	461a      	mov	r2, r3
 800ad94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	4413      	add	r3, r2
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	6812      	ldr	r2, [r2, #0]
 800ada0:	4413      	add	r3, r2
 800ada2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800adb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adb2:	699a      	ldr	r2, [r3, #24]
 800adb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800adb8:	429a      	cmp	r2, r3
 800adba:	d907      	bls.n	800adcc <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 800adbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adbe:	699a      	ldr	r2, [r3, #24]
 800adc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800adc4:	1ad2      	subs	r2, r2, r3
 800adc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adc8:	619a      	str	r2, [r3, #24]
 800adca:	e002      	b.n	800add2 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 800adcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adce:	2200      	movs	r2, #0
 800add0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800add2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d106      	bne.n	800ade8 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800adda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f00a fb3c 	bl	801545e <HAL_PCD_DataInStageCallback>
 800ade6:	e01b      	b.n	800ae20 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800ade8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adea:	695a      	ldr	r2, [r3, #20]
 800adec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800adf0:	441a      	add	r2, r3
 800adf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adf4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800adf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adf8:	69da      	ldr	r2, [r3, #28]
 800adfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800adfe:	441a      	add	r2, r3
 800ae00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae02:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f005 fe61 	bl	8010ad2 <USB_EPStartXfer>
 800ae10:	e006      	b.n	800ae20 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ae12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ae16:	461a      	mov	r2, r3
 800ae18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f917 	bl	800b04e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	b21b      	sxth	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f6ff ac45 	blt.w	800a6bc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3758      	adds	r7, #88	; 0x58
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	4613      	mov	r3, r2
 800ae48:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ae4a:	88fb      	ldrh	r3, [r7, #6]
 800ae4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d07c      	beq.n	800af4e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	461a      	mov	r2, r3
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	4413      	add	r3, r2
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	6812      	ldr	r2, [r2, #0]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae72:	881b      	ldrh	r3, [r3, #0]
 800ae74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	699a      	ldr	r2, [r3, #24]
 800ae7e:	8b7b      	ldrh	r3, [r7, #26]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d306      	bcc.n	800ae92 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	699a      	ldr	r2, [r3, #24]
 800ae88:	8b7b      	ldrh	r3, [r7, #26]
 800ae8a:	1ad2      	subs	r2, r2, r3
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	619a      	str	r2, [r3, #24]
 800ae90:	e002      	b.n	800ae98 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	2200      	movs	r2, #0
 800ae96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d123      	bne.n	800aee8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	461a      	mov	r2, r3
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4413      	add	r3, r2
 800aeae:	881b      	ldrh	r3, [r3, #0]
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aeb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeba:	833b      	strh	r3, [r7, #24]
 800aebc:	8b3b      	ldrh	r3, [r7, #24]
 800aebe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aec2:	833b      	strh	r3, [r7, #24]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	461a      	mov	r2, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	441a      	add	r2, r3
 800aed2:	8b3b      	ldrh	r3, [r7, #24]
 800aed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aedc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800aee8:	88fb      	ldrh	r3, [r7, #6]
 800aeea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d01f      	beq.n	800af32 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4413      	add	r3, r2
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	b29b      	uxth	r3, r3
 800af04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af0c:	82fb      	strh	r3, [r7, #22]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	441a      	add	r2, r3
 800af1c:	8afb      	ldrh	r3, [r7, #22]
 800af1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af2e:	b29b      	uxth	r3, r3
 800af30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800af32:	8b7b      	ldrh	r3, [r7, #26]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 8085 	beq.w	800b044 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	6959      	ldr	r1, [r3, #20]
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	891a      	ldrh	r2, [r3, #8]
 800af46:	8b7b      	ldrh	r3, [r7, #26]
 800af48:	f007 fb11 	bl	801256e <USB_ReadPMA>
 800af4c:	e07a      	b.n	800b044 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af56:	b29b      	uxth	r3, r3
 800af58:	461a      	mov	r2, r3
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	4413      	add	r3, r2
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	6812      	ldr	r2, [r2, #0]
 800af66:	4413      	add	r3, r2
 800af68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	699a      	ldr	r2, [r3, #24]
 800af78:	8b7b      	ldrh	r3, [r7, #26]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d306      	bcc.n	800af8c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	699a      	ldr	r2, [r3, #24]
 800af82:	8b7b      	ldrh	r3, [r7, #26]
 800af84:	1ad2      	subs	r2, r2, r3
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	619a      	str	r2, [r3, #24]
 800af8a:	e002      	b.n	800af92 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	2200      	movs	r2, #0
 800af90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d123      	bne.n	800afe2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	461a      	mov	r2, r3
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	b29b      	uxth	r3, r3
 800afac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb4:	83fb      	strh	r3, [r7, #30]
 800afb6:	8bfb      	ldrh	r3, [r7, #30]
 800afb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800afbc:	83fb      	strh	r3, [r7, #30]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	461a      	mov	r2, r3
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	441a      	add	r2, r3
 800afcc:	8bfb      	ldrh	r3, [r7, #30]
 800afce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afde:	b29b      	uxth	r3, r3
 800afe0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800afe2:	88fb      	ldrh	r3, [r7, #6]
 800afe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d11f      	bne.n	800b02c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	461a      	mov	r2, r3
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	881b      	ldrh	r3, [r3, #0]
 800affc:	b29b      	uxth	r3, r3
 800affe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b006:	83bb      	strh	r3, [r7, #28]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	461a      	mov	r2, r3
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	441a      	add	r2, r3
 800b016:	8bbb      	ldrh	r3, [r7, #28]
 800b018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b01c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b028:	b29b      	uxth	r3, r3
 800b02a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b02c:	8b7b      	ldrh	r3, [r7, #26]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d008      	beq.n	800b044 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6818      	ldr	r0, [r3, #0]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	6959      	ldr	r1, [r3, #20]
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	895a      	ldrh	r2, [r3, #10]
 800b03e:	8b7b      	ldrh	r3, [r7, #26]
 800b040:	f007 fa95 	bl	801256e <USB_ReadPMA>
    }
  }

  return count;
 800b044:	8b7b      	ldrh	r3, [r7, #26]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3720      	adds	r7, #32
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b0a4      	sub	sp, #144	; 0x90
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	4613      	mov	r3, r2
 800b05a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b05c:	88fb      	ldrh	r3, [r7, #6]
 800b05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b062:	2b00      	cmp	r3, #0
 800b064:	f000 81db 	beq.w	800b41e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b070:	b29b      	uxth	r3, r3
 800b072:	461a      	mov	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	00db      	lsls	r3, r3, #3
 800b07a:	4413      	add	r3, r2
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	6812      	ldr	r2, [r2, #0]
 800b080:	4413      	add	r3, r2
 800b082:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b08c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	699a      	ldr	r2, [r3, #24]
 800b094:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b098:	429a      	cmp	r2, r3
 800b09a:	d907      	bls.n	800b0ac <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	699a      	ldr	r2, [r3, #24]
 800b0a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b0a4:	1ad2      	subs	r2, r2, r3
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	619a      	str	r2, [r3, #24]
 800b0aa:	e002      	b.n	800b0b2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f040 80b9 	bne.w	800b22e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	785b      	ldrb	r3, [r3, #1]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d126      	bne.n	800b112 <HAL_PCD_EP_DB_Transmit+0xc4>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d8:	4413      	add	r3, r2
 800b0da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	00da      	lsls	r2, r3, #3
 800b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	881b      	ldrh	r3, [r3, #0]
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	801a      	strh	r2, [r3, #0]
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	b29b      	uxth	r3, r3
 800b102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	801a      	strh	r2, [r3, #0]
 800b110:	e01a      	b.n	800b148 <HAL_PCD_EP_DB_Transmit+0xfa>
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d116      	bne.n	800b148 <HAL_PCD_EP_DB_Transmit+0xfa>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	637b      	str	r3, [r7, #52]	; 0x34
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b128:	b29b      	uxth	r3, r3
 800b12a:	461a      	mov	r2, r3
 800b12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b12e:	4413      	add	r3, r2
 800b130:	637b      	str	r3, [r7, #52]	; 0x34
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	00da      	lsls	r2, r3, #3
 800b138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b13a:	4413      	add	r3, r2
 800b13c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b140:	633b      	str	r3, [r7, #48]	; 0x30
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	2200      	movs	r2, #0
 800b146:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	785b      	ldrb	r3, [r3, #1]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d126      	bne.n	800b1a4 <HAL_PCD_EP_DB_Transmit+0x156>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	61fb      	str	r3, [r7, #28]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b164:	b29b      	uxth	r3, r3
 800b166:	461a      	mov	r2, r3
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	4413      	add	r3, r2
 800b16c:	61fb      	str	r3, [r7, #28]
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	00da      	lsls	r2, r3, #3
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	4413      	add	r3, r2
 800b178:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b17c:	61bb      	str	r3, [r7, #24]
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	b29b      	uxth	r3, r3
 800b184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b188:	b29a      	uxth	r2, r3
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	801a      	strh	r2, [r3, #0]
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	b29b      	uxth	r3, r3
 800b194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	801a      	strh	r2, [r3, #0]
 800b1a2:	e017      	b.n	800b1d4 <HAL_PCD_EP_DB_Transmit+0x186>
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	785b      	ldrb	r3, [r3, #1]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d113      	bne.n	800b1d4 <HAL_PCD_EP_DB_Transmit+0x186>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	4413      	add	r3, r2
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	00da      	lsls	r2, r3, #3
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1cc:	623b      	str	r3, [r7, #32]
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	4619      	mov	r1, r3
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f00a f93f 	bl	801545e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b1e0:	88fb      	ldrh	r3, [r7, #6]
 800b1e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f000 82fa 	beq.w	800b7e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	881b      	ldrh	r3, [r3, #0]
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b206:	82fb      	strh	r3, [r7, #22]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	461a      	mov	r2, r3
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	441a      	add	r2, r3
 800b216:	8afb      	ldrh	r3, [r7, #22]
 800b218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b21c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b228:	b29b      	uxth	r3, r3
 800b22a:	8013      	strh	r3, [r2, #0]
 800b22c:	e2d8      	b.n	800b7e0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b22e:	88fb      	ldrh	r3, [r7, #6]
 800b230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d021      	beq.n	800b27c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	461a      	mov	r2, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	881b      	ldrh	r3, [r3, #0]
 800b248:	b29b      	uxth	r3, r3
 800b24a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b252:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	461a      	mov	r2, r3
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	441a      	add	r2, r3
 800b264:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b26c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b278:	b29b      	uxth	r3, r3
 800b27a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b282:	2b01      	cmp	r3, #1
 800b284:	f040 82ac 	bne.w	800b7e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	695a      	ldr	r2, [r3, #20]
 800b28c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b290:	441a      	add	r2, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	69da      	ldr	r2, [r3, #28]
 800b29a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b29e:	441a      	add	r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	6a1a      	ldr	r2, [r3, #32]
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d30b      	bcc.n	800b2c8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	6a1a      	ldr	r2, [r3, #32]
 800b2bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2c0:	1ad2      	subs	r2, r2, r3
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	621a      	str	r2, [r3, #32]
 800b2c6:	e017      	b.n	800b2f8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d108      	bne.n	800b2e2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800b2d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b2d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b2e0:	e00a      	b.n	800b2f8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	785b      	ldrb	r3, [r3, #1]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d165      	bne.n	800b3cc <HAL_PCD_EP_DB_Transmit+0x37e>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b30e:	b29b      	uxth	r3, r3
 800b310:	461a      	mov	r2, r3
 800b312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b314:	4413      	add	r3, r2
 800b316:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	00da      	lsls	r2, r3, #3
 800b31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b320:	4413      	add	r3, r2
 800b322:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b326:	63bb      	str	r3, [r7, #56]	; 0x38
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b332:	b29a      	uxth	r2, r3
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	801a      	strh	r2, [r3, #0]
 800b338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b33c:	2b3e      	cmp	r3, #62	; 0x3e
 800b33e:	d91d      	bls.n	800b37c <HAL_PCD_EP_DB_Transmit+0x32e>
 800b340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b344:	095b      	lsrs	r3, r3, #5
 800b346:	64bb      	str	r3, [r7, #72]	; 0x48
 800b348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b34c:	f003 031f 	and.w	r3, r3, #31
 800b350:	2b00      	cmp	r3, #0
 800b352:	d102      	bne.n	800b35a <HAL_PCD_EP_DB_Transmit+0x30c>
 800b354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b356:	3b01      	subs	r3, #1
 800b358:	64bb      	str	r3, [r7, #72]	; 0x48
 800b35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	b29a      	uxth	r2, r3
 800b360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b362:	b29b      	uxth	r3, r3
 800b364:	029b      	lsls	r3, r3, #10
 800b366:	b29b      	uxth	r3, r3
 800b368:	4313      	orrs	r3, r2
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b374:	b29a      	uxth	r2, r3
 800b376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b378:	801a      	strh	r2, [r3, #0]
 800b37a:	e044      	b.n	800b406 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b37c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <HAL_PCD_EP_DB_Transmit+0x34c>
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b38e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b392:	b29a      	uxth	r2, r3
 800b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b396:	801a      	strh	r2, [r3, #0]
 800b398:	e035      	b.n	800b406 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b39a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b39e:	085b      	lsrs	r3, r3, #1
 800b3a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <HAL_PCD_EP_DB_Transmit+0x366>
 800b3ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	029b      	lsls	r3, r3, #10
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c8:	801a      	strh	r2, [r3, #0]
 800b3ca:	e01c      	b.n	800b406 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	785b      	ldrb	r3, [r3, #1]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d118      	bne.n	800b406 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	647b      	str	r3, [r7, #68]	; 0x44
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3e8:	4413      	add	r3, r2
 800b3ea:	647b      	str	r3, [r7, #68]	; 0x44
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	00da      	lsls	r2, r3, #3
 800b3f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b3fa:	643b      	str	r3, [r7, #64]	; 0x40
 800b3fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b400:	b29a      	uxth	r2, r3
 800b402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b404:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6818      	ldr	r0, [r3, #0]
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	6959      	ldr	r1, [r3, #20]
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	891a      	ldrh	r2, [r3, #8]
 800b412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b416:	b29b      	uxth	r3, r3
 800b418:	f007 f867 	bl	80124ea <USB_WritePMA>
 800b41c:	e1e0      	b.n	800b7e0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b426:	b29b      	uxth	r3, r3
 800b428:	461a      	mov	r2, r3
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	4413      	add	r3, r2
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	6812      	ldr	r2, [r2, #0]
 800b436:	4413      	add	r3, r2
 800b438:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b43c:	881b      	ldrh	r3, [r3, #0]
 800b43e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b442:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	699a      	ldr	r2, [r3, #24]
 800b44a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b44e:	429a      	cmp	r2, r3
 800b450:	d307      	bcc.n	800b462 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	699a      	ldr	r2, [r3, #24]
 800b456:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b45a:	1ad2      	subs	r2, r2, r3
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	619a      	str	r2, [r3, #24]
 800b460:	e002      	b.n	800b468 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2200      	movs	r2, #0
 800b466:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f040 80c0 	bne.w	800b5f2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	785b      	ldrb	r3, [r3, #1]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d126      	bne.n	800b4c8 <HAL_PCD_EP_DB_Transmit+0x47a>
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b488:	b29b      	uxth	r3, r3
 800b48a:	461a      	mov	r2, r3
 800b48c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b48e:	4413      	add	r3, r2
 800b490:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	00da      	lsls	r2, r3, #3
 800b498:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b49a:	4413      	add	r3, r2
 800b49c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b4a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4b0:	801a      	strh	r2, [r3, #0]
 800b4b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4b4:	881b      	ldrh	r3, [r3, #0]
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4c4:	801a      	strh	r2, [r3, #0]
 800b4c6:	e01a      	b.n	800b4fe <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d116      	bne.n	800b4fe <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	667b      	str	r3, [r7, #100]	; 0x64
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4e4:	4413      	add	r3, r2
 800b4e6:	667b      	str	r3, [r7, #100]	; 0x64
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	00da      	lsls	r2, r3, #3
 800b4ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4f0:	4413      	add	r3, r2
 800b4f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4f6:	663b      	str	r3, [r7, #96]	; 0x60
 800b4f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	677b      	str	r3, [r7, #116]	; 0x74
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	785b      	ldrb	r3, [r3, #1]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d12b      	bne.n	800b564 <HAL_PCD_EP_DB_Transmit+0x516>
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	461a      	mov	r2, r3
 800b51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b520:	4413      	add	r3, r2
 800b522:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	00da      	lsls	r2, r3, #3
 800b52a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b52c:	4413      	add	r3, r2
 800b52e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b536:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b542:	b29a      	uxth	r2, r3
 800b544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b548:	801a      	strh	r2, [r3, #0]
 800b54a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b54e:	881b      	ldrh	r3, [r3, #0]
 800b550:	b29b      	uxth	r3, r3
 800b552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b560:	801a      	strh	r2, [r3, #0]
 800b562:	e017      	b.n	800b594 <HAL_PCD_EP_DB_Transmit+0x546>
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	785b      	ldrb	r3, [r3, #1]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d113      	bne.n	800b594 <HAL_PCD_EP_DB_Transmit+0x546>
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b574:	b29b      	uxth	r3, r3
 800b576:	461a      	mov	r2, r3
 800b578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b57a:	4413      	add	r3, r2
 800b57c:	677b      	str	r3, [r7, #116]	; 0x74
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	00da      	lsls	r2, r3, #3
 800b584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b586:	4413      	add	r3, r2
 800b588:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b58c:	673b      	str	r3, [r7, #112]	; 0x70
 800b58e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b590:	2200      	movs	r2, #0
 800b592:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	4619      	mov	r1, r3
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f009 ff5f 	bl	801545e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b5a0:	88fb      	ldrh	r3, [r7, #6]
 800b5a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f040 811a 	bne.w	800b7e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5c6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	441a      	add	r2, r3
 800b5d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b5dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	8013      	strh	r3, [r2, #0]
 800b5f0:	e0f6      	b.n	800b7e0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b5f2:	88fb      	ldrh	r3, [r7, #6]
 800b5f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d121      	bne.n	800b640 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	461a      	mov	r2, r3
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	4413      	add	r3, r2
 800b60a:	881b      	ldrh	r3, [r3, #0]
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b616:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	441a      	add	r2, r3
 800b628:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b62c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b646:	2b01      	cmp	r3, #1
 800b648:	f040 80ca 	bne.w	800b7e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	695a      	ldr	r2, [r3, #20]
 800b650:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b654:	441a      	add	r2, r3
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	69da      	ldr	r2, [r3, #28]
 800b65e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b662:	441a      	add	r2, r3
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	6a1a      	ldr	r2, [r3, #32]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	429a      	cmp	r2, r3
 800b672:	d30b      	bcc.n	800b68c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	6a1a      	ldr	r2, [r3, #32]
 800b680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b684:	1ad2      	subs	r2, r2, r3
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	621a      	str	r2, [r3, #32]
 800b68a:	e017      	b.n	800b6bc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	6a1b      	ldr	r3, [r3, #32]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d108      	bne.n	800b6a6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800b694:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b698:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b6a4:	e00a      	b.n	800b6bc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	6a1b      	ldr	r3, [r3, #32]
 800b6aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	657b      	str	r3, [r7, #84]	; 0x54
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	785b      	ldrb	r3, [r3, #1]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d165      	bne.n	800b796 <HAL_PCD_EP_DB_Transmit+0x748>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	461a      	mov	r2, r3
 800b6dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6de:	4413      	add	r3, r2
 800b6e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	00da      	lsls	r2, r3, #3
 800b6e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6ea:	4413      	add	r3, r2
 800b6ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6f4:	881b      	ldrh	r3, [r3, #0]
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b700:	801a      	strh	r2, [r3, #0]
 800b702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b706:	2b3e      	cmp	r3, #62	; 0x3e
 800b708:	d91d      	bls.n	800b746 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800b70a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b70e:	095b      	lsrs	r3, r3, #5
 800b710:	66bb      	str	r3, [r7, #104]	; 0x68
 800b712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b716:	f003 031f 	and.w	r3, r3, #31
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d102      	bne.n	800b724 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800b71e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b720:	3b01      	subs	r3, #1
 800b722:	66bb      	str	r3, [r7, #104]	; 0x68
 800b724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	b29a      	uxth	r2, r3
 800b72a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	029b      	lsls	r3, r3, #10
 800b730:	b29b      	uxth	r3, r3
 800b732:	4313      	orrs	r3, r2
 800b734:	b29b      	uxth	r3, r3
 800b736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b73a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b73e:	b29a      	uxth	r2, r3
 800b740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b742:	801a      	strh	r2, [r3, #0]
 800b744:	e041      	b.n	800b7ca <HAL_PCD_EP_DB_Transmit+0x77c>
 800b746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10a      	bne.n	800b764 <HAL_PCD_EP_DB_Transmit+0x716>
 800b74e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b750:	881b      	ldrh	r3, [r3, #0]
 800b752:	b29b      	uxth	r3, r3
 800b754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b760:	801a      	strh	r2, [r3, #0]
 800b762:	e032      	b.n	800b7ca <HAL_PCD_EP_DB_Transmit+0x77c>
 800b764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b768:	085b      	lsrs	r3, r3, #1
 800b76a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b76c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b770:	f003 0301 	and.w	r3, r3, #1
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <HAL_PCD_EP_DB_Transmit+0x730>
 800b778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b77a:	3301      	adds	r3, #1
 800b77c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b77e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	b29a      	uxth	r2, r3
 800b784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b786:	b29b      	uxth	r3, r3
 800b788:	029b      	lsls	r3, r3, #10
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	4313      	orrs	r3, r2
 800b78e:	b29a      	uxth	r2, r3
 800b790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b792:	801a      	strh	r2, [r3, #0]
 800b794:	e019      	b.n	800b7ca <HAL_PCD_EP_DB_Transmit+0x77c>
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d115      	bne.n	800b7ca <HAL_PCD_EP_DB_Transmit+0x77c>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7ac:	4413      	add	r3, r2
 800b7ae:	657b      	str	r3, [r7, #84]	; 0x54
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	00da      	lsls	r2, r3, #3
 800b7b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7b8:	4413      	add	r3, r2
 800b7ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7be:	653b      	str	r3, [r7, #80]	; 0x50
 800b7c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6818      	ldr	r0, [r3, #0]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	6959      	ldr	r1, [r3, #20]
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	895a      	ldrh	r2, [r3, #10]
 800b7d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	f006 fe85 	bl	80124ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7fa:	82bb      	strh	r3, [r7, #20]
 800b7fc:	8abb      	ldrh	r3, [r7, #20]
 800b7fe:	f083 0310 	eor.w	r3, r3, #16
 800b802:	82bb      	strh	r3, [r7, #20]
 800b804:	8abb      	ldrh	r3, [r7, #20]
 800b806:	f083 0320 	eor.w	r3, r3, #32
 800b80a:	82bb      	strh	r3, [r7, #20]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	461a      	mov	r2, r3
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	441a      	add	r2, r3
 800b81a:	8abb      	ldrh	r3, [r7, #20]
 800b81c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3790      	adds	r7, #144	; 0x90
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b087      	sub	sp, #28
 800b83e:	af00      	add	r7, sp, #0
 800b840:	60f8      	str	r0, [r7, #12]
 800b842:	607b      	str	r3, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	817b      	strh	r3, [r7, #10]
 800b848:	4613      	mov	r3, r2
 800b84a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b84c:	897b      	ldrh	r3, [r7, #10]
 800b84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b852:	b29b      	uxth	r3, r3
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00b      	beq.n	800b870 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b858:	897b      	ldrh	r3, [r7, #10]
 800b85a:	f003 0307 	and.w	r3, r3, #7
 800b85e:	1c5a      	adds	r2, r3, #1
 800b860:	4613      	mov	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	4413      	add	r3, r2
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	e009      	b.n	800b884 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b870:	897a      	ldrh	r2, [r7, #10]
 800b872:	4613      	mov	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4413      	add	r3, r2
 800b878:	00db      	lsls	r3, r3, #3
 800b87a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	4413      	add	r3, r2
 800b882:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b884:	893b      	ldrh	r3, [r7, #8]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d107      	bne.n	800b89a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2200      	movs	r2, #0
 800b88e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	b29a      	uxth	r2, r3
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	80da      	strh	r2, [r3, #6]
 800b898:	e00b      	b.n	800b8b2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2201      	movs	r2, #1
 800b89e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	0c1b      	lsrs	r3, r3, #16
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	371c      	adds	r7, #28
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	f043 0302 	orr.w	r3, r3, #2
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b914:	b480      	push	{r7}
 800b916:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b918:	4b04      	ldr	r3, [pc, #16]	; (800b92c <HAL_PWREx_GetVoltageRange+0x18>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b920:	4618      	mov	r0, r3
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	40007000 	.word	0x40007000

0800b930 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b93e:	d130      	bne.n	800b9a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b940:	4b23      	ldr	r3, [pc, #140]	; (800b9d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b94c:	d038      	beq.n	800b9c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b94e:	4b20      	ldr	r3, [pc, #128]	; (800b9d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b956:	4a1e      	ldr	r2, [pc, #120]	; (800b9d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b958:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b95c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b95e:	4b1d      	ldr	r3, [pc, #116]	; (800b9d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2232      	movs	r2, #50	; 0x32
 800b964:	fb02 f303 	mul.w	r3, r2, r3
 800b968:	4a1b      	ldr	r2, [pc, #108]	; (800b9d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b96a:	fba2 2303 	umull	r2, r3, r2, r3
 800b96e:	0c9b      	lsrs	r3, r3, #18
 800b970:	3301      	adds	r3, #1
 800b972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b974:	e002      	b.n	800b97c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	3b01      	subs	r3, #1
 800b97a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b97c:	4b14      	ldr	r3, [pc, #80]	; (800b9d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b97e:	695b      	ldr	r3, [r3, #20]
 800b980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b988:	d102      	bne.n	800b990 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1f2      	bne.n	800b976 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b990:	4b0f      	ldr	r3, [pc, #60]	; (800b9d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b99c:	d110      	bne.n	800b9c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e00f      	b.n	800b9c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b9a2:	4b0b      	ldr	r3, [pc, #44]	; (800b9d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b9aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ae:	d007      	beq.n	800b9c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b9b0:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b9b8:	4a05      	ldr	r2, [pc, #20]	; (800b9d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b9ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b9be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	40007000 	.word	0x40007000
 800b9d4:	20000024 	.word	0x20000024
 800b9d8:	431bde83 	.word	0x431bde83

0800b9dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b9e0:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	4a04      	ldr	r2, [pc, #16]	; (800b9f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b9e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b9ea:	6053      	str	r3, [r2, #4]
}
 800b9ec:	bf00      	nop
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	40007000 	.word	0x40007000

0800b9fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b088      	sub	sp, #32
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d102      	bne.n	800ba10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	f000 bc02 	b.w	800c214 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba10:	4b96      	ldr	r3, [pc, #600]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	f003 030c 	and.w	r3, r3, #12
 800ba18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ba1a:	4b94      	ldr	r3, [pc, #592]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	f003 0303 	and.w	r3, r3, #3
 800ba22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 0310 	and.w	r3, r3, #16
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 80e4 	beq.w	800bbfa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d007      	beq.n	800ba48 <HAL_RCC_OscConfig+0x4c>
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	2b0c      	cmp	r3, #12
 800ba3c:	f040 808b 	bne.w	800bb56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	f040 8087 	bne.w	800bb56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ba48:	4b88      	ldr	r3, [pc, #544]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d005      	beq.n	800ba60 <HAL_RCC_OscConfig+0x64>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e3d9      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a1a      	ldr	r2, [r3, #32]
 800ba64:	4b81      	ldr	r3, [pc, #516]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0308 	and.w	r3, r3, #8
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d004      	beq.n	800ba7a <HAL_RCC_OscConfig+0x7e>
 800ba70:	4b7e      	ldr	r3, [pc, #504]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba78:	e005      	b.n	800ba86 <HAL_RCC_OscConfig+0x8a>
 800ba7a:	4b7c      	ldr	r3, [pc, #496]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800ba7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba80:	091b      	lsrs	r3, r3, #4
 800ba82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d223      	bcs.n	800bad2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 fd8c 	bl	800c5ac <RCC_SetFlashLatencyFromMSIRange>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e3ba      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ba9e:	4b73      	ldr	r3, [pc, #460]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a72      	ldr	r2, [pc, #456]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800baa4:	f043 0308 	orr.w	r3, r3, #8
 800baa8:	6013      	str	r3, [r2, #0]
 800baaa:	4b70      	ldr	r3, [pc, #448]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a1b      	ldr	r3, [r3, #32]
 800bab6:	496d      	ldr	r1, [pc, #436]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bab8:	4313      	orrs	r3, r2
 800baba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800babc:	4b6b      	ldr	r3, [pc, #428]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	69db      	ldr	r3, [r3, #28]
 800bac8:	021b      	lsls	r3, r3, #8
 800baca:	4968      	ldr	r1, [pc, #416]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bacc:	4313      	orrs	r3, r2
 800bace:	604b      	str	r3, [r1, #4]
 800bad0:	e025      	b.n	800bb1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bad2:	4b66      	ldr	r3, [pc, #408]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a65      	ldr	r2, [pc, #404]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bad8:	f043 0308 	orr.w	r3, r3, #8
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	4b63      	ldr	r3, [pc, #396]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	4960      	ldr	r1, [pc, #384]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800baec:	4313      	orrs	r3, r2
 800baee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800baf0:	4b5e      	ldr	r3, [pc, #376]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	021b      	lsls	r3, r3, #8
 800bafe:	495b      	ldr	r1, [pc, #364]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bb00:	4313      	orrs	r3, r2
 800bb02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d109      	bne.n	800bb1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a1b      	ldr	r3, [r3, #32]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 fd4c 	bl	800c5ac <RCC_SetFlashLatencyFromMSIRange>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e37a      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bb1e:	f000 fc81 	bl	800c424 <HAL_RCC_GetSysClockFreq>
 800bb22:	4602      	mov	r2, r0
 800bb24:	4b51      	ldr	r3, [pc, #324]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	091b      	lsrs	r3, r3, #4
 800bb2a:	f003 030f 	and.w	r3, r3, #15
 800bb2e:	4950      	ldr	r1, [pc, #320]	; (800bc70 <HAL_RCC_OscConfig+0x274>)
 800bb30:	5ccb      	ldrb	r3, [r1, r3]
 800bb32:	f003 031f 	and.w	r3, r3, #31
 800bb36:	fa22 f303 	lsr.w	r3, r2, r3
 800bb3a:	4a4e      	ldr	r2, [pc, #312]	; (800bc74 <HAL_RCC_OscConfig+0x278>)
 800bb3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bb3e:	4b4e      	ldr	r3, [pc, #312]	; (800bc78 <HAL_RCC_OscConfig+0x27c>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fb f90c 	bl	8006d60 <HAL_InitTick>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d052      	beq.n	800bbf8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	e35e      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d032      	beq.n	800bbc4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bb5e:	4b43      	ldr	r3, [pc, #268]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a42      	ldr	r2, [pc, #264]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bb64:	f043 0301 	orr.w	r3, r3, #1
 800bb68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bb6a:	f7fb f949 	bl	8006e00 <HAL_GetTick>
 800bb6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bb70:	e008      	b.n	800bb84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bb72:	f7fb f945 	bl	8006e00 <HAL_GetTick>
 800bb76:	4602      	mov	r2, r0
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d901      	bls.n	800bb84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e347      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bb84:	4b39      	ldr	r3, [pc, #228]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 0302 	and.w	r3, r3, #2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0f0      	beq.n	800bb72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bb90:	4b36      	ldr	r3, [pc, #216]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a35      	ldr	r2, [pc, #212]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bb96:	f043 0308 	orr.w	r3, r3, #8
 800bb9a:	6013      	str	r3, [r2, #0]
 800bb9c:	4b33      	ldr	r3, [pc, #204]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a1b      	ldr	r3, [r3, #32]
 800bba8:	4930      	ldr	r1, [pc, #192]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bbae:	4b2f      	ldr	r3, [pc, #188]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	69db      	ldr	r3, [r3, #28]
 800bbba:	021b      	lsls	r3, r3, #8
 800bbbc:	492b      	ldr	r1, [pc, #172]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	604b      	str	r3, [r1, #4]
 800bbc2:	e01a      	b.n	800bbfa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bbc4:	4b29      	ldr	r3, [pc, #164]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a28      	ldr	r2, [pc, #160]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bbca:	f023 0301 	bic.w	r3, r3, #1
 800bbce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bbd0:	f7fb f916 	bl	8006e00 <HAL_GetTick>
 800bbd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bbd6:	e008      	b.n	800bbea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bbd8:	f7fb f912 	bl	8006e00 <HAL_GetTick>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d901      	bls.n	800bbea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	e314      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bbea:	4b20      	ldr	r3, [pc, #128]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f003 0302 	and.w	r3, r3, #2
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1f0      	bne.n	800bbd8 <HAL_RCC_OscConfig+0x1dc>
 800bbf6:	e000      	b.n	800bbfa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bbf8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d073      	beq.n	800bcee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	2b08      	cmp	r3, #8
 800bc0a:	d005      	beq.n	800bc18 <HAL_RCC_OscConfig+0x21c>
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	2b0c      	cmp	r3, #12
 800bc10:	d10e      	bne.n	800bc30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	2b03      	cmp	r3, #3
 800bc16:	d10b      	bne.n	800bc30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc18:	4b14      	ldr	r3, [pc, #80]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d063      	beq.n	800bcec <HAL_RCC_OscConfig+0x2f0>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d15f      	bne.n	800bcec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e2f1      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc38:	d106      	bne.n	800bc48 <HAL_RCC_OscConfig+0x24c>
 800bc3a:	4b0c      	ldr	r3, [pc, #48]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a0b      	ldr	r2, [pc, #44]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bc40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc44:	6013      	str	r3, [r2, #0]
 800bc46:	e025      	b.n	800bc94 <HAL_RCC_OscConfig+0x298>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc50:	d114      	bne.n	800bc7c <HAL_RCC_OscConfig+0x280>
 800bc52:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a05      	ldr	r2, [pc, #20]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bc58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	4b03      	ldr	r3, [pc, #12]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a02      	ldr	r2, [pc, #8]	; (800bc6c <HAL_RCC_OscConfig+0x270>)
 800bc64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	e013      	b.n	800bc94 <HAL_RCC_OscConfig+0x298>
 800bc6c:	40021000 	.word	0x40021000
 800bc70:	0801e13c 	.word	0x0801e13c
 800bc74:	20000024 	.word	0x20000024
 800bc78:	20000028 	.word	0x20000028
 800bc7c:	4ba0      	ldr	r3, [pc, #640]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a9f      	ldr	r2, [pc, #636]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bc82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc86:	6013      	str	r3, [r2, #0]
 800bc88:	4b9d      	ldr	r3, [pc, #628]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a9c      	ldr	r2, [pc, #624]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bc8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d013      	beq.n	800bcc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc9c:	f7fb f8b0 	bl	8006e00 <HAL_GetTick>
 800bca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bca2:	e008      	b.n	800bcb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bca4:	f7fb f8ac 	bl	8006e00 <HAL_GetTick>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	2b64      	cmp	r3, #100	; 0x64
 800bcb0:	d901      	bls.n	800bcb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e2ae      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bcb6:	4b92      	ldr	r3, [pc, #584]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0f0      	beq.n	800bca4 <HAL_RCC_OscConfig+0x2a8>
 800bcc2:	e014      	b.n	800bcee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc4:	f7fb f89c 	bl	8006e00 <HAL_GetTick>
 800bcc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bcca:	e008      	b.n	800bcde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bccc:	f7fb f898 	bl	8006e00 <HAL_GetTick>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	2b64      	cmp	r3, #100	; 0x64
 800bcd8:	d901      	bls.n	800bcde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	e29a      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bcde:	4b88      	ldr	r3, [pc, #544]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1f0      	bne.n	800bccc <HAL_RCC_OscConfig+0x2d0>
 800bcea:	e000      	b.n	800bcee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bcec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0302 	and.w	r3, r3, #2
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d060      	beq.n	800bdbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d005      	beq.n	800bd0c <HAL_RCC_OscConfig+0x310>
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	2b0c      	cmp	r3, #12
 800bd04:	d119      	bne.n	800bd3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	d116      	bne.n	800bd3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd0c:	4b7c      	ldr	r3, [pc, #496]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d005      	beq.n	800bd24 <HAL_RCC_OscConfig+0x328>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e277      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd24:	4b76      	ldr	r3, [pc, #472]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	061b      	lsls	r3, r3, #24
 800bd32:	4973      	ldr	r1, [pc, #460]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd38:	e040      	b.n	800bdbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d023      	beq.n	800bd8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bd42:	4b6f      	ldr	r3, [pc, #444]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a6e      	ldr	r2, [pc, #440]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bd48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd4e:	f7fb f857 	bl	8006e00 <HAL_GetTick>
 800bd52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd54:	e008      	b.n	800bd68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd56:	f7fb f853 	bl	8006e00 <HAL_GetTick>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d901      	bls.n	800bd68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e255      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd68:	4b65      	ldr	r3, [pc, #404]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d0f0      	beq.n	800bd56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd74:	4b62      	ldr	r3, [pc, #392]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	061b      	lsls	r3, r3, #24
 800bd82:	495f      	ldr	r1, [pc, #380]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bd84:	4313      	orrs	r3, r2
 800bd86:	604b      	str	r3, [r1, #4]
 800bd88:	e018      	b.n	800bdbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd8a:	4b5d      	ldr	r3, [pc, #372]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a5c      	ldr	r2, [pc, #368]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bd90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd96:	f7fb f833 	bl	8006e00 <HAL_GetTick>
 800bd9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bd9c:	e008      	b.n	800bdb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd9e:	f7fb f82f 	bl	8006e00 <HAL_GetTick>
 800bda2:	4602      	mov	r2, r0
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	1ad3      	subs	r3, r2, r3
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d901      	bls.n	800bdb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800bdac:	2303      	movs	r3, #3
 800bdae:	e231      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bdb0:	4b53      	ldr	r3, [pc, #332]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1f0      	bne.n	800bd9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 0308 	and.w	r3, r3, #8
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d03c      	beq.n	800be42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d01c      	beq.n	800be0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bdd0:	4b4b      	ldr	r3, [pc, #300]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bdd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdd6:	4a4a      	ldr	r2, [pc, #296]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bdd8:	f043 0301 	orr.w	r3, r3, #1
 800bddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bde0:	f7fb f80e 	bl	8006e00 <HAL_GetTick>
 800bde4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bde6:	e008      	b.n	800bdfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bde8:	f7fb f80a 	bl	8006e00 <HAL_GetTick>
 800bdec:	4602      	mov	r2, r0
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d901      	bls.n	800bdfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	e20c      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bdfa:	4b41      	ldr	r3, [pc, #260]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bdfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be00:	f003 0302 	and.w	r3, r3, #2
 800be04:	2b00      	cmp	r3, #0
 800be06:	d0ef      	beq.n	800bde8 <HAL_RCC_OscConfig+0x3ec>
 800be08:	e01b      	b.n	800be42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be0a:	4b3d      	ldr	r3, [pc, #244]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800be0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be10:	4a3b      	ldr	r2, [pc, #236]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800be12:	f023 0301 	bic.w	r3, r3, #1
 800be16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be1a:	f7fa fff1 	bl	8006e00 <HAL_GetTick>
 800be1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800be20:	e008      	b.n	800be34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be22:	f7fa ffed 	bl	8006e00 <HAL_GetTick>
 800be26:	4602      	mov	r2, r0
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	1ad3      	subs	r3, r2, r3
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d901      	bls.n	800be34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800be30:	2303      	movs	r3, #3
 800be32:	e1ef      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800be34:	4b32      	ldr	r3, [pc, #200]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800be36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be3a:	f003 0302 	and.w	r3, r3, #2
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1ef      	bne.n	800be22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 0304 	and.w	r3, r3, #4
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 80a6 	beq.w	800bf9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be50:	2300      	movs	r3, #0
 800be52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800be54:	4b2a      	ldr	r3, [pc, #168]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800be56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10d      	bne.n	800be7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be60:	4b27      	ldr	r3, [pc, #156]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800be62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be64:	4a26      	ldr	r2, [pc, #152]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800be66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be6a:	6593      	str	r3, [r2, #88]	; 0x58
 800be6c:	4b24      	ldr	r3, [pc, #144]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800be6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be74:	60bb      	str	r3, [r7, #8]
 800be76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be78:	2301      	movs	r3, #1
 800be7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800be7c:	4b21      	ldr	r3, [pc, #132]	; (800bf04 <HAL_RCC_OscConfig+0x508>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be84:	2b00      	cmp	r3, #0
 800be86:	d118      	bne.n	800beba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be88:	4b1e      	ldr	r3, [pc, #120]	; (800bf04 <HAL_RCC_OscConfig+0x508>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a1d      	ldr	r2, [pc, #116]	; (800bf04 <HAL_RCC_OscConfig+0x508>)
 800be8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800be94:	f7fa ffb4 	bl	8006e00 <HAL_GetTick>
 800be98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800be9a:	e008      	b.n	800beae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be9c:	f7fa ffb0 	bl	8006e00 <HAL_GetTick>
 800bea0:	4602      	mov	r2, r0
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d901      	bls.n	800beae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800beaa:	2303      	movs	r3, #3
 800beac:	e1b2      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800beae:	4b15      	ldr	r3, [pc, #84]	; (800bf04 <HAL_RCC_OscConfig+0x508>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d0f0      	beq.n	800be9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d108      	bne.n	800bed4 <HAL_RCC_OscConfig+0x4d8>
 800bec2:	4b0f      	ldr	r3, [pc, #60]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bec8:	4a0d      	ldr	r2, [pc, #52]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800beca:	f043 0301 	orr.w	r3, r3, #1
 800bece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bed2:	e029      	b.n	800bf28 <HAL_RCC_OscConfig+0x52c>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	2b05      	cmp	r3, #5
 800beda:	d115      	bne.n	800bf08 <HAL_RCC_OscConfig+0x50c>
 800bedc:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bee2:	4a07      	ldr	r2, [pc, #28]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bee4:	f043 0304 	orr.w	r3, r3, #4
 800bee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800beec:	4b04      	ldr	r3, [pc, #16]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800beee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bef2:	4a03      	ldr	r2, [pc, #12]	; (800bf00 <HAL_RCC_OscConfig+0x504>)
 800bef4:	f043 0301 	orr.w	r3, r3, #1
 800bef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800befc:	e014      	b.n	800bf28 <HAL_RCC_OscConfig+0x52c>
 800befe:	bf00      	nop
 800bf00:	40021000 	.word	0x40021000
 800bf04:	40007000 	.word	0x40007000
 800bf08:	4b9a      	ldr	r3, [pc, #616]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bf0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf0e:	4a99      	ldr	r2, [pc, #612]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bf10:	f023 0301 	bic.w	r3, r3, #1
 800bf14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bf18:	4b96      	ldr	r3, [pc, #600]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bf1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf1e:	4a95      	ldr	r2, [pc, #596]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bf20:	f023 0304 	bic.w	r3, r3, #4
 800bf24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d016      	beq.n	800bf5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf30:	f7fa ff66 	bl	8006e00 <HAL_GetTick>
 800bf34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf36:	e00a      	b.n	800bf4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf38:	f7fa ff62 	bl	8006e00 <HAL_GetTick>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d901      	bls.n	800bf4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	e162      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf4e:	4b89      	ldr	r3, [pc, #548]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bf50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf54:	f003 0302 	and.w	r3, r3, #2
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d0ed      	beq.n	800bf38 <HAL_RCC_OscConfig+0x53c>
 800bf5c:	e015      	b.n	800bf8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf5e:	f7fa ff4f 	bl	8006e00 <HAL_GetTick>
 800bf62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bf64:	e00a      	b.n	800bf7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf66:	f7fa ff4b 	bl	8006e00 <HAL_GetTick>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d901      	bls.n	800bf7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e14b      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bf7c:	4b7d      	ldr	r3, [pc, #500]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bf7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf82:	f003 0302 	and.w	r3, r3, #2
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1ed      	bne.n	800bf66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf8a:	7ffb      	ldrb	r3, [r7, #31]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d105      	bne.n	800bf9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf90:	4b78      	ldr	r3, [pc, #480]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bf92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf94:	4a77      	ldr	r2, [pc, #476]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bf96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 0320 	and.w	r3, r3, #32
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d03c      	beq.n	800c022 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d01c      	beq.n	800bfea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bfb0:	4b70      	ldr	r3, [pc, #448]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bfb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfb6:	4a6f      	ldr	r2, [pc, #444]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bfb8:	f043 0301 	orr.w	r3, r3, #1
 800bfbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfc0:	f7fa ff1e 	bl	8006e00 <HAL_GetTick>
 800bfc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bfc6:	e008      	b.n	800bfda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bfc8:	f7fa ff1a 	bl	8006e00 <HAL_GetTick>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d901      	bls.n	800bfda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	e11c      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bfda:	4b66      	ldr	r3, [pc, #408]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bfdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfe0:	f003 0302 	and.w	r3, r3, #2
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0ef      	beq.n	800bfc8 <HAL_RCC_OscConfig+0x5cc>
 800bfe8:	e01b      	b.n	800c022 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bfea:	4b62      	ldr	r3, [pc, #392]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bfec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bff0:	4a60      	ldr	r2, [pc, #384]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800bff2:	f023 0301 	bic.w	r3, r3, #1
 800bff6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bffa:	f7fa ff01 	bl	8006e00 <HAL_GetTick>
 800bffe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c000:	e008      	b.n	800c014 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c002:	f7fa fefd 	bl	8006e00 <HAL_GetTick>
 800c006:	4602      	mov	r2, r0
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	1ad3      	subs	r3, r2, r3
 800c00c:	2b02      	cmp	r3, #2
 800c00e:	d901      	bls.n	800c014 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c010:	2303      	movs	r3, #3
 800c012:	e0ff      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c014:	4b57      	ldr	r3, [pc, #348]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c01a:	f003 0302 	and.w	r3, r3, #2
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1ef      	bne.n	800c002 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c026:	2b00      	cmp	r3, #0
 800c028:	f000 80f3 	beq.w	800c212 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c030:	2b02      	cmp	r3, #2
 800c032:	f040 80c9 	bne.w	800c1c8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c036:	4b4f      	ldr	r3, [pc, #316]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	f003 0203 	and.w	r2, r3, #3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c046:	429a      	cmp	r2, r3
 800c048:	d12c      	bne.n	800c0a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c054:	3b01      	subs	r3, #1
 800c056:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c058:	429a      	cmp	r2, r3
 800c05a:	d123      	bne.n	800c0a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c066:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c068:	429a      	cmp	r2, r3
 800c06a:	d11b      	bne.n	800c0a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c076:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c078:	429a      	cmp	r2, r3
 800c07a:	d113      	bne.n	800c0a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c086:	085b      	lsrs	r3, r3, #1
 800c088:	3b01      	subs	r3, #1
 800c08a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d109      	bne.n	800c0a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09a:	085b      	lsrs	r3, r3, #1
 800c09c:	3b01      	subs	r3, #1
 800c09e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d06b      	beq.n	800c17c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	2b0c      	cmp	r3, #12
 800c0a8:	d062      	beq.n	800c170 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c0aa:	4b32      	ldr	r3, [pc, #200]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e0ac      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c0ba:	4b2e      	ldr	r3, [pc, #184]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a2d      	ldr	r2, [pc, #180]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c0c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c0c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c0c6:	f7fa fe9b 	bl	8006e00 <HAL_GetTick>
 800c0ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c0cc:	e008      	b.n	800c0e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0ce:	f7fa fe97 	bl	8006e00 <HAL_GetTick>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	d901      	bls.n	800c0e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	e099      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c0e0:	4b24      	ldr	r3, [pc, #144]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1f0      	bne.n	800c0ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c0ec:	4b21      	ldr	r3, [pc, #132]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c0ee:	68da      	ldr	r2, [r3, #12]
 800c0f0:	4b21      	ldr	r3, [pc, #132]	; (800c178 <HAL_RCC_OscConfig+0x77c>)
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c0fc:	3a01      	subs	r2, #1
 800c0fe:	0112      	lsls	r2, r2, #4
 800c100:	4311      	orrs	r1, r2
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c106:	0212      	lsls	r2, r2, #8
 800c108:	4311      	orrs	r1, r2
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c10e:	0852      	lsrs	r2, r2, #1
 800c110:	3a01      	subs	r2, #1
 800c112:	0552      	lsls	r2, r2, #21
 800c114:	4311      	orrs	r1, r2
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c11a:	0852      	lsrs	r2, r2, #1
 800c11c:	3a01      	subs	r2, #1
 800c11e:	0652      	lsls	r2, r2, #25
 800c120:	4311      	orrs	r1, r2
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c126:	06d2      	lsls	r2, r2, #27
 800c128:	430a      	orrs	r2, r1
 800c12a:	4912      	ldr	r1, [pc, #72]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c12c:	4313      	orrs	r3, r2
 800c12e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c130:	4b10      	ldr	r3, [pc, #64]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a0f      	ldr	r2, [pc, #60]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c13a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c13c:	4b0d      	ldr	r3, [pc, #52]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	4a0c      	ldr	r2, [pc, #48]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c146:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c148:	f7fa fe5a 	bl	8006e00 <HAL_GetTick>
 800c14c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c14e:	e008      	b.n	800c162 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c150:	f7fa fe56 	bl	8006e00 <HAL_GetTick>
 800c154:	4602      	mov	r2, r0
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d901      	bls.n	800c162 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	e058      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c162:	4b04      	ldr	r3, [pc, #16]	; (800c174 <HAL_RCC_OscConfig+0x778>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d0f0      	beq.n	800c150 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c16e:	e050      	b.n	800c212 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	e04f      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
 800c174:	40021000 	.word	0x40021000
 800c178:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c17c:	4b27      	ldr	r3, [pc, #156]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d144      	bne.n	800c212 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c188:	4b24      	ldr	r3, [pc, #144]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a23      	ldr	r2, [pc, #140]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c18e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c192:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c194:	4b21      	ldr	r3, [pc, #132]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	4a20      	ldr	r2, [pc, #128]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c19a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c19e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c1a0:	f7fa fe2e 	bl	8006e00 <HAL_GetTick>
 800c1a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1a6:	e008      	b.n	800c1ba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1a8:	f7fa fe2a 	bl	8006e00 <HAL_GetTick>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	2b02      	cmp	r3, #2
 800c1b4:	d901      	bls.n	800c1ba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800c1b6:	2303      	movs	r3, #3
 800c1b8:	e02c      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1ba:	4b18      	ldr	r3, [pc, #96]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d0f0      	beq.n	800c1a8 <HAL_RCC_OscConfig+0x7ac>
 800c1c6:	e024      	b.n	800c212 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	2b0c      	cmp	r3, #12
 800c1cc:	d01f      	beq.n	800c20e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1ce:	4b13      	ldr	r3, [pc, #76]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a12      	ldr	r2, [pc, #72]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c1d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c1d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1da:	f7fa fe11 	bl	8006e00 <HAL_GetTick>
 800c1de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c1e0:	e008      	b.n	800c1f4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1e2:	f7fa fe0d 	bl	8006e00 <HAL_GetTick>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d901      	bls.n	800c1f4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800c1f0:	2303      	movs	r3, #3
 800c1f2:	e00f      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c1f4:	4b09      	ldr	r3, [pc, #36]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1f0      	bne.n	800c1e2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c200:	4b06      	ldr	r3, [pc, #24]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c202:	68da      	ldr	r2, [r3, #12]
 800c204:	4905      	ldr	r1, [pc, #20]	; (800c21c <HAL_RCC_OscConfig+0x820>)
 800c206:	4b06      	ldr	r3, [pc, #24]	; (800c220 <HAL_RCC_OscConfig+0x824>)
 800c208:	4013      	ands	r3, r2
 800c20a:	60cb      	str	r3, [r1, #12]
 800c20c:	e001      	b.n	800c212 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e000      	b.n	800c214 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3720      	adds	r7, #32
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	40021000 	.word	0x40021000
 800c220:	feeefffc 	.word	0xfeeefffc

0800c224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	e0e7      	b.n	800c408 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c238:	4b75      	ldr	r3, [pc, #468]	; (800c410 <HAL_RCC_ClockConfig+0x1ec>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 0307 	and.w	r3, r3, #7
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	429a      	cmp	r2, r3
 800c244:	d910      	bls.n	800c268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c246:	4b72      	ldr	r3, [pc, #456]	; (800c410 <HAL_RCC_ClockConfig+0x1ec>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f023 0207 	bic.w	r2, r3, #7
 800c24e:	4970      	ldr	r1, [pc, #448]	; (800c410 <HAL_RCC_ClockConfig+0x1ec>)
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	4313      	orrs	r3, r2
 800c254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c256:	4b6e      	ldr	r3, [pc, #440]	; (800c410 <HAL_RCC_ClockConfig+0x1ec>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f003 0307 	and.w	r3, r3, #7
 800c25e:	683a      	ldr	r2, [r7, #0]
 800c260:	429a      	cmp	r2, r3
 800c262:	d001      	beq.n	800c268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	e0cf      	b.n	800c408 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f003 0302 	and.w	r3, r3, #2
 800c270:	2b00      	cmp	r3, #0
 800c272:	d010      	beq.n	800c296 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	689a      	ldr	r2, [r3, #8]
 800c278:	4b66      	ldr	r3, [pc, #408]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c280:	429a      	cmp	r2, r3
 800c282:	d908      	bls.n	800c296 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c284:	4b63      	ldr	r3, [pc, #396]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	4960      	ldr	r1, [pc, #384]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c292:	4313      	orrs	r3, r2
 800c294:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d04c      	beq.n	800c33c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	d107      	bne.n	800c2ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c2aa:	4b5a      	ldr	r3, [pc, #360]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d121      	bne.n	800c2fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e0a6      	b.n	800c408 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	d107      	bne.n	800c2d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c2c2:	4b54      	ldr	r3, [pc, #336]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d115      	bne.n	800c2fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e09a      	b.n	800c408 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d107      	bne.n	800c2ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c2da:	4b4e      	ldr	r3, [pc, #312]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 0302 	and.w	r3, r3, #2
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d109      	bne.n	800c2fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e08e      	b.n	800c408 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c2ea:	4b4a      	ldr	r3, [pc, #296]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e086      	b.n	800c408 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c2fa:	4b46      	ldr	r3, [pc, #280]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	f023 0203 	bic.w	r2, r3, #3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	4943      	ldr	r1, [pc, #268]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c308:	4313      	orrs	r3, r2
 800c30a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c30c:	f7fa fd78 	bl	8006e00 <HAL_GetTick>
 800c310:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c312:	e00a      	b.n	800c32a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c314:	f7fa fd74 	bl	8006e00 <HAL_GetTick>
 800c318:	4602      	mov	r2, r0
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	1ad3      	subs	r3, r2, r3
 800c31e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c322:	4293      	cmp	r3, r2
 800c324:	d901      	bls.n	800c32a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c326:	2303      	movs	r3, #3
 800c328:	e06e      	b.n	800c408 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c32a:	4b3a      	ldr	r3, [pc, #232]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f003 020c 	and.w	r2, r3, #12
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	429a      	cmp	r2, r3
 800c33a:	d1eb      	bne.n	800c314 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 0302 	and.w	r3, r3, #2
 800c344:	2b00      	cmp	r3, #0
 800c346:	d010      	beq.n	800c36a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	689a      	ldr	r2, [r3, #8]
 800c34c:	4b31      	ldr	r3, [pc, #196]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c354:	429a      	cmp	r2, r3
 800c356:	d208      	bcs.n	800c36a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c358:	4b2e      	ldr	r3, [pc, #184]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	492b      	ldr	r1, [pc, #172]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c366:	4313      	orrs	r3, r2
 800c368:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c36a:	4b29      	ldr	r3, [pc, #164]	; (800c410 <HAL_RCC_ClockConfig+0x1ec>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 0307 	and.w	r3, r3, #7
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	429a      	cmp	r2, r3
 800c376:	d210      	bcs.n	800c39a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c378:	4b25      	ldr	r3, [pc, #148]	; (800c410 <HAL_RCC_ClockConfig+0x1ec>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f023 0207 	bic.w	r2, r3, #7
 800c380:	4923      	ldr	r1, [pc, #140]	; (800c410 <HAL_RCC_ClockConfig+0x1ec>)
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	4313      	orrs	r3, r2
 800c386:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c388:	4b21      	ldr	r3, [pc, #132]	; (800c410 <HAL_RCC_ClockConfig+0x1ec>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 0307 	and.w	r3, r3, #7
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d001      	beq.n	800c39a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e036      	b.n	800c408 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 0304 	and.w	r3, r3, #4
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d008      	beq.n	800c3b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3a6:	4b1b      	ldr	r3, [pc, #108]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	4918      	ldr	r1, [pc, #96]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f003 0308 	and.w	r3, r3, #8
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d009      	beq.n	800c3d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c3c4:	4b13      	ldr	r3, [pc, #76]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	00db      	lsls	r3, r3, #3
 800c3d2:	4910      	ldr	r1, [pc, #64]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c3d8:	f000 f824 	bl	800c424 <HAL_RCC_GetSysClockFreq>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	4b0d      	ldr	r3, [pc, #52]	; (800c414 <HAL_RCC_ClockConfig+0x1f0>)
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	091b      	lsrs	r3, r3, #4
 800c3e4:	f003 030f 	and.w	r3, r3, #15
 800c3e8:	490b      	ldr	r1, [pc, #44]	; (800c418 <HAL_RCC_ClockConfig+0x1f4>)
 800c3ea:	5ccb      	ldrb	r3, [r1, r3]
 800c3ec:	f003 031f 	and.w	r3, r3, #31
 800c3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c3f4:	4a09      	ldr	r2, [pc, #36]	; (800c41c <HAL_RCC_ClockConfig+0x1f8>)
 800c3f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c3f8:	4b09      	ldr	r3, [pc, #36]	; (800c420 <HAL_RCC_ClockConfig+0x1fc>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fa fcaf 	bl	8006d60 <HAL_InitTick>
 800c402:	4603      	mov	r3, r0
 800c404:	72fb      	strb	r3, [r7, #11]

  return status;
 800c406:	7afb      	ldrb	r3, [r7, #11]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	40022000 	.word	0x40022000
 800c414:	40021000 	.word	0x40021000
 800c418:	0801e13c 	.word	0x0801e13c
 800c41c:	20000024 	.word	0x20000024
 800c420:	20000028 	.word	0x20000028

0800c424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c424:	b480      	push	{r7}
 800c426:	b089      	sub	sp, #36	; 0x24
 800c428:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c42a:	2300      	movs	r3, #0
 800c42c:	61fb      	str	r3, [r7, #28]
 800c42e:	2300      	movs	r3, #0
 800c430:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c432:	4b3e      	ldr	r3, [pc, #248]	; (800c52c <HAL_RCC_GetSysClockFreq+0x108>)
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	f003 030c 	and.w	r3, r3, #12
 800c43a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c43c:	4b3b      	ldr	r3, [pc, #236]	; (800c52c <HAL_RCC_GetSysClockFreq+0x108>)
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	f003 0303 	and.w	r3, r3, #3
 800c444:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d005      	beq.n	800c458 <HAL_RCC_GetSysClockFreq+0x34>
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	2b0c      	cmp	r3, #12
 800c450:	d121      	bne.n	800c496 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d11e      	bne.n	800c496 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c458:	4b34      	ldr	r3, [pc, #208]	; (800c52c <HAL_RCC_GetSysClockFreq+0x108>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 0308 	and.w	r3, r3, #8
 800c460:	2b00      	cmp	r3, #0
 800c462:	d107      	bne.n	800c474 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c464:	4b31      	ldr	r3, [pc, #196]	; (800c52c <HAL_RCC_GetSysClockFreq+0x108>)
 800c466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c46a:	0a1b      	lsrs	r3, r3, #8
 800c46c:	f003 030f 	and.w	r3, r3, #15
 800c470:	61fb      	str	r3, [r7, #28]
 800c472:	e005      	b.n	800c480 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c474:	4b2d      	ldr	r3, [pc, #180]	; (800c52c <HAL_RCC_GetSysClockFreq+0x108>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	091b      	lsrs	r3, r3, #4
 800c47a:	f003 030f 	and.w	r3, r3, #15
 800c47e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c480:	4a2b      	ldr	r2, [pc, #172]	; (800c530 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c488:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d10d      	bne.n	800c4ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c494:	e00a      	b.n	800c4ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	2b04      	cmp	r3, #4
 800c49a:	d102      	bne.n	800c4a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c49c:	4b25      	ldr	r3, [pc, #148]	; (800c534 <HAL_RCC_GetSysClockFreq+0x110>)
 800c49e:	61bb      	str	r3, [r7, #24]
 800c4a0:	e004      	b.n	800c4ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	2b08      	cmp	r3, #8
 800c4a6:	d101      	bne.n	800c4ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c4a8:	4b23      	ldr	r3, [pc, #140]	; (800c538 <HAL_RCC_GetSysClockFreq+0x114>)
 800c4aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	2b0c      	cmp	r3, #12
 800c4b0:	d134      	bne.n	800c51c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c4b2:	4b1e      	ldr	r3, [pc, #120]	; (800c52c <HAL_RCC_GetSysClockFreq+0x108>)
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	f003 0303 	and.w	r3, r3, #3
 800c4ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2b02      	cmp	r3, #2
 800c4c0:	d003      	beq.n	800c4ca <HAL_RCC_GetSysClockFreq+0xa6>
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	d003      	beq.n	800c4d0 <HAL_RCC_GetSysClockFreq+0xac>
 800c4c8:	e005      	b.n	800c4d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c4ca:	4b1a      	ldr	r3, [pc, #104]	; (800c534 <HAL_RCC_GetSysClockFreq+0x110>)
 800c4cc:	617b      	str	r3, [r7, #20]
      break;
 800c4ce:	e005      	b.n	800c4dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c4d0:	4b19      	ldr	r3, [pc, #100]	; (800c538 <HAL_RCC_GetSysClockFreq+0x114>)
 800c4d2:	617b      	str	r3, [r7, #20]
      break;
 800c4d4:	e002      	b.n	800c4dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	617b      	str	r3, [r7, #20]
      break;
 800c4da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c4dc:	4b13      	ldr	r3, [pc, #76]	; (800c52c <HAL_RCC_GetSysClockFreq+0x108>)
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	091b      	lsrs	r3, r3, #4
 800c4e2:	f003 0307 	and.w	r3, r3, #7
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c4ea:	4b10      	ldr	r3, [pc, #64]	; (800c52c <HAL_RCC_GetSysClockFreq+0x108>)
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	0a1b      	lsrs	r3, r3, #8
 800c4f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	fb03 f202 	mul.w	r2, r3, r2
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c500:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c502:	4b0a      	ldr	r3, [pc, #40]	; (800c52c <HAL_RCC_GetSysClockFreq+0x108>)
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	0e5b      	lsrs	r3, r3, #25
 800c508:	f003 0303 	and.w	r3, r3, #3
 800c50c:	3301      	adds	r3, #1
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	fbb2 f3f3 	udiv	r3, r2, r3
 800c51a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c51c:	69bb      	ldr	r3, [r7, #24]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3724      	adds	r7, #36	; 0x24
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	40021000 	.word	0x40021000
 800c530:	0801e154 	.word	0x0801e154
 800c534:	00f42400 	.word	0x00f42400
 800c538:	007a1200 	.word	0x007a1200

0800c53c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c540:	4b03      	ldr	r3, [pc, #12]	; (800c550 <HAL_RCC_GetHCLKFreq+0x14>)
 800c542:	681b      	ldr	r3, [r3, #0]
}
 800c544:	4618      	mov	r0, r3
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	20000024 	.word	0x20000024

0800c554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c558:	f7ff fff0 	bl	800c53c <HAL_RCC_GetHCLKFreq>
 800c55c:	4602      	mov	r2, r0
 800c55e:	4b06      	ldr	r3, [pc, #24]	; (800c578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	0a1b      	lsrs	r3, r3, #8
 800c564:	f003 0307 	and.w	r3, r3, #7
 800c568:	4904      	ldr	r1, [pc, #16]	; (800c57c <HAL_RCC_GetPCLK1Freq+0x28>)
 800c56a:	5ccb      	ldrb	r3, [r1, r3]
 800c56c:	f003 031f 	and.w	r3, r3, #31
 800c570:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c574:	4618      	mov	r0, r3
 800c576:	bd80      	pop	{r7, pc}
 800c578:	40021000 	.word	0x40021000
 800c57c:	0801e14c 	.word	0x0801e14c

0800c580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c584:	f7ff ffda 	bl	800c53c <HAL_RCC_GetHCLKFreq>
 800c588:	4602      	mov	r2, r0
 800c58a:	4b06      	ldr	r3, [pc, #24]	; (800c5a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	0adb      	lsrs	r3, r3, #11
 800c590:	f003 0307 	and.w	r3, r3, #7
 800c594:	4904      	ldr	r1, [pc, #16]	; (800c5a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c596:	5ccb      	ldrb	r3, [r1, r3]
 800c598:	f003 031f 	and.w	r3, r3, #31
 800c59c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	40021000 	.word	0x40021000
 800c5a8:	0801e14c 	.word	0x0801e14c

0800c5ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c5b8:	4b2a      	ldr	r3, [pc, #168]	; (800c664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c5ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d003      	beq.n	800c5cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c5c4:	f7ff f9a6 	bl	800b914 <HAL_PWREx_GetVoltageRange>
 800c5c8:	6178      	str	r0, [r7, #20]
 800c5ca:	e014      	b.n	800c5f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c5cc:	4b25      	ldr	r3, [pc, #148]	; (800c664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c5ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d0:	4a24      	ldr	r2, [pc, #144]	; (800c664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c5d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5d6:	6593      	str	r3, [r2, #88]	; 0x58
 800c5d8:	4b22      	ldr	r3, [pc, #136]	; (800c664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c5e4:	f7ff f996 	bl	800b914 <HAL_PWREx_GetVoltageRange>
 800c5e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c5ea:	4b1e      	ldr	r3, [pc, #120]	; (800c664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ee:	4a1d      	ldr	r2, [pc, #116]	; (800c664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c5f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5fc:	d10b      	bne.n	800c616 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2b80      	cmp	r3, #128	; 0x80
 800c602:	d919      	bls.n	800c638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2ba0      	cmp	r3, #160	; 0xa0
 800c608:	d902      	bls.n	800c610 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c60a:	2302      	movs	r3, #2
 800c60c:	613b      	str	r3, [r7, #16]
 800c60e:	e013      	b.n	800c638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c610:	2301      	movs	r3, #1
 800c612:	613b      	str	r3, [r7, #16]
 800c614:	e010      	b.n	800c638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b80      	cmp	r3, #128	; 0x80
 800c61a:	d902      	bls.n	800c622 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c61c:	2303      	movs	r3, #3
 800c61e:	613b      	str	r3, [r7, #16]
 800c620:	e00a      	b.n	800c638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2b80      	cmp	r3, #128	; 0x80
 800c626:	d102      	bne.n	800c62e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c628:	2302      	movs	r3, #2
 800c62a:	613b      	str	r3, [r7, #16]
 800c62c:	e004      	b.n	800c638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b70      	cmp	r3, #112	; 0x70
 800c632:	d101      	bne.n	800c638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c634:	2301      	movs	r3, #1
 800c636:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c638:	4b0b      	ldr	r3, [pc, #44]	; (800c668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f023 0207 	bic.w	r2, r3, #7
 800c640:	4909      	ldr	r1, [pc, #36]	; (800c668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	4313      	orrs	r3, r2
 800c646:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c648:	4b07      	ldr	r3, [pc, #28]	; (800c668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 0307 	and.w	r3, r3, #7
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	429a      	cmp	r2, r3
 800c654:	d001      	beq.n	800c65a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c656:	2301      	movs	r3, #1
 800c658:	e000      	b.n	800c65c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	40021000 	.word	0x40021000
 800c668:	40022000 	.word	0x40022000

0800c66c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c674:	2300      	movs	r3, #0
 800c676:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c678:	2300      	movs	r3, #0
 800c67a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c684:	2b00      	cmp	r3, #0
 800c686:	d031      	beq.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c68c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c690:	d01a      	beq.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c692:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c696:	d814      	bhi.n	800c6c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d009      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c69c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6a0:	d10f      	bne.n	800c6c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c6a2:	4b5d      	ldr	r3, [pc, #372]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	4a5c      	ldr	r2, [pc, #368]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c6a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c6ae:	e00c      	b.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f9ce 	bl	800ca58 <RCCEx_PLLSAI1_Config>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c6c0:	e003      	b.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	74fb      	strb	r3, [r7, #19]
      break;
 800c6c6:	e000      	b.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c6c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6ca:	7cfb      	ldrb	r3, [r7, #19]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10b      	bne.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c6d0:	4b51      	ldr	r3, [pc, #324]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6de:	494e      	ldr	r1, [pc, #312]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c6e6:	e001      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6e8:	7cfb      	ldrb	r3, [r7, #19]
 800c6ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 809e 	beq.w	800c836 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c6fe:	4b46      	ldr	r3, [pc, #280]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c70a:	2301      	movs	r3, #1
 800c70c:	e000      	b.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c70e:	2300      	movs	r3, #0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00d      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c714:	4b40      	ldr	r3, [pc, #256]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c718:	4a3f      	ldr	r2, [pc, #252]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c71a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c71e:	6593      	str	r3, [r2, #88]	; 0x58
 800c720:	4b3d      	ldr	r3, [pc, #244]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c728:	60bb      	str	r3, [r7, #8]
 800c72a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c72c:	2301      	movs	r3, #1
 800c72e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c730:	4b3a      	ldr	r3, [pc, #232]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a39      	ldr	r2, [pc, #228]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c73a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c73c:	f7fa fb60 	bl	8006e00 <HAL_GetTick>
 800c740:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c742:	e009      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c744:	f7fa fb5c 	bl	8006e00 <HAL_GetTick>
 800c748:	4602      	mov	r2, r0
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	1ad3      	subs	r3, r2, r3
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d902      	bls.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c752:	2303      	movs	r3, #3
 800c754:	74fb      	strb	r3, [r7, #19]
        break;
 800c756:	e005      	b.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c758:	4b30      	ldr	r3, [pc, #192]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0ef      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c764:	7cfb      	ldrb	r3, [r7, #19]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d15a      	bne.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c76a:	4b2b      	ldr	r3, [pc, #172]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c774:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d01e      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c780:	697a      	ldr	r2, [r7, #20]
 800c782:	429a      	cmp	r2, r3
 800c784:	d019      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c786:	4b24      	ldr	r3, [pc, #144]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c78c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c790:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c792:	4b21      	ldr	r3, [pc, #132]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c798:	4a1f      	ldr	r2, [pc, #124]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c79a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c79e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c7a2:	4b1d      	ldr	r3, [pc, #116]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7a8:	4a1b      	ldr	r2, [pc, #108]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c7b2:	4a19      	ldr	r2, [pc, #100]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d016      	beq.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7c4:	f7fa fb1c 	bl	8006e00 <HAL_GetTick>
 800c7c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c7ca:	e00b      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7cc:	f7fa fb18 	bl	8006e00 <HAL_GetTick>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d902      	bls.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c7de:	2303      	movs	r3, #3
 800c7e0:	74fb      	strb	r3, [r7, #19]
            break;
 800c7e2:	e006      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c7e4:	4b0c      	ldr	r3, [pc, #48]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7ea:	f003 0302 	and.w	r3, r3, #2
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d0ec      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c7f2:	7cfb      	ldrb	r3, [r7, #19]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d10b      	bne.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c7f8:	4b07      	ldr	r3, [pc, #28]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c806:	4904      	ldr	r1, [pc, #16]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c808:	4313      	orrs	r3, r2
 800c80a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c80e:	e009      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c810:	7cfb      	ldrb	r3, [r7, #19]
 800c812:	74bb      	strb	r3, [r7, #18]
 800c814:	e006      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800c816:	bf00      	nop
 800c818:	40021000 	.word	0x40021000
 800c81c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c820:	7cfb      	ldrb	r3, [r7, #19]
 800c822:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c824:	7c7b      	ldrb	r3, [r7, #17]
 800c826:	2b01      	cmp	r3, #1
 800c828:	d105      	bne.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c82a:	4b8a      	ldr	r3, [pc, #552]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c82e:	4a89      	ldr	r2, [pc, #548]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c834:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00a      	beq.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c842:	4b84      	ldr	r3, [pc, #528]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c848:	f023 0203 	bic.w	r2, r3, #3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a1b      	ldr	r3, [r3, #32]
 800c850:	4980      	ldr	r1, [pc, #512]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c852:	4313      	orrs	r3, r2
 800c854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 0302 	and.w	r3, r3, #2
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00a      	beq.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c864:	4b7b      	ldr	r3, [pc, #492]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c86a:	f023 020c 	bic.w	r2, r3, #12
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c872:	4978      	ldr	r1, [pc, #480]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c874:	4313      	orrs	r3, r2
 800c876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 0320 	and.w	r3, r3, #32
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00a      	beq.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c886:	4b73      	ldr	r3, [pc, #460]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c88c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c894:	496f      	ldr	r1, [pc, #444]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c896:	4313      	orrs	r3, r2
 800c898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00a      	beq.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c8a8:	4b6a      	ldr	r3, [pc, #424]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c8aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b6:	4967      	ldr	r1, [pc, #412]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00a      	beq.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c8ca:	4b62      	ldr	r3, [pc, #392]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d8:	495e      	ldr	r1, [pc, #376]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00a      	beq.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c8ec:	4b59      	ldr	r3, [pc, #356]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c8ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fa:	4956      	ldr	r1, [pc, #344]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00a      	beq.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c90e:	4b51      	ldr	r3, [pc, #324]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91c:	494d      	ldr	r1, [pc, #308]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c91e:	4313      	orrs	r3, r2
 800c920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d028      	beq.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c930:	4b48      	ldr	r3, [pc, #288]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93e:	4945      	ldr	r1, [pc, #276]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c940:	4313      	orrs	r3, r2
 800c942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c94e:	d106      	bne.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c950:	4b40      	ldr	r3, [pc, #256]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	4a3f      	ldr	r2, [pc, #252]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c95a:	60d3      	str	r3, [r2, #12]
 800c95c:	e011      	b.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c962:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c966:	d10c      	bne.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	3304      	adds	r3, #4
 800c96c:	2101      	movs	r1, #1
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 f872 	bl	800ca58 <RCCEx_PLLSAI1_Config>
 800c974:	4603      	mov	r3, r0
 800c976:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c978:	7cfb      	ldrb	r3, [r7, #19]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800c97e:	7cfb      	ldrb	r3, [r7, #19]
 800c980:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d028      	beq.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c98e:	4b31      	ldr	r3, [pc, #196]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c994:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c99c:	492d      	ldr	r1, [pc, #180]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9ac:	d106      	bne.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c9ae:	4b29      	ldr	r3, [pc, #164]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	4a28      	ldr	r2, [pc, #160]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9b8:	60d3      	str	r3, [r2, #12]
 800c9ba:	e011      	b.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c9c4:	d10c      	bne.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 f843 	bl	800ca58 <RCCEx_PLLSAI1_Config>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c9d6:	7cfb      	ldrb	r3, [r7, #19]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800c9dc:	7cfb      	ldrb	r3, [r7, #19]
 800c9de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d01c      	beq.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c9ec:	4b19      	ldr	r3, [pc, #100]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9fa:	4916      	ldr	r1, [pc, #88]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca0a:	d10c      	bne.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	3304      	adds	r3, #4
 800ca10:	2102      	movs	r1, #2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f000 f820 	bl	800ca58 <RCCEx_PLLSAI1_Config>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ca1c:	7cfb      	ldrb	r3, [r7, #19]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d001      	beq.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800ca22:	7cfb      	ldrb	r3, [r7, #19]
 800ca24:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00a      	beq.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ca32:	4b08      	ldr	r3, [pc, #32]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca38:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca40:	4904      	ldr	r1, [pc, #16]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ca42:	4313      	orrs	r3, r2
 800ca44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ca48:	7cbb      	ldrb	r3, [r7, #18]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3718      	adds	r7, #24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	40021000 	.word	0x40021000

0800ca58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ca66:	4b74      	ldr	r3, [pc, #464]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	f003 0303 	and.w	r3, r3, #3
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d018      	beq.n	800caa4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ca72:	4b71      	ldr	r3, [pc, #452]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	f003 0203 	and.w	r2, r3, #3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d10d      	bne.n	800ca9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
       ||
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d009      	beq.n	800ca9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ca8a:	4b6b      	ldr	r3, [pc, #428]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	091b      	lsrs	r3, r3, #4
 800ca90:	f003 0307 	and.w	r3, r3, #7
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	685b      	ldr	r3, [r3, #4]
       ||
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d047      	beq.n	800cb2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	73fb      	strb	r3, [r7, #15]
 800caa2:	e044      	b.n	800cb2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b03      	cmp	r3, #3
 800caaa:	d018      	beq.n	800cade <RCCEx_PLLSAI1_Config+0x86>
 800caac:	2b03      	cmp	r3, #3
 800caae:	d825      	bhi.n	800cafc <RCCEx_PLLSAI1_Config+0xa4>
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d002      	beq.n	800caba <RCCEx_PLLSAI1_Config+0x62>
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d009      	beq.n	800cacc <RCCEx_PLLSAI1_Config+0x74>
 800cab8:	e020      	b.n	800cafc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800caba:	4b5f      	ldr	r3, [pc, #380]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f003 0302 	and.w	r3, r3, #2
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d11d      	bne.n	800cb02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800caca:	e01a      	b.n	800cb02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cacc:	4b5a      	ldr	r3, [pc, #360]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d116      	bne.n	800cb06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cadc:	e013      	b.n	800cb06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cade:	4b56      	ldr	r3, [pc, #344]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10f      	bne.n	800cb0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800caea:	4b53      	ldr	r3, [pc, #332]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d109      	bne.n	800cb0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800caf6:	2301      	movs	r3, #1
 800caf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cafa:	e006      	b.n	800cb0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cafc:	2301      	movs	r3, #1
 800cafe:	73fb      	strb	r3, [r7, #15]
      break;
 800cb00:	e004      	b.n	800cb0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cb02:	bf00      	nop
 800cb04:	e002      	b.n	800cb0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cb06:	bf00      	nop
 800cb08:	e000      	b.n	800cb0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cb0a:	bf00      	nop
    }

    if(status == HAL_OK)
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10d      	bne.n	800cb2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cb12:	4b49      	ldr	r3, [pc, #292]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6819      	ldr	r1, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	3b01      	subs	r3, #1
 800cb24:	011b      	lsls	r3, r3, #4
 800cb26:	430b      	orrs	r3, r1
 800cb28:	4943      	ldr	r1, [pc, #268]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cb2e:	7bfb      	ldrb	r3, [r7, #15]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d17c      	bne.n	800cc2e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cb34:	4b40      	ldr	r3, [pc, #256]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a3f      	ldr	r2, [pc, #252]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb40:	f7fa f95e 	bl	8006e00 <HAL_GetTick>
 800cb44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cb46:	e009      	b.n	800cb5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cb48:	f7fa f95a 	bl	8006e00 <HAL_GetTick>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d902      	bls.n	800cb5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800cb56:	2303      	movs	r3, #3
 800cb58:	73fb      	strb	r3, [r7, #15]
        break;
 800cb5a:	e005      	b.n	800cb68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cb5c:	4b36      	ldr	r3, [pc, #216]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1ef      	bne.n	800cb48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d15f      	bne.n	800cc2e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d110      	bne.n	800cb96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cb74:	4b30      	ldr	r3, [pc, #192]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb76:	691b      	ldr	r3, [r3, #16]
 800cb78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800cb7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	6892      	ldr	r2, [r2, #8]
 800cb84:	0211      	lsls	r1, r2, #8
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	68d2      	ldr	r2, [r2, #12]
 800cb8a:	06d2      	lsls	r2, r2, #27
 800cb8c:	430a      	orrs	r2, r1
 800cb8e:	492a      	ldr	r1, [pc, #168]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb90:	4313      	orrs	r3, r2
 800cb92:	610b      	str	r3, [r1, #16]
 800cb94:	e027      	b.n	800cbe6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d112      	bne.n	800cbc2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cb9c:	4b26      	ldr	r3, [pc, #152]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800cba4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	6892      	ldr	r2, [r2, #8]
 800cbac:	0211      	lsls	r1, r2, #8
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	6912      	ldr	r2, [r2, #16]
 800cbb2:	0852      	lsrs	r2, r2, #1
 800cbb4:	3a01      	subs	r2, #1
 800cbb6:	0552      	lsls	r2, r2, #21
 800cbb8:	430a      	orrs	r2, r1
 800cbba:	491f      	ldr	r1, [pc, #124]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	610b      	str	r3, [r1, #16]
 800cbc0:	e011      	b.n	800cbe6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cbc2:	4b1d      	ldr	r3, [pc, #116]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cbca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	6892      	ldr	r2, [r2, #8]
 800cbd2:	0211      	lsls	r1, r2, #8
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	6952      	ldr	r2, [r2, #20]
 800cbd8:	0852      	lsrs	r2, r2, #1
 800cbda:	3a01      	subs	r2, #1
 800cbdc:	0652      	lsls	r2, r2, #25
 800cbde:	430a      	orrs	r2, r1
 800cbe0:	4915      	ldr	r1, [pc, #84]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cbe6:	4b14      	ldr	r3, [pc, #80]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a13      	ldr	r2, [pc, #76]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cbec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cbf0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbf2:	f7fa f905 	bl	8006e00 <HAL_GetTick>
 800cbf6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cbf8:	e009      	b.n	800cc0e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cbfa:	f7fa f901 	bl	8006e00 <HAL_GetTick>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	1ad3      	subs	r3, r2, r3
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d902      	bls.n	800cc0e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cc08:	2303      	movs	r3, #3
 800cc0a:	73fb      	strb	r3, [r7, #15]
          break;
 800cc0c:	e005      	b.n	800cc1a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cc0e:	4b0a      	ldr	r3, [pc, #40]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d0ef      	beq.n	800cbfa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d106      	bne.n	800cc2e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cc20:	4b05      	ldr	r3, [pc, #20]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc22:	691a      	ldr	r2, [r3, #16]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	699b      	ldr	r3, [r3, #24]
 800cc28:	4903      	ldr	r1, [pc, #12]	; (800cc38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cc2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	40021000 	.word	0x40021000

0800cc3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e095      	b.n	800cd7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d108      	bne.n	800cc68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc5e:	d009      	beq.n	800cc74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	61da      	str	r2, [r3, #28]
 800cc66:	e005      	b.n	800cc74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d106      	bne.n	800cc94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7f5 fe00 	bl	8002894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2202      	movs	r2, #2
 800cc98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccaa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ccb4:	d902      	bls.n	800ccbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	60fb      	str	r3, [r7, #12]
 800ccba:	e002      	b.n	800ccc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ccbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ccca:	d007      	beq.n	800ccdc <HAL_SPI_Init+0xa0>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ccd4:	d002      	beq.n	800ccdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ccec:	431a      	orrs	r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	f003 0302 	and.w	r3, r3, #2
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	695b      	ldr	r3, [r3, #20]
 800ccfc:	f003 0301 	and.w	r3, r3, #1
 800cd00:	431a      	orrs	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	699b      	ldr	r3, [r3, #24]
 800cd06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd0a:	431a      	orrs	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	69db      	ldr	r3, [r3, #28]
 800cd10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd14:	431a      	orrs	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a1b      	ldr	r3, [r3, #32]
 800cd1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd1e:	ea42 0103 	orr.w	r1, r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	430a      	orrs	r2, r1
 800cd30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	0c1b      	lsrs	r3, r3, #16
 800cd38:	f003 0204 	and.w	r2, r3, #4
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd40:	f003 0310 	and.w	r3, r3, #16
 800cd44:	431a      	orrs	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4a:	f003 0308 	and.w	r3, r3, #8
 800cd4e:	431a      	orrs	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800cd58:	ea42 0103 	orr.w	r1, r2, r3
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	430a      	orrs	r2, r1
 800cd68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d101      	bne.n	800cda4 <HAL_SPI_Transmit_DMA+0x20>
 800cda0:	2302      	movs	r3, #2
 800cda2:	e0d4      	b.n	800cf4e <HAL_SPI_Transmit_DMA+0x1ca>
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d002      	beq.n	800cdbe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800cdb8:	2302      	movs	r3, #2
 800cdba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cdbc:	e0c2      	b.n	800cf44 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <HAL_SPI_Transmit_DMA+0x46>
 800cdc4:	88fb      	ldrh	r3, [r7, #6]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d102      	bne.n	800cdd0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cdce:	e0b9      	b.n	800cf44 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2203      	movs	r2, #3
 800cdd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2200      	movs	r2, #0
 800cddc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	88fa      	ldrh	r2, [r7, #6]
 800cde8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	88fa      	ldrh	r2, [r7, #6]
 800cdee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce1a:	d10f      	bne.n	800ce3c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce40:	4a45      	ldr	r2, [pc, #276]	; (800cf58 <HAL_SPI_Transmit_DMA+0x1d4>)
 800ce42:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce48:	4a44      	ldr	r2, [pc, #272]	; (800cf5c <HAL_SPI_Transmit_DMA+0x1d8>)
 800ce4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce50:	4a43      	ldr	r2, [pc, #268]	; (800cf60 <HAL_SPI_Transmit_DMA+0x1dc>)
 800ce52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce58:	2200      	movs	r2, #0
 800ce5a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce6a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ce74:	d82d      	bhi.n	800ced2 <HAL_SPI_Transmit_DMA+0x14e>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce7a:	699b      	ldr	r3, [r3, #24]
 800ce7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce80:	d127      	bne.n	800ced2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	f003 0301 	and.w	r3, r3, #1
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10f      	bne.n	800ceb0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	685a      	ldr	r2, [r3, #4]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce9e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	085b      	lsrs	r3, r3, #1
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ceae:	e010      	b.n	800ced2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	685a      	ldr	r2, [r3, #4]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cebe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	085b      	lsrs	r3, r3, #1
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	3301      	adds	r3, #1
 800cecc:	b29a      	uxth	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceda:	4619      	mov	r1, r3
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	330c      	adds	r3, #12
 800cee2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cee8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ceea:	f7fb fce7 	bl	80088bc <HAL_DMA_Start_IT>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d008      	beq.n	800cf06 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cef8:	f043 0210 	orr.w	r2, r3, #16
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cf04:	e01e      	b.n	800cf44 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf10:	2b40      	cmp	r3, #64	; 0x40
 800cf12:	d007      	beq.n	800cf24 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf22:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f042 0220 	orr.w	r2, r2, #32
 800cf32:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685a      	ldr	r2, [r3, #4]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f042 0202 	orr.w	r2, r2, #2
 800cf42:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cf4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3718      	adds	r7, #24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	0800d99b 	.word	0x0800d99b
 800cf5c:	0800d7bd 	.word	0x0800d7bd
 800cf60:	0800d9ef 	.word	0x0800d9ef

0800cf64 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cf72:	2300      	movs	r3, #0
 800cf74:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d002      	beq.n	800cf88 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800cf82:	2302      	movs	r3, #2
 800cf84:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cf86:	e0fe      	b.n	800d186 <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d110      	bne.n	800cfb2 <HAL_SPI_Receive_DMA+0x4e>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf98:	d10b      	bne.n	800cfb2 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2204      	movs	r2, #4
 800cf9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800cfa2:	88fb      	ldrh	r3, [r7, #6]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	68b9      	ldr	r1, [r7, #8]
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f000 f8fb 	bl	800d1a4 <HAL_SPI_TransmitReceive_DMA>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	e0ee      	b.n	800d190 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d101      	bne.n	800cfc0 <HAL_SPI_Receive_DMA+0x5c>
 800cfbc:	2302      	movs	r3, #2
 800cfbe:	e0e7      	b.n	800d190 <HAL_SPI_Receive_DMA+0x22c>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <HAL_SPI_Receive_DMA+0x70>
 800cfce:	88fb      	ldrh	r3, [r7, #6]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d102      	bne.n	800cfda <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cfd8:	e0d5      	b.n	800d186 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2204      	movs	r2, #4
 800cfde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	88fa      	ldrh	r2, [r7, #6]
 800cff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	88fa      	ldrh	r2, [r7, #6]
 800cffa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d01e:	d10f      	bne.n	800d040 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d02e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d03e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	685a      	ldr	r2, [r3, #4]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d04e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d058:	d908      	bls.n	800d06c <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	685a      	ldr	r2, [r3, #4]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d068:	605a      	str	r2, [r3, #4]
 800d06a:	e042      	b.n	800d0f2 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	685a      	ldr	r2, [r3, #4]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d07a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d086:	d134      	bne.n	800d0f2 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d096:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	f003 0301 	and.w	r3, r3, #1
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d111      	bne.n	800d0cc <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0b6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	085b      	lsrs	r3, r3, #1
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d0ca:	e012      	b.n	800d0f2 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	685a      	ldr	r2, [r3, #4]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d0da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	085b      	lsrs	r3, r3, #1
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0f6:	4a28      	ldr	r2, [pc, #160]	; (800d198 <HAL_SPI_Receive_DMA+0x234>)
 800d0f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0fe:	4a27      	ldr	r2, [pc, #156]	; (800d19c <HAL_SPI_Receive_DMA+0x238>)
 800d100:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d106:	4a26      	ldr	r2, [pc, #152]	; (800d1a0 <HAL_SPI_Receive_DMA+0x23c>)
 800d108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d10e:	2200      	movs	r2, #0
 800d110:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	330c      	adds	r3, #12
 800d11c:	4619      	mov	r1, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d122:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d12a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d12c:	f7fb fbc6 	bl	80088bc <HAL_DMA_Start_IT>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d008      	beq.n	800d148 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d13a:	f043 0210 	orr.w	r2, r3, #16
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d146:	e01e      	b.n	800d186 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d152:	2b40      	cmp	r3, #64	; 0x40
 800d154:	d007      	beq.n	800d166 <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d164:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	685a      	ldr	r2, [r3, #4]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f042 0220 	orr.w	r2, r2, #32
 800d174:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f042 0201 	orr.w	r2, r2, #1
 800d184:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2200      	movs	r2, #0
 800d18a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	0800d9b7 	.word	0x0800d9b7
 800d19c:	0800d863 	.word	0x0800d863
 800d1a0:	0800d9ef 	.word	0x0800d9ef

0800d1a4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	60b9      	str	r1, [r7, #8]
 800d1ae:	607a      	str	r2, [r7, #4]
 800d1b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d101      	bne.n	800d1c4 <HAL_SPI_TransmitReceive_DMA+0x20>
 800d1c0:	2302      	movs	r3, #2
 800d1c2:	e164      	b.n	800d48e <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d1d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800d1da:	7dbb      	ldrb	r3, [r7, #22]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d00d      	beq.n	800d1fc <HAL_SPI_TransmitReceive_DMA+0x58>
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d1e6:	d106      	bne.n	800d1f6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d102      	bne.n	800d1f6 <HAL_SPI_TransmitReceive_DMA+0x52>
 800d1f0:	7dbb      	ldrb	r3, [r7, #22]
 800d1f2:	2b04      	cmp	r3, #4
 800d1f4:	d002      	beq.n	800d1fc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800d1f6:	2302      	movs	r3, #2
 800d1f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d1fa:	e143      	b.n	800d484 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d002      	beq.n	800d20e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d208:	887b      	ldrh	r3, [r7, #2]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d102      	bne.n	800d214 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800d20e:	2301      	movs	r3, #1
 800d210:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d212:	e137      	b.n	800d484 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	2b04      	cmp	r3, #4
 800d21e:	d003      	beq.n	800d228 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2205      	movs	r2, #5
 800d224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	887a      	ldrh	r2, [r7, #2]
 800d238:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	887a      	ldrh	r2, [r7, #2]
 800d23e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	887a      	ldrh	r2, [r7, #2]
 800d24a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	887a      	ldrh	r2, [r7, #2]
 800d252:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	685a      	ldr	r2, [r3, #4]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800d270:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d27a:	d908      	bls.n	800d28e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	685a      	ldr	r2, [r3, #4]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d28a:	605a      	str	r2, [r3, #4]
 800d28c:	e06f      	b.n	800d36e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d29c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2a8:	d126      	bne.n	800d2f8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10f      	bne.n	800d2d6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	685a      	ldr	r2, [r3, #4]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d2c4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	085b      	lsrs	r3, r3, #1
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d2d4:	e010      	b.n	800d2f8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	685a      	ldr	r2, [r3, #4]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2e4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	085b      	lsrs	r3, r3, #1
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d302:	d134      	bne.n	800d36e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d312:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	f003 0301 	and.w	r3, r3, #1
 800d320:	2b00      	cmp	r3, #0
 800d322:	d111      	bne.n	800d348 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	685a      	ldr	r2, [r3, #4]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d332:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	085b      	lsrs	r3, r3, #1
 800d33e:	b29a      	uxth	r2, r3
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d346:	e012      	b.n	800d36e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d356:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d35e:	b29b      	uxth	r3, r3
 800d360:	085b      	lsrs	r3, r3, #1
 800d362:	b29b      	uxth	r3, r3
 800d364:	3301      	adds	r3, #1
 800d366:	b29a      	uxth	r2, r3
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d374:	b2db      	uxtb	r3, r3
 800d376:	2b04      	cmp	r3, #4
 800d378:	d108      	bne.n	800d38c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d37e:	4a46      	ldr	r2, [pc, #280]	; (800d498 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800d380:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d386:	4a45      	ldr	r2, [pc, #276]	; (800d49c <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800d388:	62da      	str	r2, [r3, #44]	; 0x2c
 800d38a:	e007      	b.n	800d39c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d390:	4a43      	ldr	r2, [pc, #268]	; (800d4a0 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800d392:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d398:	4a42      	ldr	r2, [pc, #264]	; (800d4a4 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800d39a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3a0:	4a41      	ldr	r2, [pc, #260]	; (800d4a8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800d3a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	330c      	adds	r3, #12
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3bc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d3c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d3c6:	f7fb fa79 	bl	80088bc <HAL_DMA_Start_IT>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d008      	beq.n	800d3e2 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3d4:	f043 0210 	orr.w	r2, r3, #16
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d3e0:	e050      	b.n	800d484 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	685a      	ldr	r2, [r3, #4]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f042 0201 	orr.w	r2, r2, #1
 800d3f0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3fe:	2200      	movs	r2, #0
 800d400:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d406:	2200      	movs	r2, #0
 800d408:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d40e:	2200      	movs	r2, #0
 800d410:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41a:	4619      	mov	r1, r3
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	330c      	adds	r3, #12
 800d422:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d428:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d42a:	f7fb fa47 	bl	80088bc <HAL_DMA_Start_IT>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d008      	beq.n	800d446 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d438:	f043 0210 	orr.w	r2, r3, #16
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d440:	2301      	movs	r3, #1
 800d442:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d444:	e01e      	b.n	800d484 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d450:	2b40      	cmp	r3, #64	; 0x40
 800d452:	d007      	beq.n	800d464 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d462:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	685a      	ldr	r2, [r3, #4]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f042 0220 	orr.w	r2, r2, #32
 800d472:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	685a      	ldr	r2, [r3, #4]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f042 0202 	orr.w	r2, r2, #2
 800d482:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3718      	adds	r7, #24
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	0800d9b7 	.word	0x0800d9b7
 800d49c:	0800d863 	.word	0x0800d863
 800d4a0:	0800d9d3 	.word	0x0800d9d3
 800d4a4:	0800d90b 	.word	0x0800d90b
 800d4a8:	0800d9ef 	.word	0x0800d9ef

0800d4ac <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00f      	beq.n	800d4e0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fb fa59 	bl	800897c <HAL_DMA_Abort>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d007      	beq.n	800d4e0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4d4:	f043 0210 	orr.w	r2, r3, #16
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d00f      	beq.n	800d508 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fb fa45 	bl	800897c <HAL_DMA_Abort>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d007      	beq.n	800d508 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4fc:	f043 0210 	orr.w	r2, r3, #16
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f022 0203 	bic.w	r2, r2, #3
 800d516:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 800d520:	7bfb      	ldrb	r3, [r7, #15]
}
 800d522:	4618      	mov	r0, r3
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
	...

0800d52c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b088      	sub	sp, #32
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10e      	bne.n	800d56c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d554:	2b00      	cmp	r3, #0
 800d556:	d009      	beq.n	800d56c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d004      	beq.n	800d56c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	4798      	blx	r3
    return;
 800d56a:	e0ce      	b.n	800d70a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	f003 0302 	and.w	r3, r3, #2
 800d572:	2b00      	cmp	r3, #0
 800d574:	d009      	beq.n	800d58a <HAL_SPI_IRQHandler+0x5e>
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d004      	beq.n	800d58a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	4798      	blx	r3
    return;
 800d588:	e0bf      	b.n	800d70a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	f003 0320 	and.w	r3, r3, #32
 800d590:	2b00      	cmp	r3, #0
 800d592:	d10a      	bne.n	800d5aa <HAL_SPI_IRQHandler+0x7e>
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d105      	bne.n	800d5aa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 80b0 	beq.w	800d70a <HAL_SPI_IRQHandler+0x1de>
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	f003 0320 	and.w	r3, r3, #32
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f000 80aa 	beq.w	800d70a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d023      	beq.n	800d608 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	d011      	beq.n	800d5f0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5d0:	f043 0204 	orr.w	r2, r3, #4
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d5d8:	2300      	movs	r3, #0
 800d5da:	617b      	str	r3, [r7, #20]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	617b      	str	r3, [r7, #20]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	617b      	str	r3, [r7, #20]
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	e00b      	b.n	800d608 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	613b      	str	r3, [r7, #16]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	613b      	str	r3, [r7, #16]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	613b      	str	r3, [r7, #16]
 800d604:	693b      	ldr	r3, [r7, #16]
        return;
 800d606:	e080      	b.n	800d70a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	f003 0320 	and.w	r3, r3, #32
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d014      	beq.n	800d63c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d616:	f043 0201 	orr.w	r2, r3, #1
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d61e:	2300      	movs	r3, #0
 800d620:	60fb      	str	r3, [r7, #12]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	60fb      	str	r3, [r7, #12]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00c      	beq.n	800d660 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d64a:	f043 0208 	orr.w	r2, r3, #8
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d652:	2300      	movs	r3, #0
 800d654:	60bb      	str	r3, [r7, #8]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	689b      	ldr	r3, [r3, #8]
 800d65c:	60bb      	str	r3, [r7, #8]
 800d65e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d664:	2b00      	cmp	r3, #0
 800d666:	d04f      	beq.n	800d708 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	685a      	ldr	r2, [r3, #4]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d676:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	f003 0302 	and.w	r3, r3, #2
 800d686:	2b00      	cmp	r3, #0
 800d688:	d104      	bne.n	800d694 <HAL_SPI_IRQHandler+0x168>
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	f003 0301 	and.w	r3, r3, #1
 800d690:	2b00      	cmp	r3, #0
 800d692:	d034      	beq.n	800d6fe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	685a      	ldr	r2, [r3, #4]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f022 0203 	bic.w	r2, r2, #3
 800d6a2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d011      	beq.n	800d6d0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6b0:	4a17      	ldr	r2, [pc, #92]	; (800d710 <HAL_SPI_IRQHandler+0x1e4>)
 800d6b2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fb f99d 	bl	80089f8 <HAL_DMA_Abort_IT>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d005      	beq.n	800d6d0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d016      	beq.n	800d706 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6dc:	4a0c      	ldr	r2, [pc, #48]	; (800d710 <HAL_SPI_IRQHandler+0x1e4>)
 800d6de:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fb f987 	bl	80089f8 <HAL_DMA_Abort_IT>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00a      	beq.n	800d706 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800d6fc:	e003      	b.n	800d706 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f844 	bl	800d78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d704:	e000      	b.n	800d708 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800d706:	bf00      	nop
    return;
 800d708:	bf00      	nop
  }
}
 800d70a:	3720      	adds	r7, #32
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	0800da2f 	.word	0x0800da2f

0800d714 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d71c:	bf00      	nop
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d730:	bf00      	nop
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d744:	bf00      	nop
 800d746:	370c      	adds	r7, #12
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d758:	bf00      	nop
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d780:	bf00      	nop
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d794:	bf00      	nop
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d7ae:	b2db      	uxtb	r3, r3
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr

0800d7bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b086      	sub	sp, #24
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7ca:	f7f9 fb19 	bl	8006e00 <HAL_GetTick>
 800d7ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f003 0320 	and.w	r3, r3, #32
 800d7da:	2b20      	cmp	r3, #32
 800d7dc:	d03b      	beq.n	800d856 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	685a      	ldr	r2, [r3, #4]
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f022 0220 	bic.w	r2, r2, #32
 800d7ec:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	685a      	ldr	r2, [r3, #4]
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f022 0202 	bic.w	r2, r2, #2
 800d7fc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d7fe:	693a      	ldr	r2, [r7, #16]
 800d800:	2164      	movs	r1, #100	; 0x64
 800d802:	6978      	ldr	r0, [r7, #20]
 800d804:	f000 fa9e 	bl	800dd44 <SPI_EndRxTxTransaction>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d005      	beq.n	800d81a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d812:	f043 0220 	orr.w	r2, r3, #32
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d10a      	bne.n	800d838 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d822:	2300      	movs	r3, #0
 800d824:	60fb      	str	r3, [r7, #12]
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	60fb      	str	r3, [r7, #12]
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	2200      	movs	r2, #0
 800d83c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d003      	beq.n	800d856 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d84e:	6978      	ldr	r0, [r7, #20]
 800d850:	f7ff ff9c 	bl	800d78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d854:	e002      	b.n	800d85c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d856:	6978      	ldr	r0, [r7, #20]
 800d858:	f7ff ff5c 	bl	800d714 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d85c:	3718      	adds	r7, #24
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d862:	b580      	push	{r7, lr}
 800d864:	b084      	sub	sp, #16
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d870:	f7f9 fac6 	bl	8006e00 <HAL_GetTick>
 800d874:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f003 0320 	and.w	r3, r3, #32
 800d880:	2b20      	cmp	r3, #32
 800d882:	d03c      	beq.n	800d8fe <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	685a      	ldr	r2, [r3, #4]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f022 0220 	bic.w	r2, r2, #32
 800d892:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10d      	bne.n	800d8b8 <SPI_DMAReceiveCplt+0x56>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8a4:	d108      	bne.n	800d8b8 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f022 0203 	bic.w	r2, r2, #3
 800d8b4:	605a      	str	r2, [r3, #4]
 800d8b6:	e007      	b.n	800d8c8 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	685a      	ldr	r2, [r3, #4]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f022 0201 	bic.w	r2, r2, #1
 800d8c6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	2164      	movs	r1, #100	; 0x64
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f000 f9e1 	bl	800dc94 <SPI_EndRxTransaction>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2220      	movs	r2, #32
 800d8dc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d003      	beq.n	800d8fe <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f7ff ff48 	bl	800d78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d8fc:	e002      	b.n	800d904 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f7ff ff12 	bl	800d728 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b084      	sub	sp, #16
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d916:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d918:	f7f9 fa72 	bl	8006e00 <HAL_GetTick>
 800d91c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f003 0320 	and.w	r3, r3, #32
 800d928:	2b20      	cmp	r3, #32
 800d92a:	d030      	beq.n	800d98e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	685a      	ldr	r2, [r3, #4]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f022 0220 	bic.w	r2, r2, #32
 800d93a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d93c:	68ba      	ldr	r2, [r7, #8]
 800d93e:	2164      	movs	r1, #100	; 0x64
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f000 f9ff 	bl	800dd44 <SPI_EndRxTxTransaction>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d005      	beq.n	800d958 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d950:	f043 0220 	orr.w	r2, r3, #32
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	685a      	ldr	r2, [r3, #4]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f022 0203 	bic.w	r2, r2, #3
 800d966:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2200      	movs	r2, #0
 800d972:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2201      	movs	r2, #1
 800d97a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d982:	2b00      	cmp	r3, #0
 800d984:	d003      	beq.n	800d98e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f7ff ff00 	bl	800d78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d98c:	e002      	b.n	800d994 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f7ff fed4 	bl	800d73c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b084      	sub	sp, #16
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d9a8:	68f8      	ldr	r0, [r7, #12]
 800d9aa:	f7ff fed1 	bl	800d750 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d9ae:	bf00      	nop
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b084      	sub	sp, #16
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f7ff fecd 	bl	800d764 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d9ca:	bf00      	nop
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b084      	sub	sp, #16
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9de:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f7ff fec9 	bl	800d778 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d9e6:	bf00      	nop
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b084      	sub	sp, #16
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	685a      	ldr	r2, [r3, #4]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f022 0203 	bic.w	r2, r2, #3
 800da0a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da10:	f043 0210 	orr.w	r2, r3, #16
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f7ff feb3 	bl	800d78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800da26:	bf00      	nop
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b084      	sub	sp, #16
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da3a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2200      	movs	r2, #0
 800da48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f7ff fe9e 	bl	800d78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800da50:	bf00      	nop
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b088      	sub	sp, #32
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	603b      	str	r3, [r7, #0]
 800da64:	4613      	mov	r3, r2
 800da66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800da68:	f7f9 f9ca 	bl	8006e00 <HAL_GetTick>
 800da6c:	4602      	mov	r2, r0
 800da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da70:	1a9b      	subs	r3, r3, r2
 800da72:	683a      	ldr	r2, [r7, #0]
 800da74:	4413      	add	r3, r2
 800da76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800da78:	f7f9 f9c2 	bl	8006e00 <HAL_GetTick>
 800da7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800da7e:	4b39      	ldr	r3, [pc, #228]	; (800db64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	015b      	lsls	r3, r3, #5
 800da84:	0d1b      	lsrs	r3, r3, #20
 800da86:	69fa      	ldr	r2, [r7, #28]
 800da88:	fb02 f303 	mul.w	r3, r2, r3
 800da8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800da8e:	e054      	b.n	800db3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da96:	d050      	beq.n	800db3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800da98:	f7f9 f9b2 	bl	8006e00 <HAL_GetTick>
 800da9c:	4602      	mov	r2, r0
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	69fa      	ldr	r2, [r7, #28]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d902      	bls.n	800daae <SPI_WaitFlagStateUntilTimeout+0x56>
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d13d      	bne.n	800db2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	685a      	ldr	r2, [r3, #4]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dabc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dac6:	d111      	bne.n	800daec <SPI_WaitFlagStateUntilTimeout+0x94>
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dad0:	d004      	beq.n	800dadc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dada:	d107      	bne.n	800daec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800daea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800daf4:	d10f      	bne.n	800db16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800db14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2201      	movs	r2, #1
 800db1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2200      	movs	r2, #0
 800db22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800db26:	2303      	movs	r3, #3
 800db28:	e017      	b.n	800db5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d101      	bne.n	800db34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800db30:	2300      	movs	r3, #0
 800db32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	3b01      	subs	r3, #1
 800db38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	689a      	ldr	r2, [r3, #8]
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	4013      	ands	r3, r2
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	429a      	cmp	r2, r3
 800db48:	bf0c      	ite	eq
 800db4a:	2301      	moveq	r3, #1
 800db4c:	2300      	movne	r3, #0
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	461a      	mov	r2, r3
 800db52:	79fb      	ldrb	r3, [r7, #7]
 800db54:	429a      	cmp	r2, r3
 800db56:	d19b      	bne.n	800da90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3720      	adds	r7, #32
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	20000024 	.word	0x20000024

0800db68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08a      	sub	sp, #40	; 0x28
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
 800db74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800db7a:	f7f9 f941 	bl	8006e00 <HAL_GetTick>
 800db7e:	4602      	mov	r2, r0
 800db80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db82:	1a9b      	subs	r3, r3, r2
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	4413      	add	r3, r2
 800db88:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800db8a:	f7f9 f939 	bl	8006e00 <HAL_GetTick>
 800db8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	330c      	adds	r3, #12
 800db96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800db98:	4b3d      	ldr	r3, [pc, #244]	; (800dc90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	4613      	mov	r3, r2
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	4413      	add	r3, r2
 800dba2:	00da      	lsls	r2, r3, #3
 800dba4:	1ad3      	subs	r3, r2, r3
 800dba6:	0d1b      	lsrs	r3, r3, #20
 800dba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbaa:	fb02 f303 	mul.w	r3, r2, r3
 800dbae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800dbb0:	e060      	b.n	800dc74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800dbb8:	d107      	bne.n	800dbca <SPI_WaitFifoStateUntilTimeout+0x62>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d104      	bne.n	800dbca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800dbc8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd0:	d050      	beq.n	800dc74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dbd2:	f7f9 f915 	bl	8006e00 <HAL_GetTick>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	6a3b      	ldr	r3, [r7, #32]
 800dbda:	1ad3      	subs	r3, r2, r3
 800dbdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d902      	bls.n	800dbe8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d13d      	bne.n	800dc64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	685a      	ldr	r2, [r3, #4]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dbf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dc00:	d111      	bne.n	800dc26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	689b      	ldr	r3, [r3, #8]
 800dc06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc0a:	d004      	beq.n	800dc16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc14:	d107      	bne.n	800dc26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc2e:	d10f      	bne.n	800dc50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dc3e:	601a      	str	r2, [r3, #0]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dc4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2201      	movs	r2, #1
 800dc54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800dc60:	2303      	movs	r3, #3
 800dc62:	e010      	b.n	800dc86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d101      	bne.n	800dc6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	3b01      	subs	r3, #1
 800dc72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	689a      	ldr	r2, [r3, #8]
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d196      	bne.n	800dbb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3728      	adds	r7, #40	; 0x28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	20000024 	.word	0x20000024

0800dc94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af02      	add	r7, sp, #8
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dca8:	d111      	bne.n	800dcce <SPI_EndRxTransaction+0x3a>
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	689b      	ldr	r3, [r3, #8]
 800dcae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcb2:	d004      	beq.n	800dcbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dcbc:	d107      	bne.n	800dcce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dccc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	2180      	movs	r1, #128	; 0x80
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f7ff febd 	bl	800da58 <SPI_WaitFlagStateUntilTimeout>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d007      	beq.n	800dcf4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dce8:	f043 0220 	orr.w	r2, r3, #32
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800dcf0:	2303      	movs	r3, #3
 800dcf2:	e023      	b.n	800dd3c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcfc:	d11d      	bne.n	800dd3a <SPI_EndRxTransaction+0xa6>
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd06:	d004      	beq.n	800dd12 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd10:	d113      	bne.n	800dd3a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f7ff ff22 	bl	800db68 <SPI_WaitFifoStateUntilTimeout>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d007      	beq.n	800dd3a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd2e:	f043 0220 	orr.w	r2, r3, #32
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800dd36:	2303      	movs	r3, #3
 800dd38:	e000      	b.n	800dd3c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af02      	add	r7, sp, #8
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2200      	movs	r2, #0
 800dd58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f7ff ff03 	bl	800db68 <SPI_WaitFifoStateUntilTimeout>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d007      	beq.n	800dd78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd6c:	f043 0220 	orr.w	r2, r3, #32
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800dd74:	2303      	movs	r3, #3
 800dd76:	e027      	b.n	800ddc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	2180      	movs	r1, #128	; 0x80
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f7ff fe68 	bl	800da58 <SPI_WaitFlagStateUntilTimeout>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d007      	beq.n	800dd9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd92:	f043 0220 	orr.w	r2, r3, #32
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800dd9a:	2303      	movs	r3, #3
 800dd9c:	e014      	b.n	800ddc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2200      	movs	r2, #0
 800dda6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f7ff fedc 	bl	800db68 <SPI_WaitFifoStateUntilTimeout>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d007      	beq.n	800ddc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddba:	f043 0220 	orr.w	r2, r3, #32
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	e000      	b.n	800ddc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3710      	adds	r7, #16
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d101      	bne.n	800dde2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ddde:	2301      	movs	r3, #1
 800dde0:	e049      	b.n	800de76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d106      	bne.n	800ddfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7f8 fb4c 	bl	8006494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2202      	movs	r2, #2
 800de00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	3304      	adds	r3, #4
 800de0c:	4619      	mov	r1, r3
 800de0e:	4610      	mov	r0, r2
 800de10:	f000 fb02 	bl	800e418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2201      	movs	r2, #1
 800de28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2201      	movs	r2, #1
 800de30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2201      	movs	r2, #1
 800de38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2201      	movs	r2, #1
 800de48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2201      	movs	r2, #1
 800de58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2201      	movs	r2, #1
 800de68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2201      	movs	r2, #1
 800de70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3708      	adds	r7, #8
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
	...

0800de80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	2b01      	cmp	r3, #1
 800de92:	d001      	beq.n	800de98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800de94:	2301      	movs	r3, #1
 800de96:	e033      	b.n	800df00 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2202      	movs	r2, #2
 800de9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a19      	ldr	r2, [pc, #100]	; (800df0c <HAL_TIM_Base_Start+0x8c>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d009      	beq.n	800debe <HAL_TIM_Base_Start+0x3e>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800deb2:	d004      	beq.n	800debe <HAL_TIM_Base_Start+0x3e>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4a15      	ldr	r2, [pc, #84]	; (800df10 <HAL_TIM_Base_Start+0x90>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d115      	bne.n	800deea <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	689a      	ldr	r2, [r3, #8]
 800dec4:	4b13      	ldr	r3, [pc, #76]	; (800df14 <HAL_TIM_Base_Start+0x94>)
 800dec6:	4013      	ands	r3, r2
 800dec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b06      	cmp	r3, #6
 800dece:	d015      	beq.n	800defc <HAL_TIM_Base_Start+0x7c>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ded6:	d011      	beq.n	800defc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f042 0201 	orr.w	r2, r2, #1
 800dee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dee8:	e008      	b.n	800defc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f042 0201 	orr.w	r2, r2, #1
 800def8:	601a      	str	r2, [r3, #0]
 800defa:	e000      	b.n	800defe <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800defc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3714      	adds	r7, #20
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	40012c00 	.word	0x40012c00
 800df10:	40014000 	.word	0x40014000
 800df14:	00010007 	.word	0x00010007

0800df18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df26:	b2db      	uxtb	r3, r3
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d001      	beq.n	800df30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	e03b      	b.n	800dfa8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2202      	movs	r2, #2
 800df34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	68da      	ldr	r2, [r3, #12]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f042 0201 	orr.w	r2, r2, #1
 800df46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a19      	ldr	r2, [pc, #100]	; (800dfb4 <HAL_TIM_Base_Start_IT+0x9c>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d009      	beq.n	800df66 <HAL_TIM_Base_Start_IT+0x4e>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df5a:	d004      	beq.n	800df66 <HAL_TIM_Base_Start_IT+0x4e>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a15      	ldr	r2, [pc, #84]	; (800dfb8 <HAL_TIM_Base_Start_IT+0xa0>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d115      	bne.n	800df92 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	689a      	ldr	r2, [r3, #8]
 800df6c:	4b13      	ldr	r3, [pc, #76]	; (800dfbc <HAL_TIM_Base_Start_IT+0xa4>)
 800df6e:	4013      	ands	r3, r2
 800df70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2b06      	cmp	r3, #6
 800df76:	d015      	beq.n	800dfa4 <HAL_TIM_Base_Start_IT+0x8c>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df7e:	d011      	beq.n	800dfa4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f042 0201 	orr.w	r2, r2, #1
 800df8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df90:	e008      	b.n	800dfa4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f042 0201 	orr.w	r2, r2, #1
 800dfa0:	601a      	str	r2, [r3, #0]
 800dfa2:	e000      	b.n	800dfa6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dfa6:	2300      	movs	r3, #0
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr
 800dfb4:	40012c00 	.word	0x40012c00
 800dfb8:	40014000 	.word	0x40014000
 800dfbc:	00010007 	.word	0x00010007

0800dfc0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	68da      	ldr	r2, [r3, #12]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f022 0201 	bic.w	r2, r2, #1
 800dfd6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	6a1a      	ldr	r2, [r3, #32]
 800dfde:	f241 1311 	movw	r3, #4369	; 0x1111
 800dfe2:	4013      	ands	r3, r2
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d10f      	bne.n	800e008 <HAL_TIM_Base_Stop_IT+0x48>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	6a1a      	ldr	r2, [r3, #32]
 800dfee:	f240 4344 	movw	r3, #1092	; 0x444
 800dff2:	4013      	ands	r3, r2
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d107      	bne.n	800e008 <HAL_TIM_Base_Stop_IT+0x48>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f022 0201 	bic.w	r2, r2, #1
 800e006:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	370c      	adds	r7, #12
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr

0800e01e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	691b      	ldr	r3, [r3, #16]
 800e034:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	f003 0302 	and.w	r3, r3, #2
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d020      	beq.n	800e082 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f003 0302 	and.w	r3, r3, #2
 800e046:	2b00      	cmp	r3, #0
 800e048:	d01b      	beq.n	800e082 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f06f 0202 	mvn.w	r2, #2
 800e052:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2201      	movs	r2, #1
 800e058:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	699b      	ldr	r3, [r3, #24]
 800e060:	f003 0303 	and.w	r3, r3, #3
 800e064:	2b00      	cmp	r3, #0
 800e066:	d003      	beq.n	800e070 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f9b7 	bl	800e3dc <HAL_TIM_IC_CaptureCallback>
 800e06e:	e005      	b.n	800e07c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 f9a9 	bl	800e3c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 f9ba 	bl	800e3f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	f003 0304 	and.w	r3, r3, #4
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d020      	beq.n	800e0ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f003 0304 	and.w	r3, r3, #4
 800e092:	2b00      	cmp	r3, #0
 800e094:	d01b      	beq.n	800e0ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f06f 0204 	mvn.w	r2, #4
 800e09e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2202      	movs	r2, #2
 800e0a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d003      	beq.n	800e0bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 f991 	bl	800e3dc <HAL_TIM_IC_CaptureCallback>
 800e0ba:	e005      	b.n	800e0c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 f983 	bl	800e3c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 f994 	bl	800e3f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	f003 0308 	and.w	r3, r3, #8
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d020      	beq.n	800e11a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f003 0308 	and.w	r3, r3, #8
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d01b      	beq.n	800e11a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f06f 0208 	mvn.w	r2, #8
 800e0ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2204      	movs	r2, #4
 800e0f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	69db      	ldr	r3, [r3, #28]
 800e0f8:	f003 0303 	and.w	r3, r3, #3
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d003      	beq.n	800e108 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f000 f96b 	bl	800e3dc <HAL_TIM_IC_CaptureCallback>
 800e106:	e005      	b.n	800e114 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f000 f95d 	bl	800e3c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 f96e 	bl	800e3f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	f003 0310 	and.w	r3, r3, #16
 800e120:	2b00      	cmp	r3, #0
 800e122:	d020      	beq.n	800e166 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f003 0310 	and.w	r3, r3, #16
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d01b      	beq.n	800e166 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f06f 0210 	mvn.w	r2, #16
 800e136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2208      	movs	r2, #8
 800e13c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	69db      	ldr	r3, [r3, #28]
 800e144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d003      	beq.n	800e154 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 f945 	bl	800e3dc <HAL_TIM_IC_CaptureCallback>
 800e152:	e005      	b.n	800e160 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f937 	bl	800e3c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 f948 	bl	800e3f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	f003 0301 	and.w	r3, r3, #1
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00c      	beq.n	800e18a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f003 0301 	and.w	r3, r3, #1
 800e176:	2b00      	cmp	r3, #0
 800e178:	d007      	beq.n	800e18a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f06f 0201 	mvn.w	r2, #1
 800e182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f915 	bl	800e3b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e190:	2b00      	cmp	r3, #0
 800e192:	d00c      	beq.n	800e1ae <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d007      	beq.n	800e1ae <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 faa3 	bl	800e6f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00c      	beq.n	800e1d2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d007      	beq.n	800e1d2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e1ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 fa9b 	bl	800e708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00c      	beq.n	800e1f6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d007      	beq.n	800e1f6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e1ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 f907 	bl	800e404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	f003 0320 	and.w	r3, r3, #32
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00c      	beq.n	800e21a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f003 0320 	and.w	r3, r3, #32
 800e206:	2b00      	cmp	r3, #0
 800e208:	d007      	beq.n	800e21a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f06f 0220 	mvn.w	r2, #32
 800e212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 fa63 	bl	800e6e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e21a:	bf00      	nop
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e222:	b580      	push	{r7, lr}
 800e224:	b084      	sub	sp, #16
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
 800e22a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e236:	2b01      	cmp	r3, #1
 800e238:	d101      	bne.n	800e23e <HAL_TIM_ConfigClockSource+0x1c>
 800e23a:	2302      	movs	r3, #2
 800e23c:	e0b6      	b.n	800e3ac <HAL_TIM_ConfigClockSource+0x18a>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2202      	movs	r2, #2
 800e24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e25c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e260:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e268:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e27a:	d03e      	beq.n	800e2fa <HAL_TIM_ConfigClockSource+0xd8>
 800e27c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e280:	f200 8087 	bhi.w	800e392 <HAL_TIM_ConfigClockSource+0x170>
 800e284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e288:	f000 8086 	beq.w	800e398 <HAL_TIM_ConfigClockSource+0x176>
 800e28c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e290:	d87f      	bhi.n	800e392 <HAL_TIM_ConfigClockSource+0x170>
 800e292:	2b70      	cmp	r3, #112	; 0x70
 800e294:	d01a      	beq.n	800e2cc <HAL_TIM_ConfigClockSource+0xaa>
 800e296:	2b70      	cmp	r3, #112	; 0x70
 800e298:	d87b      	bhi.n	800e392 <HAL_TIM_ConfigClockSource+0x170>
 800e29a:	2b60      	cmp	r3, #96	; 0x60
 800e29c:	d050      	beq.n	800e340 <HAL_TIM_ConfigClockSource+0x11e>
 800e29e:	2b60      	cmp	r3, #96	; 0x60
 800e2a0:	d877      	bhi.n	800e392 <HAL_TIM_ConfigClockSource+0x170>
 800e2a2:	2b50      	cmp	r3, #80	; 0x50
 800e2a4:	d03c      	beq.n	800e320 <HAL_TIM_ConfigClockSource+0xfe>
 800e2a6:	2b50      	cmp	r3, #80	; 0x50
 800e2a8:	d873      	bhi.n	800e392 <HAL_TIM_ConfigClockSource+0x170>
 800e2aa:	2b40      	cmp	r3, #64	; 0x40
 800e2ac:	d058      	beq.n	800e360 <HAL_TIM_ConfigClockSource+0x13e>
 800e2ae:	2b40      	cmp	r3, #64	; 0x40
 800e2b0:	d86f      	bhi.n	800e392 <HAL_TIM_ConfigClockSource+0x170>
 800e2b2:	2b30      	cmp	r3, #48	; 0x30
 800e2b4:	d064      	beq.n	800e380 <HAL_TIM_ConfigClockSource+0x15e>
 800e2b6:	2b30      	cmp	r3, #48	; 0x30
 800e2b8:	d86b      	bhi.n	800e392 <HAL_TIM_ConfigClockSource+0x170>
 800e2ba:	2b20      	cmp	r3, #32
 800e2bc:	d060      	beq.n	800e380 <HAL_TIM_ConfigClockSource+0x15e>
 800e2be:	2b20      	cmp	r3, #32
 800e2c0:	d867      	bhi.n	800e392 <HAL_TIM_ConfigClockSource+0x170>
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d05c      	beq.n	800e380 <HAL_TIM_ConfigClockSource+0x15e>
 800e2c6:	2b10      	cmp	r3, #16
 800e2c8:	d05a      	beq.n	800e380 <HAL_TIM_ConfigClockSource+0x15e>
 800e2ca:	e062      	b.n	800e392 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e2dc:	f000 f97a 	bl	800e5d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e2ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	609a      	str	r2, [r3, #8]
      break;
 800e2f8:	e04f      	b.n	800e39a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e30a:	f000 f963 	bl	800e5d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	689a      	ldr	r2, [r3, #8]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e31c:	609a      	str	r2, [r3, #8]
      break;
 800e31e:	e03c      	b.n	800e39a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e32c:	461a      	mov	r2, r3
 800e32e:	f000 f8d7 	bl	800e4e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2150      	movs	r1, #80	; 0x50
 800e338:	4618      	mov	r0, r3
 800e33a:	f000 f930 	bl	800e59e <TIM_ITRx_SetConfig>
      break;
 800e33e:	e02c      	b.n	800e39a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e34c:	461a      	mov	r2, r3
 800e34e:	f000 f8f6 	bl	800e53e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2160      	movs	r1, #96	; 0x60
 800e358:	4618      	mov	r0, r3
 800e35a:	f000 f920 	bl	800e59e <TIM_ITRx_SetConfig>
      break;
 800e35e:	e01c      	b.n	800e39a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e36c:	461a      	mov	r2, r3
 800e36e:	f000 f8b7 	bl	800e4e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2140      	movs	r1, #64	; 0x40
 800e378:	4618      	mov	r0, r3
 800e37a:	f000 f910 	bl	800e59e <TIM_ITRx_SetConfig>
      break;
 800e37e:	e00c      	b.n	800e39a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4619      	mov	r1, r3
 800e38a:	4610      	mov	r0, r2
 800e38c:	f000 f907 	bl	800e59e <TIM_ITRx_SetConfig>
      break;
 800e390:	e003      	b.n	800e39a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	73fb      	strb	r3, [r7, #15]
      break;
 800e396:	e000      	b.n	800e39a <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e398:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e3bc:	bf00      	nop
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e3d0:	bf00      	nop
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e3f8:	bf00      	nop
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e40c:	bf00      	nop
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4a2a      	ldr	r2, [pc, #168]	; (800e4d4 <TIM_Base_SetConfig+0xbc>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d003      	beq.n	800e438 <TIM_Base_SetConfig+0x20>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e436:	d108      	bne.n	800e44a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e43e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	4313      	orrs	r3, r2
 800e448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4a21      	ldr	r2, [pc, #132]	; (800e4d4 <TIM_Base_SetConfig+0xbc>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d00b      	beq.n	800e46a <TIM_Base_SetConfig+0x52>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e458:	d007      	beq.n	800e46a <TIM_Base_SetConfig+0x52>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4a1e      	ldr	r2, [pc, #120]	; (800e4d8 <TIM_Base_SetConfig+0xc0>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d003      	beq.n	800e46a <TIM_Base_SetConfig+0x52>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	4a1d      	ldr	r2, [pc, #116]	; (800e4dc <TIM_Base_SetConfig+0xc4>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d108      	bne.n	800e47c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	68fa      	ldr	r2, [r7, #12]
 800e478:	4313      	orrs	r3, r2
 800e47a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	695b      	ldr	r3, [r3, #20]
 800e486:	4313      	orrs	r3, r2
 800e488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	689a      	ldr	r2, [r3, #8]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a0c      	ldr	r2, [pc, #48]	; (800e4d4 <TIM_Base_SetConfig+0xbc>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d007      	beq.n	800e4b8 <TIM_Base_SetConfig+0xa0>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a0b      	ldr	r2, [pc, #44]	; (800e4d8 <TIM_Base_SetConfig+0xc0>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d003      	beq.n	800e4b8 <TIM_Base_SetConfig+0xa0>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a0a      	ldr	r2, [pc, #40]	; (800e4dc <TIM_Base_SetConfig+0xc4>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d103      	bne.n	800e4c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	691a      	ldr	r2, [r3, #16]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	615a      	str	r2, [r3, #20]
}
 800e4c6:	bf00      	nop
 800e4c8:	3714      	adds	r7, #20
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	40012c00 	.word	0x40012c00
 800e4d8:	40014000 	.word	0x40014000
 800e4dc:	40014400 	.word	0x40014400

0800e4e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b087      	sub	sp, #28
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6a1b      	ldr	r3, [r3, #32]
 800e4f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6a1b      	ldr	r3, [r3, #32]
 800e4f6:	f023 0201 	bic.w	r2, r3, #1
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	699b      	ldr	r3, [r3, #24]
 800e502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e50a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	011b      	lsls	r3, r3, #4
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	4313      	orrs	r3, r2
 800e514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	f023 030a 	bic.w	r3, r3, #10
 800e51c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	4313      	orrs	r3, r2
 800e524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	693a      	ldr	r2, [r7, #16]
 800e52a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	697a      	ldr	r2, [r7, #20]
 800e530:	621a      	str	r2, [r3, #32]
}
 800e532:	bf00      	nop
 800e534:	371c      	adds	r7, #28
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr

0800e53e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e53e:	b480      	push	{r7}
 800e540:	b087      	sub	sp, #28
 800e542:	af00      	add	r7, sp, #0
 800e544:	60f8      	str	r0, [r7, #12]
 800e546:	60b9      	str	r1, [r7, #8]
 800e548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6a1b      	ldr	r3, [r3, #32]
 800e54e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6a1b      	ldr	r3, [r3, #32]
 800e554:	f023 0210 	bic.w	r2, r3, #16
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	699b      	ldr	r3, [r3, #24]
 800e560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	031b      	lsls	r3, r3, #12
 800e56e:	693a      	ldr	r2, [r7, #16]
 800e570:	4313      	orrs	r3, r2
 800e572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e57a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	011b      	lsls	r3, r3, #4
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	4313      	orrs	r3, r2
 800e584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	693a      	ldr	r2, [r7, #16]
 800e58a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	621a      	str	r2, [r3, #32]
}
 800e592:	bf00      	nop
 800e594:	371c      	adds	r7, #28
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr

0800e59e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e59e:	b480      	push	{r7}
 800e5a0:	b085      	sub	sp, #20
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	f043 0307 	orr.w	r3, r3, #7
 800e5c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	609a      	str	r2, [r3, #8]
}
 800e5c8:	bf00      	nop
 800e5ca:	3714      	adds	r7, #20
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b087      	sub	sp, #28
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
 800e5e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e5ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	021a      	lsls	r2, r3, #8
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	431a      	orrs	r2, r3
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	697a      	ldr	r2, [r7, #20]
 800e5fe:	4313      	orrs	r3, r2
 800e600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	697a      	ldr	r2, [r7, #20]
 800e606:	609a      	str	r2, [r3, #8]
}
 800e608:	bf00      	nop
 800e60a:	371c      	adds	r7, #28
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e624:	2b01      	cmp	r3, #1
 800e626:	d101      	bne.n	800e62c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e628:	2302      	movs	r3, #2
 800e62a:	e04f      	b.n	800e6cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2202      	movs	r2, #2
 800e638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a21      	ldr	r2, [pc, #132]	; (800e6d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d108      	bne.n	800e668 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e65c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	4313      	orrs	r3, r2
 800e666:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e66e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	4313      	orrs	r3, r2
 800e678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4a14      	ldr	r2, [pc, #80]	; (800e6d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d009      	beq.n	800e6a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e694:	d004      	beq.n	800e6a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a10      	ldr	r2, [pc, #64]	; (800e6dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d10c      	bne.n	800e6ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2201      	movs	r2, #1
 800e6be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e6ca:	2300      	movs	r3, #0
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3714      	adds	r7, #20
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr
 800e6d8:	40012c00 	.word	0x40012c00
 800e6dc:	40014000 	.word	0x40014000

0800e6e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e6e8:	bf00      	nop
 800e6ea:	370c      	adds	r7, #12
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d101      	bne.n	800e72e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e72a:	2301      	movs	r3, #1
 800e72c:	e040      	b.n	800e7b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e732:	2b00      	cmp	r3, #0
 800e734:	d106      	bne.n	800e744 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7f8 f8fc 	bl	800693c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2224      	movs	r2, #36	; 0x24
 800e748:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f022 0201 	bic.w	r2, r2, #1
 800e758:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d002      	beq.n	800e768 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 ff78 	bl	800f658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 fd49 	bl	800f200 <UART_SetConfig>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b01      	cmp	r3, #1
 800e772:	d101      	bne.n	800e778 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e774:	2301      	movs	r3, #1
 800e776:	e01b      	b.n	800e7b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	685a      	ldr	r2, [r3, #4]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	689a      	ldr	r2, [r3, #8]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f042 0201 	orr.w	r2, r2, #1
 800e7a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 fff7 	bl	800f79c <UART_CheckIdleState>
 800e7ae:	4603      	mov	r3, r0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d101      	bne.n	800e7ca <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e02f      	b.n	800e82a <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2224      	movs	r2, #36	; 0x24
 800e7ce:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f022 0201 	bic.w	r2, r2, #1
 800e7de:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7f8 f96b 	bl	8006ad4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2200      	movs	r2, #0
 800e802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2200      	movs	r2, #0
 800e824:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b08a      	sub	sp, #40	; 0x28
 800e836:	af02      	add	r7, sp, #8
 800e838:	60f8      	str	r0, [r7, #12]
 800e83a:	60b9      	str	r1, [r7, #8]
 800e83c:	603b      	str	r3, [r7, #0]
 800e83e:	4613      	mov	r3, r2
 800e840:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e846:	2b20      	cmp	r3, #32
 800e848:	d178      	bne.n	800e93c <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <HAL_UART_Transmit+0x24>
 800e850:	88fb      	ldrh	r3, [r7, #6]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d101      	bne.n	800e85a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	e071      	b.n	800e93e <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2200      	movs	r2, #0
 800e85e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2221      	movs	r2, #33	; 0x21
 800e866:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e868:	f7f8 faca 	bl	8006e00 <HAL_GetTick>
 800e86c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	88fa      	ldrh	r2, [r7, #6]
 800e872:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	88fa      	ldrh	r2, [r7, #6]
 800e87a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e886:	d108      	bne.n	800e89a <HAL_UART_Transmit+0x68>
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	691b      	ldr	r3, [r3, #16]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d104      	bne.n	800e89a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e890:	2300      	movs	r3, #0
 800e892:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	61bb      	str	r3, [r7, #24]
 800e898:	e003      	b.n	800e8a2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e8a2:	e030      	b.n	800e906 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	9300      	str	r3, [sp, #0]
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	2180      	movs	r1, #128	; 0x80
 800e8ae:	68f8      	ldr	r0, [r7, #12]
 800e8b0:	f001 f81c 	bl	800f8ec <UART_WaitOnFlagUntilTimeout>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d004      	beq.n	800e8c4 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2220      	movs	r2, #32
 800e8be:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	e03c      	b.n	800e93e <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d10b      	bne.n	800e8e2 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	881a      	ldrh	r2, [r3, #0]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e8d6:	b292      	uxth	r2, r2
 800e8d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	3302      	adds	r3, #2
 800e8de:	61bb      	str	r3, [r7, #24]
 800e8e0:	e008      	b.n	800e8f4 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	781a      	ldrb	r2, [r3, #0]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	b292      	uxth	r2, r2
 800e8ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1c8      	bne.n	800e8a4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	2200      	movs	r2, #0
 800e91a:	2140      	movs	r1, #64	; 0x40
 800e91c:	68f8      	ldr	r0, [r7, #12]
 800e91e:	f000 ffe5 	bl	800f8ec <UART_WaitOnFlagUntilTimeout>
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d004      	beq.n	800e932 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2220      	movs	r2, #32
 800e92c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800e92e:	2303      	movs	r3, #3
 800e930:	e005      	b.n	800e93e <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2220      	movs	r2, #32
 800e936:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e938:	2300      	movs	r3, #0
 800e93a:	e000      	b.n	800e93e <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800e93c:	2302      	movs	r3, #2
  }
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3720      	adds	r7, #32
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
	...

0800e948 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b08a      	sub	sp, #40	; 0x28
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	4613      	mov	r3, r2
 800e954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e95c:	2b20      	cmp	r3, #32
 800e95e:	d137      	bne.n	800e9d0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d002      	beq.n	800e96c <HAL_UART_Receive_DMA+0x24>
 800e966:	88fb      	ldrh	r3, [r7, #6]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e96c:	2301      	movs	r3, #1
 800e96e:	e030      	b.n	800e9d2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2200      	movs	r2, #0
 800e974:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4a18      	ldr	r2, [pc, #96]	; (800e9dc <HAL_UART_Receive_DMA+0x94>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d01f      	beq.n	800e9c0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d018      	beq.n	800e9c0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	e853 3f00 	ldrex	r3, [r3]
 800e99a:	613b      	str	r3, [r7, #16]
   return(result);
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e9a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	623b      	str	r3, [r7, #32]
 800e9ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b0:	69f9      	ldr	r1, [r7, #28]
 800e9b2:	6a3a      	ldr	r2, [r7, #32]
 800e9b4:	e841 2300 	strex	r3, r2, [r1]
 800e9b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d1e6      	bne.n	800e98e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e9c0:	88fb      	ldrh	r3, [r7, #6]
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	68b9      	ldr	r1, [r7, #8]
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f000 fff8 	bl	800f9bc <UART_Start_Receive_DMA>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	e000      	b.n	800e9d2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e9d0:	2302      	movs	r3, #2
  }
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3728      	adds	r7, #40	; 0x28
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	40008000 	.word	0x40008000

0800e9e0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b0a0      	sub	sp, #128	; 0x80
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9f0:	e853 3f00 	ldrex	r3, [r3]
 800e9f4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e9f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9f8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800e9fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	461a      	mov	r2, r3
 800ea04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ea06:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea08:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea0a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ea0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ea0e:	e841 2300 	strex	r3, r2, [r1]
 800ea12:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ea14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1e6      	bne.n	800e9e8 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	3308      	adds	r3, #8
 800ea20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea24:	e853 3f00 	ldrex	r3, [r3]
 800ea28:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ea2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea2c:	f023 0301 	bic.w	r3, r3, #1
 800ea30:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	3308      	adds	r3, #8
 800ea38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ea3a:	657a      	str	r2, [r7, #84]	; 0x54
 800ea3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ea40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ea42:	e841 2300 	strex	r3, r2, [r1]
 800ea46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ea48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1e5      	bne.n	800ea1a <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d118      	bne.n	800ea88 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea5e:	e853 3f00 	ldrex	r3, [r3]
 800ea62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea66:	f023 0310 	bic.w	r3, r3, #16
 800ea6a:	677b      	str	r3, [r7, #116]	; 0x74
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	461a      	mov	r2, r3
 800ea72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea74:	643b      	str	r3, [r7, #64]	; 0x40
 800ea76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea7c:	e841 2300 	strex	r3, r2, [r1]
 800ea80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1e6      	bne.n	800ea56 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea92:	2b80      	cmp	r3, #128	; 0x80
 800ea94:	d137      	bne.n	800eb06 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	3308      	adds	r3, #8
 800ea9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9e:	6a3b      	ldr	r3, [r7, #32]
 800eaa0:	e853 3f00 	ldrex	r3, [r3]
 800eaa4:	61fb      	str	r3, [r7, #28]
   return(result);
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eaac:	673b      	str	r3, [r7, #112]	; 0x70
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	3308      	adds	r3, #8
 800eab4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eab8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eabc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eabe:	e841 2300 	strex	r3, r2, [r1]
 800eac2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1e5      	bne.n	800ea96 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d019      	beq.n	800eb06 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ead6:	2200      	movs	r2, #0
 800ead8:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eade:	4618      	mov	r0, r3
 800eae0:	f7f9 ff4c 	bl	800897c <HAL_DMA_Abort>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00d      	beq.n	800eb06 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fa f872 	bl	8008bd8 <HAL_DMA_GetError>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b20      	cmp	r3, #32
 800eaf8:	d105      	bne.n	800eb06 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2210      	movs	r2, #16
 800eafe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800eb02:	2303      	movs	r3, #3
 800eb04:	e063      	b.n	800ebce <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb10:	2b40      	cmp	r3, #64	; 0x40
 800eb12:	d137      	bne.n	800eb84 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	3308      	adds	r3, #8
 800eb1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	e853 3f00 	ldrex	r3, [r3]
 800eb22:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	3308      	adds	r3, #8
 800eb32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb34:	61ba      	str	r2, [r7, #24]
 800eb36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb38:	6979      	ldr	r1, [r7, #20]
 800eb3a:	69ba      	ldr	r2, [r7, #24]
 800eb3c:	e841 2300 	strex	r3, r2, [r1]
 800eb40:	613b      	str	r3, [r7, #16]
   return(result);
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1e5      	bne.n	800eb14 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d019      	beq.n	800eb84 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb54:	2200      	movs	r2, #0
 800eb56:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7f9 ff0d 	bl	800897c <HAL_DMA_Abort>
 800eb62:	4603      	mov	r3, r0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00d      	beq.n	800eb84 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fa f833 	bl	8008bd8 <HAL_DMA_GetError>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b20      	cmp	r3, #32
 800eb76:	d105      	bne.n	800eb84 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2210      	movs	r2, #16
 800eb7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800eb80:	2303      	movs	r3, #3
 800eb82:	e024      	b.n	800ebce <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	220f      	movs	r2, #15
 800eb9a:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	8b1b      	ldrh	r3, [r3, #24]
 800eba2:	b29a      	uxth	r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f042 0208 	orr.w	r2, r2, #8
 800ebac:	b292      	uxth	r2, r2
 800ebae:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2220      	movs	r2, #32
 800ebb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2220      	movs	r2, #32
 800ebba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ebcc:	2300      	movs	r3, #0
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3780      	adds	r7, #128	; 0x80
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
	...

0800ebd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b0ba      	sub	sp, #232	; 0xe8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	69db      	ldr	r3, [r3, #28]
 800ebe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ebfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ec02:	f640 030f 	movw	r3, #2063	; 0x80f
 800ec06:	4013      	ands	r3, r2
 800ec08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ec0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d115      	bne.n	800ec40 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ec14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec18:	f003 0320 	and.w	r3, r3, #32
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00f      	beq.n	800ec40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ec20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec24:	f003 0320 	and.w	r3, r3, #32
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d009      	beq.n	800ec40 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f000 82ae 	beq.w	800f192 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	4798      	blx	r3
      }
      return;
 800ec3e:	e2a8      	b.n	800f192 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ec40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f000 8117 	beq.w	800ee78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ec4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec4e:	f003 0301 	and.w	r3, r3, #1
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d106      	bne.n	800ec64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ec56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ec5a:	4b85      	ldr	r3, [pc, #532]	; (800ee70 <HAL_UART_IRQHandler+0x298>)
 800ec5c:	4013      	ands	r3, r2
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	f000 810a 	beq.w	800ee78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ec64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec68:	f003 0301 	and.w	r3, r3, #1
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d011      	beq.n	800ec94 <HAL_UART_IRQHandler+0xbc>
 800ec70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d00b      	beq.n	800ec94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2201      	movs	r2, #1
 800ec82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec8a:	f043 0201 	orr.w	r2, r3, #1
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec98:	f003 0302 	and.w	r3, r3, #2
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d011      	beq.n	800ecc4 <HAL_UART_IRQHandler+0xec>
 800eca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eca4:	f003 0301 	and.w	r3, r3, #1
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00b      	beq.n	800ecc4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2202      	movs	r2, #2
 800ecb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecba:	f043 0204 	orr.w	r2, r3, #4
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecc8:	f003 0304 	and.w	r3, r3, #4
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d011      	beq.n	800ecf4 <HAL_UART_IRQHandler+0x11c>
 800ecd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecd4:	f003 0301 	and.w	r3, r3, #1
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00b      	beq.n	800ecf4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2204      	movs	r2, #4
 800ece2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecea:	f043 0202 	orr.w	r2, r3, #2
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ecf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecf8:	f003 0308 	and.w	r3, r3, #8
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d017      	beq.n	800ed30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ed00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed04:	f003 0320 	and.w	r3, r3, #32
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d105      	bne.n	800ed18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ed0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00b      	beq.n	800ed30 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2208      	movs	r2, #8
 800ed1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed26:	f043 0208 	orr.w	r2, r3, #8
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ed30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d012      	beq.n	800ed62 <HAL_UART_IRQHandler+0x18a>
 800ed3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d00c      	beq.n	800ed62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed58:	f043 0220 	orr.w	r2, r3, #32
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f000 8214 	beq.w	800f196 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ed6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed72:	f003 0320 	and.w	r3, r3, #32
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00d      	beq.n	800ed96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ed7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed7e:	f003 0320 	and.w	r3, r3, #32
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d007      	beq.n	800ed96 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d003      	beq.n	800ed96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edaa:	2b40      	cmp	r3, #64	; 0x40
 800edac:	d005      	beq.n	800edba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800edae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800edb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d04f      	beq.n	800ee5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 fec4 	bl	800fb48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	689b      	ldr	r3, [r3, #8]
 800edc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edca:	2b40      	cmp	r3, #64	; 0x40
 800edcc:	d141      	bne.n	800ee52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	3308      	adds	r3, #8
 800edd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eddc:	e853 3f00 	ldrex	r3, [r3]
 800ede0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ede4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ede8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3308      	adds	r3, #8
 800edf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800edfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800edfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ee06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ee0a:	e841 2300 	strex	r3, r2, [r1]
 800ee0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ee12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1d9      	bne.n	800edce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d013      	beq.n	800ee4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee26:	4a13      	ldr	r2, [pc, #76]	; (800ee74 <HAL_UART_IRQHandler+0x29c>)
 800ee28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7f9 fde2 	bl	80089f8 <HAL_DMA_Abort_IT>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d017      	beq.n	800ee6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ee44:	4610      	mov	r0, r2
 800ee46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee48:	e00f      	b.n	800ee6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 f9c2 	bl	800f1d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee50:	e00b      	b.n	800ee6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 f9be 	bl	800f1d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee58:	e007      	b.n	800ee6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 f9ba 	bl	800f1d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800ee68:	e195      	b.n	800f196 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee6a:	bf00      	nop
    return;
 800ee6c:	e193      	b.n	800f196 <HAL_UART_IRQHandler+0x5be>
 800ee6e:	bf00      	nop
 800ee70:	04000120 	.word	0x04000120
 800ee74:	0800fdf9 	.word	0x0800fdf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	f040 814e 	bne.w	800f11e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ee82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee86:	f003 0310 	and.w	r3, r3, #16
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	f000 8147 	beq.w	800f11e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ee90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee94:	f003 0310 	and.w	r3, r3, #16
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 8140 	beq.w	800f11e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2210      	movs	r2, #16
 800eea4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeb0:	2b40      	cmp	r3, #64	; 0x40
 800eeb2:	f040 80b8 	bne.w	800f026 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eec2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f000 8167 	beq.w	800f19a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800eed6:	429a      	cmp	r2, r3
 800eed8:	f080 815f 	bcs.w	800f19a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800eee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f003 0320 	and.w	r3, r3, #32
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f040 8086 	bne.w	800f004 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef04:	e853 3f00 	ldrex	r3, [r3]
 800ef08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ef0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ef22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ef26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ef2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ef32:	e841 2300 	strex	r3, r2, [r1]
 800ef36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ef3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d1da      	bne.n	800eef8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	3308      	adds	r3, #8
 800ef48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef4c:	e853 3f00 	ldrex	r3, [r3]
 800ef50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ef52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef54:	f023 0301 	bic.w	r3, r3, #1
 800ef58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	3308      	adds	r3, #8
 800ef62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ef66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ef6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ef6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ef72:	e841 2300 	strex	r3, r2, [r1]
 800ef76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ef78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1e1      	bne.n	800ef42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	3308      	adds	r3, #8
 800ef84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef88:	e853 3f00 	ldrex	r3, [r3]
 800ef8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ef8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	3308      	adds	r3, #8
 800ef9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800efa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800efa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800efa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800efaa:	e841 2300 	strex	r3, r2, [r1]
 800efae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800efb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d1e3      	bne.n	800ef7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2220      	movs	r2, #32
 800efba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efcc:	e853 3f00 	ldrex	r3, [r3]
 800efd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800efd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efd4:	f023 0310 	bic.w	r3, r3, #16
 800efd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	461a      	mov	r2, r3
 800efe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800efe6:	65bb      	str	r3, [r7, #88]	; 0x58
 800efe8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800efec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800efee:	e841 2300 	strex	r3, r2, [r1]
 800eff2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1e4      	bne.n	800efc4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800effe:	4618      	mov	r0, r3
 800f000:	f7f9 fcbc 	bl	800897c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2202      	movs	r2, #2
 800f008:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f016:	b29b      	uxth	r3, r3
 800f018:	1ad3      	subs	r3, r2, r3
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	4619      	mov	r1, r3
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 f8e2 	bl	800f1e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f024:	e0b9      	b.n	800f19a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f032:	b29b      	uxth	r3, r3
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f040:	b29b      	uxth	r3, r3
 800f042:	2b00      	cmp	r3, #0
 800f044:	f000 80ab 	beq.w	800f19e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800f048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	f000 80a6 	beq.w	800f19e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05a:	e853 3f00 	ldrex	r3, [r3]
 800f05e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f066:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	461a      	mov	r2, r3
 800f070:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f074:	647b      	str	r3, [r7, #68]	; 0x44
 800f076:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f078:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f07a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f07c:	e841 2300 	strex	r3, r2, [r1]
 800f080:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f084:	2b00      	cmp	r3, #0
 800f086:	d1e4      	bne.n	800f052 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	3308      	adds	r3, #8
 800f08e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f092:	e853 3f00 	ldrex	r3, [r3]
 800f096:	623b      	str	r3, [r7, #32]
   return(result);
 800f098:	6a3b      	ldr	r3, [r7, #32]
 800f09a:	f023 0301 	bic.w	r3, r3, #1
 800f09e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f0ac:	633a      	str	r2, [r7, #48]	; 0x30
 800f0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0b4:	e841 2300 	strex	r3, r2, [r1]
 800f0b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d1e3      	bne.n	800f088 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2220      	movs	r2, #32
 800f0c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	e853 3f00 	ldrex	r3, [r3]
 800f0e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f023 0310 	bic.w	r3, r3, #16
 800f0e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f0f6:	61fb      	str	r3, [r7, #28]
 800f0f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0fa:	69b9      	ldr	r1, [r7, #24]
 800f0fc:	69fa      	ldr	r2, [r7, #28]
 800f0fe:	e841 2300 	strex	r3, r2, [r1]
 800f102:	617b      	str	r3, [r7, #20]
   return(result);
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d1e4      	bne.n	800f0d4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2202      	movs	r2, #2
 800f10e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f114:	4619      	mov	r1, r3
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f000 f866 	bl	800f1e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f11c:	e03f      	b.n	800f19e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00e      	beq.n	800f148 <HAL_UART_IRQHandler+0x570>
 800f12a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f12e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f132:	2b00      	cmp	r3, #0
 800f134:	d008      	beq.n	800f148 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f13e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 fe99 	bl	800fe78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f146:	e02d      	b.n	800f1a4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00e      	beq.n	800f172 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d008      	beq.n	800f172 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f164:	2b00      	cmp	r3, #0
 800f166:	d01c      	beq.n	800f1a2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	4798      	blx	r3
    }
    return;
 800f170:	e017      	b.n	800f1a2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d012      	beq.n	800f1a4 <HAL_UART_IRQHandler+0x5cc>
 800f17e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00c      	beq.n	800f1a4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 fe4a 	bl	800fe24 <UART_EndTransmit_IT>
    return;
 800f190:	e008      	b.n	800f1a4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800f192:	bf00      	nop
 800f194:	e006      	b.n	800f1a4 <HAL_UART_IRQHandler+0x5cc>
    return;
 800f196:	bf00      	nop
 800f198:	e004      	b.n	800f1a4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800f19a:	bf00      	nop
 800f19c:	e002      	b.n	800f1a4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800f19e:	bf00      	nop
 800f1a0:	e000      	b.n	800f1a4 <HAL_UART_IRQHandler+0x5cc>
    return;
 800f1a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800f1a4:	37e8      	adds	r7, #232	; 0xe8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop

0800f1ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f1b4:	bf00      	nop
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f1c8:	bf00      	nop
 800f1ca:	370c      	adds	r7, #12
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f1dc:	bf00      	nop
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f1f4:	bf00      	nop
 800f1f6:	370c      	adds	r7, #12
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f204:	b08a      	sub	sp, #40	; 0x28
 800f206:	af00      	add	r7, sp, #0
 800f208:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f20a:	2300      	movs	r3, #0
 800f20c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	689a      	ldr	r2, [r3, #8]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	691b      	ldr	r3, [r3, #16]
 800f218:	431a      	orrs	r2, r3
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	695b      	ldr	r3, [r3, #20]
 800f21e:	431a      	orrs	r2, r3
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	69db      	ldr	r3, [r3, #28]
 800f224:	4313      	orrs	r3, r2
 800f226:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	4bb4      	ldr	r3, [pc, #720]	; (800f500 <UART_SetConfig+0x300>)
 800f230:	4013      	ands	r3, r2
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	6812      	ldr	r2, [r2, #0]
 800f236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f238:	430b      	orrs	r3, r1
 800f23a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	68da      	ldr	r2, [r3, #12]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	430a      	orrs	r2, r1
 800f250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4aa9      	ldr	r2, [pc, #676]	; (800f504 <UART_SetConfig+0x304>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d004      	beq.n	800f26c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	6a1b      	ldr	r3, [r3, #32]
 800f266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f268:	4313      	orrs	r3, r2
 800f26a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f27c:	430a      	orrs	r2, r1
 800f27e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4aa0      	ldr	r2, [pc, #640]	; (800f508 <UART_SetConfig+0x308>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d126      	bne.n	800f2d8 <UART_SetConfig+0xd8>
 800f28a:	4ba0      	ldr	r3, [pc, #640]	; (800f50c <UART_SetConfig+0x30c>)
 800f28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f290:	f003 0303 	and.w	r3, r3, #3
 800f294:	2b03      	cmp	r3, #3
 800f296:	d81b      	bhi.n	800f2d0 <UART_SetConfig+0xd0>
 800f298:	a201      	add	r2, pc, #4	; (adr r2, 800f2a0 <UART_SetConfig+0xa0>)
 800f29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29e:	bf00      	nop
 800f2a0:	0800f2b1 	.word	0x0800f2b1
 800f2a4:	0800f2c1 	.word	0x0800f2c1
 800f2a8:	0800f2b9 	.word	0x0800f2b9
 800f2ac:	0800f2c9 	.word	0x0800f2c9
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f2b6:	e080      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f2b8:	2302      	movs	r3, #2
 800f2ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f2be:	e07c      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f2c0:	2304      	movs	r3, #4
 800f2c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f2c6:	e078      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f2c8:	2308      	movs	r3, #8
 800f2ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f2ce:	e074      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f2d0:	2310      	movs	r3, #16
 800f2d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f2d6:	e070      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a8c      	ldr	r2, [pc, #560]	; (800f510 <UART_SetConfig+0x310>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d138      	bne.n	800f354 <UART_SetConfig+0x154>
 800f2e2:	4b8a      	ldr	r3, [pc, #552]	; (800f50c <UART_SetConfig+0x30c>)
 800f2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2e8:	f003 030c 	and.w	r3, r3, #12
 800f2ec:	2b0c      	cmp	r3, #12
 800f2ee:	d82d      	bhi.n	800f34c <UART_SetConfig+0x14c>
 800f2f0:	a201      	add	r2, pc, #4	; (adr r2, 800f2f8 <UART_SetConfig+0xf8>)
 800f2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f6:	bf00      	nop
 800f2f8:	0800f32d 	.word	0x0800f32d
 800f2fc:	0800f34d 	.word	0x0800f34d
 800f300:	0800f34d 	.word	0x0800f34d
 800f304:	0800f34d 	.word	0x0800f34d
 800f308:	0800f33d 	.word	0x0800f33d
 800f30c:	0800f34d 	.word	0x0800f34d
 800f310:	0800f34d 	.word	0x0800f34d
 800f314:	0800f34d 	.word	0x0800f34d
 800f318:	0800f335 	.word	0x0800f335
 800f31c:	0800f34d 	.word	0x0800f34d
 800f320:	0800f34d 	.word	0x0800f34d
 800f324:	0800f34d 	.word	0x0800f34d
 800f328:	0800f345 	.word	0x0800f345
 800f32c:	2300      	movs	r3, #0
 800f32e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f332:	e042      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f334:	2302      	movs	r3, #2
 800f336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f33a:	e03e      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f33c:	2304      	movs	r3, #4
 800f33e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f342:	e03a      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f344:	2308      	movs	r3, #8
 800f346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f34a:	e036      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f34c:	2310      	movs	r3, #16
 800f34e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f352:	e032      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4a6a      	ldr	r2, [pc, #424]	; (800f504 <UART_SetConfig+0x304>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d12a      	bne.n	800f3b4 <UART_SetConfig+0x1b4>
 800f35e:	4b6b      	ldr	r3, [pc, #428]	; (800f50c <UART_SetConfig+0x30c>)
 800f360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f364:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f36c:	d01a      	beq.n	800f3a4 <UART_SetConfig+0x1a4>
 800f36e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f372:	d81b      	bhi.n	800f3ac <UART_SetConfig+0x1ac>
 800f374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f378:	d00c      	beq.n	800f394 <UART_SetConfig+0x194>
 800f37a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f37e:	d815      	bhi.n	800f3ac <UART_SetConfig+0x1ac>
 800f380:	2b00      	cmp	r3, #0
 800f382:	d003      	beq.n	800f38c <UART_SetConfig+0x18c>
 800f384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f388:	d008      	beq.n	800f39c <UART_SetConfig+0x19c>
 800f38a:	e00f      	b.n	800f3ac <UART_SetConfig+0x1ac>
 800f38c:	2300      	movs	r3, #0
 800f38e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f392:	e012      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f394:	2302      	movs	r3, #2
 800f396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f39a:	e00e      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f39c:	2304      	movs	r3, #4
 800f39e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3a2:	e00a      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f3a4:	2308      	movs	r3, #8
 800f3a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3aa:	e006      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f3ac:	2310      	movs	r3, #16
 800f3ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3b2:	e002      	b.n	800f3ba <UART_SetConfig+0x1ba>
 800f3b4:	2310      	movs	r3, #16
 800f3b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	4a51      	ldr	r2, [pc, #324]	; (800f504 <UART_SetConfig+0x304>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d17a      	bne.n	800f4ba <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f3c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f3c8:	2b08      	cmp	r3, #8
 800f3ca:	d824      	bhi.n	800f416 <UART_SetConfig+0x216>
 800f3cc:	a201      	add	r2, pc, #4	; (adr r2, 800f3d4 <UART_SetConfig+0x1d4>)
 800f3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d2:	bf00      	nop
 800f3d4:	0800f3f9 	.word	0x0800f3f9
 800f3d8:	0800f417 	.word	0x0800f417
 800f3dc:	0800f401 	.word	0x0800f401
 800f3e0:	0800f417 	.word	0x0800f417
 800f3e4:	0800f407 	.word	0x0800f407
 800f3e8:	0800f417 	.word	0x0800f417
 800f3ec:	0800f417 	.word	0x0800f417
 800f3f0:	0800f417 	.word	0x0800f417
 800f3f4:	0800f40f 	.word	0x0800f40f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3f8:	f7fd f8ac 	bl	800c554 <HAL_RCC_GetPCLK1Freq>
 800f3fc:	61f8      	str	r0, [r7, #28]
        break;
 800f3fe:	e010      	b.n	800f422 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f400:	4b44      	ldr	r3, [pc, #272]	; (800f514 <UART_SetConfig+0x314>)
 800f402:	61fb      	str	r3, [r7, #28]
        break;
 800f404:	e00d      	b.n	800f422 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f406:	f7fd f80d 	bl	800c424 <HAL_RCC_GetSysClockFreq>
 800f40a:	61f8      	str	r0, [r7, #28]
        break;
 800f40c:	e009      	b.n	800f422 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f40e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f412:	61fb      	str	r3, [r7, #28]
        break;
 800f414:	e005      	b.n	800f422 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800f416:	2300      	movs	r3, #0
 800f418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f41a:	2301      	movs	r3, #1
 800f41c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f420:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	2b00      	cmp	r3, #0
 800f426:	f000 8107 	beq.w	800f638 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	685a      	ldr	r2, [r3, #4]
 800f42e:	4613      	mov	r3, r2
 800f430:	005b      	lsls	r3, r3, #1
 800f432:	4413      	add	r3, r2
 800f434:	69fa      	ldr	r2, [r7, #28]
 800f436:	429a      	cmp	r2, r3
 800f438:	d305      	bcc.n	800f446 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f440:	69fa      	ldr	r2, [r7, #28]
 800f442:	429a      	cmp	r2, r3
 800f444:	d903      	bls.n	800f44e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800f446:	2301      	movs	r3, #1
 800f448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f44c:	e0f4      	b.n	800f638 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	2200      	movs	r2, #0
 800f452:	461c      	mov	r4, r3
 800f454:	4615      	mov	r5, r2
 800f456:	f04f 0200 	mov.w	r2, #0
 800f45a:	f04f 0300 	mov.w	r3, #0
 800f45e:	022b      	lsls	r3, r5, #8
 800f460:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800f464:	0222      	lsls	r2, r4, #8
 800f466:	68f9      	ldr	r1, [r7, #12]
 800f468:	6849      	ldr	r1, [r1, #4]
 800f46a:	0849      	lsrs	r1, r1, #1
 800f46c:	2000      	movs	r0, #0
 800f46e:	4688      	mov	r8, r1
 800f470:	4681      	mov	r9, r0
 800f472:	eb12 0a08 	adds.w	sl, r2, r8
 800f476:	eb43 0b09 	adc.w	fp, r3, r9
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	2200      	movs	r2, #0
 800f480:	603b      	str	r3, [r7, #0]
 800f482:	607a      	str	r2, [r7, #4]
 800f484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f488:	4650      	mov	r0, sl
 800f48a:	4659      	mov	r1, fp
 800f48c:	f7f1 fbfc 	bl	8000c88 <__aeabi_uldivmod>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	4613      	mov	r3, r2
 800f496:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f49e:	d308      	bcc.n	800f4b2 <UART_SetConfig+0x2b2>
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4a6:	d204      	bcs.n	800f4b2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	69ba      	ldr	r2, [r7, #24]
 800f4ae:	60da      	str	r2, [r3, #12]
 800f4b0:	e0c2      	b.n	800f638 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f4b8:	e0be      	b.n	800f638 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	69db      	ldr	r3, [r3, #28]
 800f4be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4c2:	d16a      	bne.n	800f59a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800f4c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4c8:	2b08      	cmp	r3, #8
 800f4ca:	d834      	bhi.n	800f536 <UART_SetConfig+0x336>
 800f4cc:	a201      	add	r2, pc, #4	; (adr r2, 800f4d4 <UART_SetConfig+0x2d4>)
 800f4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d2:	bf00      	nop
 800f4d4:	0800f4f9 	.word	0x0800f4f9
 800f4d8:	0800f519 	.word	0x0800f519
 800f4dc:	0800f521 	.word	0x0800f521
 800f4e0:	0800f537 	.word	0x0800f537
 800f4e4:	0800f527 	.word	0x0800f527
 800f4e8:	0800f537 	.word	0x0800f537
 800f4ec:	0800f537 	.word	0x0800f537
 800f4f0:	0800f537 	.word	0x0800f537
 800f4f4:	0800f52f 	.word	0x0800f52f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4f8:	f7fd f82c 	bl	800c554 <HAL_RCC_GetPCLK1Freq>
 800f4fc:	61f8      	str	r0, [r7, #28]
        break;
 800f4fe:	e020      	b.n	800f542 <UART_SetConfig+0x342>
 800f500:	efff69f3 	.word	0xefff69f3
 800f504:	40008000 	.word	0x40008000
 800f508:	40013800 	.word	0x40013800
 800f50c:	40021000 	.word	0x40021000
 800f510:	40004400 	.word	0x40004400
 800f514:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f518:	f7fd f832 	bl	800c580 <HAL_RCC_GetPCLK2Freq>
 800f51c:	61f8      	str	r0, [r7, #28]
        break;
 800f51e:	e010      	b.n	800f542 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f520:	4b4c      	ldr	r3, [pc, #304]	; (800f654 <UART_SetConfig+0x454>)
 800f522:	61fb      	str	r3, [r7, #28]
        break;
 800f524:	e00d      	b.n	800f542 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f526:	f7fc ff7d 	bl	800c424 <HAL_RCC_GetSysClockFreq>
 800f52a:	61f8      	str	r0, [r7, #28]
        break;
 800f52c:	e009      	b.n	800f542 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f52e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f532:	61fb      	str	r3, [r7, #28]
        break;
 800f534:	e005      	b.n	800f542 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800f536:	2300      	movs	r3, #0
 800f538:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f53a:	2301      	movs	r3, #1
 800f53c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f540:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d077      	beq.n	800f638 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	005a      	lsls	r2, r3, #1
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	085b      	lsrs	r3, r3, #1
 800f552:	441a      	add	r2, r3
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	fbb2 f3f3 	udiv	r3, r2, r3
 800f55c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f55e:	69bb      	ldr	r3, [r7, #24]
 800f560:	2b0f      	cmp	r3, #15
 800f562:	d916      	bls.n	800f592 <UART_SetConfig+0x392>
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f56a:	d212      	bcs.n	800f592 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	b29b      	uxth	r3, r3
 800f570:	f023 030f 	bic.w	r3, r3, #15
 800f574:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f576:	69bb      	ldr	r3, [r7, #24]
 800f578:	085b      	lsrs	r3, r3, #1
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	f003 0307 	and.w	r3, r3, #7
 800f580:	b29a      	uxth	r2, r3
 800f582:	8afb      	ldrh	r3, [r7, #22]
 800f584:	4313      	orrs	r3, r2
 800f586:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	8afa      	ldrh	r2, [r7, #22]
 800f58e:	60da      	str	r2, [r3, #12]
 800f590:	e052      	b.n	800f638 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800f592:	2301      	movs	r3, #1
 800f594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f598:	e04e      	b.n	800f638 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f59a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f59e:	2b08      	cmp	r3, #8
 800f5a0:	d827      	bhi.n	800f5f2 <UART_SetConfig+0x3f2>
 800f5a2:	a201      	add	r2, pc, #4	; (adr r2, 800f5a8 <UART_SetConfig+0x3a8>)
 800f5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a8:	0800f5cd 	.word	0x0800f5cd
 800f5ac:	0800f5d5 	.word	0x0800f5d5
 800f5b0:	0800f5dd 	.word	0x0800f5dd
 800f5b4:	0800f5f3 	.word	0x0800f5f3
 800f5b8:	0800f5e3 	.word	0x0800f5e3
 800f5bc:	0800f5f3 	.word	0x0800f5f3
 800f5c0:	0800f5f3 	.word	0x0800f5f3
 800f5c4:	0800f5f3 	.word	0x0800f5f3
 800f5c8:	0800f5eb 	.word	0x0800f5eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5cc:	f7fc ffc2 	bl	800c554 <HAL_RCC_GetPCLK1Freq>
 800f5d0:	61f8      	str	r0, [r7, #28]
        break;
 800f5d2:	e014      	b.n	800f5fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5d4:	f7fc ffd4 	bl	800c580 <HAL_RCC_GetPCLK2Freq>
 800f5d8:	61f8      	str	r0, [r7, #28]
        break;
 800f5da:	e010      	b.n	800f5fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f5dc:	4b1d      	ldr	r3, [pc, #116]	; (800f654 <UART_SetConfig+0x454>)
 800f5de:	61fb      	str	r3, [r7, #28]
        break;
 800f5e0:	e00d      	b.n	800f5fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f5e2:	f7fc ff1f 	bl	800c424 <HAL_RCC_GetSysClockFreq>
 800f5e6:	61f8      	str	r0, [r7, #28]
        break;
 800f5e8:	e009      	b.n	800f5fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5ee:	61fb      	str	r3, [r7, #28]
        break;
 800f5f0:	e005      	b.n	800f5fe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f5fc:	bf00      	nop
    }

    if (pclk != 0U)
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d019      	beq.n	800f638 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	085a      	lsrs	r2, r3, #1
 800f60a:	69fb      	ldr	r3, [r7, #28]
 800f60c:	441a      	add	r2, r3
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	fbb2 f3f3 	udiv	r3, r2, r3
 800f616:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	2b0f      	cmp	r3, #15
 800f61c:	d909      	bls.n	800f632 <UART_SetConfig+0x432>
 800f61e:	69bb      	ldr	r3, [r7, #24]
 800f620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f624:	d205      	bcs.n	800f632 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	b29a      	uxth	r2, r3
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	60da      	str	r2, [r3, #12]
 800f630:	e002      	b.n	800f638 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800f632:	2301      	movs	r3, #1
 800f634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2200      	movs	r2, #0
 800f642:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800f644:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3728      	adds	r7, #40	; 0x28
 800f64c:	46bd      	mov	sp, r7
 800f64e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f652:	bf00      	nop
 800f654:	00f42400 	.word	0x00f42400

0800f658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f664:	f003 0308 	and.w	r3, r3, #8
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00a      	beq.n	800f682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	430a      	orrs	r2, r1
 800f680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f686:	f003 0301 	and.w	r3, r3, #1
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d00a      	beq.n	800f6a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	430a      	orrs	r2, r1
 800f6a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a8:	f003 0302 	and.w	r3, r3, #2
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d00a      	beq.n	800f6c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	430a      	orrs	r2, r1
 800f6c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ca:	f003 0304 	and.w	r3, r3, #4
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d00a      	beq.n	800f6e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	430a      	orrs	r2, r1
 800f6e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ec:	f003 0310 	and.w	r3, r3, #16
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00a      	beq.n	800f70a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	430a      	orrs	r2, r1
 800f708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f70e:	f003 0320 	and.w	r3, r3, #32
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00a      	beq.n	800f72c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	689b      	ldr	r3, [r3, #8]
 800f71c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	430a      	orrs	r2, r1
 800f72a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f734:	2b00      	cmp	r3, #0
 800f736:	d01a      	beq.n	800f76e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	430a      	orrs	r2, r1
 800f74c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f756:	d10a      	bne.n	800f76e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	430a      	orrs	r2, r1
 800f76c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f776:	2b00      	cmp	r3, #0
 800f778:	d00a      	beq.n	800f790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	430a      	orrs	r2, r1
 800f78e:	605a      	str	r2, [r3, #4]
  }
}
 800f790:	bf00      	nop
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr

0800f79c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b098      	sub	sp, #96	; 0x60
 800f7a0:	af02      	add	r7, sp, #8
 800f7a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f7ac:	f7f7 fb28 	bl	8006e00 <HAL_GetTick>
 800f7b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f003 0308 	and.w	r3, r3, #8
 800f7bc:	2b08      	cmp	r3, #8
 800f7be:	d12e      	bne.n	800f81e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 f88c 	bl	800f8ec <UART_WaitOnFlagUntilTimeout>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d021      	beq.n	800f81e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e2:	e853 3f00 	ldrex	r3, [r3]
 800f7e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7ee:	653b      	str	r3, [r7, #80]	; 0x50
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7f8:	647b      	str	r3, [r7, #68]	; 0x44
 800f7fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f800:	e841 2300 	strex	r3, r2, [r1]
 800f804:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d1e6      	bne.n	800f7da <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2220      	movs	r2, #32
 800f810:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2200      	movs	r2, #0
 800f816:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f81a:	2303      	movs	r3, #3
 800f81c:	e062      	b.n	800f8e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f003 0304 	and.w	r3, r3, #4
 800f828:	2b04      	cmp	r3, #4
 800f82a:	d149      	bne.n	800f8c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f82c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f830:	9300      	str	r3, [sp, #0]
 800f832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f834:	2200      	movs	r2, #0
 800f836:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 f856 	bl	800f8ec <UART_WaitOnFlagUntilTimeout>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	d03c      	beq.n	800f8c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84e:	e853 3f00 	ldrex	r3, [r3]
 800f852:	623b      	str	r3, [r7, #32]
   return(result);
 800f854:	6a3b      	ldr	r3, [r7, #32]
 800f856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f85a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	461a      	mov	r2, r3
 800f862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f864:	633b      	str	r3, [r7, #48]	; 0x30
 800f866:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f868:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f86a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f86c:	e841 2300 	strex	r3, r2, [r1]
 800f870:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1e6      	bne.n	800f846 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	3308      	adds	r3, #8
 800f87e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	e853 3f00 	ldrex	r3, [r3]
 800f886:	60fb      	str	r3, [r7, #12]
   return(result);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f023 0301 	bic.w	r3, r3, #1
 800f88e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	3308      	adds	r3, #8
 800f896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f898:	61fa      	str	r2, [r7, #28]
 800f89a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f89c:	69b9      	ldr	r1, [r7, #24]
 800f89e:	69fa      	ldr	r2, [r7, #28]
 800f8a0:	e841 2300 	strex	r3, r2, [r1]
 800f8a4:	617b      	str	r3, [r7, #20]
   return(result);
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1e5      	bne.n	800f878 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2220      	movs	r2, #32
 800f8b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f8bc:	2303      	movs	r3, #3
 800f8be:	e011      	b.n	800f8e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2220      	movs	r2, #32
 800f8c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2220      	movs	r2, #32
 800f8ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800f8e2:	2300      	movs	r3, #0
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3758      	adds	r7, #88	; 0x58
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	603b      	str	r3, [r7, #0]
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8fc:	e049      	b.n	800f992 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f904:	d045      	beq.n	800f992 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f906:	f7f7 fa7b 	bl	8006e00 <HAL_GetTick>
 800f90a:	4602      	mov	r2, r0
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	69ba      	ldr	r2, [r7, #24]
 800f912:	429a      	cmp	r2, r3
 800f914:	d302      	bcc.n	800f91c <UART_WaitOnFlagUntilTimeout+0x30>
 800f916:	69bb      	ldr	r3, [r7, #24]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d101      	bne.n	800f920 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f91c:	2303      	movs	r3, #3
 800f91e:	e048      	b.n	800f9b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f003 0304 	and.w	r3, r3, #4
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d031      	beq.n	800f992 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	69db      	ldr	r3, [r3, #28]
 800f934:	f003 0308 	and.w	r3, r3, #8
 800f938:	2b08      	cmp	r3, #8
 800f93a:	d110      	bne.n	800f95e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2208      	movs	r2, #8
 800f942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f000 f8ff 	bl	800fb48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2208      	movs	r2, #8
 800f94e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2200      	movs	r2, #0
 800f956:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	e029      	b.n	800f9b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	69db      	ldr	r3, [r3, #28]
 800f964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f96c:	d111      	bne.n	800f992 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f000 f8e5 	bl	800fb48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2220      	movs	r2, #32
 800f982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2200      	movs	r2, #0
 800f98a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800f98e:	2303      	movs	r3, #3
 800f990:	e00f      	b.n	800f9b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	69da      	ldr	r2, [r3, #28]
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	4013      	ands	r3, r2
 800f99c:	68ba      	ldr	r2, [r7, #8]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	bf0c      	ite	eq
 800f9a2:	2301      	moveq	r3, #1
 800f9a4:	2300      	movne	r3, #0
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	79fb      	ldrb	r3, [r7, #7]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d0a6      	beq.n	800f8fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
	...

0800f9bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b096      	sub	sp, #88	; 0x58
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	68ba      	ldr	r2, [r7, #8]
 800f9ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	88fa      	ldrh	r2, [r7, #6]
 800f9d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2222      	movs	r2, #34	; 0x22
 800f9e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d028      	beq.n	800fa42 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9f4:	4a3e      	ldr	r2, [pc, #248]	; (800faf0 <UART_Start_Receive_DMA+0x134>)
 800f9f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9fc:	4a3d      	ldr	r2, [pc, #244]	; (800faf4 <UART_Start_Receive_DMA+0x138>)
 800f9fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa04:	4a3c      	ldr	r2, [pc, #240]	; (800faf8 <UART_Start_Receive_DMA+0x13c>)
 800fa06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	3324      	adds	r3, #36	; 0x24
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa20:	461a      	mov	r2, r3
 800fa22:	88fb      	ldrh	r3, [r7, #6]
 800fa24:	f7f8 ff4a 	bl	80088bc <HAL_DMA_Start_IT>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d009      	beq.n	800fa42 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2210      	movs	r2, #16
 800fa32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2220      	movs	r2, #32
 800fa3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e051      	b.n	800fae6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	691b      	ldr	r3, [r3, #16]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d018      	beq.n	800fa7c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa52:	e853 3f00 	ldrex	r3, [r3]
 800fa56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa5e:	657b      	str	r3, [r7, #84]	; 0x54
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	461a      	mov	r2, r3
 800fa66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa68:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa6a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa70:	e841 2300 	strex	r3, r2, [r1]
 800fa74:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fa76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d1e6      	bne.n	800fa4a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	3308      	adds	r3, #8
 800fa82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa86:	e853 3f00 	ldrex	r3, [r3]
 800fa8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8e:	f043 0301 	orr.w	r3, r3, #1
 800fa92:	653b      	str	r3, [r7, #80]	; 0x50
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	3308      	adds	r3, #8
 800fa9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa9c:	637a      	str	r2, [r7, #52]	; 0x34
 800fa9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800faa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800faa4:	e841 2300 	strex	r3, r2, [r1]
 800faa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800faaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faac:	2b00      	cmp	r3, #0
 800faae:	d1e5      	bne.n	800fa7c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	3308      	adds	r3, #8
 800fab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	e853 3f00 	ldrex	r3, [r3]
 800fabe:	613b      	str	r3, [r7, #16]
   return(result);
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	3308      	adds	r3, #8
 800face:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fad0:	623a      	str	r2, [r7, #32]
 800fad2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad4:	69f9      	ldr	r1, [r7, #28]
 800fad6:	6a3a      	ldr	r2, [r7, #32]
 800fad8:	e841 2300 	strex	r3, r2, [r1]
 800fadc:	61bb      	str	r3, [r7, #24]
   return(result);
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d1e5      	bne.n	800fab0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3758      	adds	r7, #88	; 0x58
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	0800fc11 	.word	0x0800fc11
 800faf4:	0800fd3d 	.word	0x0800fd3d
 800faf8:	0800fd7b 	.word	0x0800fd7b

0800fafc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b089      	sub	sp, #36	; 0x24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	e853 3f00 	ldrex	r3, [r3]
 800fb10:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fb18:	61fb      	str	r3, [r7, #28]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	61bb      	str	r3, [r7, #24]
 800fb24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb26:	6979      	ldr	r1, [r7, #20]
 800fb28:	69ba      	ldr	r2, [r7, #24]
 800fb2a:	e841 2300 	strex	r3, r2, [r1]
 800fb2e:	613b      	str	r3, [r7, #16]
   return(result);
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1e6      	bne.n	800fb04 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2220      	movs	r2, #32
 800fb3a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800fb3c:	bf00      	nop
 800fb3e:	3724      	adds	r7, #36	; 0x24
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b095      	sub	sp, #84	; 0x54
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb58:	e853 3f00 	ldrex	r3, [r3]
 800fb5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb6e:	643b      	str	r3, [r7, #64]	; 0x40
 800fb70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb76:	e841 2300 	strex	r3, r2, [r1]
 800fb7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1e6      	bne.n	800fb50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3308      	adds	r3, #8
 800fb88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8a:	6a3b      	ldr	r3, [r7, #32]
 800fb8c:	e853 3f00 	ldrex	r3, [r3]
 800fb90:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	f023 0301 	bic.w	r3, r3, #1
 800fb98:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	3308      	adds	r3, #8
 800fba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbaa:	e841 2300 	strex	r3, r2, [r1]
 800fbae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1e5      	bne.n	800fb82 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d118      	bne.n	800fbf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	e853 3f00 	ldrex	r3, [r3]
 800fbca:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	f023 0310 	bic.w	r3, r3, #16
 800fbd2:	647b      	str	r3, [r7, #68]	; 0x44
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbdc:	61bb      	str	r3, [r7, #24]
 800fbde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe0:	6979      	ldr	r1, [r7, #20]
 800fbe2:	69ba      	ldr	r2, [r7, #24]
 800fbe4:	e841 2300 	strex	r3, r2, [r1]
 800fbe8:	613b      	str	r3, [r7, #16]
   return(result);
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1e6      	bne.n	800fbbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2220      	movs	r2, #32
 800fbf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	669a      	str	r2, [r3, #104]	; 0x68
}
 800fc04:	bf00      	nop
 800fc06:	3754      	adds	r7, #84	; 0x54
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr

0800fc10 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b09c      	sub	sp, #112	; 0x70
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc1c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f003 0320 	and.w	r3, r3, #32
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d171      	bne.n	800fd10 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800fc2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc3c:	e853 3f00 	ldrex	r3, [r3]
 800fc40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fc42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc48:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc52:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc5a:	e841 2300 	strex	r3, r2, [r1]
 800fc5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fc60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d1e6      	bne.n	800fc34 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	3308      	adds	r3, #8
 800fc6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc70:	e853 3f00 	ldrex	r3, [r3]
 800fc74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc78:	f023 0301 	bic.w	r3, r3, #1
 800fc7c:	667b      	str	r3, [r7, #100]	; 0x64
 800fc7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	3308      	adds	r3, #8
 800fc84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fc86:	647a      	str	r2, [r7, #68]	; 0x44
 800fc88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc8e:	e841 2300 	strex	r3, r2, [r1]
 800fc92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fc94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1e5      	bne.n	800fc66 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	3308      	adds	r3, #8
 800fca0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca4:	e853 3f00 	ldrex	r3, [r3]
 800fca8:	623b      	str	r3, [r7, #32]
   return(result);
 800fcaa:	6a3b      	ldr	r3, [r7, #32]
 800fcac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcb0:	663b      	str	r3, [r7, #96]	; 0x60
 800fcb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	3308      	adds	r3, #8
 800fcb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fcba:	633a      	str	r2, [r7, #48]	; 0x30
 800fcbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcc2:	e841 2300 	strex	r3, r2, [r1]
 800fcc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1e5      	bne.n	800fc9a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fcce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcd0:	2220      	movs	r2, #32
 800fcd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d118      	bne.n	800fd10 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	e853 3f00 	ldrex	r3, [r3]
 800fcea:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f023 0310 	bic.w	r3, r3, #16
 800fcf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcfc:	61fb      	str	r3, [r7, #28]
 800fcfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd00:	69b9      	ldr	r1, [r7, #24]
 800fd02:	69fa      	ldr	r2, [r7, #28]
 800fd04:	e841 2300 	strex	r3, r2, [r1]
 800fd08:	617b      	str	r3, [r7, #20]
   return(result);
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d1e6      	bne.n	800fcde <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd12:	2200      	movs	r2, #0
 800fd14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd1a:	2b01      	cmp	r3, #1
 800fd1c:	d107      	bne.n	800fd2e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fd24:	4619      	mov	r1, r3
 800fd26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fd28:	f7ff fa5e 	bl	800f1e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fd2c:	e002      	b.n	800fd34 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800fd2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fd30:	f7f6 ff08 	bl	8006b44 <HAL_UART_RxCpltCallback>
}
 800fd34:	bf00      	nop
 800fd36:	3770      	adds	r7, #112	; 0x70
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd48:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d109      	bne.n	800fd6c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fd5e:	085b      	lsrs	r3, r3, #1
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	4619      	mov	r1, r3
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f7ff fa3f 	bl	800f1e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fd6a:	e002      	b.n	800fd72 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f7ff fa27 	bl	800f1c0 <HAL_UART_RxHalfCpltCallback>
}
 800fd72:	bf00      	nop
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b086      	sub	sp, #24
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd86:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd8c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd94:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fda0:	2b80      	cmp	r3, #128	; 0x80
 800fda2:	d109      	bne.n	800fdb8 <UART_DMAError+0x3e>
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	2b21      	cmp	r3, #33	; 0x21
 800fda8:	d106      	bne.n	800fdb8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	2200      	movs	r2, #0
 800fdae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800fdb2:	6978      	ldr	r0, [r7, #20]
 800fdb4:	f7ff fea2 	bl	800fafc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	689b      	ldr	r3, [r3, #8]
 800fdbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdc2:	2b40      	cmp	r3, #64	; 0x40
 800fdc4:	d109      	bne.n	800fdda <UART_DMAError+0x60>
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2b22      	cmp	r3, #34	; 0x22
 800fdca:	d106      	bne.n	800fdda <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800fdd4:	6978      	ldr	r0, [r7, #20]
 800fdd6:	f7ff feb7 	bl	800fb48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fde0:	f043 0210 	orr.w	r2, r3, #16
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fdea:	6978      	ldr	r0, [r7, #20]
 800fdec:	f7ff f9f2 	bl	800f1d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdf0:	bf00      	nop
 800fdf2:	3718      	adds	r7, #24
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2200      	movs	r2, #0
 800fe12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe16:	68f8      	ldr	r0, [r7, #12]
 800fe18:	f7ff f9dc 	bl	800f1d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe1c:	bf00      	nop
 800fe1e:	3710      	adds	r7, #16
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b088      	sub	sp, #32
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	e853 3f00 	ldrex	r3, [r3]
 800fe38:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe40:	61fb      	str	r3, [r7, #28]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	461a      	mov	r2, r3
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	61bb      	str	r3, [r7, #24]
 800fe4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe4e:	6979      	ldr	r1, [r7, #20]
 800fe50:	69ba      	ldr	r2, [r7, #24]
 800fe52:	e841 2300 	strex	r3, r2, [r1]
 800fe56:	613b      	str	r3, [r7, #16]
   return(result);
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d1e6      	bne.n	800fe2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2220      	movs	r2, #32
 800fe62:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2200      	movs	r2, #0
 800fe68:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f7ff f99e 	bl	800f1ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe70:	bf00      	nop
 800fe72:	3720      	adds	r7, #32
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fe80:	bf00      	nop
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fe8c:	b084      	sub	sp, #16
 800fe8e:	b480      	push	{r7}
 800fe90:	b083      	sub	sp, #12
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
 800fe96:	f107 0014 	add.w	r0, r7, #20
 800fe9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800fe9e:	2300      	movs	r3, #0
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	b004      	add	sp, #16
 800feac:	4770      	bx	lr

0800feae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800feae:	b480      	push	{r7}
 800feb0:	b085      	sub	sp, #20
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800febe:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800fec2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	b29a      	uxth	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fece:	2300      	movs	r3, #0
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3714      	adds	r7, #20
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800fedc:	b480      	push	{r7}
 800fede:	b085      	sub	sp, #20
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fee4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800fee8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	43db      	mvns	r3, r3
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	4013      	ands	r3, r2
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ff04:	2300      	movs	r3, #0
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3714      	adds	r7, #20
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff10:	4770      	bx	lr

0800ff12 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800ff12:	b480      	push	{r7}
 800ff14:	b083      	sub	sp, #12
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ff1e:	2300      	movs	r3, #0
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ff2c:	b084      	sub	sp, #16
 800ff2e:	b480      	push	{r7}
 800ff30:	b083      	sub	sp, #12
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
 800ff36:	f107 0014 	add.w	r0, r7, #20
 800ff3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2201      	movs	r2, #1
 800ff42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ff5e:	2300      	movs	r3, #0
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	b004      	add	sp, #16
 800ff6c:	4770      	bx	lr
	...

0800ff70 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b09d      	sub	sp, #116	; 0x74
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	4413      	add	r3, r2
 800ff8a:	881b      	ldrh	r3, [r3, #0]
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ff92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff96:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	78db      	ldrb	r3, [r3, #3]
 800ff9e:	2b03      	cmp	r3, #3
 800ffa0:	d81f      	bhi.n	800ffe2 <USB_ActivateEndpoint+0x72>
 800ffa2:	a201      	add	r2, pc, #4	; (adr r2, 800ffa8 <USB_ActivateEndpoint+0x38>)
 800ffa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffa8:	0800ffb9 	.word	0x0800ffb9
 800ffac:	0800ffd5 	.word	0x0800ffd5
 800ffb0:	0800ffeb 	.word	0x0800ffeb
 800ffb4:	0800ffc7 	.word	0x0800ffc7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ffb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ffbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ffc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ffc4:	e012      	b.n	800ffec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ffc6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ffca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ffce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ffd2:	e00b      	b.n	800ffec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ffd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ffd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ffdc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ffe0:	e004      	b.n	800ffec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ffe8:	e000      	b.n	800ffec <USB_ActivateEndpoint+0x7c>
      break;
 800ffea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	009b      	lsls	r3, r3, #2
 800fff4:	441a      	add	r2, r3
 800fff6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801000a:	b29b      	uxth	r3, r3
 801000c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	4413      	add	r3, r2
 8010018:	881b      	ldrh	r3, [r3, #0]
 801001a:	b29b      	uxth	r3, r3
 801001c:	b21b      	sxth	r3, r3
 801001e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010026:	b21a      	sxth	r2, r3
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	b21b      	sxth	r3, r3
 801002e:	4313      	orrs	r3, r2
 8010030:	b21b      	sxth	r3, r3
 8010032:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	441a      	add	r2, r3
 8010040:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801004c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010054:	b29b      	uxth	r3, r3
 8010056:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	7b1b      	ldrb	r3, [r3, #12]
 801005c:	2b00      	cmp	r3, #0
 801005e:	f040 8178 	bne.w	8010352 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	785b      	ldrb	r3, [r3, #1]
 8010066:	2b00      	cmp	r3, #0
 8010068:	f000 8084 	beq.w	8010174 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	61bb      	str	r3, [r7, #24]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010076:	b29b      	uxth	r3, r3
 8010078:	461a      	mov	r2, r3
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	4413      	add	r3, r2
 801007e:	61bb      	str	r3, [r7, #24]
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	00da      	lsls	r2, r3, #3
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	4413      	add	r3, r2
 801008a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801008e:	617b      	str	r3, [r7, #20]
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	88db      	ldrh	r3, [r3, #6]
 8010094:	085b      	lsrs	r3, r3, #1
 8010096:	b29b      	uxth	r3, r3
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	b29a      	uxth	r2, r3
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80100a0:	687a      	ldr	r2, [r7, #4]
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	4413      	add	r3, r2
 80100aa:	881b      	ldrh	r3, [r3, #0]
 80100ac:	827b      	strh	r3, [r7, #18]
 80100ae:	8a7b      	ldrh	r3, [r7, #18]
 80100b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d01b      	beq.n	80100f0 <USB_ActivateEndpoint+0x180>
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	4413      	add	r3, r2
 80100c2:	881b      	ldrh	r3, [r3, #0]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100ce:	823b      	strh	r3, [r7, #16]
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	441a      	add	r2, r3
 80100da:	8a3b      	ldrh	r3, [r7, #16]
 80100dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	78db      	ldrb	r3, [r3, #3]
 80100f4:	2b01      	cmp	r3, #1
 80100f6:	d020      	beq.n	801013a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	4413      	add	r3, r2
 8010102:	881b      	ldrh	r3, [r3, #0]
 8010104:	b29b      	uxth	r3, r3
 8010106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801010a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801010e:	81bb      	strh	r3, [r7, #12]
 8010110:	89bb      	ldrh	r3, [r7, #12]
 8010112:	f083 0320 	eor.w	r3, r3, #32
 8010116:	81bb      	strh	r3, [r7, #12]
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	441a      	add	r2, r3
 8010122:	89bb      	ldrh	r3, [r7, #12]
 8010124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801012c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010134:	b29b      	uxth	r3, r3
 8010136:	8013      	strh	r3, [r2, #0]
 8010138:	e2d5      	b.n	80106e6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	4413      	add	r3, r2
 8010144:	881b      	ldrh	r3, [r3, #0]
 8010146:	b29b      	uxth	r3, r3
 8010148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801014c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010150:	81fb      	strh	r3, [r7, #14]
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	441a      	add	r2, r3
 801015c:	89fb      	ldrh	r3, [r7, #14]
 801015e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801016a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801016e:	b29b      	uxth	r3, r3
 8010170:	8013      	strh	r3, [r2, #0]
 8010172:	e2b8      	b.n	80106e6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	633b      	str	r3, [r7, #48]	; 0x30
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801017e:	b29b      	uxth	r3, r3
 8010180:	461a      	mov	r2, r3
 8010182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010184:	4413      	add	r3, r2
 8010186:	633b      	str	r3, [r7, #48]	; 0x30
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	00da      	lsls	r2, r3, #3
 801018e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010190:	4413      	add	r3, r2
 8010192:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	88db      	ldrh	r3, [r3, #6]
 801019c:	085b      	lsrs	r3, r3, #1
 801019e:	b29b      	uxth	r3, r3
 80101a0:	005b      	lsls	r3, r3, #1
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	461a      	mov	r2, r3
 80101b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b8:	4413      	add	r3, r2
 80101ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	00da      	lsls	r2, r3, #3
 80101c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c4:	4413      	add	r3, r2
 80101c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80101ca:	627b      	str	r3, [r7, #36]	; 0x24
 80101cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ce:	881b      	ldrh	r3, [r3, #0]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101da:	801a      	strh	r2, [r3, #0]
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	691b      	ldr	r3, [r3, #16]
 80101e0:	2b3e      	cmp	r3, #62	; 0x3e
 80101e2:	d91d      	bls.n	8010220 <USB_ActivateEndpoint+0x2b0>
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	691b      	ldr	r3, [r3, #16]
 80101e8:	095b      	lsrs	r3, r3, #5
 80101ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	691b      	ldr	r3, [r3, #16]
 80101f0:	f003 031f 	and.w	r3, r3, #31
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d102      	bne.n	80101fe <USB_ActivateEndpoint+0x28e>
 80101f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101fa:	3b01      	subs	r3, #1
 80101fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80101fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010200:	881b      	ldrh	r3, [r3, #0]
 8010202:	b29a      	uxth	r2, r3
 8010204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010206:	b29b      	uxth	r3, r3
 8010208:	029b      	lsls	r3, r3, #10
 801020a:	b29b      	uxth	r3, r3
 801020c:	4313      	orrs	r3, r2
 801020e:	b29b      	uxth	r3, r3
 8010210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010218:	b29a      	uxth	r2, r3
 801021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021c:	801a      	strh	r2, [r3, #0]
 801021e:	e026      	b.n	801026e <USB_ActivateEndpoint+0x2fe>
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	691b      	ldr	r3, [r3, #16]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d10a      	bne.n	801023e <USB_ActivateEndpoint+0x2ce>
 8010228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022a:	881b      	ldrh	r3, [r3, #0]
 801022c:	b29b      	uxth	r3, r3
 801022e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010236:	b29a      	uxth	r2, r3
 8010238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023a:	801a      	strh	r2, [r3, #0]
 801023c:	e017      	b.n	801026e <USB_ActivateEndpoint+0x2fe>
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	691b      	ldr	r3, [r3, #16]
 8010242:	085b      	lsrs	r3, r3, #1
 8010244:	66bb      	str	r3, [r7, #104]	; 0x68
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	691b      	ldr	r3, [r3, #16]
 801024a:	f003 0301 	and.w	r3, r3, #1
 801024e:	2b00      	cmp	r3, #0
 8010250:	d002      	beq.n	8010258 <USB_ActivateEndpoint+0x2e8>
 8010252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010254:	3301      	adds	r3, #1
 8010256:	66bb      	str	r3, [r7, #104]	; 0x68
 8010258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025a:	881b      	ldrh	r3, [r3, #0]
 801025c:	b29a      	uxth	r2, r3
 801025e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010260:	b29b      	uxth	r3, r3
 8010262:	029b      	lsls	r3, r3, #10
 8010264:	b29b      	uxth	r3, r3
 8010266:	4313      	orrs	r3, r2
 8010268:	b29a      	uxth	r2, r3
 801026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	4413      	add	r3, r2
 8010278:	881b      	ldrh	r3, [r3, #0]
 801027a:	847b      	strh	r3, [r7, #34]	; 0x22
 801027c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801027e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010282:	2b00      	cmp	r3, #0
 8010284:	d01b      	beq.n	80102be <USB_ActivateEndpoint+0x34e>
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4413      	add	r3, r2
 8010290:	881b      	ldrh	r3, [r3, #0]
 8010292:	b29b      	uxth	r3, r3
 8010294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801029c:	843b      	strh	r3, [r7, #32]
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	441a      	add	r2, r3
 80102a8:	8c3b      	ldrh	r3, [r7, #32]
 80102aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80102b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d124      	bne.n	8010310 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80102c6:	687a      	ldr	r2, [r7, #4]
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	4413      	add	r3, r2
 80102d0:	881b      	ldrh	r3, [r3, #0]
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80102d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102dc:	83bb      	strh	r3, [r7, #28]
 80102de:	8bbb      	ldrh	r3, [r7, #28]
 80102e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80102e4:	83bb      	strh	r3, [r7, #28]
 80102e6:	8bbb      	ldrh	r3, [r7, #28]
 80102e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80102ec:	83bb      	strh	r3, [r7, #28]
 80102ee:	687a      	ldr	r2, [r7, #4]
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	441a      	add	r2, r3
 80102f8:	8bbb      	ldrh	r3, [r7, #28]
 80102fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801030a:	b29b      	uxth	r3, r3
 801030c:	8013      	strh	r3, [r2, #0]
 801030e:	e1ea      	b.n	80106e6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	009b      	lsls	r3, r3, #2
 8010318:	4413      	add	r3, r2
 801031a:	881b      	ldrh	r3, [r3, #0]
 801031c:	b29b      	uxth	r3, r3
 801031e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010326:	83fb      	strh	r3, [r7, #30]
 8010328:	8bfb      	ldrh	r3, [r7, #30]
 801032a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801032e:	83fb      	strh	r3, [r7, #30]
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	009b      	lsls	r3, r3, #2
 8010338:	441a      	add	r2, r3
 801033a:	8bfb      	ldrh	r3, [r7, #30]
 801033c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801034c:	b29b      	uxth	r3, r3
 801034e:	8013      	strh	r3, [r2, #0]
 8010350:	e1c9      	b.n	80106e6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	78db      	ldrb	r3, [r3, #3]
 8010356:	2b02      	cmp	r3, #2
 8010358:	d11e      	bne.n	8010398 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	009b      	lsls	r3, r3, #2
 8010362:	4413      	add	r3, r2
 8010364:	881b      	ldrh	r3, [r3, #0]
 8010366:	b29b      	uxth	r3, r3
 8010368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801036c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010370:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	441a      	add	r2, r3
 801037e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801038a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801038e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010392:	b29b      	uxth	r3, r3
 8010394:	8013      	strh	r3, [r2, #0]
 8010396:	e01d      	b.n	80103d4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	881b      	ldrh	r3, [r3, #0]
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80103aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	009b      	lsls	r3, r3, #2
 80103ba:	441a      	add	r2, r3
 80103bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80103c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103de:	b29b      	uxth	r3, r3
 80103e0:	461a      	mov	r2, r3
 80103e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103e4:	4413      	add	r3, r2
 80103e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	00da      	lsls	r2, r3, #3
 80103ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103f0:	4413      	add	r3, r2
 80103f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80103f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	891b      	ldrh	r3, [r3, #8]
 80103fc:	085b      	lsrs	r3, r3, #1
 80103fe:	b29b      	uxth	r3, r3
 8010400:	005b      	lsls	r3, r3, #1
 8010402:	b29a      	uxth	r2, r3
 8010404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010406:	801a      	strh	r2, [r3, #0]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	657b      	str	r3, [r7, #84]	; 0x54
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010412:	b29b      	uxth	r3, r3
 8010414:	461a      	mov	r2, r3
 8010416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010418:	4413      	add	r3, r2
 801041a:	657b      	str	r3, [r7, #84]	; 0x54
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	00da      	lsls	r2, r3, #3
 8010422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010424:	4413      	add	r3, r2
 8010426:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801042a:	653b      	str	r3, [r7, #80]	; 0x50
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	895b      	ldrh	r3, [r3, #10]
 8010430:	085b      	lsrs	r3, r3, #1
 8010432:	b29b      	uxth	r3, r3
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	b29a      	uxth	r2, r3
 8010438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801043a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	785b      	ldrb	r3, [r3, #1]
 8010440:	2b00      	cmp	r3, #0
 8010442:	f040 8093 	bne.w	801056c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010446:	687a      	ldr	r2, [r7, #4]
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	4413      	add	r3, r2
 8010450:	881b      	ldrh	r3, [r3, #0]
 8010452:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801045a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801045e:	2b00      	cmp	r3, #0
 8010460:	d01b      	beq.n	801049a <USB_ActivateEndpoint+0x52a>
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	009b      	lsls	r3, r3, #2
 801046a:	4413      	add	r3, r2
 801046c:	881b      	ldrh	r3, [r3, #0]
 801046e:	b29b      	uxth	r3, r3
 8010470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010478:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	441a      	add	r2, r3
 8010484:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801048a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801048e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010496:	b29b      	uxth	r3, r3
 8010498:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	4413      	add	r3, r2
 80104a4:	881b      	ldrh	r3, [r3, #0]
 80104a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80104a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80104aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d01b      	beq.n	80104ea <USB_ActivateEndpoint+0x57a>
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	4413      	add	r3, r2
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	b29b      	uxth	r3, r3
 80104c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104c8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	009b      	lsls	r3, r3, #2
 80104d2:	441a      	add	r2, r3
 80104d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80104d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	4413      	add	r3, r2
 80104f4:	881b      	ldrh	r3, [r3, #0]
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80104fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010500:	873b      	strh	r3, [r7, #56]	; 0x38
 8010502:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010504:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010508:	873b      	strh	r3, [r7, #56]	; 0x38
 801050a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801050c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010510:	873b      	strh	r3, [r7, #56]	; 0x38
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	441a      	add	r2, r3
 801051c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801051e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801052a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801052e:	b29b      	uxth	r3, r3
 8010530:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	4413      	add	r3, r2
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	b29b      	uxth	r3, r3
 8010540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010548:	86fb      	strh	r3, [r7, #54]	; 0x36
 801054a:	687a      	ldr	r2, [r7, #4]
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	009b      	lsls	r3, r3, #2
 8010552:	441a      	add	r2, r3
 8010554:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801055a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801055e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010566:	b29b      	uxth	r3, r3
 8010568:	8013      	strh	r3, [r2, #0]
 801056a:	e0bc      	b.n	80106e6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4413      	add	r3, r2
 8010576:	881b      	ldrh	r3, [r3, #0]
 8010578:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801057c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010584:	2b00      	cmp	r3, #0
 8010586:	d01d      	beq.n	80105c4 <USB_ActivateEndpoint+0x654>
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	4413      	add	r3, r2
 8010592:	881b      	ldrh	r3, [r3, #0]
 8010594:	b29b      	uxth	r3, r3
 8010596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801059a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801059e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	009b      	lsls	r3, r3, #2
 80105aa:	441a      	add	r2, r3
 80105ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80105b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80105bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	4413      	add	r3, r2
 80105ce:	881b      	ldrh	r3, [r3, #0]
 80105d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80105d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80105d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d01d      	beq.n	801061c <USB_ActivateEndpoint+0x6ac>
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	009b      	lsls	r3, r3, #2
 80105e8:	4413      	add	r3, r2
 80105ea:	881b      	ldrh	r3, [r3, #0]
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	441a      	add	r2, r3
 8010604:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801060c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010614:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010618:	b29b      	uxth	r3, r3
 801061a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	78db      	ldrb	r3, [r3, #3]
 8010620:	2b01      	cmp	r3, #1
 8010622:	d024      	beq.n	801066e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	4413      	add	r3, r2
 801062e:	881b      	ldrh	r3, [r3, #0]
 8010630:	b29b      	uxth	r3, r3
 8010632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801063a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801063e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010642:	f083 0320 	eor.w	r3, r3, #32
 8010646:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	009b      	lsls	r3, r3, #2
 8010652:	441a      	add	r2, r3
 8010654:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801065c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010668:	b29b      	uxth	r3, r3
 801066a:	8013      	strh	r3, [r2, #0]
 801066c:	e01d      	b.n	80106aa <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	009b      	lsls	r3, r3, #2
 8010676:	4413      	add	r3, r2
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	b29b      	uxth	r3, r3
 801067c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010684:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	441a      	add	r2, r3
 8010692:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801069a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801069e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	009b      	lsls	r3, r3, #2
 80106b2:	4413      	add	r3, r2
 80106b4:	881b      	ldrh	r3, [r3, #0]
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80106bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	441a      	add	r2, r3
 80106ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80106e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3774      	adds	r7, #116	; 0x74
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop

080106f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b08d      	sub	sp, #52	; 0x34
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	7b1b      	ldrb	r3, [r3, #12]
 8010706:	2b00      	cmp	r3, #0
 8010708:	f040 808e 	bne.w	8010828 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	785b      	ldrb	r3, [r3, #1]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d044      	beq.n	801079e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	4413      	add	r3, r2
 801071e:	881b      	ldrh	r3, [r3, #0]
 8010720:	81bb      	strh	r3, [r7, #12]
 8010722:	89bb      	ldrh	r3, [r7, #12]
 8010724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010728:	2b00      	cmp	r3, #0
 801072a:	d01b      	beq.n	8010764 <USB_DeactivateEndpoint+0x6c>
 801072c:	687a      	ldr	r2, [r7, #4]
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	009b      	lsls	r3, r3, #2
 8010734:	4413      	add	r3, r2
 8010736:	881b      	ldrh	r3, [r3, #0]
 8010738:	b29b      	uxth	r3, r3
 801073a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801073e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010742:	817b      	strh	r3, [r7, #10]
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	441a      	add	r2, r3
 801074e:	897b      	ldrh	r3, [r7, #10]
 8010750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801075c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010760:	b29b      	uxth	r3, r3
 8010762:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	781b      	ldrb	r3, [r3, #0]
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	4413      	add	r3, r2
 801076e:	881b      	ldrh	r3, [r3, #0]
 8010770:	b29b      	uxth	r3, r3
 8010772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801077a:	813b      	strh	r3, [r7, #8]
 801077c:	687a      	ldr	r2, [r7, #4]
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	009b      	lsls	r3, r3, #2
 8010784:	441a      	add	r2, r3
 8010786:	893b      	ldrh	r3, [r7, #8]
 8010788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801078c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010798:	b29b      	uxth	r3, r3
 801079a:	8013      	strh	r3, [r2, #0]
 801079c:	e192      	b.n	8010ac4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	009b      	lsls	r3, r3, #2
 80107a6:	4413      	add	r3, r2
 80107a8:	881b      	ldrh	r3, [r3, #0]
 80107aa:	827b      	strh	r3, [r7, #18]
 80107ac:	8a7b      	ldrh	r3, [r7, #18]
 80107ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d01b      	beq.n	80107ee <USB_DeactivateEndpoint+0xf6>
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	4413      	add	r3, r2
 80107c0:	881b      	ldrh	r3, [r3, #0]
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107cc:	823b      	strh	r3, [r7, #16]
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	009b      	lsls	r3, r3, #2
 80107d6:	441a      	add	r2, r3
 80107d8:	8a3b      	ldrh	r3, [r7, #16]
 80107da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80107e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	009b      	lsls	r3, r3, #2
 80107f6:	4413      	add	r3, r2
 80107f8:	881b      	ldrh	r3, [r3, #0]
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010804:	81fb      	strh	r3, [r7, #14]
 8010806:	687a      	ldr	r2, [r7, #4]
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	441a      	add	r2, r3
 8010810:	89fb      	ldrh	r3, [r7, #14]
 8010812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801081a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801081e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010822:	b29b      	uxth	r3, r3
 8010824:	8013      	strh	r3, [r2, #0]
 8010826:	e14d      	b.n	8010ac4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	785b      	ldrb	r3, [r3, #1]
 801082c:	2b00      	cmp	r3, #0
 801082e:	f040 80a5 	bne.w	801097c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	009b      	lsls	r3, r3, #2
 801083a:	4413      	add	r3, r2
 801083c:	881b      	ldrh	r3, [r3, #0]
 801083e:	843b      	strh	r3, [r7, #32]
 8010840:	8c3b      	ldrh	r3, [r7, #32]
 8010842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010846:	2b00      	cmp	r3, #0
 8010848:	d01b      	beq.n	8010882 <USB_DeactivateEndpoint+0x18a>
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	4413      	add	r3, r2
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	b29b      	uxth	r3, r3
 8010858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801085c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010860:	83fb      	strh	r3, [r7, #30]
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	441a      	add	r2, r3
 801086c:	8bfb      	ldrh	r3, [r7, #30]
 801086e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801087a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801087e:	b29b      	uxth	r3, r3
 8010880:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	009b      	lsls	r3, r3, #2
 801088a:	4413      	add	r3, r2
 801088c:	881b      	ldrh	r3, [r3, #0]
 801088e:	83bb      	strh	r3, [r7, #28]
 8010890:	8bbb      	ldrh	r3, [r7, #28]
 8010892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010896:	2b00      	cmp	r3, #0
 8010898:	d01b      	beq.n	80108d2 <USB_DeactivateEndpoint+0x1da>
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	009b      	lsls	r3, r3, #2
 80108a2:	4413      	add	r3, r2
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108b0:	837b      	strh	r3, [r7, #26]
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	009b      	lsls	r3, r3, #2
 80108ba:	441a      	add	r2, r3
 80108bc:	8b7b      	ldrh	r3, [r7, #26]
 80108be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80108ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	4413      	add	r3, r2
 80108dc:	881b      	ldrh	r3, [r3, #0]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108e8:	833b      	strh	r3, [r7, #24]
 80108ea:	687a      	ldr	r2, [r7, #4]
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	441a      	add	r2, r3
 80108f4:	8b3b      	ldrh	r3, [r7, #24]
 80108f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010902:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010906:	b29b      	uxth	r3, r3
 8010908:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801090a:	687a      	ldr	r2, [r7, #4]
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	4413      	add	r3, r2
 8010914:	881b      	ldrh	r3, [r3, #0]
 8010916:	b29b      	uxth	r3, r3
 8010918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801091c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010920:	82fb      	strh	r3, [r7, #22]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	009b      	lsls	r3, r3, #2
 801092a:	441a      	add	r2, r3
 801092c:	8afb      	ldrh	r3, [r7, #22]
 801092e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801093a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801093e:	b29b      	uxth	r3, r3
 8010940:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	009b      	lsls	r3, r3, #2
 801094a:	4413      	add	r3, r2
 801094c:	881b      	ldrh	r3, [r3, #0]
 801094e:	b29b      	uxth	r3, r3
 8010950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010958:	82bb      	strh	r3, [r7, #20]
 801095a:	687a      	ldr	r2, [r7, #4]
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	009b      	lsls	r3, r3, #2
 8010962:	441a      	add	r2, r3
 8010964:	8abb      	ldrh	r3, [r7, #20]
 8010966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801096a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801096e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010976:	b29b      	uxth	r3, r3
 8010978:	8013      	strh	r3, [r2, #0]
 801097a:	e0a3      	b.n	8010ac4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	009b      	lsls	r3, r3, #2
 8010984:	4413      	add	r3, r2
 8010986:	881b      	ldrh	r3, [r3, #0]
 8010988:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801098a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801098c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010990:	2b00      	cmp	r3, #0
 8010992:	d01b      	beq.n	80109cc <USB_DeactivateEndpoint+0x2d4>
 8010994:	687a      	ldr	r2, [r7, #4]
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	009b      	lsls	r3, r3, #2
 801099c:	4413      	add	r3, r2
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80109ac:	687a      	ldr	r2, [r7, #4]
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	441a      	add	r2, r3
 80109b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80109b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80109c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80109c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	009b      	lsls	r3, r3, #2
 80109d4:	4413      	add	r3, r2
 80109d6:	881b      	ldrh	r3, [r3, #0]
 80109d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80109da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d01b      	beq.n	8010a1c <USB_DeactivateEndpoint+0x324>
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	009b      	lsls	r3, r3, #2
 80109ec:	4413      	add	r3, r2
 80109ee:	881b      	ldrh	r3, [r3, #0]
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80109fc:	687a      	ldr	r2, [r7, #4]
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	781b      	ldrb	r3, [r3, #0]
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	441a      	add	r2, r3
 8010a06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	4413      	add	r3, r2
 8010a26:	881b      	ldrh	r3, [r3, #0]
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	441a      	add	r2, r3
 8010a3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	009b      	lsls	r3, r3, #2
 8010a5c:	4413      	add	r3, r2
 8010a5e:	881b      	ldrh	r3, [r3, #0]
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	009b      	lsls	r3, r3, #2
 8010a74:	441a      	add	r2, r3
 8010a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010a8c:	687a      	ldr	r2, [r7, #4]
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	009b      	lsls	r3, r3, #2
 8010a94:	4413      	add	r3, r2
 8010a96:	881b      	ldrh	r3, [r3, #0]
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010aa2:	847b      	strh	r3, [r7, #34]	; 0x22
 8010aa4:	687a      	ldr	r2, [r7, #4]
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	441a      	add	r2, r3
 8010aae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010ac4:	2300      	movs	r3, #0
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3734      	adds	r7, #52	; 0x34
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr

08010ad2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010ad2:	b580      	push	{r7, lr}
 8010ad4:	b0c2      	sub	sp, #264	; 0x108
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ae0:	6018      	str	r0, [r3, #0]
 8010ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	785b      	ldrb	r3, [r3, #1]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	f040 86b7 	bne.w	801186c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	699a      	ldr	r2, [r3, #24]
 8010b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	691b      	ldr	r3, [r3, #16]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d908      	bls.n	8010b2c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	691b      	ldr	r3, [r3, #16]
 8010b26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010b2a:	e007      	b.n	8010b3c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	699b      	ldr	r3, [r3, #24]
 8010b38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	7b1b      	ldrb	r3, [r3, #12]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d13a      	bne.n	8010bc2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	6959      	ldr	r1, [r3, #20]
 8010b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	88da      	ldrh	r2, [r3, #6]
 8010b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010b6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010b72:	6800      	ldr	r0, [r0, #0]
 8010b74:	f001 fcb9 	bl	80124ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	613b      	str	r3, [r7, #16]
 8010b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	461a      	mov	r2, r3
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	4413      	add	r3, r2
 8010b9a:	613b      	str	r3, [r7, #16]
 8010b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	00da      	lsls	r2, r3, #3
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	4413      	add	r3, r2
 8010bae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010bb2:	60fb      	str	r3, [r7, #12]
 8010bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	801a      	strh	r2, [r3, #0]
 8010bbe:	f000 be1f 	b.w	8011800 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	78db      	ldrb	r3, [r3, #3]
 8010bce:	2b02      	cmp	r3, #2
 8010bd0:	f040 8462 	bne.w	8011498 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	6a1a      	ldr	r2, [r3, #32]
 8010be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	691b      	ldr	r3, [r3, #16]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	f240 83df 	bls.w	80113b0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	4413      	add	r3, r2
 8010c0c:	881b      	ldrh	r3, [r3, #0]
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8010c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	441a      	add	r2, r3
 8010c36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	6a1a      	ldr	r2, [r3, #32]
 8010c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c5e:	1ad2      	subs	r2, r2, r3
 8010c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	4413      	add	r3, r2
 8010c86:	881b      	ldrh	r3, [r3, #0]
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	f000 81c7 	beq.w	8011022 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	633b      	str	r3, [r7, #48]	; 0x30
 8010ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	785b      	ldrb	r3, [r3, #1]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d177      	bne.n	8010da0 <USB_EPStartXfer+0x2ce>
 8010cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	461a      	mov	r2, r3
 8010cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd0:	4413      	add	r3, r2
 8010cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	00da      	lsls	r2, r3, #3
 8010ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce4:	4413      	add	r3, r2
 8010ce6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010cea:	627b      	str	r3, [r7, #36]	; 0x24
 8010cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cee:	881b      	ldrh	r3, [r3, #0]
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010cf6:	b29a      	uxth	r2, r3
 8010cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfa:	801a      	strh	r2, [r3, #0]
 8010cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d00:	2b3e      	cmp	r3, #62	; 0x3e
 8010d02:	d921      	bls.n	8010d48 <USB_EPStartXfer+0x276>
 8010d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d08:	095b      	lsrs	r3, r3, #5
 8010d0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d12:	f003 031f 	and.w	r3, r3, #31
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d104      	bne.n	8010d24 <USB_EPStartXfer+0x252>
 8010d1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d1e:	3b01      	subs	r3, #1
 8010d20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d26:	881b      	ldrh	r3, [r3, #0]
 8010d28:	b29a      	uxth	r2, r3
 8010d2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	029b      	lsls	r3, r3, #10
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	4313      	orrs	r3, r2
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d40:	b29a      	uxth	r2, r3
 8010d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d44:	801a      	strh	r2, [r3, #0]
 8010d46:	e050      	b.n	8010dea <USB_EPStartXfer+0x318>
 8010d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d10a      	bne.n	8010d66 <USB_EPStartXfer+0x294>
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d62:	801a      	strh	r2, [r3, #0]
 8010d64:	e041      	b.n	8010dea <USB_EPStartXfer+0x318>
 8010d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d6a:	085b      	lsrs	r3, r3, #1
 8010d6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d74:	f003 0301 	and.w	r3, r3, #1
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d004      	beq.n	8010d86 <USB_EPStartXfer+0x2b4>
 8010d7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d80:	3301      	adds	r3, #1
 8010d82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d88:	881b      	ldrh	r3, [r3, #0]
 8010d8a:	b29a      	uxth	r2, r3
 8010d8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	029b      	lsls	r3, r3, #10
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	4313      	orrs	r3, r2
 8010d98:	b29a      	uxth	r2, r3
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9c:	801a      	strh	r2, [r3, #0]
 8010d9e:	e024      	b.n	8010dea <USB_EPStartXfer+0x318>
 8010da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	785b      	ldrb	r3, [r3, #1]
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d11c      	bne.n	8010dea <USB_EPStartXfer+0x318>
 8010db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010db4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010dbe:	b29b      	uxth	r3, r3
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc4:	4413      	add	r3, r2
 8010dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8010dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	00da      	lsls	r2, r3, #3
 8010dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd8:	4413      	add	r3, r2
 8010dda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	895b      	ldrh	r3, [r3, #10]
 8010df6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	6959      	ldr	r1, [r3, #20]
 8010e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010e10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010e14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010e18:	6800      	ldr	r0, [r0, #0]
 8010e1a:	f001 fb66 	bl	80124ea <USB_WritePMA>
            ep->xfer_buff += len;
 8010e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	695a      	ldr	r2, [r3, #20]
 8010e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e2e:	441a      	add	r2, r3
 8010e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	6a1a      	ldr	r2, [r3, #32]
 8010e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	691b      	ldr	r3, [r3, #16]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d90f      	bls.n	8010e78 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8010e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	6a1a      	ldr	r2, [r3, #32]
 8010e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e68:	1ad2      	subs	r2, r2, r3
 8010e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	621a      	str	r2, [r3, #32]
 8010e76:	e00e      	b.n	8010e96 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8010e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	6a1b      	ldr	r3, [r3, #32]
 8010e84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2200      	movs	r2, #0
 8010e94:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	785b      	ldrb	r3, [r3, #1]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d177      	bne.n	8010f96 <USB_EPStartXfer+0x4c4>
 8010ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	61bb      	str	r3, [r7, #24]
 8010eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	69bb      	ldr	r3, [r7, #24]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	61bb      	str	r3, [r7, #24]
 8010eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	00da      	lsls	r2, r3, #3
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	4413      	add	r3, r2
 8010edc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010ee0:	617b      	str	r3, [r7, #20]
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	801a      	strh	r2, [r3, #0]
 8010ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8010ef8:	d921      	bls.n	8010f3e <USB_EPStartXfer+0x46c>
 8010efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010efe:	095b      	lsrs	r3, r3, #5
 8010f00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f08:	f003 031f 	and.w	r3, r3, #31
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d104      	bne.n	8010f1a <USB_EPStartXfer+0x448>
 8010f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f14:	3b01      	subs	r3, #1
 8010f16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	881b      	ldrh	r3, [r3, #0]
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	029b      	lsls	r3, r3, #10
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	4313      	orrs	r3, r2
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	801a      	strh	r2, [r3, #0]
 8010f3c:	e056      	b.n	8010fec <USB_EPStartXfer+0x51a>
 8010f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d10a      	bne.n	8010f5c <USB_EPStartXfer+0x48a>
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	881b      	ldrh	r3, [r3, #0]
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f54:	b29a      	uxth	r2, r3
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	801a      	strh	r2, [r3, #0]
 8010f5a:	e047      	b.n	8010fec <USB_EPStartXfer+0x51a>
 8010f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f60:	085b      	lsrs	r3, r3, #1
 8010f62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f6a:	f003 0301 	and.w	r3, r3, #1
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d004      	beq.n	8010f7c <USB_EPStartXfer+0x4aa>
 8010f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f76:	3301      	adds	r3, #1
 8010f78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	881b      	ldrh	r3, [r3, #0]
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	029b      	lsls	r3, r3, #10
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	801a      	strh	r2, [r3, #0]
 8010f94:	e02a      	b.n	8010fec <USB_EPStartXfer+0x51a>
 8010f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	785b      	ldrb	r3, [r3, #1]
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d122      	bne.n	8010fec <USB_EPStartXfer+0x51a>
 8010fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	623b      	str	r3, [r7, #32]
 8010fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	6a3b      	ldr	r3, [r7, #32]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	623b      	str	r3, [r7, #32]
 8010fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	00da      	lsls	r2, r3, #3
 8010fd8:	6a3b      	ldr	r3, [r7, #32]
 8010fda:	4413      	add	r3, r2
 8010fdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010fe0:	61fb      	str	r3, [r7, #28]
 8010fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	891b      	ldrh	r3, [r3, #8]
 8010ff8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	6959      	ldr	r1, [r3, #20]
 8011008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801100c:	b29b      	uxth	r3, r3
 801100e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011012:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011016:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801101a:	6800      	ldr	r0, [r0, #0]
 801101c:	f001 fa65 	bl	80124ea <USB_WritePMA>
 8011020:	e3ee      	b.n	8011800 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	785b      	ldrb	r3, [r3, #1]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d177      	bne.n	8011122 <USB_EPStartXfer+0x650>
 8011032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	64bb      	str	r3, [r7, #72]	; 0x48
 801103e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801104c:	b29b      	uxth	r3, r3
 801104e:	461a      	mov	r2, r3
 8011050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011052:	4413      	add	r3, r2
 8011054:	64bb      	str	r3, [r7, #72]	; 0x48
 8011056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801105a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	00da      	lsls	r2, r3, #3
 8011064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011066:	4413      	add	r3, r2
 8011068:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801106c:	647b      	str	r3, [r7, #68]	; 0x44
 801106e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011070:	881b      	ldrh	r3, [r3, #0]
 8011072:	b29b      	uxth	r3, r3
 8011074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011078:	b29a      	uxth	r2, r3
 801107a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801107c:	801a      	strh	r2, [r3, #0]
 801107e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011082:	2b3e      	cmp	r3, #62	; 0x3e
 8011084:	d921      	bls.n	80110ca <USB_EPStartXfer+0x5f8>
 8011086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801108a:	095b      	lsrs	r3, r3, #5
 801108c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011094:	f003 031f 	and.w	r3, r3, #31
 8011098:	2b00      	cmp	r3, #0
 801109a:	d104      	bne.n	80110a6 <USB_EPStartXfer+0x5d4>
 801109c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80110a0:	3b01      	subs	r3, #1
 80110a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80110a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110a8:	881b      	ldrh	r3, [r3, #0]
 80110aa:	b29a      	uxth	r2, r3
 80110ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	029b      	lsls	r3, r3, #10
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	4313      	orrs	r3, r2
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110c6:	801a      	strh	r2, [r3, #0]
 80110c8:	e056      	b.n	8011178 <USB_EPStartXfer+0x6a6>
 80110ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d10a      	bne.n	80110e8 <USB_EPStartXfer+0x616>
 80110d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110d4:	881b      	ldrh	r3, [r3, #0]
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110e0:	b29a      	uxth	r2, r3
 80110e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110e4:	801a      	strh	r2, [r3, #0]
 80110e6:	e047      	b.n	8011178 <USB_EPStartXfer+0x6a6>
 80110e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110ec:	085b      	lsrs	r3, r3, #1
 80110ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80110f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110f6:	f003 0301 	and.w	r3, r3, #1
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d004      	beq.n	8011108 <USB_EPStartXfer+0x636>
 80110fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011102:	3301      	adds	r3, #1
 8011104:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801110a:	881b      	ldrh	r3, [r3, #0]
 801110c:	b29a      	uxth	r2, r3
 801110e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011112:	b29b      	uxth	r3, r3
 8011114:	029b      	lsls	r3, r3, #10
 8011116:	b29b      	uxth	r3, r3
 8011118:	4313      	orrs	r3, r2
 801111a:	b29a      	uxth	r2, r3
 801111c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801111e:	801a      	strh	r2, [r3, #0]
 8011120:	e02a      	b.n	8011178 <USB_EPStartXfer+0x6a6>
 8011122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	785b      	ldrb	r3, [r3, #1]
 801112e:	2b01      	cmp	r3, #1
 8011130:	d122      	bne.n	8011178 <USB_EPStartXfer+0x6a6>
 8011132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	653b      	str	r3, [r7, #80]	; 0x50
 801113e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801114c:	b29b      	uxth	r3, r3
 801114e:	461a      	mov	r2, r3
 8011150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011152:	4413      	add	r3, r2
 8011154:	653b      	str	r3, [r7, #80]	; 0x50
 8011156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801115a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	00da      	lsls	r2, r3, #3
 8011164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011166:	4413      	add	r3, r2
 8011168:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801116c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801116e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011172:	b29a      	uxth	r2, r3
 8011174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011176:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801117c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	891b      	ldrh	r3, [r3, #8]
 8011184:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801118c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	6959      	ldr	r1, [r3, #20]
 8011194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011198:	b29b      	uxth	r3, r3
 801119a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801119e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80111a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80111a6:	6800      	ldr	r0, [r0, #0]
 80111a8:	f001 f99f 	bl	80124ea <USB_WritePMA>
            ep->xfer_buff += len;
 80111ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	695a      	ldr	r2, [r3, #20]
 80111b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111bc:	441a      	add	r2, r3
 80111be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80111ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	6a1a      	ldr	r2, [r3, #32]
 80111d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	691b      	ldr	r3, [r3, #16]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d90f      	bls.n	8011206 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80111e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	6a1a      	ldr	r2, [r3, #32]
 80111f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111f6:	1ad2      	subs	r2, r2, r3
 80111f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	621a      	str	r2, [r3, #32]
 8011204:	e00e      	b.n	8011224 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8011206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801120a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	6a1b      	ldr	r3, [r3, #32]
 8011212:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801121a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	2200      	movs	r2, #0
 8011222:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	643b      	str	r3, [r7, #64]	; 0x40
 8011230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	785b      	ldrb	r3, [r3, #1]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d177      	bne.n	8011330 <USB_EPStartXfer+0x85e>
 8011240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	63bb      	str	r3, [r7, #56]	; 0x38
 801124c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801125a:	b29b      	uxth	r3, r3
 801125c:	461a      	mov	r2, r3
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	4413      	add	r3, r2
 8011262:	63bb      	str	r3, [r7, #56]	; 0x38
 8011264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	00da      	lsls	r2, r3, #3
 8011272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011274:	4413      	add	r3, r2
 8011276:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801127a:	637b      	str	r3, [r7, #52]	; 0x34
 801127c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801127e:	881b      	ldrh	r3, [r3, #0]
 8011280:	b29b      	uxth	r3, r3
 8011282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011286:	b29a      	uxth	r2, r3
 8011288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801128a:	801a      	strh	r2, [r3, #0]
 801128c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011290:	2b3e      	cmp	r3, #62	; 0x3e
 8011292:	d921      	bls.n	80112d8 <USB_EPStartXfer+0x806>
 8011294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011298:	095b      	lsrs	r3, r3, #5
 801129a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801129e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112a2:	f003 031f 	and.w	r3, r3, #31
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d104      	bne.n	80112b4 <USB_EPStartXfer+0x7e2>
 80112aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80112ae:	3b01      	subs	r3, #1
 80112b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80112b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112b6:	881b      	ldrh	r3, [r3, #0]
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80112be:	b29b      	uxth	r3, r3
 80112c0:	029b      	lsls	r3, r3, #10
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	4313      	orrs	r3, r2
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112d4:	801a      	strh	r2, [r3, #0]
 80112d6:	e050      	b.n	801137a <USB_EPStartXfer+0x8a8>
 80112d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d10a      	bne.n	80112f6 <USB_EPStartXfer+0x824>
 80112e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112e2:	881b      	ldrh	r3, [r3, #0]
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112ee:	b29a      	uxth	r2, r3
 80112f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112f2:	801a      	strh	r2, [r3, #0]
 80112f4:	e041      	b.n	801137a <USB_EPStartXfer+0x8a8>
 80112f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112fa:	085b      	lsrs	r3, r3, #1
 80112fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011304:	f003 0301 	and.w	r3, r3, #1
 8011308:	2b00      	cmp	r3, #0
 801130a:	d004      	beq.n	8011316 <USB_EPStartXfer+0x844>
 801130c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011310:	3301      	adds	r3, #1
 8011312:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011318:	881b      	ldrh	r3, [r3, #0]
 801131a:	b29a      	uxth	r2, r3
 801131c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011320:	b29b      	uxth	r3, r3
 8011322:	029b      	lsls	r3, r3, #10
 8011324:	b29b      	uxth	r3, r3
 8011326:	4313      	orrs	r3, r2
 8011328:	b29a      	uxth	r2, r3
 801132a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801132c:	801a      	strh	r2, [r3, #0]
 801132e:	e024      	b.n	801137a <USB_EPStartXfer+0x8a8>
 8011330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	785b      	ldrb	r3, [r3, #1]
 801133c:	2b01      	cmp	r3, #1
 801133e:	d11c      	bne.n	801137a <USB_EPStartXfer+0x8a8>
 8011340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801134e:	b29b      	uxth	r3, r3
 8011350:	461a      	mov	r2, r3
 8011352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011354:	4413      	add	r3, r2
 8011356:	643b      	str	r3, [r7, #64]	; 0x40
 8011358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801135c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	00da      	lsls	r2, r3, #3
 8011366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011368:	4413      	add	r3, r2
 801136a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801136e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011374:	b29a      	uxth	r2, r3
 8011376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011378:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801137a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801137e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	895b      	ldrh	r3, [r3, #10]
 8011386:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801138a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801138e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	6959      	ldr	r1, [r3, #20]
 8011396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801139a:	b29b      	uxth	r3, r3
 801139c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80113a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80113a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80113a8:	6800      	ldr	r0, [r0, #0]
 80113aa:	f001 f89e 	bl	80124ea <USB_WritePMA>
 80113ae:	e227      	b.n	8011800 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80113b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	6a1b      	ldr	r3, [r3, #32]
 80113bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80113c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	4413      	add	r3, r2
 80113da:	881b      	ldrh	r3, [r3, #0]
 80113dc:	b29b      	uxth	r3, r3
 80113de:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80113e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113e6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80113ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	009b      	lsls	r3, r3, #2
 8011402:	441a      	add	r2, r3
 8011404:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801140c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011418:	b29b      	uxth	r3, r3
 801141a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801141c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801142c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011436:	b29b      	uxth	r3, r3
 8011438:	461a      	mov	r2, r3
 801143a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801143c:	4413      	add	r3, r2
 801143e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	00da      	lsls	r2, r3, #3
 801144e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011450:	4413      	add	r3, r2
 8011452:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011456:	65bb      	str	r3, [r7, #88]	; 0x58
 8011458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801145c:	b29a      	uxth	r2, r3
 801145e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011460:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	891b      	ldrh	r3, [r3, #8]
 801146e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	6959      	ldr	r1, [r3, #20]
 801147e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011482:	b29b      	uxth	r3, r3
 8011484:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011488:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801148c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011490:	6800      	ldr	r0, [r0, #0]
 8011492:	f001 f82a 	bl	80124ea <USB_WritePMA>
 8011496:	e1b3      	b.n	8011800 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801149c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	6a1a      	ldr	r2, [r3, #32]
 80114a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114a8:	1ad2      	subs	r2, r2, r3
 80114aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80114b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	009b      	lsls	r3, r3, #2
 80114ce:	4413      	add	r3, r2
 80114d0:	881b      	ldrh	r3, [r3, #0]
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114d8:	2b00      	cmp	r3, #0
 80114da:	f000 80c6 	beq.w	801166a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80114de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	673b      	str	r3, [r7, #112]	; 0x70
 80114ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	785b      	ldrb	r3, [r3, #1]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d177      	bne.n	80115ea <USB_EPStartXfer+0xb18>
 80114fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	66bb      	str	r3, [r7, #104]	; 0x68
 8011506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801150a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011514:	b29b      	uxth	r3, r3
 8011516:	461a      	mov	r2, r3
 8011518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801151a:	4413      	add	r3, r2
 801151c:	66bb      	str	r3, [r7, #104]	; 0x68
 801151e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	00da      	lsls	r2, r3, #3
 801152c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801152e:	4413      	add	r3, r2
 8011530:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011534:	667b      	str	r3, [r7, #100]	; 0x64
 8011536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011538:	881b      	ldrh	r3, [r3, #0]
 801153a:	b29b      	uxth	r3, r3
 801153c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011540:	b29a      	uxth	r2, r3
 8011542:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011544:	801a      	strh	r2, [r3, #0]
 8011546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801154a:	2b3e      	cmp	r3, #62	; 0x3e
 801154c:	d921      	bls.n	8011592 <USB_EPStartXfer+0xac0>
 801154e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011552:	095b      	lsrs	r3, r3, #5
 8011554:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801155c:	f003 031f 	and.w	r3, r3, #31
 8011560:	2b00      	cmp	r3, #0
 8011562:	d104      	bne.n	801156e <USB_EPStartXfer+0xa9c>
 8011564:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011568:	3b01      	subs	r3, #1
 801156a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801156e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011570:	881b      	ldrh	r3, [r3, #0]
 8011572:	b29a      	uxth	r2, r3
 8011574:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011578:	b29b      	uxth	r3, r3
 801157a:	029b      	lsls	r3, r3, #10
 801157c:	b29b      	uxth	r3, r3
 801157e:	4313      	orrs	r3, r2
 8011580:	b29b      	uxth	r3, r3
 8011582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801158a:	b29a      	uxth	r2, r3
 801158c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801158e:	801a      	strh	r2, [r3, #0]
 8011590:	e050      	b.n	8011634 <USB_EPStartXfer+0xb62>
 8011592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10a      	bne.n	80115b0 <USB_EPStartXfer+0xade>
 801159a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801159c:	881b      	ldrh	r3, [r3, #0]
 801159e:	b29b      	uxth	r3, r3
 80115a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115a8:	b29a      	uxth	r2, r3
 80115aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80115ac:	801a      	strh	r2, [r3, #0]
 80115ae:	e041      	b.n	8011634 <USB_EPStartXfer+0xb62>
 80115b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115b4:	085b      	lsrs	r3, r3, #1
 80115b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80115ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115be:	f003 0301 	and.w	r3, r3, #1
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d004      	beq.n	80115d0 <USB_EPStartXfer+0xafe>
 80115c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80115ca:	3301      	adds	r3, #1
 80115cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80115d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80115d2:	881b      	ldrh	r3, [r3, #0]
 80115d4:	b29a      	uxth	r2, r3
 80115d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80115da:	b29b      	uxth	r3, r3
 80115dc:	029b      	lsls	r3, r3, #10
 80115de:	b29b      	uxth	r3, r3
 80115e0:	4313      	orrs	r3, r2
 80115e2:	b29a      	uxth	r2, r3
 80115e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80115e6:	801a      	strh	r2, [r3, #0]
 80115e8:	e024      	b.n	8011634 <USB_EPStartXfer+0xb62>
 80115ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	785b      	ldrb	r3, [r3, #1]
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d11c      	bne.n	8011634 <USB_EPStartXfer+0xb62>
 80115fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011608:	b29b      	uxth	r3, r3
 801160a:	461a      	mov	r2, r3
 801160c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801160e:	4413      	add	r3, r2
 8011610:	673b      	str	r3, [r7, #112]	; 0x70
 8011612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	00da      	lsls	r2, r3, #3
 8011620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011622:	4413      	add	r3, r2
 8011624:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011628:	66fb      	str	r3, [r7, #108]	; 0x6c
 801162a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801162e:	b29a      	uxth	r2, r3
 8011630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011632:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	895b      	ldrh	r3, [r3, #10]
 8011640:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	6959      	ldr	r1, [r3, #20]
 8011650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011654:	b29b      	uxth	r3, r3
 8011656:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801165a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801165e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011662:	6800      	ldr	r0, [r0, #0]
 8011664:	f000 ff41 	bl	80124ea <USB_WritePMA>
 8011668:	e0ca      	b.n	8011800 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801166a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801166e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	785b      	ldrb	r3, [r3, #1]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d177      	bne.n	801176a <USB_EPStartXfer+0xc98>
 801167a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801167e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011694:	b29b      	uxth	r3, r3
 8011696:	461a      	mov	r2, r3
 8011698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801169a:	4413      	add	r3, r2
 801169c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801169e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	00da      	lsls	r2, r3, #3
 80116ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80116ae:	4413      	add	r3, r2
 80116b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80116b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80116b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80116b8:	881b      	ldrh	r3, [r3, #0]
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80116c0:	b29a      	uxth	r2, r3
 80116c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80116c4:	801a      	strh	r2, [r3, #0]
 80116c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116ca:	2b3e      	cmp	r3, #62	; 0x3e
 80116cc:	d921      	bls.n	8011712 <USB_EPStartXfer+0xc40>
 80116ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116d2:	095b      	lsrs	r3, r3, #5
 80116d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80116d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116dc:	f003 031f 	and.w	r3, r3, #31
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d104      	bne.n	80116ee <USB_EPStartXfer+0xc1c>
 80116e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80116e8:	3b01      	subs	r3, #1
 80116ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80116ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80116f0:	881b      	ldrh	r3, [r3, #0]
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	029b      	lsls	r3, r3, #10
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	4313      	orrs	r3, r2
 8011700:	b29b      	uxth	r3, r3
 8011702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801170a:	b29a      	uxth	r2, r3
 801170c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801170e:	801a      	strh	r2, [r3, #0]
 8011710:	e05c      	b.n	80117cc <USB_EPStartXfer+0xcfa>
 8011712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011716:	2b00      	cmp	r3, #0
 8011718:	d10a      	bne.n	8011730 <USB_EPStartXfer+0xc5e>
 801171a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801171c:	881b      	ldrh	r3, [r3, #0]
 801171e:	b29b      	uxth	r3, r3
 8011720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011728:	b29a      	uxth	r2, r3
 801172a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801172c:	801a      	strh	r2, [r3, #0]
 801172e:	e04d      	b.n	80117cc <USB_EPStartXfer+0xcfa>
 8011730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011734:	085b      	lsrs	r3, r3, #1
 8011736:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801173a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801173e:	f003 0301 	and.w	r3, r3, #1
 8011742:	2b00      	cmp	r3, #0
 8011744:	d004      	beq.n	8011750 <USB_EPStartXfer+0xc7e>
 8011746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801174a:	3301      	adds	r3, #1
 801174c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011752:	881b      	ldrh	r3, [r3, #0]
 8011754:	b29a      	uxth	r2, r3
 8011756:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801175a:	b29b      	uxth	r3, r3
 801175c:	029b      	lsls	r3, r3, #10
 801175e:	b29b      	uxth	r3, r3
 8011760:	4313      	orrs	r3, r2
 8011762:	b29a      	uxth	r2, r3
 8011764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011766:	801a      	strh	r2, [r3, #0]
 8011768:	e030      	b.n	80117cc <USB_EPStartXfer+0xcfa>
 801176a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801176e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	785b      	ldrb	r3, [r3, #1]
 8011776:	2b01      	cmp	r3, #1
 8011778:	d128      	bne.n	80117cc <USB_EPStartXfer+0xcfa>
 801177a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801177e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801178c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011796:	b29b      	uxth	r3, r3
 8011798:	461a      	mov	r2, r3
 801179a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801179e:	4413      	add	r3, r2
 80117a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80117a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	00da      	lsls	r2, r3, #3
 80117b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80117b6:	4413      	add	r3, r2
 80117b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80117bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80117c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80117ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80117cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	891b      	ldrh	r3, [r3, #8]
 80117d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80117dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	6959      	ldr	r1, [r3, #20]
 80117e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80117f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80117f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80117fa:	6800      	ldr	r0, [r0, #0]
 80117fc:	f000 fe75 	bl	80124ea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801180e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	009b      	lsls	r3, r3, #2
 8011818:	4413      	add	r3, r2
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	b29b      	uxth	r3, r3
 801181e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011826:	817b      	strh	r3, [r7, #10]
 8011828:	897b      	ldrh	r3, [r7, #10]
 801182a:	f083 0310 	eor.w	r3, r3, #16
 801182e:	817b      	strh	r3, [r7, #10]
 8011830:	897b      	ldrh	r3, [r7, #10]
 8011832:	f083 0320 	eor.w	r3, r3, #32
 8011836:	817b      	strh	r3, [r7, #10]
 8011838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801183c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	009b      	lsls	r3, r3, #2
 8011850:	441a      	add	r2, r3
 8011852:	897b      	ldrh	r3, [r7, #10]
 8011854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801185c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011864:	b29b      	uxth	r3, r3
 8011866:	8013      	strh	r3, [r2, #0]
 8011868:	f000 bcde 	b.w	8012228 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801186c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	7b1b      	ldrb	r3, [r3, #12]
 8011878:	2b00      	cmp	r3, #0
 801187a:	f040 80bb 	bne.w	80119f4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801187e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	699a      	ldr	r2, [r3, #24]
 801188a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801188e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	691b      	ldr	r3, [r3, #16]
 8011896:	429a      	cmp	r2, r3
 8011898:	d917      	bls.n	80118ca <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 801189a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801189e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	691b      	ldr	r3, [r3, #16]
 80118a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80118aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	699a      	ldr	r2, [r3, #24]
 80118b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118ba:	1ad2      	subs	r2, r2, r3
 80118bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	619a      	str	r2, [r3, #24]
 80118c8:	e00e      	b.n	80118e8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80118ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	699b      	ldr	r3, [r3, #24]
 80118d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80118da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2200      	movs	r2, #0
 80118e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80118e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80118f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011904:	b29b      	uxth	r3, r3
 8011906:	461a      	mov	r2, r3
 8011908:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801190c:	4413      	add	r3, r2
 801190e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	00da      	lsls	r2, r3, #3
 8011920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011924:	4413      	add	r3, r2
 8011926:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801192a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801192e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011932:	881b      	ldrh	r3, [r3, #0]
 8011934:	b29b      	uxth	r3, r3
 8011936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801193a:	b29a      	uxth	r2, r3
 801193c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011940:	801a      	strh	r2, [r3, #0]
 8011942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011946:	2b3e      	cmp	r3, #62	; 0x3e
 8011948:	d924      	bls.n	8011994 <USB_EPStartXfer+0xec2>
 801194a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801194e:	095b      	lsrs	r3, r3, #5
 8011950:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011958:	f003 031f 	and.w	r3, r3, #31
 801195c:	2b00      	cmp	r3, #0
 801195e:	d104      	bne.n	801196a <USB_EPStartXfer+0xe98>
 8011960:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011964:	3b01      	subs	r3, #1
 8011966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801196a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801196e:	881b      	ldrh	r3, [r3, #0]
 8011970:	b29a      	uxth	r2, r3
 8011972:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011976:	b29b      	uxth	r3, r3
 8011978:	029b      	lsls	r3, r3, #10
 801197a:	b29b      	uxth	r3, r3
 801197c:	4313      	orrs	r3, r2
 801197e:	b29b      	uxth	r3, r3
 8011980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011988:	b29a      	uxth	r2, r3
 801198a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801198e:	801a      	strh	r2, [r3, #0]
 8011990:	f000 bc10 	b.w	80121b4 <USB_EPStartXfer+0x16e2>
 8011994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011998:	2b00      	cmp	r3, #0
 801199a:	d10c      	bne.n	80119b6 <USB_EPStartXfer+0xee4>
 801199c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80119a0:	881b      	ldrh	r3, [r3, #0]
 80119a2:	b29b      	uxth	r3, r3
 80119a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119ac:	b29a      	uxth	r2, r3
 80119ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80119b2:	801a      	strh	r2, [r3, #0]
 80119b4:	e3fe      	b.n	80121b4 <USB_EPStartXfer+0x16e2>
 80119b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119ba:	085b      	lsrs	r3, r3, #1
 80119bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80119c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119c4:	f003 0301 	and.w	r3, r3, #1
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d004      	beq.n	80119d6 <USB_EPStartXfer+0xf04>
 80119cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80119d0:	3301      	adds	r3, #1
 80119d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80119d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80119da:	881b      	ldrh	r3, [r3, #0]
 80119dc:	b29a      	uxth	r2, r3
 80119de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	029b      	lsls	r3, r3, #10
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	4313      	orrs	r3, r2
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80119f0:	801a      	strh	r2, [r3, #0]
 80119f2:	e3df      	b.n	80121b4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80119f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	78db      	ldrb	r3, [r3, #3]
 8011a00:	2b02      	cmp	r3, #2
 8011a02:	f040 8218 	bne.w	8011e36 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	785b      	ldrb	r3, [r3, #1]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	f040 809d 	bne.w	8011b52 <USB_EPStartXfer+0x1080>
 8011a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	461a      	mov	r2, r3
 8011a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011a3c:	4413      	add	r3, r2
 8011a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	00da      	lsls	r2, r3, #3
 8011a50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011a54:	4413      	add	r3, r2
 8011a56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011a5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011a70:	801a      	strh	r2, [r3, #0]
 8011a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	691b      	ldr	r3, [r3, #16]
 8011a7e:	2b3e      	cmp	r3, #62	; 0x3e
 8011a80:	d92b      	bls.n	8011ada <USB_EPStartXfer+0x1008>
 8011a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	691b      	ldr	r3, [r3, #16]
 8011a8e:	095b      	lsrs	r3, r3, #5
 8011a90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	691b      	ldr	r3, [r3, #16]
 8011aa0:	f003 031f 	and.w	r3, r3, #31
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d104      	bne.n	8011ab2 <USB_EPStartXfer+0xfe0>
 8011aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011aac:	3b01      	subs	r3, #1
 8011aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011ab6:	881b      	ldrh	r3, [r3, #0]
 8011ab8:	b29a      	uxth	r2, r3
 8011aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	029b      	lsls	r3, r3, #10
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	4313      	orrs	r3, r2
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ad0:	b29a      	uxth	r2, r3
 8011ad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011ad6:	801a      	strh	r2, [r3, #0]
 8011ad8:	e070      	b.n	8011bbc <USB_EPStartXfer+0x10ea>
 8011ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	691b      	ldr	r3, [r3, #16]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d10c      	bne.n	8011b04 <USB_EPStartXfer+0x1032>
 8011aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011b00:	801a      	strh	r2, [r3, #0]
 8011b02:	e05b      	b.n	8011bbc <USB_EPStartXfer+0x10ea>
 8011b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	691b      	ldr	r3, [r3, #16]
 8011b10:	085b      	lsrs	r3, r3, #1
 8011b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	691b      	ldr	r3, [r3, #16]
 8011b22:	f003 0301 	and.w	r3, r3, #1
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d004      	beq.n	8011b34 <USB_EPStartXfer+0x1062>
 8011b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b2e:	3301      	adds	r3, #1
 8011b30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011b38:	881b      	ldrh	r3, [r3, #0]
 8011b3a:	b29a      	uxth	r2, r3
 8011b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	029b      	lsls	r3, r3, #10
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	4313      	orrs	r3, r2
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011b4e:	801a      	strh	r2, [r3, #0]
 8011b50:	e034      	b.n	8011bbc <USB_EPStartXfer+0x10ea>
 8011b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	785b      	ldrb	r3, [r3, #1]
 8011b5e:	2b01      	cmp	r3, #1
 8011b60:	d12c      	bne.n	8011bbc <USB_EPStartXfer+0x10ea>
 8011b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	461a      	mov	r2, r3
 8011b82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011b86:	4413      	add	r3, r2
 8011b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	00da      	lsls	r2, r3, #3
 8011b9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011b9e:	4413      	add	r3, r2
 8011ba0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	691b      	ldr	r3, [r3, #16]
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011bba:	801a      	strh	r2, [r3, #0]
 8011bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	785b      	ldrb	r3, [r3, #1]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f040 809d 	bne.w	8011d16 <USB_EPStartXfer+0x1244>
 8011bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011c00:	4413      	add	r3, r2
 8011c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	00da      	lsls	r2, r3, #3
 8011c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011c18:	4413      	add	r3, r2
 8011c1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011c1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011c22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011c2e:	b29a      	uxth	r2, r3
 8011c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011c34:	801a      	strh	r2, [r3, #0]
 8011c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	691b      	ldr	r3, [r3, #16]
 8011c42:	2b3e      	cmp	r3, #62	; 0x3e
 8011c44:	d92b      	bls.n	8011c9e <USB_EPStartXfer+0x11cc>
 8011c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	691b      	ldr	r3, [r3, #16]
 8011c52:	095b      	lsrs	r3, r3, #5
 8011c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	691b      	ldr	r3, [r3, #16]
 8011c64:	f003 031f 	and.w	r3, r3, #31
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d104      	bne.n	8011c76 <USB_EPStartXfer+0x11a4>
 8011c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011c70:	3b01      	subs	r3, #1
 8011c72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011c76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011c7a:	881b      	ldrh	r3, [r3, #0]
 8011c7c:	b29a      	uxth	r2, r3
 8011c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	029b      	lsls	r3, r3, #10
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011c9a:	801a      	strh	r2, [r3, #0]
 8011c9c:	e069      	b.n	8011d72 <USB_EPStartXfer+0x12a0>
 8011c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	691b      	ldr	r3, [r3, #16]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d10c      	bne.n	8011cc8 <USB_EPStartXfer+0x11f6>
 8011cae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011cb2:	881b      	ldrh	r3, [r3, #0]
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011cbe:	b29a      	uxth	r2, r3
 8011cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011cc4:	801a      	strh	r2, [r3, #0]
 8011cc6:	e054      	b.n	8011d72 <USB_EPStartXfer+0x12a0>
 8011cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	691b      	ldr	r3, [r3, #16]
 8011cd4:	085b      	lsrs	r3, r3, #1
 8011cd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	691b      	ldr	r3, [r3, #16]
 8011ce6:	f003 0301 	and.w	r3, r3, #1
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d004      	beq.n	8011cf8 <USB_EPStartXfer+0x1226>
 8011cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011cfc:	881b      	ldrh	r3, [r3, #0]
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	029b      	lsls	r3, r3, #10
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	4313      	orrs	r3, r2
 8011d0c:	b29a      	uxth	r2, r3
 8011d0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011d12:	801a      	strh	r2, [r3, #0]
 8011d14:	e02d      	b.n	8011d72 <USB_EPStartXfer+0x12a0>
 8011d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	785b      	ldrb	r3, [r3, #1]
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d125      	bne.n	8011d72 <USB_EPStartXfer+0x12a0>
 8011d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	461a      	mov	r2, r3
 8011d38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011d3c:	4413      	add	r3, r2
 8011d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	781b      	ldrb	r3, [r3, #0]
 8011d4e:	00da      	lsls	r2, r3, #3
 8011d50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011d54:	4413      	add	r3, r2
 8011d56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	691b      	ldr	r3, [r3, #16]
 8011d6a:	b29a      	uxth	r2, r3
 8011d6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011d70:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	69db      	ldr	r3, [r3, #28]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	f000 8218 	beq.w	80121b4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	4413      	add	r3, r2
 8011d9e:	881b      	ldrh	r3, [r3, #0]
 8011da0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011da4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d005      	beq.n	8011dbc <USB_EPStartXfer+0x12ea>
 8011db0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d10d      	bne.n	8011dd8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011dbc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	f040 81f5 	bne.w	80121b4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011dca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f040 81ee 	bne.w	80121b4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ddc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4413      	add	r3, r2
 8011df2:	881b      	ldrh	r3, [r3, #0]
 8011df4:	b29b      	uxth	r3, r3
 8011df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011dfe:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	009b      	lsls	r3, r3, #2
 8011e1a:	441a      	add	r2, r3
 8011e1c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	8013      	strh	r3, [r2, #0]
 8011e34:	e1be      	b.n	80121b4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	78db      	ldrb	r3, [r3, #3]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	f040 81b4 	bne.w	80121b0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	699a      	ldr	r2, [r3, #24]
 8011e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	691b      	ldr	r3, [r3, #16]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d917      	bls.n	8011e94 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	691b      	ldr	r3, [r3, #16]
 8011e70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	699a      	ldr	r2, [r3, #24]
 8011e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e84:	1ad2      	subs	r2, r2, r3
 8011e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	619a      	str	r2, [r3, #24]
 8011e92:	e00e      	b.n	8011eb2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8011e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	699b      	ldr	r3, [r3, #24]
 8011ea0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8011ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8011eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	785b      	ldrb	r3, [r3, #1]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	f040 8085 	bne.w	8011fce <USB_EPStartXfer+0x14fc>
 8011ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ec8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011ee8:	4413      	add	r3, r2
 8011eea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	00da      	lsls	r2, r3, #3
 8011efc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011f00:	4413      	add	r3, r2
 8011f02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011f0e:	881b      	ldrh	r3, [r3, #0]
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011f16:	b29a      	uxth	r2, r3
 8011f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011f1c:	801a      	strh	r2, [r3, #0]
 8011f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f22:	2b3e      	cmp	r3, #62	; 0x3e
 8011f24:	d923      	bls.n	8011f6e <USB_EPStartXfer+0x149c>
 8011f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f2a:	095b      	lsrs	r3, r3, #5
 8011f2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f34:	f003 031f 	and.w	r3, r3, #31
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d104      	bne.n	8011f46 <USB_EPStartXfer+0x1474>
 8011f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011f40:	3b01      	subs	r3, #1
 8011f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011f4a:	881b      	ldrh	r3, [r3, #0]
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	029b      	lsls	r3, r3, #10
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	4313      	orrs	r3, r2
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f64:	b29a      	uxth	r2, r3
 8011f66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011f6a:	801a      	strh	r2, [r3, #0]
 8011f6c:	e060      	b.n	8012030 <USB_EPStartXfer+0x155e>
 8011f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d10c      	bne.n	8011f90 <USB_EPStartXfer+0x14be>
 8011f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011f7a:	881b      	ldrh	r3, [r3, #0]
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f86:	b29a      	uxth	r2, r3
 8011f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011f8c:	801a      	strh	r2, [r3, #0]
 8011f8e:	e04f      	b.n	8012030 <USB_EPStartXfer+0x155e>
 8011f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f94:	085b      	lsrs	r3, r3, #1
 8011f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f9e:	f003 0301 	and.w	r3, r3, #1
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d004      	beq.n	8011fb0 <USB_EPStartXfer+0x14de>
 8011fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011faa:	3301      	adds	r3, #1
 8011fac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011fb4:	881b      	ldrh	r3, [r3, #0]
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011fbc:	b29b      	uxth	r3, r3
 8011fbe:	029b      	lsls	r3, r3, #10
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	4313      	orrs	r3, r2
 8011fc4:	b29a      	uxth	r2, r3
 8011fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011fca:	801a      	strh	r2, [r3, #0]
 8011fcc:	e030      	b.n	8012030 <USB_EPStartXfer+0x155e>
 8011fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	785b      	ldrb	r3, [r3, #1]
 8011fda:	2b01      	cmp	r3, #1
 8011fdc:	d128      	bne.n	8012030 <USB_EPStartXfer+0x155e>
 8011fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ffa:	b29b      	uxth	r3, r3
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012002:	4413      	add	r3, r2
 8012004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801200c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	00da      	lsls	r2, r3, #3
 8012016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801201a:	4413      	add	r3, r2
 801201c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012028:	b29a      	uxth	r2, r3
 801202a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801202e:	801a      	strh	r2, [r3, #0]
 8012030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801203e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	785b      	ldrb	r3, [r3, #1]
 801204a:	2b00      	cmp	r3, #0
 801204c:	f040 8085 	bne.w	801215a <USB_EPStartXfer+0x1688>
 8012050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801205e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801206c:	b29b      	uxth	r3, r3
 801206e:	461a      	mov	r2, r3
 8012070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012074:	4413      	add	r3, r2
 8012076:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801207a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801207e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	00da      	lsls	r2, r3, #3
 8012088:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801208c:	4413      	add	r3, r2
 801208e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801209a:	881b      	ldrh	r3, [r3, #0]
 801209c:	b29b      	uxth	r3, r3
 801209e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80120a8:	801a      	strh	r2, [r3, #0]
 80120aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120ae:	2b3e      	cmp	r3, #62	; 0x3e
 80120b0:	d923      	bls.n	80120fa <USB_EPStartXfer+0x1628>
 80120b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120b6:	095b      	lsrs	r3, r3, #5
 80120b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80120bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120c0:	f003 031f 	and.w	r3, r3, #31
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d104      	bne.n	80120d2 <USB_EPStartXfer+0x1600>
 80120c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80120cc:	3b01      	subs	r3, #1
 80120ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80120d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	b29a      	uxth	r2, r3
 80120da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80120de:	b29b      	uxth	r3, r3
 80120e0:	029b      	lsls	r3, r3, #10
 80120e2:	b29b      	uxth	r3, r3
 80120e4:	4313      	orrs	r3, r2
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120f0:	b29a      	uxth	r2, r3
 80120f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80120f6:	801a      	strh	r2, [r3, #0]
 80120f8:	e05c      	b.n	80121b4 <USB_EPStartXfer+0x16e2>
 80120fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d10c      	bne.n	801211c <USB_EPStartXfer+0x164a>
 8012102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012106:	881b      	ldrh	r3, [r3, #0]
 8012108:	b29b      	uxth	r3, r3
 801210a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801210e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012112:	b29a      	uxth	r2, r3
 8012114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012118:	801a      	strh	r2, [r3, #0]
 801211a:	e04b      	b.n	80121b4 <USB_EPStartXfer+0x16e2>
 801211c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012120:	085b      	lsrs	r3, r3, #1
 8012122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801212a:	f003 0301 	and.w	r3, r3, #1
 801212e:	2b00      	cmp	r3, #0
 8012130:	d004      	beq.n	801213c <USB_EPStartXfer+0x166a>
 8012132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012136:	3301      	adds	r3, #1
 8012138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801213c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012140:	881b      	ldrh	r3, [r3, #0]
 8012142:	b29a      	uxth	r2, r3
 8012144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012148:	b29b      	uxth	r3, r3
 801214a:	029b      	lsls	r3, r3, #10
 801214c:	b29b      	uxth	r3, r3
 801214e:	4313      	orrs	r3, r2
 8012150:	b29a      	uxth	r2, r3
 8012152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012156:	801a      	strh	r2, [r3, #0]
 8012158:	e02c      	b.n	80121b4 <USB_EPStartXfer+0x16e2>
 801215a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801215e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	785b      	ldrb	r3, [r3, #1]
 8012166:	2b01      	cmp	r3, #1
 8012168:	d124      	bne.n	80121b4 <USB_EPStartXfer+0x16e2>
 801216a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801216e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012178:	b29b      	uxth	r3, r3
 801217a:	461a      	mov	r2, r3
 801217c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012180:	4413      	add	r3, r2
 8012182:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801218a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	00da      	lsls	r2, r3, #3
 8012194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012198:	4413      	add	r3, r2
 801219a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801219e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80121a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121a6:	b29a      	uxth	r2, r3
 80121a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80121ac:	801a      	strh	r2, [r3, #0]
 80121ae:	e001      	b.n	80121b4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80121b0:	2301      	movs	r3, #1
 80121b2:	e03a      	b.n	801222a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80121b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121bc:	681a      	ldr	r2, [r3, #0]
 80121be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	009b      	lsls	r3, r3, #2
 80121cc:	4413      	add	r3, r2
 80121ce:	881b      	ldrh	r3, [r3, #0]
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80121d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80121da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80121de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80121e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80121e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80121ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80121ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80121f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80121f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	781b      	ldrb	r3, [r3, #0]
 801220c:	009b      	lsls	r3, r3, #2
 801220e:	441a      	add	r2, r3
 8012210:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801221c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012224:	b29b      	uxth	r3, r3
 8012226:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012228:	2300      	movs	r3, #0
}
 801222a:	4618      	mov	r0, r3
 801222c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012234:	b480      	push	{r7}
 8012236:	b085      	sub	sp, #20
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	785b      	ldrb	r3, [r3, #1]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d020      	beq.n	8012288 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012246:	687a      	ldr	r2, [r7, #4]
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	009b      	lsls	r3, r3, #2
 801224e:	4413      	add	r3, r2
 8012250:	881b      	ldrh	r3, [r3, #0]
 8012252:	b29b      	uxth	r3, r3
 8012254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801225c:	81bb      	strh	r3, [r7, #12]
 801225e:	89bb      	ldrh	r3, [r7, #12]
 8012260:	f083 0310 	eor.w	r3, r3, #16
 8012264:	81bb      	strh	r3, [r7, #12]
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	009b      	lsls	r3, r3, #2
 801226e:	441a      	add	r2, r3
 8012270:	89bb      	ldrh	r3, [r7, #12]
 8012272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801227a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801227e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012282:	b29b      	uxth	r3, r3
 8012284:	8013      	strh	r3, [r2, #0]
 8012286:	e01f      	b.n	80122c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	4413      	add	r3, r2
 8012292:	881b      	ldrh	r3, [r3, #0]
 8012294:	b29b      	uxth	r3, r3
 8012296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801229a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801229e:	81fb      	strh	r3, [r7, #14]
 80122a0:	89fb      	ldrh	r3, [r7, #14]
 80122a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80122a6:	81fb      	strh	r3, [r7, #14]
 80122a8:	687a      	ldr	r2, [r7, #4]
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	781b      	ldrb	r3, [r3, #0]
 80122ae:	009b      	lsls	r3, r3, #2
 80122b0:	441a      	add	r2, r3
 80122b2:	89fb      	ldrh	r3, [r7, #14]
 80122b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80122b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80122bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80122c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80122c8:	2300      	movs	r3, #0
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	3714      	adds	r7, #20
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr

080122d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80122d6:	b480      	push	{r7}
 80122d8:	b087      	sub	sp, #28
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
 80122de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	7b1b      	ldrb	r3, [r3, #12]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	f040 809d 	bne.w	8012424 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	785b      	ldrb	r3, [r3, #1]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d04c      	beq.n	801238c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	4413      	add	r3, r2
 80122fc:	881b      	ldrh	r3, [r3, #0]
 80122fe:	823b      	strh	r3, [r7, #16]
 8012300:	8a3b      	ldrh	r3, [r7, #16]
 8012302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012306:	2b00      	cmp	r3, #0
 8012308:	d01b      	beq.n	8012342 <USB_EPClearStall+0x6c>
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	009b      	lsls	r3, r3, #2
 8012312:	4413      	add	r3, r2
 8012314:	881b      	ldrh	r3, [r3, #0]
 8012316:	b29b      	uxth	r3, r3
 8012318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801231c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012320:	81fb      	strh	r3, [r7, #14]
 8012322:	687a      	ldr	r2, [r7, #4]
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	009b      	lsls	r3, r3, #2
 801232a:	441a      	add	r2, r3
 801232c:	89fb      	ldrh	r3, [r7, #14]
 801232e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801233a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801233e:	b29b      	uxth	r3, r3
 8012340:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	78db      	ldrb	r3, [r3, #3]
 8012346:	2b01      	cmp	r3, #1
 8012348:	d06c      	beq.n	8012424 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801234a:	687a      	ldr	r2, [r7, #4]
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	009b      	lsls	r3, r3, #2
 8012352:	4413      	add	r3, r2
 8012354:	881b      	ldrh	r3, [r3, #0]
 8012356:	b29b      	uxth	r3, r3
 8012358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801235c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012360:	81bb      	strh	r3, [r7, #12]
 8012362:	89bb      	ldrh	r3, [r7, #12]
 8012364:	f083 0320 	eor.w	r3, r3, #32
 8012368:	81bb      	strh	r3, [r7, #12]
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	441a      	add	r2, r3
 8012374:	89bb      	ldrh	r3, [r7, #12]
 8012376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801237a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801237e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012386:	b29b      	uxth	r3, r3
 8012388:	8013      	strh	r3, [r2, #0]
 801238a:	e04b      	b.n	8012424 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801238c:	687a      	ldr	r2, [r7, #4]
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	009b      	lsls	r3, r3, #2
 8012394:	4413      	add	r3, r2
 8012396:	881b      	ldrh	r3, [r3, #0]
 8012398:	82fb      	strh	r3, [r7, #22]
 801239a:	8afb      	ldrh	r3, [r7, #22]
 801239c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d01b      	beq.n	80123dc <USB_EPClearStall+0x106>
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	009b      	lsls	r3, r3, #2
 80123ac:	4413      	add	r3, r2
 80123ae:	881b      	ldrh	r3, [r3, #0]
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80123b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123ba:	82bb      	strh	r3, [r7, #20]
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	009b      	lsls	r3, r3, #2
 80123c4:	441a      	add	r2, r3
 80123c6:	8abb      	ldrh	r3, [r7, #20]
 80123c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80123cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80123d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80123d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123d8:	b29b      	uxth	r3, r3
 80123da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	009b      	lsls	r3, r3, #2
 80123e4:	4413      	add	r3, r2
 80123e6:	881b      	ldrh	r3, [r3, #0]
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80123ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123f2:	827b      	strh	r3, [r7, #18]
 80123f4:	8a7b      	ldrh	r3, [r7, #18]
 80123f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80123fa:	827b      	strh	r3, [r7, #18]
 80123fc:	8a7b      	ldrh	r3, [r7, #18]
 80123fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012402:	827b      	strh	r3, [r7, #18]
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	009b      	lsls	r3, r3, #2
 801240c:	441a      	add	r2, r3
 801240e:	8a7b      	ldrh	r3, [r7, #18]
 8012410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801241c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012420:	b29b      	uxth	r3, r3
 8012422:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8012424:	2300      	movs	r3, #0
}
 8012426:	4618      	mov	r0, r3
 8012428:	371c      	adds	r7, #28
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr

08012432 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012432:	b480      	push	{r7}
 8012434:	b083      	sub	sp, #12
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
 801243a:	460b      	mov	r3, r1
 801243c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801243e:	78fb      	ldrb	r3, [r7, #3]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d103      	bne.n	801244c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2280      	movs	r2, #128	; 0x80
 8012448:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801244c:	2300      	movs	r3, #0
}
 801244e:	4618      	mov	r0, r3
 8012450:	370c      	adds	r7, #12
 8012452:	46bd      	mov	sp, r7
 8012454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012458:	4770      	bx	lr

0801245a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801245a:	b480      	push	{r7}
 801245c:	b083      	sub	sp, #12
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012468:	b29b      	uxth	r3, r3
 801246a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801246e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012472:	b29a      	uxth	r2, r3
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801247a:	2300      	movs	r3, #0
}
 801247c:	4618      	mov	r0, r3
 801247e:	370c      	adds	r7, #12
 8012480:	46bd      	mov	sp, r7
 8012482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012486:	4770      	bx	lr

08012488 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8012488:	b480      	push	{r7}
 801248a:	b083      	sub	sp, #12
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012496:	b29b      	uxth	r3, r3
 8012498:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801249c:	b29a      	uxth	r2, r3
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80124a4:	2300      	movs	r3, #0
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	370c      	adds	r7, #12
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr

080124b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80124b2:	b480      	push	{r7}
 80124b4:	b085      	sub	sp, #20
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80124c4:	68fb      	ldr	r3, [r7, #12]
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3714      	adds	r7, #20
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr

080124d2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80124d2:	b480      	push	{r7}
 80124d4:	b083      	sub	sp, #12
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
 80124da:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80124dc:	2300      	movs	r3, #0
}
 80124de:	4618      	mov	r0, r3
 80124e0:	370c      	adds	r7, #12
 80124e2:	46bd      	mov	sp, r7
 80124e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e8:	4770      	bx	lr

080124ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80124ea:	b480      	push	{r7}
 80124ec:	b08b      	sub	sp, #44	; 0x2c
 80124ee:	af00      	add	r7, sp, #0
 80124f0:	60f8      	str	r0, [r7, #12]
 80124f2:	60b9      	str	r1, [r7, #8]
 80124f4:	4611      	mov	r1, r2
 80124f6:	461a      	mov	r2, r3
 80124f8:	460b      	mov	r3, r1
 80124fa:	80fb      	strh	r3, [r7, #6]
 80124fc:	4613      	mov	r3, r2
 80124fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012500:	88bb      	ldrh	r3, [r7, #4]
 8012502:	3301      	adds	r3, #1
 8012504:	085b      	lsrs	r3, r3, #1
 8012506:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012510:	88fa      	ldrh	r2, [r7, #6]
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	4413      	add	r3, r2
 8012516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801251a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801251c:	69bb      	ldr	r3, [r7, #24]
 801251e:	627b      	str	r3, [r7, #36]	; 0x24
 8012520:	e01b      	b.n	801255a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012528:	69fb      	ldr	r3, [r7, #28]
 801252a:	3301      	adds	r3, #1
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	021b      	lsls	r3, r3, #8
 8012530:	b21a      	sxth	r2, r3
 8012532:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012536:	4313      	orrs	r3, r2
 8012538:	b21b      	sxth	r3, r3
 801253a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801253c:	6a3b      	ldr	r3, [r7, #32]
 801253e:	8a7a      	ldrh	r2, [r7, #18]
 8012540:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012542:	6a3b      	ldr	r3, [r7, #32]
 8012544:	3302      	adds	r3, #2
 8012546:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	3301      	adds	r3, #1
 801254c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801254e:	69fb      	ldr	r3, [r7, #28]
 8012550:	3301      	adds	r3, #1
 8012552:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012556:	3b01      	subs	r3, #1
 8012558:	627b      	str	r3, [r7, #36]	; 0x24
 801255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255c:	2b00      	cmp	r3, #0
 801255e:	d1e0      	bne.n	8012522 <USB_WritePMA+0x38>
  }
}
 8012560:	bf00      	nop
 8012562:	bf00      	nop
 8012564:	372c      	adds	r7, #44	; 0x2c
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr

0801256e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801256e:	b480      	push	{r7}
 8012570:	b08b      	sub	sp, #44	; 0x2c
 8012572:	af00      	add	r7, sp, #0
 8012574:	60f8      	str	r0, [r7, #12]
 8012576:	60b9      	str	r1, [r7, #8]
 8012578:	4611      	mov	r1, r2
 801257a:	461a      	mov	r2, r3
 801257c:	460b      	mov	r3, r1
 801257e:	80fb      	strh	r3, [r7, #6]
 8012580:	4613      	mov	r3, r2
 8012582:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012584:	88bb      	ldrh	r3, [r7, #4]
 8012586:	085b      	lsrs	r3, r3, #1
 8012588:	b29b      	uxth	r3, r3
 801258a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012594:	88fa      	ldrh	r2, [r7, #6]
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	4413      	add	r3, r2
 801259a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801259e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	627b      	str	r3, [r7, #36]	; 0x24
 80125a4:	e018      	b.n	80125d8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80125a6:	6a3b      	ldr	r3, [r7, #32]
 80125a8:	881b      	ldrh	r3, [r3, #0]
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80125ae:	6a3b      	ldr	r3, [r7, #32]
 80125b0:	3302      	adds	r3, #2
 80125b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	b2da      	uxtb	r2, r3
 80125b8:	69fb      	ldr	r3, [r7, #28]
 80125ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80125bc:	69fb      	ldr	r3, [r7, #28]
 80125be:	3301      	adds	r3, #1
 80125c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	0a1b      	lsrs	r3, r3, #8
 80125c6:	b2da      	uxtb	r2, r3
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	3301      	adds	r3, #1
 80125d0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80125d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d4:	3b01      	subs	r3, #1
 80125d6:	627b      	str	r3, [r7, #36]	; 0x24
 80125d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d1e3      	bne.n	80125a6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80125de:	88bb      	ldrh	r3, [r7, #4]
 80125e0:	f003 0301 	and.w	r3, r3, #1
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d007      	beq.n	80125fa <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80125ea:	6a3b      	ldr	r3, [r7, #32]
 80125ec:	881b      	ldrh	r3, [r3, #0]
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	b2da      	uxtb	r2, r3
 80125f6:	69fb      	ldr	r3, [r7, #28]
 80125f8:	701a      	strb	r2, [r3, #0]
  }
}
 80125fa:	bf00      	nop
 80125fc:	372c      	adds	r7, #44	; 0x2c
 80125fe:	46bd      	mov	sp, r7
 8012600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012604:	4770      	bx	lr
	...

08012608 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	460b      	mov	r3, r1
 8012612:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012614:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012618:	f003 fa30 	bl	8015a7c <USBD_static_malloc>
 801261c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d109      	bne.n	8012638 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	32b0      	adds	r2, #176	; 0xb0
 801262e:	2100      	movs	r1, #0
 8012630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012634:	2302      	movs	r3, #2
 8012636:	e0d4      	b.n	80127e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012638:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801263c:	2100      	movs	r1, #0
 801263e:	68f8      	ldr	r0, [r7, #12]
 8012640:	f005 f9cf 	bl	80179e2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	32b0      	adds	r2, #176	; 0xb0
 801264e:	68f9      	ldr	r1, [r7, #12]
 8012650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	32b0      	adds	r2, #176	; 0xb0
 801265e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	7c1b      	ldrb	r3, [r3, #16]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d138      	bne.n	80126e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012670:	4b5e      	ldr	r3, [pc, #376]	; (80127ec <USBD_CDC_Init+0x1e4>)
 8012672:	7819      	ldrb	r1, [r3, #0]
 8012674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012678:	2202      	movs	r2, #2
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f003 f800 	bl	8015680 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012680:	4b5a      	ldr	r3, [pc, #360]	; (80127ec <USBD_CDC_Init+0x1e4>)
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	f003 020f 	and.w	r2, r3, #15
 8012688:	6879      	ldr	r1, [r7, #4]
 801268a:	4613      	mov	r3, r2
 801268c:	009b      	lsls	r3, r3, #2
 801268e:	4413      	add	r3, r2
 8012690:	009b      	lsls	r3, r3, #2
 8012692:	440b      	add	r3, r1
 8012694:	3324      	adds	r3, #36	; 0x24
 8012696:	2201      	movs	r2, #1
 8012698:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801269a:	4b55      	ldr	r3, [pc, #340]	; (80127f0 <USBD_CDC_Init+0x1e8>)
 801269c:	7819      	ldrb	r1, [r3, #0]
 801269e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126a2:	2202      	movs	r2, #2
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f002 ffeb 	bl	8015680 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80126aa:	4b51      	ldr	r3, [pc, #324]	; (80127f0 <USBD_CDC_Init+0x1e8>)
 80126ac:	781b      	ldrb	r3, [r3, #0]
 80126ae:	f003 020f 	and.w	r2, r3, #15
 80126b2:	6879      	ldr	r1, [r7, #4]
 80126b4:	4613      	mov	r3, r2
 80126b6:	009b      	lsls	r3, r3, #2
 80126b8:	4413      	add	r3, r2
 80126ba:	009b      	lsls	r3, r3, #2
 80126bc:	440b      	add	r3, r1
 80126be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80126c2:	2201      	movs	r2, #1
 80126c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80126c6:	4b4b      	ldr	r3, [pc, #300]	; (80127f4 <USBD_CDC_Init+0x1ec>)
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	f003 020f 	and.w	r2, r3, #15
 80126ce:	6879      	ldr	r1, [r7, #4]
 80126d0:	4613      	mov	r3, r2
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	4413      	add	r3, r2
 80126d6:	009b      	lsls	r3, r3, #2
 80126d8:	440b      	add	r3, r1
 80126da:	3326      	adds	r3, #38	; 0x26
 80126dc:	2210      	movs	r2, #16
 80126de:	801a      	strh	r2, [r3, #0]
 80126e0:	e035      	b.n	801274e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80126e2:	4b42      	ldr	r3, [pc, #264]	; (80127ec <USBD_CDC_Init+0x1e4>)
 80126e4:	7819      	ldrb	r1, [r3, #0]
 80126e6:	2340      	movs	r3, #64	; 0x40
 80126e8:	2202      	movs	r2, #2
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f002 ffc8 	bl	8015680 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80126f0:	4b3e      	ldr	r3, [pc, #248]	; (80127ec <USBD_CDC_Init+0x1e4>)
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	f003 020f 	and.w	r2, r3, #15
 80126f8:	6879      	ldr	r1, [r7, #4]
 80126fa:	4613      	mov	r3, r2
 80126fc:	009b      	lsls	r3, r3, #2
 80126fe:	4413      	add	r3, r2
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	440b      	add	r3, r1
 8012704:	3324      	adds	r3, #36	; 0x24
 8012706:	2201      	movs	r2, #1
 8012708:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801270a:	4b39      	ldr	r3, [pc, #228]	; (80127f0 <USBD_CDC_Init+0x1e8>)
 801270c:	7819      	ldrb	r1, [r3, #0]
 801270e:	2340      	movs	r3, #64	; 0x40
 8012710:	2202      	movs	r2, #2
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f002 ffb4 	bl	8015680 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012718:	4b35      	ldr	r3, [pc, #212]	; (80127f0 <USBD_CDC_Init+0x1e8>)
 801271a:	781b      	ldrb	r3, [r3, #0]
 801271c:	f003 020f 	and.w	r2, r3, #15
 8012720:	6879      	ldr	r1, [r7, #4]
 8012722:	4613      	mov	r3, r2
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4413      	add	r3, r2
 8012728:	009b      	lsls	r3, r3, #2
 801272a:	440b      	add	r3, r1
 801272c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012730:	2201      	movs	r2, #1
 8012732:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012734:	4b2f      	ldr	r3, [pc, #188]	; (80127f4 <USBD_CDC_Init+0x1ec>)
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	f003 020f 	and.w	r2, r3, #15
 801273c:	6879      	ldr	r1, [r7, #4]
 801273e:	4613      	mov	r3, r2
 8012740:	009b      	lsls	r3, r3, #2
 8012742:	4413      	add	r3, r2
 8012744:	009b      	lsls	r3, r3, #2
 8012746:	440b      	add	r3, r1
 8012748:	3326      	adds	r3, #38	; 0x26
 801274a:	2210      	movs	r2, #16
 801274c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801274e:	4b29      	ldr	r3, [pc, #164]	; (80127f4 <USBD_CDC_Init+0x1ec>)
 8012750:	7819      	ldrb	r1, [r3, #0]
 8012752:	2308      	movs	r3, #8
 8012754:	2203      	movs	r2, #3
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f002 ff92 	bl	8015680 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801275c:	4b25      	ldr	r3, [pc, #148]	; (80127f4 <USBD_CDC_Init+0x1ec>)
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	f003 020f 	and.w	r2, r3, #15
 8012764:	6879      	ldr	r1, [r7, #4]
 8012766:	4613      	mov	r3, r2
 8012768:	009b      	lsls	r3, r3, #2
 801276a:	4413      	add	r3, r2
 801276c:	009b      	lsls	r3, r3, #2
 801276e:	440b      	add	r3, r1
 8012770:	3324      	adds	r3, #36	; 0x24
 8012772:	2201      	movs	r2, #1
 8012774:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2200      	movs	r2, #0
 801277a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	33b0      	adds	r3, #176	; 0xb0
 8012788:	009b      	lsls	r3, r3, #2
 801278a:	4413      	add	r3, r2
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	2200      	movs	r2, #0
 8012796:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	2200      	movs	r2, #0
 801279e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d101      	bne.n	80127b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80127ac:	2302      	movs	r3, #2
 80127ae:	e018      	b.n	80127e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	7c1b      	ldrb	r3, [r3, #16]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d10a      	bne.n	80127ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80127b8:	4b0d      	ldr	r3, [pc, #52]	; (80127f0 <USBD_CDC_Init+0x1e8>)
 80127ba:	7819      	ldrb	r1, [r3, #0]
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80127c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f003 f8d6 	bl	8015978 <USBD_LL_PrepareReceive>
 80127cc:	e008      	b.n	80127e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80127ce:	4b08      	ldr	r3, [pc, #32]	; (80127f0 <USBD_CDC_Init+0x1e8>)
 80127d0:	7819      	ldrb	r1, [r3, #0]
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80127d8:	2340      	movs	r3, #64	; 0x40
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f003 f8cc 	bl	8015978 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80127e0:	2300      	movs	r3, #0
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	200000b7 	.word	0x200000b7
 80127f0:	200000b8 	.word	0x200000b8
 80127f4:	200000b9 	.word	0x200000b9

080127f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	460b      	mov	r3, r1
 8012802:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012804:	4b3a      	ldr	r3, [pc, #232]	; (80128f0 <USBD_CDC_DeInit+0xf8>)
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	4619      	mov	r1, r3
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f002 ff76 	bl	80156fc <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012810:	4b37      	ldr	r3, [pc, #220]	; (80128f0 <USBD_CDC_DeInit+0xf8>)
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	f003 020f 	and.w	r2, r3, #15
 8012818:	6879      	ldr	r1, [r7, #4]
 801281a:	4613      	mov	r3, r2
 801281c:	009b      	lsls	r3, r3, #2
 801281e:	4413      	add	r3, r2
 8012820:	009b      	lsls	r3, r3, #2
 8012822:	440b      	add	r3, r1
 8012824:	3324      	adds	r3, #36	; 0x24
 8012826:	2200      	movs	r2, #0
 8012828:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801282a:	4b32      	ldr	r3, [pc, #200]	; (80128f4 <USBD_CDC_DeInit+0xfc>)
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	4619      	mov	r1, r3
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f002 ff63 	bl	80156fc <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012836:	4b2f      	ldr	r3, [pc, #188]	; (80128f4 <USBD_CDC_DeInit+0xfc>)
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	f003 020f 	and.w	r2, r3, #15
 801283e:	6879      	ldr	r1, [r7, #4]
 8012840:	4613      	mov	r3, r2
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	4413      	add	r3, r2
 8012846:	009b      	lsls	r3, r3, #2
 8012848:	440b      	add	r3, r1
 801284a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801284e:	2200      	movs	r2, #0
 8012850:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012852:	4b29      	ldr	r3, [pc, #164]	; (80128f8 <USBD_CDC_DeInit+0x100>)
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	4619      	mov	r1, r3
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f002 ff4f 	bl	80156fc <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801285e:	4b26      	ldr	r3, [pc, #152]	; (80128f8 <USBD_CDC_DeInit+0x100>)
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	f003 020f 	and.w	r2, r3, #15
 8012866:	6879      	ldr	r1, [r7, #4]
 8012868:	4613      	mov	r3, r2
 801286a:	009b      	lsls	r3, r3, #2
 801286c:	4413      	add	r3, r2
 801286e:	009b      	lsls	r3, r3, #2
 8012870:	440b      	add	r3, r1
 8012872:	3324      	adds	r3, #36	; 0x24
 8012874:	2200      	movs	r2, #0
 8012876:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012878:	4b1f      	ldr	r3, [pc, #124]	; (80128f8 <USBD_CDC_DeInit+0x100>)
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	f003 020f 	and.w	r2, r3, #15
 8012880:	6879      	ldr	r1, [r7, #4]
 8012882:	4613      	mov	r3, r2
 8012884:	009b      	lsls	r3, r3, #2
 8012886:	4413      	add	r3, r2
 8012888:	009b      	lsls	r3, r3, #2
 801288a:	440b      	add	r3, r1
 801288c:	3326      	adds	r3, #38	; 0x26
 801288e:	2200      	movs	r2, #0
 8012890:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	32b0      	adds	r2, #176	; 0xb0
 801289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d01f      	beq.n	80128e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80128aa:	687a      	ldr	r2, [r7, #4]
 80128ac:	33b0      	adds	r3, #176	; 0xb0
 80128ae:	009b      	lsls	r3, r3, #2
 80128b0:	4413      	add	r3, r2
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	32b0      	adds	r2, #176	; 0xb0
 80128c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128c6:	4618      	mov	r0, r3
 80128c8:	f003 f8e6 	bl	8015a98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	32b0      	adds	r2, #176	; 0xb0
 80128d6:	2100      	movs	r1, #0
 80128d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2200      	movs	r2, #0
 80128e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80128e4:	2300      	movs	r3, #0
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	200000b7 	.word	0x200000b7
 80128f4:	200000b8 	.word	0x200000b8
 80128f8:	200000b9 	.word	0x200000b9

080128fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b086      	sub	sp, #24
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	32b0      	adds	r2, #176	; 0xb0
 8012910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012914:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012916:	2300      	movs	r3, #0
 8012918:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801291a:	2300      	movs	r3, #0
 801291c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801291e:	2300      	movs	r3, #0
 8012920:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d101      	bne.n	801292c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012928:	2303      	movs	r3, #3
 801292a:	e0bf      	b.n	8012aac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012934:	2b00      	cmp	r3, #0
 8012936:	d050      	beq.n	80129da <USBD_CDC_Setup+0xde>
 8012938:	2b20      	cmp	r3, #32
 801293a:	f040 80af 	bne.w	8012a9c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	88db      	ldrh	r3, [r3, #6]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d03a      	beq.n	80129bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	b25b      	sxtb	r3, r3
 801294c:	2b00      	cmp	r3, #0
 801294e:	da1b      	bge.n	8012988 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012956:	687a      	ldr	r2, [r7, #4]
 8012958:	33b0      	adds	r3, #176	; 0xb0
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	4413      	add	r3, r2
 801295e:	685b      	ldr	r3, [r3, #4]
 8012960:	689b      	ldr	r3, [r3, #8]
 8012962:	683a      	ldr	r2, [r7, #0]
 8012964:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012966:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012968:	683a      	ldr	r2, [r7, #0]
 801296a:	88d2      	ldrh	r2, [r2, #6]
 801296c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	88db      	ldrh	r3, [r3, #6]
 8012972:	2b07      	cmp	r3, #7
 8012974:	bf28      	it	cs
 8012976:	2307      	movcs	r3, #7
 8012978:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	89fa      	ldrh	r2, [r7, #14]
 801297e:	4619      	mov	r1, r3
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f001 fd21 	bl	80143c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012986:	e090      	b.n	8012aaa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	785a      	ldrb	r2, [r3, #1]
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	88db      	ldrh	r3, [r3, #6]
 8012996:	2b3f      	cmp	r3, #63	; 0x3f
 8012998:	d803      	bhi.n	80129a2 <USBD_CDC_Setup+0xa6>
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	88db      	ldrh	r3, [r3, #6]
 801299e:	b2da      	uxtb	r2, r3
 80129a0:	e000      	b.n	80129a4 <USBD_CDC_Setup+0xa8>
 80129a2:	2240      	movs	r2, #64	; 0x40
 80129a4:	693b      	ldr	r3, [r7, #16]
 80129a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80129aa:	6939      	ldr	r1, [r7, #16]
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80129b2:	461a      	mov	r2, r3
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f001 fd33 	bl	8014420 <USBD_CtlPrepareRx>
      break;
 80129ba:	e076      	b.n	8012aaa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	33b0      	adds	r3, #176	; 0xb0
 80129c6:	009b      	lsls	r3, r3, #2
 80129c8:	4413      	add	r3, r2
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	689b      	ldr	r3, [r3, #8]
 80129ce:	683a      	ldr	r2, [r7, #0]
 80129d0:	7850      	ldrb	r0, [r2, #1]
 80129d2:	2200      	movs	r2, #0
 80129d4:	6839      	ldr	r1, [r7, #0]
 80129d6:	4798      	blx	r3
      break;
 80129d8:	e067      	b.n	8012aaa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	785b      	ldrb	r3, [r3, #1]
 80129de:	2b0b      	cmp	r3, #11
 80129e0:	d851      	bhi.n	8012a86 <USBD_CDC_Setup+0x18a>
 80129e2:	a201      	add	r2, pc, #4	; (adr r2, 80129e8 <USBD_CDC_Setup+0xec>)
 80129e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129e8:	08012a19 	.word	0x08012a19
 80129ec:	08012a95 	.word	0x08012a95
 80129f0:	08012a87 	.word	0x08012a87
 80129f4:	08012a87 	.word	0x08012a87
 80129f8:	08012a87 	.word	0x08012a87
 80129fc:	08012a87 	.word	0x08012a87
 8012a00:	08012a87 	.word	0x08012a87
 8012a04:	08012a87 	.word	0x08012a87
 8012a08:	08012a87 	.word	0x08012a87
 8012a0c:	08012a87 	.word	0x08012a87
 8012a10:	08012a43 	.word	0x08012a43
 8012a14:	08012a6d 	.word	0x08012a6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a1e:	b2db      	uxtb	r3, r3
 8012a20:	2b03      	cmp	r3, #3
 8012a22:	d107      	bne.n	8012a34 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012a24:	f107 030a 	add.w	r3, r7, #10
 8012a28:	2202      	movs	r2, #2
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f001 fccb 	bl	80143c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012a32:	e032      	b.n	8012a9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012a34:	6839      	ldr	r1, [r7, #0]
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f001 fc55 	bl	80142e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8012a3c:	2303      	movs	r3, #3
 8012a3e:	75fb      	strb	r3, [r7, #23]
          break;
 8012a40:	e02b      	b.n	8012a9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a48:	b2db      	uxtb	r3, r3
 8012a4a:	2b03      	cmp	r3, #3
 8012a4c:	d107      	bne.n	8012a5e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012a4e:	f107 030d 	add.w	r3, r7, #13
 8012a52:	2201      	movs	r2, #1
 8012a54:	4619      	mov	r1, r3
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f001 fcb6 	bl	80143c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012a5c:	e01d      	b.n	8012a9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012a5e:	6839      	ldr	r1, [r7, #0]
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f001 fc40 	bl	80142e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8012a66:	2303      	movs	r3, #3
 8012a68:	75fb      	strb	r3, [r7, #23]
          break;
 8012a6a:	e016      	b.n	8012a9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	2b03      	cmp	r3, #3
 8012a76:	d00f      	beq.n	8012a98 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012a78:	6839      	ldr	r1, [r7, #0]
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f001 fc33 	bl	80142e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8012a80:	2303      	movs	r3, #3
 8012a82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012a84:	e008      	b.n	8012a98 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012a86:	6839      	ldr	r1, [r7, #0]
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f001 fc2c 	bl	80142e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8012a8e:	2303      	movs	r3, #3
 8012a90:	75fb      	strb	r3, [r7, #23]
          break;
 8012a92:	e002      	b.n	8012a9a <USBD_CDC_Setup+0x19e>
          break;
 8012a94:	bf00      	nop
 8012a96:	e008      	b.n	8012aaa <USBD_CDC_Setup+0x1ae>
          break;
 8012a98:	bf00      	nop
      }
      break;
 8012a9a:	e006      	b.n	8012aaa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012a9c:	6839      	ldr	r1, [r7, #0]
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f001 fc21 	bl	80142e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8012aa4:	2303      	movs	r3, #3
 8012aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8012aa8:	bf00      	nop
  }

  return (uint8_t)ret;
 8012aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3718      	adds	r7, #24
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b084      	sub	sp, #16
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	460b      	mov	r3, r1
 8012abe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012ac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	32b0      	adds	r2, #176	; 0xb0
 8012ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d101      	bne.n	8012ade <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012ada:	2303      	movs	r3, #3
 8012adc:	e065      	b.n	8012baa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	32b0      	adds	r2, #176	; 0xb0
 8012ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012aee:	78fb      	ldrb	r3, [r7, #3]
 8012af0:	f003 020f 	and.w	r2, r3, #15
 8012af4:	6879      	ldr	r1, [r7, #4]
 8012af6:	4613      	mov	r3, r2
 8012af8:	009b      	lsls	r3, r3, #2
 8012afa:	4413      	add	r3, r2
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	440b      	add	r3, r1
 8012b00:	3318      	adds	r3, #24
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d02f      	beq.n	8012b68 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012b08:	78fb      	ldrb	r3, [r7, #3]
 8012b0a:	f003 020f 	and.w	r2, r3, #15
 8012b0e:	6879      	ldr	r1, [r7, #4]
 8012b10:	4613      	mov	r3, r2
 8012b12:	009b      	lsls	r3, r3, #2
 8012b14:	4413      	add	r3, r2
 8012b16:	009b      	lsls	r3, r3, #2
 8012b18:	440b      	add	r3, r1
 8012b1a:	3318      	adds	r3, #24
 8012b1c:	681a      	ldr	r2, [r3, #0]
 8012b1e:	78fb      	ldrb	r3, [r7, #3]
 8012b20:	f003 010f 	and.w	r1, r3, #15
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	460b      	mov	r3, r1
 8012b28:	009b      	lsls	r3, r3, #2
 8012b2a:	440b      	add	r3, r1
 8012b2c:	00db      	lsls	r3, r3, #3
 8012b2e:	4403      	add	r3, r0
 8012b30:	3338      	adds	r3, #56	; 0x38
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	fbb2 f1f3 	udiv	r1, r2, r3
 8012b38:	fb01 f303 	mul.w	r3, r1, r3
 8012b3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d112      	bne.n	8012b68 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012b42:	78fb      	ldrb	r3, [r7, #3]
 8012b44:	f003 020f 	and.w	r2, r3, #15
 8012b48:	6879      	ldr	r1, [r7, #4]
 8012b4a:	4613      	mov	r3, r2
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	4413      	add	r3, r2
 8012b50:	009b      	lsls	r3, r3, #2
 8012b52:	440b      	add	r3, r1
 8012b54:	3318      	adds	r3, #24
 8012b56:	2200      	movs	r2, #0
 8012b58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012b5a:	78f9      	ldrb	r1, [r7, #3]
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	2200      	movs	r2, #0
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f002 fed1 	bl	8015908 <USBD_LL_Transmit>
 8012b66:	e01f      	b.n	8012ba8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b76:	687a      	ldr	r2, [r7, #4]
 8012b78:	33b0      	adds	r3, #176	; 0xb0
 8012b7a:	009b      	lsls	r3, r3, #2
 8012b7c:	4413      	add	r3, r2
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	691b      	ldr	r3, [r3, #16]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d010      	beq.n	8012ba8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b8c:	687a      	ldr	r2, [r7, #4]
 8012b8e:	33b0      	adds	r3, #176	; 0xb0
 8012b90:	009b      	lsls	r3, r3, #2
 8012b92:	4413      	add	r3, r2
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	691b      	ldr	r3, [r3, #16]
 8012b98:	68ba      	ldr	r2, [r7, #8]
 8012b9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012b9e:	68ba      	ldr	r2, [r7, #8]
 8012ba0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8012ba4:	78fa      	ldrb	r2, [r7, #3]
 8012ba6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012ba8:	2300      	movs	r3, #0
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3710      	adds	r7, #16
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}

08012bb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012bb2:	b580      	push	{r7, lr}
 8012bb4:	b084      	sub	sp, #16
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	6078      	str	r0, [r7, #4]
 8012bba:	460b      	mov	r3, r1
 8012bbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	32b0      	adds	r2, #176	; 0xb0
 8012bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	32b0      	adds	r2, #176	; 0xb0
 8012bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d101      	bne.n	8012be4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012be0:	2303      	movs	r3, #3
 8012be2:	e01a      	b.n	8012c1a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012be4:	78fb      	ldrb	r3, [r7, #3]
 8012be6:	4619      	mov	r1, r3
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f002 fefd 	bl	80159e8 <USBD_LL_GetRxDataSize>
 8012bee:	4602      	mov	r2, r0
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	33b0      	adds	r3, #176	; 0xb0
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	4413      	add	r3, r2
 8012c04:	685b      	ldr	r3, [r3, #4]
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	68fa      	ldr	r2, [r7, #12]
 8012c0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012c0e:	68fa      	ldr	r2, [r7, #12]
 8012c10:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8012c14:	4611      	mov	r1, r2
 8012c16:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012c18:	2300      	movs	r3, #0
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3710      	adds	r7, #16
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}

08012c22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012c22:	b580      	push	{r7, lr}
 8012c24:	b084      	sub	sp, #16
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	32b0      	adds	r2, #176	; 0xb0
 8012c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d101      	bne.n	8012c44 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012c40:	2303      	movs	r3, #3
 8012c42:	e025      	b.n	8012c90 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012c4a:	687a      	ldr	r2, [r7, #4]
 8012c4c:	33b0      	adds	r3, #176	; 0xb0
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	4413      	add	r3, r2
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d01a      	beq.n	8012c8e <USBD_CDC_EP0_RxReady+0x6c>
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012c5e:	2bff      	cmp	r3, #255	; 0xff
 8012c60:	d015      	beq.n	8012c8e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012c68:	687a      	ldr	r2, [r7, #4]
 8012c6a:	33b0      	adds	r3, #176	; 0xb0
 8012c6c:	009b      	lsls	r3, r3, #2
 8012c6e:	4413      	add	r3, r2
 8012c70:	685b      	ldr	r3, [r3, #4]
 8012c72:	689b      	ldr	r3, [r3, #8]
 8012c74:	68fa      	ldr	r2, [r7, #12]
 8012c76:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8012c7a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012c7c:	68fa      	ldr	r2, [r7, #12]
 8012c7e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012c82:	b292      	uxth	r2, r2
 8012c84:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	22ff      	movs	r2, #255	; 0xff
 8012c8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012c8e:	2300      	movs	r3, #0
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3710      	adds	r7, #16
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}

08012c98 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b086      	sub	sp, #24
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012ca0:	2182      	movs	r1, #130	; 0x82
 8012ca2:	4818      	ldr	r0, [pc, #96]	; (8012d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012ca4:	f000 fcbd 	bl	8013622 <USBD_GetEpDesc>
 8012ca8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012caa:	2101      	movs	r1, #1
 8012cac:	4815      	ldr	r0, [pc, #84]	; (8012d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012cae:	f000 fcb8 	bl	8013622 <USBD_GetEpDesc>
 8012cb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012cb4:	2181      	movs	r1, #129	; 0x81
 8012cb6:	4813      	ldr	r0, [pc, #76]	; (8012d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012cb8:	f000 fcb3 	bl	8013622 <USBD_GetEpDesc>
 8012cbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d002      	beq.n	8012cca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	2210      	movs	r2, #16
 8012cc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d006      	beq.n	8012cde <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012cd8:	711a      	strb	r2, [r3, #4]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d006      	beq.n	8012cf2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012cec:	711a      	strb	r2, [r3, #4]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2243      	movs	r2, #67	; 0x43
 8012cf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012cf8:	4b02      	ldr	r3, [pc, #8]	; (8012d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3718      	adds	r7, #24
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	20000074 	.word	0x20000074

08012d08 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b086      	sub	sp, #24
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012d10:	2182      	movs	r1, #130	; 0x82
 8012d12:	4818      	ldr	r0, [pc, #96]	; (8012d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012d14:	f000 fc85 	bl	8013622 <USBD_GetEpDesc>
 8012d18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012d1a:	2101      	movs	r1, #1
 8012d1c:	4815      	ldr	r0, [pc, #84]	; (8012d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012d1e:	f000 fc80 	bl	8013622 <USBD_GetEpDesc>
 8012d22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012d24:	2181      	movs	r1, #129	; 0x81
 8012d26:	4813      	ldr	r0, [pc, #76]	; (8012d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012d28:	f000 fc7b 	bl	8013622 <USBD_GetEpDesc>
 8012d2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d002      	beq.n	8012d3a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	2210      	movs	r2, #16
 8012d38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d006      	beq.n	8012d4e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	2200      	movs	r2, #0
 8012d44:	711a      	strb	r2, [r3, #4]
 8012d46:	2200      	movs	r2, #0
 8012d48:	f042 0202 	orr.w	r2, r2, #2
 8012d4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d006      	beq.n	8012d62 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	2200      	movs	r2, #0
 8012d58:	711a      	strb	r2, [r3, #4]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	f042 0202 	orr.w	r2, r2, #2
 8012d60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2243      	movs	r2, #67	; 0x43
 8012d66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012d68:	4b02      	ldr	r3, [pc, #8]	; (8012d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3718      	adds	r7, #24
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
 8012d72:	bf00      	nop
 8012d74:	20000074 	.word	0x20000074

08012d78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b086      	sub	sp, #24
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012d80:	2182      	movs	r1, #130	; 0x82
 8012d82:	4818      	ldr	r0, [pc, #96]	; (8012de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012d84:	f000 fc4d 	bl	8013622 <USBD_GetEpDesc>
 8012d88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012d8a:	2101      	movs	r1, #1
 8012d8c:	4815      	ldr	r0, [pc, #84]	; (8012de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012d8e:	f000 fc48 	bl	8013622 <USBD_GetEpDesc>
 8012d92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012d94:	2181      	movs	r1, #129	; 0x81
 8012d96:	4813      	ldr	r0, [pc, #76]	; (8012de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012d98:	f000 fc43 	bl	8013622 <USBD_GetEpDesc>
 8012d9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d002      	beq.n	8012daa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	2210      	movs	r2, #16
 8012da8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d006      	beq.n	8012dbe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	2200      	movs	r2, #0
 8012db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012db8:	711a      	strb	r2, [r3, #4]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d006      	beq.n	8012dd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012dcc:	711a      	strb	r2, [r3, #4]
 8012dce:	2200      	movs	r2, #0
 8012dd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2243      	movs	r2, #67	; 0x43
 8012dd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012dd8:	4b02      	ldr	r3, [pc, #8]	; (8012de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	3718      	adds	r7, #24
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
 8012de2:	bf00      	nop
 8012de4:	20000074 	.word	0x20000074

08012de8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	220a      	movs	r2, #10
 8012df4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012df6:	4b03      	ldr	r3, [pc, #12]	; (8012e04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	370c      	adds	r7, #12
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr
 8012e04:	20000030 	.word	0x20000030

08012e08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012e08:	b480      	push	{r7}
 8012e0a:	b083      	sub	sp, #12
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d101      	bne.n	8012e1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012e18:	2303      	movs	r3, #3
 8012e1a:	e009      	b.n	8012e30 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	33b0      	adds	r3, #176	; 0xb0
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	4413      	add	r3, r2
 8012e2a:	683a      	ldr	r2, [r7, #0]
 8012e2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012e2e:	2300      	movs	r3, #0
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	370c      	adds	r7, #12
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr

08012e3c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b087      	sub	sp, #28
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	32b0      	adds	r2, #176	; 0xb0
 8012e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e56:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d101      	bne.n	8012e62 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012e5e:	2303      	movs	r3, #3
 8012e60:	e008      	b.n	8012e74 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	68ba      	ldr	r2, [r7, #8]
 8012e66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8012e72:	2300      	movs	r3, #0
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	371c      	adds	r7, #28
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7e:	4770      	bx	lr

08012e80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012e80:	b480      	push	{r7}
 8012e82:	b085      	sub	sp, #20
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	32b0      	adds	r2, #176	; 0xb0
 8012e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d101      	bne.n	8012ea4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012ea0:	2303      	movs	r3, #3
 8012ea2:	e004      	b.n	8012eae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	683a      	ldr	r2, [r7, #0]
 8012ea8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8012eac:	2300      	movs	r3, #0
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3714      	adds	r7, #20
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb8:	4770      	bx	lr
	...

08012ebc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	32b0      	adds	r2, #176	; 0xb0
 8012ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ed2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d101      	bne.n	8012ee2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012ede:	2303      	movs	r3, #3
 8012ee0:	e025      	b.n	8012f2e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d11f      	bne.n	8012f2c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	2201      	movs	r2, #1
 8012ef0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8012ef4:	4b10      	ldr	r3, [pc, #64]	; (8012f38 <USBD_CDC_TransmitPacket+0x7c>)
 8012ef6:	781b      	ldrb	r3, [r3, #0]
 8012ef8:	f003 020f 	and.w	r2, r3, #15
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	4613      	mov	r3, r2
 8012f06:	009b      	lsls	r3, r3, #2
 8012f08:	4413      	add	r3, r2
 8012f0a:	009b      	lsls	r3, r3, #2
 8012f0c:	4403      	add	r3, r0
 8012f0e:	3318      	adds	r3, #24
 8012f10:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8012f12:	4b09      	ldr	r3, [pc, #36]	; (8012f38 <USBD_CDC_TransmitPacket+0x7c>)
 8012f14:	7819      	ldrb	r1, [r3, #0]
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f002 fcf0 	bl	8015908 <USBD_LL_Transmit>

    ret = USBD_OK;
 8012f28:	2300      	movs	r3, #0
 8012f2a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3710      	adds	r7, #16
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}
 8012f36:	bf00      	nop
 8012f38:	200000b7 	.word	0x200000b7

08012f3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	32b0      	adds	r2, #176	; 0xb0
 8012f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	32b0      	adds	r2, #176	; 0xb0
 8012f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d101      	bne.n	8012f6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8012f66:	2303      	movs	r3, #3
 8012f68:	e018      	b.n	8012f9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	7c1b      	ldrb	r3, [r3, #16]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d10a      	bne.n	8012f88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012f72:	4b0c      	ldr	r3, [pc, #48]	; (8012fa4 <USBD_CDC_ReceivePacket+0x68>)
 8012f74:	7819      	ldrb	r1, [r3, #0]
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f002 fcf9 	bl	8015978 <USBD_LL_PrepareReceive>
 8012f86:	e008      	b.n	8012f9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012f88:	4b06      	ldr	r3, [pc, #24]	; (8012fa4 <USBD_CDC_ReceivePacket+0x68>)
 8012f8a:	7819      	ldrb	r1, [r3, #0]
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012f92:	2340      	movs	r3, #64	; 0x40
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f002 fcef 	bl	8015978 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012f9a:	2300      	movs	r3, #0
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3710      	adds	r7, #16
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	200000b8 	.word	0x200000b8

08012fa8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b086      	sub	sp, #24
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	60f8      	str	r0, [r7, #12]
 8012fb0:	60b9      	str	r1, [r7, #8]
 8012fb2:	4613      	mov	r3, r2
 8012fb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d101      	bne.n	8012fc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012fbc:	2303      	movs	r3, #3
 8012fbe:	e01f      	b.n	8013000 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d003      	beq.n	8012fe6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	68ba      	ldr	r2, [r7, #8]
 8012fe2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	2201      	movs	r2, #1
 8012fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	79fa      	ldrb	r2, [r7, #7]
 8012ff2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f002 faaf 	bl	8015558 <USBD_LL_Init>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8013000:	4618      	mov	r0, r3
 8013002:	3718      	adds	r7, #24
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}

08013008 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013012:	2300      	movs	r3, #0
 8013014:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d101      	bne.n	8013020 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801301c:	2303      	movs	r3, #3
 801301e:	e025      	b.n	801306c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	683a      	ldr	r2, [r7, #0]
 8013024:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	32ae      	adds	r2, #174	; 0xae
 8013032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013038:	2b00      	cmp	r3, #0
 801303a:	d00f      	beq.n	801305c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	32ae      	adds	r2, #174	; 0xae
 8013046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801304c:	f107 020e 	add.w	r2, r7, #14
 8013050:	4610      	mov	r0, r2
 8013052:	4798      	blx	r3
 8013054:	4602      	mov	r2, r0
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013062:	1c5a      	adds	r2, r3, #1
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801306a:	2300      	movs	r3, #0
}
 801306c:	4618      	mov	r0, r3
 801306e:	3710      	adds	r7, #16
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}

08013074 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f002 facd 	bl	801561c <USBD_LL_Start>
 8013082:	4603      	mov	r3, r0
}
 8013084:	4618      	mov	r0, r3
 8013086:	3708      	adds	r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801308c:	b480      	push	{r7}
 801308e:	b083      	sub	sp, #12
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013094:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013096:	4618      	mov	r0, r3
 8013098:	370c      	adds	r7, #12
 801309a:	46bd      	mov	sp, r7
 801309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a0:	4770      	bx	lr

080130a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80130a2:	b580      	push	{r7, lr}
 80130a4:	b084      	sub	sp, #16
 80130a6:	af00      	add	r7, sp, #0
 80130a8:	6078      	str	r0, [r7, #4]
 80130aa:	460b      	mov	r3, r1
 80130ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d009      	beq.n	80130d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	78fa      	ldrb	r2, [r7, #3]
 80130c6:	4611      	mov	r1, r2
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	4798      	blx	r3
 80130cc:	4603      	mov	r3, r0
 80130ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80130d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3710      	adds	r7, #16
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}

080130da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80130da:	b580      	push	{r7, lr}
 80130dc:	b084      	sub	sp, #16
 80130de:	af00      	add	r7, sp, #0
 80130e0:	6078      	str	r0, [r7, #4]
 80130e2:	460b      	mov	r3, r1
 80130e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80130e6:	2300      	movs	r3, #0
 80130e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130f0:	685b      	ldr	r3, [r3, #4]
 80130f2:	78fa      	ldrb	r2, [r7, #3]
 80130f4:	4611      	mov	r1, r2
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	4798      	blx	r3
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013100:	2303      	movs	r3, #3
 8013102:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013104:	7bfb      	ldrb	r3, [r7, #15]
}
 8013106:	4618      	mov	r0, r3
 8013108:	3710      	adds	r7, #16
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}

0801310e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801310e:	b580      	push	{r7, lr}
 8013110:	b084      	sub	sp, #16
 8013112:	af00      	add	r7, sp, #0
 8013114:	6078      	str	r0, [r7, #4]
 8013116:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801311e:	6839      	ldr	r1, [r7, #0]
 8013120:	4618      	mov	r0, r3
 8013122:	f001 f8a6 	bl	8014272 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2201      	movs	r2, #1
 801312a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013134:	461a      	mov	r2, r3
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013142:	f003 031f 	and.w	r3, r3, #31
 8013146:	2b02      	cmp	r3, #2
 8013148:	d01a      	beq.n	8013180 <USBD_LL_SetupStage+0x72>
 801314a:	2b02      	cmp	r3, #2
 801314c:	d822      	bhi.n	8013194 <USBD_LL_SetupStage+0x86>
 801314e:	2b00      	cmp	r3, #0
 8013150:	d002      	beq.n	8013158 <USBD_LL_SetupStage+0x4a>
 8013152:	2b01      	cmp	r3, #1
 8013154:	d00a      	beq.n	801316c <USBD_LL_SetupStage+0x5e>
 8013156:	e01d      	b.n	8013194 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801315e:	4619      	mov	r1, r3
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f000 fad3 	bl	801370c <USBD_StdDevReq>
 8013166:	4603      	mov	r3, r0
 8013168:	73fb      	strb	r3, [r7, #15]
      break;
 801316a:	e020      	b.n	80131ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013172:	4619      	mov	r1, r3
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f000 fb3b 	bl	80137f0 <USBD_StdItfReq>
 801317a:	4603      	mov	r3, r0
 801317c:	73fb      	strb	r3, [r7, #15]
      break;
 801317e:	e016      	b.n	80131ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013186:	4619      	mov	r1, r3
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f000 fb9d 	bl	80138c8 <USBD_StdEPReq>
 801318e:	4603      	mov	r3, r0
 8013190:	73fb      	strb	r3, [r7, #15]
      break;
 8013192:	e00c      	b.n	80131ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801319a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	4619      	mov	r1, r3
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f002 fae0 	bl	8015768 <USBD_LL_StallEP>
 80131a8:	4603      	mov	r3, r0
 80131aa:	73fb      	strb	r3, [r7, #15]
      break;
 80131ac:	bf00      	nop
  }

  return ret;
 80131ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3710      	adds	r7, #16
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b086      	sub	sp, #24
 80131bc:	af00      	add	r7, sp, #0
 80131be:	60f8      	str	r0, [r7, #12]
 80131c0:	460b      	mov	r3, r1
 80131c2:	607a      	str	r2, [r7, #4]
 80131c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80131c6:	2300      	movs	r3, #0
 80131c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80131ca:	7afb      	ldrb	r3, [r7, #11]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d16e      	bne.n	80132ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80131d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80131de:	2b03      	cmp	r3, #3
 80131e0:	f040 8098 	bne.w	8013314 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	689a      	ldr	r2, [r3, #8]
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	68db      	ldr	r3, [r3, #12]
 80131ec:	429a      	cmp	r2, r3
 80131ee:	d913      	bls.n	8013218 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	689a      	ldr	r2, [r3, #8]
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	68db      	ldr	r3, [r3, #12]
 80131f8:	1ad2      	subs	r2, r2, r3
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80131fe:	693b      	ldr	r3, [r7, #16]
 8013200:	68da      	ldr	r2, [r3, #12]
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	689b      	ldr	r3, [r3, #8]
 8013206:	4293      	cmp	r3, r2
 8013208:	bf28      	it	cs
 801320a:	4613      	movcs	r3, r2
 801320c:	461a      	mov	r2, r3
 801320e:	6879      	ldr	r1, [r7, #4]
 8013210:	68f8      	ldr	r0, [r7, #12]
 8013212:	f001 f922 	bl	801445a <USBD_CtlContinueRx>
 8013216:	e07d      	b.n	8013314 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801321e:	f003 031f 	and.w	r3, r3, #31
 8013222:	2b02      	cmp	r3, #2
 8013224:	d014      	beq.n	8013250 <USBD_LL_DataOutStage+0x98>
 8013226:	2b02      	cmp	r3, #2
 8013228:	d81d      	bhi.n	8013266 <USBD_LL_DataOutStage+0xae>
 801322a:	2b00      	cmp	r3, #0
 801322c:	d002      	beq.n	8013234 <USBD_LL_DataOutStage+0x7c>
 801322e:	2b01      	cmp	r3, #1
 8013230:	d003      	beq.n	801323a <USBD_LL_DataOutStage+0x82>
 8013232:	e018      	b.n	8013266 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013234:	2300      	movs	r3, #0
 8013236:	75bb      	strb	r3, [r7, #22]
            break;
 8013238:	e018      	b.n	801326c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013240:	b2db      	uxtb	r3, r3
 8013242:	4619      	mov	r1, r3
 8013244:	68f8      	ldr	r0, [r7, #12]
 8013246:	f000 f9d2 	bl	80135ee <USBD_CoreFindIF>
 801324a:	4603      	mov	r3, r0
 801324c:	75bb      	strb	r3, [r7, #22]
            break;
 801324e:	e00d      	b.n	801326c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013256:	b2db      	uxtb	r3, r3
 8013258:	4619      	mov	r1, r3
 801325a:	68f8      	ldr	r0, [r7, #12]
 801325c:	f000 f9d4 	bl	8013608 <USBD_CoreFindEP>
 8013260:	4603      	mov	r3, r0
 8013262:	75bb      	strb	r3, [r7, #22]
            break;
 8013264:	e002      	b.n	801326c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013266:	2300      	movs	r3, #0
 8013268:	75bb      	strb	r3, [r7, #22]
            break;
 801326a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801326c:	7dbb      	ldrb	r3, [r7, #22]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d119      	bne.n	80132a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013278:	b2db      	uxtb	r3, r3
 801327a:	2b03      	cmp	r3, #3
 801327c:	d113      	bne.n	80132a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801327e:	7dba      	ldrb	r2, [r7, #22]
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	32ae      	adds	r2, #174	; 0xae
 8013284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013288:	691b      	ldr	r3, [r3, #16]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d00b      	beq.n	80132a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801328e:	7dba      	ldrb	r2, [r7, #22]
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013296:	7dba      	ldrb	r2, [r7, #22]
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	32ae      	adds	r2, #174	; 0xae
 801329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132a0:	691b      	ldr	r3, [r3, #16]
 80132a2:	68f8      	ldr	r0, [r7, #12]
 80132a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80132a6:	68f8      	ldr	r0, [r7, #12]
 80132a8:	f001 f8e8 	bl	801447c <USBD_CtlSendStatus>
 80132ac:	e032      	b.n	8013314 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80132ae:	7afb      	ldrb	r3, [r7, #11]
 80132b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132b4:	b2db      	uxtb	r3, r3
 80132b6:	4619      	mov	r1, r3
 80132b8:	68f8      	ldr	r0, [r7, #12]
 80132ba:	f000 f9a5 	bl	8013608 <USBD_CoreFindEP>
 80132be:	4603      	mov	r3, r0
 80132c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80132c2:	7dbb      	ldrb	r3, [r7, #22]
 80132c4:	2bff      	cmp	r3, #255	; 0xff
 80132c6:	d025      	beq.n	8013314 <USBD_LL_DataOutStage+0x15c>
 80132c8:	7dbb      	ldrb	r3, [r7, #22]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d122      	bne.n	8013314 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132d4:	b2db      	uxtb	r3, r3
 80132d6:	2b03      	cmp	r3, #3
 80132d8:	d117      	bne.n	801330a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80132da:	7dba      	ldrb	r2, [r7, #22]
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	32ae      	adds	r2, #174	; 0xae
 80132e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132e4:	699b      	ldr	r3, [r3, #24]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00f      	beq.n	801330a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80132ea:	7dba      	ldrb	r2, [r7, #22]
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80132f2:	7dba      	ldrb	r2, [r7, #22]
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	32ae      	adds	r2, #174	; 0xae
 80132f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132fc:	699b      	ldr	r3, [r3, #24]
 80132fe:	7afa      	ldrb	r2, [r7, #11]
 8013300:	4611      	mov	r1, r2
 8013302:	68f8      	ldr	r0, [r7, #12]
 8013304:	4798      	blx	r3
 8013306:	4603      	mov	r3, r0
 8013308:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801330a:	7dfb      	ldrb	r3, [r7, #23]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d001      	beq.n	8013314 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013310:	7dfb      	ldrb	r3, [r7, #23]
 8013312:	e000      	b.n	8013316 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013314:	2300      	movs	r3, #0
}
 8013316:	4618      	mov	r0, r3
 8013318:	3718      	adds	r7, #24
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}

0801331e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801331e:	b580      	push	{r7, lr}
 8013320:	b086      	sub	sp, #24
 8013322:	af00      	add	r7, sp, #0
 8013324:	60f8      	str	r0, [r7, #12]
 8013326:	460b      	mov	r3, r1
 8013328:	607a      	str	r2, [r7, #4]
 801332a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801332c:	7afb      	ldrb	r3, [r7, #11]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d16f      	bne.n	8013412 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	3314      	adds	r3, #20
 8013336:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801333e:	2b02      	cmp	r3, #2
 8013340:	d15a      	bne.n	80133f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	689a      	ldr	r2, [r3, #8]
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	429a      	cmp	r2, r3
 801334c:	d914      	bls.n	8013378 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	689a      	ldr	r2, [r3, #8]
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	68db      	ldr	r3, [r3, #12]
 8013356:	1ad2      	subs	r2, r2, r3
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	689b      	ldr	r3, [r3, #8]
 8013360:	461a      	mov	r2, r3
 8013362:	6879      	ldr	r1, [r7, #4]
 8013364:	68f8      	ldr	r0, [r7, #12]
 8013366:	f001 f84a 	bl	80143fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801336a:	2300      	movs	r3, #0
 801336c:	2200      	movs	r2, #0
 801336e:	2100      	movs	r1, #0
 8013370:	68f8      	ldr	r0, [r7, #12]
 8013372:	f002 fb01 	bl	8015978 <USBD_LL_PrepareReceive>
 8013376:	e03f      	b.n	80133f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	68da      	ldr	r2, [r3, #12]
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	689b      	ldr	r3, [r3, #8]
 8013380:	429a      	cmp	r2, r3
 8013382:	d11c      	bne.n	80133be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	685a      	ldr	r2, [r3, #4]
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801338c:	429a      	cmp	r2, r3
 801338e:	d316      	bcc.n	80133be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	685a      	ldr	r2, [r3, #4]
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801339a:	429a      	cmp	r2, r3
 801339c:	d20f      	bcs.n	80133be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801339e:	2200      	movs	r2, #0
 80133a0:	2100      	movs	r1, #0
 80133a2:	68f8      	ldr	r0, [r7, #12]
 80133a4:	f001 f82b 	bl	80143fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2200      	movs	r2, #0
 80133ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80133b0:	2300      	movs	r3, #0
 80133b2:	2200      	movs	r2, #0
 80133b4:	2100      	movs	r1, #0
 80133b6:	68f8      	ldr	r0, [r7, #12]
 80133b8:	f002 fade 	bl	8015978 <USBD_LL_PrepareReceive>
 80133bc:	e01c      	b.n	80133f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	2b03      	cmp	r3, #3
 80133c8:	d10f      	bne.n	80133ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133d0:	68db      	ldr	r3, [r3, #12]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d009      	beq.n	80133ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2200      	movs	r2, #0
 80133da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	68f8      	ldr	r0, [r7, #12]
 80133e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80133ea:	2180      	movs	r1, #128	; 0x80
 80133ec:	68f8      	ldr	r0, [r7, #12]
 80133ee:	f002 f9bb 	bl	8015768 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80133f2:	68f8      	ldr	r0, [r7, #12]
 80133f4:	f001 f855 	bl	80144a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d03a      	beq.n	8013478 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013402:	68f8      	ldr	r0, [r7, #12]
 8013404:	f7ff fe42 	bl	801308c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2200      	movs	r2, #0
 801340c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013410:	e032      	b.n	8013478 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013412:	7afb      	ldrb	r3, [r7, #11]
 8013414:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013418:	b2db      	uxtb	r3, r3
 801341a:	4619      	mov	r1, r3
 801341c:	68f8      	ldr	r0, [r7, #12]
 801341e:	f000 f8f3 	bl	8013608 <USBD_CoreFindEP>
 8013422:	4603      	mov	r3, r0
 8013424:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013426:	7dfb      	ldrb	r3, [r7, #23]
 8013428:	2bff      	cmp	r3, #255	; 0xff
 801342a:	d025      	beq.n	8013478 <USBD_LL_DataInStage+0x15a>
 801342c:	7dfb      	ldrb	r3, [r7, #23]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d122      	bne.n	8013478 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013438:	b2db      	uxtb	r3, r3
 801343a:	2b03      	cmp	r3, #3
 801343c:	d11c      	bne.n	8013478 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801343e:	7dfa      	ldrb	r2, [r7, #23]
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	32ae      	adds	r2, #174	; 0xae
 8013444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013448:	695b      	ldr	r3, [r3, #20]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d014      	beq.n	8013478 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801344e:	7dfa      	ldrb	r2, [r7, #23]
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013456:	7dfa      	ldrb	r2, [r7, #23]
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	32ae      	adds	r2, #174	; 0xae
 801345c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013460:	695b      	ldr	r3, [r3, #20]
 8013462:	7afa      	ldrb	r2, [r7, #11]
 8013464:	4611      	mov	r1, r2
 8013466:	68f8      	ldr	r0, [r7, #12]
 8013468:	4798      	blx	r3
 801346a:	4603      	mov	r3, r0
 801346c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801346e:	7dbb      	ldrb	r3, [r7, #22]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d001      	beq.n	8013478 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013474:	7dbb      	ldrb	r3, [r7, #22]
 8013476:	e000      	b.n	801347a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013478:	2300      	movs	r3, #0
}
 801347a:	4618      	mov	r0, r3
 801347c:	3718      	adds	r7, #24
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013482:	b580      	push	{r7, lr}
 8013484:	b084      	sub	sp, #16
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801348a:	2300      	movs	r3, #0
 801348c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2201      	movs	r2, #1
 8013492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	2200      	movs	r2, #0
 801349a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2200      	movs	r2, #0
 80134a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2200      	movs	r2, #0
 80134a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2200      	movs	r2, #0
 80134b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d014      	beq.n	80134e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134c4:	685b      	ldr	r3, [r3, #4]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d00e      	beq.n	80134e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	687a      	ldr	r2, [r7, #4]
 80134d4:	6852      	ldr	r2, [r2, #4]
 80134d6:	b2d2      	uxtb	r2, r2
 80134d8:	4611      	mov	r1, r2
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	4798      	blx	r3
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d001      	beq.n	80134e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80134e4:	2303      	movs	r3, #3
 80134e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80134e8:	2340      	movs	r3, #64	; 0x40
 80134ea:	2200      	movs	r2, #0
 80134ec:	2100      	movs	r1, #0
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f002 f8c6 	bl	8015680 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2201      	movs	r2, #1
 80134f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2240      	movs	r2, #64	; 0x40
 8013500:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013504:	2340      	movs	r3, #64	; 0x40
 8013506:	2200      	movs	r2, #0
 8013508:	2180      	movs	r1, #128	; 0x80
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f002 f8b8 	bl	8015680 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2201      	movs	r2, #1
 8013514:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2240      	movs	r2, #64	; 0x40
 801351a:	621a      	str	r2, [r3, #32]

  return ret;
 801351c:	7bfb      	ldrb	r3, [r7, #15]
}
 801351e:	4618      	mov	r0, r3
 8013520:	3710      	adds	r7, #16
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}

08013526 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013526:	b480      	push	{r7}
 8013528:	b083      	sub	sp, #12
 801352a:	af00      	add	r7, sp, #0
 801352c:	6078      	str	r0, [r7, #4]
 801352e:	460b      	mov	r3, r1
 8013530:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	78fa      	ldrb	r2, [r7, #3]
 8013536:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013538:	2300      	movs	r3, #0
}
 801353a:	4618      	mov	r0, r3
 801353c:	370c      	adds	r7, #12
 801353e:	46bd      	mov	sp, r7
 8013540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013544:	4770      	bx	lr

08013546 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013546:	b480      	push	{r7}
 8013548:	b083      	sub	sp, #12
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013554:	b2db      	uxtb	r3, r3
 8013556:	2b04      	cmp	r3, #4
 8013558:	d006      	beq.n	8013568 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013560:	b2da      	uxtb	r2, r3
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2204      	movs	r2, #4
 801356c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013570:	2300      	movs	r3, #0
}
 8013572:	4618      	mov	r0, r3
 8013574:	370c      	adds	r7, #12
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr

0801357e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801357e:	b480      	push	{r7}
 8013580:	b083      	sub	sp, #12
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801358c:	b2db      	uxtb	r3, r3
 801358e:	2b04      	cmp	r3, #4
 8013590:	d106      	bne.n	80135a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013598:	b2da      	uxtb	r2, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80135a0:	2300      	movs	r3, #0
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	370c      	adds	r7, #12
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr

080135ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80135ae:	b580      	push	{r7, lr}
 80135b0:	b082      	sub	sp, #8
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135bc:	b2db      	uxtb	r3, r3
 80135be:	2b03      	cmp	r3, #3
 80135c0:	d110      	bne.n	80135e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d00b      	beq.n	80135e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135d2:	69db      	ldr	r3, [r3, #28]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d005      	beq.n	80135e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135de:	69db      	ldr	r3, [r3, #28]
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80135e4:	2300      	movs	r3, #0
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3708      	adds	r7, #8
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}

080135ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80135ee:	b480      	push	{r7}
 80135f0:	b083      	sub	sp, #12
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	6078      	str	r0, [r7, #4]
 80135f6:	460b      	mov	r3, r1
 80135f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80135fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	370c      	adds	r7, #12
 8013600:	46bd      	mov	sp, r7
 8013602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013606:	4770      	bx	lr

08013608 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
 8013610:	460b      	mov	r3, r1
 8013612:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013614:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013616:	4618      	mov	r0, r3
 8013618:	370c      	adds	r7, #12
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr

08013622 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013622:	b580      	push	{r7, lr}
 8013624:	b086      	sub	sp, #24
 8013626:	af00      	add	r7, sp, #0
 8013628:	6078      	str	r0, [r7, #4]
 801362a:	460b      	mov	r3, r1
 801362c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013636:	2300      	movs	r3, #0
 8013638:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	885b      	ldrh	r3, [r3, #2]
 801363e:	b29a      	uxth	r2, r3
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	b29b      	uxth	r3, r3
 8013646:	429a      	cmp	r2, r3
 8013648:	d920      	bls.n	801368c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	b29b      	uxth	r3, r3
 8013650:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013652:	e013      	b.n	801367c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013654:	f107 030a 	add.w	r3, r7, #10
 8013658:	4619      	mov	r1, r3
 801365a:	6978      	ldr	r0, [r7, #20]
 801365c:	f000 f81b 	bl	8013696 <USBD_GetNextDesc>
 8013660:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	785b      	ldrb	r3, [r3, #1]
 8013666:	2b05      	cmp	r3, #5
 8013668:	d108      	bne.n	801367c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	789b      	ldrb	r3, [r3, #2]
 8013672:	78fa      	ldrb	r2, [r7, #3]
 8013674:	429a      	cmp	r2, r3
 8013676:	d008      	beq.n	801368a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013678:	2300      	movs	r3, #0
 801367a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	885b      	ldrh	r3, [r3, #2]
 8013680:	b29a      	uxth	r2, r3
 8013682:	897b      	ldrh	r3, [r7, #10]
 8013684:	429a      	cmp	r2, r3
 8013686:	d8e5      	bhi.n	8013654 <USBD_GetEpDesc+0x32>
 8013688:	e000      	b.n	801368c <USBD_GetEpDesc+0x6a>
          break;
 801368a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801368c:	693b      	ldr	r3, [r7, #16]
}
 801368e:	4618      	mov	r0, r3
 8013690:	3718      	adds	r7, #24
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}

08013696 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013696:	b480      	push	{r7}
 8013698:	b085      	sub	sp, #20
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
 801369e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	881a      	ldrh	r2, [r3, #0]
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	4413      	add	r3, r2
 80136b0:	b29a      	uxth	r2, r3
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	461a      	mov	r2, r3
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	4413      	add	r3, r2
 80136c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80136c2:	68fb      	ldr	r3, [r7, #12]
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3714      	adds	r7, #20
 80136c8:	46bd      	mov	sp, r7
 80136ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ce:	4770      	bx	lr

080136d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80136d0:	b480      	push	{r7}
 80136d2:	b087      	sub	sp, #28
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	3301      	adds	r3, #1
 80136e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80136ee:	8a3b      	ldrh	r3, [r7, #16]
 80136f0:	021b      	lsls	r3, r3, #8
 80136f2:	b21a      	sxth	r2, r3
 80136f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80136f8:	4313      	orrs	r3, r2
 80136fa:	b21b      	sxth	r3, r3
 80136fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80136fe:	89fb      	ldrh	r3, [r7, #14]
}
 8013700:	4618      	mov	r0, r3
 8013702:	371c      	adds	r7, #28
 8013704:	46bd      	mov	sp, r7
 8013706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370a:	4770      	bx	lr

0801370c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b084      	sub	sp, #16
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013716:	2300      	movs	r3, #0
 8013718:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801371a:	683b      	ldr	r3, [r7, #0]
 801371c:	781b      	ldrb	r3, [r3, #0]
 801371e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013722:	2b40      	cmp	r3, #64	; 0x40
 8013724:	d005      	beq.n	8013732 <USBD_StdDevReq+0x26>
 8013726:	2b40      	cmp	r3, #64	; 0x40
 8013728:	d857      	bhi.n	80137da <USBD_StdDevReq+0xce>
 801372a:	2b00      	cmp	r3, #0
 801372c:	d00f      	beq.n	801374e <USBD_StdDevReq+0x42>
 801372e:	2b20      	cmp	r3, #32
 8013730:	d153      	bne.n	80137da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	32ae      	adds	r2, #174	; 0xae
 801373c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013740:	689b      	ldr	r3, [r3, #8]
 8013742:	6839      	ldr	r1, [r7, #0]
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	4798      	blx	r3
 8013748:	4603      	mov	r3, r0
 801374a:	73fb      	strb	r3, [r7, #15]
      break;
 801374c:	e04a      	b.n	80137e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	785b      	ldrb	r3, [r3, #1]
 8013752:	2b09      	cmp	r3, #9
 8013754:	d83b      	bhi.n	80137ce <USBD_StdDevReq+0xc2>
 8013756:	a201      	add	r2, pc, #4	; (adr r2, 801375c <USBD_StdDevReq+0x50>)
 8013758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801375c:	080137b1 	.word	0x080137b1
 8013760:	080137c5 	.word	0x080137c5
 8013764:	080137cf 	.word	0x080137cf
 8013768:	080137bb 	.word	0x080137bb
 801376c:	080137cf 	.word	0x080137cf
 8013770:	0801378f 	.word	0x0801378f
 8013774:	08013785 	.word	0x08013785
 8013778:	080137cf 	.word	0x080137cf
 801377c:	080137a7 	.word	0x080137a7
 8013780:	08013799 	.word	0x08013799
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013784:	6839      	ldr	r1, [r7, #0]
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f000 fa3c 	bl	8013c04 <USBD_GetDescriptor>
          break;
 801378c:	e024      	b.n	80137d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801378e:	6839      	ldr	r1, [r7, #0]
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f000 fbcb 	bl	8013f2c <USBD_SetAddress>
          break;
 8013796:	e01f      	b.n	80137d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013798:	6839      	ldr	r1, [r7, #0]
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f000 fc0a 	bl	8013fb4 <USBD_SetConfig>
 80137a0:	4603      	mov	r3, r0
 80137a2:	73fb      	strb	r3, [r7, #15]
          break;
 80137a4:	e018      	b.n	80137d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80137a6:	6839      	ldr	r1, [r7, #0]
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f000 fcad 	bl	8014108 <USBD_GetConfig>
          break;
 80137ae:	e013      	b.n	80137d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80137b0:	6839      	ldr	r1, [r7, #0]
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	f000 fcde 	bl	8014174 <USBD_GetStatus>
          break;
 80137b8:	e00e      	b.n	80137d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80137ba:	6839      	ldr	r1, [r7, #0]
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f000 fd0d 	bl	80141dc <USBD_SetFeature>
          break;
 80137c2:	e009      	b.n	80137d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80137c4:	6839      	ldr	r1, [r7, #0]
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f000 fd31 	bl	801422e <USBD_ClrFeature>
          break;
 80137cc:	e004      	b.n	80137d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80137ce:	6839      	ldr	r1, [r7, #0]
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f000 fd88 	bl	80142e6 <USBD_CtlError>
          break;
 80137d6:	bf00      	nop
      }
      break;
 80137d8:	e004      	b.n	80137e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80137da:	6839      	ldr	r1, [r7, #0]
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f000 fd82 	bl	80142e6 <USBD_CtlError>
      break;
 80137e2:	bf00      	nop
  }

  return ret;
 80137e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3710      	adds	r7, #16
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop

080137f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b084      	sub	sp, #16
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80137fa:	2300      	movs	r3, #0
 80137fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013806:	2b40      	cmp	r3, #64	; 0x40
 8013808:	d005      	beq.n	8013816 <USBD_StdItfReq+0x26>
 801380a:	2b40      	cmp	r3, #64	; 0x40
 801380c:	d852      	bhi.n	80138b4 <USBD_StdItfReq+0xc4>
 801380e:	2b00      	cmp	r3, #0
 8013810:	d001      	beq.n	8013816 <USBD_StdItfReq+0x26>
 8013812:	2b20      	cmp	r3, #32
 8013814:	d14e      	bne.n	80138b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801381c:	b2db      	uxtb	r3, r3
 801381e:	3b01      	subs	r3, #1
 8013820:	2b02      	cmp	r3, #2
 8013822:	d840      	bhi.n	80138a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	889b      	ldrh	r3, [r3, #4]
 8013828:	b2db      	uxtb	r3, r3
 801382a:	2b01      	cmp	r3, #1
 801382c:	d836      	bhi.n	801389c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	889b      	ldrh	r3, [r3, #4]
 8013832:	b2db      	uxtb	r3, r3
 8013834:	4619      	mov	r1, r3
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f7ff fed9 	bl	80135ee <USBD_CoreFindIF>
 801383c:	4603      	mov	r3, r0
 801383e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013840:	7bbb      	ldrb	r3, [r7, #14]
 8013842:	2bff      	cmp	r3, #255	; 0xff
 8013844:	d01d      	beq.n	8013882 <USBD_StdItfReq+0x92>
 8013846:	7bbb      	ldrb	r3, [r7, #14]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d11a      	bne.n	8013882 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801384c:	7bba      	ldrb	r2, [r7, #14]
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	32ae      	adds	r2, #174	; 0xae
 8013852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d00f      	beq.n	801387c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801385c:	7bba      	ldrb	r2, [r7, #14]
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013864:	7bba      	ldrb	r2, [r7, #14]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	32ae      	adds	r2, #174	; 0xae
 801386a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801386e:	689b      	ldr	r3, [r3, #8]
 8013870:	6839      	ldr	r1, [r7, #0]
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	4798      	blx	r3
 8013876:	4603      	mov	r3, r0
 8013878:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801387a:	e004      	b.n	8013886 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801387c:	2303      	movs	r3, #3
 801387e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013880:	e001      	b.n	8013886 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013882:	2303      	movs	r3, #3
 8013884:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	88db      	ldrh	r3, [r3, #6]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d110      	bne.n	80138b0 <USBD_StdItfReq+0xc0>
 801388e:	7bfb      	ldrb	r3, [r7, #15]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d10d      	bne.n	80138b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f000 fdf1 	bl	801447c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801389a:	e009      	b.n	80138b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801389c:	6839      	ldr	r1, [r7, #0]
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f000 fd21 	bl	80142e6 <USBD_CtlError>
          break;
 80138a4:	e004      	b.n	80138b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80138a6:	6839      	ldr	r1, [r7, #0]
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f000 fd1c 	bl	80142e6 <USBD_CtlError>
          break;
 80138ae:	e000      	b.n	80138b2 <USBD_StdItfReq+0xc2>
          break;
 80138b0:	bf00      	nop
      }
      break;
 80138b2:	e004      	b.n	80138be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80138b4:	6839      	ldr	r1, [r7, #0]
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f000 fd15 	bl	80142e6 <USBD_CtlError>
      break;
 80138bc:	bf00      	nop
  }

  return ret;
 80138be:	7bfb      	ldrb	r3, [r7, #15]
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3710      	adds	r7, #16
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}

080138c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80138d2:	2300      	movs	r3, #0
 80138d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	889b      	ldrh	r3, [r3, #4]
 80138da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80138e4:	2b40      	cmp	r3, #64	; 0x40
 80138e6:	d007      	beq.n	80138f8 <USBD_StdEPReq+0x30>
 80138e8:	2b40      	cmp	r3, #64	; 0x40
 80138ea:	f200 817f 	bhi.w	8013bec <USBD_StdEPReq+0x324>
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d02a      	beq.n	8013948 <USBD_StdEPReq+0x80>
 80138f2:	2b20      	cmp	r3, #32
 80138f4:	f040 817a 	bne.w	8013bec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80138f8:	7bbb      	ldrb	r3, [r7, #14]
 80138fa:	4619      	mov	r1, r3
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f7ff fe83 	bl	8013608 <USBD_CoreFindEP>
 8013902:	4603      	mov	r3, r0
 8013904:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013906:	7b7b      	ldrb	r3, [r7, #13]
 8013908:	2bff      	cmp	r3, #255	; 0xff
 801390a:	f000 8174 	beq.w	8013bf6 <USBD_StdEPReq+0x32e>
 801390e:	7b7b      	ldrb	r3, [r7, #13]
 8013910:	2b00      	cmp	r3, #0
 8013912:	f040 8170 	bne.w	8013bf6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013916:	7b7a      	ldrb	r2, [r7, #13]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801391e:	7b7a      	ldrb	r2, [r7, #13]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	32ae      	adds	r2, #174	; 0xae
 8013924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013928:	689b      	ldr	r3, [r3, #8]
 801392a:	2b00      	cmp	r3, #0
 801392c:	f000 8163 	beq.w	8013bf6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013930:	7b7a      	ldrb	r2, [r7, #13]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	32ae      	adds	r2, #174	; 0xae
 8013936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801393a:	689b      	ldr	r3, [r3, #8]
 801393c:	6839      	ldr	r1, [r7, #0]
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	4798      	blx	r3
 8013942:	4603      	mov	r3, r0
 8013944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013946:	e156      	b.n	8013bf6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013948:	683b      	ldr	r3, [r7, #0]
 801394a:	785b      	ldrb	r3, [r3, #1]
 801394c:	2b03      	cmp	r3, #3
 801394e:	d008      	beq.n	8013962 <USBD_StdEPReq+0x9a>
 8013950:	2b03      	cmp	r3, #3
 8013952:	f300 8145 	bgt.w	8013be0 <USBD_StdEPReq+0x318>
 8013956:	2b00      	cmp	r3, #0
 8013958:	f000 809b 	beq.w	8013a92 <USBD_StdEPReq+0x1ca>
 801395c:	2b01      	cmp	r3, #1
 801395e:	d03c      	beq.n	80139da <USBD_StdEPReq+0x112>
 8013960:	e13e      	b.n	8013be0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013968:	b2db      	uxtb	r3, r3
 801396a:	2b02      	cmp	r3, #2
 801396c:	d002      	beq.n	8013974 <USBD_StdEPReq+0xac>
 801396e:	2b03      	cmp	r3, #3
 8013970:	d016      	beq.n	80139a0 <USBD_StdEPReq+0xd8>
 8013972:	e02c      	b.n	80139ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013974:	7bbb      	ldrb	r3, [r7, #14]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d00d      	beq.n	8013996 <USBD_StdEPReq+0xce>
 801397a:	7bbb      	ldrb	r3, [r7, #14]
 801397c:	2b80      	cmp	r3, #128	; 0x80
 801397e:	d00a      	beq.n	8013996 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013980:	7bbb      	ldrb	r3, [r7, #14]
 8013982:	4619      	mov	r1, r3
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f001 feef 	bl	8015768 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801398a:	2180      	movs	r1, #128	; 0x80
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f001 feeb 	bl	8015768 <USBD_LL_StallEP>
 8013992:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013994:	e020      	b.n	80139d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013996:	6839      	ldr	r1, [r7, #0]
 8013998:	6878      	ldr	r0, [r7, #4]
 801399a:	f000 fca4 	bl	80142e6 <USBD_CtlError>
              break;
 801399e:	e01b      	b.n	80139d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	885b      	ldrh	r3, [r3, #2]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d10e      	bne.n	80139c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80139a8:	7bbb      	ldrb	r3, [r7, #14]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d00b      	beq.n	80139c6 <USBD_StdEPReq+0xfe>
 80139ae:	7bbb      	ldrb	r3, [r7, #14]
 80139b0:	2b80      	cmp	r3, #128	; 0x80
 80139b2:	d008      	beq.n	80139c6 <USBD_StdEPReq+0xfe>
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	88db      	ldrh	r3, [r3, #6]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d104      	bne.n	80139c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80139bc:	7bbb      	ldrb	r3, [r7, #14]
 80139be:	4619      	mov	r1, r3
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f001 fed1 	bl	8015768 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f000 fd58 	bl	801447c <USBD_CtlSendStatus>

              break;
 80139cc:	e004      	b.n	80139d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80139ce:	6839      	ldr	r1, [r7, #0]
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f000 fc88 	bl	80142e6 <USBD_CtlError>
              break;
 80139d6:	bf00      	nop
          }
          break;
 80139d8:	e107      	b.n	8013bea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139e0:	b2db      	uxtb	r3, r3
 80139e2:	2b02      	cmp	r3, #2
 80139e4:	d002      	beq.n	80139ec <USBD_StdEPReq+0x124>
 80139e6:	2b03      	cmp	r3, #3
 80139e8:	d016      	beq.n	8013a18 <USBD_StdEPReq+0x150>
 80139ea:	e04b      	b.n	8013a84 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80139ec:	7bbb      	ldrb	r3, [r7, #14]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d00d      	beq.n	8013a0e <USBD_StdEPReq+0x146>
 80139f2:	7bbb      	ldrb	r3, [r7, #14]
 80139f4:	2b80      	cmp	r3, #128	; 0x80
 80139f6:	d00a      	beq.n	8013a0e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80139f8:	7bbb      	ldrb	r3, [r7, #14]
 80139fa:	4619      	mov	r1, r3
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f001 feb3 	bl	8015768 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a02:	2180      	movs	r1, #128	; 0x80
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f001 feaf 	bl	8015768 <USBD_LL_StallEP>
 8013a0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013a0c:	e040      	b.n	8013a90 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013a0e:	6839      	ldr	r1, [r7, #0]
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f000 fc68 	bl	80142e6 <USBD_CtlError>
              break;
 8013a16:	e03b      	b.n	8013a90 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	885b      	ldrh	r3, [r3, #2]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d136      	bne.n	8013a8e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013a20:	7bbb      	ldrb	r3, [r7, #14]
 8013a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d004      	beq.n	8013a34 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013a2a:	7bbb      	ldrb	r3, [r7, #14]
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f001 fed0 	bl	80157d4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f000 fd21 	bl	801447c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013a3a:	7bbb      	ldrb	r3, [r7, #14]
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f7ff fde2 	bl	8013608 <USBD_CoreFindEP>
 8013a44:	4603      	mov	r3, r0
 8013a46:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013a48:	7b7b      	ldrb	r3, [r7, #13]
 8013a4a:	2bff      	cmp	r3, #255	; 0xff
 8013a4c:	d01f      	beq.n	8013a8e <USBD_StdEPReq+0x1c6>
 8013a4e:	7b7b      	ldrb	r3, [r7, #13]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d11c      	bne.n	8013a8e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013a54:	7b7a      	ldrb	r2, [r7, #13]
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013a5c:	7b7a      	ldrb	r2, [r7, #13]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	32ae      	adds	r2, #174	; 0xae
 8013a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a66:	689b      	ldr	r3, [r3, #8]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d010      	beq.n	8013a8e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013a6c:	7b7a      	ldrb	r2, [r7, #13]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	32ae      	adds	r2, #174	; 0xae
 8013a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a76:	689b      	ldr	r3, [r3, #8]
 8013a78:	6839      	ldr	r1, [r7, #0]
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	4798      	blx	r3
 8013a7e:	4603      	mov	r3, r0
 8013a80:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013a82:	e004      	b.n	8013a8e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013a84:	6839      	ldr	r1, [r7, #0]
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f000 fc2d 	bl	80142e6 <USBD_CtlError>
              break;
 8013a8c:	e000      	b.n	8013a90 <USBD_StdEPReq+0x1c8>
              break;
 8013a8e:	bf00      	nop
          }
          break;
 8013a90:	e0ab      	b.n	8013bea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a98:	b2db      	uxtb	r3, r3
 8013a9a:	2b02      	cmp	r3, #2
 8013a9c:	d002      	beq.n	8013aa4 <USBD_StdEPReq+0x1dc>
 8013a9e:	2b03      	cmp	r3, #3
 8013aa0:	d032      	beq.n	8013b08 <USBD_StdEPReq+0x240>
 8013aa2:	e097      	b.n	8013bd4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013aa4:	7bbb      	ldrb	r3, [r7, #14]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d007      	beq.n	8013aba <USBD_StdEPReq+0x1f2>
 8013aaa:	7bbb      	ldrb	r3, [r7, #14]
 8013aac:	2b80      	cmp	r3, #128	; 0x80
 8013aae:	d004      	beq.n	8013aba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013ab0:	6839      	ldr	r1, [r7, #0]
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	f000 fc17 	bl	80142e6 <USBD_CtlError>
                break;
 8013ab8:	e091      	b.n	8013bde <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013aba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	da0b      	bge.n	8013ada <USBD_StdEPReq+0x212>
 8013ac2:	7bbb      	ldrb	r3, [r7, #14]
 8013ac4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013ac8:	4613      	mov	r3, r2
 8013aca:	009b      	lsls	r3, r3, #2
 8013acc:	4413      	add	r3, r2
 8013ace:	009b      	lsls	r3, r3, #2
 8013ad0:	3310      	adds	r3, #16
 8013ad2:	687a      	ldr	r2, [r7, #4]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	3304      	adds	r3, #4
 8013ad8:	e00b      	b.n	8013af2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013ada:	7bbb      	ldrb	r3, [r7, #14]
 8013adc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	009b      	lsls	r3, r3, #2
 8013ae4:	4413      	add	r3, r2
 8013ae6:	009b      	lsls	r3, r3, #2
 8013ae8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	4413      	add	r3, r2
 8013af0:	3304      	adds	r3, #4
 8013af2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	2200      	movs	r2, #0
 8013af8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	2202      	movs	r2, #2
 8013afe:	4619      	mov	r1, r3
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f000 fc61 	bl	80143c8 <USBD_CtlSendData>
              break;
 8013b06:	e06a      	b.n	8013bde <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	da11      	bge.n	8013b34 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013b10:	7bbb      	ldrb	r3, [r7, #14]
 8013b12:	f003 020f 	and.w	r2, r3, #15
 8013b16:	6879      	ldr	r1, [r7, #4]
 8013b18:	4613      	mov	r3, r2
 8013b1a:	009b      	lsls	r3, r3, #2
 8013b1c:	4413      	add	r3, r2
 8013b1e:	009b      	lsls	r3, r3, #2
 8013b20:	440b      	add	r3, r1
 8013b22:	3324      	adds	r3, #36	; 0x24
 8013b24:	881b      	ldrh	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d117      	bne.n	8013b5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013b2a:	6839      	ldr	r1, [r7, #0]
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f000 fbda 	bl	80142e6 <USBD_CtlError>
                  break;
 8013b32:	e054      	b.n	8013bde <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013b34:	7bbb      	ldrb	r3, [r7, #14]
 8013b36:	f003 020f 	and.w	r2, r3, #15
 8013b3a:	6879      	ldr	r1, [r7, #4]
 8013b3c:	4613      	mov	r3, r2
 8013b3e:	009b      	lsls	r3, r3, #2
 8013b40:	4413      	add	r3, r2
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	440b      	add	r3, r1
 8013b46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013b4a:	881b      	ldrh	r3, [r3, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d104      	bne.n	8013b5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013b50:	6839      	ldr	r1, [r7, #0]
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f000 fbc7 	bl	80142e6 <USBD_CtlError>
                  break;
 8013b58:	e041      	b.n	8013bde <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	da0b      	bge.n	8013b7a <USBD_StdEPReq+0x2b2>
 8013b62:	7bbb      	ldrb	r3, [r7, #14]
 8013b64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013b68:	4613      	mov	r3, r2
 8013b6a:	009b      	lsls	r3, r3, #2
 8013b6c:	4413      	add	r3, r2
 8013b6e:	009b      	lsls	r3, r3, #2
 8013b70:	3310      	adds	r3, #16
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	4413      	add	r3, r2
 8013b76:	3304      	adds	r3, #4
 8013b78:	e00b      	b.n	8013b92 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013b7a:	7bbb      	ldrb	r3, [r7, #14]
 8013b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b80:	4613      	mov	r3, r2
 8013b82:	009b      	lsls	r3, r3, #2
 8013b84:	4413      	add	r3, r2
 8013b86:	009b      	lsls	r3, r3, #2
 8013b88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	4413      	add	r3, r2
 8013b90:	3304      	adds	r3, #4
 8013b92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013b94:	7bbb      	ldrb	r3, [r7, #14]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d002      	beq.n	8013ba0 <USBD_StdEPReq+0x2d8>
 8013b9a:	7bbb      	ldrb	r3, [r7, #14]
 8013b9c:	2b80      	cmp	r3, #128	; 0x80
 8013b9e:	d103      	bne.n	8013ba8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	601a      	str	r2, [r3, #0]
 8013ba6:	e00e      	b.n	8013bc6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013ba8:	7bbb      	ldrb	r3, [r7, #14]
 8013baa:	4619      	mov	r1, r3
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f001 fe47 	bl	8015840 <USBD_LL_IsStallEP>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d003      	beq.n	8013bc0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	2201      	movs	r2, #1
 8013bbc:	601a      	str	r2, [r3, #0]
 8013bbe:	e002      	b.n	8013bc6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	2202      	movs	r2, #2
 8013bca:	4619      	mov	r1, r3
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f000 fbfb 	bl	80143c8 <USBD_CtlSendData>
              break;
 8013bd2:	e004      	b.n	8013bde <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013bd4:	6839      	ldr	r1, [r7, #0]
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	f000 fb85 	bl	80142e6 <USBD_CtlError>
              break;
 8013bdc:	bf00      	nop
          }
          break;
 8013bde:	e004      	b.n	8013bea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013be0:	6839      	ldr	r1, [r7, #0]
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f000 fb7f 	bl	80142e6 <USBD_CtlError>
          break;
 8013be8:	bf00      	nop
      }
      break;
 8013bea:	e005      	b.n	8013bf8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013bec:	6839      	ldr	r1, [r7, #0]
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f000 fb79 	bl	80142e6 <USBD_CtlError>
      break;
 8013bf4:	e000      	b.n	8013bf8 <USBD_StdEPReq+0x330>
      break;
 8013bf6:	bf00      	nop
  }

  return ret;
 8013bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3710      	adds	r7, #16
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
	...

08013c04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b084      	sub	sp, #16
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013c12:	2300      	movs	r3, #0
 8013c14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013c16:	2300      	movs	r3, #0
 8013c18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	885b      	ldrh	r3, [r3, #2]
 8013c1e:	0a1b      	lsrs	r3, r3, #8
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	3b01      	subs	r3, #1
 8013c24:	2b0e      	cmp	r3, #14
 8013c26:	f200 8152 	bhi.w	8013ece <USBD_GetDescriptor+0x2ca>
 8013c2a:	a201      	add	r2, pc, #4	; (adr r2, 8013c30 <USBD_GetDescriptor+0x2c>)
 8013c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c30:	08013ca1 	.word	0x08013ca1
 8013c34:	08013cb9 	.word	0x08013cb9
 8013c38:	08013cf9 	.word	0x08013cf9
 8013c3c:	08013ecf 	.word	0x08013ecf
 8013c40:	08013ecf 	.word	0x08013ecf
 8013c44:	08013e6f 	.word	0x08013e6f
 8013c48:	08013e9b 	.word	0x08013e9b
 8013c4c:	08013ecf 	.word	0x08013ecf
 8013c50:	08013ecf 	.word	0x08013ecf
 8013c54:	08013ecf 	.word	0x08013ecf
 8013c58:	08013ecf 	.word	0x08013ecf
 8013c5c:	08013ecf 	.word	0x08013ecf
 8013c60:	08013ecf 	.word	0x08013ecf
 8013c64:	08013ecf 	.word	0x08013ecf
 8013c68:	08013c6d 	.word	0x08013c6d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c72:	69db      	ldr	r3, [r3, #28]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d00b      	beq.n	8013c90 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c7e:	69db      	ldr	r3, [r3, #28]
 8013c80:	687a      	ldr	r2, [r7, #4]
 8013c82:	7c12      	ldrb	r2, [r2, #16]
 8013c84:	f107 0108 	add.w	r1, r7, #8
 8013c88:	4610      	mov	r0, r2
 8013c8a:	4798      	blx	r3
 8013c8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013c8e:	e126      	b.n	8013ede <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013c90:	6839      	ldr	r1, [r7, #0]
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f000 fb27 	bl	80142e6 <USBD_CtlError>
        err++;
 8013c98:	7afb      	ldrb	r3, [r7, #11]
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	72fb      	strb	r3, [r7, #11]
      break;
 8013c9e:	e11e      	b.n	8013ede <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	687a      	ldr	r2, [r7, #4]
 8013caa:	7c12      	ldrb	r2, [r2, #16]
 8013cac:	f107 0108 	add.w	r1, r7, #8
 8013cb0:	4610      	mov	r0, r2
 8013cb2:	4798      	blx	r3
 8013cb4:	60f8      	str	r0, [r7, #12]
      break;
 8013cb6:	e112      	b.n	8013ede <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	7c1b      	ldrb	r3, [r3, #16]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d10d      	bne.n	8013cdc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cc8:	f107 0208 	add.w	r2, r7, #8
 8013ccc:	4610      	mov	r0, r2
 8013cce:	4798      	blx	r3
 8013cd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	2202      	movs	r2, #2
 8013cd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013cda:	e100      	b.n	8013ede <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ce4:	f107 0208 	add.w	r2, r7, #8
 8013ce8:	4610      	mov	r0, r2
 8013cea:	4798      	blx	r3
 8013cec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	3301      	adds	r3, #1
 8013cf2:	2202      	movs	r2, #2
 8013cf4:	701a      	strb	r2, [r3, #0]
      break;
 8013cf6:	e0f2      	b.n	8013ede <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	885b      	ldrh	r3, [r3, #2]
 8013cfc:	b2db      	uxtb	r3, r3
 8013cfe:	2b05      	cmp	r3, #5
 8013d00:	f200 80ac 	bhi.w	8013e5c <USBD_GetDescriptor+0x258>
 8013d04:	a201      	add	r2, pc, #4	; (adr r2, 8013d0c <USBD_GetDescriptor+0x108>)
 8013d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d0a:	bf00      	nop
 8013d0c:	08013d25 	.word	0x08013d25
 8013d10:	08013d59 	.word	0x08013d59
 8013d14:	08013d8d 	.word	0x08013d8d
 8013d18:	08013dc1 	.word	0x08013dc1
 8013d1c:	08013df5 	.word	0x08013df5
 8013d20:	08013e29 	.word	0x08013e29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d00b      	beq.n	8013d48 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d36:	685b      	ldr	r3, [r3, #4]
 8013d38:	687a      	ldr	r2, [r7, #4]
 8013d3a:	7c12      	ldrb	r2, [r2, #16]
 8013d3c:	f107 0108 	add.w	r1, r7, #8
 8013d40:	4610      	mov	r0, r2
 8013d42:	4798      	blx	r3
 8013d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d46:	e091      	b.n	8013e6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013d48:	6839      	ldr	r1, [r7, #0]
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	f000 facb 	bl	80142e6 <USBD_CtlError>
            err++;
 8013d50:	7afb      	ldrb	r3, [r7, #11]
 8013d52:	3301      	adds	r3, #1
 8013d54:	72fb      	strb	r3, [r7, #11]
          break;
 8013d56:	e089      	b.n	8013e6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d5e:	689b      	ldr	r3, [r3, #8]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d00b      	beq.n	8013d7c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d6a:	689b      	ldr	r3, [r3, #8]
 8013d6c:	687a      	ldr	r2, [r7, #4]
 8013d6e:	7c12      	ldrb	r2, [r2, #16]
 8013d70:	f107 0108 	add.w	r1, r7, #8
 8013d74:	4610      	mov	r0, r2
 8013d76:	4798      	blx	r3
 8013d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d7a:	e077      	b.n	8013e6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013d7c:	6839      	ldr	r1, [r7, #0]
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f000 fab1 	bl	80142e6 <USBD_CtlError>
            err++;
 8013d84:	7afb      	ldrb	r3, [r7, #11]
 8013d86:	3301      	adds	r3, #1
 8013d88:	72fb      	strb	r3, [r7, #11]
          break;
 8013d8a:	e06f      	b.n	8013e6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d92:	68db      	ldr	r3, [r3, #12]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d00b      	beq.n	8013db0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	7c12      	ldrb	r2, [r2, #16]
 8013da4:	f107 0108 	add.w	r1, r7, #8
 8013da8:	4610      	mov	r0, r2
 8013daa:	4798      	blx	r3
 8013dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013dae:	e05d      	b.n	8013e6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013db0:	6839      	ldr	r1, [r7, #0]
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	f000 fa97 	bl	80142e6 <USBD_CtlError>
            err++;
 8013db8:	7afb      	ldrb	r3, [r7, #11]
 8013dba:	3301      	adds	r3, #1
 8013dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8013dbe:	e055      	b.n	8013e6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dc6:	691b      	ldr	r3, [r3, #16]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d00b      	beq.n	8013de4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dd2:	691b      	ldr	r3, [r3, #16]
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	7c12      	ldrb	r2, [r2, #16]
 8013dd8:	f107 0108 	add.w	r1, r7, #8
 8013ddc:	4610      	mov	r0, r2
 8013dde:	4798      	blx	r3
 8013de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013de2:	e043      	b.n	8013e6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013de4:	6839      	ldr	r1, [r7, #0]
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f000 fa7d 	bl	80142e6 <USBD_CtlError>
            err++;
 8013dec:	7afb      	ldrb	r3, [r7, #11]
 8013dee:	3301      	adds	r3, #1
 8013df0:	72fb      	strb	r3, [r7, #11]
          break;
 8013df2:	e03b      	b.n	8013e6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dfa:	695b      	ldr	r3, [r3, #20]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d00b      	beq.n	8013e18 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e06:	695b      	ldr	r3, [r3, #20]
 8013e08:	687a      	ldr	r2, [r7, #4]
 8013e0a:	7c12      	ldrb	r2, [r2, #16]
 8013e0c:	f107 0108 	add.w	r1, r7, #8
 8013e10:	4610      	mov	r0, r2
 8013e12:	4798      	blx	r3
 8013e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e16:	e029      	b.n	8013e6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e18:	6839      	ldr	r1, [r7, #0]
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f000 fa63 	bl	80142e6 <USBD_CtlError>
            err++;
 8013e20:	7afb      	ldrb	r3, [r7, #11]
 8013e22:	3301      	adds	r3, #1
 8013e24:	72fb      	strb	r3, [r7, #11]
          break;
 8013e26:	e021      	b.n	8013e6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e2e:	699b      	ldr	r3, [r3, #24]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d00b      	beq.n	8013e4c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e3a:	699b      	ldr	r3, [r3, #24]
 8013e3c:	687a      	ldr	r2, [r7, #4]
 8013e3e:	7c12      	ldrb	r2, [r2, #16]
 8013e40:	f107 0108 	add.w	r1, r7, #8
 8013e44:	4610      	mov	r0, r2
 8013e46:	4798      	blx	r3
 8013e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e4a:	e00f      	b.n	8013e6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e4c:	6839      	ldr	r1, [r7, #0]
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f000 fa49 	bl	80142e6 <USBD_CtlError>
            err++;
 8013e54:	7afb      	ldrb	r3, [r7, #11]
 8013e56:	3301      	adds	r3, #1
 8013e58:	72fb      	strb	r3, [r7, #11]
          break;
 8013e5a:	e007      	b.n	8013e6c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013e5c:	6839      	ldr	r1, [r7, #0]
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f000 fa41 	bl	80142e6 <USBD_CtlError>
          err++;
 8013e64:	7afb      	ldrb	r3, [r7, #11]
 8013e66:	3301      	adds	r3, #1
 8013e68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013e6a:	bf00      	nop
      }
      break;
 8013e6c:	e037      	b.n	8013ede <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	7c1b      	ldrb	r3, [r3, #16]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d109      	bne.n	8013e8a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e7e:	f107 0208 	add.w	r2, r7, #8
 8013e82:	4610      	mov	r0, r2
 8013e84:	4798      	blx	r3
 8013e86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013e88:	e029      	b.n	8013ede <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013e8a:	6839      	ldr	r1, [r7, #0]
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f000 fa2a 	bl	80142e6 <USBD_CtlError>
        err++;
 8013e92:	7afb      	ldrb	r3, [r7, #11]
 8013e94:	3301      	adds	r3, #1
 8013e96:	72fb      	strb	r3, [r7, #11]
      break;
 8013e98:	e021      	b.n	8013ede <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	7c1b      	ldrb	r3, [r3, #16]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d10d      	bne.n	8013ebe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eaa:	f107 0208 	add.w	r2, r7, #8
 8013eae:	4610      	mov	r0, r2
 8013eb0:	4798      	blx	r3
 8013eb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	2207      	movs	r2, #7
 8013eba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013ebc:	e00f      	b.n	8013ede <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013ebe:	6839      	ldr	r1, [r7, #0]
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f000 fa10 	bl	80142e6 <USBD_CtlError>
        err++;
 8013ec6:	7afb      	ldrb	r3, [r7, #11]
 8013ec8:	3301      	adds	r3, #1
 8013eca:	72fb      	strb	r3, [r7, #11]
      break;
 8013ecc:	e007      	b.n	8013ede <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013ece:	6839      	ldr	r1, [r7, #0]
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f000 fa08 	bl	80142e6 <USBD_CtlError>
      err++;
 8013ed6:	7afb      	ldrb	r3, [r7, #11]
 8013ed8:	3301      	adds	r3, #1
 8013eda:	72fb      	strb	r3, [r7, #11]
      break;
 8013edc:	bf00      	nop
  }

  if (err != 0U)
 8013ede:	7afb      	ldrb	r3, [r7, #11]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d11e      	bne.n	8013f22 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	88db      	ldrh	r3, [r3, #6]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d016      	beq.n	8013f1a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013eec:	893b      	ldrh	r3, [r7, #8]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d00e      	beq.n	8013f10 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	88da      	ldrh	r2, [r3, #6]
 8013ef6:	893b      	ldrh	r3, [r7, #8]
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	bf28      	it	cs
 8013efc:	4613      	movcs	r3, r2
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013f02:	893b      	ldrh	r3, [r7, #8]
 8013f04:	461a      	mov	r2, r3
 8013f06:	68f9      	ldr	r1, [r7, #12]
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f000 fa5d 	bl	80143c8 <USBD_CtlSendData>
 8013f0e:	e009      	b.n	8013f24 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013f10:	6839      	ldr	r1, [r7, #0]
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f000 f9e7 	bl	80142e6 <USBD_CtlError>
 8013f18:	e004      	b.n	8013f24 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f000 faae 	bl	801447c <USBD_CtlSendStatus>
 8013f20:	e000      	b.n	8013f24 <USBD_GetDescriptor+0x320>
    return;
 8013f22:	bf00      	nop
  }
}
 8013f24:	3710      	adds	r7, #16
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop

08013f2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b084      	sub	sp, #16
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
 8013f34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	889b      	ldrh	r3, [r3, #4]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d131      	bne.n	8013fa2 <USBD_SetAddress+0x76>
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	88db      	ldrh	r3, [r3, #6]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d12d      	bne.n	8013fa2 <USBD_SetAddress+0x76>
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	885b      	ldrh	r3, [r3, #2]
 8013f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8013f4c:	d829      	bhi.n	8013fa2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	885b      	ldrh	r3, [r3, #2]
 8013f52:	b2db      	uxtb	r3, r3
 8013f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f60:	b2db      	uxtb	r3, r3
 8013f62:	2b03      	cmp	r3, #3
 8013f64:	d104      	bne.n	8013f70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013f66:	6839      	ldr	r1, [r7, #0]
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f000 f9bc 	bl	80142e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f6e:	e01d      	b.n	8013fac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	7bfa      	ldrb	r2, [r7, #15]
 8013f74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013f78:	7bfb      	ldrb	r3, [r7, #15]
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f001 fc8d 	bl	801589c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f000 fa7a 	bl	801447c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013f88:	7bfb      	ldrb	r3, [r7, #15]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d004      	beq.n	8013f98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2202      	movs	r2, #2
 8013f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f96:	e009      	b.n	8013fac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2201      	movs	r2, #1
 8013f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fa0:	e004      	b.n	8013fac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013fa2:	6839      	ldr	r1, [r7, #0]
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f000 f99e 	bl	80142e6 <USBD_CtlError>
  }
}
 8013faa:	bf00      	nop
 8013fac:	bf00      	nop
 8013fae:	3710      	adds	r7, #16
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	885b      	ldrh	r3, [r3, #2]
 8013fc6:	b2da      	uxtb	r2, r3
 8013fc8:	4b4e      	ldr	r3, [pc, #312]	; (8014104 <USBD_SetConfig+0x150>)
 8013fca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013fcc:	4b4d      	ldr	r3, [pc, #308]	; (8014104 <USBD_SetConfig+0x150>)
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	2b01      	cmp	r3, #1
 8013fd2:	d905      	bls.n	8013fe0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013fd4:	6839      	ldr	r1, [r7, #0]
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f000 f985 	bl	80142e6 <USBD_CtlError>
    return USBD_FAIL;
 8013fdc:	2303      	movs	r3, #3
 8013fde:	e08c      	b.n	80140fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fe6:	b2db      	uxtb	r3, r3
 8013fe8:	2b02      	cmp	r3, #2
 8013fea:	d002      	beq.n	8013ff2 <USBD_SetConfig+0x3e>
 8013fec:	2b03      	cmp	r3, #3
 8013fee:	d029      	beq.n	8014044 <USBD_SetConfig+0x90>
 8013ff0:	e075      	b.n	80140de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013ff2:	4b44      	ldr	r3, [pc, #272]	; (8014104 <USBD_SetConfig+0x150>)
 8013ff4:	781b      	ldrb	r3, [r3, #0]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d020      	beq.n	801403c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013ffa:	4b42      	ldr	r3, [pc, #264]	; (8014104 <USBD_SetConfig+0x150>)
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	461a      	mov	r2, r3
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014004:	4b3f      	ldr	r3, [pc, #252]	; (8014104 <USBD_SetConfig+0x150>)
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	4619      	mov	r1, r3
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f7ff f849 	bl	80130a2 <USBD_SetClassConfig>
 8014010:	4603      	mov	r3, r0
 8014012:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014014:	7bfb      	ldrb	r3, [r7, #15]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d008      	beq.n	801402c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801401a:	6839      	ldr	r1, [r7, #0]
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f000 f962 	bl	80142e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2202      	movs	r2, #2
 8014026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801402a:	e065      	b.n	80140f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801402c:	6878      	ldr	r0, [r7, #4]
 801402e:	f000 fa25 	bl	801447c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2203      	movs	r2, #3
 8014036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801403a:	e05d      	b.n	80140f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f000 fa1d 	bl	801447c <USBD_CtlSendStatus>
      break;
 8014042:	e059      	b.n	80140f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014044:	4b2f      	ldr	r3, [pc, #188]	; (8014104 <USBD_SetConfig+0x150>)
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d112      	bne.n	8014072 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2202      	movs	r2, #2
 8014050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014054:	4b2b      	ldr	r3, [pc, #172]	; (8014104 <USBD_SetConfig+0x150>)
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	461a      	mov	r2, r3
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801405e:	4b29      	ldr	r3, [pc, #164]	; (8014104 <USBD_SetConfig+0x150>)
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	4619      	mov	r1, r3
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f7ff f838 	bl	80130da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f000 fa06 	bl	801447c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014070:	e042      	b.n	80140f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014072:	4b24      	ldr	r3, [pc, #144]	; (8014104 <USBD_SetConfig+0x150>)
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	461a      	mov	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	429a      	cmp	r2, r3
 801407e:	d02a      	beq.n	80140d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	685b      	ldr	r3, [r3, #4]
 8014084:	b2db      	uxtb	r3, r3
 8014086:	4619      	mov	r1, r3
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f7ff f826 	bl	80130da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801408e:	4b1d      	ldr	r3, [pc, #116]	; (8014104 <USBD_SetConfig+0x150>)
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	461a      	mov	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014098:	4b1a      	ldr	r3, [pc, #104]	; (8014104 <USBD_SetConfig+0x150>)
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	4619      	mov	r1, r3
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f7fe ffff 	bl	80130a2 <USBD_SetClassConfig>
 80140a4:	4603      	mov	r3, r0
 80140a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80140a8:	7bfb      	ldrb	r3, [r7, #15]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d00f      	beq.n	80140ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80140ae:	6839      	ldr	r1, [r7, #0]
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f000 f918 	bl	80142e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	685b      	ldr	r3, [r3, #4]
 80140ba:	b2db      	uxtb	r3, r3
 80140bc:	4619      	mov	r1, r3
 80140be:	6878      	ldr	r0, [r7, #4]
 80140c0:	f7ff f80b 	bl	80130da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2202      	movs	r2, #2
 80140c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80140cc:	e014      	b.n	80140f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f000 f9d4 	bl	801447c <USBD_CtlSendStatus>
      break;
 80140d4:	e010      	b.n	80140f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f000 f9d0 	bl	801447c <USBD_CtlSendStatus>
      break;
 80140dc:	e00c      	b.n	80140f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80140de:	6839      	ldr	r1, [r7, #0]
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f000 f900 	bl	80142e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80140e6:	4b07      	ldr	r3, [pc, #28]	; (8014104 <USBD_SetConfig+0x150>)
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	4619      	mov	r1, r3
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f7fe fff4 	bl	80130da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80140f2:	2303      	movs	r3, #3
 80140f4:	73fb      	strb	r3, [r7, #15]
      break;
 80140f6:	bf00      	nop
  }

  return ret;
 80140f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	3710      	adds	r7, #16
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}
 8014102:	bf00      	nop
 8014104:	200013c4 	.word	0x200013c4

08014108 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	88db      	ldrh	r3, [r3, #6]
 8014116:	2b01      	cmp	r3, #1
 8014118:	d004      	beq.n	8014124 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801411a:	6839      	ldr	r1, [r7, #0]
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f000 f8e2 	bl	80142e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014122:	e023      	b.n	801416c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801412a:	b2db      	uxtb	r3, r3
 801412c:	2b02      	cmp	r3, #2
 801412e:	dc02      	bgt.n	8014136 <USBD_GetConfig+0x2e>
 8014130:	2b00      	cmp	r3, #0
 8014132:	dc03      	bgt.n	801413c <USBD_GetConfig+0x34>
 8014134:	e015      	b.n	8014162 <USBD_GetConfig+0x5a>
 8014136:	2b03      	cmp	r3, #3
 8014138:	d00b      	beq.n	8014152 <USBD_GetConfig+0x4a>
 801413a:	e012      	b.n	8014162 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2200      	movs	r2, #0
 8014140:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	3308      	adds	r3, #8
 8014146:	2201      	movs	r2, #1
 8014148:	4619      	mov	r1, r3
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 f93c 	bl	80143c8 <USBD_CtlSendData>
        break;
 8014150:	e00c      	b.n	801416c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	3304      	adds	r3, #4
 8014156:	2201      	movs	r2, #1
 8014158:	4619      	mov	r1, r3
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f000 f934 	bl	80143c8 <USBD_CtlSendData>
        break;
 8014160:	e004      	b.n	801416c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014162:	6839      	ldr	r1, [r7, #0]
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f000 f8be 	bl	80142e6 <USBD_CtlError>
        break;
 801416a:	bf00      	nop
}
 801416c:	bf00      	nop
 801416e:	3708      	adds	r7, #8
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
 801417c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014184:	b2db      	uxtb	r3, r3
 8014186:	3b01      	subs	r3, #1
 8014188:	2b02      	cmp	r3, #2
 801418a:	d81e      	bhi.n	80141ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	88db      	ldrh	r3, [r3, #6]
 8014190:	2b02      	cmp	r3, #2
 8014192:	d004      	beq.n	801419e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014194:	6839      	ldr	r1, [r7, #0]
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f000 f8a5 	bl	80142e6 <USBD_CtlError>
        break;
 801419c:	e01a      	b.n	80141d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	2201      	movs	r2, #1
 80141a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d005      	beq.n	80141ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	68db      	ldr	r3, [r3, #12]
 80141b2:	f043 0202 	orr.w	r2, r3, #2
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	330c      	adds	r3, #12
 80141be:	2202      	movs	r2, #2
 80141c0:	4619      	mov	r1, r3
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f000 f900 	bl	80143c8 <USBD_CtlSendData>
      break;
 80141c8:	e004      	b.n	80141d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80141ca:	6839      	ldr	r1, [r7, #0]
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f000 f88a 	bl	80142e6 <USBD_CtlError>
      break;
 80141d2:	bf00      	nop
  }
}
 80141d4:	bf00      	nop
 80141d6:	3708      	adds	r7, #8
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}

080141dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b082      	sub	sp, #8
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	885b      	ldrh	r3, [r3, #2]
 80141ea:	2b01      	cmp	r3, #1
 80141ec:	d107      	bne.n	80141fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2201      	movs	r2, #1
 80141f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f000 f940 	bl	801447c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80141fc:	e013      	b.n	8014226 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	885b      	ldrh	r3, [r3, #2]
 8014202:	2b02      	cmp	r3, #2
 8014204:	d10b      	bne.n	801421e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	889b      	ldrh	r3, [r3, #4]
 801420a:	0a1b      	lsrs	r3, r3, #8
 801420c:	b29b      	uxth	r3, r3
 801420e:	b2da      	uxtb	r2, r3
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f000 f930 	bl	801447c <USBD_CtlSendStatus>
}
 801421c:	e003      	b.n	8014226 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801421e:	6839      	ldr	r1, [r7, #0]
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f000 f860 	bl	80142e6 <USBD_CtlError>
}
 8014226:	bf00      	nop
 8014228:	3708      	adds	r7, #8
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}

0801422e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801422e:	b580      	push	{r7, lr}
 8014230:	b082      	sub	sp, #8
 8014232:	af00      	add	r7, sp, #0
 8014234:	6078      	str	r0, [r7, #4]
 8014236:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801423e:	b2db      	uxtb	r3, r3
 8014240:	3b01      	subs	r3, #1
 8014242:	2b02      	cmp	r3, #2
 8014244:	d80b      	bhi.n	801425e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	885b      	ldrh	r3, [r3, #2]
 801424a:	2b01      	cmp	r3, #1
 801424c:	d10c      	bne.n	8014268 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2200      	movs	r2, #0
 8014252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f000 f910 	bl	801447c <USBD_CtlSendStatus>
      }
      break;
 801425c:	e004      	b.n	8014268 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801425e:	6839      	ldr	r1, [r7, #0]
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f000 f840 	bl	80142e6 <USBD_CtlError>
      break;
 8014266:	e000      	b.n	801426a <USBD_ClrFeature+0x3c>
      break;
 8014268:	bf00      	nop
  }
}
 801426a:	bf00      	nop
 801426c:	3708      	adds	r7, #8
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}

08014272 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014272:	b580      	push	{r7, lr}
 8014274:	b084      	sub	sp, #16
 8014276:	af00      	add	r7, sp, #0
 8014278:	6078      	str	r0, [r7, #4]
 801427a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	781a      	ldrb	r2, [r3, #0]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	3301      	adds	r3, #1
 801428c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	781a      	ldrb	r2, [r3, #0]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	3301      	adds	r3, #1
 801429a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801429c:	68f8      	ldr	r0, [r7, #12]
 801429e:	f7ff fa17 	bl	80136d0 <SWAPBYTE>
 80142a2:	4603      	mov	r3, r0
 80142a4:	461a      	mov	r2, r3
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	3301      	adds	r3, #1
 80142ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	3301      	adds	r3, #1
 80142b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80142b6:	68f8      	ldr	r0, [r7, #12]
 80142b8:	f7ff fa0a 	bl	80136d0 <SWAPBYTE>
 80142bc:	4603      	mov	r3, r0
 80142be:	461a      	mov	r2, r3
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	3301      	adds	r3, #1
 80142c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	3301      	adds	r3, #1
 80142ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80142d0:	68f8      	ldr	r0, [r7, #12]
 80142d2:	f7ff f9fd 	bl	80136d0 <SWAPBYTE>
 80142d6:	4603      	mov	r3, r0
 80142d8:	461a      	mov	r2, r3
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	80da      	strh	r2, [r3, #6]
}
 80142de:	bf00      	nop
 80142e0:	3710      	adds	r7, #16
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}

080142e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142e6:	b580      	push	{r7, lr}
 80142e8:	b082      	sub	sp, #8
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	6078      	str	r0, [r7, #4]
 80142ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80142f0:	2180      	movs	r1, #128	; 0x80
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f001 fa38 	bl	8015768 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80142f8:	2100      	movs	r1, #0
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f001 fa34 	bl	8015768 <USBD_LL_StallEP>
}
 8014300:	bf00      	nop
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b086      	sub	sp, #24
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014314:	2300      	movs	r3, #0
 8014316:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d036      	beq.n	801438c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014322:	6938      	ldr	r0, [r7, #16]
 8014324:	f000 f836 	bl	8014394 <USBD_GetLen>
 8014328:	4603      	mov	r3, r0
 801432a:	3301      	adds	r3, #1
 801432c:	b29b      	uxth	r3, r3
 801432e:	005b      	lsls	r3, r3, #1
 8014330:	b29a      	uxth	r2, r3
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014336:	7dfb      	ldrb	r3, [r7, #23]
 8014338:	68ba      	ldr	r2, [r7, #8]
 801433a:	4413      	add	r3, r2
 801433c:	687a      	ldr	r2, [r7, #4]
 801433e:	7812      	ldrb	r2, [r2, #0]
 8014340:	701a      	strb	r2, [r3, #0]
  idx++;
 8014342:	7dfb      	ldrb	r3, [r7, #23]
 8014344:	3301      	adds	r3, #1
 8014346:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014348:	7dfb      	ldrb	r3, [r7, #23]
 801434a:	68ba      	ldr	r2, [r7, #8]
 801434c:	4413      	add	r3, r2
 801434e:	2203      	movs	r2, #3
 8014350:	701a      	strb	r2, [r3, #0]
  idx++;
 8014352:	7dfb      	ldrb	r3, [r7, #23]
 8014354:	3301      	adds	r3, #1
 8014356:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014358:	e013      	b.n	8014382 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801435a:	7dfb      	ldrb	r3, [r7, #23]
 801435c:	68ba      	ldr	r2, [r7, #8]
 801435e:	4413      	add	r3, r2
 8014360:	693a      	ldr	r2, [r7, #16]
 8014362:	7812      	ldrb	r2, [r2, #0]
 8014364:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	3301      	adds	r3, #1
 801436a:	613b      	str	r3, [r7, #16]
    idx++;
 801436c:	7dfb      	ldrb	r3, [r7, #23]
 801436e:	3301      	adds	r3, #1
 8014370:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014372:	7dfb      	ldrb	r3, [r7, #23]
 8014374:	68ba      	ldr	r2, [r7, #8]
 8014376:	4413      	add	r3, r2
 8014378:	2200      	movs	r2, #0
 801437a:	701a      	strb	r2, [r3, #0]
    idx++;
 801437c:	7dfb      	ldrb	r3, [r7, #23]
 801437e:	3301      	adds	r3, #1
 8014380:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014382:	693b      	ldr	r3, [r7, #16]
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d1e7      	bne.n	801435a <USBD_GetString+0x52>
 801438a:	e000      	b.n	801438e <USBD_GetString+0x86>
    return;
 801438c:	bf00      	nop
  }
}
 801438e:	3718      	adds	r7, #24
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}

08014394 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014394:	b480      	push	{r7}
 8014396:	b085      	sub	sp, #20
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801439c:	2300      	movs	r3, #0
 801439e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80143a4:	e005      	b.n	80143b2 <USBD_GetLen+0x1e>
  {
    len++;
 80143a6:	7bfb      	ldrb	r3, [r7, #15]
 80143a8:	3301      	adds	r3, #1
 80143aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	3301      	adds	r3, #1
 80143b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80143b2:	68bb      	ldr	r3, [r7, #8]
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d1f5      	bne.n	80143a6 <USBD_GetLen+0x12>
  }

  return len;
 80143ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3714      	adds	r7, #20
 80143c0:	46bd      	mov	sp, r7
 80143c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c6:	4770      	bx	lr

080143c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b084      	sub	sp, #16
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	60f8      	str	r0, [r7, #12]
 80143d0:	60b9      	str	r1, [r7, #8]
 80143d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	2202      	movs	r2, #2
 80143d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	687a      	ldr	r2, [r7, #4]
 80143e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	68ba      	ldr	r2, [r7, #8]
 80143ec:	2100      	movs	r1, #0
 80143ee:	68f8      	ldr	r0, [r7, #12]
 80143f0:	f001 fa8a 	bl	8015908 <USBD_LL_Transmit>

  return USBD_OK;
 80143f4:	2300      	movs	r3, #0
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3710      	adds	r7, #16
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}

080143fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80143fe:	b580      	push	{r7, lr}
 8014400:	b084      	sub	sp, #16
 8014402:	af00      	add	r7, sp, #0
 8014404:	60f8      	str	r0, [r7, #12]
 8014406:	60b9      	str	r1, [r7, #8]
 8014408:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	68ba      	ldr	r2, [r7, #8]
 801440e:	2100      	movs	r1, #0
 8014410:	68f8      	ldr	r0, [r7, #12]
 8014412:	f001 fa79 	bl	8015908 <USBD_LL_Transmit>

  return USBD_OK;
 8014416:	2300      	movs	r3, #0
}
 8014418:	4618      	mov	r0, r3
 801441a:	3710      	adds	r7, #16
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b084      	sub	sp, #16
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2203      	movs	r2, #3
 8014430:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	687a      	ldr	r2, [r7, #4]
 8014438:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	687a      	ldr	r2, [r7, #4]
 8014440:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	68ba      	ldr	r2, [r7, #8]
 8014448:	2100      	movs	r1, #0
 801444a:	68f8      	ldr	r0, [r7, #12]
 801444c:	f001 fa94 	bl	8015978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014450:	2300      	movs	r3, #0
}
 8014452:	4618      	mov	r0, r3
 8014454:	3710      	adds	r7, #16
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801445a:	b580      	push	{r7, lr}
 801445c:	b084      	sub	sp, #16
 801445e:	af00      	add	r7, sp, #0
 8014460:	60f8      	str	r0, [r7, #12]
 8014462:	60b9      	str	r1, [r7, #8]
 8014464:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	68ba      	ldr	r2, [r7, #8]
 801446a:	2100      	movs	r1, #0
 801446c:	68f8      	ldr	r0, [r7, #12]
 801446e:	f001 fa83 	bl	8015978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014472:	2300      	movs	r3, #0
}
 8014474:	4618      	mov	r0, r3
 8014476:	3710      	adds	r7, #16
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}

0801447c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2204      	movs	r2, #4
 8014488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801448c:	2300      	movs	r3, #0
 801448e:	2200      	movs	r2, #0
 8014490:	2100      	movs	r1, #0
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f001 fa38 	bl	8015908 <USBD_LL_Transmit>

  return USBD_OK;
 8014498:	2300      	movs	r3, #0
}
 801449a:	4618      	mov	r0, r3
 801449c:	3708      	adds	r7, #8
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b082      	sub	sp, #8
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	2205      	movs	r2, #5
 80144ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80144b2:	2300      	movs	r3, #0
 80144b4:	2200      	movs	r2, #0
 80144b6:	2100      	movs	r1, #0
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f001 fa5d 	bl	8015978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80144be:	2300      	movs	r3, #0
}
 80144c0:	4618      	mov	r0, r3
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f7f2 fca1 	bl	8006e18 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80144d6:	bf00      	nop
 80144d8:	3708      	adds	r7, #8
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}

080144de <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 80144de:	b580      	push	{r7, lr}
 80144e0:	b082      	sub	sp, #8
 80144e2:	af00      	add	r7, sp, #0
 80144e4:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 80144e6:	e002      	b.n	80144ee <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 80144e8:	2001      	movs	r0, #1
 80144ea:	f7ff ffed 	bl	80144c8 <SPIF_Delay>
  while (Handle->Lock)
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	7b1b      	ldrb	r3, [r3, #12]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d1f8      	bne.n	80144e8 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2201      	movs	r2, #1
 80144fa:	731a      	strb	r2, [r3, #12]
}
 80144fc:	bf00      	nop
 80144fe:	3708      	adds	r7, #8
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}

08014504 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8014504:	b480      	push	{r7}
 8014506:	b083      	sub	sp, #12
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2200      	movs	r2, #0
 8014510:	731a      	strb	r2, [r3, #12]
}
 8014512:	bf00      	nop
 8014514:	370c      	adds	r7, #12
 8014516:	46bd      	mov	sp, r7
 8014518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451c:	4770      	bx	lr

0801451e <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 801451e:	b580      	push	{r7, lr}
 8014520:	b084      	sub	sp, #16
 8014522:	af00      	add	r7, sp, #0
 8014524:	6078      	str	r0, [r7, #4]
 8014526:	460b      	mov	r3, r1
 8014528:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6858      	ldr	r0, [r3, #4]
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	691b      	ldr	r3, [r3, #16]
 8014532:	b29b      	uxth	r3, r3
 8014534:	78fa      	ldrb	r2, [r7, #3]
 8014536:	4619      	mov	r1, r3
 8014538:	f7f4 fdd6 	bl	80090e8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 801453c:	2300      	movs	r3, #0
 801453e:	60fb      	str	r3, [r7, #12]
 8014540:	e002      	b.n	8014548 <SPIF_CsPin+0x2a>
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	3301      	adds	r3, #1
 8014546:	60fb      	str	r3, [r7, #12]
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	2b09      	cmp	r3, #9
 801454c:	ddf9      	ble.n	8014542 <SPIF_CsPin+0x24>
}
 801454e:	bf00      	nop
 8014550:	bf00      	nop
 8014552:	3710      	adds	r7, #16
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}

08014558 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b086      	sub	sp, #24
 801455c:	af00      	add	r7, sp, #0
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	60b9      	str	r1, [r7, #8]
 8014562:	607a      	str	r2, [r7, #4]
 8014564:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8014566:	2300      	movs	r3, #0
 8014568:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 801456a:	f7f2 fc49 	bl	8006e00 <HAL_GetTick>
 801456e:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	6818      	ldr	r0, [r3, #0]
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	b29b      	uxth	r3, r3
 8014578:	687a      	ldr	r2, [r7, #4]
 801457a:	68b9      	ldr	r1, [r7, #8]
 801457c:	f7f8 fe12 	bl	800d1a4 <HAL_SPI_TransmitReceive_DMA>
 8014580:	4603      	mov	r3, r0
 8014582:	2b00      	cmp	r3, #0
 8014584:	d11a      	bne.n	80145bc <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8014586:	2001      	movs	r0, #1
 8014588:	f7ff ff9e 	bl	80144c8 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 801458c:	f7f2 fc38 	bl	8006e00 <HAL_GetTick>
 8014590:	4602      	mov	r2, r0
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	1ad3      	subs	r3, r2, r3
 8014596:	6a3a      	ldr	r2, [r7, #32]
 8014598:	429a      	cmp	r2, r3
 801459a:	d805      	bhi.n	80145a8 <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7f8 ff83 	bl	800d4ac <HAL_SPI_DMAStop>
        break;
 80145a6:	e009      	b.n	80145bc <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7f9 f8f7 	bl	800d7a0 <HAL_SPI_GetState>
 80145b2:	4603      	mov	r3, r0
 80145b4:	2b01      	cmp	r3, #1
 80145b6:	d1e6      	bne.n	8014586 <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 80145b8:	2301      	movs	r3, #1
 80145ba:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80145bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80145be:	4618      	mov	r0, r3
 80145c0:	3718      	adds	r7, #24
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}

080145c6 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 80145c6:	b580      	push	{r7, lr}
 80145c8:	b086      	sub	sp, #24
 80145ca:	af00      	add	r7, sp, #0
 80145cc:	60f8      	str	r0, [r7, #12]
 80145ce:	60b9      	str	r1, [r7, #8]
 80145d0:	607a      	str	r2, [r7, #4]
 80145d2:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80145d4:	2300      	movs	r3, #0
 80145d6:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80145d8:	f7f2 fc12 	bl	8006e00 <HAL_GetTick>
 80145dc:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	687a      	ldr	r2, [r7, #4]
 80145e4:	b292      	uxth	r2, r2
 80145e6:	68b9      	ldr	r1, [r7, #8]
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7f8 fbcb 	bl	800cd84 <HAL_SPI_Transmit_DMA>
 80145ee:	4603      	mov	r3, r0
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d11a      	bne.n	801462a <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80145f4:	2001      	movs	r0, #1
 80145f6:	f7ff ff67 	bl	80144c8 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80145fa:	f7f2 fc01 	bl	8006e00 <HAL_GetTick>
 80145fe:	4602      	mov	r2, r0
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	1ad3      	subs	r3, r2, r3
 8014604:	683a      	ldr	r2, [r7, #0]
 8014606:	429a      	cmp	r2, r3
 8014608:	d805      	bhi.n	8014616 <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	4618      	mov	r0, r3
 8014610:	f7f8 ff4c 	bl	800d4ac <HAL_SPI_DMAStop>
        break;
 8014614:	e009      	b.n	801462a <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	4618      	mov	r0, r3
 801461c:	f7f9 f8c0 	bl	800d7a0 <HAL_SPI_GetState>
 8014620:	4603      	mov	r3, r0
 8014622:	2b01      	cmp	r3, #1
 8014624:	d1e6      	bne.n	80145f4 <SPIF_Transmit+0x2e>
      {
        retVal = true;
 8014626:	2301      	movs	r3, #1
 8014628:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801462a:	7dfb      	ldrb	r3, [r7, #23]
}
 801462c:	4618      	mov	r0, r3
 801462e:	3718      	adds	r7, #24
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}

08014634 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b086      	sub	sp, #24
 8014638:	af00      	add	r7, sp, #0
 801463a:	60f8      	str	r0, [r7, #12]
 801463c:	60b9      	str	r1, [r7, #8]
 801463e:	607a      	str	r2, [r7, #4]
 8014640:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8014642:	2300      	movs	r3, #0
 8014644:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8014646:	f7f2 fbdb 	bl	8006e00 <HAL_GetTick>
 801464a:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	b292      	uxth	r2, r2
 8014654:	68b9      	ldr	r1, [r7, #8]
 8014656:	4618      	mov	r0, r3
 8014658:	f7f8 fc84 	bl	800cf64 <HAL_SPI_Receive_DMA>
 801465c:	4603      	mov	r3, r0
 801465e:	2b00      	cmp	r3, #0
 8014660:	d11a      	bne.n	8014698 <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 8014662:	2001      	movs	r0, #1
 8014664:	f7ff ff30 	bl	80144c8 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8014668:	f7f2 fbca 	bl	8006e00 <HAL_GetTick>
 801466c:	4602      	mov	r2, r0
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	1ad3      	subs	r3, r2, r3
 8014672:	683a      	ldr	r2, [r7, #0]
 8014674:	429a      	cmp	r2, r3
 8014676:	d805      	bhi.n	8014684 <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	4618      	mov	r0, r3
 801467e:	f7f8 ff15 	bl	800d4ac <HAL_SPI_DMAStop>
        break;
 8014682:	e009      	b.n	8014698 <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	4618      	mov	r0, r3
 801468a:	f7f9 f889 	bl	800d7a0 <HAL_SPI_GetState>
 801468e:	4603      	mov	r3, r0
 8014690:	2b01      	cmp	r3, #1
 8014692:	d1e6      	bne.n	8014662 <SPIF_Receive+0x2e>
      {
        retVal = true;
 8014694:	2301      	movs	r3, #1
 8014696:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8014698:	7dfb      	ldrb	r3, [r7, #23]
}
 801469a:	4618      	mov	r0, r3
 801469c:	3718      	adds	r7, #24
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 80146a2:	b580      	push	{r7, lr}
 80146a4:	b084      	sub	sp, #16
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80146aa:	2301      	movs	r3, #1
 80146ac:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 80146ae:	2306      	movs	r3, #6
 80146b0:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80146b2:	2100      	movs	r1, #0
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f7ff ff32 	bl	801451e <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80146ba:	f107 010c 	add.w	r1, r7, #12
 80146be:	2364      	movs	r3, #100	; 0x64
 80146c0:	2201      	movs	r2, #1
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f7ff ff7f 	bl	80145c6 <SPIF_Transmit>
 80146c8:	4603      	mov	r3, r0
 80146ca:	f083 0301 	eor.w	r3, r3, #1
 80146ce:	b2db      	uxtb	r3, r3
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d001      	beq.n	80146d8 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 80146d4:	2300      	movs	r3, #0
 80146d6:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 80146d8:	2101      	movs	r1, #1
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f7ff ff1f 	bl	801451e <SPIF_CsPin>
  return retVal;
 80146e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}

080146ea <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 80146ea:	b580      	push	{r7, lr}
 80146ec:	b084      	sub	sp, #16
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80146f2:	2301      	movs	r3, #1
 80146f4:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 80146f6:	2304      	movs	r3, #4
 80146f8:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80146fa:	2100      	movs	r1, #0
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f7ff ff0e 	bl	801451e <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8014702:	f107 010c 	add.w	r1, r7, #12
 8014706:	2364      	movs	r3, #100	; 0x64
 8014708:	2201      	movs	r2, #1
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f7ff ff5b 	bl	80145c6 <SPIF_Transmit>
 8014710:	4603      	mov	r3, r0
 8014712:	f083 0301 	eor.w	r3, r3, #1
 8014716:	b2db      	uxtb	r3, r3
 8014718:	2b00      	cmp	r3, #0
 801471a:	d001      	beq.n	8014720 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 801471c:	2300      	movs	r3, #0
 801471e:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8014720:	2101      	movs	r1, #1
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f7ff fefb 	bl	801451e <SPIF_CsPin>
  return retVal;
 8014728:	7bfb      	ldrb	r3, [r7, #15]
}
 801472a:	4618      	mov	r0, r3
 801472c:	3710      	adds	r7, #16
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8014732:	b580      	push	{r7, lr}
 8014734:	b086      	sub	sp, #24
 8014736:	af02      	add	r7, sp, #8
 8014738:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 801473a:	2300      	movs	r3, #0
 801473c:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 801473e:	f24a 5305 	movw	r3, #42245	; 0xa505
 8014742:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 8014744:	2100      	movs	r1, #0
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f7ff fee9 	bl	801451e <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 801474c:	f107 0208 	add.w	r2, r7, #8
 8014750:	f107 010c 	add.w	r1, r7, #12
 8014754:	2364      	movs	r3, #100	; 0x64
 8014756:	9300      	str	r3, [sp, #0]
 8014758:	2302      	movs	r3, #2
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	f7ff fefc 	bl	8014558 <SPIF_TransmitReceive>
 8014760:	4603      	mov	r3, r0
 8014762:	2b00      	cmp	r3, #0
 8014764:	d001      	beq.n	801476a <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 8014766:	7a7b      	ldrb	r3, [r7, #9]
 8014768:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 801476a:	2101      	movs	r1, #1
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f7ff fed6 	bl	801451e <SPIF_CsPin>
  return retVal;
 8014772:	7bfb      	ldrb	r3, [r7, #15]
}
 8014774:	4618      	mov	r0, r3
 8014776:	3710      	adds	r7, #16
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}

0801477c <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 8014786:	2300      	movs	r3, #0
 8014788:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 801478a:	f7f2 fb39 	bl	8006e00 <HAL_GetTick>
 801478e:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8014790:	2001      	movs	r0, #1
 8014792:	f7ff fe99 	bl	80144c8 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 8014796:	f7f2 fb33 	bl	8006e00 <HAL_GetTick>
 801479a:	4602      	mov	r2, r0
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	1ad3      	subs	r3, r2, r3
 80147a0:	683a      	ldr	r2, [r7, #0]
 80147a2:	429a      	cmp	r2, r3
 80147a4:	d90a      	bls.n	80147bc <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	f7ff ffc3 	bl	8014732 <SPIF_ReadReg1>
 80147ac:	4603      	mov	r3, r0
 80147ae:	f003 0301 	and.w	r3, r3, #1
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d1ec      	bne.n	8014790 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 80147b6:	2301      	movs	r3, #1
 80147b8:	73fb      	strb	r3, [r7, #15]
      break;
 80147ba:	e000      	b.n	80147be <SPIF_WaitForWriting+0x42>
      break;
 80147bc:	bf00      	nop
    }
  }
  return retVal;
 80147be:	7bfb      	ldrb	r3, [r7, #15]
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	3710      	adds	r7, #16
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b088      	sub	sp, #32
 80147cc:	af02      	add	r7, sp, #8
 80147ce:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 80147d0:	f06f 0360 	mvn.w	r3, #96	; 0x60
 80147d4:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 80147d6:	2300      	movs	r3, #0
 80147d8:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 80147da:	2100      	movs	r1, #0
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f7ff fe9e 	bl	801451e <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 80147e2:	f107 020c 	add.w	r2, r7, #12
 80147e6:	f107 0110 	add.w	r1, r7, #16
 80147ea:	2364      	movs	r3, #100	; 0x64
 80147ec:	9300      	str	r3, [sp, #0]
 80147ee:	2304      	movs	r3, #4
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7ff feb1 	bl	8014558 <SPIF_TransmitReceive>
 80147f6:	4603      	mov	r3, r0
 80147f8:	f083 0301 	eor.w	r3, r3, #1
 80147fc:	b2db      	uxtb	r3, r3
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d004      	beq.n	801480c <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8014802:	2101      	movs	r1, #1
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f7ff fe8a 	bl	801451e <SPIF_CsPin>
      break;
 801480a:	e16f      	b.n	8014aec <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 801480c:	2101      	movs	r1, #1
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f7ff fe85 	bl	801451e <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8014814:	7b7a      	ldrb	r2, [r7, #13]
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 801481a:	7bba      	ldrb	r2, [r7, #14]
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8014820:	7bfa      	ldrb	r2, [r7, #15]
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	7a1b      	ldrb	r3, [r3, #8]
 801482a:	2bef      	cmp	r3, #239	; 0xef
 801482c:	f000 80f0 	beq.w	8014a10 <SPIF_FindChip+0x248>
 8014830:	2bef      	cmp	r3, #239	; 0xef
 8014832:	f300 80e9 	bgt.w	8014a08 <SPIF_FindChip+0x240>
 8014836:	2bc8      	cmp	r3, #200	; 0xc8
 8014838:	f300 80e6 	bgt.w	8014a08 <SPIF_FindChip+0x240>
 801483c:	2b85      	cmp	r3, #133	; 0x85
 801483e:	da0c      	bge.n	801485a <SPIF_FindChip+0x92>
 8014840:	2b62      	cmp	r3, #98	; 0x62
 8014842:	f000 80e7 	beq.w	8014a14 <SPIF_FindChip+0x24c>
 8014846:	2b62      	cmp	r3, #98	; 0x62
 8014848:	f300 80de 	bgt.w	8014a08 <SPIF_FindChip+0x240>
 801484c:	2b20      	cmp	r3, #32
 801484e:	f300 80d9 	bgt.w	8014a04 <SPIF_FindChip+0x23c>
 8014852:	2b00      	cmp	r3, #0
 8014854:	f300 8090 	bgt.w	8014978 <SPIF_FindChip+0x1b0>
 8014858:	e0d6      	b.n	8014a08 <SPIF_FindChip+0x240>
 801485a:	3b85      	subs	r3, #133	; 0x85
 801485c:	2b43      	cmp	r3, #67	; 0x43
 801485e:	f200 80d3 	bhi.w	8014a08 <SPIF_FindChip+0x240>
 8014862:	a201      	add	r2, pc, #4	; (adr r2, 8014868 <SPIF_FindChip+0xa0>)
 8014864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014868:	08014a19 	.word	0x08014a19
 801486c:	08014a09 	.word	0x08014a09
 8014870:	08014a09 	.word	0x08014a09
 8014874:	08014a09 	.word	0x08014a09
 8014878:	08014a19 	.word	0x08014a19
 801487c:	08014a09 	.word	0x08014a09
 8014880:	08014a09 	.word	0x08014a09
 8014884:	08014a19 	.word	0x08014a19
 8014888:	08014a09 	.word	0x08014a09
 801488c:	08014a09 	.word	0x08014a09
 8014890:	08014a09 	.word	0x08014a09
 8014894:	08014a09 	.word	0x08014a09
 8014898:	08014a09 	.word	0x08014a09
 801489c:	08014a09 	.word	0x08014a09
 80148a0:	08014a09 	.word	0x08014a09
 80148a4:	08014a09 	.word	0x08014a09
 80148a8:	08014a09 	.word	0x08014a09
 80148ac:	08014a09 	.word	0x08014a09
 80148b0:	08014a09 	.word	0x08014a09
 80148b4:	08014a09 	.word	0x08014a09
 80148b8:	08014a09 	.word	0x08014a09
 80148bc:	08014a09 	.word	0x08014a09
 80148c0:	08014a09 	.word	0x08014a09
 80148c4:	08014a09 	.word	0x08014a09
 80148c8:	08014a19 	.word	0x08014a19
 80148cc:	08014a09 	.word	0x08014a09
 80148d0:	08014a09 	.word	0x08014a09
 80148d4:	08014a09 	.word	0x08014a09
 80148d8:	08014a19 	.word	0x08014a19
 80148dc:	08014a09 	.word	0x08014a09
 80148e0:	08014a09 	.word	0x08014a09
 80148e4:	08014a09 	.word	0x08014a09
 80148e8:	08014a09 	.word	0x08014a09
 80148ec:	08014a09 	.word	0x08014a09
 80148f0:	08014a09 	.word	0x08014a09
 80148f4:	08014a09 	.word	0x08014a09
 80148f8:	08014a09 	.word	0x08014a09
 80148fc:	08014a09 	.word	0x08014a09
 8014900:	08014a09 	.word	0x08014a09
 8014904:	08014a09 	.word	0x08014a09
 8014908:	08014a19 	.word	0x08014a19
 801490c:	08014a09 	.word	0x08014a09
 8014910:	08014a09 	.word	0x08014a09
 8014914:	08014a09 	.word	0x08014a09
 8014918:	08014a09 	.word	0x08014a09
 801491c:	08014a09 	.word	0x08014a09
 8014920:	08014a09 	.word	0x08014a09
 8014924:	08014a09 	.word	0x08014a09
 8014928:	08014a09 	.word	0x08014a09
 801492c:	08014a09 	.word	0x08014a09
 8014930:	08014a09 	.word	0x08014a09
 8014934:	08014a09 	.word	0x08014a09
 8014938:	08014a09 	.word	0x08014a09
 801493c:	08014a09 	.word	0x08014a09
 8014940:	08014a09 	.word	0x08014a09
 8014944:	08014a09 	.word	0x08014a09
 8014948:	08014a09 	.word	0x08014a09
 801494c:	08014a09 	.word	0x08014a09
 8014950:	08014a19 	.word	0x08014a19
 8014954:	08014a09 	.word	0x08014a09
 8014958:	08014a09 	.word	0x08014a09
 801495c:	08014a19 	.word	0x08014a19
 8014960:	08014a09 	.word	0x08014a09
 8014964:	08014a09 	.word	0x08014a09
 8014968:	08014a09 	.word	0x08014a09
 801496c:	08014a09 	.word	0x08014a09
 8014970:	08014a09 	.word	0x08014a09
 8014974:	08014a19 	.word	0x08014a19
 8014978:	3b01      	subs	r3, #1
 801497a:	2b1f      	cmp	r3, #31
 801497c:	d844      	bhi.n	8014a08 <SPIF_FindChip+0x240>
 801497e:	a201      	add	r2, pc, #4	; (adr r2, 8014984 <SPIF_FindChip+0x1bc>)
 8014980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014984:	08014a1d 	.word	0x08014a1d
 8014988:	08014a09 	.word	0x08014a09
 801498c:	08014a09 	.word	0x08014a09
 8014990:	08014a1d 	.word	0x08014a1d
 8014994:	08014a09 	.word	0x08014a09
 8014998:	08014a09 	.word	0x08014a09
 801499c:	08014a09 	.word	0x08014a09
 80149a0:	08014a09 	.word	0x08014a09
 80149a4:	08014a09 	.word	0x08014a09
 80149a8:	08014a09 	.word	0x08014a09
 80149ac:	08014a09 	.word	0x08014a09
 80149b0:	08014a09 	.word	0x08014a09
 80149b4:	08014a09 	.word	0x08014a09
 80149b8:	08014a09 	.word	0x08014a09
 80149bc:	08014a09 	.word	0x08014a09
 80149c0:	08014a09 	.word	0x08014a09
 80149c4:	08014a09 	.word	0x08014a09
 80149c8:	08014a09 	.word	0x08014a09
 80149cc:	08014a09 	.word	0x08014a09
 80149d0:	08014a09 	.word	0x08014a09
 80149d4:	08014a09 	.word	0x08014a09
 80149d8:	08014a09 	.word	0x08014a09
 80149dc:	08014a09 	.word	0x08014a09
 80149e0:	08014a09 	.word	0x08014a09
 80149e4:	08014a09 	.word	0x08014a09
 80149e8:	08014a09 	.word	0x08014a09
 80149ec:	08014a09 	.word	0x08014a09
 80149f0:	08014a1d 	.word	0x08014a1d
 80149f4:	08014a09 	.word	0x08014a09
 80149f8:	08014a09 	.word	0x08014a09
 80149fc:	08014a09 	.word	0x08014a09
 8014a00:	08014a1d 	.word	0x08014a1d
 8014a04:	2b37      	cmp	r3, #55	; 0x37
 8014a06:	d00b      	beq.n	8014a20 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8014a0e:	e008      	b.n	8014a22 <SPIF_FindChip+0x25a>
      break;
 8014a10:	bf00      	nop
 8014a12:	e006      	b.n	8014a22 <SPIF_FindChip+0x25a>
      break;
 8014a14:	bf00      	nop
 8014a16:	e004      	b.n	8014a22 <SPIF_FindChip+0x25a>
      break;
 8014a18:	bf00      	nop
 8014a1a:	e002      	b.n	8014a22 <SPIF_FindChip+0x25a>
      break;
 8014a1c:	bf00      	nop
 8014a1e:	e000      	b.n	8014a22 <SPIF_FindChip+0x25a>
      break;
 8014a20:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	7a5b      	ldrb	r3, [r3, #9]
 8014a26:	3b11      	subs	r3, #17
 8014a28:	2b0f      	cmp	r3, #15
 8014a2a:	d84e      	bhi.n	8014aca <SPIF_FindChip+0x302>
 8014a2c:	a201      	add	r2, pc, #4	; (adr r2, 8014a34 <SPIF_FindChip+0x26c>)
 8014a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a32:	bf00      	nop
 8014a34:	08014a75 	.word	0x08014a75
 8014a38:	08014a7d 	.word	0x08014a7d
 8014a3c:	08014a85 	.word	0x08014a85
 8014a40:	08014a8d 	.word	0x08014a8d
 8014a44:	08014a95 	.word	0x08014a95
 8014a48:	08014a9d 	.word	0x08014a9d
 8014a4c:	08014aa5 	.word	0x08014aa5
 8014a50:	08014aad 	.word	0x08014aad
 8014a54:	08014ab7 	.word	0x08014ab7
 8014a58:	08014acb 	.word	0x08014acb
 8014a5c:	08014acb 	.word	0x08014acb
 8014a60:	08014acb 	.word	0x08014acb
 8014a64:	08014acb 	.word	0x08014acb
 8014a68:	08014acb 	.word	0x08014acb
 8014a6c:	08014acb 	.word	0x08014acb
 8014a70:	08014ac1 	.word	0x08014ac1
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	2202      	movs	r2, #2
 8014a78:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8014a7a:	e02a      	b.n	8014ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2204      	movs	r2, #4
 8014a80:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 8014a82:	e026      	b.n	8014ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2208      	movs	r2, #8
 8014a88:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8014a8a:	e022      	b.n	8014ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2210      	movs	r2, #16
 8014a90:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 8014a92:	e01e      	b.n	8014ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2220      	movs	r2, #32
 8014a98:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8014a9a:	e01a      	b.n	8014ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2240      	movs	r2, #64	; 0x40
 8014aa0:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 8014aa2:	e016      	b.n	8014ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2280      	movs	r2, #128	; 0x80
 8014aa8:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8014aaa:	e012      	b.n	8014ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014ab2:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 8014ab4:	e00d      	b.n	8014ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014abc:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8014abe:	e008      	b.n	8014ad2 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014ac6:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8014ac8:	e003      	b.n	8014ad2 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2200      	movs	r2, #0
 8014ace:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8014ad0:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	69db      	ldr	r3, [r3, #28]
 8014ad6:	011a      	lsls	r2, r3, #4
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	699b      	ldr	r3, [r3, #24]
 8014ae0:	031b      	lsls	r3, r3, #12
 8014ae2:	0a1a      	lsrs	r2, r3, #8
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8014ae8:	2301      	movs	r3, #1
 8014aea:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8014aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3718      	adds	r7, #24
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop

08014af8 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b08a      	sub	sp, #40	; 0x28
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	60f8      	str	r0, [r7, #12]
 8014b00:	60b9      	str	r1, [r7, #8]
 8014b02:	607a      	str	r2, [r7, #4]
 8014b04:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8014b06:	2300      	movs	r3, #0
 8014b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	623b      	str	r3, [r7, #32]
 8014b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b12:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014b16:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	695b      	ldr	r3, [r3, #20]
 8014b1c:	68ba      	ldr	r2, [r7, #8]
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	f080 8084 	bcs.w	8014c2c <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8014b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b26:	2bff      	cmp	r3, #255	; 0xff
 8014b28:	f200 8082 	bhi.w	8014c30 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8014b2c:	683a      	ldr	r2, [r7, #0]
 8014b2e:	69fb      	ldr	r3, [r7, #28]
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d901      	bls.n	8014b38 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8014b34:	69fb      	ldr	r3, [r7, #28]
 8014b36:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	021b      	lsls	r3, r3, #8
 8014b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b3e:	4413      	add	r3, r2
 8014b40:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 8014b42:	68f8      	ldr	r0, [r7, #12]
 8014b44:	f7ff fdad 	bl	80146a2 <SPIF_WriteEnable>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	f083 0301 	eor.w	r3, r3, #1
 8014b4e:	b2db      	uxtb	r3, r3
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d16f      	bne.n	8014c34 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8014b54:	2100      	movs	r1, #0
 8014b56:	68f8      	ldr	r0, [r7, #12]
 8014b58:	f7ff fce1 	bl	801451e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	69db      	ldr	r3, [r3, #28]
 8014b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b64:	d322      	bcc.n	8014bac <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 8014b66:	2312      	movs	r3, #18
 8014b68:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8014b6a:	6a3b      	ldr	r3, [r7, #32]
 8014b6c:	0e1b      	lsrs	r3, r3, #24
 8014b6e:	b2db      	uxtb	r3, r3
 8014b70:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 8014b72:	6a3b      	ldr	r3, [r7, #32]
 8014b74:	0c1b      	lsrs	r3, r3, #16
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8014b7a:	6a3b      	ldr	r3, [r7, #32]
 8014b7c:	0a1b      	lsrs	r3, r3, #8
 8014b7e:	b2db      	uxtb	r3, r3
 8014b80:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 8014b82:	6a3b      	ldr	r3, [r7, #32]
 8014b84:	b2db      	uxtb	r3, r3
 8014b86:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8014b88:	f107 0114 	add.w	r1, r7, #20
 8014b8c:	2364      	movs	r3, #100	; 0x64
 8014b8e:	2205      	movs	r2, #5
 8014b90:	68f8      	ldr	r0, [r7, #12]
 8014b92:	f7ff fd18 	bl	80145c6 <SPIF_Transmit>
 8014b96:	4603      	mov	r3, r0
 8014b98:	f083 0301 	eor.w	r3, r3, #1
 8014b9c:	b2db      	uxtb	r3, r3
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d023      	beq.n	8014bea <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8014ba2:	2101      	movs	r1, #1
 8014ba4:	68f8      	ldr	r0, [r7, #12]
 8014ba6:	f7ff fcba 	bl	801451e <SPIF_CsPin>
        break;
 8014baa:	e044      	b.n	8014c36 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8014bac:	2302      	movs	r3, #2
 8014bae:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8014bb0:	6a3b      	ldr	r3, [r7, #32]
 8014bb2:	0c1b      	lsrs	r3, r3, #16
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8014bb8:	6a3b      	ldr	r3, [r7, #32]
 8014bba:	0a1b      	lsrs	r3, r3, #8
 8014bbc:	b2db      	uxtb	r3, r3
 8014bbe:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8014bc0:	6a3b      	ldr	r3, [r7, #32]
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8014bc6:	f107 0114 	add.w	r1, r7, #20
 8014bca:	2364      	movs	r3, #100	; 0x64
 8014bcc:	2204      	movs	r2, #4
 8014bce:	68f8      	ldr	r0, [r7, #12]
 8014bd0:	f7ff fcf9 	bl	80145c6 <SPIF_Transmit>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	f083 0301 	eor.w	r3, r3, #1
 8014bda:	b2db      	uxtb	r3, r3
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d004      	beq.n	8014bea <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8014be0:	2101      	movs	r1, #1
 8014be2:	68f8      	ldr	r0, [r7, #12]
 8014be4:	f7ff fc9b 	bl	801451e <SPIF_CsPin>
        break;
 8014be8:	e025      	b.n	8014c36 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8014bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014bee:	683a      	ldr	r2, [r7, #0]
 8014bf0:	6879      	ldr	r1, [r7, #4]
 8014bf2:	68f8      	ldr	r0, [r7, #12]
 8014bf4:	f7ff fce7 	bl	80145c6 <SPIF_Transmit>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	f083 0301 	eor.w	r3, r3, #1
 8014bfe:	b2db      	uxtb	r3, r3
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d004      	beq.n	8014c0e <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8014c04:	2101      	movs	r1, #1
 8014c06:	68f8      	ldr	r0, [r7, #12]
 8014c08:	f7ff fc89 	bl	801451e <SPIF_CsPin>
      break;
 8014c0c:	e013      	b.n	8014c36 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8014c0e:	2101      	movs	r1, #1
 8014c10:	68f8      	ldr	r0, [r7, #12]
 8014c12:	f7ff fc84 	bl	801451e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8014c16:	2164      	movs	r1, #100	; 0x64
 8014c18:	68f8      	ldr	r0, [r7, #12]
 8014c1a:	f7ff fdaf 	bl	801477c <SPIF_WaitForWriting>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d008      	beq.n	8014c36 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8014c24:	2301      	movs	r3, #1
 8014c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c2a:	e004      	b.n	8014c36 <SPIF_WriteFn+0x13e>
      break;
 8014c2c:	bf00      	nop
 8014c2e:	e002      	b.n	8014c36 <SPIF_WriteFn+0x13e>
      break;
 8014c30:	bf00      	nop
 8014c32:	e000      	b.n	8014c36 <SPIF_WriteFn+0x13e>
      break;
 8014c34:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8014c36:	68f8      	ldr	r0, [r7, #12]
 8014c38:	f7ff fd57 	bl	80146ea <SPIF_WriteDisable>
  return retVal;
 8014c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3728      	adds	r7, #40	; 0x28
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b086      	sub	sp, #24
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	60f8      	str	r0, [r7, #12]
 8014c50:	60b9      	str	r1, [r7, #8]
 8014c52:	607a      	str	r2, [r7, #4]
 8014c54:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8014c56:	2300      	movs	r3, #0
 8014c58:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8014c5a:	2100      	movs	r1, #0
 8014c5c:	68f8      	ldr	r0, [r7, #12]
 8014c5e:	f7ff fc5e 	bl	801451e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	69db      	ldr	r3, [r3, #28]
 8014c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c6a:	d322      	bcc.n	8014cb2 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8014c6c:	2313      	movs	r3, #19
 8014c6e:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8014c70:	68bb      	ldr	r3, [r7, #8]
 8014c72:	0e1b      	lsrs	r3, r3, #24
 8014c74:	b2db      	uxtb	r3, r3
 8014c76:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8014c78:	68bb      	ldr	r3, [r7, #8]
 8014c7a:	0c1b      	lsrs	r3, r3, #16
 8014c7c:	b2db      	uxtb	r3, r3
 8014c7e:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	0a1b      	lsrs	r3, r3, #8
 8014c84:	b2db      	uxtb	r3, r3
 8014c86:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	b2db      	uxtb	r3, r3
 8014c8c:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8014c8e:	f107 0110 	add.w	r1, r7, #16
 8014c92:	2364      	movs	r3, #100	; 0x64
 8014c94:	2205      	movs	r2, #5
 8014c96:	68f8      	ldr	r0, [r7, #12]
 8014c98:	f7ff fc95 	bl	80145c6 <SPIF_Transmit>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	f083 0301 	eor.w	r3, r3, #1
 8014ca2:	b2db      	uxtb	r3, r3
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d023      	beq.n	8014cf0 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8014ca8:	2101      	movs	r1, #1
 8014caa:	68f8      	ldr	r0, [r7, #12]
 8014cac:	f7ff fc37 	bl	801451e <SPIF_CsPin>
        break;
 8014cb0:	e036      	b.n	8014d20 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8014cb2:	2303      	movs	r3, #3
 8014cb4:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	0c1b      	lsrs	r3, r3, #16
 8014cba:	b2db      	uxtb	r3, r3
 8014cbc:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	0a1b      	lsrs	r3, r3, #8
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	b2db      	uxtb	r3, r3
 8014cca:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8014ccc:	f107 0110 	add.w	r1, r7, #16
 8014cd0:	2364      	movs	r3, #100	; 0x64
 8014cd2:	2204      	movs	r2, #4
 8014cd4:	68f8      	ldr	r0, [r7, #12]
 8014cd6:	f7ff fc76 	bl	80145c6 <SPIF_Transmit>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	f083 0301 	eor.w	r3, r3, #1
 8014ce0:	b2db      	uxtb	r3, r3
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d004      	beq.n	8014cf0 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8014ce6:	2101      	movs	r1, #1
 8014ce8:	68f8      	ldr	r0, [r7, #12]
 8014cea:	f7ff fc18 	bl	801451e <SPIF_CsPin>
        break;
 8014cee:	e017      	b.n	8014d20 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8014cf0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8014cf4:	683a      	ldr	r2, [r7, #0]
 8014cf6:	6879      	ldr	r1, [r7, #4]
 8014cf8:	68f8      	ldr	r0, [r7, #12]
 8014cfa:	f7ff fc9b 	bl	8014634 <SPIF_Receive>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	f083 0301 	eor.w	r3, r3, #1
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d004      	beq.n	8014d14 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8014d0a:	2101      	movs	r1, #1
 8014d0c:	68f8      	ldr	r0, [r7, #12]
 8014d0e:	f7ff fc06 	bl	801451e <SPIF_CsPin>
      break;
 8014d12:	e005      	b.n	8014d20 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8014d14:	2101      	movs	r1, #1
 8014d16:	68f8      	ldr	r0, [r7, #12]
 8014d18:	f7ff fc01 	bl	801451e <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8014d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3718      	adds	r7, #24
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}

08014d2a <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b086      	sub	sp, #24
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	60f8      	str	r0, [r7, #12]
 8014d32:	60b9      	str	r1, [r7, #8]
 8014d34:	607a      	str	r2, [r7, #4]
 8014d36:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d03a      	beq.n	8014db8 <SPIF_Init+0x8e>
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d037      	beq.n	8014db8 <SPIF_Init+0x8e>
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d034      	beq.n	8014db8 <SPIF_Init+0x8e>
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	7a9b      	ldrb	r3, [r3, #10]
 8014d52:	2b01      	cmp	r3, #1
 8014d54:	d030      	beq.n	8014db8 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8014d56:	2220      	movs	r2, #32
 8014d58:	2100      	movs	r1, #0
 8014d5a:	68f8      	ldr	r0, [r7, #12]
 8014d5c:	f002 fe41 	bl	80179e2 <memset>
    Handle->HSpi = HSpi;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	68ba      	ldr	r2, [r7, #8]
 8014d64:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	687a      	ldr	r2, [r7, #4]
 8014d6a:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8014d6c:	887a      	ldrh	r2, [r7, #2]
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8014d72:	2101      	movs	r1, #1
 8014d74:	68f8      	ldr	r0, [r7, #12]
 8014d76:	f7ff fbd2 	bl	801451e <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8014d7a:	e002      	b.n	8014d82 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8014d7c:	2001      	movs	r0, #1
 8014d7e:	f7ff fba3 	bl	80144c8 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8014d82:	f7f2 f83d 	bl	8006e00 <HAL_GetTick>
 8014d86:	4603      	mov	r3, r0
 8014d88:	2b13      	cmp	r3, #19
 8014d8a:	d9f7      	bls.n	8014d7c <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8014d8c:	68f8      	ldr	r0, [r7, #12]
 8014d8e:	f7ff fcac 	bl	80146ea <SPIF_WriteDisable>
 8014d92:	4603      	mov	r3, r0
 8014d94:	f083 0301 	eor.w	r3, r3, #1
 8014d98:	b2db      	uxtb	r3, r3
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d10b      	bne.n	8014db6 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8014d9e:	68f8      	ldr	r0, [r7, #12]
 8014da0:	f7ff fd12 	bl	80147c8 <SPIF_FindChip>
 8014da4:	4603      	mov	r3, r0
 8014da6:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8014da8:	7dfb      	ldrb	r3, [r7, #23]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d004      	beq.n	8014db8 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	2201      	movs	r2, #1
 8014db2:	729a      	strb	r2, [r3, #10]
 8014db4:	e000      	b.n	8014db8 <SPIF_Init+0x8e>
      break;
 8014db6:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8014db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3718      	adds	r7, #24
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8014dc2:	b580      	push	{r7, lr}
 8014dc4:	b086      	sub	sp, #24
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	6078      	str	r0, [r7, #4]
 8014dca:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f7ff fb86 	bl	80144de <SPIF_Lock>
  bool retVal = false;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	031b      	lsls	r3, r3, #12
 8014dda:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	699b      	ldr	r3, [r3, #24]
 8014de0:	683a      	ldr	r2, [r7, #0]
 8014de2:	429a      	cmp	r2, r3
 8014de4:	d262      	bcs.n	8014eac <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f7ff fc5b 	bl	80146a2 <SPIF_WriteEnable>
 8014dec:	4603      	mov	r3, r0
 8014dee:	f083 0301 	eor.w	r3, r3, #1
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d15b      	bne.n	8014eb0 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8014df8:	2100      	movs	r1, #0
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f7ff fb8f 	bl	801451e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	69db      	ldr	r3, [r3, #28]
 8014e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e08:	d322      	bcc.n	8014e50 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8014e0a:	2321      	movs	r3, #33	; 0x21
 8014e0c:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8014e0e:	693b      	ldr	r3, [r7, #16]
 8014e10:	0e1b      	lsrs	r3, r3, #24
 8014e12:	b2db      	uxtb	r3, r3
 8014e14:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	0c1b      	lsrs	r3, r3, #16
 8014e1a:	b2db      	uxtb	r3, r3
 8014e1c:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	0a1b      	lsrs	r3, r3, #8
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8014e26:	693b      	ldr	r3, [r7, #16]
 8014e28:	b2db      	uxtb	r3, r3
 8014e2a:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8014e2c:	f107 0108 	add.w	r1, r7, #8
 8014e30:	2364      	movs	r3, #100	; 0x64
 8014e32:	2205      	movs	r2, #5
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f7ff fbc6 	bl	80145c6 <SPIF_Transmit>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	f083 0301 	eor.w	r3, r3, #1
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d023      	beq.n	8014e8e <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8014e46:	2101      	movs	r1, #1
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f7ff fb68 	bl	801451e <SPIF_CsPin>
        break;
 8014e4e:	e030      	b.n	8014eb2 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8014e50:	2320      	movs	r3, #32
 8014e52:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	0c1b      	lsrs	r3, r3, #16
 8014e58:	b2db      	uxtb	r3, r3
 8014e5a:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8014e5c:	693b      	ldr	r3, [r7, #16]
 8014e5e:	0a1b      	lsrs	r3, r3, #8
 8014e60:	b2db      	uxtb	r3, r3
 8014e62:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8014e64:	693b      	ldr	r3, [r7, #16]
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8014e6a:	f107 0108 	add.w	r1, r7, #8
 8014e6e:	2364      	movs	r3, #100	; 0x64
 8014e70:	2204      	movs	r2, #4
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f7ff fba7 	bl	80145c6 <SPIF_Transmit>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	f083 0301 	eor.w	r3, r3, #1
 8014e7e:	b2db      	uxtb	r3, r3
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d004      	beq.n	8014e8e <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8014e84:	2101      	movs	r1, #1
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f7ff fb49 	bl	801451e <SPIF_CsPin>
        break;
 8014e8c:	e011      	b.n	8014eb2 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8014e8e:	2101      	movs	r1, #1
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7ff fb44 	bl	801451e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8014e96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f7ff fc6e 	bl	801477c <SPIF_WaitForWriting>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d005      	beq.n	8014eb2 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	75fb      	strb	r3, [r7, #23]
 8014eaa:	e002      	b.n	8014eb2 <SPIF_EraseSector+0xf0>
      break;
 8014eac:	bf00      	nop
 8014eae:	e000      	b.n	8014eb2 <SPIF_EraseSector+0xf0>
      break;
 8014eb0:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7ff fc19 	bl	80146ea <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f7ff fb23 	bl	8014504 <SPIF_UnLock>
  return retVal;
 8014ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	3718      	adds	r7, #24
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}

08014ec8 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b088      	sub	sp, #32
 8014ecc:	af02      	add	r7, sp, #8
 8014ece:	60f8      	str	r0, [r7, #12]
 8014ed0:	60b9      	str	r1, [r7, #8]
 8014ed2:	607a      	str	r2, [r7, #4]
 8014ed4:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8014ed6:	68f8      	ldr	r0, [r7, #12]
 8014ed8:	f7ff fb01 	bl	80144de <SPIF_Lock>
  bool retVal = false;
 8014edc:	2300      	movs	r3, #0
 8014ede:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8014ee0:	6a3b      	ldr	r3, [r7, #32]
 8014ee2:	9300      	str	r3, [sp, #0]
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	68b9      	ldr	r1, [r7, #8]
 8014eea:	68f8      	ldr	r0, [r7, #12]
 8014eec:	f7ff fe04 	bl	8014af8 <SPIF_WriteFn>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8014ef4:	68f8      	ldr	r0, [r7, #12]
 8014ef6:	f7ff fb05 	bl	8014504 <SPIF_UnLock>
  return retVal;
 8014efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	3718      	adds	r7, #24
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b088      	sub	sp, #32
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	60f8      	str	r0, [r7, #12]
 8014f0c:	60b9      	str	r1, [r7, #8]
 8014f0e:	607a      	str	r2, [r7, #4]
 8014f10:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8014f12:	68f8      	ldr	r0, [r7, #12]
 8014f14:	f7ff fae3 	bl	80144de <SPIF_Lock>
  bool retVal = false;
 8014f18:	2300      	movs	r3, #0
 8014f1a:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	021b      	lsls	r3, r3, #8
 8014f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f22:	4413      	add	r3, r2
 8014f24:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8014f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f28:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014f2c:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8014f2e:	683a      	ldr	r2, [r7, #0]
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	429a      	cmp	r2, r3
 8014f34:	d901      	bls.n	8014f3a <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	687a      	ldr	r2, [r7, #4]
 8014f3e:	69b9      	ldr	r1, [r7, #24]
 8014f40:	68f8      	ldr	r0, [r7, #12]
 8014f42:	f7ff fe81 	bl	8014c48 <SPIF_ReadFn>
 8014f46:	4603      	mov	r3, r0
 8014f48:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8014f4a:	68f8      	ldr	r0, [r7, #12]
 8014f4c:	f7ff fada 	bl	8014504 <SPIF_UnLock>
  return retVal;
 8014f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3720      	adds	r7, #32
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
	...

08014f5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014f60:	2200      	movs	r2, #0
 8014f62:	4912      	ldr	r1, [pc, #72]	; (8014fac <MX_USB_DEVICE_Init+0x50>)
 8014f64:	4812      	ldr	r0, [pc, #72]	; (8014fb0 <MX_USB_DEVICE_Init+0x54>)
 8014f66:	f7fe f81f 	bl	8012fa8 <USBD_Init>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d001      	beq.n	8014f74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014f70:	f7ec ffb9 	bl	8001ee6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014f74:	490f      	ldr	r1, [pc, #60]	; (8014fb4 <MX_USB_DEVICE_Init+0x58>)
 8014f76:	480e      	ldr	r0, [pc, #56]	; (8014fb0 <MX_USB_DEVICE_Init+0x54>)
 8014f78:	f7fe f846 	bl	8013008 <USBD_RegisterClass>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d001      	beq.n	8014f86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014f82:	f7ec ffb0 	bl	8001ee6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014f86:	490c      	ldr	r1, [pc, #48]	; (8014fb8 <MX_USB_DEVICE_Init+0x5c>)
 8014f88:	4809      	ldr	r0, [pc, #36]	; (8014fb0 <MX_USB_DEVICE_Init+0x54>)
 8014f8a:	f7fd ff3d 	bl	8012e08 <USBD_CDC_RegisterInterface>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d001      	beq.n	8014f98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014f94:	f7ec ffa7 	bl	8001ee6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014f98:	4805      	ldr	r0, [pc, #20]	; (8014fb0 <MX_USB_DEVICE_Init+0x54>)
 8014f9a:	f7fe f86b 	bl	8013074 <USBD_Start>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d001      	beq.n	8014fa8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014fa4:	f7ec ff9f 	bl	8001ee6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014fa8:	bf00      	nop
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	200000d0 	.word	0x200000d0
 8014fb0:	200013c8 	.word	0x200013c8
 8014fb4:	2000003c 	.word	0x2000003c
 8014fb8:	200000bc 	.word	0x200000bc

08014fbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	4905      	ldr	r1, [pc, #20]	; (8014fd8 <CDC_Init_FS+0x1c>)
 8014fc4:	4805      	ldr	r0, [pc, #20]	; (8014fdc <CDC_Init_FS+0x20>)
 8014fc6:	f7fd ff39 	bl	8012e3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014fca:	4905      	ldr	r1, [pc, #20]	; (8014fe0 <CDC_Init_FS+0x24>)
 8014fcc:	4803      	ldr	r0, [pc, #12]	; (8014fdc <CDC_Init_FS+0x20>)
 8014fce:	f7fd ff57 	bl	8012e80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014fd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	20001aa4 	.word	0x20001aa4
 8014fdc:	200013c8 	.word	0x200013c8
 8014fe0:	200016a4 	.word	0x200016a4

08014fe4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014fe4:	b480      	push	{r7}
 8014fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014fe8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014fea:	4618      	mov	r0, r3
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr

08014ff4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	6039      	str	r1, [r7, #0]
 8014ffe:	71fb      	strb	r3, [r7, #7]
 8015000:	4613      	mov	r3, r2
 8015002:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015004:	79fb      	ldrb	r3, [r7, #7]
 8015006:	2b23      	cmp	r3, #35	; 0x23
 8015008:	d84a      	bhi.n	80150a0 <CDC_Control_FS+0xac>
 801500a:	a201      	add	r2, pc, #4	; (adr r2, 8015010 <CDC_Control_FS+0x1c>)
 801500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015010:	080150a1 	.word	0x080150a1
 8015014:	080150a1 	.word	0x080150a1
 8015018:	080150a1 	.word	0x080150a1
 801501c:	080150a1 	.word	0x080150a1
 8015020:	080150a1 	.word	0x080150a1
 8015024:	080150a1 	.word	0x080150a1
 8015028:	080150a1 	.word	0x080150a1
 801502c:	080150a1 	.word	0x080150a1
 8015030:	080150a1 	.word	0x080150a1
 8015034:	080150a1 	.word	0x080150a1
 8015038:	080150a1 	.word	0x080150a1
 801503c:	080150a1 	.word	0x080150a1
 8015040:	080150a1 	.word	0x080150a1
 8015044:	080150a1 	.word	0x080150a1
 8015048:	080150a1 	.word	0x080150a1
 801504c:	080150a1 	.word	0x080150a1
 8015050:	080150a1 	.word	0x080150a1
 8015054:	080150a1 	.word	0x080150a1
 8015058:	080150a1 	.word	0x080150a1
 801505c:	080150a1 	.word	0x080150a1
 8015060:	080150a1 	.word	0x080150a1
 8015064:	080150a1 	.word	0x080150a1
 8015068:	080150a1 	.word	0x080150a1
 801506c:	080150a1 	.word	0x080150a1
 8015070:	080150a1 	.word	0x080150a1
 8015074:	080150a1 	.word	0x080150a1
 8015078:	080150a1 	.word	0x080150a1
 801507c:	080150a1 	.word	0x080150a1
 8015080:	080150a1 	.word	0x080150a1
 8015084:	080150a1 	.word	0x080150a1
 8015088:	080150a1 	.word	0x080150a1
 801508c:	080150a1 	.word	0x080150a1
 8015090:	080150a1 	.word	0x080150a1
 8015094:	080150a1 	.word	0x080150a1
 8015098:	080150a1 	.word	0x080150a1
 801509c:	080150a1 	.word	0x080150a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80150a0:	bf00      	nop
  }

  return (USBD_OK);
 80150a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	370c      	adds	r7, #12
 80150a8:	46bd      	mov	sp, r7
 80150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ae:	4770      	bx	lr

080150b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80150ba:	6879      	ldr	r1, [r7, #4]
 80150bc:	480f      	ldr	r0, [pc, #60]	; (80150fc <CDC_Receive_FS+0x4c>)
 80150be:	f7fd fedf 	bl	8012e80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80150c2:	480e      	ldr	r0, [pc, #56]	; (80150fc <CDC_Receive_FS+0x4c>)
 80150c4:	f7fd ff3a 	bl	8012f3c <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 80150c8:	2240      	movs	r2, #64	; 0x40
 80150ca:	2100      	movs	r1, #0
 80150cc:	480c      	ldr	r0, [pc, #48]	; (8015100 <CDC_Receive_FS+0x50>)
 80150ce:	f002 fc88 	bl	80179e2 <memset>
  uint8_t len = (uint8_t)*Len;
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 80150d8:	7bfb      	ldrb	r3, [r7, #15]
 80150da:	461a      	mov	r2, r3
 80150dc:	6879      	ldr	r1, [r7, #4]
 80150de:	4808      	ldr	r0, [pc, #32]	; (8015100 <CDC_Receive_FS+0x50>)
 80150e0:	f002 fd9b 	bl	8017c1a <memcpy>
  memset(Buf, '\0', len);
 80150e4:	7bfb      	ldrb	r3, [r7, #15]
 80150e6:	461a      	mov	r2, r3
 80150e8:	2100      	movs	r1, #0
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f002 fc79 	bl	80179e2 <memset>





  return (USBD_OK);
 80150f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3710      	adds	r7, #16
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
 80150fa:	bf00      	nop
 80150fc:	200013c8 	.word	0x200013c8
 8015100:	20000ab4 	.word	0x20000ab4

08015104 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	460b      	mov	r3, r1
 801510e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015110:	2300      	movs	r3, #0
 8015112:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015114:	4b0d      	ldr	r3, [pc, #52]	; (801514c <CDC_Transmit_FS+0x48>)
 8015116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801511a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015122:	2b00      	cmp	r3, #0
 8015124:	d001      	beq.n	801512a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015126:	2301      	movs	r3, #1
 8015128:	e00b      	b.n	8015142 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801512a:	887b      	ldrh	r3, [r7, #2]
 801512c:	461a      	mov	r2, r3
 801512e:	6879      	ldr	r1, [r7, #4]
 8015130:	4806      	ldr	r0, [pc, #24]	; (801514c <CDC_Transmit_FS+0x48>)
 8015132:	f7fd fe83 	bl	8012e3c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015136:	4805      	ldr	r0, [pc, #20]	; (801514c <CDC_Transmit_FS+0x48>)
 8015138:	f7fd fec0 	bl	8012ebc <USBD_CDC_TransmitPacket>
 801513c:	4603      	mov	r3, r0
 801513e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015140:	7bfb      	ldrb	r3, [r7, #15]
}
 8015142:	4618      	mov	r0, r3
 8015144:	3710      	adds	r7, #16
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
 801514a:	bf00      	nop
 801514c:	200013c8 	.word	0x200013c8

08015150 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015150:	b480      	push	{r7}
 8015152:	b087      	sub	sp, #28
 8015154:	af00      	add	r7, sp, #0
 8015156:	60f8      	str	r0, [r7, #12]
 8015158:	60b9      	str	r1, [r7, #8]
 801515a:	4613      	mov	r3, r2
 801515c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801515e:	2300      	movs	r3, #0
 8015160:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015166:	4618      	mov	r0, r3
 8015168:	371c      	adds	r7, #28
 801516a:	46bd      	mov	sp, r7
 801516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015170:	4770      	bx	lr
	...

08015174 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015174:	b480      	push	{r7}
 8015176:	b083      	sub	sp, #12
 8015178:	af00      	add	r7, sp, #0
 801517a:	4603      	mov	r3, r0
 801517c:	6039      	str	r1, [r7, #0]
 801517e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	2212      	movs	r2, #18
 8015184:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015186:	4b03      	ldr	r3, [pc, #12]	; (8015194 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015188:	4618      	mov	r0, r3
 801518a:	370c      	adds	r7, #12
 801518c:	46bd      	mov	sp, r7
 801518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015192:	4770      	bx	lr
 8015194:	200000f0 	.word	0x200000f0

08015198 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015198:	b480      	push	{r7}
 801519a:	b083      	sub	sp, #12
 801519c:	af00      	add	r7, sp, #0
 801519e:	4603      	mov	r3, r0
 80151a0:	6039      	str	r1, [r7, #0]
 80151a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	2204      	movs	r2, #4
 80151a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80151aa:	4b03      	ldr	r3, [pc, #12]	; (80151b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80151ac:	4618      	mov	r0, r3
 80151ae:	370c      	adds	r7, #12
 80151b0:	46bd      	mov	sp, r7
 80151b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b6:	4770      	bx	lr
 80151b8:	20000110 	.word	0x20000110

080151bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	4603      	mov	r3, r0
 80151c4:	6039      	str	r1, [r7, #0]
 80151c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80151c8:	79fb      	ldrb	r3, [r7, #7]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d105      	bne.n	80151da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80151ce:	683a      	ldr	r2, [r7, #0]
 80151d0:	4907      	ldr	r1, [pc, #28]	; (80151f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80151d2:	4808      	ldr	r0, [pc, #32]	; (80151f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80151d4:	f7ff f898 	bl	8014308 <USBD_GetString>
 80151d8:	e004      	b.n	80151e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80151da:	683a      	ldr	r2, [r7, #0]
 80151dc:	4904      	ldr	r1, [pc, #16]	; (80151f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80151de:	4805      	ldr	r0, [pc, #20]	; (80151f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80151e0:	f7ff f892 	bl	8014308 <USBD_GetString>
  }
  return USBD_StrDesc;
 80151e4:	4b02      	ldr	r3, [pc, #8]	; (80151f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3708      	adds	r7, #8
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	bf00      	nop
 80151f0:	20001ea4 	.word	0x20001ea4
 80151f4:	0801c548 	.word	0x0801c548

080151f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b082      	sub	sp, #8
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	4603      	mov	r3, r0
 8015200:	6039      	str	r1, [r7, #0]
 8015202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015204:	683a      	ldr	r2, [r7, #0]
 8015206:	4904      	ldr	r1, [pc, #16]	; (8015218 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015208:	4804      	ldr	r0, [pc, #16]	; (801521c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801520a:	f7ff f87d 	bl	8014308 <USBD_GetString>
  return USBD_StrDesc;
 801520e:	4b02      	ldr	r3, [pc, #8]	; (8015218 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015210:	4618      	mov	r0, r3
 8015212:	3708      	adds	r7, #8
 8015214:	46bd      	mov	sp, r7
 8015216:	bd80      	pop	{r7, pc}
 8015218:	20001ea4 	.word	0x20001ea4
 801521c:	0801c554 	.word	0x0801c554

08015220 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b082      	sub	sp, #8
 8015224:	af00      	add	r7, sp, #0
 8015226:	4603      	mov	r3, r0
 8015228:	6039      	str	r1, [r7, #0]
 801522a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	221a      	movs	r2, #26
 8015230:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015232:	f000 f855 	bl	80152e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015236:	4b02      	ldr	r3, [pc, #8]	; (8015240 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015238:	4618      	mov	r0, r3
 801523a:	3708      	adds	r7, #8
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}
 8015240:	20000114 	.word	0x20000114

08015244 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	4603      	mov	r3, r0
 801524c:	6039      	str	r1, [r7, #0]
 801524e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015250:	79fb      	ldrb	r3, [r7, #7]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d105      	bne.n	8015262 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015256:	683a      	ldr	r2, [r7, #0]
 8015258:	4907      	ldr	r1, [pc, #28]	; (8015278 <USBD_FS_ConfigStrDescriptor+0x34>)
 801525a:	4808      	ldr	r0, [pc, #32]	; (801527c <USBD_FS_ConfigStrDescriptor+0x38>)
 801525c:	f7ff f854 	bl	8014308 <USBD_GetString>
 8015260:	e004      	b.n	801526c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015262:	683a      	ldr	r2, [r7, #0]
 8015264:	4904      	ldr	r1, [pc, #16]	; (8015278 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015266:	4805      	ldr	r0, [pc, #20]	; (801527c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015268:	f7ff f84e 	bl	8014308 <USBD_GetString>
  }
  return USBD_StrDesc;
 801526c:	4b02      	ldr	r3, [pc, #8]	; (8015278 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801526e:	4618      	mov	r0, r3
 8015270:	3708      	adds	r7, #8
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}
 8015276:	bf00      	nop
 8015278:	20001ea4 	.word	0x20001ea4
 801527c:	0801c568 	.word	0x0801c568

08015280 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b082      	sub	sp, #8
 8015284:	af00      	add	r7, sp, #0
 8015286:	4603      	mov	r3, r0
 8015288:	6039      	str	r1, [r7, #0]
 801528a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801528c:	79fb      	ldrb	r3, [r7, #7]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d105      	bne.n	801529e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015292:	683a      	ldr	r2, [r7, #0]
 8015294:	4907      	ldr	r1, [pc, #28]	; (80152b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015296:	4808      	ldr	r0, [pc, #32]	; (80152b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015298:	f7ff f836 	bl	8014308 <USBD_GetString>
 801529c:	e004      	b.n	80152a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801529e:	683a      	ldr	r2, [r7, #0]
 80152a0:	4904      	ldr	r1, [pc, #16]	; (80152b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80152a2:	4805      	ldr	r0, [pc, #20]	; (80152b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80152a4:	f7ff f830 	bl	8014308 <USBD_GetString>
  }
  return USBD_StrDesc;
 80152a8:	4b02      	ldr	r3, [pc, #8]	; (80152b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	3708      	adds	r7, #8
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}
 80152b2:	bf00      	nop
 80152b4:	20001ea4 	.word	0x20001ea4
 80152b8:	0801c574 	.word	0x0801c574

080152bc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152bc:	b480      	push	{r7}
 80152be:	b083      	sub	sp, #12
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	4603      	mov	r3, r0
 80152c4:	6039      	str	r1, [r7, #0]
 80152c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	220c      	movs	r2, #12
 80152cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80152ce:	4b03      	ldr	r3, [pc, #12]	; (80152dc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	370c      	adds	r7, #12
 80152d4:	46bd      	mov	sp, r7
 80152d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152da:	4770      	bx	lr
 80152dc:	20000104 	.word	0x20000104

080152e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b084      	sub	sp, #16
 80152e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80152e6:	4b0f      	ldr	r3, [pc, #60]	; (8015324 <Get_SerialNum+0x44>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80152ec:	4b0e      	ldr	r3, [pc, #56]	; (8015328 <Get_SerialNum+0x48>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80152f2:	4b0e      	ldr	r3, [pc, #56]	; (801532c <Get_SerialNum+0x4c>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80152f8:	68fa      	ldr	r2, [r7, #12]
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	4413      	add	r3, r2
 80152fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d009      	beq.n	801531a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015306:	2208      	movs	r2, #8
 8015308:	4909      	ldr	r1, [pc, #36]	; (8015330 <Get_SerialNum+0x50>)
 801530a:	68f8      	ldr	r0, [r7, #12]
 801530c:	f000 f814 	bl	8015338 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015310:	2204      	movs	r2, #4
 8015312:	4908      	ldr	r1, [pc, #32]	; (8015334 <Get_SerialNum+0x54>)
 8015314:	68b8      	ldr	r0, [r7, #8]
 8015316:	f000 f80f 	bl	8015338 <IntToUnicode>
  }
}
 801531a:	bf00      	nop
 801531c:	3710      	adds	r7, #16
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}
 8015322:	bf00      	nop
 8015324:	1fff7590 	.word	0x1fff7590
 8015328:	1fff7594 	.word	0x1fff7594
 801532c:	1fff7598 	.word	0x1fff7598
 8015330:	20000116 	.word	0x20000116
 8015334:	20000126 	.word	0x20000126

08015338 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015338:	b480      	push	{r7}
 801533a:	b087      	sub	sp, #28
 801533c:	af00      	add	r7, sp, #0
 801533e:	60f8      	str	r0, [r7, #12]
 8015340:	60b9      	str	r1, [r7, #8]
 8015342:	4613      	mov	r3, r2
 8015344:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015346:	2300      	movs	r3, #0
 8015348:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801534a:	2300      	movs	r3, #0
 801534c:	75fb      	strb	r3, [r7, #23]
 801534e:	e027      	b.n	80153a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	0f1b      	lsrs	r3, r3, #28
 8015354:	2b09      	cmp	r3, #9
 8015356:	d80b      	bhi.n	8015370 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	0f1b      	lsrs	r3, r3, #28
 801535c:	b2da      	uxtb	r2, r3
 801535e:	7dfb      	ldrb	r3, [r7, #23]
 8015360:	005b      	lsls	r3, r3, #1
 8015362:	4619      	mov	r1, r3
 8015364:	68bb      	ldr	r3, [r7, #8]
 8015366:	440b      	add	r3, r1
 8015368:	3230      	adds	r2, #48	; 0x30
 801536a:	b2d2      	uxtb	r2, r2
 801536c:	701a      	strb	r2, [r3, #0]
 801536e:	e00a      	b.n	8015386 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	0f1b      	lsrs	r3, r3, #28
 8015374:	b2da      	uxtb	r2, r3
 8015376:	7dfb      	ldrb	r3, [r7, #23]
 8015378:	005b      	lsls	r3, r3, #1
 801537a:	4619      	mov	r1, r3
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	440b      	add	r3, r1
 8015380:	3237      	adds	r2, #55	; 0x37
 8015382:	b2d2      	uxtb	r2, r2
 8015384:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	011b      	lsls	r3, r3, #4
 801538a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801538c:	7dfb      	ldrb	r3, [r7, #23]
 801538e:	005b      	lsls	r3, r3, #1
 8015390:	3301      	adds	r3, #1
 8015392:	68ba      	ldr	r2, [r7, #8]
 8015394:	4413      	add	r3, r2
 8015396:	2200      	movs	r2, #0
 8015398:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801539a:	7dfb      	ldrb	r3, [r7, #23]
 801539c:	3301      	adds	r3, #1
 801539e:	75fb      	strb	r3, [r7, #23]
 80153a0:	7dfa      	ldrb	r2, [r7, #23]
 80153a2:	79fb      	ldrb	r3, [r7, #7]
 80153a4:	429a      	cmp	r2, r3
 80153a6:	d3d3      	bcc.n	8015350 <IntToUnicode+0x18>
  }
}
 80153a8:	bf00      	nop
 80153aa:	bf00      	nop
 80153ac:	371c      	adds	r7, #28
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr
	...

080153b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	4a0d      	ldr	r2, [pc, #52]	; (80153fc <HAL_PCD_MspInit+0x44>)
 80153c6:	4293      	cmp	r3, r2
 80153c8:	d113      	bne.n	80153f2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80153ca:	4b0d      	ldr	r3, [pc, #52]	; (8015400 <HAL_PCD_MspInit+0x48>)
 80153cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80153ce:	4a0c      	ldr	r2, [pc, #48]	; (8015400 <HAL_PCD_MspInit+0x48>)
 80153d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80153d4:	6593      	str	r3, [r2, #88]	; 0x58
 80153d6:	4b0a      	ldr	r3, [pc, #40]	; (8015400 <HAL_PCD_MspInit+0x48>)
 80153d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80153da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80153de:	60fb      	str	r3, [r7, #12]
 80153e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80153e2:	2200      	movs	r2, #0
 80153e4:	2100      	movs	r1, #0
 80153e6:	2043      	movs	r0, #67	; 0x43
 80153e8:	f7f3 f8d9 	bl	800859e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80153ec:	2043      	movs	r0, #67	; 0x43
 80153ee:	f7f3 f8f2 	bl	80085d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80153f2:	bf00      	nop
 80153f4:	3710      	adds	r7, #16
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	40006800 	.word	0x40006800
 8015400:	40021000 	.word	0x40021000

08015404 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b082      	sub	sp, #8
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8015418:	4619      	mov	r1, r3
 801541a:	4610      	mov	r0, r2
 801541c:	f7fd fe77 	bl	801310e <USBD_LL_SetupStage>
}
 8015420:	bf00      	nop
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	460b      	mov	r3, r1
 8015432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 801543a:	78fa      	ldrb	r2, [r7, #3]
 801543c:	6879      	ldr	r1, [r7, #4]
 801543e:	4613      	mov	r3, r2
 8015440:	009b      	lsls	r3, r3, #2
 8015442:	4413      	add	r3, r2
 8015444:	00db      	lsls	r3, r3, #3
 8015446:	440b      	add	r3, r1
 8015448:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801544c:	681a      	ldr	r2, [r3, #0]
 801544e:	78fb      	ldrb	r3, [r7, #3]
 8015450:	4619      	mov	r1, r3
 8015452:	f7fd feb1 	bl	80131b8 <USBD_LL_DataOutStage>
}
 8015456:	bf00      	nop
 8015458:	3708      	adds	r7, #8
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801545e:	b580      	push	{r7, lr}
 8015460:	b082      	sub	sp, #8
 8015462:	af00      	add	r7, sp, #0
 8015464:	6078      	str	r0, [r7, #4]
 8015466:	460b      	mov	r3, r1
 8015468:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8015470:	78fa      	ldrb	r2, [r7, #3]
 8015472:	6879      	ldr	r1, [r7, #4]
 8015474:	4613      	mov	r3, r2
 8015476:	009b      	lsls	r3, r3, #2
 8015478:	4413      	add	r3, r2
 801547a:	00db      	lsls	r3, r3, #3
 801547c:	440b      	add	r3, r1
 801547e:	333c      	adds	r3, #60	; 0x3c
 8015480:	681a      	ldr	r2, [r3, #0]
 8015482:	78fb      	ldrb	r3, [r7, #3]
 8015484:	4619      	mov	r1, r3
 8015486:	f7fd ff4a 	bl	801331e <USBD_LL_DataInStage>
}
 801548a:	bf00      	nop
 801548c:	3708      	adds	r7, #8
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}

08015492 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015492:	b580      	push	{r7, lr}
 8015494:	b082      	sub	sp, #8
 8015496:	af00      	add	r7, sp, #0
 8015498:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7fe f884 	bl	80135ae <USBD_LL_SOF>
}
 80154a6:	bf00      	nop
 80154a8:	3708      	adds	r7, #8
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bd80      	pop	{r7, pc}

080154ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154ae:	b580      	push	{r7, lr}
 80154b0:	b084      	sub	sp, #16
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80154b6:	2301      	movs	r3, #1
 80154b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	689b      	ldr	r3, [r3, #8]
 80154be:	2b02      	cmp	r3, #2
 80154c0:	d001      	beq.n	80154c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80154c2:	f7ec fd10 	bl	8001ee6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80154cc:	7bfa      	ldrb	r2, [r7, #15]
 80154ce:	4611      	mov	r1, r2
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7fe f828 	bl	8013526 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80154dc:	4618      	mov	r0, r3
 80154de:	f7fd ffd0 	bl	8013482 <USBD_LL_Reset>
}
 80154e2:	bf00      	nop
 80154e4:	3710      	adds	r7, #16
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
	...

080154ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b082      	sub	sp, #8
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80154fa:	4618      	mov	r0, r3
 80154fc:	f7fe f823 	bl	8013546 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	699b      	ldr	r3, [r3, #24]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d005      	beq.n	8015514 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015508:	4b04      	ldr	r3, [pc, #16]	; (801551c <HAL_PCD_SuspendCallback+0x30>)
 801550a:	691b      	ldr	r3, [r3, #16]
 801550c:	4a03      	ldr	r2, [pc, #12]	; (801551c <HAL_PCD_SuspendCallback+0x30>)
 801550e:	f043 0306 	orr.w	r3, r3, #6
 8015512:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015514:	bf00      	nop
 8015516:	3708      	adds	r7, #8
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}
 801551c:	e000ed00 	.word	0xe000ed00

08015520 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b082      	sub	sp, #8
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	699b      	ldr	r3, [r3, #24]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d007      	beq.n	8015540 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015530:	4b08      	ldr	r3, [pc, #32]	; (8015554 <HAL_PCD_ResumeCallback+0x34>)
 8015532:	691b      	ldr	r3, [r3, #16]
 8015534:	4a07      	ldr	r2, [pc, #28]	; (8015554 <HAL_PCD_ResumeCallback+0x34>)
 8015536:	f023 0306 	bic.w	r3, r3, #6
 801553a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801553c:	f000 fab6 	bl	8015aac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8015546:	4618      	mov	r0, r3
 8015548:	f7fe f819 	bl	801357e <USBD_LL_Resume>
}
 801554c:	bf00      	nop
 801554e:	3708      	adds	r7, #8
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}
 8015554:	e000ed00 	.word	0xe000ed00

08015558 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8015560:	f7f6 fa3c 	bl	800b9dc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8015564:	4a2b      	ldr	r2, [pc, #172]	; (8015614 <USBD_LL_Init+0xbc>)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	4a29      	ldr	r2, [pc, #164]	; (8015614 <USBD_LL_Init+0xbc>)
 8015570:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8015574:	4b27      	ldr	r3, [pc, #156]	; (8015614 <USBD_LL_Init+0xbc>)
 8015576:	4a28      	ldr	r2, [pc, #160]	; (8015618 <USBD_LL_Init+0xc0>)
 8015578:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801557a:	4b26      	ldr	r3, [pc, #152]	; (8015614 <USBD_LL_Init+0xbc>)
 801557c:	2208      	movs	r2, #8
 801557e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015580:	4b24      	ldr	r3, [pc, #144]	; (8015614 <USBD_LL_Init+0xbc>)
 8015582:	2202      	movs	r2, #2
 8015584:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015586:	4b23      	ldr	r3, [pc, #140]	; (8015614 <USBD_LL_Init+0xbc>)
 8015588:	2202      	movs	r2, #2
 801558a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801558c:	4b21      	ldr	r3, [pc, #132]	; (8015614 <USBD_LL_Init+0xbc>)
 801558e:	2200      	movs	r2, #0
 8015590:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015592:	4b20      	ldr	r3, [pc, #128]	; (8015614 <USBD_LL_Init+0xbc>)
 8015594:	2200      	movs	r2, #0
 8015596:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015598:	4b1e      	ldr	r3, [pc, #120]	; (8015614 <USBD_LL_Init+0xbc>)
 801559a:	2200      	movs	r2, #0
 801559c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801559e:	4b1d      	ldr	r3, [pc, #116]	; (8015614 <USBD_LL_Init+0xbc>)
 80155a0:	2200      	movs	r2, #0
 80155a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80155a4:	481b      	ldr	r0, [pc, #108]	; (8015614 <USBD_LL_Init+0xbc>)
 80155a6:	f7f4 fc37 	bl	8009e18 <HAL_PCD_Init>
 80155aa:	4603      	mov	r3, r0
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d001      	beq.n	80155b4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80155b0:	f7ec fc99 	bl	8001ee6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80155ba:	2318      	movs	r3, #24
 80155bc:	2200      	movs	r2, #0
 80155be:	2100      	movs	r1, #0
 80155c0:	f7f6 f93b 	bl	800b83a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80155ca:	2358      	movs	r3, #88	; 0x58
 80155cc:	2200      	movs	r2, #0
 80155ce:	2180      	movs	r1, #128	; 0x80
 80155d0:	f7f6 f933 	bl	800b83a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80155da:	23c0      	movs	r3, #192	; 0xc0
 80155dc:	2200      	movs	r2, #0
 80155de:	2181      	movs	r1, #129	; 0x81
 80155e0:	f7f6 f92b 	bl	800b83a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80155ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80155ee:	2200      	movs	r2, #0
 80155f0:	2101      	movs	r1, #1
 80155f2:	f7f6 f922 	bl	800b83a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80155fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015600:	2200      	movs	r2, #0
 8015602:	2182      	movs	r1, #130	; 0x82
 8015604:	f7f6 f919 	bl	800b83a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015608:	2300      	movs	r3, #0
}
 801560a:	4618      	mov	r0, r3
 801560c:	3708      	adds	r7, #8
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
 8015612:	bf00      	nop
 8015614:	200020a4 	.word	0x200020a4
 8015618:	40006800 	.word	0x40006800

0801561c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b084      	sub	sp, #16
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015624:	2300      	movs	r3, #0
 8015626:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015628:	2300      	movs	r3, #0
 801562a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015632:	4618      	mov	r0, r3
 8015634:	f7f4 fcf6 	bl	800a024 <HAL_PCD_Start>
 8015638:	4603      	mov	r3, r0
 801563a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801563c:	7bbb      	ldrb	r3, [r7, #14]
 801563e:	2b03      	cmp	r3, #3
 8015640:	d816      	bhi.n	8015670 <USBD_LL_Start+0x54>
 8015642:	a201      	add	r2, pc, #4	; (adr r2, 8015648 <USBD_LL_Start+0x2c>)
 8015644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015648:	08015659 	.word	0x08015659
 801564c:	0801565f 	.word	0x0801565f
 8015650:	08015665 	.word	0x08015665
 8015654:	0801566b 	.word	0x0801566b
    case HAL_OK :
      usb_status = USBD_OK;
 8015658:	2300      	movs	r3, #0
 801565a:	73fb      	strb	r3, [r7, #15]
    break;
 801565c:	e00b      	b.n	8015676 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801565e:	2303      	movs	r3, #3
 8015660:	73fb      	strb	r3, [r7, #15]
    break;
 8015662:	e008      	b.n	8015676 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015664:	2301      	movs	r3, #1
 8015666:	73fb      	strb	r3, [r7, #15]
    break;
 8015668:	e005      	b.n	8015676 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801566a:	2303      	movs	r3, #3
 801566c:	73fb      	strb	r3, [r7, #15]
    break;
 801566e:	e002      	b.n	8015676 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8015670:	2303      	movs	r3, #3
 8015672:	73fb      	strb	r3, [r7, #15]
    break;
 8015674:	bf00      	nop
  }
  return usb_status;
 8015676:	7bfb      	ldrb	r3, [r7, #15]
}
 8015678:	4618      	mov	r0, r3
 801567a:	3710      	adds	r7, #16
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}

08015680 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b084      	sub	sp, #16
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	4608      	mov	r0, r1
 801568a:	4611      	mov	r1, r2
 801568c:	461a      	mov	r2, r3
 801568e:	4603      	mov	r3, r0
 8015690:	70fb      	strb	r3, [r7, #3]
 8015692:	460b      	mov	r3, r1
 8015694:	70bb      	strb	r3, [r7, #2]
 8015696:	4613      	mov	r3, r2
 8015698:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801569a:	2300      	movs	r3, #0
 801569c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801569e:	2300      	movs	r3, #0
 80156a0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80156a8:	78bb      	ldrb	r3, [r7, #2]
 80156aa:	883a      	ldrh	r2, [r7, #0]
 80156ac:	78f9      	ldrb	r1, [r7, #3]
 80156ae:	f7f4 fe27 	bl	800a300 <HAL_PCD_EP_Open>
 80156b2:	4603      	mov	r3, r0
 80156b4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80156b6:	7bbb      	ldrb	r3, [r7, #14]
 80156b8:	2b03      	cmp	r3, #3
 80156ba:	d817      	bhi.n	80156ec <USBD_LL_OpenEP+0x6c>
 80156bc:	a201      	add	r2, pc, #4	; (adr r2, 80156c4 <USBD_LL_OpenEP+0x44>)
 80156be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156c2:	bf00      	nop
 80156c4:	080156d5 	.word	0x080156d5
 80156c8:	080156db 	.word	0x080156db
 80156cc:	080156e1 	.word	0x080156e1
 80156d0:	080156e7 	.word	0x080156e7
    case HAL_OK :
      usb_status = USBD_OK;
 80156d4:	2300      	movs	r3, #0
 80156d6:	73fb      	strb	r3, [r7, #15]
    break;
 80156d8:	e00b      	b.n	80156f2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80156da:	2303      	movs	r3, #3
 80156dc:	73fb      	strb	r3, [r7, #15]
    break;
 80156de:	e008      	b.n	80156f2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80156e0:	2301      	movs	r3, #1
 80156e2:	73fb      	strb	r3, [r7, #15]
    break;
 80156e4:	e005      	b.n	80156f2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80156e6:	2303      	movs	r3, #3
 80156e8:	73fb      	strb	r3, [r7, #15]
    break;
 80156ea:	e002      	b.n	80156f2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80156ec:	2303      	movs	r3, #3
 80156ee:	73fb      	strb	r3, [r7, #15]
    break;
 80156f0:	bf00      	nop
  }
  return usb_status;
 80156f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80156f4:	4618      	mov	r0, r3
 80156f6:	3710      	adds	r7, #16
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}

080156fc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b084      	sub	sp, #16
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	460b      	mov	r3, r1
 8015706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015708:	2300      	movs	r3, #0
 801570a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801570c:	2300      	movs	r3, #0
 801570e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015716:	78fa      	ldrb	r2, [r7, #3]
 8015718:	4611      	mov	r1, r2
 801571a:	4618      	mov	r0, r3
 801571c:	f7f4 fe4d 	bl	800a3ba <HAL_PCD_EP_Close>
 8015720:	4603      	mov	r3, r0
 8015722:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8015724:	7bbb      	ldrb	r3, [r7, #14]
 8015726:	2b03      	cmp	r3, #3
 8015728:	d816      	bhi.n	8015758 <USBD_LL_CloseEP+0x5c>
 801572a:	a201      	add	r2, pc, #4	; (adr r2, 8015730 <USBD_LL_CloseEP+0x34>)
 801572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015730:	08015741 	.word	0x08015741
 8015734:	08015747 	.word	0x08015747
 8015738:	0801574d 	.word	0x0801574d
 801573c:	08015753 	.word	0x08015753
    case HAL_OK :
      usb_status = USBD_OK;
 8015740:	2300      	movs	r3, #0
 8015742:	73fb      	strb	r3, [r7, #15]
    break;
 8015744:	e00b      	b.n	801575e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015746:	2303      	movs	r3, #3
 8015748:	73fb      	strb	r3, [r7, #15]
    break;
 801574a:	e008      	b.n	801575e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801574c:	2301      	movs	r3, #1
 801574e:	73fb      	strb	r3, [r7, #15]
    break;
 8015750:	e005      	b.n	801575e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015752:	2303      	movs	r3, #3
 8015754:	73fb      	strb	r3, [r7, #15]
    break;
 8015756:	e002      	b.n	801575e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8015758:	2303      	movs	r3, #3
 801575a:	73fb      	strb	r3, [r7, #15]
    break;
 801575c:	bf00      	nop
  }
  return usb_status;
 801575e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015760:	4618      	mov	r0, r3
 8015762:	3710      	adds	r7, #16
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}

08015768 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b084      	sub	sp, #16
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
 8015770:	460b      	mov	r3, r1
 8015772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015774:	2300      	movs	r3, #0
 8015776:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015778:	2300      	movs	r3, #0
 801577a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015782:	78fa      	ldrb	r2, [r7, #3]
 8015784:	4611      	mov	r1, r2
 8015786:	4618      	mov	r0, r3
 8015788:	f7f4 fedf 	bl	800a54a <HAL_PCD_EP_SetStall>
 801578c:	4603      	mov	r3, r0
 801578e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8015790:	7bbb      	ldrb	r3, [r7, #14]
 8015792:	2b03      	cmp	r3, #3
 8015794:	d816      	bhi.n	80157c4 <USBD_LL_StallEP+0x5c>
 8015796:	a201      	add	r2, pc, #4	; (adr r2, 801579c <USBD_LL_StallEP+0x34>)
 8015798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801579c:	080157ad 	.word	0x080157ad
 80157a0:	080157b3 	.word	0x080157b3
 80157a4:	080157b9 	.word	0x080157b9
 80157a8:	080157bf 	.word	0x080157bf
    case HAL_OK :
      usb_status = USBD_OK;
 80157ac:	2300      	movs	r3, #0
 80157ae:	73fb      	strb	r3, [r7, #15]
    break;
 80157b0:	e00b      	b.n	80157ca <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80157b2:	2303      	movs	r3, #3
 80157b4:	73fb      	strb	r3, [r7, #15]
    break;
 80157b6:	e008      	b.n	80157ca <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80157b8:	2301      	movs	r3, #1
 80157ba:	73fb      	strb	r3, [r7, #15]
    break;
 80157bc:	e005      	b.n	80157ca <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80157be:	2303      	movs	r3, #3
 80157c0:	73fb      	strb	r3, [r7, #15]
    break;
 80157c2:	e002      	b.n	80157ca <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80157c4:	2303      	movs	r3, #3
 80157c6:	73fb      	strb	r3, [r7, #15]
    break;
 80157c8:	bf00      	nop
  }
  return usb_status;
 80157ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	3710      	adds	r7, #16
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}

080157d4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b084      	sub	sp, #16
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
 80157dc:	460b      	mov	r3, r1
 80157de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157e0:	2300      	movs	r3, #0
 80157e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157e4:	2300      	movs	r3, #0
 80157e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80157ee:	78fa      	ldrb	r2, [r7, #3]
 80157f0:	4611      	mov	r1, r2
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7f4 ff09 	bl	800a60a <HAL_PCD_EP_ClrStall>
 80157f8:	4603      	mov	r3, r0
 80157fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80157fc:	7bbb      	ldrb	r3, [r7, #14]
 80157fe:	2b03      	cmp	r3, #3
 8015800:	d816      	bhi.n	8015830 <USBD_LL_ClearStallEP+0x5c>
 8015802:	a201      	add	r2, pc, #4	; (adr r2, 8015808 <USBD_LL_ClearStallEP+0x34>)
 8015804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015808:	08015819 	.word	0x08015819
 801580c:	0801581f 	.word	0x0801581f
 8015810:	08015825 	.word	0x08015825
 8015814:	0801582b 	.word	0x0801582b
    case HAL_OK :
      usb_status = USBD_OK;
 8015818:	2300      	movs	r3, #0
 801581a:	73fb      	strb	r3, [r7, #15]
    break;
 801581c:	e00b      	b.n	8015836 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801581e:	2303      	movs	r3, #3
 8015820:	73fb      	strb	r3, [r7, #15]
    break;
 8015822:	e008      	b.n	8015836 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015824:	2301      	movs	r3, #1
 8015826:	73fb      	strb	r3, [r7, #15]
    break;
 8015828:	e005      	b.n	8015836 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801582a:	2303      	movs	r3, #3
 801582c:	73fb      	strb	r3, [r7, #15]
    break;
 801582e:	e002      	b.n	8015836 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8015830:	2303      	movs	r3, #3
 8015832:	73fb      	strb	r3, [r7, #15]
    break;
 8015834:	bf00      	nop
  }
  return usb_status;
 8015836:	7bfb      	ldrb	r3, [r7, #15]
}
 8015838:	4618      	mov	r0, r3
 801583a:	3710      	adds	r7, #16
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}

08015840 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015840:	b480      	push	{r7}
 8015842:	b085      	sub	sp, #20
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
 8015848:	460b      	mov	r3, r1
 801584a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015852:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015858:	2b00      	cmp	r3, #0
 801585a:	da0c      	bge.n	8015876 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801585c:	78fb      	ldrb	r3, [r7, #3]
 801585e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015862:	68f9      	ldr	r1, [r7, #12]
 8015864:	1c5a      	adds	r2, r3, #1
 8015866:	4613      	mov	r3, r2
 8015868:	009b      	lsls	r3, r3, #2
 801586a:	4413      	add	r3, r2
 801586c:	00db      	lsls	r3, r3, #3
 801586e:	440b      	add	r3, r1
 8015870:	3302      	adds	r3, #2
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	e00b      	b.n	801588e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015876:	78fb      	ldrb	r3, [r7, #3]
 8015878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801587c:	68f9      	ldr	r1, [r7, #12]
 801587e:	4613      	mov	r3, r2
 8015880:	009b      	lsls	r3, r3, #2
 8015882:	4413      	add	r3, r2
 8015884:	00db      	lsls	r3, r3, #3
 8015886:	440b      	add	r3, r1
 8015888:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801588c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801588e:	4618      	mov	r0, r3
 8015890:	3714      	adds	r7, #20
 8015892:	46bd      	mov	sp, r7
 8015894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015898:	4770      	bx	lr
	...

0801589c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b084      	sub	sp, #16
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
 80158a4:	460b      	mov	r3, r1
 80158a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158a8:	2300      	movs	r3, #0
 80158aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158ac:	2300      	movs	r3, #0
 80158ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80158b6:	78fa      	ldrb	r2, [r7, #3]
 80158b8:	4611      	mov	r1, r2
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7f4 fcfb 	bl	800a2b6 <HAL_PCD_SetAddress>
 80158c0:	4603      	mov	r3, r0
 80158c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80158c4:	7bbb      	ldrb	r3, [r7, #14]
 80158c6:	2b03      	cmp	r3, #3
 80158c8:	d816      	bhi.n	80158f8 <USBD_LL_SetUSBAddress+0x5c>
 80158ca:	a201      	add	r2, pc, #4	; (adr r2, 80158d0 <USBD_LL_SetUSBAddress+0x34>)
 80158cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158d0:	080158e1 	.word	0x080158e1
 80158d4:	080158e7 	.word	0x080158e7
 80158d8:	080158ed 	.word	0x080158ed
 80158dc:	080158f3 	.word	0x080158f3
    case HAL_OK :
      usb_status = USBD_OK;
 80158e0:	2300      	movs	r3, #0
 80158e2:	73fb      	strb	r3, [r7, #15]
    break;
 80158e4:	e00b      	b.n	80158fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80158e6:	2303      	movs	r3, #3
 80158e8:	73fb      	strb	r3, [r7, #15]
    break;
 80158ea:	e008      	b.n	80158fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80158ec:	2301      	movs	r3, #1
 80158ee:	73fb      	strb	r3, [r7, #15]
    break;
 80158f0:	e005      	b.n	80158fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80158f2:	2303      	movs	r3, #3
 80158f4:	73fb      	strb	r3, [r7, #15]
    break;
 80158f6:	e002      	b.n	80158fe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80158f8:	2303      	movs	r3, #3
 80158fa:	73fb      	strb	r3, [r7, #15]
    break;
 80158fc:	bf00      	nop
  }
  return usb_status;
 80158fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015900:	4618      	mov	r0, r3
 8015902:	3710      	adds	r7, #16
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}

08015908 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b086      	sub	sp, #24
 801590c:	af00      	add	r7, sp, #0
 801590e:	60f8      	str	r0, [r7, #12]
 8015910:	607a      	str	r2, [r7, #4]
 8015912:	603b      	str	r3, [r7, #0]
 8015914:	460b      	mov	r3, r1
 8015916:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015918:	2300      	movs	r3, #0
 801591a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801591c:	2300      	movs	r3, #0
 801591e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015926:	7af9      	ldrb	r1, [r7, #11]
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	f7f4 fdd6 	bl	800a4dc <HAL_PCD_EP_Transmit>
 8015930:	4603      	mov	r3, r0
 8015932:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8015934:	7dbb      	ldrb	r3, [r7, #22]
 8015936:	2b03      	cmp	r3, #3
 8015938:	d816      	bhi.n	8015968 <USBD_LL_Transmit+0x60>
 801593a:	a201      	add	r2, pc, #4	; (adr r2, 8015940 <USBD_LL_Transmit+0x38>)
 801593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015940:	08015951 	.word	0x08015951
 8015944:	08015957 	.word	0x08015957
 8015948:	0801595d 	.word	0x0801595d
 801594c:	08015963 	.word	0x08015963
    case HAL_OK :
      usb_status = USBD_OK;
 8015950:	2300      	movs	r3, #0
 8015952:	75fb      	strb	r3, [r7, #23]
    break;
 8015954:	e00b      	b.n	801596e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015956:	2303      	movs	r3, #3
 8015958:	75fb      	strb	r3, [r7, #23]
    break;
 801595a:	e008      	b.n	801596e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801595c:	2301      	movs	r3, #1
 801595e:	75fb      	strb	r3, [r7, #23]
    break;
 8015960:	e005      	b.n	801596e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015962:	2303      	movs	r3, #3
 8015964:	75fb      	strb	r3, [r7, #23]
    break;
 8015966:	e002      	b.n	801596e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8015968:	2303      	movs	r3, #3
 801596a:	75fb      	strb	r3, [r7, #23]
    break;
 801596c:	bf00      	nop
  }
  return usb_status;
 801596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015970:	4618      	mov	r0, r3
 8015972:	3718      	adds	r7, #24
 8015974:	46bd      	mov	sp, r7
 8015976:	bd80      	pop	{r7, pc}

08015978 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b086      	sub	sp, #24
 801597c:	af00      	add	r7, sp, #0
 801597e:	60f8      	str	r0, [r7, #12]
 8015980:	607a      	str	r2, [r7, #4]
 8015982:	603b      	str	r3, [r7, #0]
 8015984:	460b      	mov	r3, r1
 8015986:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015988:	2300      	movs	r3, #0
 801598a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801598c:	2300      	movs	r3, #0
 801598e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015996:	7af9      	ldrb	r1, [r7, #11]
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	687a      	ldr	r2, [r7, #4]
 801599c:	f7f4 fd55 	bl	800a44a <HAL_PCD_EP_Receive>
 80159a0:	4603      	mov	r3, r0
 80159a2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80159a4:	7dbb      	ldrb	r3, [r7, #22]
 80159a6:	2b03      	cmp	r3, #3
 80159a8:	d816      	bhi.n	80159d8 <USBD_LL_PrepareReceive+0x60>
 80159aa:	a201      	add	r2, pc, #4	; (adr r2, 80159b0 <USBD_LL_PrepareReceive+0x38>)
 80159ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159b0:	080159c1 	.word	0x080159c1
 80159b4:	080159c7 	.word	0x080159c7
 80159b8:	080159cd 	.word	0x080159cd
 80159bc:	080159d3 	.word	0x080159d3
    case HAL_OK :
      usb_status = USBD_OK;
 80159c0:	2300      	movs	r3, #0
 80159c2:	75fb      	strb	r3, [r7, #23]
    break;
 80159c4:	e00b      	b.n	80159de <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80159c6:	2303      	movs	r3, #3
 80159c8:	75fb      	strb	r3, [r7, #23]
    break;
 80159ca:	e008      	b.n	80159de <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80159cc:	2301      	movs	r3, #1
 80159ce:	75fb      	strb	r3, [r7, #23]
    break;
 80159d0:	e005      	b.n	80159de <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80159d2:	2303      	movs	r3, #3
 80159d4:	75fb      	strb	r3, [r7, #23]
    break;
 80159d6:	e002      	b.n	80159de <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80159d8:	2303      	movs	r3, #3
 80159da:	75fb      	strb	r3, [r7, #23]
    break;
 80159dc:	bf00      	nop
  }
  return usb_status;
 80159de:	7dfb      	ldrb	r3, [r7, #23]
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3718      	adds	r7, #24
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b082      	sub	sp, #8
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
 80159f0:	460b      	mov	r3, r1
 80159f2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80159fa:	78fa      	ldrb	r2, [r7, #3]
 80159fc:	4611      	mov	r1, r2
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7f4 fd54 	bl	800a4ac <HAL_PCD_EP_GetRxCount>
 8015a04:	4603      	mov	r3, r0
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	3708      	adds	r7, #8
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd80      	pop	{r7, pc}
	...

08015a10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b082      	sub	sp, #8
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
 8015a18:	460b      	mov	r3, r1
 8015a1a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015a1c:	78fb      	ldrb	r3, [r7, #3]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d002      	beq.n	8015a28 <HAL_PCDEx_LPM_Callback+0x18>
 8015a22:	2b01      	cmp	r3, #1
 8015a24:	d013      	beq.n	8015a4e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8015a26:	e023      	b.n	8015a70 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	699b      	ldr	r3, [r3, #24]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d007      	beq.n	8015a40 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015a30:	f000 f83c 	bl	8015aac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015a34:	4b10      	ldr	r3, [pc, #64]	; (8015a78 <HAL_PCDEx_LPM_Callback+0x68>)
 8015a36:	691b      	ldr	r3, [r3, #16]
 8015a38:	4a0f      	ldr	r2, [pc, #60]	; (8015a78 <HAL_PCDEx_LPM_Callback+0x68>)
 8015a3a:	f023 0306 	bic.w	r3, r3, #6
 8015a3e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8015a46:	4618      	mov	r0, r3
 8015a48:	f7fd fd99 	bl	801357e <USBD_LL_Resume>
    break;
 8015a4c:	e010      	b.n	8015a70 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7fd fd76 	bl	8013546 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	699b      	ldr	r3, [r3, #24]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d005      	beq.n	8015a6e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015a62:	4b05      	ldr	r3, [pc, #20]	; (8015a78 <HAL_PCDEx_LPM_Callback+0x68>)
 8015a64:	691b      	ldr	r3, [r3, #16]
 8015a66:	4a04      	ldr	r2, [pc, #16]	; (8015a78 <HAL_PCDEx_LPM_Callback+0x68>)
 8015a68:	f043 0306 	orr.w	r3, r3, #6
 8015a6c:	6113      	str	r3, [r2, #16]
    break;
 8015a6e:	bf00      	nop
}
 8015a70:	bf00      	nop
 8015a72:	3708      	adds	r7, #8
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	e000ed00 	.word	0xe000ed00

08015a7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	b083      	sub	sp, #12
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015a84:	4b03      	ldr	r3, [pc, #12]	; (8015a94 <USBD_static_malloc+0x18>)
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	370c      	adds	r7, #12
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a90:	4770      	bx	lr
 8015a92:	bf00      	nop
 8015a94:	2000239c 	.word	0x2000239c

08015a98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015a98:	b480      	push	{r7}
 8015a9a:	b083      	sub	sp, #12
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]

}
 8015aa0:	bf00      	nop
 8015aa2:	370c      	adds	r7, #12
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aaa:	4770      	bx	lr

08015aac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015ab0:	f7ec f998 	bl	8001de4 <SystemClock_Config>
}
 8015ab4:	bf00      	nop
 8015ab6:	bd80      	pop	{r7, pc}

08015ab8 <atoi>:
 8015ab8:	220a      	movs	r2, #10
 8015aba:	2100      	movs	r1, #0
 8015abc:	f000 bfb8 	b.w	8016a30 <strtol>

08015ac0 <malloc>:
 8015ac0:	4b02      	ldr	r3, [pc, #8]	; (8015acc <malloc+0xc>)
 8015ac2:	4601      	mov	r1, r0
 8015ac4:	6818      	ldr	r0, [r3, #0]
 8015ac6:	f000 b82b 	b.w	8015b20 <_malloc_r>
 8015aca:	bf00      	nop
 8015acc:	200002f4 	.word	0x200002f4

08015ad0 <free>:
 8015ad0:	4b02      	ldr	r3, [pc, #8]	; (8015adc <free+0xc>)
 8015ad2:	4601      	mov	r1, r0
 8015ad4:	6818      	ldr	r0, [r3, #0]
 8015ad6:	f002 bf55 	b.w	8018984 <_free_r>
 8015ada:	bf00      	nop
 8015adc:	200002f4 	.word	0x200002f4

08015ae0 <sbrk_aligned>:
 8015ae0:	b570      	push	{r4, r5, r6, lr}
 8015ae2:	4e0e      	ldr	r6, [pc, #56]	; (8015b1c <sbrk_aligned+0x3c>)
 8015ae4:	460c      	mov	r4, r1
 8015ae6:	6831      	ldr	r1, [r6, #0]
 8015ae8:	4605      	mov	r5, r0
 8015aea:	b911      	cbnz	r1, 8015af2 <sbrk_aligned+0x12>
 8015aec:	f002 f83e 	bl	8017b6c <_sbrk_r>
 8015af0:	6030      	str	r0, [r6, #0]
 8015af2:	4621      	mov	r1, r4
 8015af4:	4628      	mov	r0, r5
 8015af6:	f002 f839 	bl	8017b6c <_sbrk_r>
 8015afa:	1c43      	adds	r3, r0, #1
 8015afc:	d00a      	beq.n	8015b14 <sbrk_aligned+0x34>
 8015afe:	1cc4      	adds	r4, r0, #3
 8015b00:	f024 0403 	bic.w	r4, r4, #3
 8015b04:	42a0      	cmp	r0, r4
 8015b06:	d007      	beq.n	8015b18 <sbrk_aligned+0x38>
 8015b08:	1a21      	subs	r1, r4, r0
 8015b0a:	4628      	mov	r0, r5
 8015b0c:	f002 f82e 	bl	8017b6c <_sbrk_r>
 8015b10:	3001      	adds	r0, #1
 8015b12:	d101      	bne.n	8015b18 <sbrk_aligned+0x38>
 8015b14:	f04f 34ff 	mov.w	r4, #4294967295
 8015b18:	4620      	mov	r0, r4
 8015b1a:	bd70      	pop	{r4, r5, r6, pc}
 8015b1c:	200025c0 	.word	0x200025c0

08015b20 <_malloc_r>:
 8015b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b24:	1ccd      	adds	r5, r1, #3
 8015b26:	f025 0503 	bic.w	r5, r5, #3
 8015b2a:	3508      	adds	r5, #8
 8015b2c:	2d0c      	cmp	r5, #12
 8015b2e:	bf38      	it	cc
 8015b30:	250c      	movcc	r5, #12
 8015b32:	2d00      	cmp	r5, #0
 8015b34:	4607      	mov	r7, r0
 8015b36:	db01      	blt.n	8015b3c <_malloc_r+0x1c>
 8015b38:	42a9      	cmp	r1, r5
 8015b3a:	d905      	bls.n	8015b48 <_malloc_r+0x28>
 8015b3c:	230c      	movs	r3, #12
 8015b3e:	603b      	str	r3, [r7, #0]
 8015b40:	2600      	movs	r6, #0
 8015b42:	4630      	mov	r0, r6
 8015b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015c1c <_malloc_r+0xfc>
 8015b4c:	f000 f868 	bl	8015c20 <__malloc_lock>
 8015b50:	f8d8 3000 	ldr.w	r3, [r8]
 8015b54:	461c      	mov	r4, r3
 8015b56:	bb5c      	cbnz	r4, 8015bb0 <_malloc_r+0x90>
 8015b58:	4629      	mov	r1, r5
 8015b5a:	4638      	mov	r0, r7
 8015b5c:	f7ff ffc0 	bl	8015ae0 <sbrk_aligned>
 8015b60:	1c43      	adds	r3, r0, #1
 8015b62:	4604      	mov	r4, r0
 8015b64:	d155      	bne.n	8015c12 <_malloc_r+0xf2>
 8015b66:	f8d8 4000 	ldr.w	r4, [r8]
 8015b6a:	4626      	mov	r6, r4
 8015b6c:	2e00      	cmp	r6, #0
 8015b6e:	d145      	bne.n	8015bfc <_malloc_r+0xdc>
 8015b70:	2c00      	cmp	r4, #0
 8015b72:	d048      	beq.n	8015c06 <_malloc_r+0xe6>
 8015b74:	6823      	ldr	r3, [r4, #0]
 8015b76:	4631      	mov	r1, r6
 8015b78:	4638      	mov	r0, r7
 8015b7a:	eb04 0903 	add.w	r9, r4, r3
 8015b7e:	f001 fff5 	bl	8017b6c <_sbrk_r>
 8015b82:	4581      	cmp	r9, r0
 8015b84:	d13f      	bne.n	8015c06 <_malloc_r+0xe6>
 8015b86:	6821      	ldr	r1, [r4, #0]
 8015b88:	1a6d      	subs	r5, r5, r1
 8015b8a:	4629      	mov	r1, r5
 8015b8c:	4638      	mov	r0, r7
 8015b8e:	f7ff ffa7 	bl	8015ae0 <sbrk_aligned>
 8015b92:	3001      	adds	r0, #1
 8015b94:	d037      	beq.n	8015c06 <_malloc_r+0xe6>
 8015b96:	6823      	ldr	r3, [r4, #0]
 8015b98:	442b      	add	r3, r5
 8015b9a:	6023      	str	r3, [r4, #0]
 8015b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d038      	beq.n	8015c16 <_malloc_r+0xf6>
 8015ba4:	685a      	ldr	r2, [r3, #4]
 8015ba6:	42a2      	cmp	r2, r4
 8015ba8:	d12b      	bne.n	8015c02 <_malloc_r+0xe2>
 8015baa:	2200      	movs	r2, #0
 8015bac:	605a      	str	r2, [r3, #4]
 8015bae:	e00f      	b.n	8015bd0 <_malloc_r+0xb0>
 8015bb0:	6822      	ldr	r2, [r4, #0]
 8015bb2:	1b52      	subs	r2, r2, r5
 8015bb4:	d41f      	bmi.n	8015bf6 <_malloc_r+0xd6>
 8015bb6:	2a0b      	cmp	r2, #11
 8015bb8:	d917      	bls.n	8015bea <_malloc_r+0xca>
 8015bba:	1961      	adds	r1, r4, r5
 8015bbc:	42a3      	cmp	r3, r4
 8015bbe:	6025      	str	r5, [r4, #0]
 8015bc0:	bf18      	it	ne
 8015bc2:	6059      	strne	r1, [r3, #4]
 8015bc4:	6863      	ldr	r3, [r4, #4]
 8015bc6:	bf08      	it	eq
 8015bc8:	f8c8 1000 	streq.w	r1, [r8]
 8015bcc:	5162      	str	r2, [r4, r5]
 8015bce:	604b      	str	r3, [r1, #4]
 8015bd0:	4638      	mov	r0, r7
 8015bd2:	f104 060b 	add.w	r6, r4, #11
 8015bd6:	f000 f829 	bl	8015c2c <__malloc_unlock>
 8015bda:	f026 0607 	bic.w	r6, r6, #7
 8015bde:	1d23      	adds	r3, r4, #4
 8015be0:	1af2      	subs	r2, r6, r3
 8015be2:	d0ae      	beq.n	8015b42 <_malloc_r+0x22>
 8015be4:	1b9b      	subs	r3, r3, r6
 8015be6:	50a3      	str	r3, [r4, r2]
 8015be8:	e7ab      	b.n	8015b42 <_malloc_r+0x22>
 8015bea:	42a3      	cmp	r3, r4
 8015bec:	6862      	ldr	r2, [r4, #4]
 8015bee:	d1dd      	bne.n	8015bac <_malloc_r+0x8c>
 8015bf0:	f8c8 2000 	str.w	r2, [r8]
 8015bf4:	e7ec      	b.n	8015bd0 <_malloc_r+0xb0>
 8015bf6:	4623      	mov	r3, r4
 8015bf8:	6864      	ldr	r4, [r4, #4]
 8015bfa:	e7ac      	b.n	8015b56 <_malloc_r+0x36>
 8015bfc:	4634      	mov	r4, r6
 8015bfe:	6876      	ldr	r6, [r6, #4]
 8015c00:	e7b4      	b.n	8015b6c <_malloc_r+0x4c>
 8015c02:	4613      	mov	r3, r2
 8015c04:	e7cc      	b.n	8015ba0 <_malloc_r+0x80>
 8015c06:	230c      	movs	r3, #12
 8015c08:	603b      	str	r3, [r7, #0]
 8015c0a:	4638      	mov	r0, r7
 8015c0c:	f000 f80e 	bl	8015c2c <__malloc_unlock>
 8015c10:	e797      	b.n	8015b42 <_malloc_r+0x22>
 8015c12:	6025      	str	r5, [r4, #0]
 8015c14:	e7dc      	b.n	8015bd0 <_malloc_r+0xb0>
 8015c16:	605b      	str	r3, [r3, #4]
 8015c18:	deff      	udf	#255	; 0xff
 8015c1a:	bf00      	nop
 8015c1c:	200025bc 	.word	0x200025bc

08015c20 <__malloc_lock>:
 8015c20:	4801      	ldr	r0, [pc, #4]	; (8015c28 <__malloc_lock+0x8>)
 8015c22:	f001 bff0 	b.w	8017c06 <__retarget_lock_acquire_recursive>
 8015c26:	bf00      	nop
 8015c28:	20002704 	.word	0x20002704

08015c2c <__malloc_unlock>:
 8015c2c:	4801      	ldr	r0, [pc, #4]	; (8015c34 <__malloc_unlock+0x8>)
 8015c2e:	f001 bfeb 	b.w	8017c08 <__retarget_lock_release_recursive>
 8015c32:	bf00      	nop
 8015c34:	20002704 	.word	0x20002704

08015c38 <sulp>:
 8015c38:	b570      	push	{r4, r5, r6, lr}
 8015c3a:	4604      	mov	r4, r0
 8015c3c:	460d      	mov	r5, r1
 8015c3e:	ec45 4b10 	vmov	d0, r4, r5
 8015c42:	4616      	mov	r6, r2
 8015c44:	f003 fdc0 	bl	80197c8 <__ulp>
 8015c48:	ec51 0b10 	vmov	r0, r1, d0
 8015c4c:	b17e      	cbz	r6, 8015c6e <sulp+0x36>
 8015c4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015c52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	dd09      	ble.n	8015c6e <sulp+0x36>
 8015c5a:	051b      	lsls	r3, r3, #20
 8015c5c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015c60:	2400      	movs	r4, #0
 8015c62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015c66:	4622      	mov	r2, r4
 8015c68:	462b      	mov	r3, r5
 8015c6a:	f7ea fcc5 	bl	80005f8 <__aeabi_dmul>
 8015c6e:	bd70      	pop	{r4, r5, r6, pc}

08015c70 <_strtod_l>:
 8015c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c74:	ed2d 8b02 	vpush	{d8}
 8015c78:	b09b      	sub	sp, #108	; 0x6c
 8015c7a:	4604      	mov	r4, r0
 8015c7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8015c7e:	2200      	movs	r2, #0
 8015c80:	9216      	str	r2, [sp, #88]	; 0x58
 8015c82:	460d      	mov	r5, r1
 8015c84:	f04f 0800 	mov.w	r8, #0
 8015c88:	f04f 0900 	mov.w	r9, #0
 8015c8c:	460a      	mov	r2, r1
 8015c8e:	9215      	str	r2, [sp, #84]	; 0x54
 8015c90:	7811      	ldrb	r1, [r2, #0]
 8015c92:	292b      	cmp	r1, #43	; 0x2b
 8015c94:	d04c      	beq.n	8015d30 <_strtod_l+0xc0>
 8015c96:	d83a      	bhi.n	8015d0e <_strtod_l+0x9e>
 8015c98:	290d      	cmp	r1, #13
 8015c9a:	d834      	bhi.n	8015d06 <_strtod_l+0x96>
 8015c9c:	2908      	cmp	r1, #8
 8015c9e:	d834      	bhi.n	8015d0a <_strtod_l+0x9a>
 8015ca0:	2900      	cmp	r1, #0
 8015ca2:	d03d      	beq.n	8015d20 <_strtod_l+0xb0>
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	920a      	str	r2, [sp, #40]	; 0x28
 8015ca8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015caa:	7832      	ldrb	r2, [r6, #0]
 8015cac:	2a30      	cmp	r2, #48	; 0x30
 8015cae:	f040 80b4 	bne.w	8015e1a <_strtod_l+0x1aa>
 8015cb2:	7872      	ldrb	r2, [r6, #1]
 8015cb4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015cb8:	2a58      	cmp	r2, #88	; 0x58
 8015cba:	d170      	bne.n	8015d9e <_strtod_l+0x12e>
 8015cbc:	9302      	str	r3, [sp, #8]
 8015cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cc0:	9301      	str	r3, [sp, #4]
 8015cc2:	ab16      	add	r3, sp, #88	; 0x58
 8015cc4:	9300      	str	r3, [sp, #0]
 8015cc6:	4a8e      	ldr	r2, [pc, #568]	; (8015f00 <_strtod_l+0x290>)
 8015cc8:	ab17      	add	r3, sp, #92	; 0x5c
 8015cca:	a915      	add	r1, sp, #84	; 0x54
 8015ccc:	4620      	mov	r0, r4
 8015cce:	f002 ff0d 	bl	8018aec <__gethex>
 8015cd2:	f010 070f 	ands.w	r7, r0, #15
 8015cd6:	4605      	mov	r5, r0
 8015cd8:	d005      	beq.n	8015ce6 <_strtod_l+0x76>
 8015cda:	2f06      	cmp	r7, #6
 8015cdc:	d12a      	bne.n	8015d34 <_strtod_l+0xc4>
 8015cde:	3601      	adds	r6, #1
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	9615      	str	r6, [sp, #84]	; 0x54
 8015ce4:	930a      	str	r3, [sp, #40]	; 0x28
 8015ce6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	f040 857f 	bne.w	80167ec <_strtod_l+0xb7c>
 8015cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cf0:	b1db      	cbz	r3, 8015d2a <_strtod_l+0xba>
 8015cf2:	4642      	mov	r2, r8
 8015cf4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015cf8:	ec43 2b10 	vmov	d0, r2, r3
 8015cfc:	b01b      	add	sp, #108	; 0x6c
 8015cfe:	ecbd 8b02 	vpop	{d8}
 8015d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d06:	2920      	cmp	r1, #32
 8015d08:	d1cc      	bne.n	8015ca4 <_strtod_l+0x34>
 8015d0a:	3201      	adds	r2, #1
 8015d0c:	e7bf      	b.n	8015c8e <_strtod_l+0x1e>
 8015d0e:	292d      	cmp	r1, #45	; 0x2d
 8015d10:	d1c8      	bne.n	8015ca4 <_strtod_l+0x34>
 8015d12:	2101      	movs	r1, #1
 8015d14:	910a      	str	r1, [sp, #40]	; 0x28
 8015d16:	1c51      	adds	r1, r2, #1
 8015d18:	9115      	str	r1, [sp, #84]	; 0x54
 8015d1a:	7852      	ldrb	r2, [r2, #1]
 8015d1c:	2a00      	cmp	r2, #0
 8015d1e:	d1c3      	bne.n	8015ca8 <_strtod_l+0x38>
 8015d20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d22:	9515      	str	r5, [sp, #84]	; 0x54
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	f040 855f 	bne.w	80167e8 <_strtod_l+0xb78>
 8015d2a:	4642      	mov	r2, r8
 8015d2c:	464b      	mov	r3, r9
 8015d2e:	e7e3      	b.n	8015cf8 <_strtod_l+0x88>
 8015d30:	2100      	movs	r1, #0
 8015d32:	e7ef      	b.n	8015d14 <_strtod_l+0xa4>
 8015d34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015d36:	b13a      	cbz	r2, 8015d48 <_strtod_l+0xd8>
 8015d38:	2135      	movs	r1, #53	; 0x35
 8015d3a:	a818      	add	r0, sp, #96	; 0x60
 8015d3c:	f003 fe41 	bl	80199c2 <__copybits>
 8015d40:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015d42:	4620      	mov	r0, r4
 8015d44:	f003 fa14 	bl	8019170 <_Bfree>
 8015d48:	3f01      	subs	r7, #1
 8015d4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015d4c:	2f04      	cmp	r7, #4
 8015d4e:	d806      	bhi.n	8015d5e <_strtod_l+0xee>
 8015d50:	e8df f007 	tbb	[pc, r7]
 8015d54:	201d0314 	.word	0x201d0314
 8015d58:	14          	.byte	0x14
 8015d59:	00          	.byte	0x00
 8015d5a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8015d5e:	05e9      	lsls	r1, r5, #23
 8015d60:	bf48      	it	mi
 8015d62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8015d66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015d6a:	0d1b      	lsrs	r3, r3, #20
 8015d6c:	051b      	lsls	r3, r3, #20
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d1b9      	bne.n	8015ce6 <_strtod_l+0x76>
 8015d72:	f001 ff1d 	bl	8017bb0 <__errno>
 8015d76:	2322      	movs	r3, #34	; 0x22
 8015d78:	6003      	str	r3, [r0, #0]
 8015d7a:	e7b4      	b.n	8015ce6 <_strtod_l+0x76>
 8015d7c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8015d80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015d84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015d88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015d8c:	e7e7      	b.n	8015d5e <_strtod_l+0xee>
 8015d8e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015f08 <_strtod_l+0x298>
 8015d92:	e7e4      	b.n	8015d5e <_strtod_l+0xee>
 8015d94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015d98:	f04f 38ff 	mov.w	r8, #4294967295
 8015d9c:	e7df      	b.n	8015d5e <_strtod_l+0xee>
 8015d9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015da0:	1c5a      	adds	r2, r3, #1
 8015da2:	9215      	str	r2, [sp, #84]	; 0x54
 8015da4:	785b      	ldrb	r3, [r3, #1]
 8015da6:	2b30      	cmp	r3, #48	; 0x30
 8015da8:	d0f9      	beq.n	8015d9e <_strtod_l+0x12e>
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d09b      	beq.n	8015ce6 <_strtod_l+0x76>
 8015dae:	2301      	movs	r3, #1
 8015db0:	f04f 0a00 	mov.w	sl, #0
 8015db4:	9304      	str	r3, [sp, #16]
 8015db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015db8:	930b      	str	r3, [sp, #44]	; 0x2c
 8015dba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015dbe:	46d3      	mov	fp, sl
 8015dc0:	220a      	movs	r2, #10
 8015dc2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015dc4:	7806      	ldrb	r6, [r0, #0]
 8015dc6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015dca:	b2d9      	uxtb	r1, r3
 8015dcc:	2909      	cmp	r1, #9
 8015dce:	d926      	bls.n	8015e1e <_strtod_l+0x1ae>
 8015dd0:	494c      	ldr	r1, [pc, #304]	; (8015f04 <_strtod_l+0x294>)
 8015dd2:	2201      	movs	r2, #1
 8015dd4:	f001 fe0d 	bl	80179f2 <strncmp>
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	d030      	beq.n	8015e3e <_strtod_l+0x1ce>
 8015ddc:	2000      	movs	r0, #0
 8015dde:	4632      	mov	r2, r6
 8015de0:	9005      	str	r0, [sp, #20]
 8015de2:	465e      	mov	r6, fp
 8015de4:	4603      	mov	r3, r0
 8015de6:	2a65      	cmp	r2, #101	; 0x65
 8015de8:	d001      	beq.n	8015dee <_strtod_l+0x17e>
 8015dea:	2a45      	cmp	r2, #69	; 0x45
 8015dec:	d113      	bne.n	8015e16 <_strtod_l+0x1a6>
 8015dee:	b91e      	cbnz	r6, 8015df8 <_strtod_l+0x188>
 8015df0:	9a04      	ldr	r2, [sp, #16]
 8015df2:	4302      	orrs	r2, r0
 8015df4:	d094      	beq.n	8015d20 <_strtod_l+0xb0>
 8015df6:	2600      	movs	r6, #0
 8015df8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015dfa:	1c6a      	adds	r2, r5, #1
 8015dfc:	9215      	str	r2, [sp, #84]	; 0x54
 8015dfe:	786a      	ldrb	r2, [r5, #1]
 8015e00:	2a2b      	cmp	r2, #43	; 0x2b
 8015e02:	d074      	beq.n	8015eee <_strtod_l+0x27e>
 8015e04:	2a2d      	cmp	r2, #45	; 0x2d
 8015e06:	d078      	beq.n	8015efa <_strtod_l+0x28a>
 8015e08:	f04f 0c00 	mov.w	ip, #0
 8015e0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015e10:	2909      	cmp	r1, #9
 8015e12:	d97f      	bls.n	8015f14 <_strtod_l+0x2a4>
 8015e14:	9515      	str	r5, [sp, #84]	; 0x54
 8015e16:	2700      	movs	r7, #0
 8015e18:	e09e      	b.n	8015f58 <_strtod_l+0x2e8>
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	e7c8      	b.n	8015db0 <_strtod_l+0x140>
 8015e1e:	f1bb 0f08 	cmp.w	fp, #8
 8015e22:	bfd8      	it	le
 8015e24:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8015e26:	f100 0001 	add.w	r0, r0, #1
 8015e2a:	bfda      	itte	le
 8015e2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8015e30:	9309      	strle	r3, [sp, #36]	; 0x24
 8015e32:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8015e36:	f10b 0b01 	add.w	fp, fp, #1
 8015e3a:	9015      	str	r0, [sp, #84]	; 0x54
 8015e3c:	e7c1      	b.n	8015dc2 <_strtod_l+0x152>
 8015e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e40:	1c5a      	adds	r2, r3, #1
 8015e42:	9215      	str	r2, [sp, #84]	; 0x54
 8015e44:	785a      	ldrb	r2, [r3, #1]
 8015e46:	f1bb 0f00 	cmp.w	fp, #0
 8015e4a:	d037      	beq.n	8015ebc <_strtod_l+0x24c>
 8015e4c:	9005      	str	r0, [sp, #20]
 8015e4e:	465e      	mov	r6, fp
 8015e50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015e54:	2b09      	cmp	r3, #9
 8015e56:	d912      	bls.n	8015e7e <_strtod_l+0x20e>
 8015e58:	2301      	movs	r3, #1
 8015e5a:	e7c4      	b.n	8015de6 <_strtod_l+0x176>
 8015e5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e5e:	1c5a      	adds	r2, r3, #1
 8015e60:	9215      	str	r2, [sp, #84]	; 0x54
 8015e62:	785a      	ldrb	r2, [r3, #1]
 8015e64:	3001      	adds	r0, #1
 8015e66:	2a30      	cmp	r2, #48	; 0x30
 8015e68:	d0f8      	beq.n	8015e5c <_strtod_l+0x1ec>
 8015e6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015e6e:	2b08      	cmp	r3, #8
 8015e70:	f200 84c1 	bhi.w	80167f6 <_strtod_l+0xb86>
 8015e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e76:	9005      	str	r0, [sp, #20]
 8015e78:	2000      	movs	r0, #0
 8015e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e7c:	4606      	mov	r6, r0
 8015e7e:	3a30      	subs	r2, #48	; 0x30
 8015e80:	f100 0301 	add.w	r3, r0, #1
 8015e84:	d014      	beq.n	8015eb0 <_strtod_l+0x240>
 8015e86:	9905      	ldr	r1, [sp, #20]
 8015e88:	4419      	add	r1, r3
 8015e8a:	9105      	str	r1, [sp, #20]
 8015e8c:	4633      	mov	r3, r6
 8015e8e:	eb00 0c06 	add.w	ip, r0, r6
 8015e92:	210a      	movs	r1, #10
 8015e94:	4563      	cmp	r3, ip
 8015e96:	d113      	bne.n	8015ec0 <_strtod_l+0x250>
 8015e98:	1833      	adds	r3, r6, r0
 8015e9a:	2b08      	cmp	r3, #8
 8015e9c:	f106 0601 	add.w	r6, r6, #1
 8015ea0:	4406      	add	r6, r0
 8015ea2:	dc1a      	bgt.n	8015eda <_strtod_l+0x26a>
 8015ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ea6:	230a      	movs	r3, #10
 8015ea8:	fb03 2301 	mla	r3, r3, r1, r2
 8015eac:	9309      	str	r3, [sp, #36]	; 0x24
 8015eae:	2300      	movs	r3, #0
 8015eb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015eb2:	1c51      	adds	r1, r2, #1
 8015eb4:	9115      	str	r1, [sp, #84]	; 0x54
 8015eb6:	7852      	ldrb	r2, [r2, #1]
 8015eb8:	4618      	mov	r0, r3
 8015eba:	e7c9      	b.n	8015e50 <_strtod_l+0x1e0>
 8015ebc:	4658      	mov	r0, fp
 8015ebe:	e7d2      	b.n	8015e66 <_strtod_l+0x1f6>
 8015ec0:	2b08      	cmp	r3, #8
 8015ec2:	f103 0301 	add.w	r3, r3, #1
 8015ec6:	dc03      	bgt.n	8015ed0 <_strtod_l+0x260>
 8015ec8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015eca:	434f      	muls	r7, r1
 8015ecc:	9709      	str	r7, [sp, #36]	; 0x24
 8015ece:	e7e1      	b.n	8015e94 <_strtod_l+0x224>
 8015ed0:	2b10      	cmp	r3, #16
 8015ed2:	bfd8      	it	le
 8015ed4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015ed8:	e7dc      	b.n	8015e94 <_strtod_l+0x224>
 8015eda:	2e10      	cmp	r6, #16
 8015edc:	bfdc      	itt	le
 8015ede:	230a      	movle	r3, #10
 8015ee0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8015ee4:	e7e3      	b.n	8015eae <_strtod_l+0x23e>
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	9305      	str	r3, [sp, #20]
 8015eea:	2301      	movs	r3, #1
 8015eec:	e780      	b.n	8015df0 <_strtod_l+0x180>
 8015eee:	f04f 0c00 	mov.w	ip, #0
 8015ef2:	1caa      	adds	r2, r5, #2
 8015ef4:	9215      	str	r2, [sp, #84]	; 0x54
 8015ef6:	78aa      	ldrb	r2, [r5, #2]
 8015ef8:	e788      	b.n	8015e0c <_strtod_l+0x19c>
 8015efa:	f04f 0c01 	mov.w	ip, #1
 8015efe:	e7f8      	b.n	8015ef2 <_strtod_l+0x282>
 8015f00:	0801e188 	.word	0x0801e188
 8015f04:	0801e184 	.word	0x0801e184
 8015f08:	7ff00000 	.word	0x7ff00000
 8015f0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015f0e:	1c51      	adds	r1, r2, #1
 8015f10:	9115      	str	r1, [sp, #84]	; 0x54
 8015f12:	7852      	ldrb	r2, [r2, #1]
 8015f14:	2a30      	cmp	r2, #48	; 0x30
 8015f16:	d0f9      	beq.n	8015f0c <_strtod_l+0x29c>
 8015f18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015f1c:	2908      	cmp	r1, #8
 8015f1e:	f63f af7a 	bhi.w	8015e16 <_strtod_l+0x1a6>
 8015f22:	3a30      	subs	r2, #48	; 0x30
 8015f24:	9208      	str	r2, [sp, #32]
 8015f26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015f28:	920c      	str	r2, [sp, #48]	; 0x30
 8015f2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015f2c:	1c57      	adds	r7, r2, #1
 8015f2e:	9715      	str	r7, [sp, #84]	; 0x54
 8015f30:	7852      	ldrb	r2, [r2, #1]
 8015f32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015f36:	f1be 0f09 	cmp.w	lr, #9
 8015f3a:	d938      	bls.n	8015fae <_strtod_l+0x33e>
 8015f3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015f3e:	1a7f      	subs	r7, r7, r1
 8015f40:	2f08      	cmp	r7, #8
 8015f42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015f46:	dc03      	bgt.n	8015f50 <_strtod_l+0x2e0>
 8015f48:	9908      	ldr	r1, [sp, #32]
 8015f4a:	428f      	cmp	r7, r1
 8015f4c:	bfa8      	it	ge
 8015f4e:	460f      	movge	r7, r1
 8015f50:	f1bc 0f00 	cmp.w	ip, #0
 8015f54:	d000      	beq.n	8015f58 <_strtod_l+0x2e8>
 8015f56:	427f      	negs	r7, r7
 8015f58:	2e00      	cmp	r6, #0
 8015f5a:	d14f      	bne.n	8015ffc <_strtod_l+0x38c>
 8015f5c:	9904      	ldr	r1, [sp, #16]
 8015f5e:	4301      	orrs	r1, r0
 8015f60:	f47f aec1 	bne.w	8015ce6 <_strtod_l+0x76>
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	f47f aedb 	bne.w	8015d20 <_strtod_l+0xb0>
 8015f6a:	2a69      	cmp	r2, #105	; 0x69
 8015f6c:	d029      	beq.n	8015fc2 <_strtod_l+0x352>
 8015f6e:	dc26      	bgt.n	8015fbe <_strtod_l+0x34e>
 8015f70:	2a49      	cmp	r2, #73	; 0x49
 8015f72:	d026      	beq.n	8015fc2 <_strtod_l+0x352>
 8015f74:	2a4e      	cmp	r2, #78	; 0x4e
 8015f76:	f47f aed3 	bne.w	8015d20 <_strtod_l+0xb0>
 8015f7a:	499b      	ldr	r1, [pc, #620]	; (80161e8 <_strtod_l+0x578>)
 8015f7c:	a815      	add	r0, sp, #84	; 0x54
 8015f7e:	f002 fff5 	bl	8018f6c <__match>
 8015f82:	2800      	cmp	r0, #0
 8015f84:	f43f aecc 	beq.w	8015d20 <_strtod_l+0xb0>
 8015f88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	2b28      	cmp	r3, #40	; 0x28
 8015f8e:	d12f      	bne.n	8015ff0 <_strtod_l+0x380>
 8015f90:	4996      	ldr	r1, [pc, #600]	; (80161ec <_strtod_l+0x57c>)
 8015f92:	aa18      	add	r2, sp, #96	; 0x60
 8015f94:	a815      	add	r0, sp, #84	; 0x54
 8015f96:	f002 fffd 	bl	8018f94 <__hexnan>
 8015f9a:	2805      	cmp	r0, #5
 8015f9c:	d128      	bne.n	8015ff0 <_strtod_l+0x380>
 8015f9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015fa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015fa4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015fa8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015fac:	e69b      	b.n	8015ce6 <_strtod_l+0x76>
 8015fae:	9f08      	ldr	r7, [sp, #32]
 8015fb0:	210a      	movs	r1, #10
 8015fb2:	fb01 2107 	mla	r1, r1, r7, r2
 8015fb6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015fba:	9208      	str	r2, [sp, #32]
 8015fbc:	e7b5      	b.n	8015f2a <_strtod_l+0x2ba>
 8015fbe:	2a6e      	cmp	r2, #110	; 0x6e
 8015fc0:	e7d9      	b.n	8015f76 <_strtod_l+0x306>
 8015fc2:	498b      	ldr	r1, [pc, #556]	; (80161f0 <_strtod_l+0x580>)
 8015fc4:	a815      	add	r0, sp, #84	; 0x54
 8015fc6:	f002 ffd1 	bl	8018f6c <__match>
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	f43f aea8 	beq.w	8015d20 <_strtod_l+0xb0>
 8015fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fd2:	4988      	ldr	r1, [pc, #544]	; (80161f4 <_strtod_l+0x584>)
 8015fd4:	3b01      	subs	r3, #1
 8015fd6:	a815      	add	r0, sp, #84	; 0x54
 8015fd8:	9315      	str	r3, [sp, #84]	; 0x54
 8015fda:	f002 ffc7 	bl	8018f6c <__match>
 8015fde:	b910      	cbnz	r0, 8015fe6 <_strtod_l+0x376>
 8015fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fe2:	3301      	adds	r3, #1
 8015fe4:	9315      	str	r3, [sp, #84]	; 0x54
 8015fe6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8016204 <_strtod_l+0x594>
 8015fea:	f04f 0800 	mov.w	r8, #0
 8015fee:	e67a      	b.n	8015ce6 <_strtod_l+0x76>
 8015ff0:	4881      	ldr	r0, [pc, #516]	; (80161f8 <_strtod_l+0x588>)
 8015ff2:	f001 fe21 	bl	8017c38 <nan>
 8015ff6:	ec59 8b10 	vmov	r8, r9, d0
 8015ffa:	e674      	b.n	8015ce6 <_strtod_l+0x76>
 8015ffc:	9b05      	ldr	r3, [sp, #20]
 8015ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016000:	1afb      	subs	r3, r7, r3
 8016002:	f1bb 0f00 	cmp.w	fp, #0
 8016006:	bf08      	it	eq
 8016008:	46b3      	moveq	fp, r6
 801600a:	2e10      	cmp	r6, #16
 801600c:	9308      	str	r3, [sp, #32]
 801600e:	4635      	mov	r5, r6
 8016010:	bfa8      	it	ge
 8016012:	2510      	movge	r5, #16
 8016014:	f7ea fa76 	bl	8000504 <__aeabi_ui2d>
 8016018:	2e09      	cmp	r6, #9
 801601a:	4680      	mov	r8, r0
 801601c:	4689      	mov	r9, r1
 801601e:	dd13      	ble.n	8016048 <_strtod_l+0x3d8>
 8016020:	4b76      	ldr	r3, [pc, #472]	; (80161fc <_strtod_l+0x58c>)
 8016022:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016026:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801602a:	f7ea fae5 	bl	80005f8 <__aeabi_dmul>
 801602e:	4680      	mov	r8, r0
 8016030:	4650      	mov	r0, sl
 8016032:	4689      	mov	r9, r1
 8016034:	f7ea fa66 	bl	8000504 <__aeabi_ui2d>
 8016038:	4602      	mov	r2, r0
 801603a:	460b      	mov	r3, r1
 801603c:	4640      	mov	r0, r8
 801603e:	4649      	mov	r1, r9
 8016040:	f7ea f924 	bl	800028c <__adddf3>
 8016044:	4680      	mov	r8, r0
 8016046:	4689      	mov	r9, r1
 8016048:	2e0f      	cmp	r6, #15
 801604a:	dc38      	bgt.n	80160be <_strtod_l+0x44e>
 801604c:	9b08      	ldr	r3, [sp, #32]
 801604e:	2b00      	cmp	r3, #0
 8016050:	f43f ae49 	beq.w	8015ce6 <_strtod_l+0x76>
 8016054:	dd24      	ble.n	80160a0 <_strtod_l+0x430>
 8016056:	2b16      	cmp	r3, #22
 8016058:	dc0b      	bgt.n	8016072 <_strtod_l+0x402>
 801605a:	4968      	ldr	r1, [pc, #416]	; (80161fc <_strtod_l+0x58c>)
 801605c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016064:	4642      	mov	r2, r8
 8016066:	464b      	mov	r3, r9
 8016068:	f7ea fac6 	bl	80005f8 <__aeabi_dmul>
 801606c:	4680      	mov	r8, r0
 801606e:	4689      	mov	r9, r1
 8016070:	e639      	b.n	8015ce6 <_strtod_l+0x76>
 8016072:	9a08      	ldr	r2, [sp, #32]
 8016074:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8016078:	4293      	cmp	r3, r2
 801607a:	db20      	blt.n	80160be <_strtod_l+0x44e>
 801607c:	4c5f      	ldr	r4, [pc, #380]	; (80161fc <_strtod_l+0x58c>)
 801607e:	f1c6 060f 	rsb	r6, r6, #15
 8016082:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8016086:	4642      	mov	r2, r8
 8016088:	464b      	mov	r3, r9
 801608a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801608e:	f7ea fab3 	bl	80005f8 <__aeabi_dmul>
 8016092:	9b08      	ldr	r3, [sp, #32]
 8016094:	1b9e      	subs	r6, r3, r6
 8016096:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801609a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801609e:	e7e3      	b.n	8016068 <_strtod_l+0x3f8>
 80160a0:	9b08      	ldr	r3, [sp, #32]
 80160a2:	3316      	adds	r3, #22
 80160a4:	db0b      	blt.n	80160be <_strtod_l+0x44e>
 80160a6:	9b05      	ldr	r3, [sp, #20]
 80160a8:	1bdf      	subs	r7, r3, r7
 80160aa:	4b54      	ldr	r3, [pc, #336]	; (80161fc <_strtod_l+0x58c>)
 80160ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80160b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80160b4:	4640      	mov	r0, r8
 80160b6:	4649      	mov	r1, r9
 80160b8:	f7ea fbc8 	bl	800084c <__aeabi_ddiv>
 80160bc:	e7d6      	b.n	801606c <_strtod_l+0x3fc>
 80160be:	9b08      	ldr	r3, [sp, #32]
 80160c0:	1b75      	subs	r5, r6, r5
 80160c2:	441d      	add	r5, r3
 80160c4:	2d00      	cmp	r5, #0
 80160c6:	dd70      	ble.n	80161aa <_strtod_l+0x53a>
 80160c8:	f015 030f 	ands.w	r3, r5, #15
 80160cc:	d00a      	beq.n	80160e4 <_strtod_l+0x474>
 80160ce:	494b      	ldr	r1, [pc, #300]	; (80161fc <_strtod_l+0x58c>)
 80160d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80160d4:	4642      	mov	r2, r8
 80160d6:	464b      	mov	r3, r9
 80160d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160dc:	f7ea fa8c 	bl	80005f8 <__aeabi_dmul>
 80160e0:	4680      	mov	r8, r0
 80160e2:	4689      	mov	r9, r1
 80160e4:	f035 050f 	bics.w	r5, r5, #15
 80160e8:	d04d      	beq.n	8016186 <_strtod_l+0x516>
 80160ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80160ee:	dd22      	ble.n	8016136 <_strtod_l+0x4c6>
 80160f0:	2500      	movs	r5, #0
 80160f2:	46ab      	mov	fp, r5
 80160f4:	9509      	str	r5, [sp, #36]	; 0x24
 80160f6:	9505      	str	r5, [sp, #20]
 80160f8:	2322      	movs	r3, #34	; 0x22
 80160fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8016204 <_strtod_l+0x594>
 80160fe:	6023      	str	r3, [r4, #0]
 8016100:	f04f 0800 	mov.w	r8, #0
 8016104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016106:	2b00      	cmp	r3, #0
 8016108:	f43f aded 	beq.w	8015ce6 <_strtod_l+0x76>
 801610c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801610e:	4620      	mov	r0, r4
 8016110:	f003 f82e 	bl	8019170 <_Bfree>
 8016114:	9905      	ldr	r1, [sp, #20]
 8016116:	4620      	mov	r0, r4
 8016118:	f003 f82a 	bl	8019170 <_Bfree>
 801611c:	4659      	mov	r1, fp
 801611e:	4620      	mov	r0, r4
 8016120:	f003 f826 	bl	8019170 <_Bfree>
 8016124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016126:	4620      	mov	r0, r4
 8016128:	f003 f822 	bl	8019170 <_Bfree>
 801612c:	4629      	mov	r1, r5
 801612e:	4620      	mov	r0, r4
 8016130:	f003 f81e 	bl	8019170 <_Bfree>
 8016134:	e5d7      	b.n	8015ce6 <_strtod_l+0x76>
 8016136:	4b32      	ldr	r3, [pc, #200]	; (8016200 <_strtod_l+0x590>)
 8016138:	9304      	str	r3, [sp, #16]
 801613a:	2300      	movs	r3, #0
 801613c:	112d      	asrs	r5, r5, #4
 801613e:	4640      	mov	r0, r8
 8016140:	4649      	mov	r1, r9
 8016142:	469a      	mov	sl, r3
 8016144:	2d01      	cmp	r5, #1
 8016146:	dc21      	bgt.n	801618c <_strtod_l+0x51c>
 8016148:	b10b      	cbz	r3, 801614e <_strtod_l+0x4de>
 801614a:	4680      	mov	r8, r0
 801614c:	4689      	mov	r9, r1
 801614e:	492c      	ldr	r1, [pc, #176]	; (8016200 <_strtod_l+0x590>)
 8016150:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016154:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016158:	4642      	mov	r2, r8
 801615a:	464b      	mov	r3, r9
 801615c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016160:	f7ea fa4a 	bl	80005f8 <__aeabi_dmul>
 8016164:	4b27      	ldr	r3, [pc, #156]	; (8016204 <_strtod_l+0x594>)
 8016166:	460a      	mov	r2, r1
 8016168:	400b      	ands	r3, r1
 801616a:	4927      	ldr	r1, [pc, #156]	; (8016208 <_strtod_l+0x598>)
 801616c:	428b      	cmp	r3, r1
 801616e:	4680      	mov	r8, r0
 8016170:	d8be      	bhi.n	80160f0 <_strtod_l+0x480>
 8016172:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016176:	428b      	cmp	r3, r1
 8016178:	bf86      	itte	hi
 801617a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801620c <_strtod_l+0x59c>
 801617e:	f04f 38ff 	movhi.w	r8, #4294967295
 8016182:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8016186:	2300      	movs	r3, #0
 8016188:	9304      	str	r3, [sp, #16]
 801618a:	e07b      	b.n	8016284 <_strtod_l+0x614>
 801618c:	07ea      	lsls	r2, r5, #31
 801618e:	d505      	bpl.n	801619c <_strtod_l+0x52c>
 8016190:	9b04      	ldr	r3, [sp, #16]
 8016192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016196:	f7ea fa2f 	bl	80005f8 <__aeabi_dmul>
 801619a:	2301      	movs	r3, #1
 801619c:	9a04      	ldr	r2, [sp, #16]
 801619e:	3208      	adds	r2, #8
 80161a0:	f10a 0a01 	add.w	sl, sl, #1
 80161a4:	106d      	asrs	r5, r5, #1
 80161a6:	9204      	str	r2, [sp, #16]
 80161a8:	e7cc      	b.n	8016144 <_strtod_l+0x4d4>
 80161aa:	d0ec      	beq.n	8016186 <_strtod_l+0x516>
 80161ac:	426d      	negs	r5, r5
 80161ae:	f015 020f 	ands.w	r2, r5, #15
 80161b2:	d00a      	beq.n	80161ca <_strtod_l+0x55a>
 80161b4:	4b11      	ldr	r3, [pc, #68]	; (80161fc <_strtod_l+0x58c>)
 80161b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80161ba:	4640      	mov	r0, r8
 80161bc:	4649      	mov	r1, r9
 80161be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c2:	f7ea fb43 	bl	800084c <__aeabi_ddiv>
 80161c6:	4680      	mov	r8, r0
 80161c8:	4689      	mov	r9, r1
 80161ca:	112d      	asrs	r5, r5, #4
 80161cc:	d0db      	beq.n	8016186 <_strtod_l+0x516>
 80161ce:	2d1f      	cmp	r5, #31
 80161d0:	dd1e      	ble.n	8016210 <_strtod_l+0x5a0>
 80161d2:	2500      	movs	r5, #0
 80161d4:	46ab      	mov	fp, r5
 80161d6:	9509      	str	r5, [sp, #36]	; 0x24
 80161d8:	9505      	str	r5, [sp, #20]
 80161da:	2322      	movs	r3, #34	; 0x22
 80161dc:	f04f 0800 	mov.w	r8, #0
 80161e0:	f04f 0900 	mov.w	r9, #0
 80161e4:	6023      	str	r3, [r4, #0]
 80161e6:	e78d      	b.n	8016104 <_strtod_l+0x494>
 80161e8:	0801e2e6 	.word	0x0801e2e6
 80161ec:	0801e19c 	.word	0x0801e19c
 80161f0:	0801e2de 	.word	0x0801e2de
 80161f4:	0801e3ca 	.word	0x0801e3ca
 80161f8:	0801e3c6 	.word	0x0801e3c6
 80161fc:	0801e520 	.word	0x0801e520
 8016200:	0801e4f8 	.word	0x0801e4f8
 8016204:	7ff00000 	.word	0x7ff00000
 8016208:	7ca00000 	.word	0x7ca00000
 801620c:	7fefffff 	.word	0x7fefffff
 8016210:	f015 0310 	ands.w	r3, r5, #16
 8016214:	bf18      	it	ne
 8016216:	236a      	movne	r3, #106	; 0x6a
 8016218:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80165bc <_strtod_l+0x94c>
 801621c:	9304      	str	r3, [sp, #16]
 801621e:	4640      	mov	r0, r8
 8016220:	4649      	mov	r1, r9
 8016222:	2300      	movs	r3, #0
 8016224:	07ea      	lsls	r2, r5, #31
 8016226:	d504      	bpl.n	8016232 <_strtod_l+0x5c2>
 8016228:	e9da 2300 	ldrd	r2, r3, [sl]
 801622c:	f7ea f9e4 	bl	80005f8 <__aeabi_dmul>
 8016230:	2301      	movs	r3, #1
 8016232:	106d      	asrs	r5, r5, #1
 8016234:	f10a 0a08 	add.w	sl, sl, #8
 8016238:	d1f4      	bne.n	8016224 <_strtod_l+0x5b4>
 801623a:	b10b      	cbz	r3, 8016240 <_strtod_l+0x5d0>
 801623c:	4680      	mov	r8, r0
 801623e:	4689      	mov	r9, r1
 8016240:	9b04      	ldr	r3, [sp, #16]
 8016242:	b1bb      	cbz	r3, 8016274 <_strtod_l+0x604>
 8016244:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016248:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801624c:	2b00      	cmp	r3, #0
 801624e:	4649      	mov	r1, r9
 8016250:	dd10      	ble.n	8016274 <_strtod_l+0x604>
 8016252:	2b1f      	cmp	r3, #31
 8016254:	f340 811e 	ble.w	8016494 <_strtod_l+0x824>
 8016258:	2b34      	cmp	r3, #52	; 0x34
 801625a:	bfde      	ittt	le
 801625c:	f04f 33ff 	movle.w	r3, #4294967295
 8016260:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8016264:	4093      	lslle	r3, r2
 8016266:	f04f 0800 	mov.w	r8, #0
 801626a:	bfcc      	ite	gt
 801626c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016270:	ea03 0901 	andle.w	r9, r3, r1
 8016274:	2200      	movs	r2, #0
 8016276:	2300      	movs	r3, #0
 8016278:	4640      	mov	r0, r8
 801627a:	4649      	mov	r1, r9
 801627c:	f7ea fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 8016280:	2800      	cmp	r0, #0
 8016282:	d1a6      	bne.n	80161d2 <_strtod_l+0x562>
 8016284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016286:	9300      	str	r3, [sp, #0]
 8016288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801628a:	4633      	mov	r3, r6
 801628c:	465a      	mov	r2, fp
 801628e:	4620      	mov	r0, r4
 8016290:	f002 ffd6 	bl	8019240 <__s2b>
 8016294:	9009      	str	r0, [sp, #36]	; 0x24
 8016296:	2800      	cmp	r0, #0
 8016298:	f43f af2a 	beq.w	80160f0 <_strtod_l+0x480>
 801629c:	9a08      	ldr	r2, [sp, #32]
 801629e:	9b05      	ldr	r3, [sp, #20]
 80162a0:	2a00      	cmp	r2, #0
 80162a2:	eba3 0307 	sub.w	r3, r3, r7
 80162a6:	bfa8      	it	ge
 80162a8:	2300      	movge	r3, #0
 80162aa:	930c      	str	r3, [sp, #48]	; 0x30
 80162ac:	2500      	movs	r5, #0
 80162ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80162b2:	9312      	str	r3, [sp, #72]	; 0x48
 80162b4:	46ab      	mov	fp, r5
 80162b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162b8:	4620      	mov	r0, r4
 80162ba:	6859      	ldr	r1, [r3, #4]
 80162bc:	f002 ff18 	bl	80190f0 <_Balloc>
 80162c0:	9005      	str	r0, [sp, #20]
 80162c2:	2800      	cmp	r0, #0
 80162c4:	f43f af18 	beq.w	80160f8 <_strtod_l+0x488>
 80162c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162ca:	691a      	ldr	r2, [r3, #16]
 80162cc:	3202      	adds	r2, #2
 80162ce:	f103 010c 	add.w	r1, r3, #12
 80162d2:	0092      	lsls	r2, r2, #2
 80162d4:	300c      	adds	r0, #12
 80162d6:	f001 fca0 	bl	8017c1a <memcpy>
 80162da:	ec49 8b10 	vmov	d0, r8, r9
 80162de:	aa18      	add	r2, sp, #96	; 0x60
 80162e0:	a917      	add	r1, sp, #92	; 0x5c
 80162e2:	4620      	mov	r0, r4
 80162e4:	f003 fae0 	bl	80198a8 <__d2b>
 80162e8:	ec49 8b18 	vmov	d8, r8, r9
 80162ec:	9016      	str	r0, [sp, #88]	; 0x58
 80162ee:	2800      	cmp	r0, #0
 80162f0:	f43f af02 	beq.w	80160f8 <_strtod_l+0x488>
 80162f4:	2101      	movs	r1, #1
 80162f6:	4620      	mov	r0, r4
 80162f8:	f003 f83a 	bl	8019370 <__i2b>
 80162fc:	4683      	mov	fp, r0
 80162fe:	2800      	cmp	r0, #0
 8016300:	f43f aefa 	beq.w	80160f8 <_strtod_l+0x488>
 8016304:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016306:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016308:	2e00      	cmp	r6, #0
 801630a:	bfab      	itete	ge
 801630c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801630e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8016310:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8016312:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8016316:	bfac      	ite	ge
 8016318:	eb06 0a03 	addge.w	sl, r6, r3
 801631c:	1b9f      	sublt	r7, r3, r6
 801631e:	9b04      	ldr	r3, [sp, #16]
 8016320:	1af6      	subs	r6, r6, r3
 8016322:	4416      	add	r6, r2
 8016324:	4ba0      	ldr	r3, [pc, #640]	; (80165a8 <_strtod_l+0x938>)
 8016326:	3e01      	subs	r6, #1
 8016328:	429e      	cmp	r6, r3
 801632a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801632e:	f280 80c4 	bge.w	80164ba <_strtod_l+0x84a>
 8016332:	1b9b      	subs	r3, r3, r6
 8016334:	2b1f      	cmp	r3, #31
 8016336:	eba2 0203 	sub.w	r2, r2, r3
 801633a:	f04f 0101 	mov.w	r1, #1
 801633e:	f300 80b0 	bgt.w	80164a2 <_strtod_l+0x832>
 8016342:	fa01 f303 	lsl.w	r3, r1, r3
 8016346:	930e      	str	r3, [sp, #56]	; 0x38
 8016348:	2300      	movs	r3, #0
 801634a:	930d      	str	r3, [sp, #52]	; 0x34
 801634c:	eb0a 0602 	add.w	r6, sl, r2
 8016350:	9b04      	ldr	r3, [sp, #16]
 8016352:	45b2      	cmp	sl, r6
 8016354:	4417      	add	r7, r2
 8016356:	441f      	add	r7, r3
 8016358:	4653      	mov	r3, sl
 801635a:	bfa8      	it	ge
 801635c:	4633      	movge	r3, r6
 801635e:	42bb      	cmp	r3, r7
 8016360:	bfa8      	it	ge
 8016362:	463b      	movge	r3, r7
 8016364:	2b00      	cmp	r3, #0
 8016366:	bfc2      	ittt	gt
 8016368:	1af6      	subgt	r6, r6, r3
 801636a:	1aff      	subgt	r7, r7, r3
 801636c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8016370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016372:	2b00      	cmp	r3, #0
 8016374:	dd17      	ble.n	80163a6 <_strtod_l+0x736>
 8016376:	4659      	mov	r1, fp
 8016378:	461a      	mov	r2, r3
 801637a:	4620      	mov	r0, r4
 801637c:	f003 f8b8 	bl	80194f0 <__pow5mult>
 8016380:	4683      	mov	fp, r0
 8016382:	2800      	cmp	r0, #0
 8016384:	f43f aeb8 	beq.w	80160f8 <_strtod_l+0x488>
 8016388:	4601      	mov	r1, r0
 801638a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801638c:	4620      	mov	r0, r4
 801638e:	f003 f805 	bl	801939c <__multiply>
 8016392:	900b      	str	r0, [sp, #44]	; 0x2c
 8016394:	2800      	cmp	r0, #0
 8016396:	f43f aeaf 	beq.w	80160f8 <_strtod_l+0x488>
 801639a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801639c:	4620      	mov	r0, r4
 801639e:	f002 fee7 	bl	8019170 <_Bfree>
 80163a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163a4:	9316      	str	r3, [sp, #88]	; 0x58
 80163a6:	2e00      	cmp	r6, #0
 80163a8:	f300 808c 	bgt.w	80164c4 <_strtod_l+0x854>
 80163ac:	9b08      	ldr	r3, [sp, #32]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	dd08      	ble.n	80163c4 <_strtod_l+0x754>
 80163b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80163b4:	9905      	ldr	r1, [sp, #20]
 80163b6:	4620      	mov	r0, r4
 80163b8:	f003 f89a 	bl	80194f0 <__pow5mult>
 80163bc:	9005      	str	r0, [sp, #20]
 80163be:	2800      	cmp	r0, #0
 80163c0:	f43f ae9a 	beq.w	80160f8 <_strtod_l+0x488>
 80163c4:	2f00      	cmp	r7, #0
 80163c6:	dd08      	ble.n	80163da <_strtod_l+0x76a>
 80163c8:	9905      	ldr	r1, [sp, #20]
 80163ca:	463a      	mov	r2, r7
 80163cc:	4620      	mov	r0, r4
 80163ce:	f003 f8e9 	bl	80195a4 <__lshift>
 80163d2:	9005      	str	r0, [sp, #20]
 80163d4:	2800      	cmp	r0, #0
 80163d6:	f43f ae8f 	beq.w	80160f8 <_strtod_l+0x488>
 80163da:	f1ba 0f00 	cmp.w	sl, #0
 80163de:	dd08      	ble.n	80163f2 <_strtod_l+0x782>
 80163e0:	4659      	mov	r1, fp
 80163e2:	4652      	mov	r2, sl
 80163e4:	4620      	mov	r0, r4
 80163e6:	f003 f8dd 	bl	80195a4 <__lshift>
 80163ea:	4683      	mov	fp, r0
 80163ec:	2800      	cmp	r0, #0
 80163ee:	f43f ae83 	beq.w	80160f8 <_strtod_l+0x488>
 80163f2:	9a05      	ldr	r2, [sp, #20]
 80163f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80163f6:	4620      	mov	r0, r4
 80163f8:	f003 f95c 	bl	80196b4 <__mdiff>
 80163fc:	4605      	mov	r5, r0
 80163fe:	2800      	cmp	r0, #0
 8016400:	f43f ae7a 	beq.w	80160f8 <_strtod_l+0x488>
 8016404:	68c3      	ldr	r3, [r0, #12]
 8016406:	930b      	str	r3, [sp, #44]	; 0x2c
 8016408:	2300      	movs	r3, #0
 801640a:	60c3      	str	r3, [r0, #12]
 801640c:	4659      	mov	r1, fp
 801640e:	f003 f935 	bl	801967c <__mcmp>
 8016412:	2800      	cmp	r0, #0
 8016414:	da60      	bge.n	80164d8 <_strtod_l+0x868>
 8016416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016418:	ea53 0308 	orrs.w	r3, r3, r8
 801641c:	f040 8084 	bne.w	8016528 <_strtod_l+0x8b8>
 8016420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016424:	2b00      	cmp	r3, #0
 8016426:	d17f      	bne.n	8016528 <_strtod_l+0x8b8>
 8016428:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801642c:	0d1b      	lsrs	r3, r3, #20
 801642e:	051b      	lsls	r3, r3, #20
 8016430:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016434:	d978      	bls.n	8016528 <_strtod_l+0x8b8>
 8016436:	696b      	ldr	r3, [r5, #20]
 8016438:	b913      	cbnz	r3, 8016440 <_strtod_l+0x7d0>
 801643a:	692b      	ldr	r3, [r5, #16]
 801643c:	2b01      	cmp	r3, #1
 801643e:	dd73      	ble.n	8016528 <_strtod_l+0x8b8>
 8016440:	4629      	mov	r1, r5
 8016442:	2201      	movs	r2, #1
 8016444:	4620      	mov	r0, r4
 8016446:	f003 f8ad 	bl	80195a4 <__lshift>
 801644a:	4659      	mov	r1, fp
 801644c:	4605      	mov	r5, r0
 801644e:	f003 f915 	bl	801967c <__mcmp>
 8016452:	2800      	cmp	r0, #0
 8016454:	dd68      	ble.n	8016528 <_strtod_l+0x8b8>
 8016456:	9904      	ldr	r1, [sp, #16]
 8016458:	4a54      	ldr	r2, [pc, #336]	; (80165ac <_strtod_l+0x93c>)
 801645a:	464b      	mov	r3, r9
 801645c:	2900      	cmp	r1, #0
 801645e:	f000 8084 	beq.w	801656a <_strtod_l+0x8fa>
 8016462:	ea02 0109 	and.w	r1, r2, r9
 8016466:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801646a:	dc7e      	bgt.n	801656a <_strtod_l+0x8fa>
 801646c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016470:	f77f aeb3 	ble.w	80161da <_strtod_l+0x56a>
 8016474:	4b4e      	ldr	r3, [pc, #312]	; (80165b0 <_strtod_l+0x940>)
 8016476:	4640      	mov	r0, r8
 8016478:	4649      	mov	r1, r9
 801647a:	2200      	movs	r2, #0
 801647c:	f7ea f8bc 	bl	80005f8 <__aeabi_dmul>
 8016480:	4b4a      	ldr	r3, [pc, #296]	; (80165ac <_strtod_l+0x93c>)
 8016482:	400b      	ands	r3, r1
 8016484:	4680      	mov	r8, r0
 8016486:	4689      	mov	r9, r1
 8016488:	2b00      	cmp	r3, #0
 801648a:	f47f ae3f 	bne.w	801610c <_strtod_l+0x49c>
 801648e:	2322      	movs	r3, #34	; 0x22
 8016490:	6023      	str	r3, [r4, #0]
 8016492:	e63b      	b.n	801610c <_strtod_l+0x49c>
 8016494:	f04f 32ff 	mov.w	r2, #4294967295
 8016498:	fa02 f303 	lsl.w	r3, r2, r3
 801649c:	ea03 0808 	and.w	r8, r3, r8
 80164a0:	e6e8      	b.n	8016274 <_strtod_l+0x604>
 80164a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80164a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80164aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80164ae:	36e2      	adds	r6, #226	; 0xe2
 80164b0:	fa01 f306 	lsl.w	r3, r1, r6
 80164b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80164b8:	e748      	b.n	801634c <_strtod_l+0x6dc>
 80164ba:	2100      	movs	r1, #0
 80164bc:	2301      	movs	r3, #1
 80164be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80164c2:	e743      	b.n	801634c <_strtod_l+0x6dc>
 80164c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80164c6:	4632      	mov	r2, r6
 80164c8:	4620      	mov	r0, r4
 80164ca:	f003 f86b 	bl	80195a4 <__lshift>
 80164ce:	9016      	str	r0, [sp, #88]	; 0x58
 80164d0:	2800      	cmp	r0, #0
 80164d2:	f47f af6b 	bne.w	80163ac <_strtod_l+0x73c>
 80164d6:	e60f      	b.n	80160f8 <_strtod_l+0x488>
 80164d8:	46ca      	mov	sl, r9
 80164da:	d171      	bne.n	80165c0 <_strtod_l+0x950>
 80164dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80164de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80164e2:	b352      	cbz	r2, 801653a <_strtod_l+0x8ca>
 80164e4:	4a33      	ldr	r2, [pc, #204]	; (80165b4 <_strtod_l+0x944>)
 80164e6:	4293      	cmp	r3, r2
 80164e8:	d12a      	bne.n	8016540 <_strtod_l+0x8d0>
 80164ea:	9b04      	ldr	r3, [sp, #16]
 80164ec:	4641      	mov	r1, r8
 80164ee:	b1fb      	cbz	r3, 8016530 <_strtod_l+0x8c0>
 80164f0:	4b2e      	ldr	r3, [pc, #184]	; (80165ac <_strtod_l+0x93c>)
 80164f2:	ea09 0303 	and.w	r3, r9, r3
 80164f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80164fa:	f04f 32ff 	mov.w	r2, #4294967295
 80164fe:	d81a      	bhi.n	8016536 <_strtod_l+0x8c6>
 8016500:	0d1b      	lsrs	r3, r3, #20
 8016502:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016506:	fa02 f303 	lsl.w	r3, r2, r3
 801650a:	4299      	cmp	r1, r3
 801650c:	d118      	bne.n	8016540 <_strtod_l+0x8d0>
 801650e:	4b2a      	ldr	r3, [pc, #168]	; (80165b8 <_strtod_l+0x948>)
 8016510:	459a      	cmp	sl, r3
 8016512:	d102      	bne.n	801651a <_strtod_l+0x8aa>
 8016514:	3101      	adds	r1, #1
 8016516:	f43f adef 	beq.w	80160f8 <_strtod_l+0x488>
 801651a:	4b24      	ldr	r3, [pc, #144]	; (80165ac <_strtod_l+0x93c>)
 801651c:	ea0a 0303 	and.w	r3, sl, r3
 8016520:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016524:	f04f 0800 	mov.w	r8, #0
 8016528:	9b04      	ldr	r3, [sp, #16]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d1a2      	bne.n	8016474 <_strtod_l+0x804>
 801652e:	e5ed      	b.n	801610c <_strtod_l+0x49c>
 8016530:	f04f 33ff 	mov.w	r3, #4294967295
 8016534:	e7e9      	b.n	801650a <_strtod_l+0x89a>
 8016536:	4613      	mov	r3, r2
 8016538:	e7e7      	b.n	801650a <_strtod_l+0x89a>
 801653a:	ea53 0308 	orrs.w	r3, r3, r8
 801653e:	d08a      	beq.n	8016456 <_strtod_l+0x7e6>
 8016540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016542:	b1e3      	cbz	r3, 801657e <_strtod_l+0x90e>
 8016544:	ea13 0f0a 	tst.w	r3, sl
 8016548:	d0ee      	beq.n	8016528 <_strtod_l+0x8b8>
 801654a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801654c:	9a04      	ldr	r2, [sp, #16]
 801654e:	4640      	mov	r0, r8
 8016550:	4649      	mov	r1, r9
 8016552:	b1c3      	cbz	r3, 8016586 <_strtod_l+0x916>
 8016554:	f7ff fb70 	bl	8015c38 <sulp>
 8016558:	4602      	mov	r2, r0
 801655a:	460b      	mov	r3, r1
 801655c:	ec51 0b18 	vmov	r0, r1, d8
 8016560:	f7e9 fe94 	bl	800028c <__adddf3>
 8016564:	4680      	mov	r8, r0
 8016566:	4689      	mov	r9, r1
 8016568:	e7de      	b.n	8016528 <_strtod_l+0x8b8>
 801656a:	4013      	ands	r3, r2
 801656c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016570:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016574:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016578:	f04f 38ff 	mov.w	r8, #4294967295
 801657c:	e7d4      	b.n	8016528 <_strtod_l+0x8b8>
 801657e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016580:	ea13 0f08 	tst.w	r3, r8
 8016584:	e7e0      	b.n	8016548 <_strtod_l+0x8d8>
 8016586:	f7ff fb57 	bl	8015c38 <sulp>
 801658a:	4602      	mov	r2, r0
 801658c:	460b      	mov	r3, r1
 801658e:	ec51 0b18 	vmov	r0, r1, d8
 8016592:	f7e9 fe79 	bl	8000288 <__aeabi_dsub>
 8016596:	2200      	movs	r2, #0
 8016598:	2300      	movs	r3, #0
 801659a:	4680      	mov	r8, r0
 801659c:	4689      	mov	r9, r1
 801659e:	f7ea fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 80165a2:	2800      	cmp	r0, #0
 80165a4:	d0c0      	beq.n	8016528 <_strtod_l+0x8b8>
 80165a6:	e618      	b.n	80161da <_strtod_l+0x56a>
 80165a8:	fffffc02 	.word	0xfffffc02
 80165ac:	7ff00000 	.word	0x7ff00000
 80165b0:	39500000 	.word	0x39500000
 80165b4:	000fffff 	.word	0x000fffff
 80165b8:	7fefffff 	.word	0x7fefffff
 80165bc:	0801e1b0 	.word	0x0801e1b0
 80165c0:	4659      	mov	r1, fp
 80165c2:	4628      	mov	r0, r5
 80165c4:	f003 f9ca 	bl	801995c <__ratio>
 80165c8:	ec57 6b10 	vmov	r6, r7, d0
 80165cc:	ee10 0a10 	vmov	r0, s0
 80165d0:	2200      	movs	r2, #0
 80165d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80165d6:	4639      	mov	r1, r7
 80165d8:	f7ea fa8a 	bl	8000af0 <__aeabi_dcmple>
 80165dc:	2800      	cmp	r0, #0
 80165de:	d071      	beq.n	80166c4 <_strtod_l+0xa54>
 80165e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d17c      	bne.n	80166e0 <_strtod_l+0xa70>
 80165e6:	f1b8 0f00 	cmp.w	r8, #0
 80165ea:	d15a      	bne.n	80166a2 <_strtod_l+0xa32>
 80165ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d15d      	bne.n	80166b0 <_strtod_l+0xa40>
 80165f4:	4b90      	ldr	r3, [pc, #576]	; (8016838 <_strtod_l+0xbc8>)
 80165f6:	2200      	movs	r2, #0
 80165f8:	4630      	mov	r0, r6
 80165fa:	4639      	mov	r1, r7
 80165fc:	f7ea fa6e 	bl	8000adc <__aeabi_dcmplt>
 8016600:	2800      	cmp	r0, #0
 8016602:	d15c      	bne.n	80166be <_strtod_l+0xa4e>
 8016604:	4630      	mov	r0, r6
 8016606:	4639      	mov	r1, r7
 8016608:	4b8c      	ldr	r3, [pc, #560]	; (801683c <_strtod_l+0xbcc>)
 801660a:	2200      	movs	r2, #0
 801660c:	f7e9 fff4 	bl	80005f8 <__aeabi_dmul>
 8016610:	4606      	mov	r6, r0
 8016612:	460f      	mov	r7, r1
 8016614:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016618:	9606      	str	r6, [sp, #24]
 801661a:	9307      	str	r3, [sp, #28]
 801661c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016620:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016624:	4b86      	ldr	r3, [pc, #536]	; (8016840 <_strtod_l+0xbd0>)
 8016626:	ea0a 0303 	and.w	r3, sl, r3
 801662a:	930d      	str	r3, [sp, #52]	; 0x34
 801662c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801662e:	4b85      	ldr	r3, [pc, #532]	; (8016844 <_strtod_l+0xbd4>)
 8016630:	429a      	cmp	r2, r3
 8016632:	f040 8090 	bne.w	8016756 <_strtod_l+0xae6>
 8016636:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801663a:	ec49 8b10 	vmov	d0, r8, r9
 801663e:	f003 f8c3 	bl	80197c8 <__ulp>
 8016642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016646:	ec51 0b10 	vmov	r0, r1, d0
 801664a:	f7e9 ffd5 	bl	80005f8 <__aeabi_dmul>
 801664e:	4642      	mov	r2, r8
 8016650:	464b      	mov	r3, r9
 8016652:	f7e9 fe1b 	bl	800028c <__adddf3>
 8016656:	460b      	mov	r3, r1
 8016658:	4979      	ldr	r1, [pc, #484]	; (8016840 <_strtod_l+0xbd0>)
 801665a:	4a7b      	ldr	r2, [pc, #492]	; (8016848 <_strtod_l+0xbd8>)
 801665c:	4019      	ands	r1, r3
 801665e:	4291      	cmp	r1, r2
 8016660:	4680      	mov	r8, r0
 8016662:	d944      	bls.n	80166ee <_strtod_l+0xa7e>
 8016664:	ee18 2a90 	vmov	r2, s17
 8016668:	4b78      	ldr	r3, [pc, #480]	; (801684c <_strtod_l+0xbdc>)
 801666a:	429a      	cmp	r2, r3
 801666c:	d104      	bne.n	8016678 <_strtod_l+0xa08>
 801666e:	ee18 3a10 	vmov	r3, s16
 8016672:	3301      	adds	r3, #1
 8016674:	f43f ad40 	beq.w	80160f8 <_strtod_l+0x488>
 8016678:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801684c <_strtod_l+0xbdc>
 801667c:	f04f 38ff 	mov.w	r8, #4294967295
 8016680:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016682:	4620      	mov	r0, r4
 8016684:	f002 fd74 	bl	8019170 <_Bfree>
 8016688:	9905      	ldr	r1, [sp, #20]
 801668a:	4620      	mov	r0, r4
 801668c:	f002 fd70 	bl	8019170 <_Bfree>
 8016690:	4659      	mov	r1, fp
 8016692:	4620      	mov	r0, r4
 8016694:	f002 fd6c 	bl	8019170 <_Bfree>
 8016698:	4629      	mov	r1, r5
 801669a:	4620      	mov	r0, r4
 801669c:	f002 fd68 	bl	8019170 <_Bfree>
 80166a0:	e609      	b.n	80162b6 <_strtod_l+0x646>
 80166a2:	f1b8 0f01 	cmp.w	r8, #1
 80166a6:	d103      	bne.n	80166b0 <_strtod_l+0xa40>
 80166a8:	f1b9 0f00 	cmp.w	r9, #0
 80166ac:	f43f ad95 	beq.w	80161da <_strtod_l+0x56a>
 80166b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8016808 <_strtod_l+0xb98>
 80166b4:	4f60      	ldr	r7, [pc, #384]	; (8016838 <_strtod_l+0xbc8>)
 80166b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80166ba:	2600      	movs	r6, #0
 80166bc:	e7ae      	b.n	801661c <_strtod_l+0x9ac>
 80166be:	4f5f      	ldr	r7, [pc, #380]	; (801683c <_strtod_l+0xbcc>)
 80166c0:	2600      	movs	r6, #0
 80166c2:	e7a7      	b.n	8016614 <_strtod_l+0x9a4>
 80166c4:	4b5d      	ldr	r3, [pc, #372]	; (801683c <_strtod_l+0xbcc>)
 80166c6:	4630      	mov	r0, r6
 80166c8:	4639      	mov	r1, r7
 80166ca:	2200      	movs	r2, #0
 80166cc:	f7e9 ff94 	bl	80005f8 <__aeabi_dmul>
 80166d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166d2:	4606      	mov	r6, r0
 80166d4:	460f      	mov	r7, r1
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d09c      	beq.n	8016614 <_strtod_l+0x9a4>
 80166da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80166de:	e79d      	b.n	801661c <_strtod_l+0x9ac>
 80166e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8016810 <_strtod_l+0xba0>
 80166e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80166e8:	ec57 6b17 	vmov	r6, r7, d7
 80166ec:	e796      	b.n	801661c <_strtod_l+0x9ac>
 80166ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80166f2:	9b04      	ldr	r3, [sp, #16]
 80166f4:	46ca      	mov	sl, r9
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d1c2      	bne.n	8016680 <_strtod_l+0xa10>
 80166fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80166fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016700:	0d1b      	lsrs	r3, r3, #20
 8016702:	051b      	lsls	r3, r3, #20
 8016704:	429a      	cmp	r2, r3
 8016706:	d1bb      	bne.n	8016680 <_strtod_l+0xa10>
 8016708:	4630      	mov	r0, r6
 801670a:	4639      	mov	r1, r7
 801670c:	f7ea fad4 	bl	8000cb8 <__aeabi_d2lz>
 8016710:	f7e9 ff44 	bl	800059c <__aeabi_l2d>
 8016714:	4602      	mov	r2, r0
 8016716:	460b      	mov	r3, r1
 8016718:	4630      	mov	r0, r6
 801671a:	4639      	mov	r1, r7
 801671c:	f7e9 fdb4 	bl	8000288 <__aeabi_dsub>
 8016720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016722:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016726:	ea43 0308 	orr.w	r3, r3, r8
 801672a:	4313      	orrs	r3, r2
 801672c:	4606      	mov	r6, r0
 801672e:	460f      	mov	r7, r1
 8016730:	d054      	beq.n	80167dc <_strtod_l+0xb6c>
 8016732:	a339      	add	r3, pc, #228	; (adr r3, 8016818 <_strtod_l+0xba8>)
 8016734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016738:	f7ea f9d0 	bl	8000adc <__aeabi_dcmplt>
 801673c:	2800      	cmp	r0, #0
 801673e:	f47f ace5 	bne.w	801610c <_strtod_l+0x49c>
 8016742:	a337      	add	r3, pc, #220	; (adr r3, 8016820 <_strtod_l+0xbb0>)
 8016744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016748:	4630      	mov	r0, r6
 801674a:	4639      	mov	r1, r7
 801674c:	f7ea f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 8016750:	2800      	cmp	r0, #0
 8016752:	d095      	beq.n	8016680 <_strtod_l+0xa10>
 8016754:	e4da      	b.n	801610c <_strtod_l+0x49c>
 8016756:	9b04      	ldr	r3, [sp, #16]
 8016758:	b333      	cbz	r3, 80167a8 <_strtod_l+0xb38>
 801675a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801675c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016760:	d822      	bhi.n	80167a8 <_strtod_l+0xb38>
 8016762:	a331      	add	r3, pc, #196	; (adr r3, 8016828 <_strtod_l+0xbb8>)
 8016764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016768:	4630      	mov	r0, r6
 801676a:	4639      	mov	r1, r7
 801676c:	f7ea f9c0 	bl	8000af0 <__aeabi_dcmple>
 8016770:	b1a0      	cbz	r0, 801679c <_strtod_l+0xb2c>
 8016772:	4639      	mov	r1, r7
 8016774:	4630      	mov	r0, r6
 8016776:	f7ea fa17 	bl	8000ba8 <__aeabi_d2uiz>
 801677a:	2801      	cmp	r0, #1
 801677c:	bf38      	it	cc
 801677e:	2001      	movcc	r0, #1
 8016780:	f7e9 fec0 	bl	8000504 <__aeabi_ui2d>
 8016784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016786:	4606      	mov	r6, r0
 8016788:	460f      	mov	r7, r1
 801678a:	bb23      	cbnz	r3, 80167d6 <_strtod_l+0xb66>
 801678c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016790:	9010      	str	r0, [sp, #64]	; 0x40
 8016792:	9311      	str	r3, [sp, #68]	; 0x44
 8016794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016798:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801679c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801679e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80167a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80167a4:	1a9b      	subs	r3, r3, r2
 80167a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80167a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80167ac:	eeb0 0a48 	vmov.f32	s0, s16
 80167b0:	eef0 0a68 	vmov.f32	s1, s17
 80167b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80167b8:	f003 f806 	bl	80197c8 <__ulp>
 80167bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80167c0:	ec53 2b10 	vmov	r2, r3, d0
 80167c4:	f7e9 ff18 	bl	80005f8 <__aeabi_dmul>
 80167c8:	ec53 2b18 	vmov	r2, r3, d8
 80167cc:	f7e9 fd5e 	bl	800028c <__adddf3>
 80167d0:	4680      	mov	r8, r0
 80167d2:	4689      	mov	r9, r1
 80167d4:	e78d      	b.n	80166f2 <_strtod_l+0xa82>
 80167d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80167da:	e7db      	b.n	8016794 <_strtod_l+0xb24>
 80167dc:	a314      	add	r3, pc, #80	; (adr r3, 8016830 <_strtod_l+0xbc0>)
 80167de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e2:	f7ea f97b 	bl	8000adc <__aeabi_dcmplt>
 80167e6:	e7b3      	b.n	8016750 <_strtod_l+0xae0>
 80167e8:	2300      	movs	r3, #0
 80167ea:	930a      	str	r3, [sp, #40]	; 0x28
 80167ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80167ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167f0:	6013      	str	r3, [r2, #0]
 80167f2:	f7ff ba7c 	b.w	8015cee <_strtod_l+0x7e>
 80167f6:	2a65      	cmp	r2, #101	; 0x65
 80167f8:	f43f ab75 	beq.w	8015ee6 <_strtod_l+0x276>
 80167fc:	2a45      	cmp	r2, #69	; 0x45
 80167fe:	f43f ab72 	beq.w	8015ee6 <_strtod_l+0x276>
 8016802:	2301      	movs	r3, #1
 8016804:	f7ff bbaa 	b.w	8015f5c <_strtod_l+0x2ec>
 8016808:	00000000 	.word	0x00000000
 801680c:	bff00000 	.word	0xbff00000
 8016810:	00000000 	.word	0x00000000
 8016814:	3ff00000 	.word	0x3ff00000
 8016818:	94a03595 	.word	0x94a03595
 801681c:	3fdfffff 	.word	0x3fdfffff
 8016820:	35afe535 	.word	0x35afe535
 8016824:	3fe00000 	.word	0x3fe00000
 8016828:	ffc00000 	.word	0xffc00000
 801682c:	41dfffff 	.word	0x41dfffff
 8016830:	94a03595 	.word	0x94a03595
 8016834:	3fcfffff 	.word	0x3fcfffff
 8016838:	3ff00000 	.word	0x3ff00000
 801683c:	3fe00000 	.word	0x3fe00000
 8016840:	7ff00000 	.word	0x7ff00000
 8016844:	7fe00000 	.word	0x7fe00000
 8016848:	7c9fffff 	.word	0x7c9fffff
 801684c:	7fefffff 	.word	0x7fefffff

08016850 <_strtod_r>:
 8016850:	4b01      	ldr	r3, [pc, #4]	; (8016858 <_strtod_r+0x8>)
 8016852:	f7ff ba0d 	b.w	8015c70 <_strtod_l>
 8016856:	bf00      	nop
 8016858:	2000013c 	.word	0x2000013c

0801685c <strtof>:
 801685c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016860:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8016924 <strtof+0xc8>
 8016864:	4b2a      	ldr	r3, [pc, #168]	; (8016910 <strtof+0xb4>)
 8016866:	460a      	mov	r2, r1
 8016868:	ed2d 8b02 	vpush	{d8}
 801686c:	4601      	mov	r1, r0
 801686e:	f8d8 0000 	ldr.w	r0, [r8]
 8016872:	f7ff f9fd 	bl	8015c70 <_strtod_l>
 8016876:	ec55 4b10 	vmov	r4, r5, d0
 801687a:	ee10 2a10 	vmov	r2, s0
 801687e:	ee10 0a10 	vmov	r0, s0
 8016882:	462b      	mov	r3, r5
 8016884:	4629      	mov	r1, r5
 8016886:	f7ea f951 	bl	8000b2c <__aeabi_dcmpun>
 801688a:	b190      	cbz	r0, 80168b2 <strtof+0x56>
 801688c:	2d00      	cmp	r5, #0
 801688e:	4821      	ldr	r0, [pc, #132]	; (8016914 <strtof+0xb8>)
 8016890:	da09      	bge.n	80168a6 <strtof+0x4a>
 8016892:	f001 f9d9 	bl	8017c48 <nanf>
 8016896:	eeb1 8a40 	vneg.f32	s16, s0
 801689a:	eeb0 0a48 	vmov.f32	s0, s16
 801689e:	ecbd 8b02 	vpop	{d8}
 80168a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168a6:	ecbd 8b02 	vpop	{d8}
 80168aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168ae:	f001 b9cb 	b.w	8017c48 <nanf>
 80168b2:	4620      	mov	r0, r4
 80168b4:	4629      	mov	r1, r5
 80168b6:	f7ea f997 	bl	8000be8 <__aeabi_d2f>
 80168ba:	ee08 0a10 	vmov	s16, r0
 80168be:	eddf 7a16 	vldr	s15, [pc, #88]	; 8016918 <strtof+0xbc>
 80168c2:	eeb0 7ac8 	vabs.f32	s14, s16
 80168c6:	eeb4 7a67 	vcmp.f32	s14, s15
 80168ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ce:	dd11      	ble.n	80168f4 <strtof+0x98>
 80168d0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80168d4:	4b11      	ldr	r3, [pc, #68]	; (801691c <strtof+0xc0>)
 80168d6:	f04f 32ff 	mov.w	r2, #4294967295
 80168da:	4620      	mov	r0, r4
 80168dc:	4639      	mov	r1, r7
 80168de:	f7ea f925 	bl	8000b2c <__aeabi_dcmpun>
 80168e2:	b980      	cbnz	r0, 8016906 <strtof+0xaa>
 80168e4:	4b0d      	ldr	r3, [pc, #52]	; (801691c <strtof+0xc0>)
 80168e6:	f04f 32ff 	mov.w	r2, #4294967295
 80168ea:	4620      	mov	r0, r4
 80168ec:	4639      	mov	r1, r7
 80168ee:	f7ea f8ff 	bl	8000af0 <__aeabi_dcmple>
 80168f2:	b940      	cbnz	r0, 8016906 <strtof+0xaa>
 80168f4:	ee18 3a10 	vmov	r3, s16
 80168f8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80168fc:	d1cd      	bne.n	801689a <strtof+0x3e>
 80168fe:	4b08      	ldr	r3, [pc, #32]	; (8016920 <strtof+0xc4>)
 8016900:	402b      	ands	r3, r5
 8016902:	2b00      	cmp	r3, #0
 8016904:	d0c9      	beq.n	801689a <strtof+0x3e>
 8016906:	f8d8 3000 	ldr.w	r3, [r8]
 801690a:	2222      	movs	r2, #34	; 0x22
 801690c:	601a      	str	r2, [r3, #0]
 801690e:	e7c4      	b.n	801689a <strtof+0x3e>
 8016910:	2000013c 	.word	0x2000013c
 8016914:	0801e3c6 	.word	0x0801e3c6
 8016918:	7f7fffff 	.word	0x7f7fffff
 801691c:	7fefffff 	.word	0x7fefffff
 8016920:	7ff00000 	.word	0x7ff00000
 8016924:	200002f4 	.word	0x200002f4

08016928 <_strtol_l.constprop.0>:
 8016928:	2b01      	cmp	r3, #1
 801692a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801692e:	d001      	beq.n	8016934 <_strtol_l.constprop.0+0xc>
 8016930:	2b24      	cmp	r3, #36	; 0x24
 8016932:	d906      	bls.n	8016942 <_strtol_l.constprop.0+0x1a>
 8016934:	f001 f93c 	bl	8017bb0 <__errno>
 8016938:	2316      	movs	r3, #22
 801693a:	6003      	str	r3, [r0, #0]
 801693c:	2000      	movs	r0, #0
 801693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016942:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016a28 <_strtol_l.constprop.0+0x100>
 8016946:	460d      	mov	r5, r1
 8016948:	462e      	mov	r6, r5
 801694a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801694e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8016952:	f017 0708 	ands.w	r7, r7, #8
 8016956:	d1f7      	bne.n	8016948 <_strtol_l.constprop.0+0x20>
 8016958:	2c2d      	cmp	r4, #45	; 0x2d
 801695a:	d132      	bne.n	80169c2 <_strtol_l.constprop.0+0x9a>
 801695c:	782c      	ldrb	r4, [r5, #0]
 801695e:	2701      	movs	r7, #1
 8016960:	1cb5      	adds	r5, r6, #2
 8016962:	2b00      	cmp	r3, #0
 8016964:	d05b      	beq.n	8016a1e <_strtol_l.constprop.0+0xf6>
 8016966:	2b10      	cmp	r3, #16
 8016968:	d109      	bne.n	801697e <_strtol_l.constprop.0+0x56>
 801696a:	2c30      	cmp	r4, #48	; 0x30
 801696c:	d107      	bne.n	801697e <_strtol_l.constprop.0+0x56>
 801696e:	782c      	ldrb	r4, [r5, #0]
 8016970:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016974:	2c58      	cmp	r4, #88	; 0x58
 8016976:	d14d      	bne.n	8016a14 <_strtol_l.constprop.0+0xec>
 8016978:	786c      	ldrb	r4, [r5, #1]
 801697a:	2310      	movs	r3, #16
 801697c:	3502      	adds	r5, #2
 801697e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016982:	f108 38ff 	add.w	r8, r8, #4294967295
 8016986:	f04f 0e00 	mov.w	lr, #0
 801698a:	fbb8 f9f3 	udiv	r9, r8, r3
 801698e:	4676      	mov	r6, lr
 8016990:	fb03 8a19 	mls	sl, r3, r9, r8
 8016994:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016998:	f1bc 0f09 	cmp.w	ip, #9
 801699c:	d816      	bhi.n	80169cc <_strtol_l.constprop.0+0xa4>
 801699e:	4664      	mov	r4, ip
 80169a0:	42a3      	cmp	r3, r4
 80169a2:	dd24      	ble.n	80169ee <_strtol_l.constprop.0+0xc6>
 80169a4:	f1be 3fff 	cmp.w	lr, #4294967295
 80169a8:	d008      	beq.n	80169bc <_strtol_l.constprop.0+0x94>
 80169aa:	45b1      	cmp	r9, r6
 80169ac:	d31c      	bcc.n	80169e8 <_strtol_l.constprop.0+0xc0>
 80169ae:	d101      	bne.n	80169b4 <_strtol_l.constprop.0+0x8c>
 80169b0:	45a2      	cmp	sl, r4
 80169b2:	db19      	blt.n	80169e8 <_strtol_l.constprop.0+0xc0>
 80169b4:	fb06 4603 	mla	r6, r6, r3, r4
 80169b8:	f04f 0e01 	mov.w	lr, #1
 80169bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80169c0:	e7e8      	b.n	8016994 <_strtol_l.constprop.0+0x6c>
 80169c2:	2c2b      	cmp	r4, #43	; 0x2b
 80169c4:	bf04      	itt	eq
 80169c6:	782c      	ldrbeq	r4, [r5, #0]
 80169c8:	1cb5      	addeq	r5, r6, #2
 80169ca:	e7ca      	b.n	8016962 <_strtol_l.constprop.0+0x3a>
 80169cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80169d0:	f1bc 0f19 	cmp.w	ip, #25
 80169d4:	d801      	bhi.n	80169da <_strtol_l.constprop.0+0xb2>
 80169d6:	3c37      	subs	r4, #55	; 0x37
 80169d8:	e7e2      	b.n	80169a0 <_strtol_l.constprop.0+0x78>
 80169da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80169de:	f1bc 0f19 	cmp.w	ip, #25
 80169e2:	d804      	bhi.n	80169ee <_strtol_l.constprop.0+0xc6>
 80169e4:	3c57      	subs	r4, #87	; 0x57
 80169e6:	e7db      	b.n	80169a0 <_strtol_l.constprop.0+0x78>
 80169e8:	f04f 3eff 	mov.w	lr, #4294967295
 80169ec:	e7e6      	b.n	80169bc <_strtol_l.constprop.0+0x94>
 80169ee:	f1be 3fff 	cmp.w	lr, #4294967295
 80169f2:	d105      	bne.n	8016a00 <_strtol_l.constprop.0+0xd8>
 80169f4:	2322      	movs	r3, #34	; 0x22
 80169f6:	6003      	str	r3, [r0, #0]
 80169f8:	4646      	mov	r6, r8
 80169fa:	b942      	cbnz	r2, 8016a0e <_strtol_l.constprop.0+0xe6>
 80169fc:	4630      	mov	r0, r6
 80169fe:	e79e      	b.n	801693e <_strtol_l.constprop.0+0x16>
 8016a00:	b107      	cbz	r7, 8016a04 <_strtol_l.constprop.0+0xdc>
 8016a02:	4276      	negs	r6, r6
 8016a04:	2a00      	cmp	r2, #0
 8016a06:	d0f9      	beq.n	80169fc <_strtol_l.constprop.0+0xd4>
 8016a08:	f1be 0f00 	cmp.w	lr, #0
 8016a0c:	d000      	beq.n	8016a10 <_strtol_l.constprop.0+0xe8>
 8016a0e:	1e69      	subs	r1, r5, #1
 8016a10:	6011      	str	r1, [r2, #0]
 8016a12:	e7f3      	b.n	80169fc <_strtol_l.constprop.0+0xd4>
 8016a14:	2430      	movs	r4, #48	; 0x30
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d1b1      	bne.n	801697e <_strtol_l.constprop.0+0x56>
 8016a1a:	2308      	movs	r3, #8
 8016a1c:	e7af      	b.n	801697e <_strtol_l.constprop.0+0x56>
 8016a1e:	2c30      	cmp	r4, #48	; 0x30
 8016a20:	d0a5      	beq.n	801696e <_strtol_l.constprop.0+0x46>
 8016a22:	230a      	movs	r3, #10
 8016a24:	e7ab      	b.n	801697e <_strtol_l.constprop.0+0x56>
 8016a26:	bf00      	nop
 8016a28:	0801e1d9 	.word	0x0801e1d9

08016a2c <_strtol_r>:
 8016a2c:	f7ff bf7c 	b.w	8016928 <_strtol_l.constprop.0>

08016a30 <strtol>:
 8016a30:	4613      	mov	r3, r2
 8016a32:	460a      	mov	r2, r1
 8016a34:	4601      	mov	r1, r0
 8016a36:	4802      	ldr	r0, [pc, #8]	; (8016a40 <strtol+0x10>)
 8016a38:	6800      	ldr	r0, [r0, #0]
 8016a3a:	f7ff bf75 	b.w	8016928 <_strtol_l.constprop.0>
 8016a3e:	bf00      	nop
 8016a40:	200002f4 	.word	0x200002f4

08016a44 <__cvt>:
 8016a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016a48:	ec55 4b10 	vmov	r4, r5, d0
 8016a4c:	2d00      	cmp	r5, #0
 8016a4e:	460e      	mov	r6, r1
 8016a50:	4619      	mov	r1, r3
 8016a52:	462b      	mov	r3, r5
 8016a54:	bfbb      	ittet	lt
 8016a56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016a5a:	461d      	movlt	r5, r3
 8016a5c:	2300      	movge	r3, #0
 8016a5e:	232d      	movlt	r3, #45	; 0x2d
 8016a60:	700b      	strb	r3, [r1, #0]
 8016a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016a68:	4691      	mov	r9, r2
 8016a6a:	f023 0820 	bic.w	r8, r3, #32
 8016a6e:	bfbc      	itt	lt
 8016a70:	4622      	movlt	r2, r4
 8016a72:	4614      	movlt	r4, r2
 8016a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016a78:	d005      	beq.n	8016a86 <__cvt+0x42>
 8016a7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016a7e:	d100      	bne.n	8016a82 <__cvt+0x3e>
 8016a80:	3601      	adds	r6, #1
 8016a82:	2102      	movs	r1, #2
 8016a84:	e000      	b.n	8016a88 <__cvt+0x44>
 8016a86:	2103      	movs	r1, #3
 8016a88:	ab03      	add	r3, sp, #12
 8016a8a:	9301      	str	r3, [sp, #4]
 8016a8c:	ab02      	add	r3, sp, #8
 8016a8e:	9300      	str	r3, [sp, #0]
 8016a90:	ec45 4b10 	vmov	d0, r4, r5
 8016a94:	4653      	mov	r3, sl
 8016a96:	4632      	mov	r2, r6
 8016a98:	f001 f982 	bl	8017da0 <_dtoa_r>
 8016a9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016aa0:	4607      	mov	r7, r0
 8016aa2:	d102      	bne.n	8016aaa <__cvt+0x66>
 8016aa4:	f019 0f01 	tst.w	r9, #1
 8016aa8:	d022      	beq.n	8016af0 <__cvt+0xac>
 8016aaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016aae:	eb07 0906 	add.w	r9, r7, r6
 8016ab2:	d110      	bne.n	8016ad6 <__cvt+0x92>
 8016ab4:	783b      	ldrb	r3, [r7, #0]
 8016ab6:	2b30      	cmp	r3, #48	; 0x30
 8016ab8:	d10a      	bne.n	8016ad0 <__cvt+0x8c>
 8016aba:	2200      	movs	r2, #0
 8016abc:	2300      	movs	r3, #0
 8016abe:	4620      	mov	r0, r4
 8016ac0:	4629      	mov	r1, r5
 8016ac2:	f7ea f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8016ac6:	b918      	cbnz	r0, 8016ad0 <__cvt+0x8c>
 8016ac8:	f1c6 0601 	rsb	r6, r6, #1
 8016acc:	f8ca 6000 	str.w	r6, [sl]
 8016ad0:	f8da 3000 	ldr.w	r3, [sl]
 8016ad4:	4499      	add	r9, r3
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	2300      	movs	r3, #0
 8016ada:	4620      	mov	r0, r4
 8016adc:	4629      	mov	r1, r5
 8016ade:	f7e9 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 8016ae2:	b108      	cbz	r0, 8016ae8 <__cvt+0xa4>
 8016ae4:	f8cd 900c 	str.w	r9, [sp, #12]
 8016ae8:	2230      	movs	r2, #48	; 0x30
 8016aea:	9b03      	ldr	r3, [sp, #12]
 8016aec:	454b      	cmp	r3, r9
 8016aee:	d307      	bcc.n	8016b00 <__cvt+0xbc>
 8016af0:	9b03      	ldr	r3, [sp, #12]
 8016af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016af4:	1bdb      	subs	r3, r3, r7
 8016af6:	4638      	mov	r0, r7
 8016af8:	6013      	str	r3, [r2, #0]
 8016afa:	b004      	add	sp, #16
 8016afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b00:	1c59      	adds	r1, r3, #1
 8016b02:	9103      	str	r1, [sp, #12]
 8016b04:	701a      	strb	r2, [r3, #0]
 8016b06:	e7f0      	b.n	8016aea <__cvt+0xa6>

08016b08 <__exponent>:
 8016b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	2900      	cmp	r1, #0
 8016b0e:	bfb8      	it	lt
 8016b10:	4249      	neglt	r1, r1
 8016b12:	f803 2b02 	strb.w	r2, [r3], #2
 8016b16:	bfb4      	ite	lt
 8016b18:	222d      	movlt	r2, #45	; 0x2d
 8016b1a:	222b      	movge	r2, #43	; 0x2b
 8016b1c:	2909      	cmp	r1, #9
 8016b1e:	7042      	strb	r2, [r0, #1]
 8016b20:	dd2a      	ble.n	8016b78 <__exponent+0x70>
 8016b22:	f10d 0207 	add.w	r2, sp, #7
 8016b26:	4617      	mov	r7, r2
 8016b28:	260a      	movs	r6, #10
 8016b2a:	4694      	mov	ip, r2
 8016b2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8016b30:	fb06 1415 	mls	r4, r6, r5, r1
 8016b34:	3430      	adds	r4, #48	; 0x30
 8016b36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016b3a:	460c      	mov	r4, r1
 8016b3c:	2c63      	cmp	r4, #99	; 0x63
 8016b3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8016b42:	4629      	mov	r1, r5
 8016b44:	dcf1      	bgt.n	8016b2a <__exponent+0x22>
 8016b46:	3130      	adds	r1, #48	; 0x30
 8016b48:	f1ac 0402 	sub.w	r4, ip, #2
 8016b4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016b50:	1c41      	adds	r1, r0, #1
 8016b52:	4622      	mov	r2, r4
 8016b54:	42ba      	cmp	r2, r7
 8016b56:	d30a      	bcc.n	8016b6e <__exponent+0x66>
 8016b58:	f10d 0209 	add.w	r2, sp, #9
 8016b5c:	eba2 020c 	sub.w	r2, r2, ip
 8016b60:	42bc      	cmp	r4, r7
 8016b62:	bf88      	it	hi
 8016b64:	2200      	movhi	r2, #0
 8016b66:	4413      	add	r3, r2
 8016b68:	1a18      	subs	r0, r3, r0
 8016b6a:	b003      	add	sp, #12
 8016b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016b72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016b76:	e7ed      	b.n	8016b54 <__exponent+0x4c>
 8016b78:	2330      	movs	r3, #48	; 0x30
 8016b7a:	3130      	adds	r1, #48	; 0x30
 8016b7c:	7083      	strb	r3, [r0, #2]
 8016b7e:	70c1      	strb	r1, [r0, #3]
 8016b80:	1d03      	adds	r3, r0, #4
 8016b82:	e7f1      	b.n	8016b68 <__exponent+0x60>

08016b84 <_printf_float>:
 8016b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b88:	ed2d 8b02 	vpush	{d8}
 8016b8c:	b08d      	sub	sp, #52	; 0x34
 8016b8e:	460c      	mov	r4, r1
 8016b90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016b94:	4616      	mov	r6, r2
 8016b96:	461f      	mov	r7, r3
 8016b98:	4605      	mov	r5, r0
 8016b9a:	f000 ffaf 	bl	8017afc <_localeconv_r>
 8016b9e:	f8d0 a000 	ldr.w	sl, [r0]
 8016ba2:	4650      	mov	r0, sl
 8016ba4:	f7e9 fb64 	bl	8000270 <strlen>
 8016ba8:	2300      	movs	r3, #0
 8016baa:	930a      	str	r3, [sp, #40]	; 0x28
 8016bac:	6823      	ldr	r3, [r4, #0]
 8016bae:	9305      	str	r3, [sp, #20]
 8016bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8016bb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016bb8:	3307      	adds	r3, #7
 8016bba:	f023 0307 	bic.w	r3, r3, #7
 8016bbe:	f103 0208 	add.w	r2, r3, #8
 8016bc2:	f8c8 2000 	str.w	r2, [r8]
 8016bc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016bca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016bce:	9307      	str	r3, [sp, #28]
 8016bd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8016bd4:	ee08 0a10 	vmov	s16, r0
 8016bd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016be0:	4b9e      	ldr	r3, [pc, #632]	; (8016e5c <_printf_float+0x2d8>)
 8016be2:	f04f 32ff 	mov.w	r2, #4294967295
 8016be6:	f7e9 ffa1 	bl	8000b2c <__aeabi_dcmpun>
 8016bea:	bb88      	cbnz	r0, 8016c50 <_printf_float+0xcc>
 8016bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016bf0:	4b9a      	ldr	r3, [pc, #616]	; (8016e5c <_printf_float+0x2d8>)
 8016bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8016bf6:	f7e9 ff7b 	bl	8000af0 <__aeabi_dcmple>
 8016bfa:	bb48      	cbnz	r0, 8016c50 <_printf_float+0xcc>
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	2300      	movs	r3, #0
 8016c00:	4640      	mov	r0, r8
 8016c02:	4649      	mov	r1, r9
 8016c04:	f7e9 ff6a 	bl	8000adc <__aeabi_dcmplt>
 8016c08:	b110      	cbz	r0, 8016c10 <_printf_float+0x8c>
 8016c0a:	232d      	movs	r3, #45	; 0x2d
 8016c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c10:	4a93      	ldr	r2, [pc, #588]	; (8016e60 <_printf_float+0x2dc>)
 8016c12:	4b94      	ldr	r3, [pc, #592]	; (8016e64 <_printf_float+0x2e0>)
 8016c14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016c18:	bf94      	ite	ls
 8016c1a:	4690      	movls	r8, r2
 8016c1c:	4698      	movhi	r8, r3
 8016c1e:	2303      	movs	r3, #3
 8016c20:	6123      	str	r3, [r4, #16]
 8016c22:	9b05      	ldr	r3, [sp, #20]
 8016c24:	f023 0304 	bic.w	r3, r3, #4
 8016c28:	6023      	str	r3, [r4, #0]
 8016c2a:	f04f 0900 	mov.w	r9, #0
 8016c2e:	9700      	str	r7, [sp, #0]
 8016c30:	4633      	mov	r3, r6
 8016c32:	aa0b      	add	r2, sp, #44	; 0x2c
 8016c34:	4621      	mov	r1, r4
 8016c36:	4628      	mov	r0, r5
 8016c38:	f000 f9da 	bl	8016ff0 <_printf_common>
 8016c3c:	3001      	adds	r0, #1
 8016c3e:	f040 8090 	bne.w	8016d62 <_printf_float+0x1de>
 8016c42:	f04f 30ff 	mov.w	r0, #4294967295
 8016c46:	b00d      	add	sp, #52	; 0x34
 8016c48:	ecbd 8b02 	vpop	{d8}
 8016c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c50:	4642      	mov	r2, r8
 8016c52:	464b      	mov	r3, r9
 8016c54:	4640      	mov	r0, r8
 8016c56:	4649      	mov	r1, r9
 8016c58:	f7e9 ff68 	bl	8000b2c <__aeabi_dcmpun>
 8016c5c:	b140      	cbz	r0, 8016c70 <_printf_float+0xec>
 8016c5e:	464b      	mov	r3, r9
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	bfbc      	itt	lt
 8016c64:	232d      	movlt	r3, #45	; 0x2d
 8016c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016c6a:	4a7f      	ldr	r2, [pc, #508]	; (8016e68 <_printf_float+0x2e4>)
 8016c6c:	4b7f      	ldr	r3, [pc, #508]	; (8016e6c <_printf_float+0x2e8>)
 8016c6e:	e7d1      	b.n	8016c14 <_printf_float+0x90>
 8016c70:	6863      	ldr	r3, [r4, #4]
 8016c72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016c76:	9206      	str	r2, [sp, #24]
 8016c78:	1c5a      	adds	r2, r3, #1
 8016c7a:	d13f      	bne.n	8016cfc <_printf_float+0x178>
 8016c7c:	2306      	movs	r3, #6
 8016c7e:	6063      	str	r3, [r4, #4]
 8016c80:	9b05      	ldr	r3, [sp, #20]
 8016c82:	6861      	ldr	r1, [r4, #4]
 8016c84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016c88:	2300      	movs	r3, #0
 8016c8a:	9303      	str	r3, [sp, #12]
 8016c8c:	ab0a      	add	r3, sp, #40	; 0x28
 8016c8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016c92:	ab09      	add	r3, sp, #36	; 0x24
 8016c94:	ec49 8b10 	vmov	d0, r8, r9
 8016c98:	9300      	str	r3, [sp, #0]
 8016c9a:	6022      	str	r2, [r4, #0]
 8016c9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	f7ff fecf 	bl	8016a44 <__cvt>
 8016ca6:	9b06      	ldr	r3, [sp, #24]
 8016ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016caa:	2b47      	cmp	r3, #71	; 0x47
 8016cac:	4680      	mov	r8, r0
 8016cae:	d108      	bne.n	8016cc2 <_printf_float+0x13e>
 8016cb0:	1cc8      	adds	r0, r1, #3
 8016cb2:	db02      	blt.n	8016cba <_printf_float+0x136>
 8016cb4:	6863      	ldr	r3, [r4, #4]
 8016cb6:	4299      	cmp	r1, r3
 8016cb8:	dd41      	ble.n	8016d3e <_printf_float+0x1ba>
 8016cba:	f1ab 0302 	sub.w	r3, fp, #2
 8016cbe:	fa5f fb83 	uxtb.w	fp, r3
 8016cc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016cc6:	d820      	bhi.n	8016d0a <_printf_float+0x186>
 8016cc8:	3901      	subs	r1, #1
 8016cca:	465a      	mov	r2, fp
 8016ccc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016cd0:	9109      	str	r1, [sp, #36]	; 0x24
 8016cd2:	f7ff ff19 	bl	8016b08 <__exponent>
 8016cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016cd8:	1813      	adds	r3, r2, r0
 8016cda:	2a01      	cmp	r2, #1
 8016cdc:	4681      	mov	r9, r0
 8016cde:	6123      	str	r3, [r4, #16]
 8016ce0:	dc02      	bgt.n	8016ce8 <_printf_float+0x164>
 8016ce2:	6822      	ldr	r2, [r4, #0]
 8016ce4:	07d2      	lsls	r2, r2, #31
 8016ce6:	d501      	bpl.n	8016cec <_printf_float+0x168>
 8016ce8:	3301      	adds	r3, #1
 8016cea:	6123      	str	r3, [r4, #16]
 8016cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d09c      	beq.n	8016c2e <_printf_float+0xaa>
 8016cf4:	232d      	movs	r3, #45	; 0x2d
 8016cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cfa:	e798      	b.n	8016c2e <_printf_float+0xaa>
 8016cfc:	9a06      	ldr	r2, [sp, #24]
 8016cfe:	2a47      	cmp	r2, #71	; 0x47
 8016d00:	d1be      	bne.n	8016c80 <_printf_float+0xfc>
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d1bc      	bne.n	8016c80 <_printf_float+0xfc>
 8016d06:	2301      	movs	r3, #1
 8016d08:	e7b9      	b.n	8016c7e <_printf_float+0xfa>
 8016d0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016d0e:	d118      	bne.n	8016d42 <_printf_float+0x1be>
 8016d10:	2900      	cmp	r1, #0
 8016d12:	6863      	ldr	r3, [r4, #4]
 8016d14:	dd0b      	ble.n	8016d2e <_printf_float+0x1aa>
 8016d16:	6121      	str	r1, [r4, #16]
 8016d18:	b913      	cbnz	r3, 8016d20 <_printf_float+0x19c>
 8016d1a:	6822      	ldr	r2, [r4, #0]
 8016d1c:	07d0      	lsls	r0, r2, #31
 8016d1e:	d502      	bpl.n	8016d26 <_printf_float+0x1a2>
 8016d20:	3301      	adds	r3, #1
 8016d22:	440b      	add	r3, r1
 8016d24:	6123      	str	r3, [r4, #16]
 8016d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8016d28:	f04f 0900 	mov.w	r9, #0
 8016d2c:	e7de      	b.n	8016cec <_printf_float+0x168>
 8016d2e:	b913      	cbnz	r3, 8016d36 <_printf_float+0x1b2>
 8016d30:	6822      	ldr	r2, [r4, #0]
 8016d32:	07d2      	lsls	r2, r2, #31
 8016d34:	d501      	bpl.n	8016d3a <_printf_float+0x1b6>
 8016d36:	3302      	adds	r3, #2
 8016d38:	e7f4      	b.n	8016d24 <_printf_float+0x1a0>
 8016d3a:	2301      	movs	r3, #1
 8016d3c:	e7f2      	b.n	8016d24 <_printf_float+0x1a0>
 8016d3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d44:	4299      	cmp	r1, r3
 8016d46:	db05      	blt.n	8016d54 <_printf_float+0x1d0>
 8016d48:	6823      	ldr	r3, [r4, #0]
 8016d4a:	6121      	str	r1, [r4, #16]
 8016d4c:	07d8      	lsls	r0, r3, #31
 8016d4e:	d5ea      	bpl.n	8016d26 <_printf_float+0x1a2>
 8016d50:	1c4b      	adds	r3, r1, #1
 8016d52:	e7e7      	b.n	8016d24 <_printf_float+0x1a0>
 8016d54:	2900      	cmp	r1, #0
 8016d56:	bfd4      	ite	le
 8016d58:	f1c1 0202 	rsble	r2, r1, #2
 8016d5c:	2201      	movgt	r2, #1
 8016d5e:	4413      	add	r3, r2
 8016d60:	e7e0      	b.n	8016d24 <_printf_float+0x1a0>
 8016d62:	6823      	ldr	r3, [r4, #0]
 8016d64:	055a      	lsls	r2, r3, #21
 8016d66:	d407      	bmi.n	8016d78 <_printf_float+0x1f4>
 8016d68:	6923      	ldr	r3, [r4, #16]
 8016d6a:	4642      	mov	r2, r8
 8016d6c:	4631      	mov	r1, r6
 8016d6e:	4628      	mov	r0, r5
 8016d70:	47b8      	blx	r7
 8016d72:	3001      	adds	r0, #1
 8016d74:	d12c      	bne.n	8016dd0 <_printf_float+0x24c>
 8016d76:	e764      	b.n	8016c42 <_printf_float+0xbe>
 8016d78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016d7c:	f240 80e0 	bls.w	8016f40 <_printf_float+0x3bc>
 8016d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016d84:	2200      	movs	r2, #0
 8016d86:	2300      	movs	r3, #0
 8016d88:	f7e9 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8016d8c:	2800      	cmp	r0, #0
 8016d8e:	d034      	beq.n	8016dfa <_printf_float+0x276>
 8016d90:	4a37      	ldr	r2, [pc, #220]	; (8016e70 <_printf_float+0x2ec>)
 8016d92:	2301      	movs	r3, #1
 8016d94:	4631      	mov	r1, r6
 8016d96:	4628      	mov	r0, r5
 8016d98:	47b8      	blx	r7
 8016d9a:	3001      	adds	r0, #1
 8016d9c:	f43f af51 	beq.w	8016c42 <_printf_float+0xbe>
 8016da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016da4:	429a      	cmp	r2, r3
 8016da6:	db02      	blt.n	8016dae <_printf_float+0x22a>
 8016da8:	6823      	ldr	r3, [r4, #0]
 8016daa:	07d8      	lsls	r0, r3, #31
 8016dac:	d510      	bpl.n	8016dd0 <_printf_float+0x24c>
 8016dae:	ee18 3a10 	vmov	r3, s16
 8016db2:	4652      	mov	r2, sl
 8016db4:	4631      	mov	r1, r6
 8016db6:	4628      	mov	r0, r5
 8016db8:	47b8      	blx	r7
 8016dba:	3001      	adds	r0, #1
 8016dbc:	f43f af41 	beq.w	8016c42 <_printf_float+0xbe>
 8016dc0:	f04f 0800 	mov.w	r8, #0
 8016dc4:	f104 091a 	add.w	r9, r4, #26
 8016dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dca:	3b01      	subs	r3, #1
 8016dcc:	4543      	cmp	r3, r8
 8016dce:	dc09      	bgt.n	8016de4 <_printf_float+0x260>
 8016dd0:	6823      	ldr	r3, [r4, #0]
 8016dd2:	079b      	lsls	r3, r3, #30
 8016dd4:	f100 8107 	bmi.w	8016fe6 <_printf_float+0x462>
 8016dd8:	68e0      	ldr	r0, [r4, #12]
 8016dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ddc:	4298      	cmp	r0, r3
 8016dde:	bfb8      	it	lt
 8016de0:	4618      	movlt	r0, r3
 8016de2:	e730      	b.n	8016c46 <_printf_float+0xc2>
 8016de4:	2301      	movs	r3, #1
 8016de6:	464a      	mov	r2, r9
 8016de8:	4631      	mov	r1, r6
 8016dea:	4628      	mov	r0, r5
 8016dec:	47b8      	blx	r7
 8016dee:	3001      	adds	r0, #1
 8016df0:	f43f af27 	beq.w	8016c42 <_printf_float+0xbe>
 8016df4:	f108 0801 	add.w	r8, r8, #1
 8016df8:	e7e6      	b.n	8016dc8 <_printf_float+0x244>
 8016dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	dc39      	bgt.n	8016e74 <_printf_float+0x2f0>
 8016e00:	4a1b      	ldr	r2, [pc, #108]	; (8016e70 <_printf_float+0x2ec>)
 8016e02:	2301      	movs	r3, #1
 8016e04:	4631      	mov	r1, r6
 8016e06:	4628      	mov	r0, r5
 8016e08:	47b8      	blx	r7
 8016e0a:	3001      	adds	r0, #1
 8016e0c:	f43f af19 	beq.w	8016c42 <_printf_float+0xbe>
 8016e10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016e14:	4313      	orrs	r3, r2
 8016e16:	d102      	bne.n	8016e1e <_printf_float+0x29a>
 8016e18:	6823      	ldr	r3, [r4, #0]
 8016e1a:	07d9      	lsls	r1, r3, #31
 8016e1c:	d5d8      	bpl.n	8016dd0 <_printf_float+0x24c>
 8016e1e:	ee18 3a10 	vmov	r3, s16
 8016e22:	4652      	mov	r2, sl
 8016e24:	4631      	mov	r1, r6
 8016e26:	4628      	mov	r0, r5
 8016e28:	47b8      	blx	r7
 8016e2a:	3001      	adds	r0, #1
 8016e2c:	f43f af09 	beq.w	8016c42 <_printf_float+0xbe>
 8016e30:	f04f 0900 	mov.w	r9, #0
 8016e34:	f104 0a1a 	add.w	sl, r4, #26
 8016e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e3a:	425b      	negs	r3, r3
 8016e3c:	454b      	cmp	r3, r9
 8016e3e:	dc01      	bgt.n	8016e44 <_printf_float+0x2c0>
 8016e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e42:	e792      	b.n	8016d6a <_printf_float+0x1e6>
 8016e44:	2301      	movs	r3, #1
 8016e46:	4652      	mov	r2, sl
 8016e48:	4631      	mov	r1, r6
 8016e4a:	4628      	mov	r0, r5
 8016e4c:	47b8      	blx	r7
 8016e4e:	3001      	adds	r0, #1
 8016e50:	f43f aef7 	beq.w	8016c42 <_printf_float+0xbe>
 8016e54:	f109 0901 	add.w	r9, r9, #1
 8016e58:	e7ee      	b.n	8016e38 <_printf_float+0x2b4>
 8016e5a:	bf00      	nop
 8016e5c:	7fefffff 	.word	0x7fefffff
 8016e60:	0801e2d9 	.word	0x0801e2d9
 8016e64:	0801e2dd 	.word	0x0801e2dd
 8016e68:	0801e2e1 	.word	0x0801e2e1
 8016e6c:	0801e2e5 	.word	0x0801e2e5
 8016e70:	0801e2e9 	.word	0x0801e2e9
 8016e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016e78:	429a      	cmp	r2, r3
 8016e7a:	bfa8      	it	ge
 8016e7c:	461a      	movge	r2, r3
 8016e7e:	2a00      	cmp	r2, #0
 8016e80:	4691      	mov	r9, r2
 8016e82:	dc37      	bgt.n	8016ef4 <_printf_float+0x370>
 8016e84:	f04f 0b00 	mov.w	fp, #0
 8016e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016e8c:	f104 021a 	add.w	r2, r4, #26
 8016e90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016e92:	9305      	str	r3, [sp, #20]
 8016e94:	eba3 0309 	sub.w	r3, r3, r9
 8016e98:	455b      	cmp	r3, fp
 8016e9a:	dc33      	bgt.n	8016f04 <_printf_float+0x380>
 8016e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016ea0:	429a      	cmp	r2, r3
 8016ea2:	db3b      	blt.n	8016f1c <_printf_float+0x398>
 8016ea4:	6823      	ldr	r3, [r4, #0]
 8016ea6:	07da      	lsls	r2, r3, #31
 8016ea8:	d438      	bmi.n	8016f1c <_printf_float+0x398>
 8016eaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016eae:	eba2 0903 	sub.w	r9, r2, r3
 8016eb2:	9b05      	ldr	r3, [sp, #20]
 8016eb4:	1ad2      	subs	r2, r2, r3
 8016eb6:	4591      	cmp	r9, r2
 8016eb8:	bfa8      	it	ge
 8016eba:	4691      	movge	r9, r2
 8016ebc:	f1b9 0f00 	cmp.w	r9, #0
 8016ec0:	dc35      	bgt.n	8016f2e <_printf_float+0x3aa>
 8016ec2:	f04f 0800 	mov.w	r8, #0
 8016ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016eca:	f104 0a1a 	add.w	sl, r4, #26
 8016ece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016ed2:	1a9b      	subs	r3, r3, r2
 8016ed4:	eba3 0309 	sub.w	r3, r3, r9
 8016ed8:	4543      	cmp	r3, r8
 8016eda:	f77f af79 	ble.w	8016dd0 <_printf_float+0x24c>
 8016ede:	2301      	movs	r3, #1
 8016ee0:	4652      	mov	r2, sl
 8016ee2:	4631      	mov	r1, r6
 8016ee4:	4628      	mov	r0, r5
 8016ee6:	47b8      	blx	r7
 8016ee8:	3001      	adds	r0, #1
 8016eea:	f43f aeaa 	beq.w	8016c42 <_printf_float+0xbe>
 8016eee:	f108 0801 	add.w	r8, r8, #1
 8016ef2:	e7ec      	b.n	8016ece <_printf_float+0x34a>
 8016ef4:	4613      	mov	r3, r2
 8016ef6:	4631      	mov	r1, r6
 8016ef8:	4642      	mov	r2, r8
 8016efa:	4628      	mov	r0, r5
 8016efc:	47b8      	blx	r7
 8016efe:	3001      	adds	r0, #1
 8016f00:	d1c0      	bne.n	8016e84 <_printf_float+0x300>
 8016f02:	e69e      	b.n	8016c42 <_printf_float+0xbe>
 8016f04:	2301      	movs	r3, #1
 8016f06:	4631      	mov	r1, r6
 8016f08:	4628      	mov	r0, r5
 8016f0a:	9205      	str	r2, [sp, #20]
 8016f0c:	47b8      	blx	r7
 8016f0e:	3001      	adds	r0, #1
 8016f10:	f43f ae97 	beq.w	8016c42 <_printf_float+0xbe>
 8016f14:	9a05      	ldr	r2, [sp, #20]
 8016f16:	f10b 0b01 	add.w	fp, fp, #1
 8016f1a:	e7b9      	b.n	8016e90 <_printf_float+0x30c>
 8016f1c:	ee18 3a10 	vmov	r3, s16
 8016f20:	4652      	mov	r2, sl
 8016f22:	4631      	mov	r1, r6
 8016f24:	4628      	mov	r0, r5
 8016f26:	47b8      	blx	r7
 8016f28:	3001      	adds	r0, #1
 8016f2a:	d1be      	bne.n	8016eaa <_printf_float+0x326>
 8016f2c:	e689      	b.n	8016c42 <_printf_float+0xbe>
 8016f2e:	9a05      	ldr	r2, [sp, #20]
 8016f30:	464b      	mov	r3, r9
 8016f32:	4442      	add	r2, r8
 8016f34:	4631      	mov	r1, r6
 8016f36:	4628      	mov	r0, r5
 8016f38:	47b8      	blx	r7
 8016f3a:	3001      	adds	r0, #1
 8016f3c:	d1c1      	bne.n	8016ec2 <_printf_float+0x33e>
 8016f3e:	e680      	b.n	8016c42 <_printf_float+0xbe>
 8016f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f42:	2a01      	cmp	r2, #1
 8016f44:	dc01      	bgt.n	8016f4a <_printf_float+0x3c6>
 8016f46:	07db      	lsls	r3, r3, #31
 8016f48:	d53a      	bpl.n	8016fc0 <_printf_float+0x43c>
 8016f4a:	2301      	movs	r3, #1
 8016f4c:	4642      	mov	r2, r8
 8016f4e:	4631      	mov	r1, r6
 8016f50:	4628      	mov	r0, r5
 8016f52:	47b8      	blx	r7
 8016f54:	3001      	adds	r0, #1
 8016f56:	f43f ae74 	beq.w	8016c42 <_printf_float+0xbe>
 8016f5a:	ee18 3a10 	vmov	r3, s16
 8016f5e:	4652      	mov	r2, sl
 8016f60:	4631      	mov	r1, r6
 8016f62:	4628      	mov	r0, r5
 8016f64:	47b8      	blx	r7
 8016f66:	3001      	adds	r0, #1
 8016f68:	f43f ae6b 	beq.w	8016c42 <_printf_float+0xbe>
 8016f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016f70:	2200      	movs	r2, #0
 8016f72:	2300      	movs	r3, #0
 8016f74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016f78:	f7e9 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 8016f7c:	b9d8      	cbnz	r0, 8016fb6 <_printf_float+0x432>
 8016f7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016f82:	f108 0201 	add.w	r2, r8, #1
 8016f86:	4631      	mov	r1, r6
 8016f88:	4628      	mov	r0, r5
 8016f8a:	47b8      	blx	r7
 8016f8c:	3001      	adds	r0, #1
 8016f8e:	d10e      	bne.n	8016fae <_printf_float+0x42a>
 8016f90:	e657      	b.n	8016c42 <_printf_float+0xbe>
 8016f92:	2301      	movs	r3, #1
 8016f94:	4652      	mov	r2, sl
 8016f96:	4631      	mov	r1, r6
 8016f98:	4628      	mov	r0, r5
 8016f9a:	47b8      	blx	r7
 8016f9c:	3001      	adds	r0, #1
 8016f9e:	f43f ae50 	beq.w	8016c42 <_printf_float+0xbe>
 8016fa2:	f108 0801 	add.w	r8, r8, #1
 8016fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fa8:	3b01      	subs	r3, #1
 8016faa:	4543      	cmp	r3, r8
 8016fac:	dcf1      	bgt.n	8016f92 <_printf_float+0x40e>
 8016fae:	464b      	mov	r3, r9
 8016fb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016fb4:	e6da      	b.n	8016d6c <_printf_float+0x1e8>
 8016fb6:	f04f 0800 	mov.w	r8, #0
 8016fba:	f104 0a1a 	add.w	sl, r4, #26
 8016fbe:	e7f2      	b.n	8016fa6 <_printf_float+0x422>
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	4642      	mov	r2, r8
 8016fc4:	e7df      	b.n	8016f86 <_printf_float+0x402>
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	464a      	mov	r2, r9
 8016fca:	4631      	mov	r1, r6
 8016fcc:	4628      	mov	r0, r5
 8016fce:	47b8      	blx	r7
 8016fd0:	3001      	adds	r0, #1
 8016fd2:	f43f ae36 	beq.w	8016c42 <_printf_float+0xbe>
 8016fd6:	f108 0801 	add.w	r8, r8, #1
 8016fda:	68e3      	ldr	r3, [r4, #12]
 8016fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016fde:	1a5b      	subs	r3, r3, r1
 8016fe0:	4543      	cmp	r3, r8
 8016fe2:	dcf0      	bgt.n	8016fc6 <_printf_float+0x442>
 8016fe4:	e6f8      	b.n	8016dd8 <_printf_float+0x254>
 8016fe6:	f04f 0800 	mov.w	r8, #0
 8016fea:	f104 0919 	add.w	r9, r4, #25
 8016fee:	e7f4      	b.n	8016fda <_printf_float+0x456>

08016ff0 <_printf_common>:
 8016ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ff4:	4616      	mov	r6, r2
 8016ff6:	4699      	mov	r9, r3
 8016ff8:	688a      	ldr	r2, [r1, #8]
 8016ffa:	690b      	ldr	r3, [r1, #16]
 8016ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017000:	4293      	cmp	r3, r2
 8017002:	bfb8      	it	lt
 8017004:	4613      	movlt	r3, r2
 8017006:	6033      	str	r3, [r6, #0]
 8017008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801700c:	4607      	mov	r7, r0
 801700e:	460c      	mov	r4, r1
 8017010:	b10a      	cbz	r2, 8017016 <_printf_common+0x26>
 8017012:	3301      	adds	r3, #1
 8017014:	6033      	str	r3, [r6, #0]
 8017016:	6823      	ldr	r3, [r4, #0]
 8017018:	0699      	lsls	r1, r3, #26
 801701a:	bf42      	ittt	mi
 801701c:	6833      	ldrmi	r3, [r6, #0]
 801701e:	3302      	addmi	r3, #2
 8017020:	6033      	strmi	r3, [r6, #0]
 8017022:	6825      	ldr	r5, [r4, #0]
 8017024:	f015 0506 	ands.w	r5, r5, #6
 8017028:	d106      	bne.n	8017038 <_printf_common+0x48>
 801702a:	f104 0a19 	add.w	sl, r4, #25
 801702e:	68e3      	ldr	r3, [r4, #12]
 8017030:	6832      	ldr	r2, [r6, #0]
 8017032:	1a9b      	subs	r3, r3, r2
 8017034:	42ab      	cmp	r3, r5
 8017036:	dc26      	bgt.n	8017086 <_printf_common+0x96>
 8017038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801703c:	1e13      	subs	r3, r2, #0
 801703e:	6822      	ldr	r2, [r4, #0]
 8017040:	bf18      	it	ne
 8017042:	2301      	movne	r3, #1
 8017044:	0692      	lsls	r2, r2, #26
 8017046:	d42b      	bmi.n	80170a0 <_printf_common+0xb0>
 8017048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801704c:	4649      	mov	r1, r9
 801704e:	4638      	mov	r0, r7
 8017050:	47c0      	blx	r8
 8017052:	3001      	adds	r0, #1
 8017054:	d01e      	beq.n	8017094 <_printf_common+0xa4>
 8017056:	6823      	ldr	r3, [r4, #0]
 8017058:	6922      	ldr	r2, [r4, #16]
 801705a:	f003 0306 	and.w	r3, r3, #6
 801705e:	2b04      	cmp	r3, #4
 8017060:	bf02      	ittt	eq
 8017062:	68e5      	ldreq	r5, [r4, #12]
 8017064:	6833      	ldreq	r3, [r6, #0]
 8017066:	1aed      	subeq	r5, r5, r3
 8017068:	68a3      	ldr	r3, [r4, #8]
 801706a:	bf0c      	ite	eq
 801706c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017070:	2500      	movne	r5, #0
 8017072:	4293      	cmp	r3, r2
 8017074:	bfc4      	itt	gt
 8017076:	1a9b      	subgt	r3, r3, r2
 8017078:	18ed      	addgt	r5, r5, r3
 801707a:	2600      	movs	r6, #0
 801707c:	341a      	adds	r4, #26
 801707e:	42b5      	cmp	r5, r6
 8017080:	d11a      	bne.n	80170b8 <_printf_common+0xc8>
 8017082:	2000      	movs	r0, #0
 8017084:	e008      	b.n	8017098 <_printf_common+0xa8>
 8017086:	2301      	movs	r3, #1
 8017088:	4652      	mov	r2, sl
 801708a:	4649      	mov	r1, r9
 801708c:	4638      	mov	r0, r7
 801708e:	47c0      	blx	r8
 8017090:	3001      	adds	r0, #1
 8017092:	d103      	bne.n	801709c <_printf_common+0xac>
 8017094:	f04f 30ff 	mov.w	r0, #4294967295
 8017098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801709c:	3501      	adds	r5, #1
 801709e:	e7c6      	b.n	801702e <_printf_common+0x3e>
 80170a0:	18e1      	adds	r1, r4, r3
 80170a2:	1c5a      	adds	r2, r3, #1
 80170a4:	2030      	movs	r0, #48	; 0x30
 80170a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80170aa:	4422      	add	r2, r4
 80170ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80170b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80170b4:	3302      	adds	r3, #2
 80170b6:	e7c7      	b.n	8017048 <_printf_common+0x58>
 80170b8:	2301      	movs	r3, #1
 80170ba:	4622      	mov	r2, r4
 80170bc:	4649      	mov	r1, r9
 80170be:	4638      	mov	r0, r7
 80170c0:	47c0      	blx	r8
 80170c2:	3001      	adds	r0, #1
 80170c4:	d0e6      	beq.n	8017094 <_printf_common+0xa4>
 80170c6:	3601      	adds	r6, #1
 80170c8:	e7d9      	b.n	801707e <_printf_common+0x8e>
	...

080170cc <_printf_i>:
 80170cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80170d0:	7e0f      	ldrb	r7, [r1, #24]
 80170d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80170d4:	2f78      	cmp	r7, #120	; 0x78
 80170d6:	4691      	mov	r9, r2
 80170d8:	4680      	mov	r8, r0
 80170da:	460c      	mov	r4, r1
 80170dc:	469a      	mov	sl, r3
 80170de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80170e2:	d807      	bhi.n	80170f4 <_printf_i+0x28>
 80170e4:	2f62      	cmp	r7, #98	; 0x62
 80170e6:	d80a      	bhi.n	80170fe <_printf_i+0x32>
 80170e8:	2f00      	cmp	r7, #0
 80170ea:	f000 80d4 	beq.w	8017296 <_printf_i+0x1ca>
 80170ee:	2f58      	cmp	r7, #88	; 0x58
 80170f0:	f000 80c0 	beq.w	8017274 <_printf_i+0x1a8>
 80170f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80170f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80170fc:	e03a      	b.n	8017174 <_printf_i+0xa8>
 80170fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017102:	2b15      	cmp	r3, #21
 8017104:	d8f6      	bhi.n	80170f4 <_printf_i+0x28>
 8017106:	a101      	add	r1, pc, #4	; (adr r1, 801710c <_printf_i+0x40>)
 8017108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801710c:	08017165 	.word	0x08017165
 8017110:	08017179 	.word	0x08017179
 8017114:	080170f5 	.word	0x080170f5
 8017118:	080170f5 	.word	0x080170f5
 801711c:	080170f5 	.word	0x080170f5
 8017120:	080170f5 	.word	0x080170f5
 8017124:	08017179 	.word	0x08017179
 8017128:	080170f5 	.word	0x080170f5
 801712c:	080170f5 	.word	0x080170f5
 8017130:	080170f5 	.word	0x080170f5
 8017134:	080170f5 	.word	0x080170f5
 8017138:	0801727d 	.word	0x0801727d
 801713c:	080171a5 	.word	0x080171a5
 8017140:	08017237 	.word	0x08017237
 8017144:	080170f5 	.word	0x080170f5
 8017148:	080170f5 	.word	0x080170f5
 801714c:	0801729f 	.word	0x0801729f
 8017150:	080170f5 	.word	0x080170f5
 8017154:	080171a5 	.word	0x080171a5
 8017158:	080170f5 	.word	0x080170f5
 801715c:	080170f5 	.word	0x080170f5
 8017160:	0801723f 	.word	0x0801723f
 8017164:	682b      	ldr	r3, [r5, #0]
 8017166:	1d1a      	adds	r2, r3, #4
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	602a      	str	r2, [r5, #0]
 801716c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017174:	2301      	movs	r3, #1
 8017176:	e09f      	b.n	80172b8 <_printf_i+0x1ec>
 8017178:	6820      	ldr	r0, [r4, #0]
 801717a:	682b      	ldr	r3, [r5, #0]
 801717c:	0607      	lsls	r7, r0, #24
 801717e:	f103 0104 	add.w	r1, r3, #4
 8017182:	6029      	str	r1, [r5, #0]
 8017184:	d501      	bpl.n	801718a <_printf_i+0xbe>
 8017186:	681e      	ldr	r6, [r3, #0]
 8017188:	e003      	b.n	8017192 <_printf_i+0xc6>
 801718a:	0646      	lsls	r6, r0, #25
 801718c:	d5fb      	bpl.n	8017186 <_printf_i+0xba>
 801718e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017192:	2e00      	cmp	r6, #0
 8017194:	da03      	bge.n	801719e <_printf_i+0xd2>
 8017196:	232d      	movs	r3, #45	; 0x2d
 8017198:	4276      	negs	r6, r6
 801719a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801719e:	485a      	ldr	r0, [pc, #360]	; (8017308 <_printf_i+0x23c>)
 80171a0:	230a      	movs	r3, #10
 80171a2:	e012      	b.n	80171ca <_printf_i+0xfe>
 80171a4:	682b      	ldr	r3, [r5, #0]
 80171a6:	6820      	ldr	r0, [r4, #0]
 80171a8:	1d19      	adds	r1, r3, #4
 80171aa:	6029      	str	r1, [r5, #0]
 80171ac:	0605      	lsls	r5, r0, #24
 80171ae:	d501      	bpl.n	80171b4 <_printf_i+0xe8>
 80171b0:	681e      	ldr	r6, [r3, #0]
 80171b2:	e002      	b.n	80171ba <_printf_i+0xee>
 80171b4:	0641      	lsls	r1, r0, #25
 80171b6:	d5fb      	bpl.n	80171b0 <_printf_i+0xe4>
 80171b8:	881e      	ldrh	r6, [r3, #0]
 80171ba:	4853      	ldr	r0, [pc, #332]	; (8017308 <_printf_i+0x23c>)
 80171bc:	2f6f      	cmp	r7, #111	; 0x6f
 80171be:	bf0c      	ite	eq
 80171c0:	2308      	moveq	r3, #8
 80171c2:	230a      	movne	r3, #10
 80171c4:	2100      	movs	r1, #0
 80171c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80171ca:	6865      	ldr	r5, [r4, #4]
 80171cc:	60a5      	str	r5, [r4, #8]
 80171ce:	2d00      	cmp	r5, #0
 80171d0:	bfa2      	ittt	ge
 80171d2:	6821      	ldrge	r1, [r4, #0]
 80171d4:	f021 0104 	bicge.w	r1, r1, #4
 80171d8:	6021      	strge	r1, [r4, #0]
 80171da:	b90e      	cbnz	r6, 80171e0 <_printf_i+0x114>
 80171dc:	2d00      	cmp	r5, #0
 80171de:	d04b      	beq.n	8017278 <_printf_i+0x1ac>
 80171e0:	4615      	mov	r5, r2
 80171e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80171e6:	fb03 6711 	mls	r7, r3, r1, r6
 80171ea:	5dc7      	ldrb	r7, [r0, r7]
 80171ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80171f0:	4637      	mov	r7, r6
 80171f2:	42bb      	cmp	r3, r7
 80171f4:	460e      	mov	r6, r1
 80171f6:	d9f4      	bls.n	80171e2 <_printf_i+0x116>
 80171f8:	2b08      	cmp	r3, #8
 80171fa:	d10b      	bne.n	8017214 <_printf_i+0x148>
 80171fc:	6823      	ldr	r3, [r4, #0]
 80171fe:	07de      	lsls	r6, r3, #31
 8017200:	d508      	bpl.n	8017214 <_printf_i+0x148>
 8017202:	6923      	ldr	r3, [r4, #16]
 8017204:	6861      	ldr	r1, [r4, #4]
 8017206:	4299      	cmp	r1, r3
 8017208:	bfde      	ittt	le
 801720a:	2330      	movle	r3, #48	; 0x30
 801720c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017214:	1b52      	subs	r2, r2, r5
 8017216:	6122      	str	r2, [r4, #16]
 8017218:	f8cd a000 	str.w	sl, [sp]
 801721c:	464b      	mov	r3, r9
 801721e:	aa03      	add	r2, sp, #12
 8017220:	4621      	mov	r1, r4
 8017222:	4640      	mov	r0, r8
 8017224:	f7ff fee4 	bl	8016ff0 <_printf_common>
 8017228:	3001      	adds	r0, #1
 801722a:	d14a      	bne.n	80172c2 <_printf_i+0x1f6>
 801722c:	f04f 30ff 	mov.w	r0, #4294967295
 8017230:	b004      	add	sp, #16
 8017232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017236:	6823      	ldr	r3, [r4, #0]
 8017238:	f043 0320 	orr.w	r3, r3, #32
 801723c:	6023      	str	r3, [r4, #0]
 801723e:	4833      	ldr	r0, [pc, #204]	; (801730c <_printf_i+0x240>)
 8017240:	2778      	movs	r7, #120	; 0x78
 8017242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017246:	6823      	ldr	r3, [r4, #0]
 8017248:	6829      	ldr	r1, [r5, #0]
 801724a:	061f      	lsls	r7, r3, #24
 801724c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017250:	d402      	bmi.n	8017258 <_printf_i+0x18c>
 8017252:	065f      	lsls	r7, r3, #25
 8017254:	bf48      	it	mi
 8017256:	b2b6      	uxthmi	r6, r6
 8017258:	07df      	lsls	r7, r3, #31
 801725a:	bf48      	it	mi
 801725c:	f043 0320 	orrmi.w	r3, r3, #32
 8017260:	6029      	str	r1, [r5, #0]
 8017262:	bf48      	it	mi
 8017264:	6023      	strmi	r3, [r4, #0]
 8017266:	b91e      	cbnz	r6, 8017270 <_printf_i+0x1a4>
 8017268:	6823      	ldr	r3, [r4, #0]
 801726a:	f023 0320 	bic.w	r3, r3, #32
 801726e:	6023      	str	r3, [r4, #0]
 8017270:	2310      	movs	r3, #16
 8017272:	e7a7      	b.n	80171c4 <_printf_i+0xf8>
 8017274:	4824      	ldr	r0, [pc, #144]	; (8017308 <_printf_i+0x23c>)
 8017276:	e7e4      	b.n	8017242 <_printf_i+0x176>
 8017278:	4615      	mov	r5, r2
 801727a:	e7bd      	b.n	80171f8 <_printf_i+0x12c>
 801727c:	682b      	ldr	r3, [r5, #0]
 801727e:	6826      	ldr	r6, [r4, #0]
 8017280:	6961      	ldr	r1, [r4, #20]
 8017282:	1d18      	adds	r0, r3, #4
 8017284:	6028      	str	r0, [r5, #0]
 8017286:	0635      	lsls	r5, r6, #24
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	d501      	bpl.n	8017290 <_printf_i+0x1c4>
 801728c:	6019      	str	r1, [r3, #0]
 801728e:	e002      	b.n	8017296 <_printf_i+0x1ca>
 8017290:	0670      	lsls	r0, r6, #25
 8017292:	d5fb      	bpl.n	801728c <_printf_i+0x1c0>
 8017294:	8019      	strh	r1, [r3, #0]
 8017296:	2300      	movs	r3, #0
 8017298:	6123      	str	r3, [r4, #16]
 801729a:	4615      	mov	r5, r2
 801729c:	e7bc      	b.n	8017218 <_printf_i+0x14c>
 801729e:	682b      	ldr	r3, [r5, #0]
 80172a0:	1d1a      	adds	r2, r3, #4
 80172a2:	602a      	str	r2, [r5, #0]
 80172a4:	681d      	ldr	r5, [r3, #0]
 80172a6:	6862      	ldr	r2, [r4, #4]
 80172a8:	2100      	movs	r1, #0
 80172aa:	4628      	mov	r0, r5
 80172ac:	f7e8 ff90 	bl	80001d0 <memchr>
 80172b0:	b108      	cbz	r0, 80172b6 <_printf_i+0x1ea>
 80172b2:	1b40      	subs	r0, r0, r5
 80172b4:	6060      	str	r0, [r4, #4]
 80172b6:	6863      	ldr	r3, [r4, #4]
 80172b8:	6123      	str	r3, [r4, #16]
 80172ba:	2300      	movs	r3, #0
 80172bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172c0:	e7aa      	b.n	8017218 <_printf_i+0x14c>
 80172c2:	6923      	ldr	r3, [r4, #16]
 80172c4:	462a      	mov	r2, r5
 80172c6:	4649      	mov	r1, r9
 80172c8:	4640      	mov	r0, r8
 80172ca:	47d0      	blx	sl
 80172cc:	3001      	adds	r0, #1
 80172ce:	d0ad      	beq.n	801722c <_printf_i+0x160>
 80172d0:	6823      	ldr	r3, [r4, #0]
 80172d2:	079b      	lsls	r3, r3, #30
 80172d4:	d413      	bmi.n	80172fe <_printf_i+0x232>
 80172d6:	68e0      	ldr	r0, [r4, #12]
 80172d8:	9b03      	ldr	r3, [sp, #12]
 80172da:	4298      	cmp	r0, r3
 80172dc:	bfb8      	it	lt
 80172de:	4618      	movlt	r0, r3
 80172e0:	e7a6      	b.n	8017230 <_printf_i+0x164>
 80172e2:	2301      	movs	r3, #1
 80172e4:	4632      	mov	r2, r6
 80172e6:	4649      	mov	r1, r9
 80172e8:	4640      	mov	r0, r8
 80172ea:	47d0      	blx	sl
 80172ec:	3001      	adds	r0, #1
 80172ee:	d09d      	beq.n	801722c <_printf_i+0x160>
 80172f0:	3501      	adds	r5, #1
 80172f2:	68e3      	ldr	r3, [r4, #12]
 80172f4:	9903      	ldr	r1, [sp, #12]
 80172f6:	1a5b      	subs	r3, r3, r1
 80172f8:	42ab      	cmp	r3, r5
 80172fa:	dcf2      	bgt.n	80172e2 <_printf_i+0x216>
 80172fc:	e7eb      	b.n	80172d6 <_printf_i+0x20a>
 80172fe:	2500      	movs	r5, #0
 8017300:	f104 0619 	add.w	r6, r4, #25
 8017304:	e7f5      	b.n	80172f2 <_printf_i+0x226>
 8017306:	bf00      	nop
 8017308:	0801e2eb 	.word	0x0801e2eb
 801730c:	0801e2fc 	.word	0x0801e2fc

08017310 <_scanf_float>:
 8017310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017314:	b087      	sub	sp, #28
 8017316:	4617      	mov	r7, r2
 8017318:	9303      	str	r3, [sp, #12]
 801731a:	688b      	ldr	r3, [r1, #8]
 801731c:	1e5a      	subs	r2, r3, #1
 801731e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017322:	bf83      	ittte	hi
 8017324:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017328:	195b      	addhi	r3, r3, r5
 801732a:	9302      	strhi	r3, [sp, #8]
 801732c:	2300      	movls	r3, #0
 801732e:	bf86      	itte	hi
 8017330:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017334:	608b      	strhi	r3, [r1, #8]
 8017336:	9302      	strls	r3, [sp, #8]
 8017338:	680b      	ldr	r3, [r1, #0]
 801733a:	468b      	mov	fp, r1
 801733c:	2500      	movs	r5, #0
 801733e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017342:	f84b 3b1c 	str.w	r3, [fp], #28
 8017346:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801734a:	4680      	mov	r8, r0
 801734c:	460c      	mov	r4, r1
 801734e:	465e      	mov	r6, fp
 8017350:	46aa      	mov	sl, r5
 8017352:	46a9      	mov	r9, r5
 8017354:	9501      	str	r5, [sp, #4]
 8017356:	68a2      	ldr	r2, [r4, #8]
 8017358:	b152      	cbz	r2, 8017370 <_scanf_float+0x60>
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	781b      	ldrb	r3, [r3, #0]
 801735e:	2b4e      	cmp	r3, #78	; 0x4e
 8017360:	d864      	bhi.n	801742c <_scanf_float+0x11c>
 8017362:	2b40      	cmp	r3, #64	; 0x40
 8017364:	d83c      	bhi.n	80173e0 <_scanf_float+0xd0>
 8017366:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801736a:	b2c8      	uxtb	r0, r1
 801736c:	280e      	cmp	r0, #14
 801736e:	d93a      	bls.n	80173e6 <_scanf_float+0xd6>
 8017370:	f1b9 0f00 	cmp.w	r9, #0
 8017374:	d003      	beq.n	801737e <_scanf_float+0x6e>
 8017376:	6823      	ldr	r3, [r4, #0]
 8017378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801737c:	6023      	str	r3, [r4, #0]
 801737e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017382:	f1ba 0f01 	cmp.w	sl, #1
 8017386:	f200 8113 	bhi.w	80175b0 <_scanf_float+0x2a0>
 801738a:	455e      	cmp	r6, fp
 801738c:	f200 8105 	bhi.w	801759a <_scanf_float+0x28a>
 8017390:	2501      	movs	r5, #1
 8017392:	4628      	mov	r0, r5
 8017394:	b007      	add	sp, #28
 8017396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801739a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801739e:	2a0d      	cmp	r2, #13
 80173a0:	d8e6      	bhi.n	8017370 <_scanf_float+0x60>
 80173a2:	a101      	add	r1, pc, #4	; (adr r1, 80173a8 <_scanf_float+0x98>)
 80173a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80173a8:	080174e7 	.word	0x080174e7
 80173ac:	08017371 	.word	0x08017371
 80173b0:	08017371 	.word	0x08017371
 80173b4:	08017371 	.word	0x08017371
 80173b8:	08017547 	.word	0x08017547
 80173bc:	0801751f 	.word	0x0801751f
 80173c0:	08017371 	.word	0x08017371
 80173c4:	08017371 	.word	0x08017371
 80173c8:	080174f5 	.word	0x080174f5
 80173cc:	08017371 	.word	0x08017371
 80173d0:	08017371 	.word	0x08017371
 80173d4:	08017371 	.word	0x08017371
 80173d8:	08017371 	.word	0x08017371
 80173dc:	080174ad 	.word	0x080174ad
 80173e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80173e4:	e7db      	b.n	801739e <_scanf_float+0x8e>
 80173e6:	290e      	cmp	r1, #14
 80173e8:	d8c2      	bhi.n	8017370 <_scanf_float+0x60>
 80173ea:	a001      	add	r0, pc, #4	; (adr r0, 80173f0 <_scanf_float+0xe0>)
 80173ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80173f0:	0801749f 	.word	0x0801749f
 80173f4:	08017371 	.word	0x08017371
 80173f8:	0801749f 	.word	0x0801749f
 80173fc:	08017533 	.word	0x08017533
 8017400:	08017371 	.word	0x08017371
 8017404:	0801744d 	.word	0x0801744d
 8017408:	08017489 	.word	0x08017489
 801740c:	08017489 	.word	0x08017489
 8017410:	08017489 	.word	0x08017489
 8017414:	08017489 	.word	0x08017489
 8017418:	08017489 	.word	0x08017489
 801741c:	08017489 	.word	0x08017489
 8017420:	08017489 	.word	0x08017489
 8017424:	08017489 	.word	0x08017489
 8017428:	08017489 	.word	0x08017489
 801742c:	2b6e      	cmp	r3, #110	; 0x6e
 801742e:	d809      	bhi.n	8017444 <_scanf_float+0x134>
 8017430:	2b60      	cmp	r3, #96	; 0x60
 8017432:	d8b2      	bhi.n	801739a <_scanf_float+0x8a>
 8017434:	2b54      	cmp	r3, #84	; 0x54
 8017436:	d077      	beq.n	8017528 <_scanf_float+0x218>
 8017438:	2b59      	cmp	r3, #89	; 0x59
 801743a:	d199      	bne.n	8017370 <_scanf_float+0x60>
 801743c:	2d07      	cmp	r5, #7
 801743e:	d197      	bne.n	8017370 <_scanf_float+0x60>
 8017440:	2508      	movs	r5, #8
 8017442:	e029      	b.n	8017498 <_scanf_float+0x188>
 8017444:	2b74      	cmp	r3, #116	; 0x74
 8017446:	d06f      	beq.n	8017528 <_scanf_float+0x218>
 8017448:	2b79      	cmp	r3, #121	; 0x79
 801744a:	e7f6      	b.n	801743a <_scanf_float+0x12a>
 801744c:	6821      	ldr	r1, [r4, #0]
 801744e:	05c8      	lsls	r0, r1, #23
 8017450:	d51a      	bpl.n	8017488 <_scanf_float+0x178>
 8017452:	9b02      	ldr	r3, [sp, #8]
 8017454:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017458:	6021      	str	r1, [r4, #0]
 801745a:	f109 0901 	add.w	r9, r9, #1
 801745e:	b11b      	cbz	r3, 8017468 <_scanf_float+0x158>
 8017460:	3b01      	subs	r3, #1
 8017462:	3201      	adds	r2, #1
 8017464:	9302      	str	r3, [sp, #8]
 8017466:	60a2      	str	r2, [r4, #8]
 8017468:	68a3      	ldr	r3, [r4, #8]
 801746a:	3b01      	subs	r3, #1
 801746c:	60a3      	str	r3, [r4, #8]
 801746e:	6923      	ldr	r3, [r4, #16]
 8017470:	3301      	adds	r3, #1
 8017472:	6123      	str	r3, [r4, #16]
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	3b01      	subs	r3, #1
 8017478:	2b00      	cmp	r3, #0
 801747a:	607b      	str	r3, [r7, #4]
 801747c:	f340 8084 	ble.w	8017588 <_scanf_float+0x278>
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	3301      	adds	r3, #1
 8017484:	603b      	str	r3, [r7, #0]
 8017486:	e766      	b.n	8017356 <_scanf_float+0x46>
 8017488:	eb1a 0f05 	cmn.w	sl, r5
 801748c:	f47f af70 	bne.w	8017370 <_scanf_float+0x60>
 8017490:	6822      	ldr	r2, [r4, #0]
 8017492:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017496:	6022      	str	r2, [r4, #0]
 8017498:	f806 3b01 	strb.w	r3, [r6], #1
 801749c:	e7e4      	b.n	8017468 <_scanf_float+0x158>
 801749e:	6822      	ldr	r2, [r4, #0]
 80174a0:	0610      	lsls	r0, r2, #24
 80174a2:	f57f af65 	bpl.w	8017370 <_scanf_float+0x60>
 80174a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80174aa:	e7f4      	b.n	8017496 <_scanf_float+0x186>
 80174ac:	f1ba 0f00 	cmp.w	sl, #0
 80174b0:	d10e      	bne.n	80174d0 <_scanf_float+0x1c0>
 80174b2:	f1b9 0f00 	cmp.w	r9, #0
 80174b6:	d10e      	bne.n	80174d6 <_scanf_float+0x1c6>
 80174b8:	6822      	ldr	r2, [r4, #0]
 80174ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80174be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80174c2:	d108      	bne.n	80174d6 <_scanf_float+0x1c6>
 80174c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80174c8:	6022      	str	r2, [r4, #0]
 80174ca:	f04f 0a01 	mov.w	sl, #1
 80174ce:	e7e3      	b.n	8017498 <_scanf_float+0x188>
 80174d0:	f1ba 0f02 	cmp.w	sl, #2
 80174d4:	d055      	beq.n	8017582 <_scanf_float+0x272>
 80174d6:	2d01      	cmp	r5, #1
 80174d8:	d002      	beq.n	80174e0 <_scanf_float+0x1d0>
 80174da:	2d04      	cmp	r5, #4
 80174dc:	f47f af48 	bne.w	8017370 <_scanf_float+0x60>
 80174e0:	3501      	adds	r5, #1
 80174e2:	b2ed      	uxtb	r5, r5
 80174e4:	e7d8      	b.n	8017498 <_scanf_float+0x188>
 80174e6:	f1ba 0f01 	cmp.w	sl, #1
 80174ea:	f47f af41 	bne.w	8017370 <_scanf_float+0x60>
 80174ee:	f04f 0a02 	mov.w	sl, #2
 80174f2:	e7d1      	b.n	8017498 <_scanf_float+0x188>
 80174f4:	b97d      	cbnz	r5, 8017516 <_scanf_float+0x206>
 80174f6:	f1b9 0f00 	cmp.w	r9, #0
 80174fa:	f47f af3c 	bne.w	8017376 <_scanf_float+0x66>
 80174fe:	6822      	ldr	r2, [r4, #0]
 8017500:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017504:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017508:	f47f af39 	bne.w	801737e <_scanf_float+0x6e>
 801750c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017510:	6022      	str	r2, [r4, #0]
 8017512:	2501      	movs	r5, #1
 8017514:	e7c0      	b.n	8017498 <_scanf_float+0x188>
 8017516:	2d03      	cmp	r5, #3
 8017518:	d0e2      	beq.n	80174e0 <_scanf_float+0x1d0>
 801751a:	2d05      	cmp	r5, #5
 801751c:	e7de      	b.n	80174dc <_scanf_float+0x1cc>
 801751e:	2d02      	cmp	r5, #2
 8017520:	f47f af26 	bne.w	8017370 <_scanf_float+0x60>
 8017524:	2503      	movs	r5, #3
 8017526:	e7b7      	b.n	8017498 <_scanf_float+0x188>
 8017528:	2d06      	cmp	r5, #6
 801752a:	f47f af21 	bne.w	8017370 <_scanf_float+0x60>
 801752e:	2507      	movs	r5, #7
 8017530:	e7b2      	b.n	8017498 <_scanf_float+0x188>
 8017532:	6822      	ldr	r2, [r4, #0]
 8017534:	0591      	lsls	r1, r2, #22
 8017536:	f57f af1b 	bpl.w	8017370 <_scanf_float+0x60>
 801753a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801753e:	6022      	str	r2, [r4, #0]
 8017540:	f8cd 9004 	str.w	r9, [sp, #4]
 8017544:	e7a8      	b.n	8017498 <_scanf_float+0x188>
 8017546:	6822      	ldr	r2, [r4, #0]
 8017548:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801754c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017550:	d006      	beq.n	8017560 <_scanf_float+0x250>
 8017552:	0550      	lsls	r0, r2, #21
 8017554:	f57f af0c 	bpl.w	8017370 <_scanf_float+0x60>
 8017558:	f1b9 0f00 	cmp.w	r9, #0
 801755c:	f43f af0f 	beq.w	801737e <_scanf_float+0x6e>
 8017560:	0591      	lsls	r1, r2, #22
 8017562:	bf58      	it	pl
 8017564:	9901      	ldrpl	r1, [sp, #4]
 8017566:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801756a:	bf58      	it	pl
 801756c:	eba9 0101 	subpl.w	r1, r9, r1
 8017570:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017574:	bf58      	it	pl
 8017576:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801757a:	6022      	str	r2, [r4, #0]
 801757c:	f04f 0900 	mov.w	r9, #0
 8017580:	e78a      	b.n	8017498 <_scanf_float+0x188>
 8017582:	f04f 0a03 	mov.w	sl, #3
 8017586:	e787      	b.n	8017498 <_scanf_float+0x188>
 8017588:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801758c:	4639      	mov	r1, r7
 801758e:	4640      	mov	r0, r8
 8017590:	4798      	blx	r3
 8017592:	2800      	cmp	r0, #0
 8017594:	f43f aedf 	beq.w	8017356 <_scanf_float+0x46>
 8017598:	e6ea      	b.n	8017370 <_scanf_float+0x60>
 801759a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801759e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80175a2:	463a      	mov	r2, r7
 80175a4:	4640      	mov	r0, r8
 80175a6:	4798      	blx	r3
 80175a8:	6923      	ldr	r3, [r4, #16]
 80175aa:	3b01      	subs	r3, #1
 80175ac:	6123      	str	r3, [r4, #16]
 80175ae:	e6ec      	b.n	801738a <_scanf_float+0x7a>
 80175b0:	1e6b      	subs	r3, r5, #1
 80175b2:	2b06      	cmp	r3, #6
 80175b4:	d825      	bhi.n	8017602 <_scanf_float+0x2f2>
 80175b6:	2d02      	cmp	r5, #2
 80175b8:	d836      	bhi.n	8017628 <_scanf_float+0x318>
 80175ba:	455e      	cmp	r6, fp
 80175bc:	f67f aee8 	bls.w	8017390 <_scanf_float+0x80>
 80175c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80175c8:	463a      	mov	r2, r7
 80175ca:	4640      	mov	r0, r8
 80175cc:	4798      	blx	r3
 80175ce:	6923      	ldr	r3, [r4, #16]
 80175d0:	3b01      	subs	r3, #1
 80175d2:	6123      	str	r3, [r4, #16]
 80175d4:	e7f1      	b.n	80175ba <_scanf_float+0x2aa>
 80175d6:	9802      	ldr	r0, [sp, #8]
 80175d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80175e0:	9002      	str	r0, [sp, #8]
 80175e2:	463a      	mov	r2, r7
 80175e4:	4640      	mov	r0, r8
 80175e6:	4798      	blx	r3
 80175e8:	6923      	ldr	r3, [r4, #16]
 80175ea:	3b01      	subs	r3, #1
 80175ec:	6123      	str	r3, [r4, #16]
 80175ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175f2:	fa5f fa8a 	uxtb.w	sl, sl
 80175f6:	f1ba 0f02 	cmp.w	sl, #2
 80175fa:	d1ec      	bne.n	80175d6 <_scanf_float+0x2c6>
 80175fc:	3d03      	subs	r5, #3
 80175fe:	b2ed      	uxtb	r5, r5
 8017600:	1b76      	subs	r6, r6, r5
 8017602:	6823      	ldr	r3, [r4, #0]
 8017604:	05da      	lsls	r2, r3, #23
 8017606:	d52f      	bpl.n	8017668 <_scanf_float+0x358>
 8017608:	055b      	lsls	r3, r3, #21
 801760a:	d510      	bpl.n	801762e <_scanf_float+0x31e>
 801760c:	455e      	cmp	r6, fp
 801760e:	f67f aebf 	bls.w	8017390 <_scanf_float+0x80>
 8017612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801761a:	463a      	mov	r2, r7
 801761c:	4640      	mov	r0, r8
 801761e:	4798      	blx	r3
 8017620:	6923      	ldr	r3, [r4, #16]
 8017622:	3b01      	subs	r3, #1
 8017624:	6123      	str	r3, [r4, #16]
 8017626:	e7f1      	b.n	801760c <_scanf_float+0x2fc>
 8017628:	46aa      	mov	sl, r5
 801762a:	9602      	str	r6, [sp, #8]
 801762c:	e7df      	b.n	80175ee <_scanf_float+0x2de>
 801762e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017632:	6923      	ldr	r3, [r4, #16]
 8017634:	2965      	cmp	r1, #101	; 0x65
 8017636:	f103 33ff 	add.w	r3, r3, #4294967295
 801763a:	f106 35ff 	add.w	r5, r6, #4294967295
 801763e:	6123      	str	r3, [r4, #16]
 8017640:	d00c      	beq.n	801765c <_scanf_float+0x34c>
 8017642:	2945      	cmp	r1, #69	; 0x45
 8017644:	d00a      	beq.n	801765c <_scanf_float+0x34c>
 8017646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801764a:	463a      	mov	r2, r7
 801764c:	4640      	mov	r0, r8
 801764e:	4798      	blx	r3
 8017650:	6923      	ldr	r3, [r4, #16]
 8017652:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017656:	3b01      	subs	r3, #1
 8017658:	1eb5      	subs	r5, r6, #2
 801765a:	6123      	str	r3, [r4, #16]
 801765c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017660:	463a      	mov	r2, r7
 8017662:	4640      	mov	r0, r8
 8017664:	4798      	blx	r3
 8017666:	462e      	mov	r6, r5
 8017668:	6825      	ldr	r5, [r4, #0]
 801766a:	f015 0510 	ands.w	r5, r5, #16
 801766e:	d158      	bne.n	8017722 <_scanf_float+0x412>
 8017670:	7035      	strb	r5, [r6, #0]
 8017672:	6823      	ldr	r3, [r4, #0]
 8017674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801767c:	d11c      	bne.n	80176b8 <_scanf_float+0x3a8>
 801767e:	9b01      	ldr	r3, [sp, #4]
 8017680:	454b      	cmp	r3, r9
 8017682:	eba3 0209 	sub.w	r2, r3, r9
 8017686:	d124      	bne.n	80176d2 <_scanf_float+0x3c2>
 8017688:	2200      	movs	r2, #0
 801768a:	4659      	mov	r1, fp
 801768c:	4640      	mov	r0, r8
 801768e:	f7ff f8df 	bl	8016850 <_strtod_r>
 8017692:	9b03      	ldr	r3, [sp, #12]
 8017694:	6821      	ldr	r1, [r4, #0]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	f011 0f02 	tst.w	r1, #2
 801769c:	ec57 6b10 	vmov	r6, r7, d0
 80176a0:	f103 0204 	add.w	r2, r3, #4
 80176a4:	d020      	beq.n	80176e8 <_scanf_float+0x3d8>
 80176a6:	9903      	ldr	r1, [sp, #12]
 80176a8:	600a      	str	r2, [r1, #0]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	e9c3 6700 	strd	r6, r7, [r3]
 80176b0:	68e3      	ldr	r3, [r4, #12]
 80176b2:	3301      	adds	r3, #1
 80176b4:	60e3      	str	r3, [r4, #12]
 80176b6:	e66c      	b.n	8017392 <_scanf_float+0x82>
 80176b8:	9b04      	ldr	r3, [sp, #16]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d0e4      	beq.n	8017688 <_scanf_float+0x378>
 80176be:	9905      	ldr	r1, [sp, #20]
 80176c0:	230a      	movs	r3, #10
 80176c2:	462a      	mov	r2, r5
 80176c4:	3101      	adds	r1, #1
 80176c6:	4640      	mov	r0, r8
 80176c8:	f7ff f9b0 	bl	8016a2c <_strtol_r>
 80176cc:	9b04      	ldr	r3, [sp, #16]
 80176ce:	9e05      	ldr	r6, [sp, #20]
 80176d0:	1ac2      	subs	r2, r0, r3
 80176d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80176d6:	429e      	cmp	r6, r3
 80176d8:	bf28      	it	cs
 80176da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80176de:	4912      	ldr	r1, [pc, #72]	; (8017728 <_scanf_float+0x418>)
 80176e0:	4630      	mov	r0, r6
 80176e2:	f000 f91b 	bl	801791c <siprintf>
 80176e6:	e7cf      	b.n	8017688 <_scanf_float+0x378>
 80176e8:	f011 0f04 	tst.w	r1, #4
 80176ec:	9903      	ldr	r1, [sp, #12]
 80176ee:	600a      	str	r2, [r1, #0]
 80176f0:	d1db      	bne.n	80176aa <_scanf_float+0x39a>
 80176f2:	f8d3 8000 	ldr.w	r8, [r3]
 80176f6:	ee10 2a10 	vmov	r2, s0
 80176fa:	ee10 0a10 	vmov	r0, s0
 80176fe:	463b      	mov	r3, r7
 8017700:	4639      	mov	r1, r7
 8017702:	f7e9 fa13 	bl	8000b2c <__aeabi_dcmpun>
 8017706:	b128      	cbz	r0, 8017714 <_scanf_float+0x404>
 8017708:	4808      	ldr	r0, [pc, #32]	; (801772c <_scanf_float+0x41c>)
 801770a:	f000 fa9d 	bl	8017c48 <nanf>
 801770e:	ed88 0a00 	vstr	s0, [r8]
 8017712:	e7cd      	b.n	80176b0 <_scanf_float+0x3a0>
 8017714:	4630      	mov	r0, r6
 8017716:	4639      	mov	r1, r7
 8017718:	f7e9 fa66 	bl	8000be8 <__aeabi_d2f>
 801771c:	f8c8 0000 	str.w	r0, [r8]
 8017720:	e7c6      	b.n	80176b0 <_scanf_float+0x3a0>
 8017722:	2500      	movs	r5, #0
 8017724:	e635      	b.n	8017392 <_scanf_float+0x82>
 8017726:	bf00      	nop
 8017728:	0801e30d 	.word	0x0801e30d
 801772c:	0801e3c6 	.word	0x0801e3c6

08017730 <std>:
 8017730:	2300      	movs	r3, #0
 8017732:	b510      	push	{r4, lr}
 8017734:	4604      	mov	r4, r0
 8017736:	e9c0 3300 	strd	r3, r3, [r0]
 801773a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801773e:	6083      	str	r3, [r0, #8]
 8017740:	8181      	strh	r1, [r0, #12]
 8017742:	6643      	str	r3, [r0, #100]	; 0x64
 8017744:	81c2      	strh	r2, [r0, #14]
 8017746:	6183      	str	r3, [r0, #24]
 8017748:	4619      	mov	r1, r3
 801774a:	2208      	movs	r2, #8
 801774c:	305c      	adds	r0, #92	; 0x5c
 801774e:	f000 f948 	bl	80179e2 <memset>
 8017752:	4b0d      	ldr	r3, [pc, #52]	; (8017788 <std+0x58>)
 8017754:	6263      	str	r3, [r4, #36]	; 0x24
 8017756:	4b0d      	ldr	r3, [pc, #52]	; (801778c <std+0x5c>)
 8017758:	62a3      	str	r3, [r4, #40]	; 0x28
 801775a:	4b0d      	ldr	r3, [pc, #52]	; (8017790 <std+0x60>)
 801775c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801775e:	4b0d      	ldr	r3, [pc, #52]	; (8017794 <std+0x64>)
 8017760:	6323      	str	r3, [r4, #48]	; 0x30
 8017762:	4b0d      	ldr	r3, [pc, #52]	; (8017798 <std+0x68>)
 8017764:	6224      	str	r4, [r4, #32]
 8017766:	429c      	cmp	r4, r3
 8017768:	d006      	beq.n	8017778 <std+0x48>
 801776a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801776e:	4294      	cmp	r4, r2
 8017770:	d002      	beq.n	8017778 <std+0x48>
 8017772:	33d0      	adds	r3, #208	; 0xd0
 8017774:	429c      	cmp	r4, r3
 8017776:	d105      	bne.n	8017784 <std+0x54>
 8017778:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801777c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017780:	f000 ba40 	b.w	8017c04 <__retarget_lock_init_recursive>
 8017784:	bd10      	pop	{r4, pc}
 8017786:	bf00      	nop
 8017788:	0801795d 	.word	0x0801795d
 801778c:	0801797f 	.word	0x0801797f
 8017790:	080179b7 	.word	0x080179b7
 8017794:	080179db 	.word	0x080179db
 8017798:	200025c4 	.word	0x200025c4

0801779c <stdio_exit_handler>:
 801779c:	4a02      	ldr	r2, [pc, #8]	; (80177a8 <stdio_exit_handler+0xc>)
 801779e:	4903      	ldr	r1, [pc, #12]	; (80177ac <stdio_exit_handler+0x10>)
 80177a0:	4803      	ldr	r0, [pc, #12]	; (80177b0 <stdio_exit_handler+0x14>)
 80177a2:	f000 b869 	b.w	8017878 <_fwalk_sglue>
 80177a6:	bf00      	nop
 80177a8:	20000130 	.word	0x20000130
 80177ac:	08019e21 	.word	0x08019e21
 80177b0:	200002a8 	.word	0x200002a8

080177b4 <cleanup_stdio>:
 80177b4:	6841      	ldr	r1, [r0, #4]
 80177b6:	4b0c      	ldr	r3, [pc, #48]	; (80177e8 <cleanup_stdio+0x34>)
 80177b8:	4299      	cmp	r1, r3
 80177ba:	b510      	push	{r4, lr}
 80177bc:	4604      	mov	r4, r0
 80177be:	d001      	beq.n	80177c4 <cleanup_stdio+0x10>
 80177c0:	f002 fb2e 	bl	8019e20 <_fflush_r>
 80177c4:	68a1      	ldr	r1, [r4, #8]
 80177c6:	4b09      	ldr	r3, [pc, #36]	; (80177ec <cleanup_stdio+0x38>)
 80177c8:	4299      	cmp	r1, r3
 80177ca:	d002      	beq.n	80177d2 <cleanup_stdio+0x1e>
 80177cc:	4620      	mov	r0, r4
 80177ce:	f002 fb27 	bl	8019e20 <_fflush_r>
 80177d2:	68e1      	ldr	r1, [r4, #12]
 80177d4:	4b06      	ldr	r3, [pc, #24]	; (80177f0 <cleanup_stdio+0x3c>)
 80177d6:	4299      	cmp	r1, r3
 80177d8:	d004      	beq.n	80177e4 <cleanup_stdio+0x30>
 80177da:	4620      	mov	r0, r4
 80177dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177e0:	f002 bb1e 	b.w	8019e20 <_fflush_r>
 80177e4:	bd10      	pop	{r4, pc}
 80177e6:	bf00      	nop
 80177e8:	200025c4 	.word	0x200025c4
 80177ec:	2000262c 	.word	0x2000262c
 80177f0:	20002694 	.word	0x20002694

080177f4 <global_stdio_init.part.0>:
 80177f4:	b510      	push	{r4, lr}
 80177f6:	4b0b      	ldr	r3, [pc, #44]	; (8017824 <global_stdio_init.part.0+0x30>)
 80177f8:	4c0b      	ldr	r4, [pc, #44]	; (8017828 <global_stdio_init.part.0+0x34>)
 80177fa:	4a0c      	ldr	r2, [pc, #48]	; (801782c <global_stdio_init.part.0+0x38>)
 80177fc:	601a      	str	r2, [r3, #0]
 80177fe:	4620      	mov	r0, r4
 8017800:	2200      	movs	r2, #0
 8017802:	2104      	movs	r1, #4
 8017804:	f7ff ff94 	bl	8017730 <std>
 8017808:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801780c:	2201      	movs	r2, #1
 801780e:	2109      	movs	r1, #9
 8017810:	f7ff ff8e 	bl	8017730 <std>
 8017814:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017818:	2202      	movs	r2, #2
 801781a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801781e:	2112      	movs	r1, #18
 8017820:	f7ff bf86 	b.w	8017730 <std>
 8017824:	200026fc 	.word	0x200026fc
 8017828:	200025c4 	.word	0x200025c4
 801782c:	0801779d 	.word	0x0801779d

08017830 <__sfp_lock_acquire>:
 8017830:	4801      	ldr	r0, [pc, #4]	; (8017838 <__sfp_lock_acquire+0x8>)
 8017832:	f000 b9e8 	b.w	8017c06 <__retarget_lock_acquire_recursive>
 8017836:	bf00      	nop
 8017838:	20002705 	.word	0x20002705

0801783c <__sfp_lock_release>:
 801783c:	4801      	ldr	r0, [pc, #4]	; (8017844 <__sfp_lock_release+0x8>)
 801783e:	f000 b9e3 	b.w	8017c08 <__retarget_lock_release_recursive>
 8017842:	bf00      	nop
 8017844:	20002705 	.word	0x20002705

08017848 <__sinit>:
 8017848:	b510      	push	{r4, lr}
 801784a:	4604      	mov	r4, r0
 801784c:	f7ff fff0 	bl	8017830 <__sfp_lock_acquire>
 8017850:	6a23      	ldr	r3, [r4, #32]
 8017852:	b11b      	cbz	r3, 801785c <__sinit+0x14>
 8017854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017858:	f7ff bff0 	b.w	801783c <__sfp_lock_release>
 801785c:	4b04      	ldr	r3, [pc, #16]	; (8017870 <__sinit+0x28>)
 801785e:	6223      	str	r3, [r4, #32]
 8017860:	4b04      	ldr	r3, [pc, #16]	; (8017874 <__sinit+0x2c>)
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d1f5      	bne.n	8017854 <__sinit+0xc>
 8017868:	f7ff ffc4 	bl	80177f4 <global_stdio_init.part.0>
 801786c:	e7f2      	b.n	8017854 <__sinit+0xc>
 801786e:	bf00      	nop
 8017870:	080177b5 	.word	0x080177b5
 8017874:	200026fc 	.word	0x200026fc

08017878 <_fwalk_sglue>:
 8017878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801787c:	4607      	mov	r7, r0
 801787e:	4688      	mov	r8, r1
 8017880:	4614      	mov	r4, r2
 8017882:	2600      	movs	r6, #0
 8017884:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017888:	f1b9 0901 	subs.w	r9, r9, #1
 801788c:	d505      	bpl.n	801789a <_fwalk_sglue+0x22>
 801788e:	6824      	ldr	r4, [r4, #0]
 8017890:	2c00      	cmp	r4, #0
 8017892:	d1f7      	bne.n	8017884 <_fwalk_sglue+0xc>
 8017894:	4630      	mov	r0, r6
 8017896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801789a:	89ab      	ldrh	r3, [r5, #12]
 801789c:	2b01      	cmp	r3, #1
 801789e:	d907      	bls.n	80178b0 <_fwalk_sglue+0x38>
 80178a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80178a4:	3301      	adds	r3, #1
 80178a6:	d003      	beq.n	80178b0 <_fwalk_sglue+0x38>
 80178a8:	4629      	mov	r1, r5
 80178aa:	4638      	mov	r0, r7
 80178ac:	47c0      	blx	r8
 80178ae:	4306      	orrs	r6, r0
 80178b0:	3568      	adds	r5, #104	; 0x68
 80178b2:	e7e9      	b.n	8017888 <_fwalk_sglue+0x10>

080178b4 <sniprintf>:
 80178b4:	b40c      	push	{r2, r3}
 80178b6:	b530      	push	{r4, r5, lr}
 80178b8:	4b17      	ldr	r3, [pc, #92]	; (8017918 <sniprintf+0x64>)
 80178ba:	1e0c      	subs	r4, r1, #0
 80178bc:	681d      	ldr	r5, [r3, #0]
 80178be:	b09d      	sub	sp, #116	; 0x74
 80178c0:	da08      	bge.n	80178d4 <sniprintf+0x20>
 80178c2:	238b      	movs	r3, #139	; 0x8b
 80178c4:	602b      	str	r3, [r5, #0]
 80178c6:	f04f 30ff 	mov.w	r0, #4294967295
 80178ca:	b01d      	add	sp, #116	; 0x74
 80178cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178d0:	b002      	add	sp, #8
 80178d2:	4770      	bx	lr
 80178d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80178d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80178dc:	bf14      	ite	ne
 80178de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80178e2:	4623      	moveq	r3, r4
 80178e4:	9304      	str	r3, [sp, #16]
 80178e6:	9307      	str	r3, [sp, #28]
 80178e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80178ec:	9002      	str	r0, [sp, #8]
 80178ee:	9006      	str	r0, [sp, #24]
 80178f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80178f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80178f6:	ab21      	add	r3, sp, #132	; 0x84
 80178f8:	a902      	add	r1, sp, #8
 80178fa:	4628      	mov	r0, r5
 80178fc:	9301      	str	r3, [sp, #4]
 80178fe:	f002 f90b 	bl	8019b18 <_svfiprintf_r>
 8017902:	1c43      	adds	r3, r0, #1
 8017904:	bfbc      	itt	lt
 8017906:	238b      	movlt	r3, #139	; 0x8b
 8017908:	602b      	strlt	r3, [r5, #0]
 801790a:	2c00      	cmp	r4, #0
 801790c:	d0dd      	beq.n	80178ca <sniprintf+0x16>
 801790e:	9b02      	ldr	r3, [sp, #8]
 8017910:	2200      	movs	r2, #0
 8017912:	701a      	strb	r2, [r3, #0]
 8017914:	e7d9      	b.n	80178ca <sniprintf+0x16>
 8017916:	bf00      	nop
 8017918:	200002f4 	.word	0x200002f4

0801791c <siprintf>:
 801791c:	b40e      	push	{r1, r2, r3}
 801791e:	b500      	push	{lr}
 8017920:	b09c      	sub	sp, #112	; 0x70
 8017922:	ab1d      	add	r3, sp, #116	; 0x74
 8017924:	9002      	str	r0, [sp, #8]
 8017926:	9006      	str	r0, [sp, #24]
 8017928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801792c:	4809      	ldr	r0, [pc, #36]	; (8017954 <siprintf+0x38>)
 801792e:	9107      	str	r1, [sp, #28]
 8017930:	9104      	str	r1, [sp, #16]
 8017932:	4909      	ldr	r1, [pc, #36]	; (8017958 <siprintf+0x3c>)
 8017934:	f853 2b04 	ldr.w	r2, [r3], #4
 8017938:	9105      	str	r1, [sp, #20]
 801793a:	6800      	ldr	r0, [r0, #0]
 801793c:	9301      	str	r3, [sp, #4]
 801793e:	a902      	add	r1, sp, #8
 8017940:	f002 f8ea 	bl	8019b18 <_svfiprintf_r>
 8017944:	9b02      	ldr	r3, [sp, #8]
 8017946:	2200      	movs	r2, #0
 8017948:	701a      	strb	r2, [r3, #0]
 801794a:	b01c      	add	sp, #112	; 0x70
 801794c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017950:	b003      	add	sp, #12
 8017952:	4770      	bx	lr
 8017954:	200002f4 	.word	0x200002f4
 8017958:	ffff0208 	.word	0xffff0208

0801795c <__sread>:
 801795c:	b510      	push	{r4, lr}
 801795e:	460c      	mov	r4, r1
 8017960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017964:	f000 f8f0 	bl	8017b48 <_read_r>
 8017968:	2800      	cmp	r0, #0
 801796a:	bfab      	itete	ge
 801796c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801796e:	89a3      	ldrhlt	r3, [r4, #12]
 8017970:	181b      	addge	r3, r3, r0
 8017972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017976:	bfac      	ite	ge
 8017978:	6563      	strge	r3, [r4, #84]	; 0x54
 801797a:	81a3      	strhlt	r3, [r4, #12]
 801797c:	bd10      	pop	{r4, pc}

0801797e <__swrite>:
 801797e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017982:	461f      	mov	r7, r3
 8017984:	898b      	ldrh	r3, [r1, #12]
 8017986:	05db      	lsls	r3, r3, #23
 8017988:	4605      	mov	r5, r0
 801798a:	460c      	mov	r4, r1
 801798c:	4616      	mov	r6, r2
 801798e:	d505      	bpl.n	801799c <__swrite+0x1e>
 8017990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017994:	2302      	movs	r3, #2
 8017996:	2200      	movs	r2, #0
 8017998:	f000 f8c4 	bl	8017b24 <_lseek_r>
 801799c:	89a3      	ldrh	r3, [r4, #12]
 801799e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80179a6:	81a3      	strh	r3, [r4, #12]
 80179a8:	4632      	mov	r2, r6
 80179aa:	463b      	mov	r3, r7
 80179ac:	4628      	mov	r0, r5
 80179ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179b2:	f000 b8eb 	b.w	8017b8c <_write_r>

080179b6 <__sseek>:
 80179b6:	b510      	push	{r4, lr}
 80179b8:	460c      	mov	r4, r1
 80179ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179be:	f000 f8b1 	bl	8017b24 <_lseek_r>
 80179c2:	1c43      	adds	r3, r0, #1
 80179c4:	89a3      	ldrh	r3, [r4, #12]
 80179c6:	bf15      	itete	ne
 80179c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80179ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80179ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80179d2:	81a3      	strheq	r3, [r4, #12]
 80179d4:	bf18      	it	ne
 80179d6:	81a3      	strhne	r3, [r4, #12]
 80179d8:	bd10      	pop	{r4, pc}

080179da <__sclose>:
 80179da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179de:	f000 b891 	b.w	8017b04 <_close_r>

080179e2 <memset>:
 80179e2:	4402      	add	r2, r0
 80179e4:	4603      	mov	r3, r0
 80179e6:	4293      	cmp	r3, r2
 80179e8:	d100      	bne.n	80179ec <memset+0xa>
 80179ea:	4770      	bx	lr
 80179ec:	f803 1b01 	strb.w	r1, [r3], #1
 80179f0:	e7f9      	b.n	80179e6 <memset+0x4>

080179f2 <strncmp>:
 80179f2:	b510      	push	{r4, lr}
 80179f4:	b16a      	cbz	r2, 8017a12 <strncmp+0x20>
 80179f6:	3901      	subs	r1, #1
 80179f8:	1884      	adds	r4, r0, r2
 80179fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017a02:	429a      	cmp	r2, r3
 8017a04:	d103      	bne.n	8017a0e <strncmp+0x1c>
 8017a06:	42a0      	cmp	r0, r4
 8017a08:	d001      	beq.n	8017a0e <strncmp+0x1c>
 8017a0a:	2a00      	cmp	r2, #0
 8017a0c:	d1f5      	bne.n	80179fa <strncmp+0x8>
 8017a0e:	1ad0      	subs	r0, r2, r3
 8017a10:	bd10      	pop	{r4, pc}
 8017a12:	4610      	mov	r0, r2
 8017a14:	e7fc      	b.n	8017a10 <strncmp+0x1e>
	...

08017a18 <strtok>:
 8017a18:	4b16      	ldr	r3, [pc, #88]	; (8017a74 <strtok+0x5c>)
 8017a1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a1c:	681e      	ldr	r6, [r3, #0]
 8017a1e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8017a20:	4605      	mov	r5, r0
 8017a22:	b9fc      	cbnz	r4, 8017a64 <strtok+0x4c>
 8017a24:	2050      	movs	r0, #80	; 0x50
 8017a26:	9101      	str	r1, [sp, #4]
 8017a28:	f7fe f84a 	bl	8015ac0 <malloc>
 8017a2c:	9901      	ldr	r1, [sp, #4]
 8017a2e:	6470      	str	r0, [r6, #68]	; 0x44
 8017a30:	4602      	mov	r2, r0
 8017a32:	b920      	cbnz	r0, 8017a3e <strtok+0x26>
 8017a34:	4b10      	ldr	r3, [pc, #64]	; (8017a78 <strtok+0x60>)
 8017a36:	4811      	ldr	r0, [pc, #68]	; (8017a7c <strtok+0x64>)
 8017a38:	215b      	movs	r1, #91	; 0x5b
 8017a3a:	f000 f90b 	bl	8017c54 <__assert_func>
 8017a3e:	e9c0 4400 	strd	r4, r4, [r0]
 8017a42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8017a46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8017a4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8017a4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8017a52:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8017a56:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8017a5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8017a5e:	6184      	str	r4, [r0, #24]
 8017a60:	7704      	strb	r4, [r0, #28]
 8017a62:	6244      	str	r4, [r0, #36]	; 0x24
 8017a64:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8017a66:	2301      	movs	r3, #1
 8017a68:	4628      	mov	r0, r5
 8017a6a:	b002      	add	sp, #8
 8017a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a70:	f000 b806 	b.w	8017a80 <__strtok_r>
 8017a74:	200002f4 	.word	0x200002f4
 8017a78:	0801e312 	.word	0x0801e312
 8017a7c:	0801e329 	.word	0x0801e329

08017a80 <__strtok_r>:
 8017a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a82:	b908      	cbnz	r0, 8017a88 <__strtok_r+0x8>
 8017a84:	6810      	ldr	r0, [r2, #0]
 8017a86:	b188      	cbz	r0, 8017aac <__strtok_r+0x2c>
 8017a88:	4604      	mov	r4, r0
 8017a8a:	4620      	mov	r0, r4
 8017a8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017a90:	460f      	mov	r7, r1
 8017a92:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017a96:	b91e      	cbnz	r6, 8017aa0 <__strtok_r+0x20>
 8017a98:	b965      	cbnz	r5, 8017ab4 <__strtok_r+0x34>
 8017a9a:	6015      	str	r5, [r2, #0]
 8017a9c:	4628      	mov	r0, r5
 8017a9e:	e005      	b.n	8017aac <__strtok_r+0x2c>
 8017aa0:	42b5      	cmp	r5, r6
 8017aa2:	d1f6      	bne.n	8017a92 <__strtok_r+0x12>
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d1f0      	bne.n	8017a8a <__strtok_r+0xa>
 8017aa8:	6014      	str	r4, [r2, #0]
 8017aaa:	7003      	strb	r3, [r0, #0]
 8017aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017aae:	461c      	mov	r4, r3
 8017ab0:	e00c      	b.n	8017acc <__strtok_r+0x4c>
 8017ab2:	b915      	cbnz	r5, 8017aba <__strtok_r+0x3a>
 8017ab4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017ab8:	460e      	mov	r6, r1
 8017aba:	f816 5b01 	ldrb.w	r5, [r6], #1
 8017abe:	42ab      	cmp	r3, r5
 8017ac0:	d1f7      	bne.n	8017ab2 <__strtok_r+0x32>
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d0f3      	beq.n	8017aae <__strtok_r+0x2e>
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017acc:	6014      	str	r4, [r2, #0]
 8017ace:	e7ed      	b.n	8017aac <__strtok_r+0x2c>

08017ad0 <strstr>:
 8017ad0:	780a      	ldrb	r2, [r1, #0]
 8017ad2:	b570      	push	{r4, r5, r6, lr}
 8017ad4:	b96a      	cbnz	r2, 8017af2 <strstr+0x22>
 8017ad6:	bd70      	pop	{r4, r5, r6, pc}
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	d109      	bne.n	8017af0 <strstr+0x20>
 8017adc:	460c      	mov	r4, r1
 8017ade:	4605      	mov	r5, r0
 8017ae0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d0f6      	beq.n	8017ad6 <strstr+0x6>
 8017ae8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017aec:	429e      	cmp	r6, r3
 8017aee:	d0f7      	beq.n	8017ae0 <strstr+0x10>
 8017af0:	3001      	adds	r0, #1
 8017af2:	7803      	ldrb	r3, [r0, #0]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d1ef      	bne.n	8017ad8 <strstr+0x8>
 8017af8:	4618      	mov	r0, r3
 8017afa:	e7ec      	b.n	8017ad6 <strstr+0x6>

08017afc <_localeconv_r>:
 8017afc:	4800      	ldr	r0, [pc, #0]	; (8017b00 <_localeconv_r+0x4>)
 8017afe:	4770      	bx	lr
 8017b00:	2000022c 	.word	0x2000022c

08017b04 <_close_r>:
 8017b04:	b538      	push	{r3, r4, r5, lr}
 8017b06:	4d06      	ldr	r5, [pc, #24]	; (8017b20 <_close_r+0x1c>)
 8017b08:	2300      	movs	r3, #0
 8017b0a:	4604      	mov	r4, r0
 8017b0c:	4608      	mov	r0, r1
 8017b0e:	602b      	str	r3, [r5, #0]
 8017b10:	f7ee fb35 	bl	800617e <_close>
 8017b14:	1c43      	adds	r3, r0, #1
 8017b16:	d102      	bne.n	8017b1e <_close_r+0x1a>
 8017b18:	682b      	ldr	r3, [r5, #0]
 8017b1a:	b103      	cbz	r3, 8017b1e <_close_r+0x1a>
 8017b1c:	6023      	str	r3, [r4, #0]
 8017b1e:	bd38      	pop	{r3, r4, r5, pc}
 8017b20:	20002700 	.word	0x20002700

08017b24 <_lseek_r>:
 8017b24:	b538      	push	{r3, r4, r5, lr}
 8017b26:	4d07      	ldr	r5, [pc, #28]	; (8017b44 <_lseek_r+0x20>)
 8017b28:	4604      	mov	r4, r0
 8017b2a:	4608      	mov	r0, r1
 8017b2c:	4611      	mov	r1, r2
 8017b2e:	2200      	movs	r2, #0
 8017b30:	602a      	str	r2, [r5, #0]
 8017b32:	461a      	mov	r2, r3
 8017b34:	f7ee fb4a 	bl	80061cc <_lseek>
 8017b38:	1c43      	adds	r3, r0, #1
 8017b3a:	d102      	bne.n	8017b42 <_lseek_r+0x1e>
 8017b3c:	682b      	ldr	r3, [r5, #0]
 8017b3e:	b103      	cbz	r3, 8017b42 <_lseek_r+0x1e>
 8017b40:	6023      	str	r3, [r4, #0]
 8017b42:	bd38      	pop	{r3, r4, r5, pc}
 8017b44:	20002700 	.word	0x20002700

08017b48 <_read_r>:
 8017b48:	b538      	push	{r3, r4, r5, lr}
 8017b4a:	4d07      	ldr	r5, [pc, #28]	; (8017b68 <_read_r+0x20>)
 8017b4c:	4604      	mov	r4, r0
 8017b4e:	4608      	mov	r0, r1
 8017b50:	4611      	mov	r1, r2
 8017b52:	2200      	movs	r2, #0
 8017b54:	602a      	str	r2, [r5, #0]
 8017b56:	461a      	mov	r2, r3
 8017b58:	f7ee fad8 	bl	800610c <_read>
 8017b5c:	1c43      	adds	r3, r0, #1
 8017b5e:	d102      	bne.n	8017b66 <_read_r+0x1e>
 8017b60:	682b      	ldr	r3, [r5, #0]
 8017b62:	b103      	cbz	r3, 8017b66 <_read_r+0x1e>
 8017b64:	6023      	str	r3, [r4, #0]
 8017b66:	bd38      	pop	{r3, r4, r5, pc}
 8017b68:	20002700 	.word	0x20002700

08017b6c <_sbrk_r>:
 8017b6c:	b538      	push	{r3, r4, r5, lr}
 8017b6e:	4d06      	ldr	r5, [pc, #24]	; (8017b88 <_sbrk_r+0x1c>)
 8017b70:	2300      	movs	r3, #0
 8017b72:	4604      	mov	r4, r0
 8017b74:	4608      	mov	r0, r1
 8017b76:	602b      	str	r3, [r5, #0]
 8017b78:	f7ee fb36 	bl	80061e8 <_sbrk>
 8017b7c:	1c43      	adds	r3, r0, #1
 8017b7e:	d102      	bne.n	8017b86 <_sbrk_r+0x1a>
 8017b80:	682b      	ldr	r3, [r5, #0]
 8017b82:	b103      	cbz	r3, 8017b86 <_sbrk_r+0x1a>
 8017b84:	6023      	str	r3, [r4, #0]
 8017b86:	bd38      	pop	{r3, r4, r5, pc}
 8017b88:	20002700 	.word	0x20002700

08017b8c <_write_r>:
 8017b8c:	b538      	push	{r3, r4, r5, lr}
 8017b8e:	4d07      	ldr	r5, [pc, #28]	; (8017bac <_write_r+0x20>)
 8017b90:	4604      	mov	r4, r0
 8017b92:	4608      	mov	r0, r1
 8017b94:	4611      	mov	r1, r2
 8017b96:	2200      	movs	r2, #0
 8017b98:	602a      	str	r2, [r5, #0]
 8017b9a:	461a      	mov	r2, r3
 8017b9c:	f7ee fad3 	bl	8006146 <_write>
 8017ba0:	1c43      	adds	r3, r0, #1
 8017ba2:	d102      	bne.n	8017baa <_write_r+0x1e>
 8017ba4:	682b      	ldr	r3, [r5, #0]
 8017ba6:	b103      	cbz	r3, 8017baa <_write_r+0x1e>
 8017ba8:	6023      	str	r3, [r4, #0]
 8017baa:	bd38      	pop	{r3, r4, r5, pc}
 8017bac:	20002700 	.word	0x20002700

08017bb0 <__errno>:
 8017bb0:	4b01      	ldr	r3, [pc, #4]	; (8017bb8 <__errno+0x8>)
 8017bb2:	6818      	ldr	r0, [r3, #0]
 8017bb4:	4770      	bx	lr
 8017bb6:	bf00      	nop
 8017bb8:	200002f4 	.word	0x200002f4

08017bbc <__libc_init_array>:
 8017bbc:	b570      	push	{r4, r5, r6, lr}
 8017bbe:	4d0d      	ldr	r5, [pc, #52]	; (8017bf4 <__libc_init_array+0x38>)
 8017bc0:	4c0d      	ldr	r4, [pc, #52]	; (8017bf8 <__libc_init_array+0x3c>)
 8017bc2:	1b64      	subs	r4, r4, r5
 8017bc4:	10a4      	asrs	r4, r4, #2
 8017bc6:	2600      	movs	r6, #0
 8017bc8:	42a6      	cmp	r6, r4
 8017bca:	d109      	bne.n	8017be0 <__libc_init_array+0x24>
 8017bcc:	4d0b      	ldr	r5, [pc, #44]	; (8017bfc <__libc_init_array+0x40>)
 8017bce:	4c0c      	ldr	r4, [pc, #48]	; (8017c00 <__libc_init_array+0x44>)
 8017bd0:	f004 fb22 	bl	801c218 <_init>
 8017bd4:	1b64      	subs	r4, r4, r5
 8017bd6:	10a4      	asrs	r4, r4, #2
 8017bd8:	2600      	movs	r6, #0
 8017bda:	42a6      	cmp	r6, r4
 8017bdc:	d105      	bne.n	8017bea <__libc_init_array+0x2e>
 8017bde:	bd70      	pop	{r4, r5, r6, pc}
 8017be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8017be4:	4798      	blx	r3
 8017be6:	3601      	adds	r6, #1
 8017be8:	e7ee      	b.n	8017bc8 <__libc_init_array+0xc>
 8017bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8017bee:	4798      	blx	r3
 8017bf0:	3601      	adds	r6, #1
 8017bf2:	e7f2      	b.n	8017bda <__libc_init_array+0x1e>
 8017bf4:	0801e800 	.word	0x0801e800
 8017bf8:	0801e800 	.word	0x0801e800
 8017bfc:	0801e800 	.word	0x0801e800
 8017c00:	0801e804 	.word	0x0801e804

08017c04 <__retarget_lock_init_recursive>:
 8017c04:	4770      	bx	lr

08017c06 <__retarget_lock_acquire_recursive>:
 8017c06:	4770      	bx	lr

08017c08 <__retarget_lock_release_recursive>:
 8017c08:	4770      	bx	lr

08017c0a <strcpy>:
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c10:	f803 2b01 	strb.w	r2, [r3], #1
 8017c14:	2a00      	cmp	r2, #0
 8017c16:	d1f9      	bne.n	8017c0c <strcpy+0x2>
 8017c18:	4770      	bx	lr

08017c1a <memcpy>:
 8017c1a:	440a      	add	r2, r1
 8017c1c:	4291      	cmp	r1, r2
 8017c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017c22:	d100      	bne.n	8017c26 <memcpy+0xc>
 8017c24:	4770      	bx	lr
 8017c26:	b510      	push	{r4, lr}
 8017c28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c30:	4291      	cmp	r1, r2
 8017c32:	d1f9      	bne.n	8017c28 <memcpy+0xe>
 8017c34:	bd10      	pop	{r4, pc}
	...

08017c38 <nan>:
 8017c38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017c40 <nan+0x8>
 8017c3c:	4770      	bx	lr
 8017c3e:	bf00      	nop
 8017c40:	00000000 	.word	0x00000000
 8017c44:	7ff80000 	.word	0x7ff80000

08017c48 <nanf>:
 8017c48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017c50 <nanf+0x8>
 8017c4c:	4770      	bx	lr
 8017c4e:	bf00      	nop
 8017c50:	7fc00000 	.word	0x7fc00000

08017c54 <__assert_func>:
 8017c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c56:	4614      	mov	r4, r2
 8017c58:	461a      	mov	r2, r3
 8017c5a:	4b09      	ldr	r3, [pc, #36]	; (8017c80 <__assert_func+0x2c>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	4605      	mov	r5, r0
 8017c60:	68d8      	ldr	r0, [r3, #12]
 8017c62:	b14c      	cbz	r4, 8017c78 <__assert_func+0x24>
 8017c64:	4b07      	ldr	r3, [pc, #28]	; (8017c84 <__assert_func+0x30>)
 8017c66:	9100      	str	r1, [sp, #0]
 8017c68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c6c:	4906      	ldr	r1, [pc, #24]	; (8017c88 <__assert_func+0x34>)
 8017c6e:	462b      	mov	r3, r5
 8017c70:	f002 f8fe 	bl	8019e70 <fiprintf>
 8017c74:	f002 f928 	bl	8019ec8 <abort>
 8017c78:	4b04      	ldr	r3, [pc, #16]	; (8017c8c <__assert_func+0x38>)
 8017c7a:	461c      	mov	r4, r3
 8017c7c:	e7f3      	b.n	8017c66 <__assert_func+0x12>
 8017c7e:	bf00      	nop
 8017c80:	200002f4 	.word	0x200002f4
 8017c84:	0801e38b 	.word	0x0801e38b
 8017c88:	0801e398 	.word	0x0801e398
 8017c8c:	0801e3c6 	.word	0x0801e3c6

08017c90 <quorem>:
 8017c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c94:	6903      	ldr	r3, [r0, #16]
 8017c96:	690c      	ldr	r4, [r1, #16]
 8017c98:	42a3      	cmp	r3, r4
 8017c9a:	4607      	mov	r7, r0
 8017c9c:	db7e      	blt.n	8017d9c <quorem+0x10c>
 8017c9e:	3c01      	subs	r4, #1
 8017ca0:	f101 0814 	add.w	r8, r1, #20
 8017ca4:	f100 0514 	add.w	r5, r0, #20
 8017ca8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017cac:	9301      	str	r3, [sp, #4]
 8017cae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017cb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017cb6:	3301      	adds	r3, #1
 8017cb8:	429a      	cmp	r2, r3
 8017cba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017cbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017cc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8017cc6:	d331      	bcc.n	8017d2c <quorem+0x9c>
 8017cc8:	f04f 0e00 	mov.w	lr, #0
 8017ccc:	4640      	mov	r0, r8
 8017cce:	46ac      	mov	ip, r5
 8017cd0:	46f2      	mov	sl, lr
 8017cd2:	f850 2b04 	ldr.w	r2, [r0], #4
 8017cd6:	b293      	uxth	r3, r2
 8017cd8:	fb06 e303 	mla	r3, r6, r3, lr
 8017cdc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017ce0:	0c1a      	lsrs	r2, r3, #16
 8017ce2:	b29b      	uxth	r3, r3
 8017ce4:	ebaa 0303 	sub.w	r3, sl, r3
 8017ce8:	f8dc a000 	ldr.w	sl, [ip]
 8017cec:	fa13 f38a 	uxtah	r3, r3, sl
 8017cf0:	fb06 220e 	mla	r2, r6, lr, r2
 8017cf4:	9300      	str	r3, [sp, #0]
 8017cf6:	9b00      	ldr	r3, [sp, #0]
 8017cf8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017cfc:	b292      	uxth	r2, r2
 8017cfe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017d02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017d06:	f8bd 3000 	ldrh.w	r3, [sp]
 8017d0a:	4581      	cmp	r9, r0
 8017d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d10:	f84c 3b04 	str.w	r3, [ip], #4
 8017d14:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017d18:	d2db      	bcs.n	8017cd2 <quorem+0x42>
 8017d1a:	f855 300b 	ldr.w	r3, [r5, fp]
 8017d1e:	b92b      	cbnz	r3, 8017d2c <quorem+0x9c>
 8017d20:	9b01      	ldr	r3, [sp, #4]
 8017d22:	3b04      	subs	r3, #4
 8017d24:	429d      	cmp	r5, r3
 8017d26:	461a      	mov	r2, r3
 8017d28:	d32c      	bcc.n	8017d84 <quorem+0xf4>
 8017d2a:	613c      	str	r4, [r7, #16]
 8017d2c:	4638      	mov	r0, r7
 8017d2e:	f001 fca5 	bl	801967c <__mcmp>
 8017d32:	2800      	cmp	r0, #0
 8017d34:	db22      	blt.n	8017d7c <quorem+0xec>
 8017d36:	3601      	adds	r6, #1
 8017d38:	4629      	mov	r1, r5
 8017d3a:	2000      	movs	r0, #0
 8017d3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017d40:	f8d1 c000 	ldr.w	ip, [r1]
 8017d44:	b293      	uxth	r3, r2
 8017d46:	1ac3      	subs	r3, r0, r3
 8017d48:	0c12      	lsrs	r2, r2, #16
 8017d4a:	fa13 f38c 	uxtah	r3, r3, ip
 8017d4e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017d52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017d56:	b29b      	uxth	r3, r3
 8017d58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d5c:	45c1      	cmp	r9, r8
 8017d5e:	f841 3b04 	str.w	r3, [r1], #4
 8017d62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017d66:	d2e9      	bcs.n	8017d3c <quorem+0xac>
 8017d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d70:	b922      	cbnz	r2, 8017d7c <quorem+0xec>
 8017d72:	3b04      	subs	r3, #4
 8017d74:	429d      	cmp	r5, r3
 8017d76:	461a      	mov	r2, r3
 8017d78:	d30a      	bcc.n	8017d90 <quorem+0x100>
 8017d7a:	613c      	str	r4, [r7, #16]
 8017d7c:	4630      	mov	r0, r6
 8017d7e:	b003      	add	sp, #12
 8017d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d84:	6812      	ldr	r2, [r2, #0]
 8017d86:	3b04      	subs	r3, #4
 8017d88:	2a00      	cmp	r2, #0
 8017d8a:	d1ce      	bne.n	8017d2a <quorem+0x9a>
 8017d8c:	3c01      	subs	r4, #1
 8017d8e:	e7c9      	b.n	8017d24 <quorem+0x94>
 8017d90:	6812      	ldr	r2, [r2, #0]
 8017d92:	3b04      	subs	r3, #4
 8017d94:	2a00      	cmp	r2, #0
 8017d96:	d1f0      	bne.n	8017d7a <quorem+0xea>
 8017d98:	3c01      	subs	r4, #1
 8017d9a:	e7eb      	b.n	8017d74 <quorem+0xe4>
 8017d9c:	2000      	movs	r0, #0
 8017d9e:	e7ee      	b.n	8017d7e <quorem+0xee>

08017da0 <_dtoa_r>:
 8017da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da4:	ed2d 8b04 	vpush	{d8-d9}
 8017da8:	69c5      	ldr	r5, [r0, #28]
 8017daa:	b093      	sub	sp, #76	; 0x4c
 8017dac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017db0:	ec57 6b10 	vmov	r6, r7, d0
 8017db4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017db8:	9107      	str	r1, [sp, #28]
 8017dba:	4604      	mov	r4, r0
 8017dbc:	920a      	str	r2, [sp, #40]	; 0x28
 8017dbe:	930d      	str	r3, [sp, #52]	; 0x34
 8017dc0:	b975      	cbnz	r5, 8017de0 <_dtoa_r+0x40>
 8017dc2:	2010      	movs	r0, #16
 8017dc4:	f7fd fe7c 	bl	8015ac0 <malloc>
 8017dc8:	4602      	mov	r2, r0
 8017dca:	61e0      	str	r0, [r4, #28]
 8017dcc:	b920      	cbnz	r0, 8017dd8 <_dtoa_r+0x38>
 8017dce:	4bae      	ldr	r3, [pc, #696]	; (8018088 <_dtoa_r+0x2e8>)
 8017dd0:	21ef      	movs	r1, #239	; 0xef
 8017dd2:	48ae      	ldr	r0, [pc, #696]	; (801808c <_dtoa_r+0x2ec>)
 8017dd4:	f7ff ff3e 	bl	8017c54 <__assert_func>
 8017dd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017ddc:	6005      	str	r5, [r0, #0]
 8017dde:	60c5      	str	r5, [r0, #12]
 8017de0:	69e3      	ldr	r3, [r4, #28]
 8017de2:	6819      	ldr	r1, [r3, #0]
 8017de4:	b151      	cbz	r1, 8017dfc <_dtoa_r+0x5c>
 8017de6:	685a      	ldr	r2, [r3, #4]
 8017de8:	604a      	str	r2, [r1, #4]
 8017dea:	2301      	movs	r3, #1
 8017dec:	4093      	lsls	r3, r2
 8017dee:	608b      	str	r3, [r1, #8]
 8017df0:	4620      	mov	r0, r4
 8017df2:	f001 f9bd 	bl	8019170 <_Bfree>
 8017df6:	69e3      	ldr	r3, [r4, #28]
 8017df8:	2200      	movs	r2, #0
 8017dfa:	601a      	str	r2, [r3, #0]
 8017dfc:	1e3b      	subs	r3, r7, #0
 8017dfe:	bfbb      	ittet	lt
 8017e00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017e04:	9303      	strlt	r3, [sp, #12]
 8017e06:	2300      	movge	r3, #0
 8017e08:	2201      	movlt	r2, #1
 8017e0a:	bfac      	ite	ge
 8017e0c:	f8c8 3000 	strge.w	r3, [r8]
 8017e10:	f8c8 2000 	strlt.w	r2, [r8]
 8017e14:	4b9e      	ldr	r3, [pc, #632]	; (8018090 <_dtoa_r+0x2f0>)
 8017e16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017e1a:	ea33 0308 	bics.w	r3, r3, r8
 8017e1e:	d11b      	bne.n	8017e58 <_dtoa_r+0xb8>
 8017e20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017e22:	f242 730f 	movw	r3, #9999	; 0x270f
 8017e26:	6013      	str	r3, [r2, #0]
 8017e28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017e2c:	4333      	orrs	r3, r6
 8017e2e:	f000 8593 	beq.w	8018958 <_dtoa_r+0xbb8>
 8017e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e34:	b963      	cbnz	r3, 8017e50 <_dtoa_r+0xb0>
 8017e36:	4b97      	ldr	r3, [pc, #604]	; (8018094 <_dtoa_r+0x2f4>)
 8017e38:	e027      	b.n	8017e8a <_dtoa_r+0xea>
 8017e3a:	4b97      	ldr	r3, [pc, #604]	; (8018098 <_dtoa_r+0x2f8>)
 8017e3c:	9300      	str	r3, [sp, #0]
 8017e3e:	3308      	adds	r3, #8
 8017e40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017e42:	6013      	str	r3, [r2, #0]
 8017e44:	9800      	ldr	r0, [sp, #0]
 8017e46:	b013      	add	sp, #76	; 0x4c
 8017e48:	ecbd 8b04 	vpop	{d8-d9}
 8017e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e50:	4b90      	ldr	r3, [pc, #576]	; (8018094 <_dtoa_r+0x2f4>)
 8017e52:	9300      	str	r3, [sp, #0]
 8017e54:	3303      	adds	r3, #3
 8017e56:	e7f3      	b.n	8017e40 <_dtoa_r+0xa0>
 8017e58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	ec51 0b17 	vmov	r0, r1, d7
 8017e62:	eeb0 8a47 	vmov.f32	s16, s14
 8017e66:	eef0 8a67 	vmov.f32	s17, s15
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	f7e8 fe2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e70:	4681      	mov	r9, r0
 8017e72:	b160      	cbz	r0, 8017e8e <_dtoa_r+0xee>
 8017e74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017e76:	2301      	movs	r3, #1
 8017e78:	6013      	str	r3, [r2, #0]
 8017e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	f000 8568 	beq.w	8018952 <_dtoa_r+0xbb2>
 8017e82:	4b86      	ldr	r3, [pc, #536]	; (801809c <_dtoa_r+0x2fc>)
 8017e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017e86:	6013      	str	r3, [r2, #0]
 8017e88:	3b01      	subs	r3, #1
 8017e8a:	9300      	str	r3, [sp, #0]
 8017e8c:	e7da      	b.n	8017e44 <_dtoa_r+0xa4>
 8017e8e:	aa10      	add	r2, sp, #64	; 0x40
 8017e90:	a911      	add	r1, sp, #68	; 0x44
 8017e92:	4620      	mov	r0, r4
 8017e94:	eeb0 0a48 	vmov.f32	s0, s16
 8017e98:	eef0 0a68 	vmov.f32	s1, s17
 8017e9c:	f001 fd04 	bl	80198a8 <__d2b>
 8017ea0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017ea4:	4682      	mov	sl, r0
 8017ea6:	2d00      	cmp	r5, #0
 8017ea8:	d07f      	beq.n	8017faa <_dtoa_r+0x20a>
 8017eaa:	ee18 3a90 	vmov	r3, s17
 8017eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017eb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017eb6:	ec51 0b18 	vmov	r0, r1, d8
 8017eba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017ebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017ec2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	2200      	movs	r2, #0
 8017eca:	4b75      	ldr	r3, [pc, #468]	; (80180a0 <_dtoa_r+0x300>)
 8017ecc:	f7e8 f9dc 	bl	8000288 <__aeabi_dsub>
 8017ed0:	a367      	add	r3, pc, #412	; (adr r3, 8018070 <_dtoa_r+0x2d0>)
 8017ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ed6:	f7e8 fb8f 	bl	80005f8 <__aeabi_dmul>
 8017eda:	a367      	add	r3, pc, #412	; (adr r3, 8018078 <_dtoa_r+0x2d8>)
 8017edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ee0:	f7e8 f9d4 	bl	800028c <__adddf3>
 8017ee4:	4606      	mov	r6, r0
 8017ee6:	4628      	mov	r0, r5
 8017ee8:	460f      	mov	r7, r1
 8017eea:	f7e8 fb1b 	bl	8000524 <__aeabi_i2d>
 8017eee:	a364      	add	r3, pc, #400	; (adr r3, 8018080 <_dtoa_r+0x2e0>)
 8017ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ef4:	f7e8 fb80 	bl	80005f8 <__aeabi_dmul>
 8017ef8:	4602      	mov	r2, r0
 8017efa:	460b      	mov	r3, r1
 8017efc:	4630      	mov	r0, r6
 8017efe:	4639      	mov	r1, r7
 8017f00:	f7e8 f9c4 	bl	800028c <__adddf3>
 8017f04:	4606      	mov	r6, r0
 8017f06:	460f      	mov	r7, r1
 8017f08:	f7e8 fe26 	bl	8000b58 <__aeabi_d2iz>
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	4683      	mov	fp, r0
 8017f10:	2300      	movs	r3, #0
 8017f12:	4630      	mov	r0, r6
 8017f14:	4639      	mov	r1, r7
 8017f16:	f7e8 fde1 	bl	8000adc <__aeabi_dcmplt>
 8017f1a:	b148      	cbz	r0, 8017f30 <_dtoa_r+0x190>
 8017f1c:	4658      	mov	r0, fp
 8017f1e:	f7e8 fb01 	bl	8000524 <__aeabi_i2d>
 8017f22:	4632      	mov	r2, r6
 8017f24:	463b      	mov	r3, r7
 8017f26:	f7e8 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f2a:	b908      	cbnz	r0, 8017f30 <_dtoa_r+0x190>
 8017f2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017f30:	f1bb 0f16 	cmp.w	fp, #22
 8017f34:	d857      	bhi.n	8017fe6 <_dtoa_r+0x246>
 8017f36:	4b5b      	ldr	r3, [pc, #364]	; (80180a4 <_dtoa_r+0x304>)
 8017f38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f40:	ec51 0b18 	vmov	r0, r1, d8
 8017f44:	f7e8 fdca 	bl	8000adc <__aeabi_dcmplt>
 8017f48:	2800      	cmp	r0, #0
 8017f4a:	d04e      	beq.n	8017fea <_dtoa_r+0x24a>
 8017f4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017f50:	2300      	movs	r3, #0
 8017f52:	930c      	str	r3, [sp, #48]	; 0x30
 8017f54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f56:	1b5b      	subs	r3, r3, r5
 8017f58:	1e5a      	subs	r2, r3, #1
 8017f5a:	bf45      	ittet	mi
 8017f5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8017f60:	9305      	strmi	r3, [sp, #20]
 8017f62:	2300      	movpl	r3, #0
 8017f64:	2300      	movmi	r3, #0
 8017f66:	9206      	str	r2, [sp, #24]
 8017f68:	bf54      	ite	pl
 8017f6a:	9305      	strpl	r3, [sp, #20]
 8017f6c:	9306      	strmi	r3, [sp, #24]
 8017f6e:	f1bb 0f00 	cmp.w	fp, #0
 8017f72:	db3c      	blt.n	8017fee <_dtoa_r+0x24e>
 8017f74:	9b06      	ldr	r3, [sp, #24]
 8017f76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017f7a:	445b      	add	r3, fp
 8017f7c:	9306      	str	r3, [sp, #24]
 8017f7e:	2300      	movs	r3, #0
 8017f80:	9308      	str	r3, [sp, #32]
 8017f82:	9b07      	ldr	r3, [sp, #28]
 8017f84:	2b09      	cmp	r3, #9
 8017f86:	d868      	bhi.n	801805a <_dtoa_r+0x2ba>
 8017f88:	2b05      	cmp	r3, #5
 8017f8a:	bfc4      	itt	gt
 8017f8c:	3b04      	subgt	r3, #4
 8017f8e:	9307      	strgt	r3, [sp, #28]
 8017f90:	9b07      	ldr	r3, [sp, #28]
 8017f92:	f1a3 0302 	sub.w	r3, r3, #2
 8017f96:	bfcc      	ite	gt
 8017f98:	2500      	movgt	r5, #0
 8017f9a:	2501      	movle	r5, #1
 8017f9c:	2b03      	cmp	r3, #3
 8017f9e:	f200 8085 	bhi.w	80180ac <_dtoa_r+0x30c>
 8017fa2:	e8df f003 	tbb	[pc, r3]
 8017fa6:	3b2e      	.short	0x3b2e
 8017fa8:	5839      	.short	0x5839
 8017faa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017fae:	441d      	add	r5, r3
 8017fb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017fb4:	2b20      	cmp	r3, #32
 8017fb6:	bfc1      	itttt	gt
 8017fb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017fbc:	fa08 f803 	lslgt.w	r8, r8, r3
 8017fc0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017fc4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017fc8:	bfd6      	itet	le
 8017fca:	f1c3 0320 	rsble	r3, r3, #32
 8017fce:	ea48 0003 	orrgt.w	r0, r8, r3
 8017fd2:	fa06 f003 	lslle.w	r0, r6, r3
 8017fd6:	f7e8 fa95 	bl	8000504 <__aeabi_ui2d>
 8017fda:	2201      	movs	r2, #1
 8017fdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017fe0:	3d01      	subs	r5, #1
 8017fe2:	920e      	str	r2, [sp, #56]	; 0x38
 8017fe4:	e76f      	b.n	8017ec6 <_dtoa_r+0x126>
 8017fe6:	2301      	movs	r3, #1
 8017fe8:	e7b3      	b.n	8017f52 <_dtoa_r+0x1b2>
 8017fea:	900c      	str	r0, [sp, #48]	; 0x30
 8017fec:	e7b2      	b.n	8017f54 <_dtoa_r+0x1b4>
 8017fee:	9b05      	ldr	r3, [sp, #20]
 8017ff0:	eba3 030b 	sub.w	r3, r3, fp
 8017ff4:	9305      	str	r3, [sp, #20]
 8017ff6:	f1cb 0300 	rsb	r3, fp, #0
 8017ffa:	9308      	str	r3, [sp, #32]
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8018000:	e7bf      	b.n	8017f82 <_dtoa_r+0x1e2>
 8018002:	2300      	movs	r3, #0
 8018004:	9309      	str	r3, [sp, #36]	; 0x24
 8018006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018008:	2b00      	cmp	r3, #0
 801800a:	dc52      	bgt.n	80180b2 <_dtoa_r+0x312>
 801800c:	2301      	movs	r3, #1
 801800e:	9301      	str	r3, [sp, #4]
 8018010:	9304      	str	r3, [sp, #16]
 8018012:	461a      	mov	r2, r3
 8018014:	920a      	str	r2, [sp, #40]	; 0x28
 8018016:	e00b      	b.n	8018030 <_dtoa_r+0x290>
 8018018:	2301      	movs	r3, #1
 801801a:	e7f3      	b.n	8018004 <_dtoa_r+0x264>
 801801c:	2300      	movs	r3, #0
 801801e:	9309      	str	r3, [sp, #36]	; 0x24
 8018020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018022:	445b      	add	r3, fp
 8018024:	9301      	str	r3, [sp, #4]
 8018026:	3301      	adds	r3, #1
 8018028:	2b01      	cmp	r3, #1
 801802a:	9304      	str	r3, [sp, #16]
 801802c:	bfb8      	it	lt
 801802e:	2301      	movlt	r3, #1
 8018030:	69e0      	ldr	r0, [r4, #28]
 8018032:	2100      	movs	r1, #0
 8018034:	2204      	movs	r2, #4
 8018036:	f102 0614 	add.w	r6, r2, #20
 801803a:	429e      	cmp	r6, r3
 801803c:	d93d      	bls.n	80180ba <_dtoa_r+0x31a>
 801803e:	6041      	str	r1, [r0, #4]
 8018040:	4620      	mov	r0, r4
 8018042:	f001 f855 	bl	80190f0 <_Balloc>
 8018046:	9000      	str	r0, [sp, #0]
 8018048:	2800      	cmp	r0, #0
 801804a:	d139      	bne.n	80180c0 <_dtoa_r+0x320>
 801804c:	4b16      	ldr	r3, [pc, #88]	; (80180a8 <_dtoa_r+0x308>)
 801804e:	4602      	mov	r2, r0
 8018050:	f240 11af 	movw	r1, #431	; 0x1af
 8018054:	e6bd      	b.n	8017dd2 <_dtoa_r+0x32>
 8018056:	2301      	movs	r3, #1
 8018058:	e7e1      	b.n	801801e <_dtoa_r+0x27e>
 801805a:	2501      	movs	r5, #1
 801805c:	2300      	movs	r3, #0
 801805e:	9307      	str	r3, [sp, #28]
 8018060:	9509      	str	r5, [sp, #36]	; 0x24
 8018062:	f04f 33ff 	mov.w	r3, #4294967295
 8018066:	9301      	str	r3, [sp, #4]
 8018068:	9304      	str	r3, [sp, #16]
 801806a:	2200      	movs	r2, #0
 801806c:	2312      	movs	r3, #18
 801806e:	e7d1      	b.n	8018014 <_dtoa_r+0x274>
 8018070:	636f4361 	.word	0x636f4361
 8018074:	3fd287a7 	.word	0x3fd287a7
 8018078:	8b60c8b3 	.word	0x8b60c8b3
 801807c:	3fc68a28 	.word	0x3fc68a28
 8018080:	509f79fb 	.word	0x509f79fb
 8018084:	3fd34413 	.word	0x3fd34413
 8018088:	0801e312 	.word	0x0801e312
 801808c:	0801e3d4 	.word	0x0801e3d4
 8018090:	7ff00000 	.word	0x7ff00000
 8018094:	0801e3d0 	.word	0x0801e3d0
 8018098:	0801e3c7 	.word	0x0801e3c7
 801809c:	0801e2ea 	.word	0x0801e2ea
 80180a0:	3ff80000 	.word	0x3ff80000
 80180a4:	0801e520 	.word	0x0801e520
 80180a8:	0801e42c 	.word	0x0801e42c
 80180ac:	2301      	movs	r3, #1
 80180ae:	9309      	str	r3, [sp, #36]	; 0x24
 80180b0:	e7d7      	b.n	8018062 <_dtoa_r+0x2c2>
 80180b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180b4:	9301      	str	r3, [sp, #4]
 80180b6:	9304      	str	r3, [sp, #16]
 80180b8:	e7ba      	b.n	8018030 <_dtoa_r+0x290>
 80180ba:	3101      	adds	r1, #1
 80180bc:	0052      	lsls	r2, r2, #1
 80180be:	e7ba      	b.n	8018036 <_dtoa_r+0x296>
 80180c0:	69e3      	ldr	r3, [r4, #28]
 80180c2:	9a00      	ldr	r2, [sp, #0]
 80180c4:	601a      	str	r2, [r3, #0]
 80180c6:	9b04      	ldr	r3, [sp, #16]
 80180c8:	2b0e      	cmp	r3, #14
 80180ca:	f200 80a8 	bhi.w	801821e <_dtoa_r+0x47e>
 80180ce:	2d00      	cmp	r5, #0
 80180d0:	f000 80a5 	beq.w	801821e <_dtoa_r+0x47e>
 80180d4:	f1bb 0f00 	cmp.w	fp, #0
 80180d8:	dd38      	ble.n	801814c <_dtoa_r+0x3ac>
 80180da:	4bc0      	ldr	r3, [pc, #768]	; (80183dc <_dtoa_r+0x63c>)
 80180dc:	f00b 020f 	and.w	r2, fp, #15
 80180e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80180e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80180e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80180ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80180f0:	d019      	beq.n	8018126 <_dtoa_r+0x386>
 80180f2:	4bbb      	ldr	r3, [pc, #748]	; (80183e0 <_dtoa_r+0x640>)
 80180f4:	ec51 0b18 	vmov	r0, r1, d8
 80180f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80180fc:	f7e8 fba6 	bl	800084c <__aeabi_ddiv>
 8018100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018104:	f008 080f 	and.w	r8, r8, #15
 8018108:	2503      	movs	r5, #3
 801810a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80183e0 <_dtoa_r+0x640>
 801810e:	f1b8 0f00 	cmp.w	r8, #0
 8018112:	d10a      	bne.n	801812a <_dtoa_r+0x38a>
 8018114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018118:	4632      	mov	r2, r6
 801811a:	463b      	mov	r3, r7
 801811c:	f7e8 fb96 	bl	800084c <__aeabi_ddiv>
 8018120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018124:	e02b      	b.n	801817e <_dtoa_r+0x3de>
 8018126:	2502      	movs	r5, #2
 8018128:	e7ef      	b.n	801810a <_dtoa_r+0x36a>
 801812a:	f018 0f01 	tst.w	r8, #1
 801812e:	d008      	beq.n	8018142 <_dtoa_r+0x3a2>
 8018130:	4630      	mov	r0, r6
 8018132:	4639      	mov	r1, r7
 8018134:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018138:	f7e8 fa5e 	bl	80005f8 <__aeabi_dmul>
 801813c:	3501      	adds	r5, #1
 801813e:	4606      	mov	r6, r0
 8018140:	460f      	mov	r7, r1
 8018142:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018146:	f109 0908 	add.w	r9, r9, #8
 801814a:	e7e0      	b.n	801810e <_dtoa_r+0x36e>
 801814c:	f000 809f 	beq.w	801828e <_dtoa_r+0x4ee>
 8018150:	f1cb 0600 	rsb	r6, fp, #0
 8018154:	4ba1      	ldr	r3, [pc, #644]	; (80183dc <_dtoa_r+0x63c>)
 8018156:	4fa2      	ldr	r7, [pc, #648]	; (80183e0 <_dtoa_r+0x640>)
 8018158:	f006 020f 	and.w	r2, r6, #15
 801815c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018164:	ec51 0b18 	vmov	r0, r1, d8
 8018168:	f7e8 fa46 	bl	80005f8 <__aeabi_dmul>
 801816c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018170:	1136      	asrs	r6, r6, #4
 8018172:	2300      	movs	r3, #0
 8018174:	2502      	movs	r5, #2
 8018176:	2e00      	cmp	r6, #0
 8018178:	d17e      	bne.n	8018278 <_dtoa_r+0x4d8>
 801817a:	2b00      	cmp	r3, #0
 801817c:	d1d0      	bne.n	8018120 <_dtoa_r+0x380>
 801817e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018180:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018184:	2b00      	cmp	r3, #0
 8018186:	f000 8084 	beq.w	8018292 <_dtoa_r+0x4f2>
 801818a:	4b96      	ldr	r3, [pc, #600]	; (80183e4 <_dtoa_r+0x644>)
 801818c:	2200      	movs	r2, #0
 801818e:	4640      	mov	r0, r8
 8018190:	4649      	mov	r1, r9
 8018192:	f7e8 fca3 	bl	8000adc <__aeabi_dcmplt>
 8018196:	2800      	cmp	r0, #0
 8018198:	d07b      	beq.n	8018292 <_dtoa_r+0x4f2>
 801819a:	9b04      	ldr	r3, [sp, #16]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d078      	beq.n	8018292 <_dtoa_r+0x4f2>
 80181a0:	9b01      	ldr	r3, [sp, #4]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	dd39      	ble.n	801821a <_dtoa_r+0x47a>
 80181a6:	4b90      	ldr	r3, [pc, #576]	; (80183e8 <_dtoa_r+0x648>)
 80181a8:	2200      	movs	r2, #0
 80181aa:	4640      	mov	r0, r8
 80181ac:	4649      	mov	r1, r9
 80181ae:	f7e8 fa23 	bl	80005f8 <__aeabi_dmul>
 80181b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181b6:	9e01      	ldr	r6, [sp, #4]
 80181b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80181bc:	3501      	adds	r5, #1
 80181be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80181c2:	4628      	mov	r0, r5
 80181c4:	f7e8 f9ae 	bl	8000524 <__aeabi_i2d>
 80181c8:	4642      	mov	r2, r8
 80181ca:	464b      	mov	r3, r9
 80181cc:	f7e8 fa14 	bl	80005f8 <__aeabi_dmul>
 80181d0:	4b86      	ldr	r3, [pc, #536]	; (80183ec <_dtoa_r+0x64c>)
 80181d2:	2200      	movs	r2, #0
 80181d4:	f7e8 f85a 	bl	800028c <__adddf3>
 80181d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80181dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181e0:	9303      	str	r3, [sp, #12]
 80181e2:	2e00      	cmp	r6, #0
 80181e4:	d158      	bne.n	8018298 <_dtoa_r+0x4f8>
 80181e6:	4b82      	ldr	r3, [pc, #520]	; (80183f0 <_dtoa_r+0x650>)
 80181e8:	2200      	movs	r2, #0
 80181ea:	4640      	mov	r0, r8
 80181ec:	4649      	mov	r1, r9
 80181ee:	f7e8 f84b 	bl	8000288 <__aeabi_dsub>
 80181f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80181f6:	4680      	mov	r8, r0
 80181f8:	4689      	mov	r9, r1
 80181fa:	f7e8 fc8d 	bl	8000b18 <__aeabi_dcmpgt>
 80181fe:	2800      	cmp	r0, #0
 8018200:	f040 8296 	bne.w	8018730 <_dtoa_r+0x990>
 8018204:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018208:	4640      	mov	r0, r8
 801820a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801820e:	4649      	mov	r1, r9
 8018210:	f7e8 fc64 	bl	8000adc <__aeabi_dcmplt>
 8018214:	2800      	cmp	r0, #0
 8018216:	f040 8289 	bne.w	801872c <_dtoa_r+0x98c>
 801821a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801821e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018220:	2b00      	cmp	r3, #0
 8018222:	f2c0 814e 	blt.w	80184c2 <_dtoa_r+0x722>
 8018226:	f1bb 0f0e 	cmp.w	fp, #14
 801822a:	f300 814a 	bgt.w	80184c2 <_dtoa_r+0x722>
 801822e:	4b6b      	ldr	r3, [pc, #428]	; (80183dc <_dtoa_r+0x63c>)
 8018230:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018234:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801823a:	2b00      	cmp	r3, #0
 801823c:	f280 80dc 	bge.w	80183f8 <_dtoa_r+0x658>
 8018240:	9b04      	ldr	r3, [sp, #16]
 8018242:	2b00      	cmp	r3, #0
 8018244:	f300 80d8 	bgt.w	80183f8 <_dtoa_r+0x658>
 8018248:	f040 826f 	bne.w	801872a <_dtoa_r+0x98a>
 801824c:	4b68      	ldr	r3, [pc, #416]	; (80183f0 <_dtoa_r+0x650>)
 801824e:	2200      	movs	r2, #0
 8018250:	4640      	mov	r0, r8
 8018252:	4649      	mov	r1, r9
 8018254:	f7e8 f9d0 	bl	80005f8 <__aeabi_dmul>
 8018258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801825c:	f7e8 fc52 	bl	8000b04 <__aeabi_dcmpge>
 8018260:	9e04      	ldr	r6, [sp, #16]
 8018262:	4637      	mov	r7, r6
 8018264:	2800      	cmp	r0, #0
 8018266:	f040 8245 	bne.w	80186f4 <_dtoa_r+0x954>
 801826a:	9d00      	ldr	r5, [sp, #0]
 801826c:	2331      	movs	r3, #49	; 0x31
 801826e:	f805 3b01 	strb.w	r3, [r5], #1
 8018272:	f10b 0b01 	add.w	fp, fp, #1
 8018276:	e241      	b.n	80186fc <_dtoa_r+0x95c>
 8018278:	07f2      	lsls	r2, r6, #31
 801827a:	d505      	bpl.n	8018288 <_dtoa_r+0x4e8>
 801827c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018280:	f7e8 f9ba 	bl	80005f8 <__aeabi_dmul>
 8018284:	3501      	adds	r5, #1
 8018286:	2301      	movs	r3, #1
 8018288:	1076      	asrs	r6, r6, #1
 801828a:	3708      	adds	r7, #8
 801828c:	e773      	b.n	8018176 <_dtoa_r+0x3d6>
 801828e:	2502      	movs	r5, #2
 8018290:	e775      	b.n	801817e <_dtoa_r+0x3de>
 8018292:	9e04      	ldr	r6, [sp, #16]
 8018294:	465f      	mov	r7, fp
 8018296:	e792      	b.n	80181be <_dtoa_r+0x41e>
 8018298:	9900      	ldr	r1, [sp, #0]
 801829a:	4b50      	ldr	r3, [pc, #320]	; (80183dc <_dtoa_r+0x63c>)
 801829c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80182a0:	4431      	add	r1, r6
 80182a2:	9102      	str	r1, [sp, #8]
 80182a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80182a6:	eeb0 9a47 	vmov.f32	s18, s14
 80182aa:	eef0 9a67 	vmov.f32	s19, s15
 80182ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80182b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80182b6:	2900      	cmp	r1, #0
 80182b8:	d044      	beq.n	8018344 <_dtoa_r+0x5a4>
 80182ba:	494e      	ldr	r1, [pc, #312]	; (80183f4 <_dtoa_r+0x654>)
 80182bc:	2000      	movs	r0, #0
 80182be:	f7e8 fac5 	bl	800084c <__aeabi_ddiv>
 80182c2:	ec53 2b19 	vmov	r2, r3, d9
 80182c6:	f7e7 ffdf 	bl	8000288 <__aeabi_dsub>
 80182ca:	9d00      	ldr	r5, [sp, #0]
 80182cc:	ec41 0b19 	vmov	d9, r0, r1
 80182d0:	4649      	mov	r1, r9
 80182d2:	4640      	mov	r0, r8
 80182d4:	f7e8 fc40 	bl	8000b58 <__aeabi_d2iz>
 80182d8:	4606      	mov	r6, r0
 80182da:	f7e8 f923 	bl	8000524 <__aeabi_i2d>
 80182de:	4602      	mov	r2, r0
 80182e0:	460b      	mov	r3, r1
 80182e2:	4640      	mov	r0, r8
 80182e4:	4649      	mov	r1, r9
 80182e6:	f7e7 ffcf 	bl	8000288 <__aeabi_dsub>
 80182ea:	3630      	adds	r6, #48	; 0x30
 80182ec:	f805 6b01 	strb.w	r6, [r5], #1
 80182f0:	ec53 2b19 	vmov	r2, r3, d9
 80182f4:	4680      	mov	r8, r0
 80182f6:	4689      	mov	r9, r1
 80182f8:	f7e8 fbf0 	bl	8000adc <__aeabi_dcmplt>
 80182fc:	2800      	cmp	r0, #0
 80182fe:	d164      	bne.n	80183ca <_dtoa_r+0x62a>
 8018300:	4642      	mov	r2, r8
 8018302:	464b      	mov	r3, r9
 8018304:	4937      	ldr	r1, [pc, #220]	; (80183e4 <_dtoa_r+0x644>)
 8018306:	2000      	movs	r0, #0
 8018308:	f7e7 ffbe 	bl	8000288 <__aeabi_dsub>
 801830c:	ec53 2b19 	vmov	r2, r3, d9
 8018310:	f7e8 fbe4 	bl	8000adc <__aeabi_dcmplt>
 8018314:	2800      	cmp	r0, #0
 8018316:	f040 80b6 	bne.w	8018486 <_dtoa_r+0x6e6>
 801831a:	9b02      	ldr	r3, [sp, #8]
 801831c:	429d      	cmp	r5, r3
 801831e:	f43f af7c 	beq.w	801821a <_dtoa_r+0x47a>
 8018322:	4b31      	ldr	r3, [pc, #196]	; (80183e8 <_dtoa_r+0x648>)
 8018324:	ec51 0b19 	vmov	r0, r1, d9
 8018328:	2200      	movs	r2, #0
 801832a:	f7e8 f965 	bl	80005f8 <__aeabi_dmul>
 801832e:	4b2e      	ldr	r3, [pc, #184]	; (80183e8 <_dtoa_r+0x648>)
 8018330:	ec41 0b19 	vmov	d9, r0, r1
 8018334:	2200      	movs	r2, #0
 8018336:	4640      	mov	r0, r8
 8018338:	4649      	mov	r1, r9
 801833a:	f7e8 f95d 	bl	80005f8 <__aeabi_dmul>
 801833e:	4680      	mov	r8, r0
 8018340:	4689      	mov	r9, r1
 8018342:	e7c5      	b.n	80182d0 <_dtoa_r+0x530>
 8018344:	ec51 0b17 	vmov	r0, r1, d7
 8018348:	f7e8 f956 	bl	80005f8 <__aeabi_dmul>
 801834c:	9b02      	ldr	r3, [sp, #8]
 801834e:	9d00      	ldr	r5, [sp, #0]
 8018350:	930f      	str	r3, [sp, #60]	; 0x3c
 8018352:	ec41 0b19 	vmov	d9, r0, r1
 8018356:	4649      	mov	r1, r9
 8018358:	4640      	mov	r0, r8
 801835a:	f7e8 fbfd 	bl	8000b58 <__aeabi_d2iz>
 801835e:	4606      	mov	r6, r0
 8018360:	f7e8 f8e0 	bl	8000524 <__aeabi_i2d>
 8018364:	3630      	adds	r6, #48	; 0x30
 8018366:	4602      	mov	r2, r0
 8018368:	460b      	mov	r3, r1
 801836a:	4640      	mov	r0, r8
 801836c:	4649      	mov	r1, r9
 801836e:	f7e7 ff8b 	bl	8000288 <__aeabi_dsub>
 8018372:	f805 6b01 	strb.w	r6, [r5], #1
 8018376:	9b02      	ldr	r3, [sp, #8]
 8018378:	429d      	cmp	r5, r3
 801837a:	4680      	mov	r8, r0
 801837c:	4689      	mov	r9, r1
 801837e:	f04f 0200 	mov.w	r2, #0
 8018382:	d124      	bne.n	80183ce <_dtoa_r+0x62e>
 8018384:	4b1b      	ldr	r3, [pc, #108]	; (80183f4 <_dtoa_r+0x654>)
 8018386:	ec51 0b19 	vmov	r0, r1, d9
 801838a:	f7e7 ff7f 	bl	800028c <__adddf3>
 801838e:	4602      	mov	r2, r0
 8018390:	460b      	mov	r3, r1
 8018392:	4640      	mov	r0, r8
 8018394:	4649      	mov	r1, r9
 8018396:	f7e8 fbbf 	bl	8000b18 <__aeabi_dcmpgt>
 801839a:	2800      	cmp	r0, #0
 801839c:	d173      	bne.n	8018486 <_dtoa_r+0x6e6>
 801839e:	ec53 2b19 	vmov	r2, r3, d9
 80183a2:	4914      	ldr	r1, [pc, #80]	; (80183f4 <_dtoa_r+0x654>)
 80183a4:	2000      	movs	r0, #0
 80183a6:	f7e7 ff6f 	bl	8000288 <__aeabi_dsub>
 80183aa:	4602      	mov	r2, r0
 80183ac:	460b      	mov	r3, r1
 80183ae:	4640      	mov	r0, r8
 80183b0:	4649      	mov	r1, r9
 80183b2:	f7e8 fb93 	bl	8000adc <__aeabi_dcmplt>
 80183b6:	2800      	cmp	r0, #0
 80183b8:	f43f af2f 	beq.w	801821a <_dtoa_r+0x47a>
 80183bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80183be:	1e6b      	subs	r3, r5, #1
 80183c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80183c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80183c6:	2b30      	cmp	r3, #48	; 0x30
 80183c8:	d0f8      	beq.n	80183bc <_dtoa_r+0x61c>
 80183ca:	46bb      	mov	fp, r7
 80183cc:	e04a      	b.n	8018464 <_dtoa_r+0x6c4>
 80183ce:	4b06      	ldr	r3, [pc, #24]	; (80183e8 <_dtoa_r+0x648>)
 80183d0:	f7e8 f912 	bl	80005f8 <__aeabi_dmul>
 80183d4:	4680      	mov	r8, r0
 80183d6:	4689      	mov	r9, r1
 80183d8:	e7bd      	b.n	8018356 <_dtoa_r+0x5b6>
 80183da:	bf00      	nop
 80183dc:	0801e520 	.word	0x0801e520
 80183e0:	0801e4f8 	.word	0x0801e4f8
 80183e4:	3ff00000 	.word	0x3ff00000
 80183e8:	40240000 	.word	0x40240000
 80183ec:	401c0000 	.word	0x401c0000
 80183f0:	40140000 	.word	0x40140000
 80183f4:	3fe00000 	.word	0x3fe00000
 80183f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80183fc:	9d00      	ldr	r5, [sp, #0]
 80183fe:	4642      	mov	r2, r8
 8018400:	464b      	mov	r3, r9
 8018402:	4630      	mov	r0, r6
 8018404:	4639      	mov	r1, r7
 8018406:	f7e8 fa21 	bl	800084c <__aeabi_ddiv>
 801840a:	f7e8 fba5 	bl	8000b58 <__aeabi_d2iz>
 801840e:	9001      	str	r0, [sp, #4]
 8018410:	f7e8 f888 	bl	8000524 <__aeabi_i2d>
 8018414:	4642      	mov	r2, r8
 8018416:	464b      	mov	r3, r9
 8018418:	f7e8 f8ee 	bl	80005f8 <__aeabi_dmul>
 801841c:	4602      	mov	r2, r0
 801841e:	460b      	mov	r3, r1
 8018420:	4630      	mov	r0, r6
 8018422:	4639      	mov	r1, r7
 8018424:	f7e7 ff30 	bl	8000288 <__aeabi_dsub>
 8018428:	9e01      	ldr	r6, [sp, #4]
 801842a:	9f04      	ldr	r7, [sp, #16]
 801842c:	3630      	adds	r6, #48	; 0x30
 801842e:	f805 6b01 	strb.w	r6, [r5], #1
 8018432:	9e00      	ldr	r6, [sp, #0]
 8018434:	1bae      	subs	r6, r5, r6
 8018436:	42b7      	cmp	r7, r6
 8018438:	4602      	mov	r2, r0
 801843a:	460b      	mov	r3, r1
 801843c:	d134      	bne.n	80184a8 <_dtoa_r+0x708>
 801843e:	f7e7 ff25 	bl	800028c <__adddf3>
 8018442:	4642      	mov	r2, r8
 8018444:	464b      	mov	r3, r9
 8018446:	4606      	mov	r6, r0
 8018448:	460f      	mov	r7, r1
 801844a:	f7e8 fb65 	bl	8000b18 <__aeabi_dcmpgt>
 801844e:	b9c8      	cbnz	r0, 8018484 <_dtoa_r+0x6e4>
 8018450:	4642      	mov	r2, r8
 8018452:	464b      	mov	r3, r9
 8018454:	4630      	mov	r0, r6
 8018456:	4639      	mov	r1, r7
 8018458:	f7e8 fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 801845c:	b110      	cbz	r0, 8018464 <_dtoa_r+0x6c4>
 801845e:	9b01      	ldr	r3, [sp, #4]
 8018460:	07db      	lsls	r3, r3, #31
 8018462:	d40f      	bmi.n	8018484 <_dtoa_r+0x6e4>
 8018464:	4651      	mov	r1, sl
 8018466:	4620      	mov	r0, r4
 8018468:	f000 fe82 	bl	8019170 <_Bfree>
 801846c:	2300      	movs	r3, #0
 801846e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018470:	702b      	strb	r3, [r5, #0]
 8018472:	f10b 0301 	add.w	r3, fp, #1
 8018476:	6013      	str	r3, [r2, #0]
 8018478:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801847a:	2b00      	cmp	r3, #0
 801847c:	f43f ace2 	beq.w	8017e44 <_dtoa_r+0xa4>
 8018480:	601d      	str	r5, [r3, #0]
 8018482:	e4df      	b.n	8017e44 <_dtoa_r+0xa4>
 8018484:	465f      	mov	r7, fp
 8018486:	462b      	mov	r3, r5
 8018488:	461d      	mov	r5, r3
 801848a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801848e:	2a39      	cmp	r2, #57	; 0x39
 8018490:	d106      	bne.n	80184a0 <_dtoa_r+0x700>
 8018492:	9a00      	ldr	r2, [sp, #0]
 8018494:	429a      	cmp	r2, r3
 8018496:	d1f7      	bne.n	8018488 <_dtoa_r+0x6e8>
 8018498:	9900      	ldr	r1, [sp, #0]
 801849a:	2230      	movs	r2, #48	; 0x30
 801849c:	3701      	adds	r7, #1
 801849e:	700a      	strb	r2, [r1, #0]
 80184a0:	781a      	ldrb	r2, [r3, #0]
 80184a2:	3201      	adds	r2, #1
 80184a4:	701a      	strb	r2, [r3, #0]
 80184a6:	e790      	b.n	80183ca <_dtoa_r+0x62a>
 80184a8:	4ba3      	ldr	r3, [pc, #652]	; (8018738 <_dtoa_r+0x998>)
 80184aa:	2200      	movs	r2, #0
 80184ac:	f7e8 f8a4 	bl	80005f8 <__aeabi_dmul>
 80184b0:	2200      	movs	r2, #0
 80184b2:	2300      	movs	r3, #0
 80184b4:	4606      	mov	r6, r0
 80184b6:	460f      	mov	r7, r1
 80184b8:	f7e8 fb06 	bl	8000ac8 <__aeabi_dcmpeq>
 80184bc:	2800      	cmp	r0, #0
 80184be:	d09e      	beq.n	80183fe <_dtoa_r+0x65e>
 80184c0:	e7d0      	b.n	8018464 <_dtoa_r+0x6c4>
 80184c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184c4:	2a00      	cmp	r2, #0
 80184c6:	f000 80ca 	beq.w	801865e <_dtoa_r+0x8be>
 80184ca:	9a07      	ldr	r2, [sp, #28]
 80184cc:	2a01      	cmp	r2, #1
 80184ce:	f300 80ad 	bgt.w	801862c <_dtoa_r+0x88c>
 80184d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80184d4:	2a00      	cmp	r2, #0
 80184d6:	f000 80a5 	beq.w	8018624 <_dtoa_r+0x884>
 80184da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80184de:	9e08      	ldr	r6, [sp, #32]
 80184e0:	9d05      	ldr	r5, [sp, #20]
 80184e2:	9a05      	ldr	r2, [sp, #20]
 80184e4:	441a      	add	r2, r3
 80184e6:	9205      	str	r2, [sp, #20]
 80184e8:	9a06      	ldr	r2, [sp, #24]
 80184ea:	2101      	movs	r1, #1
 80184ec:	441a      	add	r2, r3
 80184ee:	4620      	mov	r0, r4
 80184f0:	9206      	str	r2, [sp, #24]
 80184f2:	f000 ff3d 	bl	8019370 <__i2b>
 80184f6:	4607      	mov	r7, r0
 80184f8:	b165      	cbz	r5, 8018514 <_dtoa_r+0x774>
 80184fa:	9b06      	ldr	r3, [sp, #24]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	dd09      	ble.n	8018514 <_dtoa_r+0x774>
 8018500:	42ab      	cmp	r3, r5
 8018502:	9a05      	ldr	r2, [sp, #20]
 8018504:	bfa8      	it	ge
 8018506:	462b      	movge	r3, r5
 8018508:	1ad2      	subs	r2, r2, r3
 801850a:	9205      	str	r2, [sp, #20]
 801850c:	9a06      	ldr	r2, [sp, #24]
 801850e:	1aed      	subs	r5, r5, r3
 8018510:	1ad3      	subs	r3, r2, r3
 8018512:	9306      	str	r3, [sp, #24]
 8018514:	9b08      	ldr	r3, [sp, #32]
 8018516:	b1f3      	cbz	r3, 8018556 <_dtoa_r+0x7b6>
 8018518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801851a:	2b00      	cmp	r3, #0
 801851c:	f000 80a3 	beq.w	8018666 <_dtoa_r+0x8c6>
 8018520:	2e00      	cmp	r6, #0
 8018522:	dd10      	ble.n	8018546 <_dtoa_r+0x7a6>
 8018524:	4639      	mov	r1, r7
 8018526:	4632      	mov	r2, r6
 8018528:	4620      	mov	r0, r4
 801852a:	f000 ffe1 	bl	80194f0 <__pow5mult>
 801852e:	4652      	mov	r2, sl
 8018530:	4601      	mov	r1, r0
 8018532:	4607      	mov	r7, r0
 8018534:	4620      	mov	r0, r4
 8018536:	f000 ff31 	bl	801939c <__multiply>
 801853a:	4651      	mov	r1, sl
 801853c:	4680      	mov	r8, r0
 801853e:	4620      	mov	r0, r4
 8018540:	f000 fe16 	bl	8019170 <_Bfree>
 8018544:	46c2      	mov	sl, r8
 8018546:	9b08      	ldr	r3, [sp, #32]
 8018548:	1b9a      	subs	r2, r3, r6
 801854a:	d004      	beq.n	8018556 <_dtoa_r+0x7b6>
 801854c:	4651      	mov	r1, sl
 801854e:	4620      	mov	r0, r4
 8018550:	f000 ffce 	bl	80194f0 <__pow5mult>
 8018554:	4682      	mov	sl, r0
 8018556:	2101      	movs	r1, #1
 8018558:	4620      	mov	r0, r4
 801855a:	f000 ff09 	bl	8019370 <__i2b>
 801855e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018560:	2b00      	cmp	r3, #0
 8018562:	4606      	mov	r6, r0
 8018564:	f340 8081 	ble.w	801866a <_dtoa_r+0x8ca>
 8018568:	461a      	mov	r2, r3
 801856a:	4601      	mov	r1, r0
 801856c:	4620      	mov	r0, r4
 801856e:	f000 ffbf 	bl	80194f0 <__pow5mult>
 8018572:	9b07      	ldr	r3, [sp, #28]
 8018574:	2b01      	cmp	r3, #1
 8018576:	4606      	mov	r6, r0
 8018578:	dd7a      	ble.n	8018670 <_dtoa_r+0x8d0>
 801857a:	f04f 0800 	mov.w	r8, #0
 801857e:	6933      	ldr	r3, [r6, #16]
 8018580:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018584:	6918      	ldr	r0, [r3, #16]
 8018586:	f000 fea5 	bl	80192d4 <__hi0bits>
 801858a:	f1c0 0020 	rsb	r0, r0, #32
 801858e:	9b06      	ldr	r3, [sp, #24]
 8018590:	4418      	add	r0, r3
 8018592:	f010 001f 	ands.w	r0, r0, #31
 8018596:	f000 8094 	beq.w	80186c2 <_dtoa_r+0x922>
 801859a:	f1c0 0320 	rsb	r3, r0, #32
 801859e:	2b04      	cmp	r3, #4
 80185a0:	f340 8085 	ble.w	80186ae <_dtoa_r+0x90e>
 80185a4:	9b05      	ldr	r3, [sp, #20]
 80185a6:	f1c0 001c 	rsb	r0, r0, #28
 80185aa:	4403      	add	r3, r0
 80185ac:	9305      	str	r3, [sp, #20]
 80185ae:	9b06      	ldr	r3, [sp, #24]
 80185b0:	4403      	add	r3, r0
 80185b2:	4405      	add	r5, r0
 80185b4:	9306      	str	r3, [sp, #24]
 80185b6:	9b05      	ldr	r3, [sp, #20]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	dd05      	ble.n	80185c8 <_dtoa_r+0x828>
 80185bc:	4651      	mov	r1, sl
 80185be:	461a      	mov	r2, r3
 80185c0:	4620      	mov	r0, r4
 80185c2:	f000 ffef 	bl	80195a4 <__lshift>
 80185c6:	4682      	mov	sl, r0
 80185c8:	9b06      	ldr	r3, [sp, #24]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	dd05      	ble.n	80185da <_dtoa_r+0x83a>
 80185ce:	4631      	mov	r1, r6
 80185d0:	461a      	mov	r2, r3
 80185d2:	4620      	mov	r0, r4
 80185d4:	f000 ffe6 	bl	80195a4 <__lshift>
 80185d8:	4606      	mov	r6, r0
 80185da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d072      	beq.n	80186c6 <_dtoa_r+0x926>
 80185e0:	4631      	mov	r1, r6
 80185e2:	4650      	mov	r0, sl
 80185e4:	f001 f84a 	bl	801967c <__mcmp>
 80185e8:	2800      	cmp	r0, #0
 80185ea:	da6c      	bge.n	80186c6 <_dtoa_r+0x926>
 80185ec:	2300      	movs	r3, #0
 80185ee:	4651      	mov	r1, sl
 80185f0:	220a      	movs	r2, #10
 80185f2:	4620      	mov	r0, r4
 80185f4:	f000 fdde 	bl	80191b4 <__multadd>
 80185f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80185fe:	4682      	mov	sl, r0
 8018600:	2b00      	cmp	r3, #0
 8018602:	f000 81b0 	beq.w	8018966 <_dtoa_r+0xbc6>
 8018606:	2300      	movs	r3, #0
 8018608:	4639      	mov	r1, r7
 801860a:	220a      	movs	r2, #10
 801860c:	4620      	mov	r0, r4
 801860e:	f000 fdd1 	bl	80191b4 <__multadd>
 8018612:	9b01      	ldr	r3, [sp, #4]
 8018614:	2b00      	cmp	r3, #0
 8018616:	4607      	mov	r7, r0
 8018618:	f300 8096 	bgt.w	8018748 <_dtoa_r+0x9a8>
 801861c:	9b07      	ldr	r3, [sp, #28]
 801861e:	2b02      	cmp	r3, #2
 8018620:	dc59      	bgt.n	80186d6 <_dtoa_r+0x936>
 8018622:	e091      	b.n	8018748 <_dtoa_r+0x9a8>
 8018624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018626:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801862a:	e758      	b.n	80184de <_dtoa_r+0x73e>
 801862c:	9b04      	ldr	r3, [sp, #16]
 801862e:	1e5e      	subs	r6, r3, #1
 8018630:	9b08      	ldr	r3, [sp, #32]
 8018632:	42b3      	cmp	r3, r6
 8018634:	bfbf      	itttt	lt
 8018636:	9b08      	ldrlt	r3, [sp, #32]
 8018638:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801863a:	9608      	strlt	r6, [sp, #32]
 801863c:	1af3      	sublt	r3, r6, r3
 801863e:	bfb4      	ite	lt
 8018640:	18d2      	addlt	r2, r2, r3
 8018642:	1b9e      	subge	r6, r3, r6
 8018644:	9b04      	ldr	r3, [sp, #16]
 8018646:	bfbc      	itt	lt
 8018648:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801864a:	2600      	movlt	r6, #0
 801864c:	2b00      	cmp	r3, #0
 801864e:	bfb7      	itett	lt
 8018650:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8018654:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018658:	1a9d      	sublt	r5, r3, r2
 801865a:	2300      	movlt	r3, #0
 801865c:	e741      	b.n	80184e2 <_dtoa_r+0x742>
 801865e:	9e08      	ldr	r6, [sp, #32]
 8018660:	9d05      	ldr	r5, [sp, #20]
 8018662:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018664:	e748      	b.n	80184f8 <_dtoa_r+0x758>
 8018666:	9a08      	ldr	r2, [sp, #32]
 8018668:	e770      	b.n	801854c <_dtoa_r+0x7ac>
 801866a:	9b07      	ldr	r3, [sp, #28]
 801866c:	2b01      	cmp	r3, #1
 801866e:	dc19      	bgt.n	80186a4 <_dtoa_r+0x904>
 8018670:	9b02      	ldr	r3, [sp, #8]
 8018672:	b9bb      	cbnz	r3, 80186a4 <_dtoa_r+0x904>
 8018674:	9b03      	ldr	r3, [sp, #12]
 8018676:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801867a:	b99b      	cbnz	r3, 80186a4 <_dtoa_r+0x904>
 801867c:	9b03      	ldr	r3, [sp, #12]
 801867e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018682:	0d1b      	lsrs	r3, r3, #20
 8018684:	051b      	lsls	r3, r3, #20
 8018686:	b183      	cbz	r3, 80186aa <_dtoa_r+0x90a>
 8018688:	9b05      	ldr	r3, [sp, #20]
 801868a:	3301      	adds	r3, #1
 801868c:	9305      	str	r3, [sp, #20]
 801868e:	9b06      	ldr	r3, [sp, #24]
 8018690:	3301      	adds	r3, #1
 8018692:	9306      	str	r3, [sp, #24]
 8018694:	f04f 0801 	mov.w	r8, #1
 8018698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801869a:	2b00      	cmp	r3, #0
 801869c:	f47f af6f 	bne.w	801857e <_dtoa_r+0x7de>
 80186a0:	2001      	movs	r0, #1
 80186a2:	e774      	b.n	801858e <_dtoa_r+0x7ee>
 80186a4:	f04f 0800 	mov.w	r8, #0
 80186a8:	e7f6      	b.n	8018698 <_dtoa_r+0x8f8>
 80186aa:	4698      	mov	r8, r3
 80186ac:	e7f4      	b.n	8018698 <_dtoa_r+0x8f8>
 80186ae:	d082      	beq.n	80185b6 <_dtoa_r+0x816>
 80186b0:	9a05      	ldr	r2, [sp, #20]
 80186b2:	331c      	adds	r3, #28
 80186b4:	441a      	add	r2, r3
 80186b6:	9205      	str	r2, [sp, #20]
 80186b8:	9a06      	ldr	r2, [sp, #24]
 80186ba:	441a      	add	r2, r3
 80186bc:	441d      	add	r5, r3
 80186be:	9206      	str	r2, [sp, #24]
 80186c0:	e779      	b.n	80185b6 <_dtoa_r+0x816>
 80186c2:	4603      	mov	r3, r0
 80186c4:	e7f4      	b.n	80186b0 <_dtoa_r+0x910>
 80186c6:	9b04      	ldr	r3, [sp, #16]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	dc37      	bgt.n	801873c <_dtoa_r+0x99c>
 80186cc:	9b07      	ldr	r3, [sp, #28]
 80186ce:	2b02      	cmp	r3, #2
 80186d0:	dd34      	ble.n	801873c <_dtoa_r+0x99c>
 80186d2:	9b04      	ldr	r3, [sp, #16]
 80186d4:	9301      	str	r3, [sp, #4]
 80186d6:	9b01      	ldr	r3, [sp, #4]
 80186d8:	b963      	cbnz	r3, 80186f4 <_dtoa_r+0x954>
 80186da:	4631      	mov	r1, r6
 80186dc:	2205      	movs	r2, #5
 80186de:	4620      	mov	r0, r4
 80186e0:	f000 fd68 	bl	80191b4 <__multadd>
 80186e4:	4601      	mov	r1, r0
 80186e6:	4606      	mov	r6, r0
 80186e8:	4650      	mov	r0, sl
 80186ea:	f000 ffc7 	bl	801967c <__mcmp>
 80186ee:	2800      	cmp	r0, #0
 80186f0:	f73f adbb 	bgt.w	801826a <_dtoa_r+0x4ca>
 80186f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186f6:	9d00      	ldr	r5, [sp, #0]
 80186f8:	ea6f 0b03 	mvn.w	fp, r3
 80186fc:	f04f 0800 	mov.w	r8, #0
 8018700:	4631      	mov	r1, r6
 8018702:	4620      	mov	r0, r4
 8018704:	f000 fd34 	bl	8019170 <_Bfree>
 8018708:	2f00      	cmp	r7, #0
 801870a:	f43f aeab 	beq.w	8018464 <_dtoa_r+0x6c4>
 801870e:	f1b8 0f00 	cmp.w	r8, #0
 8018712:	d005      	beq.n	8018720 <_dtoa_r+0x980>
 8018714:	45b8      	cmp	r8, r7
 8018716:	d003      	beq.n	8018720 <_dtoa_r+0x980>
 8018718:	4641      	mov	r1, r8
 801871a:	4620      	mov	r0, r4
 801871c:	f000 fd28 	bl	8019170 <_Bfree>
 8018720:	4639      	mov	r1, r7
 8018722:	4620      	mov	r0, r4
 8018724:	f000 fd24 	bl	8019170 <_Bfree>
 8018728:	e69c      	b.n	8018464 <_dtoa_r+0x6c4>
 801872a:	2600      	movs	r6, #0
 801872c:	4637      	mov	r7, r6
 801872e:	e7e1      	b.n	80186f4 <_dtoa_r+0x954>
 8018730:	46bb      	mov	fp, r7
 8018732:	4637      	mov	r7, r6
 8018734:	e599      	b.n	801826a <_dtoa_r+0x4ca>
 8018736:	bf00      	nop
 8018738:	40240000 	.word	0x40240000
 801873c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801873e:	2b00      	cmp	r3, #0
 8018740:	f000 80c8 	beq.w	80188d4 <_dtoa_r+0xb34>
 8018744:	9b04      	ldr	r3, [sp, #16]
 8018746:	9301      	str	r3, [sp, #4]
 8018748:	2d00      	cmp	r5, #0
 801874a:	dd05      	ble.n	8018758 <_dtoa_r+0x9b8>
 801874c:	4639      	mov	r1, r7
 801874e:	462a      	mov	r2, r5
 8018750:	4620      	mov	r0, r4
 8018752:	f000 ff27 	bl	80195a4 <__lshift>
 8018756:	4607      	mov	r7, r0
 8018758:	f1b8 0f00 	cmp.w	r8, #0
 801875c:	d05b      	beq.n	8018816 <_dtoa_r+0xa76>
 801875e:	6879      	ldr	r1, [r7, #4]
 8018760:	4620      	mov	r0, r4
 8018762:	f000 fcc5 	bl	80190f0 <_Balloc>
 8018766:	4605      	mov	r5, r0
 8018768:	b928      	cbnz	r0, 8018776 <_dtoa_r+0x9d6>
 801876a:	4b83      	ldr	r3, [pc, #524]	; (8018978 <_dtoa_r+0xbd8>)
 801876c:	4602      	mov	r2, r0
 801876e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018772:	f7ff bb2e 	b.w	8017dd2 <_dtoa_r+0x32>
 8018776:	693a      	ldr	r2, [r7, #16]
 8018778:	3202      	adds	r2, #2
 801877a:	0092      	lsls	r2, r2, #2
 801877c:	f107 010c 	add.w	r1, r7, #12
 8018780:	300c      	adds	r0, #12
 8018782:	f7ff fa4a 	bl	8017c1a <memcpy>
 8018786:	2201      	movs	r2, #1
 8018788:	4629      	mov	r1, r5
 801878a:	4620      	mov	r0, r4
 801878c:	f000 ff0a 	bl	80195a4 <__lshift>
 8018790:	9b00      	ldr	r3, [sp, #0]
 8018792:	3301      	adds	r3, #1
 8018794:	9304      	str	r3, [sp, #16]
 8018796:	e9dd 2300 	ldrd	r2, r3, [sp]
 801879a:	4413      	add	r3, r2
 801879c:	9308      	str	r3, [sp, #32]
 801879e:	9b02      	ldr	r3, [sp, #8]
 80187a0:	f003 0301 	and.w	r3, r3, #1
 80187a4:	46b8      	mov	r8, r7
 80187a6:	9306      	str	r3, [sp, #24]
 80187a8:	4607      	mov	r7, r0
 80187aa:	9b04      	ldr	r3, [sp, #16]
 80187ac:	4631      	mov	r1, r6
 80187ae:	3b01      	subs	r3, #1
 80187b0:	4650      	mov	r0, sl
 80187b2:	9301      	str	r3, [sp, #4]
 80187b4:	f7ff fa6c 	bl	8017c90 <quorem>
 80187b8:	4641      	mov	r1, r8
 80187ba:	9002      	str	r0, [sp, #8]
 80187bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80187c0:	4650      	mov	r0, sl
 80187c2:	f000 ff5b 	bl	801967c <__mcmp>
 80187c6:	463a      	mov	r2, r7
 80187c8:	9005      	str	r0, [sp, #20]
 80187ca:	4631      	mov	r1, r6
 80187cc:	4620      	mov	r0, r4
 80187ce:	f000 ff71 	bl	80196b4 <__mdiff>
 80187d2:	68c2      	ldr	r2, [r0, #12]
 80187d4:	4605      	mov	r5, r0
 80187d6:	bb02      	cbnz	r2, 801881a <_dtoa_r+0xa7a>
 80187d8:	4601      	mov	r1, r0
 80187da:	4650      	mov	r0, sl
 80187dc:	f000 ff4e 	bl	801967c <__mcmp>
 80187e0:	4602      	mov	r2, r0
 80187e2:	4629      	mov	r1, r5
 80187e4:	4620      	mov	r0, r4
 80187e6:	9209      	str	r2, [sp, #36]	; 0x24
 80187e8:	f000 fcc2 	bl	8019170 <_Bfree>
 80187ec:	9b07      	ldr	r3, [sp, #28]
 80187ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187f0:	9d04      	ldr	r5, [sp, #16]
 80187f2:	ea43 0102 	orr.w	r1, r3, r2
 80187f6:	9b06      	ldr	r3, [sp, #24]
 80187f8:	4319      	orrs	r1, r3
 80187fa:	d110      	bne.n	801881e <_dtoa_r+0xa7e>
 80187fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018800:	d029      	beq.n	8018856 <_dtoa_r+0xab6>
 8018802:	9b05      	ldr	r3, [sp, #20]
 8018804:	2b00      	cmp	r3, #0
 8018806:	dd02      	ble.n	801880e <_dtoa_r+0xa6e>
 8018808:	9b02      	ldr	r3, [sp, #8]
 801880a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801880e:	9b01      	ldr	r3, [sp, #4]
 8018810:	f883 9000 	strb.w	r9, [r3]
 8018814:	e774      	b.n	8018700 <_dtoa_r+0x960>
 8018816:	4638      	mov	r0, r7
 8018818:	e7ba      	b.n	8018790 <_dtoa_r+0x9f0>
 801881a:	2201      	movs	r2, #1
 801881c:	e7e1      	b.n	80187e2 <_dtoa_r+0xa42>
 801881e:	9b05      	ldr	r3, [sp, #20]
 8018820:	2b00      	cmp	r3, #0
 8018822:	db04      	blt.n	801882e <_dtoa_r+0xa8e>
 8018824:	9907      	ldr	r1, [sp, #28]
 8018826:	430b      	orrs	r3, r1
 8018828:	9906      	ldr	r1, [sp, #24]
 801882a:	430b      	orrs	r3, r1
 801882c:	d120      	bne.n	8018870 <_dtoa_r+0xad0>
 801882e:	2a00      	cmp	r2, #0
 8018830:	dded      	ble.n	801880e <_dtoa_r+0xa6e>
 8018832:	4651      	mov	r1, sl
 8018834:	2201      	movs	r2, #1
 8018836:	4620      	mov	r0, r4
 8018838:	f000 feb4 	bl	80195a4 <__lshift>
 801883c:	4631      	mov	r1, r6
 801883e:	4682      	mov	sl, r0
 8018840:	f000 ff1c 	bl	801967c <__mcmp>
 8018844:	2800      	cmp	r0, #0
 8018846:	dc03      	bgt.n	8018850 <_dtoa_r+0xab0>
 8018848:	d1e1      	bne.n	801880e <_dtoa_r+0xa6e>
 801884a:	f019 0f01 	tst.w	r9, #1
 801884e:	d0de      	beq.n	801880e <_dtoa_r+0xa6e>
 8018850:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018854:	d1d8      	bne.n	8018808 <_dtoa_r+0xa68>
 8018856:	9a01      	ldr	r2, [sp, #4]
 8018858:	2339      	movs	r3, #57	; 0x39
 801885a:	7013      	strb	r3, [r2, #0]
 801885c:	462b      	mov	r3, r5
 801885e:	461d      	mov	r5, r3
 8018860:	3b01      	subs	r3, #1
 8018862:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018866:	2a39      	cmp	r2, #57	; 0x39
 8018868:	d06c      	beq.n	8018944 <_dtoa_r+0xba4>
 801886a:	3201      	adds	r2, #1
 801886c:	701a      	strb	r2, [r3, #0]
 801886e:	e747      	b.n	8018700 <_dtoa_r+0x960>
 8018870:	2a00      	cmp	r2, #0
 8018872:	dd07      	ble.n	8018884 <_dtoa_r+0xae4>
 8018874:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018878:	d0ed      	beq.n	8018856 <_dtoa_r+0xab6>
 801887a:	9a01      	ldr	r2, [sp, #4]
 801887c:	f109 0301 	add.w	r3, r9, #1
 8018880:	7013      	strb	r3, [r2, #0]
 8018882:	e73d      	b.n	8018700 <_dtoa_r+0x960>
 8018884:	9b04      	ldr	r3, [sp, #16]
 8018886:	9a08      	ldr	r2, [sp, #32]
 8018888:	f803 9c01 	strb.w	r9, [r3, #-1]
 801888c:	4293      	cmp	r3, r2
 801888e:	d043      	beq.n	8018918 <_dtoa_r+0xb78>
 8018890:	4651      	mov	r1, sl
 8018892:	2300      	movs	r3, #0
 8018894:	220a      	movs	r2, #10
 8018896:	4620      	mov	r0, r4
 8018898:	f000 fc8c 	bl	80191b4 <__multadd>
 801889c:	45b8      	cmp	r8, r7
 801889e:	4682      	mov	sl, r0
 80188a0:	f04f 0300 	mov.w	r3, #0
 80188a4:	f04f 020a 	mov.w	r2, #10
 80188a8:	4641      	mov	r1, r8
 80188aa:	4620      	mov	r0, r4
 80188ac:	d107      	bne.n	80188be <_dtoa_r+0xb1e>
 80188ae:	f000 fc81 	bl	80191b4 <__multadd>
 80188b2:	4680      	mov	r8, r0
 80188b4:	4607      	mov	r7, r0
 80188b6:	9b04      	ldr	r3, [sp, #16]
 80188b8:	3301      	adds	r3, #1
 80188ba:	9304      	str	r3, [sp, #16]
 80188bc:	e775      	b.n	80187aa <_dtoa_r+0xa0a>
 80188be:	f000 fc79 	bl	80191b4 <__multadd>
 80188c2:	4639      	mov	r1, r7
 80188c4:	4680      	mov	r8, r0
 80188c6:	2300      	movs	r3, #0
 80188c8:	220a      	movs	r2, #10
 80188ca:	4620      	mov	r0, r4
 80188cc:	f000 fc72 	bl	80191b4 <__multadd>
 80188d0:	4607      	mov	r7, r0
 80188d2:	e7f0      	b.n	80188b6 <_dtoa_r+0xb16>
 80188d4:	9b04      	ldr	r3, [sp, #16]
 80188d6:	9301      	str	r3, [sp, #4]
 80188d8:	9d00      	ldr	r5, [sp, #0]
 80188da:	4631      	mov	r1, r6
 80188dc:	4650      	mov	r0, sl
 80188de:	f7ff f9d7 	bl	8017c90 <quorem>
 80188e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80188e6:	9b00      	ldr	r3, [sp, #0]
 80188e8:	f805 9b01 	strb.w	r9, [r5], #1
 80188ec:	1aea      	subs	r2, r5, r3
 80188ee:	9b01      	ldr	r3, [sp, #4]
 80188f0:	4293      	cmp	r3, r2
 80188f2:	dd07      	ble.n	8018904 <_dtoa_r+0xb64>
 80188f4:	4651      	mov	r1, sl
 80188f6:	2300      	movs	r3, #0
 80188f8:	220a      	movs	r2, #10
 80188fa:	4620      	mov	r0, r4
 80188fc:	f000 fc5a 	bl	80191b4 <__multadd>
 8018900:	4682      	mov	sl, r0
 8018902:	e7ea      	b.n	80188da <_dtoa_r+0xb3a>
 8018904:	9b01      	ldr	r3, [sp, #4]
 8018906:	2b00      	cmp	r3, #0
 8018908:	bfc8      	it	gt
 801890a:	461d      	movgt	r5, r3
 801890c:	9b00      	ldr	r3, [sp, #0]
 801890e:	bfd8      	it	le
 8018910:	2501      	movle	r5, #1
 8018912:	441d      	add	r5, r3
 8018914:	f04f 0800 	mov.w	r8, #0
 8018918:	4651      	mov	r1, sl
 801891a:	2201      	movs	r2, #1
 801891c:	4620      	mov	r0, r4
 801891e:	f000 fe41 	bl	80195a4 <__lshift>
 8018922:	4631      	mov	r1, r6
 8018924:	4682      	mov	sl, r0
 8018926:	f000 fea9 	bl	801967c <__mcmp>
 801892a:	2800      	cmp	r0, #0
 801892c:	dc96      	bgt.n	801885c <_dtoa_r+0xabc>
 801892e:	d102      	bne.n	8018936 <_dtoa_r+0xb96>
 8018930:	f019 0f01 	tst.w	r9, #1
 8018934:	d192      	bne.n	801885c <_dtoa_r+0xabc>
 8018936:	462b      	mov	r3, r5
 8018938:	461d      	mov	r5, r3
 801893a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801893e:	2a30      	cmp	r2, #48	; 0x30
 8018940:	d0fa      	beq.n	8018938 <_dtoa_r+0xb98>
 8018942:	e6dd      	b.n	8018700 <_dtoa_r+0x960>
 8018944:	9a00      	ldr	r2, [sp, #0]
 8018946:	429a      	cmp	r2, r3
 8018948:	d189      	bne.n	801885e <_dtoa_r+0xabe>
 801894a:	f10b 0b01 	add.w	fp, fp, #1
 801894e:	2331      	movs	r3, #49	; 0x31
 8018950:	e796      	b.n	8018880 <_dtoa_r+0xae0>
 8018952:	4b0a      	ldr	r3, [pc, #40]	; (801897c <_dtoa_r+0xbdc>)
 8018954:	f7ff ba99 	b.w	8017e8a <_dtoa_r+0xea>
 8018958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801895a:	2b00      	cmp	r3, #0
 801895c:	f47f aa6d 	bne.w	8017e3a <_dtoa_r+0x9a>
 8018960:	4b07      	ldr	r3, [pc, #28]	; (8018980 <_dtoa_r+0xbe0>)
 8018962:	f7ff ba92 	b.w	8017e8a <_dtoa_r+0xea>
 8018966:	9b01      	ldr	r3, [sp, #4]
 8018968:	2b00      	cmp	r3, #0
 801896a:	dcb5      	bgt.n	80188d8 <_dtoa_r+0xb38>
 801896c:	9b07      	ldr	r3, [sp, #28]
 801896e:	2b02      	cmp	r3, #2
 8018970:	f73f aeb1 	bgt.w	80186d6 <_dtoa_r+0x936>
 8018974:	e7b0      	b.n	80188d8 <_dtoa_r+0xb38>
 8018976:	bf00      	nop
 8018978:	0801e42c 	.word	0x0801e42c
 801897c:	0801e2e9 	.word	0x0801e2e9
 8018980:	0801e3c7 	.word	0x0801e3c7

08018984 <_free_r>:
 8018984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018986:	2900      	cmp	r1, #0
 8018988:	d044      	beq.n	8018a14 <_free_r+0x90>
 801898a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801898e:	9001      	str	r0, [sp, #4]
 8018990:	2b00      	cmp	r3, #0
 8018992:	f1a1 0404 	sub.w	r4, r1, #4
 8018996:	bfb8      	it	lt
 8018998:	18e4      	addlt	r4, r4, r3
 801899a:	f7fd f941 	bl	8015c20 <__malloc_lock>
 801899e:	4a1e      	ldr	r2, [pc, #120]	; (8018a18 <_free_r+0x94>)
 80189a0:	9801      	ldr	r0, [sp, #4]
 80189a2:	6813      	ldr	r3, [r2, #0]
 80189a4:	b933      	cbnz	r3, 80189b4 <_free_r+0x30>
 80189a6:	6063      	str	r3, [r4, #4]
 80189a8:	6014      	str	r4, [r2, #0]
 80189aa:	b003      	add	sp, #12
 80189ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80189b0:	f7fd b93c 	b.w	8015c2c <__malloc_unlock>
 80189b4:	42a3      	cmp	r3, r4
 80189b6:	d908      	bls.n	80189ca <_free_r+0x46>
 80189b8:	6825      	ldr	r5, [r4, #0]
 80189ba:	1961      	adds	r1, r4, r5
 80189bc:	428b      	cmp	r3, r1
 80189be:	bf01      	itttt	eq
 80189c0:	6819      	ldreq	r1, [r3, #0]
 80189c2:	685b      	ldreq	r3, [r3, #4]
 80189c4:	1949      	addeq	r1, r1, r5
 80189c6:	6021      	streq	r1, [r4, #0]
 80189c8:	e7ed      	b.n	80189a6 <_free_r+0x22>
 80189ca:	461a      	mov	r2, r3
 80189cc:	685b      	ldr	r3, [r3, #4]
 80189ce:	b10b      	cbz	r3, 80189d4 <_free_r+0x50>
 80189d0:	42a3      	cmp	r3, r4
 80189d2:	d9fa      	bls.n	80189ca <_free_r+0x46>
 80189d4:	6811      	ldr	r1, [r2, #0]
 80189d6:	1855      	adds	r5, r2, r1
 80189d8:	42a5      	cmp	r5, r4
 80189da:	d10b      	bne.n	80189f4 <_free_r+0x70>
 80189dc:	6824      	ldr	r4, [r4, #0]
 80189de:	4421      	add	r1, r4
 80189e0:	1854      	adds	r4, r2, r1
 80189e2:	42a3      	cmp	r3, r4
 80189e4:	6011      	str	r1, [r2, #0]
 80189e6:	d1e0      	bne.n	80189aa <_free_r+0x26>
 80189e8:	681c      	ldr	r4, [r3, #0]
 80189ea:	685b      	ldr	r3, [r3, #4]
 80189ec:	6053      	str	r3, [r2, #4]
 80189ee:	440c      	add	r4, r1
 80189f0:	6014      	str	r4, [r2, #0]
 80189f2:	e7da      	b.n	80189aa <_free_r+0x26>
 80189f4:	d902      	bls.n	80189fc <_free_r+0x78>
 80189f6:	230c      	movs	r3, #12
 80189f8:	6003      	str	r3, [r0, #0]
 80189fa:	e7d6      	b.n	80189aa <_free_r+0x26>
 80189fc:	6825      	ldr	r5, [r4, #0]
 80189fe:	1961      	adds	r1, r4, r5
 8018a00:	428b      	cmp	r3, r1
 8018a02:	bf04      	itt	eq
 8018a04:	6819      	ldreq	r1, [r3, #0]
 8018a06:	685b      	ldreq	r3, [r3, #4]
 8018a08:	6063      	str	r3, [r4, #4]
 8018a0a:	bf04      	itt	eq
 8018a0c:	1949      	addeq	r1, r1, r5
 8018a0e:	6021      	streq	r1, [r4, #0]
 8018a10:	6054      	str	r4, [r2, #4]
 8018a12:	e7ca      	b.n	80189aa <_free_r+0x26>
 8018a14:	b003      	add	sp, #12
 8018a16:	bd30      	pop	{r4, r5, pc}
 8018a18:	200025bc 	.word	0x200025bc

08018a1c <rshift>:
 8018a1c:	6903      	ldr	r3, [r0, #16]
 8018a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018a2a:	f100 0414 	add.w	r4, r0, #20
 8018a2e:	dd45      	ble.n	8018abc <rshift+0xa0>
 8018a30:	f011 011f 	ands.w	r1, r1, #31
 8018a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018a3c:	d10c      	bne.n	8018a58 <rshift+0x3c>
 8018a3e:	f100 0710 	add.w	r7, r0, #16
 8018a42:	4629      	mov	r1, r5
 8018a44:	42b1      	cmp	r1, r6
 8018a46:	d334      	bcc.n	8018ab2 <rshift+0x96>
 8018a48:	1a9b      	subs	r3, r3, r2
 8018a4a:	009b      	lsls	r3, r3, #2
 8018a4c:	1eea      	subs	r2, r5, #3
 8018a4e:	4296      	cmp	r6, r2
 8018a50:	bf38      	it	cc
 8018a52:	2300      	movcc	r3, #0
 8018a54:	4423      	add	r3, r4
 8018a56:	e015      	b.n	8018a84 <rshift+0x68>
 8018a58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018a5c:	f1c1 0820 	rsb	r8, r1, #32
 8018a60:	40cf      	lsrs	r7, r1
 8018a62:	f105 0e04 	add.w	lr, r5, #4
 8018a66:	46a1      	mov	r9, r4
 8018a68:	4576      	cmp	r6, lr
 8018a6a:	46f4      	mov	ip, lr
 8018a6c:	d815      	bhi.n	8018a9a <rshift+0x7e>
 8018a6e:	1a9a      	subs	r2, r3, r2
 8018a70:	0092      	lsls	r2, r2, #2
 8018a72:	3a04      	subs	r2, #4
 8018a74:	3501      	adds	r5, #1
 8018a76:	42ae      	cmp	r6, r5
 8018a78:	bf38      	it	cc
 8018a7a:	2200      	movcc	r2, #0
 8018a7c:	18a3      	adds	r3, r4, r2
 8018a7e:	50a7      	str	r7, [r4, r2]
 8018a80:	b107      	cbz	r7, 8018a84 <rshift+0x68>
 8018a82:	3304      	adds	r3, #4
 8018a84:	1b1a      	subs	r2, r3, r4
 8018a86:	42a3      	cmp	r3, r4
 8018a88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018a8c:	bf08      	it	eq
 8018a8e:	2300      	moveq	r3, #0
 8018a90:	6102      	str	r2, [r0, #16]
 8018a92:	bf08      	it	eq
 8018a94:	6143      	streq	r3, [r0, #20]
 8018a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a9a:	f8dc c000 	ldr.w	ip, [ip]
 8018a9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8018aa2:	ea4c 0707 	orr.w	r7, ip, r7
 8018aa6:	f849 7b04 	str.w	r7, [r9], #4
 8018aaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018aae:	40cf      	lsrs	r7, r1
 8018ab0:	e7da      	b.n	8018a68 <rshift+0x4c>
 8018ab2:	f851 cb04 	ldr.w	ip, [r1], #4
 8018ab6:	f847 cf04 	str.w	ip, [r7, #4]!
 8018aba:	e7c3      	b.n	8018a44 <rshift+0x28>
 8018abc:	4623      	mov	r3, r4
 8018abe:	e7e1      	b.n	8018a84 <rshift+0x68>

08018ac0 <__hexdig_fun>:
 8018ac0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018ac4:	2b09      	cmp	r3, #9
 8018ac6:	d802      	bhi.n	8018ace <__hexdig_fun+0xe>
 8018ac8:	3820      	subs	r0, #32
 8018aca:	b2c0      	uxtb	r0, r0
 8018acc:	4770      	bx	lr
 8018ace:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018ad2:	2b05      	cmp	r3, #5
 8018ad4:	d801      	bhi.n	8018ada <__hexdig_fun+0x1a>
 8018ad6:	3847      	subs	r0, #71	; 0x47
 8018ad8:	e7f7      	b.n	8018aca <__hexdig_fun+0xa>
 8018ada:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018ade:	2b05      	cmp	r3, #5
 8018ae0:	d801      	bhi.n	8018ae6 <__hexdig_fun+0x26>
 8018ae2:	3827      	subs	r0, #39	; 0x27
 8018ae4:	e7f1      	b.n	8018aca <__hexdig_fun+0xa>
 8018ae6:	2000      	movs	r0, #0
 8018ae8:	4770      	bx	lr
	...

08018aec <__gethex>:
 8018aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018af0:	4617      	mov	r7, r2
 8018af2:	680a      	ldr	r2, [r1, #0]
 8018af4:	b085      	sub	sp, #20
 8018af6:	f102 0b02 	add.w	fp, r2, #2
 8018afa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018afe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018b02:	4681      	mov	r9, r0
 8018b04:	468a      	mov	sl, r1
 8018b06:	9302      	str	r3, [sp, #8]
 8018b08:	32fe      	adds	r2, #254	; 0xfe
 8018b0a:	eb02 030b 	add.w	r3, r2, fp
 8018b0e:	46d8      	mov	r8, fp
 8018b10:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018b14:	9301      	str	r3, [sp, #4]
 8018b16:	2830      	cmp	r0, #48	; 0x30
 8018b18:	d0f7      	beq.n	8018b0a <__gethex+0x1e>
 8018b1a:	f7ff ffd1 	bl	8018ac0 <__hexdig_fun>
 8018b1e:	4604      	mov	r4, r0
 8018b20:	2800      	cmp	r0, #0
 8018b22:	d138      	bne.n	8018b96 <__gethex+0xaa>
 8018b24:	49a7      	ldr	r1, [pc, #668]	; (8018dc4 <__gethex+0x2d8>)
 8018b26:	2201      	movs	r2, #1
 8018b28:	4640      	mov	r0, r8
 8018b2a:	f7fe ff62 	bl	80179f2 <strncmp>
 8018b2e:	4606      	mov	r6, r0
 8018b30:	2800      	cmp	r0, #0
 8018b32:	d169      	bne.n	8018c08 <__gethex+0x11c>
 8018b34:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018b38:	465d      	mov	r5, fp
 8018b3a:	f7ff ffc1 	bl	8018ac0 <__hexdig_fun>
 8018b3e:	2800      	cmp	r0, #0
 8018b40:	d064      	beq.n	8018c0c <__gethex+0x120>
 8018b42:	465a      	mov	r2, fp
 8018b44:	7810      	ldrb	r0, [r2, #0]
 8018b46:	2830      	cmp	r0, #48	; 0x30
 8018b48:	4690      	mov	r8, r2
 8018b4a:	f102 0201 	add.w	r2, r2, #1
 8018b4e:	d0f9      	beq.n	8018b44 <__gethex+0x58>
 8018b50:	f7ff ffb6 	bl	8018ac0 <__hexdig_fun>
 8018b54:	2301      	movs	r3, #1
 8018b56:	fab0 f480 	clz	r4, r0
 8018b5a:	0964      	lsrs	r4, r4, #5
 8018b5c:	465e      	mov	r6, fp
 8018b5e:	9301      	str	r3, [sp, #4]
 8018b60:	4642      	mov	r2, r8
 8018b62:	4615      	mov	r5, r2
 8018b64:	3201      	adds	r2, #1
 8018b66:	7828      	ldrb	r0, [r5, #0]
 8018b68:	f7ff ffaa 	bl	8018ac0 <__hexdig_fun>
 8018b6c:	2800      	cmp	r0, #0
 8018b6e:	d1f8      	bne.n	8018b62 <__gethex+0x76>
 8018b70:	4994      	ldr	r1, [pc, #592]	; (8018dc4 <__gethex+0x2d8>)
 8018b72:	2201      	movs	r2, #1
 8018b74:	4628      	mov	r0, r5
 8018b76:	f7fe ff3c 	bl	80179f2 <strncmp>
 8018b7a:	b978      	cbnz	r0, 8018b9c <__gethex+0xb0>
 8018b7c:	b946      	cbnz	r6, 8018b90 <__gethex+0xa4>
 8018b7e:	1c6e      	adds	r6, r5, #1
 8018b80:	4632      	mov	r2, r6
 8018b82:	4615      	mov	r5, r2
 8018b84:	3201      	adds	r2, #1
 8018b86:	7828      	ldrb	r0, [r5, #0]
 8018b88:	f7ff ff9a 	bl	8018ac0 <__hexdig_fun>
 8018b8c:	2800      	cmp	r0, #0
 8018b8e:	d1f8      	bne.n	8018b82 <__gethex+0x96>
 8018b90:	1b73      	subs	r3, r6, r5
 8018b92:	009e      	lsls	r6, r3, #2
 8018b94:	e004      	b.n	8018ba0 <__gethex+0xb4>
 8018b96:	2400      	movs	r4, #0
 8018b98:	4626      	mov	r6, r4
 8018b9a:	e7e1      	b.n	8018b60 <__gethex+0x74>
 8018b9c:	2e00      	cmp	r6, #0
 8018b9e:	d1f7      	bne.n	8018b90 <__gethex+0xa4>
 8018ba0:	782b      	ldrb	r3, [r5, #0]
 8018ba2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018ba6:	2b50      	cmp	r3, #80	; 0x50
 8018ba8:	d13d      	bne.n	8018c26 <__gethex+0x13a>
 8018baa:	786b      	ldrb	r3, [r5, #1]
 8018bac:	2b2b      	cmp	r3, #43	; 0x2b
 8018bae:	d02f      	beq.n	8018c10 <__gethex+0x124>
 8018bb0:	2b2d      	cmp	r3, #45	; 0x2d
 8018bb2:	d031      	beq.n	8018c18 <__gethex+0x12c>
 8018bb4:	1c69      	adds	r1, r5, #1
 8018bb6:	f04f 0b00 	mov.w	fp, #0
 8018bba:	7808      	ldrb	r0, [r1, #0]
 8018bbc:	f7ff ff80 	bl	8018ac0 <__hexdig_fun>
 8018bc0:	1e42      	subs	r2, r0, #1
 8018bc2:	b2d2      	uxtb	r2, r2
 8018bc4:	2a18      	cmp	r2, #24
 8018bc6:	d82e      	bhi.n	8018c26 <__gethex+0x13a>
 8018bc8:	f1a0 0210 	sub.w	r2, r0, #16
 8018bcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018bd0:	f7ff ff76 	bl	8018ac0 <__hexdig_fun>
 8018bd4:	f100 3cff 	add.w	ip, r0, #4294967295
 8018bd8:	fa5f fc8c 	uxtb.w	ip, ip
 8018bdc:	f1bc 0f18 	cmp.w	ip, #24
 8018be0:	d91d      	bls.n	8018c1e <__gethex+0x132>
 8018be2:	f1bb 0f00 	cmp.w	fp, #0
 8018be6:	d000      	beq.n	8018bea <__gethex+0xfe>
 8018be8:	4252      	negs	r2, r2
 8018bea:	4416      	add	r6, r2
 8018bec:	f8ca 1000 	str.w	r1, [sl]
 8018bf0:	b1dc      	cbz	r4, 8018c2a <__gethex+0x13e>
 8018bf2:	9b01      	ldr	r3, [sp, #4]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	bf14      	ite	ne
 8018bf8:	f04f 0800 	movne.w	r8, #0
 8018bfc:	f04f 0806 	moveq.w	r8, #6
 8018c00:	4640      	mov	r0, r8
 8018c02:	b005      	add	sp, #20
 8018c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c08:	4645      	mov	r5, r8
 8018c0a:	4626      	mov	r6, r4
 8018c0c:	2401      	movs	r4, #1
 8018c0e:	e7c7      	b.n	8018ba0 <__gethex+0xb4>
 8018c10:	f04f 0b00 	mov.w	fp, #0
 8018c14:	1ca9      	adds	r1, r5, #2
 8018c16:	e7d0      	b.n	8018bba <__gethex+0xce>
 8018c18:	f04f 0b01 	mov.w	fp, #1
 8018c1c:	e7fa      	b.n	8018c14 <__gethex+0x128>
 8018c1e:	230a      	movs	r3, #10
 8018c20:	fb03 0002 	mla	r0, r3, r2, r0
 8018c24:	e7d0      	b.n	8018bc8 <__gethex+0xdc>
 8018c26:	4629      	mov	r1, r5
 8018c28:	e7e0      	b.n	8018bec <__gethex+0x100>
 8018c2a:	eba5 0308 	sub.w	r3, r5, r8
 8018c2e:	3b01      	subs	r3, #1
 8018c30:	4621      	mov	r1, r4
 8018c32:	2b07      	cmp	r3, #7
 8018c34:	dc0a      	bgt.n	8018c4c <__gethex+0x160>
 8018c36:	4648      	mov	r0, r9
 8018c38:	f000 fa5a 	bl	80190f0 <_Balloc>
 8018c3c:	4604      	mov	r4, r0
 8018c3e:	b940      	cbnz	r0, 8018c52 <__gethex+0x166>
 8018c40:	4b61      	ldr	r3, [pc, #388]	; (8018dc8 <__gethex+0x2dc>)
 8018c42:	4602      	mov	r2, r0
 8018c44:	21e4      	movs	r1, #228	; 0xe4
 8018c46:	4861      	ldr	r0, [pc, #388]	; (8018dcc <__gethex+0x2e0>)
 8018c48:	f7ff f804 	bl	8017c54 <__assert_func>
 8018c4c:	3101      	adds	r1, #1
 8018c4e:	105b      	asrs	r3, r3, #1
 8018c50:	e7ef      	b.n	8018c32 <__gethex+0x146>
 8018c52:	f100 0a14 	add.w	sl, r0, #20
 8018c56:	2300      	movs	r3, #0
 8018c58:	495a      	ldr	r1, [pc, #360]	; (8018dc4 <__gethex+0x2d8>)
 8018c5a:	f8cd a004 	str.w	sl, [sp, #4]
 8018c5e:	469b      	mov	fp, r3
 8018c60:	45a8      	cmp	r8, r5
 8018c62:	d342      	bcc.n	8018cea <__gethex+0x1fe>
 8018c64:	9801      	ldr	r0, [sp, #4]
 8018c66:	f840 bb04 	str.w	fp, [r0], #4
 8018c6a:	eba0 000a 	sub.w	r0, r0, sl
 8018c6e:	1080      	asrs	r0, r0, #2
 8018c70:	6120      	str	r0, [r4, #16]
 8018c72:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8018c76:	4658      	mov	r0, fp
 8018c78:	f000 fb2c 	bl	80192d4 <__hi0bits>
 8018c7c:	683d      	ldr	r5, [r7, #0]
 8018c7e:	eba8 0000 	sub.w	r0, r8, r0
 8018c82:	42a8      	cmp	r0, r5
 8018c84:	dd59      	ble.n	8018d3a <__gethex+0x24e>
 8018c86:	eba0 0805 	sub.w	r8, r0, r5
 8018c8a:	4641      	mov	r1, r8
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	f000 febb 	bl	8019a08 <__any_on>
 8018c92:	4683      	mov	fp, r0
 8018c94:	b1b8      	cbz	r0, 8018cc6 <__gethex+0x1da>
 8018c96:	f108 33ff 	add.w	r3, r8, #4294967295
 8018c9a:	1159      	asrs	r1, r3, #5
 8018c9c:	f003 021f 	and.w	r2, r3, #31
 8018ca0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018ca4:	f04f 0b01 	mov.w	fp, #1
 8018ca8:	fa0b f202 	lsl.w	r2, fp, r2
 8018cac:	420a      	tst	r2, r1
 8018cae:	d00a      	beq.n	8018cc6 <__gethex+0x1da>
 8018cb0:	455b      	cmp	r3, fp
 8018cb2:	dd06      	ble.n	8018cc2 <__gethex+0x1d6>
 8018cb4:	f1a8 0102 	sub.w	r1, r8, #2
 8018cb8:	4620      	mov	r0, r4
 8018cba:	f000 fea5 	bl	8019a08 <__any_on>
 8018cbe:	2800      	cmp	r0, #0
 8018cc0:	d138      	bne.n	8018d34 <__gethex+0x248>
 8018cc2:	f04f 0b02 	mov.w	fp, #2
 8018cc6:	4641      	mov	r1, r8
 8018cc8:	4620      	mov	r0, r4
 8018cca:	f7ff fea7 	bl	8018a1c <rshift>
 8018cce:	4446      	add	r6, r8
 8018cd0:	68bb      	ldr	r3, [r7, #8]
 8018cd2:	42b3      	cmp	r3, r6
 8018cd4:	da41      	bge.n	8018d5a <__gethex+0x26e>
 8018cd6:	4621      	mov	r1, r4
 8018cd8:	4648      	mov	r0, r9
 8018cda:	f000 fa49 	bl	8019170 <_Bfree>
 8018cde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	6013      	str	r3, [r2, #0]
 8018ce4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018ce8:	e78a      	b.n	8018c00 <__gethex+0x114>
 8018cea:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8018cee:	2a2e      	cmp	r2, #46	; 0x2e
 8018cf0:	d014      	beq.n	8018d1c <__gethex+0x230>
 8018cf2:	2b20      	cmp	r3, #32
 8018cf4:	d106      	bne.n	8018d04 <__gethex+0x218>
 8018cf6:	9b01      	ldr	r3, [sp, #4]
 8018cf8:	f843 bb04 	str.w	fp, [r3], #4
 8018cfc:	f04f 0b00 	mov.w	fp, #0
 8018d00:	9301      	str	r3, [sp, #4]
 8018d02:	465b      	mov	r3, fp
 8018d04:	7828      	ldrb	r0, [r5, #0]
 8018d06:	9303      	str	r3, [sp, #12]
 8018d08:	f7ff feda 	bl	8018ac0 <__hexdig_fun>
 8018d0c:	9b03      	ldr	r3, [sp, #12]
 8018d0e:	f000 000f 	and.w	r0, r0, #15
 8018d12:	4098      	lsls	r0, r3
 8018d14:	ea4b 0b00 	orr.w	fp, fp, r0
 8018d18:	3304      	adds	r3, #4
 8018d1a:	e7a1      	b.n	8018c60 <__gethex+0x174>
 8018d1c:	45a8      	cmp	r8, r5
 8018d1e:	d8e8      	bhi.n	8018cf2 <__gethex+0x206>
 8018d20:	2201      	movs	r2, #1
 8018d22:	4628      	mov	r0, r5
 8018d24:	9303      	str	r3, [sp, #12]
 8018d26:	f7fe fe64 	bl	80179f2 <strncmp>
 8018d2a:	4926      	ldr	r1, [pc, #152]	; (8018dc4 <__gethex+0x2d8>)
 8018d2c:	9b03      	ldr	r3, [sp, #12]
 8018d2e:	2800      	cmp	r0, #0
 8018d30:	d1df      	bne.n	8018cf2 <__gethex+0x206>
 8018d32:	e795      	b.n	8018c60 <__gethex+0x174>
 8018d34:	f04f 0b03 	mov.w	fp, #3
 8018d38:	e7c5      	b.n	8018cc6 <__gethex+0x1da>
 8018d3a:	da0b      	bge.n	8018d54 <__gethex+0x268>
 8018d3c:	eba5 0800 	sub.w	r8, r5, r0
 8018d40:	4621      	mov	r1, r4
 8018d42:	4642      	mov	r2, r8
 8018d44:	4648      	mov	r0, r9
 8018d46:	f000 fc2d 	bl	80195a4 <__lshift>
 8018d4a:	eba6 0608 	sub.w	r6, r6, r8
 8018d4e:	4604      	mov	r4, r0
 8018d50:	f100 0a14 	add.w	sl, r0, #20
 8018d54:	f04f 0b00 	mov.w	fp, #0
 8018d58:	e7ba      	b.n	8018cd0 <__gethex+0x1e4>
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	42b3      	cmp	r3, r6
 8018d5e:	dd73      	ble.n	8018e48 <__gethex+0x35c>
 8018d60:	1b9e      	subs	r6, r3, r6
 8018d62:	42b5      	cmp	r5, r6
 8018d64:	dc34      	bgt.n	8018dd0 <__gethex+0x2e4>
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	2b02      	cmp	r3, #2
 8018d6a:	d023      	beq.n	8018db4 <__gethex+0x2c8>
 8018d6c:	2b03      	cmp	r3, #3
 8018d6e:	d025      	beq.n	8018dbc <__gethex+0x2d0>
 8018d70:	2b01      	cmp	r3, #1
 8018d72:	d115      	bne.n	8018da0 <__gethex+0x2b4>
 8018d74:	42b5      	cmp	r5, r6
 8018d76:	d113      	bne.n	8018da0 <__gethex+0x2b4>
 8018d78:	2d01      	cmp	r5, #1
 8018d7a:	d10b      	bne.n	8018d94 <__gethex+0x2a8>
 8018d7c:	9a02      	ldr	r2, [sp, #8]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	6013      	str	r3, [r2, #0]
 8018d82:	2301      	movs	r3, #1
 8018d84:	6123      	str	r3, [r4, #16]
 8018d86:	f8ca 3000 	str.w	r3, [sl]
 8018d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d8c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8018d90:	601c      	str	r4, [r3, #0]
 8018d92:	e735      	b.n	8018c00 <__gethex+0x114>
 8018d94:	1e69      	subs	r1, r5, #1
 8018d96:	4620      	mov	r0, r4
 8018d98:	f000 fe36 	bl	8019a08 <__any_on>
 8018d9c:	2800      	cmp	r0, #0
 8018d9e:	d1ed      	bne.n	8018d7c <__gethex+0x290>
 8018da0:	4621      	mov	r1, r4
 8018da2:	4648      	mov	r0, r9
 8018da4:	f000 f9e4 	bl	8019170 <_Bfree>
 8018da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018daa:	2300      	movs	r3, #0
 8018dac:	6013      	str	r3, [r2, #0]
 8018dae:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018db2:	e725      	b.n	8018c00 <__gethex+0x114>
 8018db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d1f2      	bne.n	8018da0 <__gethex+0x2b4>
 8018dba:	e7df      	b.n	8018d7c <__gethex+0x290>
 8018dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d1dc      	bne.n	8018d7c <__gethex+0x290>
 8018dc2:	e7ed      	b.n	8018da0 <__gethex+0x2b4>
 8018dc4:	0801e184 	.word	0x0801e184
 8018dc8:	0801e42c 	.word	0x0801e42c
 8018dcc:	0801e43d 	.word	0x0801e43d
 8018dd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8018dd4:	f1bb 0f00 	cmp.w	fp, #0
 8018dd8:	d133      	bne.n	8018e42 <__gethex+0x356>
 8018dda:	f1b8 0f00 	cmp.w	r8, #0
 8018dde:	d004      	beq.n	8018dea <__gethex+0x2fe>
 8018de0:	4641      	mov	r1, r8
 8018de2:	4620      	mov	r0, r4
 8018de4:	f000 fe10 	bl	8019a08 <__any_on>
 8018de8:	4683      	mov	fp, r0
 8018dea:	ea4f 1268 	mov.w	r2, r8, asr #5
 8018dee:	2301      	movs	r3, #1
 8018df0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018df4:	f008 081f 	and.w	r8, r8, #31
 8018df8:	fa03 f308 	lsl.w	r3, r3, r8
 8018dfc:	4213      	tst	r3, r2
 8018dfe:	4631      	mov	r1, r6
 8018e00:	4620      	mov	r0, r4
 8018e02:	bf18      	it	ne
 8018e04:	f04b 0b02 	orrne.w	fp, fp, #2
 8018e08:	1bad      	subs	r5, r5, r6
 8018e0a:	f7ff fe07 	bl	8018a1c <rshift>
 8018e0e:	687e      	ldr	r6, [r7, #4]
 8018e10:	f04f 0802 	mov.w	r8, #2
 8018e14:	f1bb 0f00 	cmp.w	fp, #0
 8018e18:	d04a      	beq.n	8018eb0 <__gethex+0x3c4>
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	2b02      	cmp	r3, #2
 8018e1e:	d016      	beq.n	8018e4e <__gethex+0x362>
 8018e20:	2b03      	cmp	r3, #3
 8018e22:	d018      	beq.n	8018e56 <__gethex+0x36a>
 8018e24:	2b01      	cmp	r3, #1
 8018e26:	d109      	bne.n	8018e3c <__gethex+0x350>
 8018e28:	f01b 0f02 	tst.w	fp, #2
 8018e2c:	d006      	beq.n	8018e3c <__gethex+0x350>
 8018e2e:	f8da 3000 	ldr.w	r3, [sl]
 8018e32:	ea4b 0b03 	orr.w	fp, fp, r3
 8018e36:	f01b 0f01 	tst.w	fp, #1
 8018e3a:	d10f      	bne.n	8018e5c <__gethex+0x370>
 8018e3c:	f048 0810 	orr.w	r8, r8, #16
 8018e40:	e036      	b.n	8018eb0 <__gethex+0x3c4>
 8018e42:	f04f 0b01 	mov.w	fp, #1
 8018e46:	e7d0      	b.n	8018dea <__gethex+0x2fe>
 8018e48:	f04f 0801 	mov.w	r8, #1
 8018e4c:	e7e2      	b.n	8018e14 <__gethex+0x328>
 8018e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e50:	f1c3 0301 	rsb	r3, r3, #1
 8018e54:	930f      	str	r3, [sp, #60]	; 0x3c
 8018e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d0ef      	beq.n	8018e3c <__gethex+0x350>
 8018e5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018e60:	f104 0214 	add.w	r2, r4, #20
 8018e64:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8018e68:	9301      	str	r3, [sp, #4]
 8018e6a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8018e6e:	2300      	movs	r3, #0
 8018e70:	4694      	mov	ip, r2
 8018e72:	f852 1b04 	ldr.w	r1, [r2], #4
 8018e76:	f1b1 3fff 	cmp.w	r1, #4294967295
 8018e7a:	d01e      	beq.n	8018eba <__gethex+0x3ce>
 8018e7c:	3101      	adds	r1, #1
 8018e7e:	f8cc 1000 	str.w	r1, [ip]
 8018e82:	f1b8 0f02 	cmp.w	r8, #2
 8018e86:	f104 0214 	add.w	r2, r4, #20
 8018e8a:	d13d      	bne.n	8018f08 <__gethex+0x41c>
 8018e8c:	683b      	ldr	r3, [r7, #0]
 8018e8e:	3b01      	subs	r3, #1
 8018e90:	42ab      	cmp	r3, r5
 8018e92:	d10b      	bne.n	8018eac <__gethex+0x3c0>
 8018e94:	1169      	asrs	r1, r5, #5
 8018e96:	2301      	movs	r3, #1
 8018e98:	f005 051f 	and.w	r5, r5, #31
 8018e9c:	fa03 f505 	lsl.w	r5, r3, r5
 8018ea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ea4:	421d      	tst	r5, r3
 8018ea6:	bf18      	it	ne
 8018ea8:	f04f 0801 	movne.w	r8, #1
 8018eac:	f048 0820 	orr.w	r8, r8, #32
 8018eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018eb2:	601c      	str	r4, [r3, #0]
 8018eb4:	9b02      	ldr	r3, [sp, #8]
 8018eb6:	601e      	str	r6, [r3, #0]
 8018eb8:	e6a2      	b.n	8018c00 <__gethex+0x114>
 8018eba:	4290      	cmp	r0, r2
 8018ebc:	f842 3c04 	str.w	r3, [r2, #-4]
 8018ec0:	d8d6      	bhi.n	8018e70 <__gethex+0x384>
 8018ec2:	68a2      	ldr	r2, [r4, #8]
 8018ec4:	4593      	cmp	fp, r2
 8018ec6:	db17      	blt.n	8018ef8 <__gethex+0x40c>
 8018ec8:	6861      	ldr	r1, [r4, #4]
 8018eca:	4648      	mov	r0, r9
 8018ecc:	3101      	adds	r1, #1
 8018ece:	f000 f90f 	bl	80190f0 <_Balloc>
 8018ed2:	4682      	mov	sl, r0
 8018ed4:	b918      	cbnz	r0, 8018ede <__gethex+0x3f2>
 8018ed6:	4b1b      	ldr	r3, [pc, #108]	; (8018f44 <__gethex+0x458>)
 8018ed8:	4602      	mov	r2, r0
 8018eda:	2184      	movs	r1, #132	; 0x84
 8018edc:	e6b3      	b.n	8018c46 <__gethex+0x15a>
 8018ede:	6922      	ldr	r2, [r4, #16]
 8018ee0:	3202      	adds	r2, #2
 8018ee2:	f104 010c 	add.w	r1, r4, #12
 8018ee6:	0092      	lsls	r2, r2, #2
 8018ee8:	300c      	adds	r0, #12
 8018eea:	f7fe fe96 	bl	8017c1a <memcpy>
 8018eee:	4621      	mov	r1, r4
 8018ef0:	4648      	mov	r0, r9
 8018ef2:	f000 f93d 	bl	8019170 <_Bfree>
 8018ef6:	4654      	mov	r4, sl
 8018ef8:	6922      	ldr	r2, [r4, #16]
 8018efa:	1c51      	adds	r1, r2, #1
 8018efc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018f00:	6121      	str	r1, [r4, #16]
 8018f02:	2101      	movs	r1, #1
 8018f04:	6151      	str	r1, [r2, #20]
 8018f06:	e7bc      	b.n	8018e82 <__gethex+0x396>
 8018f08:	6921      	ldr	r1, [r4, #16]
 8018f0a:	4559      	cmp	r1, fp
 8018f0c:	dd0b      	ble.n	8018f26 <__gethex+0x43a>
 8018f0e:	2101      	movs	r1, #1
 8018f10:	4620      	mov	r0, r4
 8018f12:	f7ff fd83 	bl	8018a1c <rshift>
 8018f16:	68bb      	ldr	r3, [r7, #8]
 8018f18:	3601      	adds	r6, #1
 8018f1a:	42b3      	cmp	r3, r6
 8018f1c:	f6ff aedb 	blt.w	8018cd6 <__gethex+0x1ea>
 8018f20:	f04f 0801 	mov.w	r8, #1
 8018f24:	e7c2      	b.n	8018eac <__gethex+0x3c0>
 8018f26:	f015 051f 	ands.w	r5, r5, #31
 8018f2a:	d0f9      	beq.n	8018f20 <__gethex+0x434>
 8018f2c:	9b01      	ldr	r3, [sp, #4]
 8018f2e:	441a      	add	r2, r3
 8018f30:	f1c5 0520 	rsb	r5, r5, #32
 8018f34:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018f38:	f000 f9cc 	bl	80192d4 <__hi0bits>
 8018f3c:	42a8      	cmp	r0, r5
 8018f3e:	dbe6      	blt.n	8018f0e <__gethex+0x422>
 8018f40:	e7ee      	b.n	8018f20 <__gethex+0x434>
 8018f42:	bf00      	nop
 8018f44:	0801e42c 	.word	0x0801e42c

08018f48 <L_shift>:
 8018f48:	f1c2 0208 	rsb	r2, r2, #8
 8018f4c:	0092      	lsls	r2, r2, #2
 8018f4e:	b570      	push	{r4, r5, r6, lr}
 8018f50:	f1c2 0620 	rsb	r6, r2, #32
 8018f54:	6843      	ldr	r3, [r0, #4]
 8018f56:	6804      	ldr	r4, [r0, #0]
 8018f58:	fa03 f506 	lsl.w	r5, r3, r6
 8018f5c:	432c      	orrs	r4, r5
 8018f5e:	40d3      	lsrs	r3, r2
 8018f60:	6004      	str	r4, [r0, #0]
 8018f62:	f840 3f04 	str.w	r3, [r0, #4]!
 8018f66:	4288      	cmp	r0, r1
 8018f68:	d3f4      	bcc.n	8018f54 <L_shift+0xc>
 8018f6a:	bd70      	pop	{r4, r5, r6, pc}

08018f6c <__match>:
 8018f6c:	b530      	push	{r4, r5, lr}
 8018f6e:	6803      	ldr	r3, [r0, #0]
 8018f70:	3301      	adds	r3, #1
 8018f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f76:	b914      	cbnz	r4, 8018f7e <__match+0x12>
 8018f78:	6003      	str	r3, [r0, #0]
 8018f7a:	2001      	movs	r0, #1
 8018f7c:	bd30      	pop	{r4, r5, pc}
 8018f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018f86:	2d19      	cmp	r5, #25
 8018f88:	bf98      	it	ls
 8018f8a:	3220      	addls	r2, #32
 8018f8c:	42a2      	cmp	r2, r4
 8018f8e:	d0f0      	beq.n	8018f72 <__match+0x6>
 8018f90:	2000      	movs	r0, #0
 8018f92:	e7f3      	b.n	8018f7c <__match+0x10>

08018f94 <__hexnan>:
 8018f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f98:	680b      	ldr	r3, [r1, #0]
 8018f9a:	6801      	ldr	r1, [r0, #0]
 8018f9c:	115e      	asrs	r6, r3, #5
 8018f9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018fa2:	f013 031f 	ands.w	r3, r3, #31
 8018fa6:	b087      	sub	sp, #28
 8018fa8:	bf18      	it	ne
 8018faa:	3604      	addne	r6, #4
 8018fac:	2500      	movs	r5, #0
 8018fae:	1f37      	subs	r7, r6, #4
 8018fb0:	4682      	mov	sl, r0
 8018fb2:	4690      	mov	r8, r2
 8018fb4:	9301      	str	r3, [sp, #4]
 8018fb6:	f846 5c04 	str.w	r5, [r6, #-4]
 8018fba:	46b9      	mov	r9, r7
 8018fbc:	463c      	mov	r4, r7
 8018fbe:	9502      	str	r5, [sp, #8]
 8018fc0:	46ab      	mov	fp, r5
 8018fc2:	784a      	ldrb	r2, [r1, #1]
 8018fc4:	1c4b      	adds	r3, r1, #1
 8018fc6:	9303      	str	r3, [sp, #12]
 8018fc8:	b342      	cbz	r2, 801901c <__hexnan+0x88>
 8018fca:	4610      	mov	r0, r2
 8018fcc:	9105      	str	r1, [sp, #20]
 8018fce:	9204      	str	r2, [sp, #16]
 8018fd0:	f7ff fd76 	bl	8018ac0 <__hexdig_fun>
 8018fd4:	2800      	cmp	r0, #0
 8018fd6:	d14f      	bne.n	8019078 <__hexnan+0xe4>
 8018fd8:	9a04      	ldr	r2, [sp, #16]
 8018fda:	9905      	ldr	r1, [sp, #20]
 8018fdc:	2a20      	cmp	r2, #32
 8018fde:	d818      	bhi.n	8019012 <__hexnan+0x7e>
 8018fe0:	9b02      	ldr	r3, [sp, #8]
 8018fe2:	459b      	cmp	fp, r3
 8018fe4:	dd13      	ble.n	801900e <__hexnan+0x7a>
 8018fe6:	454c      	cmp	r4, r9
 8018fe8:	d206      	bcs.n	8018ff8 <__hexnan+0x64>
 8018fea:	2d07      	cmp	r5, #7
 8018fec:	dc04      	bgt.n	8018ff8 <__hexnan+0x64>
 8018fee:	462a      	mov	r2, r5
 8018ff0:	4649      	mov	r1, r9
 8018ff2:	4620      	mov	r0, r4
 8018ff4:	f7ff ffa8 	bl	8018f48 <L_shift>
 8018ff8:	4544      	cmp	r4, r8
 8018ffa:	d950      	bls.n	801909e <__hexnan+0x10a>
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	f1a4 0904 	sub.w	r9, r4, #4
 8019002:	f844 3c04 	str.w	r3, [r4, #-4]
 8019006:	f8cd b008 	str.w	fp, [sp, #8]
 801900a:	464c      	mov	r4, r9
 801900c:	461d      	mov	r5, r3
 801900e:	9903      	ldr	r1, [sp, #12]
 8019010:	e7d7      	b.n	8018fc2 <__hexnan+0x2e>
 8019012:	2a29      	cmp	r2, #41	; 0x29
 8019014:	d155      	bne.n	80190c2 <__hexnan+0x12e>
 8019016:	3102      	adds	r1, #2
 8019018:	f8ca 1000 	str.w	r1, [sl]
 801901c:	f1bb 0f00 	cmp.w	fp, #0
 8019020:	d04f      	beq.n	80190c2 <__hexnan+0x12e>
 8019022:	454c      	cmp	r4, r9
 8019024:	d206      	bcs.n	8019034 <__hexnan+0xa0>
 8019026:	2d07      	cmp	r5, #7
 8019028:	dc04      	bgt.n	8019034 <__hexnan+0xa0>
 801902a:	462a      	mov	r2, r5
 801902c:	4649      	mov	r1, r9
 801902e:	4620      	mov	r0, r4
 8019030:	f7ff ff8a 	bl	8018f48 <L_shift>
 8019034:	4544      	cmp	r4, r8
 8019036:	d934      	bls.n	80190a2 <__hexnan+0x10e>
 8019038:	f1a8 0204 	sub.w	r2, r8, #4
 801903c:	4623      	mov	r3, r4
 801903e:	f853 1b04 	ldr.w	r1, [r3], #4
 8019042:	f842 1f04 	str.w	r1, [r2, #4]!
 8019046:	429f      	cmp	r7, r3
 8019048:	d2f9      	bcs.n	801903e <__hexnan+0xaa>
 801904a:	1b3b      	subs	r3, r7, r4
 801904c:	f023 0303 	bic.w	r3, r3, #3
 8019050:	3304      	adds	r3, #4
 8019052:	3e03      	subs	r6, #3
 8019054:	3401      	adds	r4, #1
 8019056:	42a6      	cmp	r6, r4
 8019058:	bf38      	it	cc
 801905a:	2304      	movcc	r3, #4
 801905c:	4443      	add	r3, r8
 801905e:	2200      	movs	r2, #0
 8019060:	f843 2b04 	str.w	r2, [r3], #4
 8019064:	429f      	cmp	r7, r3
 8019066:	d2fb      	bcs.n	8019060 <__hexnan+0xcc>
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	b91b      	cbnz	r3, 8019074 <__hexnan+0xe0>
 801906c:	4547      	cmp	r7, r8
 801906e:	d126      	bne.n	80190be <__hexnan+0x12a>
 8019070:	2301      	movs	r3, #1
 8019072:	603b      	str	r3, [r7, #0]
 8019074:	2005      	movs	r0, #5
 8019076:	e025      	b.n	80190c4 <__hexnan+0x130>
 8019078:	3501      	adds	r5, #1
 801907a:	2d08      	cmp	r5, #8
 801907c:	f10b 0b01 	add.w	fp, fp, #1
 8019080:	dd06      	ble.n	8019090 <__hexnan+0xfc>
 8019082:	4544      	cmp	r4, r8
 8019084:	d9c3      	bls.n	801900e <__hexnan+0x7a>
 8019086:	2300      	movs	r3, #0
 8019088:	f844 3c04 	str.w	r3, [r4, #-4]
 801908c:	2501      	movs	r5, #1
 801908e:	3c04      	subs	r4, #4
 8019090:	6822      	ldr	r2, [r4, #0]
 8019092:	f000 000f 	and.w	r0, r0, #15
 8019096:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801909a:	6020      	str	r0, [r4, #0]
 801909c:	e7b7      	b.n	801900e <__hexnan+0x7a>
 801909e:	2508      	movs	r5, #8
 80190a0:	e7b5      	b.n	801900e <__hexnan+0x7a>
 80190a2:	9b01      	ldr	r3, [sp, #4]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d0df      	beq.n	8019068 <__hexnan+0xd4>
 80190a8:	f1c3 0320 	rsb	r3, r3, #32
 80190ac:	f04f 32ff 	mov.w	r2, #4294967295
 80190b0:	40da      	lsrs	r2, r3
 80190b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80190b6:	4013      	ands	r3, r2
 80190b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80190bc:	e7d4      	b.n	8019068 <__hexnan+0xd4>
 80190be:	3f04      	subs	r7, #4
 80190c0:	e7d2      	b.n	8019068 <__hexnan+0xd4>
 80190c2:	2004      	movs	r0, #4
 80190c4:	b007      	add	sp, #28
 80190c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190ca <__ascii_mbtowc>:
 80190ca:	b082      	sub	sp, #8
 80190cc:	b901      	cbnz	r1, 80190d0 <__ascii_mbtowc+0x6>
 80190ce:	a901      	add	r1, sp, #4
 80190d0:	b142      	cbz	r2, 80190e4 <__ascii_mbtowc+0x1a>
 80190d2:	b14b      	cbz	r3, 80190e8 <__ascii_mbtowc+0x1e>
 80190d4:	7813      	ldrb	r3, [r2, #0]
 80190d6:	600b      	str	r3, [r1, #0]
 80190d8:	7812      	ldrb	r2, [r2, #0]
 80190da:	1e10      	subs	r0, r2, #0
 80190dc:	bf18      	it	ne
 80190de:	2001      	movne	r0, #1
 80190e0:	b002      	add	sp, #8
 80190e2:	4770      	bx	lr
 80190e4:	4610      	mov	r0, r2
 80190e6:	e7fb      	b.n	80190e0 <__ascii_mbtowc+0x16>
 80190e8:	f06f 0001 	mvn.w	r0, #1
 80190ec:	e7f8      	b.n	80190e0 <__ascii_mbtowc+0x16>
	...

080190f0 <_Balloc>:
 80190f0:	b570      	push	{r4, r5, r6, lr}
 80190f2:	69c6      	ldr	r6, [r0, #28]
 80190f4:	4604      	mov	r4, r0
 80190f6:	460d      	mov	r5, r1
 80190f8:	b976      	cbnz	r6, 8019118 <_Balloc+0x28>
 80190fa:	2010      	movs	r0, #16
 80190fc:	f7fc fce0 	bl	8015ac0 <malloc>
 8019100:	4602      	mov	r2, r0
 8019102:	61e0      	str	r0, [r4, #28]
 8019104:	b920      	cbnz	r0, 8019110 <_Balloc+0x20>
 8019106:	4b18      	ldr	r3, [pc, #96]	; (8019168 <_Balloc+0x78>)
 8019108:	4818      	ldr	r0, [pc, #96]	; (801916c <_Balloc+0x7c>)
 801910a:	216b      	movs	r1, #107	; 0x6b
 801910c:	f7fe fda2 	bl	8017c54 <__assert_func>
 8019110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019114:	6006      	str	r6, [r0, #0]
 8019116:	60c6      	str	r6, [r0, #12]
 8019118:	69e6      	ldr	r6, [r4, #28]
 801911a:	68f3      	ldr	r3, [r6, #12]
 801911c:	b183      	cbz	r3, 8019140 <_Balloc+0x50>
 801911e:	69e3      	ldr	r3, [r4, #28]
 8019120:	68db      	ldr	r3, [r3, #12]
 8019122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019126:	b9b8      	cbnz	r0, 8019158 <_Balloc+0x68>
 8019128:	2101      	movs	r1, #1
 801912a:	fa01 f605 	lsl.w	r6, r1, r5
 801912e:	1d72      	adds	r2, r6, #5
 8019130:	0092      	lsls	r2, r2, #2
 8019132:	4620      	mov	r0, r4
 8019134:	f000 fecf 	bl	8019ed6 <_calloc_r>
 8019138:	b160      	cbz	r0, 8019154 <_Balloc+0x64>
 801913a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801913e:	e00e      	b.n	801915e <_Balloc+0x6e>
 8019140:	2221      	movs	r2, #33	; 0x21
 8019142:	2104      	movs	r1, #4
 8019144:	4620      	mov	r0, r4
 8019146:	f000 fec6 	bl	8019ed6 <_calloc_r>
 801914a:	69e3      	ldr	r3, [r4, #28]
 801914c:	60f0      	str	r0, [r6, #12]
 801914e:	68db      	ldr	r3, [r3, #12]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d1e4      	bne.n	801911e <_Balloc+0x2e>
 8019154:	2000      	movs	r0, #0
 8019156:	bd70      	pop	{r4, r5, r6, pc}
 8019158:	6802      	ldr	r2, [r0, #0]
 801915a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801915e:	2300      	movs	r3, #0
 8019160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019164:	e7f7      	b.n	8019156 <_Balloc+0x66>
 8019166:	bf00      	nop
 8019168:	0801e312 	.word	0x0801e312
 801916c:	0801e49d 	.word	0x0801e49d

08019170 <_Bfree>:
 8019170:	b570      	push	{r4, r5, r6, lr}
 8019172:	69c6      	ldr	r6, [r0, #28]
 8019174:	4605      	mov	r5, r0
 8019176:	460c      	mov	r4, r1
 8019178:	b976      	cbnz	r6, 8019198 <_Bfree+0x28>
 801917a:	2010      	movs	r0, #16
 801917c:	f7fc fca0 	bl	8015ac0 <malloc>
 8019180:	4602      	mov	r2, r0
 8019182:	61e8      	str	r0, [r5, #28]
 8019184:	b920      	cbnz	r0, 8019190 <_Bfree+0x20>
 8019186:	4b09      	ldr	r3, [pc, #36]	; (80191ac <_Bfree+0x3c>)
 8019188:	4809      	ldr	r0, [pc, #36]	; (80191b0 <_Bfree+0x40>)
 801918a:	218f      	movs	r1, #143	; 0x8f
 801918c:	f7fe fd62 	bl	8017c54 <__assert_func>
 8019190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019194:	6006      	str	r6, [r0, #0]
 8019196:	60c6      	str	r6, [r0, #12]
 8019198:	b13c      	cbz	r4, 80191aa <_Bfree+0x3a>
 801919a:	69eb      	ldr	r3, [r5, #28]
 801919c:	6862      	ldr	r2, [r4, #4]
 801919e:	68db      	ldr	r3, [r3, #12]
 80191a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80191a4:	6021      	str	r1, [r4, #0]
 80191a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80191aa:	bd70      	pop	{r4, r5, r6, pc}
 80191ac:	0801e312 	.word	0x0801e312
 80191b0:	0801e49d 	.word	0x0801e49d

080191b4 <__multadd>:
 80191b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b8:	690d      	ldr	r5, [r1, #16]
 80191ba:	4607      	mov	r7, r0
 80191bc:	460c      	mov	r4, r1
 80191be:	461e      	mov	r6, r3
 80191c0:	f101 0c14 	add.w	ip, r1, #20
 80191c4:	2000      	movs	r0, #0
 80191c6:	f8dc 3000 	ldr.w	r3, [ip]
 80191ca:	b299      	uxth	r1, r3
 80191cc:	fb02 6101 	mla	r1, r2, r1, r6
 80191d0:	0c1e      	lsrs	r6, r3, #16
 80191d2:	0c0b      	lsrs	r3, r1, #16
 80191d4:	fb02 3306 	mla	r3, r2, r6, r3
 80191d8:	b289      	uxth	r1, r1
 80191da:	3001      	adds	r0, #1
 80191dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80191e0:	4285      	cmp	r5, r0
 80191e2:	f84c 1b04 	str.w	r1, [ip], #4
 80191e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80191ea:	dcec      	bgt.n	80191c6 <__multadd+0x12>
 80191ec:	b30e      	cbz	r6, 8019232 <__multadd+0x7e>
 80191ee:	68a3      	ldr	r3, [r4, #8]
 80191f0:	42ab      	cmp	r3, r5
 80191f2:	dc19      	bgt.n	8019228 <__multadd+0x74>
 80191f4:	6861      	ldr	r1, [r4, #4]
 80191f6:	4638      	mov	r0, r7
 80191f8:	3101      	adds	r1, #1
 80191fa:	f7ff ff79 	bl	80190f0 <_Balloc>
 80191fe:	4680      	mov	r8, r0
 8019200:	b928      	cbnz	r0, 801920e <__multadd+0x5a>
 8019202:	4602      	mov	r2, r0
 8019204:	4b0c      	ldr	r3, [pc, #48]	; (8019238 <__multadd+0x84>)
 8019206:	480d      	ldr	r0, [pc, #52]	; (801923c <__multadd+0x88>)
 8019208:	21ba      	movs	r1, #186	; 0xba
 801920a:	f7fe fd23 	bl	8017c54 <__assert_func>
 801920e:	6922      	ldr	r2, [r4, #16]
 8019210:	3202      	adds	r2, #2
 8019212:	f104 010c 	add.w	r1, r4, #12
 8019216:	0092      	lsls	r2, r2, #2
 8019218:	300c      	adds	r0, #12
 801921a:	f7fe fcfe 	bl	8017c1a <memcpy>
 801921e:	4621      	mov	r1, r4
 8019220:	4638      	mov	r0, r7
 8019222:	f7ff ffa5 	bl	8019170 <_Bfree>
 8019226:	4644      	mov	r4, r8
 8019228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801922c:	3501      	adds	r5, #1
 801922e:	615e      	str	r6, [r3, #20]
 8019230:	6125      	str	r5, [r4, #16]
 8019232:	4620      	mov	r0, r4
 8019234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019238:	0801e42c 	.word	0x0801e42c
 801923c:	0801e49d 	.word	0x0801e49d

08019240 <__s2b>:
 8019240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019244:	460c      	mov	r4, r1
 8019246:	4615      	mov	r5, r2
 8019248:	461f      	mov	r7, r3
 801924a:	2209      	movs	r2, #9
 801924c:	3308      	adds	r3, #8
 801924e:	4606      	mov	r6, r0
 8019250:	fb93 f3f2 	sdiv	r3, r3, r2
 8019254:	2100      	movs	r1, #0
 8019256:	2201      	movs	r2, #1
 8019258:	429a      	cmp	r2, r3
 801925a:	db09      	blt.n	8019270 <__s2b+0x30>
 801925c:	4630      	mov	r0, r6
 801925e:	f7ff ff47 	bl	80190f0 <_Balloc>
 8019262:	b940      	cbnz	r0, 8019276 <__s2b+0x36>
 8019264:	4602      	mov	r2, r0
 8019266:	4b19      	ldr	r3, [pc, #100]	; (80192cc <__s2b+0x8c>)
 8019268:	4819      	ldr	r0, [pc, #100]	; (80192d0 <__s2b+0x90>)
 801926a:	21d3      	movs	r1, #211	; 0xd3
 801926c:	f7fe fcf2 	bl	8017c54 <__assert_func>
 8019270:	0052      	lsls	r2, r2, #1
 8019272:	3101      	adds	r1, #1
 8019274:	e7f0      	b.n	8019258 <__s2b+0x18>
 8019276:	9b08      	ldr	r3, [sp, #32]
 8019278:	6143      	str	r3, [r0, #20]
 801927a:	2d09      	cmp	r5, #9
 801927c:	f04f 0301 	mov.w	r3, #1
 8019280:	6103      	str	r3, [r0, #16]
 8019282:	dd16      	ble.n	80192b2 <__s2b+0x72>
 8019284:	f104 0909 	add.w	r9, r4, #9
 8019288:	46c8      	mov	r8, r9
 801928a:	442c      	add	r4, r5
 801928c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019290:	4601      	mov	r1, r0
 8019292:	3b30      	subs	r3, #48	; 0x30
 8019294:	220a      	movs	r2, #10
 8019296:	4630      	mov	r0, r6
 8019298:	f7ff ff8c 	bl	80191b4 <__multadd>
 801929c:	45a0      	cmp	r8, r4
 801929e:	d1f5      	bne.n	801928c <__s2b+0x4c>
 80192a0:	f1a5 0408 	sub.w	r4, r5, #8
 80192a4:	444c      	add	r4, r9
 80192a6:	1b2d      	subs	r5, r5, r4
 80192a8:	1963      	adds	r3, r4, r5
 80192aa:	42bb      	cmp	r3, r7
 80192ac:	db04      	blt.n	80192b8 <__s2b+0x78>
 80192ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192b2:	340a      	adds	r4, #10
 80192b4:	2509      	movs	r5, #9
 80192b6:	e7f6      	b.n	80192a6 <__s2b+0x66>
 80192b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80192bc:	4601      	mov	r1, r0
 80192be:	3b30      	subs	r3, #48	; 0x30
 80192c0:	220a      	movs	r2, #10
 80192c2:	4630      	mov	r0, r6
 80192c4:	f7ff ff76 	bl	80191b4 <__multadd>
 80192c8:	e7ee      	b.n	80192a8 <__s2b+0x68>
 80192ca:	bf00      	nop
 80192cc:	0801e42c 	.word	0x0801e42c
 80192d0:	0801e49d 	.word	0x0801e49d

080192d4 <__hi0bits>:
 80192d4:	0c03      	lsrs	r3, r0, #16
 80192d6:	041b      	lsls	r3, r3, #16
 80192d8:	b9d3      	cbnz	r3, 8019310 <__hi0bits+0x3c>
 80192da:	0400      	lsls	r0, r0, #16
 80192dc:	2310      	movs	r3, #16
 80192de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80192e2:	bf04      	itt	eq
 80192e4:	0200      	lsleq	r0, r0, #8
 80192e6:	3308      	addeq	r3, #8
 80192e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80192ec:	bf04      	itt	eq
 80192ee:	0100      	lsleq	r0, r0, #4
 80192f0:	3304      	addeq	r3, #4
 80192f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80192f6:	bf04      	itt	eq
 80192f8:	0080      	lsleq	r0, r0, #2
 80192fa:	3302      	addeq	r3, #2
 80192fc:	2800      	cmp	r0, #0
 80192fe:	db05      	blt.n	801930c <__hi0bits+0x38>
 8019300:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019304:	f103 0301 	add.w	r3, r3, #1
 8019308:	bf08      	it	eq
 801930a:	2320      	moveq	r3, #32
 801930c:	4618      	mov	r0, r3
 801930e:	4770      	bx	lr
 8019310:	2300      	movs	r3, #0
 8019312:	e7e4      	b.n	80192de <__hi0bits+0xa>

08019314 <__lo0bits>:
 8019314:	6803      	ldr	r3, [r0, #0]
 8019316:	f013 0207 	ands.w	r2, r3, #7
 801931a:	d00c      	beq.n	8019336 <__lo0bits+0x22>
 801931c:	07d9      	lsls	r1, r3, #31
 801931e:	d422      	bmi.n	8019366 <__lo0bits+0x52>
 8019320:	079a      	lsls	r2, r3, #30
 8019322:	bf49      	itett	mi
 8019324:	085b      	lsrmi	r3, r3, #1
 8019326:	089b      	lsrpl	r3, r3, #2
 8019328:	6003      	strmi	r3, [r0, #0]
 801932a:	2201      	movmi	r2, #1
 801932c:	bf5c      	itt	pl
 801932e:	6003      	strpl	r3, [r0, #0]
 8019330:	2202      	movpl	r2, #2
 8019332:	4610      	mov	r0, r2
 8019334:	4770      	bx	lr
 8019336:	b299      	uxth	r1, r3
 8019338:	b909      	cbnz	r1, 801933e <__lo0bits+0x2a>
 801933a:	0c1b      	lsrs	r3, r3, #16
 801933c:	2210      	movs	r2, #16
 801933e:	b2d9      	uxtb	r1, r3
 8019340:	b909      	cbnz	r1, 8019346 <__lo0bits+0x32>
 8019342:	3208      	adds	r2, #8
 8019344:	0a1b      	lsrs	r3, r3, #8
 8019346:	0719      	lsls	r1, r3, #28
 8019348:	bf04      	itt	eq
 801934a:	091b      	lsreq	r3, r3, #4
 801934c:	3204      	addeq	r2, #4
 801934e:	0799      	lsls	r1, r3, #30
 8019350:	bf04      	itt	eq
 8019352:	089b      	lsreq	r3, r3, #2
 8019354:	3202      	addeq	r2, #2
 8019356:	07d9      	lsls	r1, r3, #31
 8019358:	d403      	bmi.n	8019362 <__lo0bits+0x4e>
 801935a:	085b      	lsrs	r3, r3, #1
 801935c:	f102 0201 	add.w	r2, r2, #1
 8019360:	d003      	beq.n	801936a <__lo0bits+0x56>
 8019362:	6003      	str	r3, [r0, #0]
 8019364:	e7e5      	b.n	8019332 <__lo0bits+0x1e>
 8019366:	2200      	movs	r2, #0
 8019368:	e7e3      	b.n	8019332 <__lo0bits+0x1e>
 801936a:	2220      	movs	r2, #32
 801936c:	e7e1      	b.n	8019332 <__lo0bits+0x1e>
	...

08019370 <__i2b>:
 8019370:	b510      	push	{r4, lr}
 8019372:	460c      	mov	r4, r1
 8019374:	2101      	movs	r1, #1
 8019376:	f7ff febb 	bl	80190f0 <_Balloc>
 801937a:	4602      	mov	r2, r0
 801937c:	b928      	cbnz	r0, 801938a <__i2b+0x1a>
 801937e:	4b05      	ldr	r3, [pc, #20]	; (8019394 <__i2b+0x24>)
 8019380:	4805      	ldr	r0, [pc, #20]	; (8019398 <__i2b+0x28>)
 8019382:	f240 1145 	movw	r1, #325	; 0x145
 8019386:	f7fe fc65 	bl	8017c54 <__assert_func>
 801938a:	2301      	movs	r3, #1
 801938c:	6144      	str	r4, [r0, #20]
 801938e:	6103      	str	r3, [r0, #16]
 8019390:	bd10      	pop	{r4, pc}
 8019392:	bf00      	nop
 8019394:	0801e42c 	.word	0x0801e42c
 8019398:	0801e49d 	.word	0x0801e49d

0801939c <__multiply>:
 801939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a0:	4691      	mov	r9, r2
 80193a2:	690a      	ldr	r2, [r1, #16]
 80193a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80193a8:	429a      	cmp	r2, r3
 80193aa:	bfb8      	it	lt
 80193ac:	460b      	movlt	r3, r1
 80193ae:	460c      	mov	r4, r1
 80193b0:	bfbc      	itt	lt
 80193b2:	464c      	movlt	r4, r9
 80193b4:	4699      	movlt	r9, r3
 80193b6:	6927      	ldr	r7, [r4, #16]
 80193b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80193bc:	68a3      	ldr	r3, [r4, #8]
 80193be:	6861      	ldr	r1, [r4, #4]
 80193c0:	eb07 060a 	add.w	r6, r7, sl
 80193c4:	42b3      	cmp	r3, r6
 80193c6:	b085      	sub	sp, #20
 80193c8:	bfb8      	it	lt
 80193ca:	3101      	addlt	r1, #1
 80193cc:	f7ff fe90 	bl	80190f0 <_Balloc>
 80193d0:	b930      	cbnz	r0, 80193e0 <__multiply+0x44>
 80193d2:	4602      	mov	r2, r0
 80193d4:	4b44      	ldr	r3, [pc, #272]	; (80194e8 <__multiply+0x14c>)
 80193d6:	4845      	ldr	r0, [pc, #276]	; (80194ec <__multiply+0x150>)
 80193d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80193dc:	f7fe fc3a 	bl	8017c54 <__assert_func>
 80193e0:	f100 0514 	add.w	r5, r0, #20
 80193e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80193e8:	462b      	mov	r3, r5
 80193ea:	2200      	movs	r2, #0
 80193ec:	4543      	cmp	r3, r8
 80193ee:	d321      	bcc.n	8019434 <__multiply+0x98>
 80193f0:	f104 0314 	add.w	r3, r4, #20
 80193f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80193f8:	f109 0314 	add.w	r3, r9, #20
 80193fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019400:	9202      	str	r2, [sp, #8]
 8019402:	1b3a      	subs	r2, r7, r4
 8019404:	3a15      	subs	r2, #21
 8019406:	f022 0203 	bic.w	r2, r2, #3
 801940a:	3204      	adds	r2, #4
 801940c:	f104 0115 	add.w	r1, r4, #21
 8019410:	428f      	cmp	r7, r1
 8019412:	bf38      	it	cc
 8019414:	2204      	movcc	r2, #4
 8019416:	9201      	str	r2, [sp, #4]
 8019418:	9a02      	ldr	r2, [sp, #8]
 801941a:	9303      	str	r3, [sp, #12]
 801941c:	429a      	cmp	r2, r3
 801941e:	d80c      	bhi.n	801943a <__multiply+0x9e>
 8019420:	2e00      	cmp	r6, #0
 8019422:	dd03      	ble.n	801942c <__multiply+0x90>
 8019424:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019428:	2b00      	cmp	r3, #0
 801942a:	d05b      	beq.n	80194e4 <__multiply+0x148>
 801942c:	6106      	str	r6, [r0, #16]
 801942e:	b005      	add	sp, #20
 8019430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019434:	f843 2b04 	str.w	r2, [r3], #4
 8019438:	e7d8      	b.n	80193ec <__multiply+0x50>
 801943a:	f8b3 a000 	ldrh.w	sl, [r3]
 801943e:	f1ba 0f00 	cmp.w	sl, #0
 8019442:	d024      	beq.n	801948e <__multiply+0xf2>
 8019444:	f104 0e14 	add.w	lr, r4, #20
 8019448:	46a9      	mov	r9, r5
 801944a:	f04f 0c00 	mov.w	ip, #0
 801944e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019452:	f8d9 1000 	ldr.w	r1, [r9]
 8019456:	fa1f fb82 	uxth.w	fp, r2
 801945a:	b289      	uxth	r1, r1
 801945c:	fb0a 110b 	mla	r1, sl, fp, r1
 8019460:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019464:	f8d9 2000 	ldr.w	r2, [r9]
 8019468:	4461      	add	r1, ip
 801946a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801946e:	fb0a c20b 	mla	r2, sl, fp, ip
 8019472:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019476:	b289      	uxth	r1, r1
 8019478:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801947c:	4577      	cmp	r7, lr
 801947e:	f849 1b04 	str.w	r1, [r9], #4
 8019482:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019486:	d8e2      	bhi.n	801944e <__multiply+0xb2>
 8019488:	9a01      	ldr	r2, [sp, #4]
 801948a:	f845 c002 	str.w	ip, [r5, r2]
 801948e:	9a03      	ldr	r2, [sp, #12]
 8019490:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019494:	3304      	adds	r3, #4
 8019496:	f1b9 0f00 	cmp.w	r9, #0
 801949a:	d021      	beq.n	80194e0 <__multiply+0x144>
 801949c:	6829      	ldr	r1, [r5, #0]
 801949e:	f104 0c14 	add.w	ip, r4, #20
 80194a2:	46ae      	mov	lr, r5
 80194a4:	f04f 0a00 	mov.w	sl, #0
 80194a8:	f8bc b000 	ldrh.w	fp, [ip]
 80194ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80194b0:	fb09 220b 	mla	r2, r9, fp, r2
 80194b4:	4452      	add	r2, sl
 80194b6:	b289      	uxth	r1, r1
 80194b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80194bc:	f84e 1b04 	str.w	r1, [lr], #4
 80194c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80194c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80194c8:	f8be 1000 	ldrh.w	r1, [lr]
 80194cc:	fb09 110a 	mla	r1, r9, sl, r1
 80194d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80194d4:	4567      	cmp	r7, ip
 80194d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80194da:	d8e5      	bhi.n	80194a8 <__multiply+0x10c>
 80194dc:	9a01      	ldr	r2, [sp, #4]
 80194de:	50a9      	str	r1, [r5, r2]
 80194e0:	3504      	adds	r5, #4
 80194e2:	e799      	b.n	8019418 <__multiply+0x7c>
 80194e4:	3e01      	subs	r6, #1
 80194e6:	e79b      	b.n	8019420 <__multiply+0x84>
 80194e8:	0801e42c 	.word	0x0801e42c
 80194ec:	0801e49d 	.word	0x0801e49d

080194f0 <__pow5mult>:
 80194f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194f4:	4615      	mov	r5, r2
 80194f6:	f012 0203 	ands.w	r2, r2, #3
 80194fa:	4606      	mov	r6, r0
 80194fc:	460f      	mov	r7, r1
 80194fe:	d007      	beq.n	8019510 <__pow5mult+0x20>
 8019500:	4c25      	ldr	r4, [pc, #148]	; (8019598 <__pow5mult+0xa8>)
 8019502:	3a01      	subs	r2, #1
 8019504:	2300      	movs	r3, #0
 8019506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801950a:	f7ff fe53 	bl	80191b4 <__multadd>
 801950e:	4607      	mov	r7, r0
 8019510:	10ad      	asrs	r5, r5, #2
 8019512:	d03d      	beq.n	8019590 <__pow5mult+0xa0>
 8019514:	69f4      	ldr	r4, [r6, #28]
 8019516:	b97c      	cbnz	r4, 8019538 <__pow5mult+0x48>
 8019518:	2010      	movs	r0, #16
 801951a:	f7fc fad1 	bl	8015ac0 <malloc>
 801951e:	4602      	mov	r2, r0
 8019520:	61f0      	str	r0, [r6, #28]
 8019522:	b928      	cbnz	r0, 8019530 <__pow5mult+0x40>
 8019524:	4b1d      	ldr	r3, [pc, #116]	; (801959c <__pow5mult+0xac>)
 8019526:	481e      	ldr	r0, [pc, #120]	; (80195a0 <__pow5mult+0xb0>)
 8019528:	f240 11b3 	movw	r1, #435	; 0x1b3
 801952c:	f7fe fb92 	bl	8017c54 <__assert_func>
 8019530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019534:	6004      	str	r4, [r0, #0]
 8019536:	60c4      	str	r4, [r0, #12]
 8019538:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801953c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019540:	b94c      	cbnz	r4, 8019556 <__pow5mult+0x66>
 8019542:	f240 2171 	movw	r1, #625	; 0x271
 8019546:	4630      	mov	r0, r6
 8019548:	f7ff ff12 	bl	8019370 <__i2b>
 801954c:	2300      	movs	r3, #0
 801954e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019552:	4604      	mov	r4, r0
 8019554:	6003      	str	r3, [r0, #0]
 8019556:	f04f 0900 	mov.w	r9, #0
 801955a:	07eb      	lsls	r3, r5, #31
 801955c:	d50a      	bpl.n	8019574 <__pow5mult+0x84>
 801955e:	4639      	mov	r1, r7
 8019560:	4622      	mov	r2, r4
 8019562:	4630      	mov	r0, r6
 8019564:	f7ff ff1a 	bl	801939c <__multiply>
 8019568:	4639      	mov	r1, r7
 801956a:	4680      	mov	r8, r0
 801956c:	4630      	mov	r0, r6
 801956e:	f7ff fdff 	bl	8019170 <_Bfree>
 8019572:	4647      	mov	r7, r8
 8019574:	106d      	asrs	r5, r5, #1
 8019576:	d00b      	beq.n	8019590 <__pow5mult+0xa0>
 8019578:	6820      	ldr	r0, [r4, #0]
 801957a:	b938      	cbnz	r0, 801958c <__pow5mult+0x9c>
 801957c:	4622      	mov	r2, r4
 801957e:	4621      	mov	r1, r4
 8019580:	4630      	mov	r0, r6
 8019582:	f7ff ff0b 	bl	801939c <__multiply>
 8019586:	6020      	str	r0, [r4, #0]
 8019588:	f8c0 9000 	str.w	r9, [r0]
 801958c:	4604      	mov	r4, r0
 801958e:	e7e4      	b.n	801955a <__pow5mult+0x6a>
 8019590:	4638      	mov	r0, r7
 8019592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019596:	bf00      	nop
 8019598:	0801e5e8 	.word	0x0801e5e8
 801959c:	0801e312 	.word	0x0801e312
 80195a0:	0801e49d 	.word	0x0801e49d

080195a4 <__lshift>:
 80195a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195a8:	460c      	mov	r4, r1
 80195aa:	6849      	ldr	r1, [r1, #4]
 80195ac:	6923      	ldr	r3, [r4, #16]
 80195ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80195b2:	68a3      	ldr	r3, [r4, #8]
 80195b4:	4607      	mov	r7, r0
 80195b6:	4691      	mov	r9, r2
 80195b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80195bc:	f108 0601 	add.w	r6, r8, #1
 80195c0:	42b3      	cmp	r3, r6
 80195c2:	db0b      	blt.n	80195dc <__lshift+0x38>
 80195c4:	4638      	mov	r0, r7
 80195c6:	f7ff fd93 	bl	80190f0 <_Balloc>
 80195ca:	4605      	mov	r5, r0
 80195cc:	b948      	cbnz	r0, 80195e2 <__lshift+0x3e>
 80195ce:	4602      	mov	r2, r0
 80195d0:	4b28      	ldr	r3, [pc, #160]	; (8019674 <__lshift+0xd0>)
 80195d2:	4829      	ldr	r0, [pc, #164]	; (8019678 <__lshift+0xd4>)
 80195d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80195d8:	f7fe fb3c 	bl	8017c54 <__assert_func>
 80195dc:	3101      	adds	r1, #1
 80195de:	005b      	lsls	r3, r3, #1
 80195e0:	e7ee      	b.n	80195c0 <__lshift+0x1c>
 80195e2:	2300      	movs	r3, #0
 80195e4:	f100 0114 	add.w	r1, r0, #20
 80195e8:	f100 0210 	add.w	r2, r0, #16
 80195ec:	4618      	mov	r0, r3
 80195ee:	4553      	cmp	r3, sl
 80195f0:	db33      	blt.n	801965a <__lshift+0xb6>
 80195f2:	6920      	ldr	r0, [r4, #16]
 80195f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80195f8:	f104 0314 	add.w	r3, r4, #20
 80195fc:	f019 091f 	ands.w	r9, r9, #31
 8019600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019604:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019608:	d02b      	beq.n	8019662 <__lshift+0xbe>
 801960a:	f1c9 0e20 	rsb	lr, r9, #32
 801960e:	468a      	mov	sl, r1
 8019610:	2200      	movs	r2, #0
 8019612:	6818      	ldr	r0, [r3, #0]
 8019614:	fa00 f009 	lsl.w	r0, r0, r9
 8019618:	4310      	orrs	r0, r2
 801961a:	f84a 0b04 	str.w	r0, [sl], #4
 801961e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019622:	459c      	cmp	ip, r3
 8019624:	fa22 f20e 	lsr.w	r2, r2, lr
 8019628:	d8f3      	bhi.n	8019612 <__lshift+0x6e>
 801962a:	ebac 0304 	sub.w	r3, ip, r4
 801962e:	3b15      	subs	r3, #21
 8019630:	f023 0303 	bic.w	r3, r3, #3
 8019634:	3304      	adds	r3, #4
 8019636:	f104 0015 	add.w	r0, r4, #21
 801963a:	4584      	cmp	ip, r0
 801963c:	bf38      	it	cc
 801963e:	2304      	movcc	r3, #4
 8019640:	50ca      	str	r2, [r1, r3]
 8019642:	b10a      	cbz	r2, 8019648 <__lshift+0xa4>
 8019644:	f108 0602 	add.w	r6, r8, #2
 8019648:	3e01      	subs	r6, #1
 801964a:	4638      	mov	r0, r7
 801964c:	612e      	str	r6, [r5, #16]
 801964e:	4621      	mov	r1, r4
 8019650:	f7ff fd8e 	bl	8019170 <_Bfree>
 8019654:	4628      	mov	r0, r5
 8019656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801965a:	f842 0f04 	str.w	r0, [r2, #4]!
 801965e:	3301      	adds	r3, #1
 8019660:	e7c5      	b.n	80195ee <__lshift+0x4a>
 8019662:	3904      	subs	r1, #4
 8019664:	f853 2b04 	ldr.w	r2, [r3], #4
 8019668:	f841 2f04 	str.w	r2, [r1, #4]!
 801966c:	459c      	cmp	ip, r3
 801966e:	d8f9      	bhi.n	8019664 <__lshift+0xc0>
 8019670:	e7ea      	b.n	8019648 <__lshift+0xa4>
 8019672:	bf00      	nop
 8019674:	0801e42c 	.word	0x0801e42c
 8019678:	0801e49d 	.word	0x0801e49d

0801967c <__mcmp>:
 801967c:	b530      	push	{r4, r5, lr}
 801967e:	6902      	ldr	r2, [r0, #16]
 8019680:	690c      	ldr	r4, [r1, #16]
 8019682:	1b12      	subs	r2, r2, r4
 8019684:	d10e      	bne.n	80196a4 <__mcmp+0x28>
 8019686:	f100 0314 	add.w	r3, r0, #20
 801968a:	3114      	adds	r1, #20
 801968c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019690:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019694:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019698:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801969c:	42a5      	cmp	r5, r4
 801969e:	d003      	beq.n	80196a8 <__mcmp+0x2c>
 80196a0:	d305      	bcc.n	80196ae <__mcmp+0x32>
 80196a2:	2201      	movs	r2, #1
 80196a4:	4610      	mov	r0, r2
 80196a6:	bd30      	pop	{r4, r5, pc}
 80196a8:	4283      	cmp	r3, r0
 80196aa:	d3f3      	bcc.n	8019694 <__mcmp+0x18>
 80196ac:	e7fa      	b.n	80196a4 <__mcmp+0x28>
 80196ae:	f04f 32ff 	mov.w	r2, #4294967295
 80196b2:	e7f7      	b.n	80196a4 <__mcmp+0x28>

080196b4 <__mdiff>:
 80196b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b8:	460c      	mov	r4, r1
 80196ba:	4606      	mov	r6, r0
 80196bc:	4611      	mov	r1, r2
 80196be:	4620      	mov	r0, r4
 80196c0:	4690      	mov	r8, r2
 80196c2:	f7ff ffdb 	bl	801967c <__mcmp>
 80196c6:	1e05      	subs	r5, r0, #0
 80196c8:	d110      	bne.n	80196ec <__mdiff+0x38>
 80196ca:	4629      	mov	r1, r5
 80196cc:	4630      	mov	r0, r6
 80196ce:	f7ff fd0f 	bl	80190f0 <_Balloc>
 80196d2:	b930      	cbnz	r0, 80196e2 <__mdiff+0x2e>
 80196d4:	4b3a      	ldr	r3, [pc, #232]	; (80197c0 <__mdiff+0x10c>)
 80196d6:	4602      	mov	r2, r0
 80196d8:	f240 2137 	movw	r1, #567	; 0x237
 80196dc:	4839      	ldr	r0, [pc, #228]	; (80197c4 <__mdiff+0x110>)
 80196de:	f7fe fab9 	bl	8017c54 <__assert_func>
 80196e2:	2301      	movs	r3, #1
 80196e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80196e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ec:	bfa4      	itt	ge
 80196ee:	4643      	movge	r3, r8
 80196f0:	46a0      	movge	r8, r4
 80196f2:	4630      	mov	r0, r6
 80196f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80196f8:	bfa6      	itte	ge
 80196fa:	461c      	movge	r4, r3
 80196fc:	2500      	movge	r5, #0
 80196fe:	2501      	movlt	r5, #1
 8019700:	f7ff fcf6 	bl	80190f0 <_Balloc>
 8019704:	b920      	cbnz	r0, 8019710 <__mdiff+0x5c>
 8019706:	4b2e      	ldr	r3, [pc, #184]	; (80197c0 <__mdiff+0x10c>)
 8019708:	4602      	mov	r2, r0
 801970a:	f240 2145 	movw	r1, #581	; 0x245
 801970e:	e7e5      	b.n	80196dc <__mdiff+0x28>
 8019710:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019714:	6926      	ldr	r6, [r4, #16]
 8019716:	60c5      	str	r5, [r0, #12]
 8019718:	f104 0914 	add.w	r9, r4, #20
 801971c:	f108 0514 	add.w	r5, r8, #20
 8019720:	f100 0e14 	add.w	lr, r0, #20
 8019724:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019728:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801972c:	f108 0210 	add.w	r2, r8, #16
 8019730:	46f2      	mov	sl, lr
 8019732:	2100      	movs	r1, #0
 8019734:	f859 3b04 	ldr.w	r3, [r9], #4
 8019738:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801973c:	fa11 f88b 	uxtah	r8, r1, fp
 8019740:	b299      	uxth	r1, r3
 8019742:	0c1b      	lsrs	r3, r3, #16
 8019744:	eba8 0801 	sub.w	r8, r8, r1
 8019748:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801974c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019750:	fa1f f888 	uxth.w	r8, r8
 8019754:	1419      	asrs	r1, r3, #16
 8019756:	454e      	cmp	r6, r9
 8019758:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801975c:	f84a 3b04 	str.w	r3, [sl], #4
 8019760:	d8e8      	bhi.n	8019734 <__mdiff+0x80>
 8019762:	1b33      	subs	r3, r6, r4
 8019764:	3b15      	subs	r3, #21
 8019766:	f023 0303 	bic.w	r3, r3, #3
 801976a:	3304      	adds	r3, #4
 801976c:	3415      	adds	r4, #21
 801976e:	42a6      	cmp	r6, r4
 8019770:	bf38      	it	cc
 8019772:	2304      	movcc	r3, #4
 8019774:	441d      	add	r5, r3
 8019776:	4473      	add	r3, lr
 8019778:	469e      	mov	lr, r3
 801977a:	462e      	mov	r6, r5
 801977c:	4566      	cmp	r6, ip
 801977e:	d30e      	bcc.n	801979e <__mdiff+0xea>
 8019780:	f10c 0203 	add.w	r2, ip, #3
 8019784:	1b52      	subs	r2, r2, r5
 8019786:	f022 0203 	bic.w	r2, r2, #3
 801978a:	3d03      	subs	r5, #3
 801978c:	45ac      	cmp	ip, r5
 801978e:	bf38      	it	cc
 8019790:	2200      	movcc	r2, #0
 8019792:	4413      	add	r3, r2
 8019794:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019798:	b17a      	cbz	r2, 80197ba <__mdiff+0x106>
 801979a:	6107      	str	r7, [r0, #16]
 801979c:	e7a4      	b.n	80196e8 <__mdiff+0x34>
 801979e:	f856 8b04 	ldr.w	r8, [r6], #4
 80197a2:	fa11 f288 	uxtah	r2, r1, r8
 80197a6:	1414      	asrs	r4, r2, #16
 80197a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80197ac:	b292      	uxth	r2, r2
 80197ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80197b2:	f84e 2b04 	str.w	r2, [lr], #4
 80197b6:	1421      	asrs	r1, r4, #16
 80197b8:	e7e0      	b.n	801977c <__mdiff+0xc8>
 80197ba:	3f01      	subs	r7, #1
 80197bc:	e7ea      	b.n	8019794 <__mdiff+0xe0>
 80197be:	bf00      	nop
 80197c0:	0801e42c 	.word	0x0801e42c
 80197c4:	0801e49d 	.word	0x0801e49d

080197c8 <__ulp>:
 80197c8:	b082      	sub	sp, #8
 80197ca:	ed8d 0b00 	vstr	d0, [sp]
 80197ce:	9a01      	ldr	r2, [sp, #4]
 80197d0:	4b0f      	ldr	r3, [pc, #60]	; (8019810 <__ulp+0x48>)
 80197d2:	4013      	ands	r3, r2
 80197d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80197d8:	2b00      	cmp	r3, #0
 80197da:	dc08      	bgt.n	80197ee <__ulp+0x26>
 80197dc:	425b      	negs	r3, r3
 80197de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80197e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80197e6:	da04      	bge.n	80197f2 <__ulp+0x2a>
 80197e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80197ec:	4113      	asrs	r3, r2
 80197ee:	2200      	movs	r2, #0
 80197f0:	e008      	b.n	8019804 <__ulp+0x3c>
 80197f2:	f1a2 0314 	sub.w	r3, r2, #20
 80197f6:	2b1e      	cmp	r3, #30
 80197f8:	bfda      	itte	le
 80197fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80197fe:	40da      	lsrle	r2, r3
 8019800:	2201      	movgt	r2, #1
 8019802:	2300      	movs	r3, #0
 8019804:	4619      	mov	r1, r3
 8019806:	4610      	mov	r0, r2
 8019808:	ec41 0b10 	vmov	d0, r0, r1
 801980c:	b002      	add	sp, #8
 801980e:	4770      	bx	lr
 8019810:	7ff00000 	.word	0x7ff00000

08019814 <__b2d>:
 8019814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019818:	6906      	ldr	r6, [r0, #16]
 801981a:	f100 0814 	add.w	r8, r0, #20
 801981e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019822:	1f37      	subs	r7, r6, #4
 8019824:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019828:	4610      	mov	r0, r2
 801982a:	f7ff fd53 	bl	80192d4 <__hi0bits>
 801982e:	f1c0 0320 	rsb	r3, r0, #32
 8019832:	280a      	cmp	r0, #10
 8019834:	600b      	str	r3, [r1, #0]
 8019836:	491b      	ldr	r1, [pc, #108]	; (80198a4 <__b2d+0x90>)
 8019838:	dc15      	bgt.n	8019866 <__b2d+0x52>
 801983a:	f1c0 0c0b 	rsb	ip, r0, #11
 801983e:	fa22 f30c 	lsr.w	r3, r2, ip
 8019842:	45b8      	cmp	r8, r7
 8019844:	ea43 0501 	orr.w	r5, r3, r1
 8019848:	bf34      	ite	cc
 801984a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801984e:	2300      	movcs	r3, #0
 8019850:	3015      	adds	r0, #21
 8019852:	fa02 f000 	lsl.w	r0, r2, r0
 8019856:	fa23 f30c 	lsr.w	r3, r3, ip
 801985a:	4303      	orrs	r3, r0
 801985c:	461c      	mov	r4, r3
 801985e:	ec45 4b10 	vmov	d0, r4, r5
 8019862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019866:	45b8      	cmp	r8, r7
 8019868:	bf3a      	itte	cc
 801986a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801986e:	f1a6 0708 	subcc.w	r7, r6, #8
 8019872:	2300      	movcs	r3, #0
 8019874:	380b      	subs	r0, #11
 8019876:	d012      	beq.n	801989e <__b2d+0x8a>
 8019878:	f1c0 0120 	rsb	r1, r0, #32
 801987c:	fa23 f401 	lsr.w	r4, r3, r1
 8019880:	4082      	lsls	r2, r0
 8019882:	4322      	orrs	r2, r4
 8019884:	4547      	cmp	r7, r8
 8019886:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801988a:	bf8c      	ite	hi
 801988c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019890:	2200      	movls	r2, #0
 8019892:	4083      	lsls	r3, r0
 8019894:	40ca      	lsrs	r2, r1
 8019896:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801989a:	4313      	orrs	r3, r2
 801989c:	e7de      	b.n	801985c <__b2d+0x48>
 801989e:	ea42 0501 	orr.w	r5, r2, r1
 80198a2:	e7db      	b.n	801985c <__b2d+0x48>
 80198a4:	3ff00000 	.word	0x3ff00000

080198a8 <__d2b>:
 80198a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80198ac:	460f      	mov	r7, r1
 80198ae:	2101      	movs	r1, #1
 80198b0:	ec59 8b10 	vmov	r8, r9, d0
 80198b4:	4616      	mov	r6, r2
 80198b6:	f7ff fc1b 	bl	80190f0 <_Balloc>
 80198ba:	4604      	mov	r4, r0
 80198bc:	b930      	cbnz	r0, 80198cc <__d2b+0x24>
 80198be:	4602      	mov	r2, r0
 80198c0:	4b24      	ldr	r3, [pc, #144]	; (8019954 <__d2b+0xac>)
 80198c2:	4825      	ldr	r0, [pc, #148]	; (8019958 <__d2b+0xb0>)
 80198c4:	f240 310f 	movw	r1, #783	; 0x30f
 80198c8:	f7fe f9c4 	bl	8017c54 <__assert_func>
 80198cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80198d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80198d4:	bb2d      	cbnz	r5, 8019922 <__d2b+0x7a>
 80198d6:	9301      	str	r3, [sp, #4]
 80198d8:	f1b8 0300 	subs.w	r3, r8, #0
 80198dc:	d026      	beq.n	801992c <__d2b+0x84>
 80198de:	4668      	mov	r0, sp
 80198e0:	9300      	str	r3, [sp, #0]
 80198e2:	f7ff fd17 	bl	8019314 <__lo0bits>
 80198e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80198ea:	b1e8      	cbz	r0, 8019928 <__d2b+0x80>
 80198ec:	f1c0 0320 	rsb	r3, r0, #32
 80198f0:	fa02 f303 	lsl.w	r3, r2, r3
 80198f4:	430b      	orrs	r3, r1
 80198f6:	40c2      	lsrs	r2, r0
 80198f8:	6163      	str	r3, [r4, #20]
 80198fa:	9201      	str	r2, [sp, #4]
 80198fc:	9b01      	ldr	r3, [sp, #4]
 80198fe:	61a3      	str	r3, [r4, #24]
 8019900:	2b00      	cmp	r3, #0
 8019902:	bf14      	ite	ne
 8019904:	2202      	movne	r2, #2
 8019906:	2201      	moveq	r2, #1
 8019908:	6122      	str	r2, [r4, #16]
 801990a:	b1bd      	cbz	r5, 801993c <__d2b+0x94>
 801990c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019910:	4405      	add	r5, r0
 8019912:	603d      	str	r5, [r7, #0]
 8019914:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019918:	6030      	str	r0, [r6, #0]
 801991a:	4620      	mov	r0, r4
 801991c:	b003      	add	sp, #12
 801991e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019926:	e7d6      	b.n	80198d6 <__d2b+0x2e>
 8019928:	6161      	str	r1, [r4, #20]
 801992a:	e7e7      	b.n	80198fc <__d2b+0x54>
 801992c:	a801      	add	r0, sp, #4
 801992e:	f7ff fcf1 	bl	8019314 <__lo0bits>
 8019932:	9b01      	ldr	r3, [sp, #4]
 8019934:	6163      	str	r3, [r4, #20]
 8019936:	3020      	adds	r0, #32
 8019938:	2201      	movs	r2, #1
 801993a:	e7e5      	b.n	8019908 <__d2b+0x60>
 801993c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019940:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019944:	6038      	str	r0, [r7, #0]
 8019946:	6918      	ldr	r0, [r3, #16]
 8019948:	f7ff fcc4 	bl	80192d4 <__hi0bits>
 801994c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019950:	e7e2      	b.n	8019918 <__d2b+0x70>
 8019952:	bf00      	nop
 8019954:	0801e42c 	.word	0x0801e42c
 8019958:	0801e49d 	.word	0x0801e49d

0801995c <__ratio>:
 801995c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019960:	4688      	mov	r8, r1
 8019962:	4669      	mov	r1, sp
 8019964:	4681      	mov	r9, r0
 8019966:	f7ff ff55 	bl	8019814 <__b2d>
 801996a:	a901      	add	r1, sp, #4
 801996c:	4640      	mov	r0, r8
 801996e:	ec55 4b10 	vmov	r4, r5, d0
 8019972:	f7ff ff4f 	bl	8019814 <__b2d>
 8019976:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801997a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801997e:	eba3 0c02 	sub.w	ip, r3, r2
 8019982:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019986:	1a9b      	subs	r3, r3, r2
 8019988:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801998c:	ec51 0b10 	vmov	r0, r1, d0
 8019990:	2b00      	cmp	r3, #0
 8019992:	bfd6      	itet	le
 8019994:	460a      	movle	r2, r1
 8019996:	462a      	movgt	r2, r5
 8019998:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801999c:	468b      	mov	fp, r1
 801999e:	462f      	mov	r7, r5
 80199a0:	bfd4      	ite	le
 80199a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80199a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80199aa:	4620      	mov	r0, r4
 80199ac:	ee10 2a10 	vmov	r2, s0
 80199b0:	465b      	mov	r3, fp
 80199b2:	4639      	mov	r1, r7
 80199b4:	f7e6 ff4a 	bl	800084c <__aeabi_ddiv>
 80199b8:	ec41 0b10 	vmov	d0, r0, r1
 80199bc:	b003      	add	sp, #12
 80199be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080199c2 <__copybits>:
 80199c2:	3901      	subs	r1, #1
 80199c4:	b570      	push	{r4, r5, r6, lr}
 80199c6:	1149      	asrs	r1, r1, #5
 80199c8:	6914      	ldr	r4, [r2, #16]
 80199ca:	3101      	adds	r1, #1
 80199cc:	f102 0314 	add.w	r3, r2, #20
 80199d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80199d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80199d8:	1f05      	subs	r5, r0, #4
 80199da:	42a3      	cmp	r3, r4
 80199dc:	d30c      	bcc.n	80199f8 <__copybits+0x36>
 80199de:	1aa3      	subs	r3, r4, r2
 80199e0:	3b11      	subs	r3, #17
 80199e2:	f023 0303 	bic.w	r3, r3, #3
 80199e6:	3211      	adds	r2, #17
 80199e8:	42a2      	cmp	r2, r4
 80199ea:	bf88      	it	hi
 80199ec:	2300      	movhi	r3, #0
 80199ee:	4418      	add	r0, r3
 80199f0:	2300      	movs	r3, #0
 80199f2:	4288      	cmp	r0, r1
 80199f4:	d305      	bcc.n	8019a02 <__copybits+0x40>
 80199f6:	bd70      	pop	{r4, r5, r6, pc}
 80199f8:	f853 6b04 	ldr.w	r6, [r3], #4
 80199fc:	f845 6f04 	str.w	r6, [r5, #4]!
 8019a00:	e7eb      	b.n	80199da <__copybits+0x18>
 8019a02:	f840 3b04 	str.w	r3, [r0], #4
 8019a06:	e7f4      	b.n	80199f2 <__copybits+0x30>

08019a08 <__any_on>:
 8019a08:	f100 0214 	add.w	r2, r0, #20
 8019a0c:	6900      	ldr	r0, [r0, #16]
 8019a0e:	114b      	asrs	r3, r1, #5
 8019a10:	4298      	cmp	r0, r3
 8019a12:	b510      	push	{r4, lr}
 8019a14:	db11      	blt.n	8019a3a <__any_on+0x32>
 8019a16:	dd0a      	ble.n	8019a2e <__any_on+0x26>
 8019a18:	f011 011f 	ands.w	r1, r1, #31
 8019a1c:	d007      	beq.n	8019a2e <__any_on+0x26>
 8019a1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019a22:	fa24 f001 	lsr.w	r0, r4, r1
 8019a26:	fa00 f101 	lsl.w	r1, r0, r1
 8019a2a:	428c      	cmp	r4, r1
 8019a2c:	d10b      	bne.n	8019a46 <__any_on+0x3e>
 8019a2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019a32:	4293      	cmp	r3, r2
 8019a34:	d803      	bhi.n	8019a3e <__any_on+0x36>
 8019a36:	2000      	movs	r0, #0
 8019a38:	bd10      	pop	{r4, pc}
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	e7f7      	b.n	8019a2e <__any_on+0x26>
 8019a3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019a42:	2900      	cmp	r1, #0
 8019a44:	d0f5      	beq.n	8019a32 <__any_on+0x2a>
 8019a46:	2001      	movs	r0, #1
 8019a48:	e7f6      	b.n	8019a38 <__any_on+0x30>

08019a4a <__ascii_wctomb>:
 8019a4a:	b149      	cbz	r1, 8019a60 <__ascii_wctomb+0x16>
 8019a4c:	2aff      	cmp	r2, #255	; 0xff
 8019a4e:	bf85      	ittet	hi
 8019a50:	238a      	movhi	r3, #138	; 0x8a
 8019a52:	6003      	strhi	r3, [r0, #0]
 8019a54:	700a      	strbls	r2, [r1, #0]
 8019a56:	f04f 30ff 	movhi.w	r0, #4294967295
 8019a5a:	bf98      	it	ls
 8019a5c:	2001      	movls	r0, #1
 8019a5e:	4770      	bx	lr
 8019a60:	4608      	mov	r0, r1
 8019a62:	4770      	bx	lr

08019a64 <__ssputs_r>:
 8019a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a68:	688e      	ldr	r6, [r1, #8]
 8019a6a:	461f      	mov	r7, r3
 8019a6c:	42be      	cmp	r6, r7
 8019a6e:	680b      	ldr	r3, [r1, #0]
 8019a70:	4682      	mov	sl, r0
 8019a72:	460c      	mov	r4, r1
 8019a74:	4690      	mov	r8, r2
 8019a76:	d82c      	bhi.n	8019ad2 <__ssputs_r+0x6e>
 8019a78:	898a      	ldrh	r2, [r1, #12]
 8019a7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019a7e:	d026      	beq.n	8019ace <__ssputs_r+0x6a>
 8019a80:	6965      	ldr	r5, [r4, #20]
 8019a82:	6909      	ldr	r1, [r1, #16]
 8019a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019a88:	eba3 0901 	sub.w	r9, r3, r1
 8019a8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019a90:	1c7b      	adds	r3, r7, #1
 8019a92:	444b      	add	r3, r9
 8019a94:	106d      	asrs	r5, r5, #1
 8019a96:	429d      	cmp	r5, r3
 8019a98:	bf38      	it	cc
 8019a9a:	461d      	movcc	r5, r3
 8019a9c:	0553      	lsls	r3, r2, #21
 8019a9e:	d527      	bpl.n	8019af0 <__ssputs_r+0x8c>
 8019aa0:	4629      	mov	r1, r5
 8019aa2:	f7fc f83d 	bl	8015b20 <_malloc_r>
 8019aa6:	4606      	mov	r6, r0
 8019aa8:	b360      	cbz	r0, 8019b04 <__ssputs_r+0xa0>
 8019aaa:	6921      	ldr	r1, [r4, #16]
 8019aac:	464a      	mov	r2, r9
 8019aae:	f7fe f8b4 	bl	8017c1a <memcpy>
 8019ab2:	89a3      	ldrh	r3, [r4, #12]
 8019ab4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019abc:	81a3      	strh	r3, [r4, #12]
 8019abe:	6126      	str	r6, [r4, #16]
 8019ac0:	6165      	str	r5, [r4, #20]
 8019ac2:	444e      	add	r6, r9
 8019ac4:	eba5 0509 	sub.w	r5, r5, r9
 8019ac8:	6026      	str	r6, [r4, #0]
 8019aca:	60a5      	str	r5, [r4, #8]
 8019acc:	463e      	mov	r6, r7
 8019ace:	42be      	cmp	r6, r7
 8019ad0:	d900      	bls.n	8019ad4 <__ssputs_r+0x70>
 8019ad2:	463e      	mov	r6, r7
 8019ad4:	6820      	ldr	r0, [r4, #0]
 8019ad6:	4632      	mov	r2, r6
 8019ad8:	4641      	mov	r1, r8
 8019ada:	f000 f9db 	bl	8019e94 <memmove>
 8019ade:	68a3      	ldr	r3, [r4, #8]
 8019ae0:	1b9b      	subs	r3, r3, r6
 8019ae2:	60a3      	str	r3, [r4, #8]
 8019ae4:	6823      	ldr	r3, [r4, #0]
 8019ae6:	4433      	add	r3, r6
 8019ae8:	6023      	str	r3, [r4, #0]
 8019aea:	2000      	movs	r0, #0
 8019aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019af0:	462a      	mov	r2, r5
 8019af2:	f000 fa06 	bl	8019f02 <_realloc_r>
 8019af6:	4606      	mov	r6, r0
 8019af8:	2800      	cmp	r0, #0
 8019afa:	d1e0      	bne.n	8019abe <__ssputs_r+0x5a>
 8019afc:	6921      	ldr	r1, [r4, #16]
 8019afe:	4650      	mov	r0, sl
 8019b00:	f7fe ff40 	bl	8018984 <_free_r>
 8019b04:	230c      	movs	r3, #12
 8019b06:	f8ca 3000 	str.w	r3, [sl]
 8019b0a:	89a3      	ldrh	r3, [r4, #12]
 8019b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b10:	81a3      	strh	r3, [r4, #12]
 8019b12:	f04f 30ff 	mov.w	r0, #4294967295
 8019b16:	e7e9      	b.n	8019aec <__ssputs_r+0x88>

08019b18 <_svfiprintf_r>:
 8019b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b1c:	4698      	mov	r8, r3
 8019b1e:	898b      	ldrh	r3, [r1, #12]
 8019b20:	061b      	lsls	r3, r3, #24
 8019b22:	b09d      	sub	sp, #116	; 0x74
 8019b24:	4607      	mov	r7, r0
 8019b26:	460d      	mov	r5, r1
 8019b28:	4614      	mov	r4, r2
 8019b2a:	d50e      	bpl.n	8019b4a <_svfiprintf_r+0x32>
 8019b2c:	690b      	ldr	r3, [r1, #16]
 8019b2e:	b963      	cbnz	r3, 8019b4a <_svfiprintf_r+0x32>
 8019b30:	2140      	movs	r1, #64	; 0x40
 8019b32:	f7fb fff5 	bl	8015b20 <_malloc_r>
 8019b36:	6028      	str	r0, [r5, #0]
 8019b38:	6128      	str	r0, [r5, #16]
 8019b3a:	b920      	cbnz	r0, 8019b46 <_svfiprintf_r+0x2e>
 8019b3c:	230c      	movs	r3, #12
 8019b3e:	603b      	str	r3, [r7, #0]
 8019b40:	f04f 30ff 	mov.w	r0, #4294967295
 8019b44:	e0d0      	b.n	8019ce8 <_svfiprintf_r+0x1d0>
 8019b46:	2340      	movs	r3, #64	; 0x40
 8019b48:	616b      	str	r3, [r5, #20]
 8019b4a:	2300      	movs	r3, #0
 8019b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8019b4e:	2320      	movs	r3, #32
 8019b50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b58:	2330      	movs	r3, #48	; 0x30
 8019b5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019d00 <_svfiprintf_r+0x1e8>
 8019b5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b62:	f04f 0901 	mov.w	r9, #1
 8019b66:	4623      	mov	r3, r4
 8019b68:	469a      	mov	sl, r3
 8019b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b6e:	b10a      	cbz	r2, 8019b74 <_svfiprintf_r+0x5c>
 8019b70:	2a25      	cmp	r2, #37	; 0x25
 8019b72:	d1f9      	bne.n	8019b68 <_svfiprintf_r+0x50>
 8019b74:	ebba 0b04 	subs.w	fp, sl, r4
 8019b78:	d00b      	beq.n	8019b92 <_svfiprintf_r+0x7a>
 8019b7a:	465b      	mov	r3, fp
 8019b7c:	4622      	mov	r2, r4
 8019b7e:	4629      	mov	r1, r5
 8019b80:	4638      	mov	r0, r7
 8019b82:	f7ff ff6f 	bl	8019a64 <__ssputs_r>
 8019b86:	3001      	adds	r0, #1
 8019b88:	f000 80a9 	beq.w	8019cde <_svfiprintf_r+0x1c6>
 8019b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b8e:	445a      	add	r2, fp
 8019b90:	9209      	str	r2, [sp, #36]	; 0x24
 8019b92:	f89a 3000 	ldrb.w	r3, [sl]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	f000 80a1 	beq.w	8019cde <_svfiprintf_r+0x1c6>
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8019ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ba6:	f10a 0a01 	add.w	sl, sl, #1
 8019baa:	9304      	str	r3, [sp, #16]
 8019bac:	9307      	str	r3, [sp, #28]
 8019bae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019bb2:	931a      	str	r3, [sp, #104]	; 0x68
 8019bb4:	4654      	mov	r4, sl
 8019bb6:	2205      	movs	r2, #5
 8019bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bbc:	4850      	ldr	r0, [pc, #320]	; (8019d00 <_svfiprintf_r+0x1e8>)
 8019bbe:	f7e6 fb07 	bl	80001d0 <memchr>
 8019bc2:	9a04      	ldr	r2, [sp, #16]
 8019bc4:	b9d8      	cbnz	r0, 8019bfe <_svfiprintf_r+0xe6>
 8019bc6:	06d0      	lsls	r0, r2, #27
 8019bc8:	bf44      	itt	mi
 8019bca:	2320      	movmi	r3, #32
 8019bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019bd0:	0711      	lsls	r1, r2, #28
 8019bd2:	bf44      	itt	mi
 8019bd4:	232b      	movmi	r3, #43	; 0x2b
 8019bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019bda:	f89a 3000 	ldrb.w	r3, [sl]
 8019bde:	2b2a      	cmp	r3, #42	; 0x2a
 8019be0:	d015      	beq.n	8019c0e <_svfiprintf_r+0xf6>
 8019be2:	9a07      	ldr	r2, [sp, #28]
 8019be4:	4654      	mov	r4, sl
 8019be6:	2000      	movs	r0, #0
 8019be8:	f04f 0c0a 	mov.w	ip, #10
 8019bec:	4621      	mov	r1, r4
 8019bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019bf2:	3b30      	subs	r3, #48	; 0x30
 8019bf4:	2b09      	cmp	r3, #9
 8019bf6:	d94d      	bls.n	8019c94 <_svfiprintf_r+0x17c>
 8019bf8:	b1b0      	cbz	r0, 8019c28 <_svfiprintf_r+0x110>
 8019bfa:	9207      	str	r2, [sp, #28]
 8019bfc:	e014      	b.n	8019c28 <_svfiprintf_r+0x110>
 8019bfe:	eba0 0308 	sub.w	r3, r0, r8
 8019c02:	fa09 f303 	lsl.w	r3, r9, r3
 8019c06:	4313      	orrs	r3, r2
 8019c08:	9304      	str	r3, [sp, #16]
 8019c0a:	46a2      	mov	sl, r4
 8019c0c:	e7d2      	b.n	8019bb4 <_svfiprintf_r+0x9c>
 8019c0e:	9b03      	ldr	r3, [sp, #12]
 8019c10:	1d19      	adds	r1, r3, #4
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	9103      	str	r1, [sp, #12]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	bfbb      	ittet	lt
 8019c1a:	425b      	neglt	r3, r3
 8019c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8019c20:	9307      	strge	r3, [sp, #28]
 8019c22:	9307      	strlt	r3, [sp, #28]
 8019c24:	bfb8      	it	lt
 8019c26:	9204      	strlt	r2, [sp, #16]
 8019c28:	7823      	ldrb	r3, [r4, #0]
 8019c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8019c2c:	d10c      	bne.n	8019c48 <_svfiprintf_r+0x130>
 8019c2e:	7863      	ldrb	r3, [r4, #1]
 8019c30:	2b2a      	cmp	r3, #42	; 0x2a
 8019c32:	d134      	bne.n	8019c9e <_svfiprintf_r+0x186>
 8019c34:	9b03      	ldr	r3, [sp, #12]
 8019c36:	1d1a      	adds	r2, r3, #4
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	9203      	str	r2, [sp, #12]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	bfb8      	it	lt
 8019c40:	f04f 33ff 	movlt.w	r3, #4294967295
 8019c44:	3402      	adds	r4, #2
 8019c46:	9305      	str	r3, [sp, #20]
 8019c48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019d10 <_svfiprintf_r+0x1f8>
 8019c4c:	7821      	ldrb	r1, [r4, #0]
 8019c4e:	2203      	movs	r2, #3
 8019c50:	4650      	mov	r0, sl
 8019c52:	f7e6 fabd 	bl	80001d0 <memchr>
 8019c56:	b138      	cbz	r0, 8019c68 <_svfiprintf_r+0x150>
 8019c58:	9b04      	ldr	r3, [sp, #16]
 8019c5a:	eba0 000a 	sub.w	r0, r0, sl
 8019c5e:	2240      	movs	r2, #64	; 0x40
 8019c60:	4082      	lsls	r2, r0
 8019c62:	4313      	orrs	r3, r2
 8019c64:	3401      	adds	r4, #1
 8019c66:	9304      	str	r3, [sp, #16]
 8019c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c6c:	4825      	ldr	r0, [pc, #148]	; (8019d04 <_svfiprintf_r+0x1ec>)
 8019c6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c72:	2206      	movs	r2, #6
 8019c74:	f7e6 faac 	bl	80001d0 <memchr>
 8019c78:	2800      	cmp	r0, #0
 8019c7a:	d038      	beq.n	8019cee <_svfiprintf_r+0x1d6>
 8019c7c:	4b22      	ldr	r3, [pc, #136]	; (8019d08 <_svfiprintf_r+0x1f0>)
 8019c7e:	bb1b      	cbnz	r3, 8019cc8 <_svfiprintf_r+0x1b0>
 8019c80:	9b03      	ldr	r3, [sp, #12]
 8019c82:	3307      	adds	r3, #7
 8019c84:	f023 0307 	bic.w	r3, r3, #7
 8019c88:	3308      	adds	r3, #8
 8019c8a:	9303      	str	r3, [sp, #12]
 8019c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c8e:	4433      	add	r3, r6
 8019c90:	9309      	str	r3, [sp, #36]	; 0x24
 8019c92:	e768      	b.n	8019b66 <_svfiprintf_r+0x4e>
 8019c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c98:	460c      	mov	r4, r1
 8019c9a:	2001      	movs	r0, #1
 8019c9c:	e7a6      	b.n	8019bec <_svfiprintf_r+0xd4>
 8019c9e:	2300      	movs	r3, #0
 8019ca0:	3401      	adds	r4, #1
 8019ca2:	9305      	str	r3, [sp, #20]
 8019ca4:	4619      	mov	r1, r3
 8019ca6:	f04f 0c0a 	mov.w	ip, #10
 8019caa:	4620      	mov	r0, r4
 8019cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019cb0:	3a30      	subs	r2, #48	; 0x30
 8019cb2:	2a09      	cmp	r2, #9
 8019cb4:	d903      	bls.n	8019cbe <_svfiprintf_r+0x1a6>
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d0c6      	beq.n	8019c48 <_svfiprintf_r+0x130>
 8019cba:	9105      	str	r1, [sp, #20]
 8019cbc:	e7c4      	b.n	8019c48 <_svfiprintf_r+0x130>
 8019cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8019cc2:	4604      	mov	r4, r0
 8019cc4:	2301      	movs	r3, #1
 8019cc6:	e7f0      	b.n	8019caa <_svfiprintf_r+0x192>
 8019cc8:	ab03      	add	r3, sp, #12
 8019cca:	9300      	str	r3, [sp, #0]
 8019ccc:	462a      	mov	r2, r5
 8019cce:	4b0f      	ldr	r3, [pc, #60]	; (8019d0c <_svfiprintf_r+0x1f4>)
 8019cd0:	a904      	add	r1, sp, #16
 8019cd2:	4638      	mov	r0, r7
 8019cd4:	f7fc ff56 	bl	8016b84 <_printf_float>
 8019cd8:	1c42      	adds	r2, r0, #1
 8019cda:	4606      	mov	r6, r0
 8019cdc:	d1d6      	bne.n	8019c8c <_svfiprintf_r+0x174>
 8019cde:	89ab      	ldrh	r3, [r5, #12]
 8019ce0:	065b      	lsls	r3, r3, #25
 8019ce2:	f53f af2d 	bmi.w	8019b40 <_svfiprintf_r+0x28>
 8019ce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ce8:	b01d      	add	sp, #116	; 0x74
 8019cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cee:	ab03      	add	r3, sp, #12
 8019cf0:	9300      	str	r3, [sp, #0]
 8019cf2:	462a      	mov	r2, r5
 8019cf4:	4b05      	ldr	r3, [pc, #20]	; (8019d0c <_svfiprintf_r+0x1f4>)
 8019cf6:	a904      	add	r1, sp, #16
 8019cf8:	4638      	mov	r0, r7
 8019cfa:	f7fd f9e7 	bl	80170cc <_printf_i>
 8019cfe:	e7eb      	b.n	8019cd8 <_svfiprintf_r+0x1c0>
 8019d00:	0801e5f4 	.word	0x0801e5f4
 8019d04:	0801e5fe 	.word	0x0801e5fe
 8019d08:	08016b85 	.word	0x08016b85
 8019d0c:	08019a65 	.word	0x08019a65
 8019d10:	0801e5fa 	.word	0x0801e5fa

08019d14 <__sflush_r>:
 8019d14:	898a      	ldrh	r2, [r1, #12]
 8019d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d1a:	4605      	mov	r5, r0
 8019d1c:	0710      	lsls	r0, r2, #28
 8019d1e:	460c      	mov	r4, r1
 8019d20:	d458      	bmi.n	8019dd4 <__sflush_r+0xc0>
 8019d22:	684b      	ldr	r3, [r1, #4]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	dc05      	bgt.n	8019d34 <__sflush_r+0x20>
 8019d28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	dc02      	bgt.n	8019d34 <__sflush_r+0x20>
 8019d2e:	2000      	movs	r0, #0
 8019d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019d36:	2e00      	cmp	r6, #0
 8019d38:	d0f9      	beq.n	8019d2e <__sflush_r+0x1a>
 8019d3a:	2300      	movs	r3, #0
 8019d3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019d40:	682f      	ldr	r7, [r5, #0]
 8019d42:	6a21      	ldr	r1, [r4, #32]
 8019d44:	602b      	str	r3, [r5, #0]
 8019d46:	d032      	beq.n	8019dae <__sflush_r+0x9a>
 8019d48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019d4a:	89a3      	ldrh	r3, [r4, #12]
 8019d4c:	075a      	lsls	r2, r3, #29
 8019d4e:	d505      	bpl.n	8019d5c <__sflush_r+0x48>
 8019d50:	6863      	ldr	r3, [r4, #4]
 8019d52:	1ac0      	subs	r0, r0, r3
 8019d54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019d56:	b10b      	cbz	r3, 8019d5c <__sflush_r+0x48>
 8019d58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019d5a:	1ac0      	subs	r0, r0, r3
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	4602      	mov	r2, r0
 8019d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019d62:	6a21      	ldr	r1, [r4, #32]
 8019d64:	4628      	mov	r0, r5
 8019d66:	47b0      	blx	r6
 8019d68:	1c43      	adds	r3, r0, #1
 8019d6a:	89a3      	ldrh	r3, [r4, #12]
 8019d6c:	d106      	bne.n	8019d7c <__sflush_r+0x68>
 8019d6e:	6829      	ldr	r1, [r5, #0]
 8019d70:	291d      	cmp	r1, #29
 8019d72:	d82b      	bhi.n	8019dcc <__sflush_r+0xb8>
 8019d74:	4a29      	ldr	r2, [pc, #164]	; (8019e1c <__sflush_r+0x108>)
 8019d76:	410a      	asrs	r2, r1
 8019d78:	07d6      	lsls	r6, r2, #31
 8019d7a:	d427      	bmi.n	8019dcc <__sflush_r+0xb8>
 8019d7c:	2200      	movs	r2, #0
 8019d7e:	6062      	str	r2, [r4, #4]
 8019d80:	04d9      	lsls	r1, r3, #19
 8019d82:	6922      	ldr	r2, [r4, #16]
 8019d84:	6022      	str	r2, [r4, #0]
 8019d86:	d504      	bpl.n	8019d92 <__sflush_r+0x7e>
 8019d88:	1c42      	adds	r2, r0, #1
 8019d8a:	d101      	bne.n	8019d90 <__sflush_r+0x7c>
 8019d8c:	682b      	ldr	r3, [r5, #0]
 8019d8e:	b903      	cbnz	r3, 8019d92 <__sflush_r+0x7e>
 8019d90:	6560      	str	r0, [r4, #84]	; 0x54
 8019d92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d94:	602f      	str	r7, [r5, #0]
 8019d96:	2900      	cmp	r1, #0
 8019d98:	d0c9      	beq.n	8019d2e <__sflush_r+0x1a>
 8019d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d9e:	4299      	cmp	r1, r3
 8019da0:	d002      	beq.n	8019da8 <__sflush_r+0x94>
 8019da2:	4628      	mov	r0, r5
 8019da4:	f7fe fdee 	bl	8018984 <_free_r>
 8019da8:	2000      	movs	r0, #0
 8019daa:	6360      	str	r0, [r4, #52]	; 0x34
 8019dac:	e7c0      	b.n	8019d30 <__sflush_r+0x1c>
 8019dae:	2301      	movs	r3, #1
 8019db0:	4628      	mov	r0, r5
 8019db2:	47b0      	blx	r6
 8019db4:	1c41      	adds	r1, r0, #1
 8019db6:	d1c8      	bne.n	8019d4a <__sflush_r+0x36>
 8019db8:	682b      	ldr	r3, [r5, #0]
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d0c5      	beq.n	8019d4a <__sflush_r+0x36>
 8019dbe:	2b1d      	cmp	r3, #29
 8019dc0:	d001      	beq.n	8019dc6 <__sflush_r+0xb2>
 8019dc2:	2b16      	cmp	r3, #22
 8019dc4:	d101      	bne.n	8019dca <__sflush_r+0xb6>
 8019dc6:	602f      	str	r7, [r5, #0]
 8019dc8:	e7b1      	b.n	8019d2e <__sflush_r+0x1a>
 8019dca:	89a3      	ldrh	r3, [r4, #12]
 8019dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019dd0:	81a3      	strh	r3, [r4, #12]
 8019dd2:	e7ad      	b.n	8019d30 <__sflush_r+0x1c>
 8019dd4:	690f      	ldr	r7, [r1, #16]
 8019dd6:	2f00      	cmp	r7, #0
 8019dd8:	d0a9      	beq.n	8019d2e <__sflush_r+0x1a>
 8019dda:	0793      	lsls	r3, r2, #30
 8019ddc:	680e      	ldr	r6, [r1, #0]
 8019dde:	bf08      	it	eq
 8019de0:	694b      	ldreq	r3, [r1, #20]
 8019de2:	600f      	str	r7, [r1, #0]
 8019de4:	bf18      	it	ne
 8019de6:	2300      	movne	r3, #0
 8019de8:	eba6 0807 	sub.w	r8, r6, r7
 8019dec:	608b      	str	r3, [r1, #8]
 8019dee:	f1b8 0f00 	cmp.w	r8, #0
 8019df2:	dd9c      	ble.n	8019d2e <__sflush_r+0x1a>
 8019df4:	6a21      	ldr	r1, [r4, #32]
 8019df6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019df8:	4643      	mov	r3, r8
 8019dfa:	463a      	mov	r2, r7
 8019dfc:	4628      	mov	r0, r5
 8019dfe:	47b0      	blx	r6
 8019e00:	2800      	cmp	r0, #0
 8019e02:	dc06      	bgt.n	8019e12 <__sflush_r+0xfe>
 8019e04:	89a3      	ldrh	r3, [r4, #12]
 8019e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e0a:	81a3      	strh	r3, [r4, #12]
 8019e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8019e10:	e78e      	b.n	8019d30 <__sflush_r+0x1c>
 8019e12:	4407      	add	r7, r0
 8019e14:	eba8 0800 	sub.w	r8, r8, r0
 8019e18:	e7e9      	b.n	8019dee <__sflush_r+0xda>
 8019e1a:	bf00      	nop
 8019e1c:	dfbffffe 	.word	0xdfbffffe

08019e20 <_fflush_r>:
 8019e20:	b538      	push	{r3, r4, r5, lr}
 8019e22:	690b      	ldr	r3, [r1, #16]
 8019e24:	4605      	mov	r5, r0
 8019e26:	460c      	mov	r4, r1
 8019e28:	b913      	cbnz	r3, 8019e30 <_fflush_r+0x10>
 8019e2a:	2500      	movs	r5, #0
 8019e2c:	4628      	mov	r0, r5
 8019e2e:	bd38      	pop	{r3, r4, r5, pc}
 8019e30:	b118      	cbz	r0, 8019e3a <_fflush_r+0x1a>
 8019e32:	6a03      	ldr	r3, [r0, #32]
 8019e34:	b90b      	cbnz	r3, 8019e3a <_fflush_r+0x1a>
 8019e36:	f7fd fd07 	bl	8017848 <__sinit>
 8019e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d0f3      	beq.n	8019e2a <_fflush_r+0xa>
 8019e42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019e44:	07d0      	lsls	r0, r2, #31
 8019e46:	d404      	bmi.n	8019e52 <_fflush_r+0x32>
 8019e48:	0599      	lsls	r1, r3, #22
 8019e4a:	d402      	bmi.n	8019e52 <_fflush_r+0x32>
 8019e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e4e:	f7fd feda 	bl	8017c06 <__retarget_lock_acquire_recursive>
 8019e52:	4628      	mov	r0, r5
 8019e54:	4621      	mov	r1, r4
 8019e56:	f7ff ff5d 	bl	8019d14 <__sflush_r>
 8019e5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019e5c:	07da      	lsls	r2, r3, #31
 8019e5e:	4605      	mov	r5, r0
 8019e60:	d4e4      	bmi.n	8019e2c <_fflush_r+0xc>
 8019e62:	89a3      	ldrh	r3, [r4, #12]
 8019e64:	059b      	lsls	r3, r3, #22
 8019e66:	d4e1      	bmi.n	8019e2c <_fflush_r+0xc>
 8019e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e6a:	f7fd fecd 	bl	8017c08 <__retarget_lock_release_recursive>
 8019e6e:	e7dd      	b.n	8019e2c <_fflush_r+0xc>

08019e70 <fiprintf>:
 8019e70:	b40e      	push	{r1, r2, r3}
 8019e72:	b503      	push	{r0, r1, lr}
 8019e74:	4601      	mov	r1, r0
 8019e76:	ab03      	add	r3, sp, #12
 8019e78:	4805      	ldr	r0, [pc, #20]	; (8019e90 <fiprintf+0x20>)
 8019e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e7e:	6800      	ldr	r0, [r0, #0]
 8019e80:	9301      	str	r3, [sp, #4]
 8019e82:	f000 f897 	bl	8019fb4 <_vfiprintf_r>
 8019e86:	b002      	add	sp, #8
 8019e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e8c:	b003      	add	sp, #12
 8019e8e:	4770      	bx	lr
 8019e90:	200002f4 	.word	0x200002f4

08019e94 <memmove>:
 8019e94:	4288      	cmp	r0, r1
 8019e96:	b510      	push	{r4, lr}
 8019e98:	eb01 0402 	add.w	r4, r1, r2
 8019e9c:	d902      	bls.n	8019ea4 <memmove+0x10>
 8019e9e:	4284      	cmp	r4, r0
 8019ea0:	4623      	mov	r3, r4
 8019ea2:	d807      	bhi.n	8019eb4 <memmove+0x20>
 8019ea4:	1e43      	subs	r3, r0, #1
 8019ea6:	42a1      	cmp	r1, r4
 8019ea8:	d008      	beq.n	8019ebc <memmove+0x28>
 8019eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019eb2:	e7f8      	b.n	8019ea6 <memmove+0x12>
 8019eb4:	4402      	add	r2, r0
 8019eb6:	4601      	mov	r1, r0
 8019eb8:	428a      	cmp	r2, r1
 8019eba:	d100      	bne.n	8019ebe <memmove+0x2a>
 8019ebc:	bd10      	pop	{r4, pc}
 8019ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019ec6:	e7f7      	b.n	8019eb8 <memmove+0x24>

08019ec8 <abort>:
 8019ec8:	b508      	push	{r3, lr}
 8019eca:	2006      	movs	r0, #6
 8019ecc:	f000 fa4a 	bl	801a364 <raise>
 8019ed0:	2001      	movs	r0, #1
 8019ed2:	f7ec f911 	bl	80060f8 <_exit>

08019ed6 <_calloc_r>:
 8019ed6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ed8:	fba1 2402 	umull	r2, r4, r1, r2
 8019edc:	b94c      	cbnz	r4, 8019ef2 <_calloc_r+0x1c>
 8019ede:	4611      	mov	r1, r2
 8019ee0:	9201      	str	r2, [sp, #4]
 8019ee2:	f7fb fe1d 	bl	8015b20 <_malloc_r>
 8019ee6:	9a01      	ldr	r2, [sp, #4]
 8019ee8:	4605      	mov	r5, r0
 8019eea:	b930      	cbnz	r0, 8019efa <_calloc_r+0x24>
 8019eec:	4628      	mov	r0, r5
 8019eee:	b003      	add	sp, #12
 8019ef0:	bd30      	pop	{r4, r5, pc}
 8019ef2:	220c      	movs	r2, #12
 8019ef4:	6002      	str	r2, [r0, #0]
 8019ef6:	2500      	movs	r5, #0
 8019ef8:	e7f8      	b.n	8019eec <_calloc_r+0x16>
 8019efa:	4621      	mov	r1, r4
 8019efc:	f7fd fd71 	bl	80179e2 <memset>
 8019f00:	e7f4      	b.n	8019eec <_calloc_r+0x16>

08019f02 <_realloc_r>:
 8019f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f06:	4680      	mov	r8, r0
 8019f08:	4614      	mov	r4, r2
 8019f0a:	460e      	mov	r6, r1
 8019f0c:	b921      	cbnz	r1, 8019f18 <_realloc_r+0x16>
 8019f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f12:	4611      	mov	r1, r2
 8019f14:	f7fb be04 	b.w	8015b20 <_malloc_r>
 8019f18:	b92a      	cbnz	r2, 8019f26 <_realloc_r+0x24>
 8019f1a:	f7fe fd33 	bl	8018984 <_free_r>
 8019f1e:	4625      	mov	r5, r4
 8019f20:	4628      	mov	r0, r5
 8019f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f26:	f000 fa39 	bl	801a39c <_malloc_usable_size_r>
 8019f2a:	4284      	cmp	r4, r0
 8019f2c:	4607      	mov	r7, r0
 8019f2e:	d802      	bhi.n	8019f36 <_realloc_r+0x34>
 8019f30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019f34:	d812      	bhi.n	8019f5c <_realloc_r+0x5a>
 8019f36:	4621      	mov	r1, r4
 8019f38:	4640      	mov	r0, r8
 8019f3a:	f7fb fdf1 	bl	8015b20 <_malloc_r>
 8019f3e:	4605      	mov	r5, r0
 8019f40:	2800      	cmp	r0, #0
 8019f42:	d0ed      	beq.n	8019f20 <_realloc_r+0x1e>
 8019f44:	42bc      	cmp	r4, r7
 8019f46:	4622      	mov	r2, r4
 8019f48:	4631      	mov	r1, r6
 8019f4a:	bf28      	it	cs
 8019f4c:	463a      	movcs	r2, r7
 8019f4e:	f7fd fe64 	bl	8017c1a <memcpy>
 8019f52:	4631      	mov	r1, r6
 8019f54:	4640      	mov	r0, r8
 8019f56:	f7fe fd15 	bl	8018984 <_free_r>
 8019f5a:	e7e1      	b.n	8019f20 <_realloc_r+0x1e>
 8019f5c:	4635      	mov	r5, r6
 8019f5e:	e7df      	b.n	8019f20 <_realloc_r+0x1e>

08019f60 <__sfputc_r>:
 8019f60:	6893      	ldr	r3, [r2, #8]
 8019f62:	3b01      	subs	r3, #1
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	b410      	push	{r4}
 8019f68:	6093      	str	r3, [r2, #8]
 8019f6a:	da08      	bge.n	8019f7e <__sfputc_r+0x1e>
 8019f6c:	6994      	ldr	r4, [r2, #24]
 8019f6e:	42a3      	cmp	r3, r4
 8019f70:	db01      	blt.n	8019f76 <__sfputc_r+0x16>
 8019f72:	290a      	cmp	r1, #10
 8019f74:	d103      	bne.n	8019f7e <__sfputc_r+0x1e>
 8019f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f7a:	f000 b935 	b.w	801a1e8 <__swbuf_r>
 8019f7e:	6813      	ldr	r3, [r2, #0]
 8019f80:	1c58      	adds	r0, r3, #1
 8019f82:	6010      	str	r0, [r2, #0]
 8019f84:	7019      	strb	r1, [r3, #0]
 8019f86:	4608      	mov	r0, r1
 8019f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f8c:	4770      	bx	lr

08019f8e <__sfputs_r>:
 8019f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f90:	4606      	mov	r6, r0
 8019f92:	460f      	mov	r7, r1
 8019f94:	4614      	mov	r4, r2
 8019f96:	18d5      	adds	r5, r2, r3
 8019f98:	42ac      	cmp	r4, r5
 8019f9a:	d101      	bne.n	8019fa0 <__sfputs_r+0x12>
 8019f9c:	2000      	movs	r0, #0
 8019f9e:	e007      	b.n	8019fb0 <__sfputs_r+0x22>
 8019fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fa4:	463a      	mov	r2, r7
 8019fa6:	4630      	mov	r0, r6
 8019fa8:	f7ff ffda 	bl	8019f60 <__sfputc_r>
 8019fac:	1c43      	adds	r3, r0, #1
 8019fae:	d1f3      	bne.n	8019f98 <__sfputs_r+0xa>
 8019fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019fb4 <_vfiprintf_r>:
 8019fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fb8:	460d      	mov	r5, r1
 8019fba:	b09d      	sub	sp, #116	; 0x74
 8019fbc:	4614      	mov	r4, r2
 8019fbe:	4698      	mov	r8, r3
 8019fc0:	4606      	mov	r6, r0
 8019fc2:	b118      	cbz	r0, 8019fcc <_vfiprintf_r+0x18>
 8019fc4:	6a03      	ldr	r3, [r0, #32]
 8019fc6:	b90b      	cbnz	r3, 8019fcc <_vfiprintf_r+0x18>
 8019fc8:	f7fd fc3e 	bl	8017848 <__sinit>
 8019fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fce:	07d9      	lsls	r1, r3, #31
 8019fd0:	d405      	bmi.n	8019fde <_vfiprintf_r+0x2a>
 8019fd2:	89ab      	ldrh	r3, [r5, #12]
 8019fd4:	059a      	lsls	r2, r3, #22
 8019fd6:	d402      	bmi.n	8019fde <_vfiprintf_r+0x2a>
 8019fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fda:	f7fd fe14 	bl	8017c06 <__retarget_lock_acquire_recursive>
 8019fde:	89ab      	ldrh	r3, [r5, #12]
 8019fe0:	071b      	lsls	r3, r3, #28
 8019fe2:	d501      	bpl.n	8019fe8 <_vfiprintf_r+0x34>
 8019fe4:	692b      	ldr	r3, [r5, #16]
 8019fe6:	b99b      	cbnz	r3, 801a010 <_vfiprintf_r+0x5c>
 8019fe8:	4629      	mov	r1, r5
 8019fea:	4630      	mov	r0, r6
 8019fec:	f000 f93a 	bl	801a264 <__swsetup_r>
 8019ff0:	b170      	cbz	r0, 801a010 <_vfiprintf_r+0x5c>
 8019ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ff4:	07dc      	lsls	r4, r3, #31
 8019ff6:	d504      	bpl.n	801a002 <_vfiprintf_r+0x4e>
 8019ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8019ffc:	b01d      	add	sp, #116	; 0x74
 8019ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a002:	89ab      	ldrh	r3, [r5, #12]
 801a004:	0598      	lsls	r0, r3, #22
 801a006:	d4f7      	bmi.n	8019ff8 <_vfiprintf_r+0x44>
 801a008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a00a:	f7fd fdfd 	bl	8017c08 <__retarget_lock_release_recursive>
 801a00e:	e7f3      	b.n	8019ff8 <_vfiprintf_r+0x44>
 801a010:	2300      	movs	r3, #0
 801a012:	9309      	str	r3, [sp, #36]	; 0x24
 801a014:	2320      	movs	r3, #32
 801a016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a01a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a01e:	2330      	movs	r3, #48	; 0x30
 801a020:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a1d4 <_vfiprintf_r+0x220>
 801a024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a028:	f04f 0901 	mov.w	r9, #1
 801a02c:	4623      	mov	r3, r4
 801a02e:	469a      	mov	sl, r3
 801a030:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a034:	b10a      	cbz	r2, 801a03a <_vfiprintf_r+0x86>
 801a036:	2a25      	cmp	r2, #37	; 0x25
 801a038:	d1f9      	bne.n	801a02e <_vfiprintf_r+0x7a>
 801a03a:	ebba 0b04 	subs.w	fp, sl, r4
 801a03e:	d00b      	beq.n	801a058 <_vfiprintf_r+0xa4>
 801a040:	465b      	mov	r3, fp
 801a042:	4622      	mov	r2, r4
 801a044:	4629      	mov	r1, r5
 801a046:	4630      	mov	r0, r6
 801a048:	f7ff ffa1 	bl	8019f8e <__sfputs_r>
 801a04c:	3001      	adds	r0, #1
 801a04e:	f000 80a9 	beq.w	801a1a4 <_vfiprintf_r+0x1f0>
 801a052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a054:	445a      	add	r2, fp
 801a056:	9209      	str	r2, [sp, #36]	; 0x24
 801a058:	f89a 3000 	ldrb.w	r3, [sl]
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	f000 80a1 	beq.w	801a1a4 <_vfiprintf_r+0x1f0>
 801a062:	2300      	movs	r3, #0
 801a064:	f04f 32ff 	mov.w	r2, #4294967295
 801a068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a06c:	f10a 0a01 	add.w	sl, sl, #1
 801a070:	9304      	str	r3, [sp, #16]
 801a072:	9307      	str	r3, [sp, #28]
 801a074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a078:	931a      	str	r3, [sp, #104]	; 0x68
 801a07a:	4654      	mov	r4, sl
 801a07c:	2205      	movs	r2, #5
 801a07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a082:	4854      	ldr	r0, [pc, #336]	; (801a1d4 <_vfiprintf_r+0x220>)
 801a084:	f7e6 f8a4 	bl	80001d0 <memchr>
 801a088:	9a04      	ldr	r2, [sp, #16]
 801a08a:	b9d8      	cbnz	r0, 801a0c4 <_vfiprintf_r+0x110>
 801a08c:	06d1      	lsls	r1, r2, #27
 801a08e:	bf44      	itt	mi
 801a090:	2320      	movmi	r3, #32
 801a092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a096:	0713      	lsls	r3, r2, #28
 801a098:	bf44      	itt	mi
 801a09a:	232b      	movmi	r3, #43	; 0x2b
 801a09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0a0:	f89a 3000 	ldrb.w	r3, [sl]
 801a0a4:	2b2a      	cmp	r3, #42	; 0x2a
 801a0a6:	d015      	beq.n	801a0d4 <_vfiprintf_r+0x120>
 801a0a8:	9a07      	ldr	r2, [sp, #28]
 801a0aa:	4654      	mov	r4, sl
 801a0ac:	2000      	movs	r0, #0
 801a0ae:	f04f 0c0a 	mov.w	ip, #10
 801a0b2:	4621      	mov	r1, r4
 801a0b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0b8:	3b30      	subs	r3, #48	; 0x30
 801a0ba:	2b09      	cmp	r3, #9
 801a0bc:	d94d      	bls.n	801a15a <_vfiprintf_r+0x1a6>
 801a0be:	b1b0      	cbz	r0, 801a0ee <_vfiprintf_r+0x13a>
 801a0c0:	9207      	str	r2, [sp, #28]
 801a0c2:	e014      	b.n	801a0ee <_vfiprintf_r+0x13a>
 801a0c4:	eba0 0308 	sub.w	r3, r0, r8
 801a0c8:	fa09 f303 	lsl.w	r3, r9, r3
 801a0cc:	4313      	orrs	r3, r2
 801a0ce:	9304      	str	r3, [sp, #16]
 801a0d0:	46a2      	mov	sl, r4
 801a0d2:	e7d2      	b.n	801a07a <_vfiprintf_r+0xc6>
 801a0d4:	9b03      	ldr	r3, [sp, #12]
 801a0d6:	1d19      	adds	r1, r3, #4
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	9103      	str	r1, [sp, #12]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	bfbb      	ittet	lt
 801a0e0:	425b      	neglt	r3, r3
 801a0e2:	f042 0202 	orrlt.w	r2, r2, #2
 801a0e6:	9307      	strge	r3, [sp, #28]
 801a0e8:	9307      	strlt	r3, [sp, #28]
 801a0ea:	bfb8      	it	lt
 801a0ec:	9204      	strlt	r2, [sp, #16]
 801a0ee:	7823      	ldrb	r3, [r4, #0]
 801a0f0:	2b2e      	cmp	r3, #46	; 0x2e
 801a0f2:	d10c      	bne.n	801a10e <_vfiprintf_r+0x15a>
 801a0f4:	7863      	ldrb	r3, [r4, #1]
 801a0f6:	2b2a      	cmp	r3, #42	; 0x2a
 801a0f8:	d134      	bne.n	801a164 <_vfiprintf_r+0x1b0>
 801a0fa:	9b03      	ldr	r3, [sp, #12]
 801a0fc:	1d1a      	adds	r2, r3, #4
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	9203      	str	r2, [sp, #12]
 801a102:	2b00      	cmp	r3, #0
 801a104:	bfb8      	it	lt
 801a106:	f04f 33ff 	movlt.w	r3, #4294967295
 801a10a:	3402      	adds	r4, #2
 801a10c:	9305      	str	r3, [sp, #20]
 801a10e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a1e4 <_vfiprintf_r+0x230>
 801a112:	7821      	ldrb	r1, [r4, #0]
 801a114:	2203      	movs	r2, #3
 801a116:	4650      	mov	r0, sl
 801a118:	f7e6 f85a 	bl	80001d0 <memchr>
 801a11c:	b138      	cbz	r0, 801a12e <_vfiprintf_r+0x17a>
 801a11e:	9b04      	ldr	r3, [sp, #16]
 801a120:	eba0 000a 	sub.w	r0, r0, sl
 801a124:	2240      	movs	r2, #64	; 0x40
 801a126:	4082      	lsls	r2, r0
 801a128:	4313      	orrs	r3, r2
 801a12a:	3401      	adds	r4, #1
 801a12c:	9304      	str	r3, [sp, #16]
 801a12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a132:	4829      	ldr	r0, [pc, #164]	; (801a1d8 <_vfiprintf_r+0x224>)
 801a134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a138:	2206      	movs	r2, #6
 801a13a:	f7e6 f849 	bl	80001d0 <memchr>
 801a13e:	2800      	cmp	r0, #0
 801a140:	d03f      	beq.n	801a1c2 <_vfiprintf_r+0x20e>
 801a142:	4b26      	ldr	r3, [pc, #152]	; (801a1dc <_vfiprintf_r+0x228>)
 801a144:	bb1b      	cbnz	r3, 801a18e <_vfiprintf_r+0x1da>
 801a146:	9b03      	ldr	r3, [sp, #12]
 801a148:	3307      	adds	r3, #7
 801a14a:	f023 0307 	bic.w	r3, r3, #7
 801a14e:	3308      	adds	r3, #8
 801a150:	9303      	str	r3, [sp, #12]
 801a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a154:	443b      	add	r3, r7
 801a156:	9309      	str	r3, [sp, #36]	; 0x24
 801a158:	e768      	b.n	801a02c <_vfiprintf_r+0x78>
 801a15a:	fb0c 3202 	mla	r2, ip, r2, r3
 801a15e:	460c      	mov	r4, r1
 801a160:	2001      	movs	r0, #1
 801a162:	e7a6      	b.n	801a0b2 <_vfiprintf_r+0xfe>
 801a164:	2300      	movs	r3, #0
 801a166:	3401      	adds	r4, #1
 801a168:	9305      	str	r3, [sp, #20]
 801a16a:	4619      	mov	r1, r3
 801a16c:	f04f 0c0a 	mov.w	ip, #10
 801a170:	4620      	mov	r0, r4
 801a172:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a176:	3a30      	subs	r2, #48	; 0x30
 801a178:	2a09      	cmp	r2, #9
 801a17a:	d903      	bls.n	801a184 <_vfiprintf_r+0x1d0>
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d0c6      	beq.n	801a10e <_vfiprintf_r+0x15a>
 801a180:	9105      	str	r1, [sp, #20]
 801a182:	e7c4      	b.n	801a10e <_vfiprintf_r+0x15a>
 801a184:	fb0c 2101 	mla	r1, ip, r1, r2
 801a188:	4604      	mov	r4, r0
 801a18a:	2301      	movs	r3, #1
 801a18c:	e7f0      	b.n	801a170 <_vfiprintf_r+0x1bc>
 801a18e:	ab03      	add	r3, sp, #12
 801a190:	9300      	str	r3, [sp, #0]
 801a192:	462a      	mov	r2, r5
 801a194:	4b12      	ldr	r3, [pc, #72]	; (801a1e0 <_vfiprintf_r+0x22c>)
 801a196:	a904      	add	r1, sp, #16
 801a198:	4630      	mov	r0, r6
 801a19a:	f7fc fcf3 	bl	8016b84 <_printf_float>
 801a19e:	4607      	mov	r7, r0
 801a1a0:	1c78      	adds	r0, r7, #1
 801a1a2:	d1d6      	bne.n	801a152 <_vfiprintf_r+0x19e>
 801a1a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1a6:	07d9      	lsls	r1, r3, #31
 801a1a8:	d405      	bmi.n	801a1b6 <_vfiprintf_r+0x202>
 801a1aa:	89ab      	ldrh	r3, [r5, #12]
 801a1ac:	059a      	lsls	r2, r3, #22
 801a1ae:	d402      	bmi.n	801a1b6 <_vfiprintf_r+0x202>
 801a1b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1b2:	f7fd fd29 	bl	8017c08 <__retarget_lock_release_recursive>
 801a1b6:	89ab      	ldrh	r3, [r5, #12]
 801a1b8:	065b      	lsls	r3, r3, #25
 801a1ba:	f53f af1d 	bmi.w	8019ff8 <_vfiprintf_r+0x44>
 801a1be:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1c0:	e71c      	b.n	8019ffc <_vfiprintf_r+0x48>
 801a1c2:	ab03      	add	r3, sp, #12
 801a1c4:	9300      	str	r3, [sp, #0]
 801a1c6:	462a      	mov	r2, r5
 801a1c8:	4b05      	ldr	r3, [pc, #20]	; (801a1e0 <_vfiprintf_r+0x22c>)
 801a1ca:	a904      	add	r1, sp, #16
 801a1cc:	4630      	mov	r0, r6
 801a1ce:	f7fc ff7d 	bl	80170cc <_printf_i>
 801a1d2:	e7e4      	b.n	801a19e <_vfiprintf_r+0x1ea>
 801a1d4:	0801e5f4 	.word	0x0801e5f4
 801a1d8:	0801e5fe 	.word	0x0801e5fe
 801a1dc:	08016b85 	.word	0x08016b85
 801a1e0:	08019f8f 	.word	0x08019f8f
 801a1e4:	0801e5fa 	.word	0x0801e5fa

0801a1e8 <__swbuf_r>:
 801a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ea:	460e      	mov	r6, r1
 801a1ec:	4614      	mov	r4, r2
 801a1ee:	4605      	mov	r5, r0
 801a1f0:	b118      	cbz	r0, 801a1fa <__swbuf_r+0x12>
 801a1f2:	6a03      	ldr	r3, [r0, #32]
 801a1f4:	b90b      	cbnz	r3, 801a1fa <__swbuf_r+0x12>
 801a1f6:	f7fd fb27 	bl	8017848 <__sinit>
 801a1fa:	69a3      	ldr	r3, [r4, #24]
 801a1fc:	60a3      	str	r3, [r4, #8]
 801a1fe:	89a3      	ldrh	r3, [r4, #12]
 801a200:	071a      	lsls	r2, r3, #28
 801a202:	d525      	bpl.n	801a250 <__swbuf_r+0x68>
 801a204:	6923      	ldr	r3, [r4, #16]
 801a206:	b31b      	cbz	r3, 801a250 <__swbuf_r+0x68>
 801a208:	6823      	ldr	r3, [r4, #0]
 801a20a:	6922      	ldr	r2, [r4, #16]
 801a20c:	1a98      	subs	r0, r3, r2
 801a20e:	6963      	ldr	r3, [r4, #20]
 801a210:	b2f6      	uxtb	r6, r6
 801a212:	4283      	cmp	r3, r0
 801a214:	4637      	mov	r7, r6
 801a216:	dc04      	bgt.n	801a222 <__swbuf_r+0x3a>
 801a218:	4621      	mov	r1, r4
 801a21a:	4628      	mov	r0, r5
 801a21c:	f7ff fe00 	bl	8019e20 <_fflush_r>
 801a220:	b9e0      	cbnz	r0, 801a25c <__swbuf_r+0x74>
 801a222:	68a3      	ldr	r3, [r4, #8]
 801a224:	3b01      	subs	r3, #1
 801a226:	60a3      	str	r3, [r4, #8]
 801a228:	6823      	ldr	r3, [r4, #0]
 801a22a:	1c5a      	adds	r2, r3, #1
 801a22c:	6022      	str	r2, [r4, #0]
 801a22e:	701e      	strb	r6, [r3, #0]
 801a230:	6962      	ldr	r2, [r4, #20]
 801a232:	1c43      	adds	r3, r0, #1
 801a234:	429a      	cmp	r2, r3
 801a236:	d004      	beq.n	801a242 <__swbuf_r+0x5a>
 801a238:	89a3      	ldrh	r3, [r4, #12]
 801a23a:	07db      	lsls	r3, r3, #31
 801a23c:	d506      	bpl.n	801a24c <__swbuf_r+0x64>
 801a23e:	2e0a      	cmp	r6, #10
 801a240:	d104      	bne.n	801a24c <__swbuf_r+0x64>
 801a242:	4621      	mov	r1, r4
 801a244:	4628      	mov	r0, r5
 801a246:	f7ff fdeb 	bl	8019e20 <_fflush_r>
 801a24a:	b938      	cbnz	r0, 801a25c <__swbuf_r+0x74>
 801a24c:	4638      	mov	r0, r7
 801a24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a250:	4621      	mov	r1, r4
 801a252:	4628      	mov	r0, r5
 801a254:	f000 f806 	bl	801a264 <__swsetup_r>
 801a258:	2800      	cmp	r0, #0
 801a25a:	d0d5      	beq.n	801a208 <__swbuf_r+0x20>
 801a25c:	f04f 37ff 	mov.w	r7, #4294967295
 801a260:	e7f4      	b.n	801a24c <__swbuf_r+0x64>
	...

0801a264 <__swsetup_r>:
 801a264:	b538      	push	{r3, r4, r5, lr}
 801a266:	4b2a      	ldr	r3, [pc, #168]	; (801a310 <__swsetup_r+0xac>)
 801a268:	4605      	mov	r5, r0
 801a26a:	6818      	ldr	r0, [r3, #0]
 801a26c:	460c      	mov	r4, r1
 801a26e:	b118      	cbz	r0, 801a278 <__swsetup_r+0x14>
 801a270:	6a03      	ldr	r3, [r0, #32]
 801a272:	b90b      	cbnz	r3, 801a278 <__swsetup_r+0x14>
 801a274:	f7fd fae8 	bl	8017848 <__sinit>
 801a278:	89a3      	ldrh	r3, [r4, #12]
 801a27a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a27e:	0718      	lsls	r0, r3, #28
 801a280:	d422      	bmi.n	801a2c8 <__swsetup_r+0x64>
 801a282:	06d9      	lsls	r1, r3, #27
 801a284:	d407      	bmi.n	801a296 <__swsetup_r+0x32>
 801a286:	2309      	movs	r3, #9
 801a288:	602b      	str	r3, [r5, #0]
 801a28a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a28e:	81a3      	strh	r3, [r4, #12]
 801a290:	f04f 30ff 	mov.w	r0, #4294967295
 801a294:	e034      	b.n	801a300 <__swsetup_r+0x9c>
 801a296:	0758      	lsls	r0, r3, #29
 801a298:	d512      	bpl.n	801a2c0 <__swsetup_r+0x5c>
 801a29a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a29c:	b141      	cbz	r1, 801a2b0 <__swsetup_r+0x4c>
 801a29e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a2a2:	4299      	cmp	r1, r3
 801a2a4:	d002      	beq.n	801a2ac <__swsetup_r+0x48>
 801a2a6:	4628      	mov	r0, r5
 801a2a8:	f7fe fb6c 	bl	8018984 <_free_r>
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	6363      	str	r3, [r4, #52]	; 0x34
 801a2b0:	89a3      	ldrh	r3, [r4, #12]
 801a2b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a2b6:	81a3      	strh	r3, [r4, #12]
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	6063      	str	r3, [r4, #4]
 801a2bc:	6923      	ldr	r3, [r4, #16]
 801a2be:	6023      	str	r3, [r4, #0]
 801a2c0:	89a3      	ldrh	r3, [r4, #12]
 801a2c2:	f043 0308 	orr.w	r3, r3, #8
 801a2c6:	81a3      	strh	r3, [r4, #12]
 801a2c8:	6923      	ldr	r3, [r4, #16]
 801a2ca:	b94b      	cbnz	r3, 801a2e0 <__swsetup_r+0x7c>
 801a2cc:	89a3      	ldrh	r3, [r4, #12]
 801a2ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a2d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2d6:	d003      	beq.n	801a2e0 <__swsetup_r+0x7c>
 801a2d8:	4621      	mov	r1, r4
 801a2da:	4628      	mov	r0, r5
 801a2dc:	f000 f88c 	bl	801a3f8 <__smakebuf_r>
 801a2e0:	89a0      	ldrh	r0, [r4, #12]
 801a2e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a2e6:	f010 0301 	ands.w	r3, r0, #1
 801a2ea:	d00a      	beq.n	801a302 <__swsetup_r+0x9e>
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	60a3      	str	r3, [r4, #8]
 801a2f0:	6963      	ldr	r3, [r4, #20]
 801a2f2:	425b      	negs	r3, r3
 801a2f4:	61a3      	str	r3, [r4, #24]
 801a2f6:	6923      	ldr	r3, [r4, #16]
 801a2f8:	b943      	cbnz	r3, 801a30c <__swsetup_r+0xa8>
 801a2fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a2fe:	d1c4      	bne.n	801a28a <__swsetup_r+0x26>
 801a300:	bd38      	pop	{r3, r4, r5, pc}
 801a302:	0781      	lsls	r1, r0, #30
 801a304:	bf58      	it	pl
 801a306:	6963      	ldrpl	r3, [r4, #20]
 801a308:	60a3      	str	r3, [r4, #8]
 801a30a:	e7f4      	b.n	801a2f6 <__swsetup_r+0x92>
 801a30c:	2000      	movs	r0, #0
 801a30e:	e7f7      	b.n	801a300 <__swsetup_r+0x9c>
 801a310:	200002f4 	.word	0x200002f4

0801a314 <_raise_r>:
 801a314:	291f      	cmp	r1, #31
 801a316:	b538      	push	{r3, r4, r5, lr}
 801a318:	4604      	mov	r4, r0
 801a31a:	460d      	mov	r5, r1
 801a31c:	d904      	bls.n	801a328 <_raise_r+0x14>
 801a31e:	2316      	movs	r3, #22
 801a320:	6003      	str	r3, [r0, #0]
 801a322:	f04f 30ff 	mov.w	r0, #4294967295
 801a326:	bd38      	pop	{r3, r4, r5, pc}
 801a328:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a32a:	b112      	cbz	r2, 801a332 <_raise_r+0x1e>
 801a32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a330:	b94b      	cbnz	r3, 801a346 <_raise_r+0x32>
 801a332:	4620      	mov	r0, r4
 801a334:	f000 f830 	bl	801a398 <_getpid_r>
 801a338:	462a      	mov	r2, r5
 801a33a:	4601      	mov	r1, r0
 801a33c:	4620      	mov	r0, r4
 801a33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a342:	f000 b817 	b.w	801a374 <_kill_r>
 801a346:	2b01      	cmp	r3, #1
 801a348:	d00a      	beq.n	801a360 <_raise_r+0x4c>
 801a34a:	1c59      	adds	r1, r3, #1
 801a34c:	d103      	bne.n	801a356 <_raise_r+0x42>
 801a34e:	2316      	movs	r3, #22
 801a350:	6003      	str	r3, [r0, #0]
 801a352:	2001      	movs	r0, #1
 801a354:	e7e7      	b.n	801a326 <_raise_r+0x12>
 801a356:	2400      	movs	r4, #0
 801a358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a35c:	4628      	mov	r0, r5
 801a35e:	4798      	blx	r3
 801a360:	2000      	movs	r0, #0
 801a362:	e7e0      	b.n	801a326 <_raise_r+0x12>

0801a364 <raise>:
 801a364:	4b02      	ldr	r3, [pc, #8]	; (801a370 <raise+0xc>)
 801a366:	4601      	mov	r1, r0
 801a368:	6818      	ldr	r0, [r3, #0]
 801a36a:	f7ff bfd3 	b.w	801a314 <_raise_r>
 801a36e:	bf00      	nop
 801a370:	200002f4 	.word	0x200002f4

0801a374 <_kill_r>:
 801a374:	b538      	push	{r3, r4, r5, lr}
 801a376:	4d07      	ldr	r5, [pc, #28]	; (801a394 <_kill_r+0x20>)
 801a378:	2300      	movs	r3, #0
 801a37a:	4604      	mov	r4, r0
 801a37c:	4608      	mov	r0, r1
 801a37e:	4611      	mov	r1, r2
 801a380:	602b      	str	r3, [r5, #0]
 801a382:	f7eb fea9 	bl	80060d8 <_kill>
 801a386:	1c43      	adds	r3, r0, #1
 801a388:	d102      	bne.n	801a390 <_kill_r+0x1c>
 801a38a:	682b      	ldr	r3, [r5, #0]
 801a38c:	b103      	cbz	r3, 801a390 <_kill_r+0x1c>
 801a38e:	6023      	str	r3, [r4, #0]
 801a390:	bd38      	pop	{r3, r4, r5, pc}
 801a392:	bf00      	nop
 801a394:	20002700 	.word	0x20002700

0801a398 <_getpid_r>:
 801a398:	f7eb be96 	b.w	80060c8 <_getpid>

0801a39c <_malloc_usable_size_r>:
 801a39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3a0:	1f18      	subs	r0, r3, #4
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	bfbc      	itt	lt
 801a3a6:	580b      	ldrlt	r3, [r1, r0]
 801a3a8:	18c0      	addlt	r0, r0, r3
 801a3aa:	4770      	bx	lr

0801a3ac <__swhatbuf_r>:
 801a3ac:	b570      	push	{r4, r5, r6, lr}
 801a3ae:	460c      	mov	r4, r1
 801a3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3b4:	2900      	cmp	r1, #0
 801a3b6:	b096      	sub	sp, #88	; 0x58
 801a3b8:	4615      	mov	r5, r2
 801a3ba:	461e      	mov	r6, r3
 801a3bc:	da0d      	bge.n	801a3da <__swhatbuf_r+0x2e>
 801a3be:	89a3      	ldrh	r3, [r4, #12]
 801a3c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a3c4:	f04f 0100 	mov.w	r1, #0
 801a3c8:	bf0c      	ite	eq
 801a3ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a3ce:	2340      	movne	r3, #64	; 0x40
 801a3d0:	2000      	movs	r0, #0
 801a3d2:	6031      	str	r1, [r6, #0]
 801a3d4:	602b      	str	r3, [r5, #0]
 801a3d6:	b016      	add	sp, #88	; 0x58
 801a3d8:	bd70      	pop	{r4, r5, r6, pc}
 801a3da:	466a      	mov	r2, sp
 801a3dc:	f000 f848 	bl	801a470 <_fstat_r>
 801a3e0:	2800      	cmp	r0, #0
 801a3e2:	dbec      	blt.n	801a3be <__swhatbuf_r+0x12>
 801a3e4:	9901      	ldr	r1, [sp, #4]
 801a3e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a3ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a3ee:	4259      	negs	r1, r3
 801a3f0:	4159      	adcs	r1, r3
 801a3f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a3f6:	e7eb      	b.n	801a3d0 <__swhatbuf_r+0x24>

0801a3f8 <__smakebuf_r>:
 801a3f8:	898b      	ldrh	r3, [r1, #12]
 801a3fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a3fc:	079d      	lsls	r5, r3, #30
 801a3fe:	4606      	mov	r6, r0
 801a400:	460c      	mov	r4, r1
 801a402:	d507      	bpl.n	801a414 <__smakebuf_r+0x1c>
 801a404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a408:	6023      	str	r3, [r4, #0]
 801a40a:	6123      	str	r3, [r4, #16]
 801a40c:	2301      	movs	r3, #1
 801a40e:	6163      	str	r3, [r4, #20]
 801a410:	b002      	add	sp, #8
 801a412:	bd70      	pop	{r4, r5, r6, pc}
 801a414:	ab01      	add	r3, sp, #4
 801a416:	466a      	mov	r2, sp
 801a418:	f7ff ffc8 	bl	801a3ac <__swhatbuf_r>
 801a41c:	9900      	ldr	r1, [sp, #0]
 801a41e:	4605      	mov	r5, r0
 801a420:	4630      	mov	r0, r6
 801a422:	f7fb fb7d 	bl	8015b20 <_malloc_r>
 801a426:	b948      	cbnz	r0, 801a43c <__smakebuf_r+0x44>
 801a428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a42c:	059a      	lsls	r2, r3, #22
 801a42e:	d4ef      	bmi.n	801a410 <__smakebuf_r+0x18>
 801a430:	f023 0303 	bic.w	r3, r3, #3
 801a434:	f043 0302 	orr.w	r3, r3, #2
 801a438:	81a3      	strh	r3, [r4, #12]
 801a43a:	e7e3      	b.n	801a404 <__smakebuf_r+0xc>
 801a43c:	89a3      	ldrh	r3, [r4, #12]
 801a43e:	6020      	str	r0, [r4, #0]
 801a440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a444:	81a3      	strh	r3, [r4, #12]
 801a446:	9b00      	ldr	r3, [sp, #0]
 801a448:	6163      	str	r3, [r4, #20]
 801a44a:	9b01      	ldr	r3, [sp, #4]
 801a44c:	6120      	str	r0, [r4, #16]
 801a44e:	b15b      	cbz	r3, 801a468 <__smakebuf_r+0x70>
 801a450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a454:	4630      	mov	r0, r6
 801a456:	f000 f81d 	bl	801a494 <_isatty_r>
 801a45a:	b128      	cbz	r0, 801a468 <__smakebuf_r+0x70>
 801a45c:	89a3      	ldrh	r3, [r4, #12]
 801a45e:	f023 0303 	bic.w	r3, r3, #3
 801a462:	f043 0301 	orr.w	r3, r3, #1
 801a466:	81a3      	strh	r3, [r4, #12]
 801a468:	89a3      	ldrh	r3, [r4, #12]
 801a46a:	431d      	orrs	r5, r3
 801a46c:	81a5      	strh	r5, [r4, #12]
 801a46e:	e7cf      	b.n	801a410 <__smakebuf_r+0x18>

0801a470 <_fstat_r>:
 801a470:	b538      	push	{r3, r4, r5, lr}
 801a472:	4d07      	ldr	r5, [pc, #28]	; (801a490 <_fstat_r+0x20>)
 801a474:	2300      	movs	r3, #0
 801a476:	4604      	mov	r4, r0
 801a478:	4608      	mov	r0, r1
 801a47a:	4611      	mov	r1, r2
 801a47c:	602b      	str	r3, [r5, #0]
 801a47e:	f7eb fe8a 	bl	8006196 <_fstat>
 801a482:	1c43      	adds	r3, r0, #1
 801a484:	d102      	bne.n	801a48c <_fstat_r+0x1c>
 801a486:	682b      	ldr	r3, [r5, #0]
 801a488:	b103      	cbz	r3, 801a48c <_fstat_r+0x1c>
 801a48a:	6023      	str	r3, [r4, #0]
 801a48c:	bd38      	pop	{r3, r4, r5, pc}
 801a48e:	bf00      	nop
 801a490:	20002700 	.word	0x20002700

0801a494 <_isatty_r>:
 801a494:	b538      	push	{r3, r4, r5, lr}
 801a496:	4d06      	ldr	r5, [pc, #24]	; (801a4b0 <_isatty_r+0x1c>)
 801a498:	2300      	movs	r3, #0
 801a49a:	4604      	mov	r4, r0
 801a49c:	4608      	mov	r0, r1
 801a49e:	602b      	str	r3, [r5, #0]
 801a4a0:	f7eb fe89 	bl	80061b6 <_isatty>
 801a4a4:	1c43      	adds	r3, r0, #1
 801a4a6:	d102      	bne.n	801a4ae <_isatty_r+0x1a>
 801a4a8:	682b      	ldr	r3, [r5, #0]
 801a4aa:	b103      	cbz	r3, 801a4ae <_isatty_r+0x1a>
 801a4ac:	6023      	str	r3, [r4, #0]
 801a4ae:	bd38      	pop	{r3, r4, r5, pc}
 801a4b0:	20002700 	.word	0x20002700
 801a4b4:	00000000 	.word	0x00000000

0801a4b8 <cos>:
 801a4b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a4ba:	ec53 2b10 	vmov	r2, r3, d0
 801a4be:	4826      	ldr	r0, [pc, #152]	; (801a558 <cos+0xa0>)
 801a4c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a4c4:	4281      	cmp	r1, r0
 801a4c6:	dc06      	bgt.n	801a4d6 <cos+0x1e>
 801a4c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801a550 <cos+0x98>
 801a4cc:	b005      	add	sp, #20
 801a4ce:	f85d eb04 	ldr.w	lr, [sp], #4
 801a4d2:	f000 b9e9 	b.w	801a8a8 <__kernel_cos>
 801a4d6:	4821      	ldr	r0, [pc, #132]	; (801a55c <cos+0xa4>)
 801a4d8:	4281      	cmp	r1, r0
 801a4da:	dd09      	ble.n	801a4f0 <cos+0x38>
 801a4dc:	ee10 0a10 	vmov	r0, s0
 801a4e0:	4619      	mov	r1, r3
 801a4e2:	f7e5 fed1 	bl	8000288 <__aeabi_dsub>
 801a4e6:	ec41 0b10 	vmov	d0, r0, r1
 801a4ea:	b005      	add	sp, #20
 801a4ec:	f85d fb04 	ldr.w	pc, [sp], #4
 801a4f0:	4668      	mov	r0, sp
 801a4f2:	f000 fb61 	bl	801abb8 <__ieee754_rem_pio2>
 801a4f6:	f000 0003 	and.w	r0, r0, #3
 801a4fa:	2801      	cmp	r0, #1
 801a4fc:	d00b      	beq.n	801a516 <cos+0x5e>
 801a4fe:	2802      	cmp	r0, #2
 801a500:	d016      	beq.n	801a530 <cos+0x78>
 801a502:	b9e0      	cbnz	r0, 801a53e <cos+0x86>
 801a504:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a508:	ed9d 0b00 	vldr	d0, [sp]
 801a50c:	f000 f9cc 	bl	801a8a8 <__kernel_cos>
 801a510:	ec51 0b10 	vmov	r0, r1, d0
 801a514:	e7e7      	b.n	801a4e6 <cos+0x2e>
 801a516:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a51a:	ed9d 0b00 	vldr	d0, [sp]
 801a51e:	f000 fa8b 	bl	801aa38 <__kernel_sin>
 801a522:	ec53 2b10 	vmov	r2, r3, d0
 801a526:	ee10 0a10 	vmov	r0, s0
 801a52a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a52e:	e7da      	b.n	801a4e6 <cos+0x2e>
 801a530:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a534:	ed9d 0b00 	vldr	d0, [sp]
 801a538:	f000 f9b6 	bl	801a8a8 <__kernel_cos>
 801a53c:	e7f1      	b.n	801a522 <cos+0x6a>
 801a53e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a542:	ed9d 0b00 	vldr	d0, [sp]
 801a546:	2001      	movs	r0, #1
 801a548:	f000 fa76 	bl	801aa38 <__kernel_sin>
 801a54c:	e7e0      	b.n	801a510 <cos+0x58>
 801a54e:	bf00      	nop
	...
 801a558:	3fe921fb 	.word	0x3fe921fb
 801a55c:	7fefffff 	.word	0x7fefffff

0801a560 <sin>:
 801a560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a562:	ec53 2b10 	vmov	r2, r3, d0
 801a566:	4828      	ldr	r0, [pc, #160]	; (801a608 <sin+0xa8>)
 801a568:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a56c:	4281      	cmp	r1, r0
 801a56e:	dc07      	bgt.n	801a580 <sin+0x20>
 801a570:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801a600 <sin+0xa0>
 801a574:	2000      	movs	r0, #0
 801a576:	b005      	add	sp, #20
 801a578:	f85d eb04 	ldr.w	lr, [sp], #4
 801a57c:	f000 ba5c 	b.w	801aa38 <__kernel_sin>
 801a580:	4822      	ldr	r0, [pc, #136]	; (801a60c <sin+0xac>)
 801a582:	4281      	cmp	r1, r0
 801a584:	dd09      	ble.n	801a59a <sin+0x3a>
 801a586:	ee10 0a10 	vmov	r0, s0
 801a58a:	4619      	mov	r1, r3
 801a58c:	f7e5 fe7c 	bl	8000288 <__aeabi_dsub>
 801a590:	ec41 0b10 	vmov	d0, r0, r1
 801a594:	b005      	add	sp, #20
 801a596:	f85d fb04 	ldr.w	pc, [sp], #4
 801a59a:	4668      	mov	r0, sp
 801a59c:	f000 fb0c 	bl	801abb8 <__ieee754_rem_pio2>
 801a5a0:	f000 0003 	and.w	r0, r0, #3
 801a5a4:	2801      	cmp	r0, #1
 801a5a6:	d00c      	beq.n	801a5c2 <sin+0x62>
 801a5a8:	2802      	cmp	r0, #2
 801a5aa:	d011      	beq.n	801a5d0 <sin+0x70>
 801a5ac:	b9f0      	cbnz	r0, 801a5ec <sin+0x8c>
 801a5ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a5b2:	ed9d 0b00 	vldr	d0, [sp]
 801a5b6:	2001      	movs	r0, #1
 801a5b8:	f000 fa3e 	bl	801aa38 <__kernel_sin>
 801a5bc:	ec51 0b10 	vmov	r0, r1, d0
 801a5c0:	e7e6      	b.n	801a590 <sin+0x30>
 801a5c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a5c6:	ed9d 0b00 	vldr	d0, [sp]
 801a5ca:	f000 f96d 	bl	801a8a8 <__kernel_cos>
 801a5ce:	e7f5      	b.n	801a5bc <sin+0x5c>
 801a5d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a5d4:	ed9d 0b00 	vldr	d0, [sp]
 801a5d8:	2001      	movs	r0, #1
 801a5da:	f000 fa2d 	bl	801aa38 <__kernel_sin>
 801a5de:	ec53 2b10 	vmov	r2, r3, d0
 801a5e2:	ee10 0a10 	vmov	r0, s0
 801a5e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a5ea:	e7d1      	b.n	801a590 <sin+0x30>
 801a5ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a5f0:	ed9d 0b00 	vldr	d0, [sp]
 801a5f4:	f000 f958 	bl	801a8a8 <__kernel_cos>
 801a5f8:	e7f1      	b.n	801a5de <sin+0x7e>
 801a5fa:	bf00      	nop
 801a5fc:	f3af 8000 	nop.w
	...
 801a608:	3fe921fb 	.word	0x3fe921fb
 801a60c:	7fefffff 	.word	0x7fefffff

0801a610 <expf>:
 801a610:	b508      	push	{r3, lr}
 801a612:	ed2d 8b02 	vpush	{d8}
 801a616:	eef0 8a40 	vmov.f32	s17, s0
 801a61a:	f000 fd11 	bl	801b040 <__ieee754_expf>
 801a61e:	eeb0 8a40 	vmov.f32	s16, s0
 801a622:	eeb0 0a68 	vmov.f32	s0, s17
 801a626:	f000 f8a9 	bl	801a77c <finitef>
 801a62a:	b160      	cbz	r0, 801a646 <expf+0x36>
 801a62c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801a66c <expf+0x5c>
 801a630:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a638:	dd0a      	ble.n	801a650 <expf+0x40>
 801a63a:	f7fd fab9 	bl	8017bb0 <__errno>
 801a63e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801a670 <expf+0x60>
 801a642:	2322      	movs	r3, #34	; 0x22
 801a644:	6003      	str	r3, [r0, #0]
 801a646:	eeb0 0a48 	vmov.f32	s0, s16
 801a64a:	ecbd 8b02 	vpop	{d8}
 801a64e:	bd08      	pop	{r3, pc}
 801a650:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a674 <expf+0x64>
 801a654:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a65c:	d5f3      	bpl.n	801a646 <expf+0x36>
 801a65e:	f7fd faa7 	bl	8017bb0 <__errno>
 801a662:	2322      	movs	r3, #34	; 0x22
 801a664:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801a678 <expf+0x68>
 801a668:	6003      	str	r3, [r0, #0]
 801a66a:	e7ec      	b.n	801a646 <expf+0x36>
 801a66c:	42b17217 	.word	0x42b17217
 801a670:	7f800000 	.word	0x7f800000
 801a674:	c2cff1b5 	.word	0xc2cff1b5
 801a678:	00000000 	.word	0x00000000

0801a67c <logf>:
 801a67c:	b508      	push	{r3, lr}
 801a67e:	ed2d 8b02 	vpush	{d8}
 801a682:	eeb0 8a40 	vmov.f32	s16, s0
 801a686:	f000 fda9 	bl	801b1dc <__ieee754_logf>
 801a68a:	eeb4 8a48 	vcmp.f32	s16, s16
 801a68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a692:	d60f      	bvs.n	801a6b4 <logf+0x38>
 801a694:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a69c:	dc0a      	bgt.n	801a6b4 <logf+0x38>
 801a69e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6a6:	d108      	bne.n	801a6ba <logf+0x3e>
 801a6a8:	f7fd fa82 	bl	8017bb0 <__errno>
 801a6ac:	2322      	movs	r3, #34	; 0x22
 801a6ae:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801a6d0 <logf+0x54>
 801a6b2:	6003      	str	r3, [r0, #0]
 801a6b4:	ecbd 8b02 	vpop	{d8}
 801a6b8:	bd08      	pop	{r3, pc}
 801a6ba:	f7fd fa79 	bl	8017bb0 <__errno>
 801a6be:	ecbd 8b02 	vpop	{d8}
 801a6c2:	2321      	movs	r3, #33	; 0x21
 801a6c4:	6003      	str	r3, [r0, #0]
 801a6c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a6ca:	4802      	ldr	r0, [pc, #8]	; (801a6d4 <logf+0x58>)
 801a6cc:	f7fd babc 	b.w	8017c48 <nanf>
 801a6d0:	ff800000 	.word	0xff800000
 801a6d4:	0801e3c6 	.word	0x0801e3c6

0801a6d8 <fmin>:
 801a6d8:	b508      	push	{r3, lr}
 801a6da:	ed2d 8b04 	vpush	{d8-d9}
 801a6de:	eeb0 8a40 	vmov.f32	s16, s0
 801a6e2:	eef0 8a60 	vmov.f32	s17, s1
 801a6e6:	eeb0 9a41 	vmov.f32	s18, s2
 801a6ea:	eef0 9a61 	vmov.f32	s19, s3
 801a6ee:	f000 f81b 	bl	801a728 <__fpclassifyd>
 801a6f2:	b168      	cbz	r0, 801a710 <fmin+0x38>
 801a6f4:	eeb0 0a49 	vmov.f32	s0, s18
 801a6f8:	eef0 0a69 	vmov.f32	s1, s19
 801a6fc:	f000 f814 	bl	801a728 <__fpclassifyd>
 801a700:	b150      	cbz	r0, 801a718 <fmin+0x40>
 801a702:	ec53 2b19 	vmov	r2, r3, d9
 801a706:	ec51 0b18 	vmov	r0, r1, d8
 801a70a:	f7e6 f9e7 	bl	8000adc <__aeabi_dcmplt>
 801a70e:	b918      	cbnz	r0, 801a718 <fmin+0x40>
 801a710:	eeb0 8a49 	vmov.f32	s16, s18
 801a714:	eef0 8a69 	vmov.f32	s17, s19
 801a718:	eeb0 0a48 	vmov.f32	s0, s16
 801a71c:	eef0 0a68 	vmov.f32	s1, s17
 801a720:	ecbd 8b04 	vpop	{d8-d9}
 801a724:	bd08      	pop	{r3, pc}
	...

0801a728 <__fpclassifyd>:
 801a728:	ec51 0b10 	vmov	r0, r1, d0
 801a72c:	b510      	push	{r4, lr}
 801a72e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801a732:	460b      	mov	r3, r1
 801a734:	d019      	beq.n	801a76a <__fpclassifyd+0x42>
 801a736:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801a73a:	490e      	ldr	r1, [pc, #56]	; (801a774 <__fpclassifyd+0x4c>)
 801a73c:	428a      	cmp	r2, r1
 801a73e:	d90e      	bls.n	801a75e <__fpclassifyd+0x36>
 801a740:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801a744:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 801a748:	428a      	cmp	r2, r1
 801a74a:	d908      	bls.n	801a75e <__fpclassifyd+0x36>
 801a74c:	4a0a      	ldr	r2, [pc, #40]	; (801a778 <__fpclassifyd+0x50>)
 801a74e:	4213      	tst	r3, r2
 801a750:	d007      	beq.n	801a762 <__fpclassifyd+0x3a>
 801a752:	4294      	cmp	r4, r2
 801a754:	d107      	bne.n	801a766 <__fpclassifyd+0x3e>
 801a756:	fab0 f080 	clz	r0, r0
 801a75a:	0940      	lsrs	r0, r0, #5
 801a75c:	bd10      	pop	{r4, pc}
 801a75e:	2004      	movs	r0, #4
 801a760:	e7fc      	b.n	801a75c <__fpclassifyd+0x34>
 801a762:	2003      	movs	r0, #3
 801a764:	e7fa      	b.n	801a75c <__fpclassifyd+0x34>
 801a766:	2000      	movs	r0, #0
 801a768:	e7f8      	b.n	801a75c <__fpclassifyd+0x34>
 801a76a:	2800      	cmp	r0, #0
 801a76c:	d1ee      	bne.n	801a74c <__fpclassifyd+0x24>
 801a76e:	2002      	movs	r0, #2
 801a770:	e7f4      	b.n	801a75c <__fpclassifyd+0x34>
 801a772:	bf00      	nop
 801a774:	7fdfffff 	.word	0x7fdfffff
 801a778:	7ff00000 	.word	0x7ff00000

0801a77c <finitef>:
 801a77c:	b082      	sub	sp, #8
 801a77e:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a782:	9801      	ldr	r0, [sp, #4]
 801a784:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a788:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a78c:	bfac      	ite	ge
 801a78e:	2000      	movge	r0, #0
 801a790:	2001      	movlt	r0, #1
 801a792:	b002      	add	sp, #8
 801a794:	4770      	bx	lr

0801a796 <cosl>:
 801a796:	f7ff be8f 	b.w	801a4b8 <cos>

0801a79a <sinl>:
 801a79a:	f7ff bee1 	b.w	801a560 <sin>

0801a79e <acosl>:
 801a79e:	f000 bc11 	b.w	801afc4 <acos>
 801a7a2:	0000      	movs	r0, r0
 801a7a4:	0000      	movs	r0, r0
	...

0801a7a8 <floor>:
 801a7a8:	ec51 0b10 	vmov	r0, r1, d0
 801a7ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801a7b8:	2e13      	cmp	r6, #19
 801a7ba:	ee10 5a10 	vmov	r5, s0
 801a7be:	ee10 8a10 	vmov	r8, s0
 801a7c2:	460c      	mov	r4, r1
 801a7c4:	dc31      	bgt.n	801a82a <floor+0x82>
 801a7c6:	2e00      	cmp	r6, #0
 801a7c8:	da14      	bge.n	801a7f4 <floor+0x4c>
 801a7ca:	a333      	add	r3, pc, #204	; (adr r3, 801a898 <floor+0xf0>)
 801a7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7d0:	f7e5 fd5c 	bl	800028c <__adddf3>
 801a7d4:	2200      	movs	r2, #0
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	f7e6 f99e 	bl	8000b18 <__aeabi_dcmpgt>
 801a7dc:	b138      	cbz	r0, 801a7ee <floor+0x46>
 801a7de:	2c00      	cmp	r4, #0
 801a7e0:	da53      	bge.n	801a88a <floor+0xe2>
 801a7e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801a7e6:	4325      	orrs	r5, r4
 801a7e8:	d052      	beq.n	801a890 <floor+0xe8>
 801a7ea:	4c2d      	ldr	r4, [pc, #180]	; (801a8a0 <floor+0xf8>)
 801a7ec:	2500      	movs	r5, #0
 801a7ee:	4621      	mov	r1, r4
 801a7f0:	4628      	mov	r0, r5
 801a7f2:	e024      	b.n	801a83e <floor+0x96>
 801a7f4:	4f2b      	ldr	r7, [pc, #172]	; (801a8a4 <floor+0xfc>)
 801a7f6:	4137      	asrs	r7, r6
 801a7f8:	ea01 0307 	and.w	r3, r1, r7
 801a7fc:	4303      	orrs	r3, r0
 801a7fe:	d01e      	beq.n	801a83e <floor+0x96>
 801a800:	a325      	add	r3, pc, #148	; (adr r3, 801a898 <floor+0xf0>)
 801a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a806:	f7e5 fd41 	bl	800028c <__adddf3>
 801a80a:	2200      	movs	r2, #0
 801a80c:	2300      	movs	r3, #0
 801a80e:	f7e6 f983 	bl	8000b18 <__aeabi_dcmpgt>
 801a812:	2800      	cmp	r0, #0
 801a814:	d0eb      	beq.n	801a7ee <floor+0x46>
 801a816:	2c00      	cmp	r4, #0
 801a818:	bfbe      	ittt	lt
 801a81a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a81e:	4133      	asrlt	r3, r6
 801a820:	18e4      	addlt	r4, r4, r3
 801a822:	ea24 0407 	bic.w	r4, r4, r7
 801a826:	2500      	movs	r5, #0
 801a828:	e7e1      	b.n	801a7ee <floor+0x46>
 801a82a:	2e33      	cmp	r6, #51	; 0x33
 801a82c:	dd0b      	ble.n	801a846 <floor+0x9e>
 801a82e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a832:	d104      	bne.n	801a83e <floor+0x96>
 801a834:	ee10 2a10 	vmov	r2, s0
 801a838:	460b      	mov	r3, r1
 801a83a:	f7e5 fd27 	bl	800028c <__adddf3>
 801a83e:	ec41 0b10 	vmov	d0, r0, r1
 801a842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a846:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801a84a:	f04f 37ff 	mov.w	r7, #4294967295
 801a84e:	40df      	lsrs	r7, r3
 801a850:	4238      	tst	r0, r7
 801a852:	d0f4      	beq.n	801a83e <floor+0x96>
 801a854:	a310      	add	r3, pc, #64	; (adr r3, 801a898 <floor+0xf0>)
 801a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a85a:	f7e5 fd17 	bl	800028c <__adddf3>
 801a85e:	2200      	movs	r2, #0
 801a860:	2300      	movs	r3, #0
 801a862:	f7e6 f959 	bl	8000b18 <__aeabi_dcmpgt>
 801a866:	2800      	cmp	r0, #0
 801a868:	d0c1      	beq.n	801a7ee <floor+0x46>
 801a86a:	2c00      	cmp	r4, #0
 801a86c:	da0a      	bge.n	801a884 <floor+0xdc>
 801a86e:	2e14      	cmp	r6, #20
 801a870:	d101      	bne.n	801a876 <floor+0xce>
 801a872:	3401      	adds	r4, #1
 801a874:	e006      	b.n	801a884 <floor+0xdc>
 801a876:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a87a:	2301      	movs	r3, #1
 801a87c:	40b3      	lsls	r3, r6
 801a87e:	441d      	add	r5, r3
 801a880:	45a8      	cmp	r8, r5
 801a882:	d8f6      	bhi.n	801a872 <floor+0xca>
 801a884:	ea25 0507 	bic.w	r5, r5, r7
 801a888:	e7b1      	b.n	801a7ee <floor+0x46>
 801a88a:	2500      	movs	r5, #0
 801a88c:	462c      	mov	r4, r5
 801a88e:	e7ae      	b.n	801a7ee <floor+0x46>
 801a890:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a894:	e7ab      	b.n	801a7ee <floor+0x46>
 801a896:	bf00      	nop
 801a898:	8800759c 	.word	0x8800759c
 801a89c:	7e37e43c 	.word	0x7e37e43c
 801a8a0:	bff00000 	.word	0xbff00000
 801a8a4:	000fffff 	.word	0x000fffff

0801a8a8 <__kernel_cos>:
 801a8a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8ac:	ec57 6b10 	vmov	r6, r7, d0
 801a8b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a8b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801a8b8:	ed8d 1b00 	vstr	d1, [sp]
 801a8bc:	da07      	bge.n	801a8ce <__kernel_cos+0x26>
 801a8be:	ee10 0a10 	vmov	r0, s0
 801a8c2:	4639      	mov	r1, r7
 801a8c4:	f7e6 f948 	bl	8000b58 <__aeabi_d2iz>
 801a8c8:	2800      	cmp	r0, #0
 801a8ca:	f000 8088 	beq.w	801a9de <__kernel_cos+0x136>
 801a8ce:	4632      	mov	r2, r6
 801a8d0:	463b      	mov	r3, r7
 801a8d2:	4630      	mov	r0, r6
 801a8d4:	4639      	mov	r1, r7
 801a8d6:	f7e5 fe8f 	bl	80005f8 <__aeabi_dmul>
 801a8da:	4b51      	ldr	r3, [pc, #324]	; (801aa20 <__kernel_cos+0x178>)
 801a8dc:	2200      	movs	r2, #0
 801a8de:	4604      	mov	r4, r0
 801a8e0:	460d      	mov	r5, r1
 801a8e2:	f7e5 fe89 	bl	80005f8 <__aeabi_dmul>
 801a8e6:	a340      	add	r3, pc, #256	; (adr r3, 801a9e8 <__kernel_cos+0x140>)
 801a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ec:	4682      	mov	sl, r0
 801a8ee:	468b      	mov	fp, r1
 801a8f0:	4620      	mov	r0, r4
 801a8f2:	4629      	mov	r1, r5
 801a8f4:	f7e5 fe80 	bl	80005f8 <__aeabi_dmul>
 801a8f8:	a33d      	add	r3, pc, #244	; (adr r3, 801a9f0 <__kernel_cos+0x148>)
 801a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8fe:	f7e5 fcc5 	bl	800028c <__adddf3>
 801a902:	4622      	mov	r2, r4
 801a904:	462b      	mov	r3, r5
 801a906:	f7e5 fe77 	bl	80005f8 <__aeabi_dmul>
 801a90a:	a33b      	add	r3, pc, #236	; (adr r3, 801a9f8 <__kernel_cos+0x150>)
 801a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a910:	f7e5 fcba 	bl	8000288 <__aeabi_dsub>
 801a914:	4622      	mov	r2, r4
 801a916:	462b      	mov	r3, r5
 801a918:	f7e5 fe6e 	bl	80005f8 <__aeabi_dmul>
 801a91c:	a338      	add	r3, pc, #224	; (adr r3, 801aa00 <__kernel_cos+0x158>)
 801a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a922:	f7e5 fcb3 	bl	800028c <__adddf3>
 801a926:	4622      	mov	r2, r4
 801a928:	462b      	mov	r3, r5
 801a92a:	f7e5 fe65 	bl	80005f8 <__aeabi_dmul>
 801a92e:	a336      	add	r3, pc, #216	; (adr r3, 801aa08 <__kernel_cos+0x160>)
 801a930:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a934:	f7e5 fca8 	bl	8000288 <__aeabi_dsub>
 801a938:	4622      	mov	r2, r4
 801a93a:	462b      	mov	r3, r5
 801a93c:	f7e5 fe5c 	bl	80005f8 <__aeabi_dmul>
 801a940:	a333      	add	r3, pc, #204	; (adr r3, 801aa10 <__kernel_cos+0x168>)
 801a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a946:	f7e5 fca1 	bl	800028c <__adddf3>
 801a94a:	4622      	mov	r2, r4
 801a94c:	462b      	mov	r3, r5
 801a94e:	f7e5 fe53 	bl	80005f8 <__aeabi_dmul>
 801a952:	4622      	mov	r2, r4
 801a954:	462b      	mov	r3, r5
 801a956:	f7e5 fe4f 	bl	80005f8 <__aeabi_dmul>
 801a95a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a95e:	4604      	mov	r4, r0
 801a960:	460d      	mov	r5, r1
 801a962:	4630      	mov	r0, r6
 801a964:	4639      	mov	r1, r7
 801a966:	f7e5 fe47 	bl	80005f8 <__aeabi_dmul>
 801a96a:	460b      	mov	r3, r1
 801a96c:	4602      	mov	r2, r0
 801a96e:	4629      	mov	r1, r5
 801a970:	4620      	mov	r0, r4
 801a972:	f7e5 fc89 	bl	8000288 <__aeabi_dsub>
 801a976:	4b2b      	ldr	r3, [pc, #172]	; (801aa24 <__kernel_cos+0x17c>)
 801a978:	4598      	cmp	r8, r3
 801a97a:	4606      	mov	r6, r0
 801a97c:	460f      	mov	r7, r1
 801a97e:	dc10      	bgt.n	801a9a2 <__kernel_cos+0xfa>
 801a980:	4602      	mov	r2, r0
 801a982:	460b      	mov	r3, r1
 801a984:	4650      	mov	r0, sl
 801a986:	4659      	mov	r1, fp
 801a988:	f7e5 fc7e 	bl	8000288 <__aeabi_dsub>
 801a98c:	460b      	mov	r3, r1
 801a98e:	4926      	ldr	r1, [pc, #152]	; (801aa28 <__kernel_cos+0x180>)
 801a990:	4602      	mov	r2, r0
 801a992:	2000      	movs	r0, #0
 801a994:	f7e5 fc78 	bl	8000288 <__aeabi_dsub>
 801a998:	ec41 0b10 	vmov	d0, r0, r1
 801a99c:	b003      	add	sp, #12
 801a99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9a2:	4b22      	ldr	r3, [pc, #136]	; (801aa2c <__kernel_cos+0x184>)
 801a9a4:	4920      	ldr	r1, [pc, #128]	; (801aa28 <__kernel_cos+0x180>)
 801a9a6:	4598      	cmp	r8, r3
 801a9a8:	bfcc      	ite	gt
 801a9aa:	4d21      	ldrgt	r5, [pc, #132]	; (801aa30 <__kernel_cos+0x188>)
 801a9ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801a9b0:	2400      	movs	r4, #0
 801a9b2:	4622      	mov	r2, r4
 801a9b4:	462b      	mov	r3, r5
 801a9b6:	2000      	movs	r0, #0
 801a9b8:	f7e5 fc66 	bl	8000288 <__aeabi_dsub>
 801a9bc:	4622      	mov	r2, r4
 801a9be:	4680      	mov	r8, r0
 801a9c0:	4689      	mov	r9, r1
 801a9c2:	462b      	mov	r3, r5
 801a9c4:	4650      	mov	r0, sl
 801a9c6:	4659      	mov	r1, fp
 801a9c8:	f7e5 fc5e 	bl	8000288 <__aeabi_dsub>
 801a9cc:	4632      	mov	r2, r6
 801a9ce:	463b      	mov	r3, r7
 801a9d0:	f7e5 fc5a 	bl	8000288 <__aeabi_dsub>
 801a9d4:	4602      	mov	r2, r0
 801a9d6:	460b      	mov	r3, r1
 801a9d8:	4640      	mov	r0, r8
 801a9da:	4649      	mov	r1, r9
 801a9dc:	e7da      	b.n	801a994 <__kernel_cos+0xec>
 801a9de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801aa18 <__kernel_cos+0x170>
 801a9e2:	e7db      	b.n	801a99c <__kernel_cos+0xf4>
 801a9e4:	f3af 8000 	nop.w
 801a9e8:	be8838d4 	.word	0xbe8838d4
 801a9ec:	bda8fae9 	.word	0xbda8fae9
 801a9f0:	bdb4b1c4 	.word	0xbdb4b1c4
 801a9f4:	3e21ee9e 	.word	0x3e21ee9e
 801a9f8:	809c52ad 	.word	0x809c52ad
 801a9fc:	3e927e4f 	.word	0x3e927e4f
 801aa00:	19cb1590 	.word	0x19cb1590
 801aa04:	3efa01a0 	.word	0x3efa01a0
 801aa08:	16c15177 	.word	0x16c15177
 801aa0c:	3f56c16c 	.word	0x3f56c16c
 801aa10:	5555554c 	.word	0x5555554c
 801aa14:	3fa55555 	.word	0x3fa55555
 801aa18:	00000000 	.word	0x00000000
 801aa1c:	3ff00000 	.word	0x3ff00000
 801aa20:	3fe00000 	.word	0x3fe00000
 801aa24:	3fd33332 	.word	0x3fd33332
 801aa28:	3ff00000 	.word	0x3ff00000
 801aa2c:	3fe90000 	.word	0x3fe90000
 801aa30:	3fd20000 	.word	0x3fd20000
 801aa34:	00000000 	.word	0x00000000

0801aa38 <__kernel_sin>:
 801aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa3c:	ed2d 8b04 	vpush	{d8-d9}
 801aa40:	eeb0 8a41 	vmov.f32	s16, s2
 801aa44:	eef0 8a61 	vmov.f32	s17, s3
 801aa48:	ec55 4b10 	vmov	r4, r5, d0
 801aa4c:	b083      	sub	sp, #12
 801aa4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aa52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801aa56:	9001      	str	r0, [sp, #4]
 801aa58:	da06      	bge.n	801aa68 <__kernel_sin+0x30>
 801aa5a:	ee10 0a10 	vmov	r0, s0
 801aa5e:	4629      	mov	r1, r5
 801aa60:	f7e6 f87a 	bl	8000b58 <__aeabi_d2iz>
 801aa64:	2800      	cmp	r0, #0
 801aa66:	d051      	beq.n	801ab0c <__kernel_sin+0xd4>
 801aa68:	4622      	mov	r2, r4
 801aa6a:	462b      	mov	r3, r5
 801aa6c:	4620      	mov	r0, r4
 801aa6e:	4629      	mov	r1, r5
 801aa70:	f7e5 fdc2 	bl	80005f8 <__aeabi_dmul>
 801aa74:	4682      	mov	sl, r0
 801aa76:	468b      	mov	fp, r1
 801aa78:	4602      	mov	r2, r0
 801aa7a:	460b      	mov	r3, r1
 801aa7c:	4620      	mov	r0, r4
 801aa7e:	4629      	mov	r1, r5
 801aa80:	f7e5 fdba 	bl	80005f8 <__aeabi_dmul>
 801aa84:	a341      	add	r3, pc, #260	; (adr r3, 801ab8c <__kernel_sin+0x154>)
 801aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa8a:	4680      	mov	r8, r0
 801aa8c:	4689      	mov	r9, r1
 801aa8e:	4650      	mov	r0, sl
 801aa90:	4659      	mov	r1, fp
 801aa92:	f7e5 fdb1 	bl	80005f8 <__aeabi_dmul>
 801aa96:	a33f      	add	r3, pc, #252	; (adr r3, 801ab94 <__kernel_sin+0x15c>)
 801aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa9c:	f7e5 fbf4 	bl	8000288 <__aeabi_dsub>
 801aaa0:	4652      	mov	r2, sl
 801aaa2:	465b      	mov	r3, fp
 801aaa4:	f7e5 fda8 	bl	80005f8 <__aeabi_dmul>
 801aaa8:	a33c      	add	r3, pc, #240	; (adr r3, 801ab9c <__kernel_sin+0x164>)
 801aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaae:	f7e5 fbed 	bl	800028c <__adddf3>
 801aab2:	4652      	mov	r2, sl
 801aab4:	465b      	mov	r3, fp
 801aab6:	f7e5 fd9f 	bl	80005f8 <__aeabi_dmul>
 801aaba:	a33a      	add	r3, pc, #232	; (adr r3, 801aba4 <__kernel_sin+0x16c>)
 801aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aac0:	f7e5 fbe2 	bl	8000288 <__aeabi_dsub>
 801aac4:	4652      	mov	r2, sl
 801aac6:	465b      	mov	r3, fp
 801aac8:	f7e5 fd96 	bl	80005f8 <__aeabi_dmul>
 801aacc:	a337      	add	r3, pc, #220	; (adr r3, 801abac <__kernel_sin+0x174>)
 801aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad2:	f7e5 fbdb 	bl	800028c <__adddf3>
 801aad6:	9b01      	ldr	r3, [sp, #4]
 801aad8:	4606      	mov	r6, r0
 801aada:	460f      	mov	r7, r1
 801aadc:	b9eb      	cbnz	r3, 801ab1a <__kernel_sin+0xe2>
 801aade:	4602      	mov	r2, r0
 801aae0:	460b      	mov	r3, r1
 801aae2:	4650      	mov	r0, sl
 801aae4:	4659      	mov	r1, fp
 801aae6:	f7e5 fd87 	bl	80005f8 <__aeabi_dmul>
 801aaea:	a325      	add	r3, pc, #148	; (adr r3, 801ab80 <__kernel_sin+0x148>)
 801aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaf0:	f7e5 fbca 	bl	8000288 <__aeabi_dsub>
 801aaf4:	4642      	mov	r2, r8
 801aaf6:	464b      	mov	r3, r9
 801aaf8:	f7e5 fd7e 	bl	80005f8 <__aeabi_dmul>
 801aafc:	4602      	mov	r2, r0
 801aafe:	460b      	mov	r3, r1
 801ab00:	4620      	mov	r0, r4
 801ab02:	4629      	mov	r1, r5
 801ab04:	f7e5 fbc2 	bl	800028c <__adddf3>
 801ab08:	4604      	mov	r4, r0
 801ab0a:	460d      	mov	r5, r1
 801ab0c:	ec45 4b10 	vmov	d0, r4, r5
 801ab10:	b003      	add	sp, #12
 801ab12:	ecbd 8b04 	vpop	{d8-d9}
 801ab16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab1a:	4b1b      	ldr	r3, [pc, #108]	; (801ab88 <__kernel_sin+0x150>)
 801ab1c:	ec51 0b18 	vmov	r0, r1, d8
 801ab20:	2200      	movs	r2, #0
 801ab22:	f7e5 fd69 	bl	80005f8 <__aeabi_dmul>
 801ab26:	4632      	mov	r2, r6
 801ab28:	ec41 0b19 	vmov	d9, r0, r1
 801ab2c:	463b      	mov	r3, r7
 801ab2e:	4640      	mov	r0, r8
 801ab30:	4649      	mov	r1, r9
 801ab32:	f7e5 fd61 	bl	80005f8 <__aeabi_dmul>
 801ab36:	4602      	mov	r2, r0
 801ab38:	460b      	mov	r3, r1
 801ab3a:	ec51 0b19 	vmov	r0, r1, d9
 801ab3e:	f7e5 fba3 	bl	8000288 <__aeabi_dsub>
 801ab42:	4652      	mov	r2, sl
 801ab44:	465b      	mov	r3, fp
 801ab46:	f7e5 fd57 	bl	80005f8 <__aeabi_dmul>
 801ab4a:	ec53 2b18 	vmov	r2, r3, d8
 801ab4e:	f7e5 fb9b 	bl	8000288 <__aeabi_dsub>
 801ab52:	a30b      	add	r3, pc, #44	; (adr r3, 801ab80 <__kernel_sin+0x148>)
 801ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab58:	4606      	mov	r6, r0
 801ab5a:	460f      	mov	r7, r1
 801ab5c:	4640      	mov	r0, r8
 801ab5e:	4649      	mov	r1, r9
 801ab60:	f7e5 fd4a 	bl	80005f8 <__aeabi_dmul>
 801ab64:	4602      	mov	r2, r0
 801ab66:	460b      	mov	r3, r1
 801ab68:	4630      	mov	r0, r6
 801ab6a:	4639      	mov	r1, r7
 801ab6c:	f7e5 fb8e 	bl	800028c <__adddf3>
 801ab70:	4602      	mov	r2, r0
 801ab72:	460b      	mov	r3, r1
 801ab74:	4620      	mov	r0, r4
 801ab76:	4629      	mov	r1, r5
 801ab78:	f7e5 fb86 	bl	8000288 <__aeabi_dsub>
 801ab7c:	e7c4      	b.n	801ab08 <__kernel_sin+0xd0>
 801ab7e:	bf00      	nop
 801ab80:	55555549 	.word	0x55555549
 801ab84:	3fc55555 	.word	0x3fc55555
 801ab88:	3fe00000 	.word	0x3fe00000
 801ab8c:	5acfd57c 	.word	0x5acfd57c
 801ab90:	3de5d93a 	.word	0x3de5d93a
 801ab94:	8a2b9ceb 	.word	0x8a2b9ceb
 801ab98:	3e5ae5e6 	.word	0x3e5ae5e6
 801ab9c:	57b1fe7d 	.word	0x57b1fe7d
 801aba0:	3ec71de3 	.word	0x3ec71de3
 801aba4:	19c161d5 	.word	0x19c161d5
 801aba8:	3f2a01a0 	.word	0x3f2a01a0
 801abac:	1110f8a6 	.word	0x1110f8a6
 801abb0:	3f811111 	.word	0x3f811111
 801abb4:	00000000 	.word	0x00000000

0801abb8 <__ieee754_rem_pio2>:
 801abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abbc:	ed2d 8b02 	vpush	{d8}
 801abc0:	ec55 4b10 	vmov	r4, r5, d0
 801abc4:	4bca      	ldr	r3, [pc, #808]	; (801aef0 <__ieee754_rem_pio2+0x338>)
 801abc6:	b08b      	sub	sp, #44	; 0x2c
 801abc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801abcc:	4598      	cmp	r8, r3
 801abce:	4682      	mov	sl, r0
 801abd0:	9502      	str	r5, [sp, #8]
 801abd2:	dc08      	bgt.n	801abe6 <__ieee754_rem_pio2+0x2e>
 801abd4:	2200      	movs	r2, #0
 801abd6:	2300      	movs	r3, #0
 801abd8:	ed80 0b00 	vstr	d0, [r0]
 801abdc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801abe0:	f04f 0b00 	mov.w	fp, #0
 801abe4:	e028      	b.n	801ac38 <__ieee754_rem_pio2+0x80>
 801abe6:	4bc3      	ldr	r3, [pc, #780]	; (801aef4 <__ieee754_rem_pio2+0x33c>)
 801abe8:	4598      	cmp	r8, r3
 801abea:	dc78      	bgt.n	801acde <__ieee754_rem_pio2+0x126>
 801abec:	9b02      	ldr	r3, [sp, #8]
 801abee:	4ec2      	ldr	r6, [pc, #776]	; (801aef8 <__ieee754_rem_pio2+0x340>)
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	ee10 0a10 	vmov	r0, s0
 801abf6:	a3b0      	add	r3, pc, #704	; (adr r3, 801aeb8 <__ieee754_rem_pio2+0x300>)
 801abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abfc:	4629      	mov	r1, r5
 801abfe:	dd39      	ble.n	801ac74 <__ieee754_rem_pio2+0xbc>
 801ac00:	f7e5 fb42 	bl	8000288 <__aeabi_dsub>
 801ac04:	45b0      	cmp	r8, r6
 801ac06:	4604      	mov	r4, r0
 801ac08:	460d      	mov	r5, r1
 801ac0a:	d01b      	beq.n	801ac44 <__ieee754_rem_pio2+0x8c>
 801ac0c:	a3ac      	add	r3, pc, #688	; (adr r3, 801aec0 <__ieee754_rem_pio2+0x308>)
 801ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac12:	f7e5 fb39 	bl	8000288 <__aeabi_dsub>
 801ac16:	4602      	mov	r2, r0
 801ac18:	460b      	mov	r3, r1
 801ac1a:	e9ca 2300 	strd	r2, r3, [sl]
 801ac1e:	4620      	mov	r0, r4
 801ac20:	4629      	mov	r1, r5
 801ac22:	f7e5 fb31 	bl	8000288 <__aeabi_dsub>
 801ac26:	a3a6      	add	r3, pc, #664	; (adr r3, 801aec0 <__ieee754_rem_pio2+0x308>)
 801ac28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac2c:	f7e5 fb2c 	bl	8000288 <__aeabi_dsub>
 801ac30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ac34:	f04f 0b01 	mov.w	fp, #1
 801ac38:	4658      	mov	r0, fp
 801ac3a:	b00b      	add	sp, #44	; 0x2c
 801ac3c:	ecbd 8b02 	vpop	{d8}
 801ac40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac44:	a3a0      	add	r3, pc, #640	; (adr r3, 801aec8 <__ieee754_rem_pio2+0x310>)
 801ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac4a:	f7e5 fb1d 	bl	8000288 <__aeabi_dsub>
 801ac4e:	a3a0      	add	r3, pc, #640	; (adr r3, 801aed0 <__ieee754_rem_pio2+0x318>)
 801ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac54:	4604      	mov	r4, r0
 801ac56:	460d      	mov	r5, r1
 801ac58:	f7e5 fb16 	bl	8000288 <__aeabi_dsub>
 801ac5c:	4602      	mov	r2, r0
 801ac5e:	460b      	mov	r3, r1
 801ac60:	e9ca 2300 	strd	r2, r3, [sl]
 801ac64:	4620      	mov	r0, r4
 801ac66:	4629      	mov	r1, r5
 801ac68:	f7e5 fb0e 	bl	8000288 <__aeabi_dsub>
 801ac6c:	a398      	add	r3, pc, #608	; (adr r3, 801aed0 <__ieee754_rem_pio2+0x318>)
 801ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac72:	e7db      	b.n	801ac2c <__ieee754_rem_pio2+0x74>
 801ac74:	f7e5 fb0a 	bl	800028c <__adddf3>
 801ac78:	45b0      	cmp	r8, r6
 801ac7a:	4604      	mov	r4, r0
 801ac7c:	460d      	mov	r5, r1
 801ac7e:	d016      	beq.n	801acae <__ieee754_rem_pio2+0xf6>
 801ac80:	a38f      	add	r3, pc, #572	; (adr r3, 801aec0 <__ieee754_rem_pio2+0x308>)
 801ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac86:	f7e5 fb01 	bl	800028c <__adddf3>
 801ac8a:	4602      	mov	r2, r0
 801ac8c:	460b      	mov	r3, r1
 801ac8e:	e9ca 2300 	strd	r2, r3, [sl]
 801ac92:	4620      	mov	r0, r4
 801ac94:	4629      	mov	r1, r5
 801ac96:	f7e5 faf7 	bl	8000288 <__aeabi_dsub>
 801ac9a:	a389      	add	r3, pc, #548	; (adr r3, 801aec0 <__ieee754_rem_pio2+0x308>)
 801ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aca0:	f7e5 faf4 	bl	800028c <__adddf3>
 801aca4:	f04f 3bff 	mov.w	fp, #4294967295
 801aca8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801acac:	e7c4      	b.n	801ac38 <__ieee754_rem_pio2+0x80>
 801acae:	a386      	add	r3, pc, #536	; (adr r3, 801aec8 <__ieee754_rem_pio2+0x310>)
 801acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acb4:	f7e5 faea 	bl	800028c <__adddf3>
 801acb8:	a385      	add	r3, pc, #532	; (adr r3, 801aed0 <__ieee754_rem_pio2+0x318>)
 801acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acbe:	4604      	mov	r4, r0
 801acc0:	460d      	mov	r5, r1
 801acc2:	f7e5 fae3 	bl	800028c <__adddf3>
 801acc6:	4602      	mov	r2, r0
 801acc8:	460b      	mov	r3, r1
 801acca:	e9ca 2300 	strd	r2, r3, [sl]
 801acce:	4620      	mov	r0, r4
 801acd0:	4629      	mov	r1, r5
 801acd2:	f7e5 fad9 	bl	8000288 <__aeabi_dsub>
 801acd6:	a37e      	add	r3, pc, #504	; (adr r3, 801aed0 <__ieee754_rem_pio2+0x318>)
 801acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acdc:	e7e0      	b.n	801aca0 <__ieee754_rem_pio2+0xe8>
 801acde:	4b87      	ldr	r3, [pc, #540]	; (801aefc <__ieee754_rem_pio2+0x344>)
 801ace0:	4598      	cmp	r8, r3
 801ace2:	f300 80d8 	bgt.w	801ae96 <__ieee754_rem_pio2+0x2de>
 801ace6:	f000 f9a1 	bl	801b02c <fabs>
 801acea:	ec55 4b10 	vmov	r4, r5, d0
 801acee:	ee10 0a10 	vmov	r0, s0
 801acf2:	a379      	add	r3, pc, #484	; (adr r3, 801aed8 <__ieee754_rem_pio2+0x320>)
 801acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf8:	4629      	mov	r1, r5
 801acfa:	f7e5 fc7d 	bl	80005f8 <__aeabi_dmul>
 801acfe:	4b80      	ldr	r3, [pc, #512]	; (801af00 <__ieee754_rem_pio2+0x348>)
 801ad00:	2200      	movs	r2, #0
 801ad02:	f7e5 fac3 	bl	800028c <__adddf3>
 801ad06:	f7e5 ff27 	bl	8000b58 <__aeabi_d2iz>
 801ad0a:	4683      	mov	fp, r0
 801ad0c:	f7e5 fc0a 	bl	8000524 <__aeabi_i2d>
 801ad10:	4602      	mov	r2, r0
 801ad12:	460b      	mov	r3, r1
 801ad14:	ec43 2b18 	vmov	d8, r2, r3
 801ad18:	a367      	add	r3, pc, #412	; (adr r3, 801aeb8 <__ieee754_rem_pio2+0x300>)
 801ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad1e:	f7e5 fc6b 	bl	80005f8 <__aeabi_dmul>
 801ad22:	4602      	mov	r2, r0
 801ad24:	460b      	mov	r3, r1
 801ad26:	4620      	mov	r0, r4
 801ad28:	4629      	mov	r1, r5
 801ad2a:	f7e5 faad 	bl	8000288 <__aeabi_dsub>
 801ad2e:	a364      	add	r3, pc, #400	; (adr r3, 801aec0 <__ieee754_rem_pio2+0x308>)
 801ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad34:	4606      	mov	r6, r0
 801ad36:	460f      	mov	r7, r1
 801ad38:	ec51 0b18 	vmov	r0, r1, d8
 801ad3c:	f7e5 fc5c 	bl	80005f8 <__aeabi_dmul>
 801ad40:	f1bb 0f1f 	cmp.w	fp, #31
 801ad44:	4604      	mov	r4, r0
 801ad46:	460d      	mov	r5, r1
 801ad48:	dc0d      	bgt.n	801ad66 <__ieee754_rem_pio2+0x1ae>
 801ad4a:	4b6e      	ldr	r3, [pc, #440]	; (801af04 <__ieee754_rem_pio2+0x34c>)
 801ad4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 801ad50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ad54:	4543      	cmp	r3, r8
 801ad56:	d006      	beq.n	801ad66 <__ieee754_rem_pio2+0x1ae>
 801ad58:	4622      	mov	r2, r4
 801ad5a:	462b      	mov	r3, r5
 801ad5c:	4630      	mov	r0, r6
 801ad5e:	4639      	mov	r1, r7
 801ad60:	f7e5 fa92 	bl	8000288 <__aeabi_dsub>
 801ad64:	e00e      	b.n	801ad84 <__ieee754_rem_pio2+0x1cc>
 801ad66:	462b      	mov	r3, r5
 801ad68:	4622      	mov	r2, r4
 801ad6a:	4630      	mov	r0, r6
 801ad6c:	4639      	mov	r1, r7
 801ad6e:	f7e5 fa8b 	bl	8000288 <__aeabi_dsub>
 801ad72:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ad76:	9303      	str	r3, [sp, #12]
 801ad78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ad7c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801ad80:	2b10      	cmp	r3, #16
 801ad82:	dc02      	bgt.n	801ad8a <__ieee754_rem_pio2+0x1d2>
 801ad84:	e9ca 0100 	strd	r0, r1, [sl]
 801ad88:	e039      	b.n	801adfe <__ieee754_rem_pio2+0x246>
 801ad8a:	a34f      	add	r3, pc, #316	; (adr r3, 801aec8 <__ieee754_rem_pio2+0x310>)
 801ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad90:	ec51 0b18 	vmov	r0, r1, d8
 801ad94:	f7e5 fc30 	bl	80005f8 <__aeabi_dmul>
 801ad98:	4604      	mov	r4, r0
 801ad9a:	460d      	mov	r5, r1
 801ad9c:	4602      	mov	r2, r0
 801ad9e:	460b      	mov	r3, r1
 801ada0:	4630      	mov	r0, r6
 801ada2:	4639      	mov	r1, r7
 801ada4:	f7e5 fa70 	bl	8000288 <__aeabi_dsub>
 801ada8:	4602      	mov	r2, r0
 801adaa:	460b      	mov	r3, r1
 801adac:	4680      	mov	r8, r0
 801adae:	4689      	mov	r9, r1
 801adb0:	4630      	mov	r0, r6
 801adb2:	4639      	mov	r1, r7
 801adb4:	f7e5 fa68 	bl	8000288 <__aeabi_dsub>
 801adb8:	4622      	mov	r2, r4
 801adba:	462b      	mov	r3, r5
 801adbc:	f7e5 fa64 	bl	8000288 <__aeabi_dsub>
 801adc0:	a343      	add	r3, pc, #268	; (adr r3, 801aed0 <__ieee754_rem_pio2+0x318>)
 801adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adc6:	4604      	mov	r4, r0
 801adc8:	460d      	mov	r5, r1
 801adca:	ec51 0b18 	vmov	r0, r1, d8
 801adce:	f7e5 fc13 	bl	80005f8 <__aeabi_dmul>
 801add2:	4622      	mov	r2, r4
 801add4:	462b      	mov	r3, r5
 801add6:	f7e5 fa57 	bl	8000288 <__aeabi_dsub>
 801adda:	4602      	mov	r2, r0
 801addc:	460b      	mov	r3, r1
 801adde:	4604      	mov	r4, r0
 801ade0:	460d      	mov	r5, r1
 801ade2:	4640      	mov	r0, r8
 801ade4:	4649      	mov	r1, r9
 801ade6:	f7e5 fa4f 	bl	8000288 <__aeabi_dsub>
 801adea:	9a03      	ldr	r2, [sp, #12]
 801adec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801adf0:	1ad3      	subs	r3, r2, r3
 801adf2:	2b31      	cmp	r3, #49	; 0x31
 801adf4:	dc24      	bgt.n	801ae40 <__ieee754_rem_pio2+0x288>
 801adf6:	e9ca 0100 	strd	r0, r1, [sl]
 801adfa:	4646      	mov	r6, r8
 801adfc:	464f      	mov	r7, r9
 801adfe:	e9da 8900 	ldrd	r8, r9, [sl]
 801ae02:	4630      	mov	r0, r6
 801ae04:	4642      	mov	r2, r8
 801ae06:	464b      	mov	r3, r9
 801ae08:	4639      	mov	r1, r7
 801ae0a:	f7e5 fa3d 	bl	8000288 <__aeabi_dsub>
 801ae0e:	462b      	mov	r3, r5
 801ae10:	4622      	mov	r2, r4
 801ae12:	f7e5 fa39 	bl	8000288 <__aeabi_dsub>
 801ae16:	9b02      	ldr	r3, [sp, #8]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ae1e:	f6bf af0b 	bge.w	801ac38 <__ieee754_rem_pio2+0x80>
 801ae22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ae26:	f8ca 3004 	str.w	r3, [sl, #4]
 801ae2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ae2e:	f8ca 8000 	str.w	r8, [sl]
 801ae32:	f8ca 0008 	str.w	r0, [sl, #8]
 801ae36:	f8ca 300c 	str.w	r3, [sl, #12]
 801ae3a:	f1cb 0b00 	rsb	fp, fp, #0
 801ae3e:	e6fb      	b.n	801ac38 <__ieee754_rem_pio2+0x80>
 801ae40:	a327      	add	r3, pc, #156	; (adr r3, 801aee0 <__ieee754_rem_pio2+0x328>)
 801ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae46:	ec51 0b18 	vmov	r0, r1, d8
 801ae4a:	f7e5 fbd5 	bl	80005f8 <__aeabi_dmul>
 801ae4e:	4604      	mov	r4, r0
 801ae50:	460d      	mov	r5, r1
 801ae52:	4602      	mov	r2, r0
 801ae54:	460b      	mov	r3, r1
 801ae56:	4640      	mov	r0, r8
 801ae58:	4649      	mov	r1, r9
 801ae5a:	f7e5 fa15 	bl	8000288 <__aeabi_dsub>
 801ae5e:	4602      	mov	r2, r0
 801ae60:	460b      	mov	r3, r1
 801ae62:	4606      	mov	r6, r0
 801ae64:	460f      	mov	r7, r1
 801ae66:	4640      	mov	r0, r8
 801ae68:	4649      	mov	r1, r9
 801ae6a:	f7e5 fa0d 	bl	8000288 <__aeabi_dsub>
 801ae6e:	4622      	mov	r2, r4
 801ae70:	462b      	mov	r3, r5
 801ae72:	f7e5 fa09 	bl	8000288 <__aeabi_dsub>
 801ae76:	a31c      	add	r3, pc, #112	; (adr r3, 801aee8 <__ieee754_rem_pio2+0x330>)
 801ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae7c:	4604      	mov	r4, r0
 801ae7e:	460d      	mov	r5, r1
 801ae80:	ec51 0b18 	vmov	r0, r1, d8
 801ae84:	f7e5 fbb8 	bl	80005f8 <__aeabi_dmul>
 801ae88:	4622      	mov	r2, r4
 801ae8a:	462b      	mov	r3, r5
 801ae8c:	f7e5 f9fc 	bl	8000288 <__aeabi_dsub>
 801ae90:	4604      	mov	r4, r0
 801ae92:	460d      	mov	r5, r1
 801ae94:	e760      	b.n	801ad58 <__ieee754_rem_pio2+0x1a0>
 801ae96:	4b1c      	ldr	r3, [pc, #112]	; (801af08 <__ieee754_rem_pio2+0x350>)
 801ae98:	4598      	cmp	r8, r3
 801ae9a:	dd37      	ble.n	801af0c <__ieee754_rem_pio2+0x354>
 801ae9c:	ee10 2a10 	vmov	r2, s0
 801aea0:	462b      	mov	r3, r5
 801aea2:	4620      	mov	r0, r4
 801aea4:	4629      	mov	r1, r5
 801aea6:	f7e5 f9ef 	bl	8000288 <__aeabi_dsub>
 801aeaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801aeae:	e9ca 0100 	strd	r0, r1, [sl]
 801aeb2:	e695      	b.n	801abe0 <__ieee754_rem_pio2+0x28>
 801aeb4:	f3af 8000 	nop.w
 801aeb8:	54400000 	.word	0x54400000
 801aebc:	3ff921fb 	.word	0x3ff921fb
 801aec0:	1a626331 	.word	0x1a626331
 801aec4:	3dd0b461 	.word	0x3dd0b461
 801aec8:	1a600000 	.word	0x1a600000
 801aecc:	3dd0b461 	.word	0x3dd0b461
 801aed0:	2e037073 	.word	0x2e037073
 801aed4:	3ba3198a 	.word	0x3ba3198a
 801aed8:	6dc9c883 	.word	0x6dc9c883
 801aedc:	3fe45f30 	.word	0x3fe45f30
 801aee0:	2e000000 	.word	0x2e000000
 801aee4:	3ba3198a 	.word	0x3ba3198a
 801aee8:	252049c1 	.word	0x252049c1
 801aeec:	397b839a 	.word	0x397b839a
 801aef0:	3fe921fb 	.word	0x3fe921fb
 801aef4:	4002d97b 	.word	0x4002d97b
 801aef8:	3ff921fb 	.word	0x3ff921fb
 801aefc:	413921fb 	.word	0x413921fb
 801af00:	3fe00000 	.word	0x3fe00000
 801af04:	0801e608 	.word	0x0801e608
 801af08:	7fefffff 	.word	0x7fefffff
 801af0c:	ea4f 5628 	mov.w	r6, r8, asr #20
 801af10:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801af14:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801af18:	4620      	mov	r0, r4
 801af1a:	460d      	mov	r5, r1
 801af1c:	f7e5 fe1c 	bl	8000b58 <__aeabi_d2iz>
 801af20:	f7e5 fb00 	bl	8000524 <__aeabi_i2d>
 801af24:	4602      	mov	r2, r0
 801af26:	460b      	mov	r3, r1
 801af28:	4620      	mov	r0, r4
 801af2a:	4629      	mov	r1, r5
 801af2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801af30:	f7e5 f9aa 	bl	8000288 <__aeabi_dsub>
 801af34:	4b21      	ldr	r3, [pc, #132]	; (801afbc <__ieee754_rem_pio2+0x404>)
 801af36:	2200      	movs	r2, #0
 801af38:	f7e5 fb5e 	bl	80005f8 <__aeabi_dmul>
 801af3c:	460d      	mov	r5, r1
 801af3e:	4604      	mov	r4, r0
 801af40:	f7e5 fe0a 	bl	8000b58 <__aeabi_d2iz>
 801af44:	f7e5 faee 	bl	8000524 <__aeabi_i2d>
 801af48:	4602      	mov	r2, r0
 801af4a:	460b      	mov	r3, r1
 801af4c:	4620      	mov	r0, r4
 801af4e:	4629      	mov	r1, r5
 801af50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801af54:	f7e5 f998 	bl	8000288 <__aeabi_dsub>
 801af58:	4b18      	ldr	r3, [pc, #96]	; (801afbc <__ieee754_rem_pio2+0x404>)
 801af5a:	2200      	movs	r2, #0
 801af5c:	f7e5 fb4c 	bl	80005f8 <__aeabi_dmul>
 801af60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801af64:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801af68:	2703      	movs	r7, #3
 801af6a:	2400      	movs	r4, #0
 801af6c:	2500      	movs	r5, #0
 801af6e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801af72:	4622      	mov	r2, r4
 801af74:	462b      	mov	r3, r5
 801af76:	46b9      	mov	r9, r7
 801af78:	3f01      	subs	r7, #1
 801af7a:	f7e5 fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 801af7e:	2800      	cmp	r0, #0
 801af80:	d1f5      	bne.n	801af6e <__ieee754_rem_pio2+0x3b6>
 801af82:	4b0f      	ldr	r3, [pc, #60]	; (801afc0 <__ieee754_rem_pio2+0x408>)
 801af84:	9301      	str	r3, [sp, #4]
 801af86:	2302      	movs	r3, #2
 801af88:	9300      	str	r3, [sp, #0]
 801af8a:	4632      	mov	r2, r6
 801af8c:	464b      	mov	r3, r9
 801af8e:	4651      	mov	r1, sl
 801af90:	a804      	add	r0, sp, #16
 801af92:	f000 fa39 	bl	801b408 <__kernel_rem_pio2>
 801af96:	9b02      	ldr	r3, [sp, #8]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	4683      	mov	fp, r0
 801af9c:	f6bf ae4c 	bge.w	801ac38 <__ieee754_rem_pio2+0x80>
 801afa0:	e9da 2100 	ldrd	r2, r1, [sl]
 801afa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801afa8:	e9ca 2300 	strd	r2, r3, [sl]
 801afac:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801afb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801afb4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801afb8:	e73f      	b.n	801ae3a <__ieee754_rem_pio2+0x282>
 801afba:	bf00      	nop
 801afbc:	41700000 	.word	0x41700000
 801afc0:	0801e688 	.word	0x0801e688

0801afc4 <acos>:
 801afc4:	b538      	push	{r3, r4, r5, lr}
 801afc6:	ed2d 8b02 	vpush	{d8}
 801afca:	ec55 4b10 	vmov	r4, r5, d0
 801afce:	f000 fd6b 	bl	801baa8 <__ieee754_acos>
 801afd2:	4622      	mov	r2, r4
 801afd4:	462b      	mov	r3, r5
 801afd6:	4620      	mov	r0, r4
 801afd8:	4629      	mov	r1, r5
 801afda:	eeb0 8a40 	vmov.f32	s16, s0
 801afde:	eef0 8a60 	vmov.f32	s17, s1
 801afe2:	f7e5 fda3 	bl	8000b2c <__aeabi_dcmpun>
 801afe6:	b9a8      	cbnz	r0, 801b014 <acos+0x50>
 801afe8:	ec45 4b10 	vmov	d0, r4, r5
 801afec:	f000 f81e 	bl	801b02c <fabs>
 801aff0:	4b0c      	ldr	r3, [pc, #48]	; (801b024 <acos+0x60>)
 801aff2:	ec51 0b10 	vmov	r0, r1, d0
 801aff6:	2200      	movs	r2, #0
 801aff8:	f7e5 fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 801affc:	b150      	cbz	r0, 801b014 <acos+0x50>
 801affe:	f7fc fdd7 	bl	8017bb0 <__errno>
 801b002:	ecbd 8b02 	vpop	{d8}
 801b006:	2321      	movs	r3, #33	; 0x21
 801b008:	6003      	str	r3, [r0, #0]
 801b00a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b00e:	4806      	ldr	r0, [pc, #24]	; (801b028 <acos+0x64>)
 801b010:	f7fc be12 	b.w	8017c38 <nan>
 801b014:	eeb0 0a48 	vmov.f32	s0, s16
 801b018:	eef0 0a68 	vmov.f32	s1, s17
 801b01c:	ecbd 8b02 	vpop	{d8}
 801b020:	bd38      	pop	{r3, r4, r5, pc}
 801b022:	bf00      	nop
 801b024:	3ff00000 	.word	0x3ff00000
 801b028:	0801e3c6 	.word	0x0801e3c6

0801b02c <fabs>:
 801b02c:	ec51 0b10 	vmov	r0, r1, d0
 801b030:	ee10 2a10 	vmov	r2, s0
 801b034:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b038:	ec43 2b10 	vmov	d0, r2, r3
 801b03c:	4770      	bx	lr
	...

0801b040 <__ieee754_expf>:
 801b040:	ee10 2a10 	vmov	r2, s0
 801b044:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801b048:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b04c:	d902      	bls.n	801b054 <__ieee754_expf+0x14>
 801b04e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b052:	4770      	bx	lr
 801b054:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801b058:	d106      	bne.n	801b068 <__ieee754_expf+0x28>
 801b05a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801b194 <__ieee754_expf+0x154>
 801b05e:	2900      	cmp	r1, #0
 801b060:	bf18      	it	ne
 801b062:	eeb0 0a67 	vmovne.f32	s0, s15
 801b066:	4770      	bx	lr
 801b068:	484b      	ldr	r0, [pc, #300]	; (801b198 <__ieee754_expf+0x158>)
 801b06a:	4282      	cmp	r2, r0
 801b06c:	dd02      	ble.n	801b074 <__ieee754_expf+0x34>
 801b06e:	2000      	movs	r0, #0
 801b070:	f000 b9c2 	b.w	801b3f8 <__math_oflowf>
 801b074:	2a00      	cmp	r2, #0
 801b076:	da05      	bge.n	801b084 <__ieee754_expf+0x44>
 801b078:	4a48      	ldr	r2, [pc, #288]	; (801b19c <__ieee754_expf+0x15c>)
 801b07a:	4293      	cmp	r3, r2
 801b07c:	d902      	bls.n	801b084 <__ieee754_expf+0x44>
 801b07e:	2000      	movs	r0, #0
 801b080:	f000 b9b4 	b.w	801b3ec <__math_uflowf>
 801b084:	4a46      	ldr	r2, [pc, #280]	; (801b1a0 <__ieee754_expf+0x160>)
 801b086:	4293      	cmp	r3, r2
 801b088:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801b08c:	d952      	bls.n	801b134 <__ieee754_expf+0xf4>
 801b08e:	4a45      	ldr	r2, [pc, #276]	; (801b1a4 <__ieee754_expf+0x164>)
 801b090:	4293      	cmp	r3, r2
 801b092:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801b096:	d834      	bhi.n	801b102 <__ieee754_expf+0xc2>
 801b098:	4b43      	ldr	r3, [pc, #268]	; (801b1a8 <__ieee754_expf+0x168>)
 801b09a:	4413      	add	r3, r2
 801b09c:	ed93 7a00 	vldr	s14, [r3]
 801b0a0:	4b42      	ldr	r3, [pc, #264]	; (801b1ac <__ieee754_expf+0x16c>)
 801b0a2:	4413      	add	r3, r2
 801b0a4:	ee30 7a47 	vsub.f32	s14, s0, s14
 801b0a8:	f1c1 0201 	rsb	r2, r1, #1
 801b0ac:	edd3 7a00 	vldr	s15, [r3]
 801b0b0:	1a52      	subs	r2, r2, r1
 801b0b2:	ee37 0a67 	vsub.f32	s0, s14, s15
 801b0b6:	ee20 6a00 	vmul.f32	s12, s0, s0
 801b0ba:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801b1b0 <__ieee754_expf+0x170>
 801b0be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801b1b4 <__ieee754_expf+0x174>
 801b0c2:	eee6 6a05 	vfma.f32	s13, s12, s10
 801b0c6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801b1b8 <__ieee754_expf+0x178>
 801b0ca:	eea6 5a86 	vfma.f32	s10, s13, s12
 801b0ce:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801b1bc <__ieee754_expf+0x17c>
 801b0d2:	eee5 6a06 	vfma.f32	s13, s10, s12
 801b0d6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801b1c0 <__ieee754_expf+0x180>
 801b0da:	eea6 5a86 	vfma.f32	s10, s13, s12
 801b0de:	eef0 6a40 	vmov.f32	s13, s0
 801b0e2:	eee5 6a46 	vfms.f32	s13, s10, s12
 801b0e6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801b0ea:	ee20 5a26 	vmul.f32	s10, s0, s13
 801b0ee:	bb92      	cbnz	r2, 801b156 <__ieee754_expf+0x116>
 801b0f0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801b0f4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801b0f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b0fc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801b100:	4770      	bx	lr
 801b102:	4b30      	ldr	r3, [pc, #192]	; (801b1c4 <__ieee754_expf+0x184>)
 801b104:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801b1c8 <__ieee754_expf+0x188>
 801b108:	eddf 6a30 	vldr	s13, [pc, #192]	; 801b1cc <__ieee754_expf+0x18c>
 801b10c:	4413      	add	r3, r2
 801b10e:	edd3 7a00 	vldr	s15, [r3]
 801b112:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b116:	eeb0 7a40 	vmov.f32	s14, s0
 801b11a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b11e:	ee17 2a90 	vmov	r2, s15
 801b122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b126:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801b12a:	eddf 6a29 	vldr	s13, [pc, #164]	; 801b1d0 <__ieee754_expf+0x190>
 801b12e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b132:	e7be      	b.n	801b0b2 <__ieee754_expf+0x72>
 801b134:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 801b138:	d20b      	bcs.n	801b152 <__ieee754_expf+0x112>
 801b13a:	eddf 6a26 	vldr	s13, [pc, #152]	; 801b1d4 <__ieee754_expf+0x194>
 801b13e:	ee70 6a26 	vadd.f32	s13, s0, s13
 801b142:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b14a:	dd02      	ble.n	801b152 <__ieee754_expf+0x112>
 801b14c:	ee30 0a25 	vadd.f32	s0, s0, s11
 801b150:	4770      	bx	lr
 801b152:	2200      	movs	r2, #0
 801b154:	e7af      	b.n	801b0b6 <__ieee754_expf+0x76>
 801b156:	ee36 6a66 	vsub.f32	s12, s12, s13
 801b15a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801b15e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801b162:	bfb8      	it	lt
 801b164:	3264      	addlt	r2, #100	; 0x64
 801b166:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b16a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b16e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801b172:	ee17 3a90 	vmov	r3, s15
 801b176:	bfab      	itete	ge
 801b178:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801b17c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801b180:	ee00 3a10 	vmovge	s0, r3
 801b184:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801b1d8 <__ieee754_expf+0x198>
 801b188:	bfbc      	itt	lt
 801b18a:	ee00 3a10 	vmovlt	s0, r3
 801b18e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801b192:	4770      	bx	lr
 801b194:	00000000 	.word	0x00000000
 801b198:	42b17217 	.word	0x42b17217
 801b19c:	42cff1b5 	.word	0x42cff1b5
 801b1a0:	3eb17218 	.word	0x3eb17218
 801b1a4:	3f851591 	.word	0x3f851591
 801b1a8:	0801e798 	.word	0x0801e798
 801b1ac:	0801e7a0 	.word	0x0801e7a0
 801b1b0:	3331bb4c 	.word	0x3331bb4c
 801b1b4:	b5ddea0e 	.word	0xb5ddea0e
 801b1b8:	388ab355 	.word	0x388ab355
 801b1bc:	bb360b61 	.word	0xbb360b61
 801b1c0:	3e2aaaab 	.word	0x3e2aaaab
 801b1c4:	0801e790 	.word	0x0801e790
 801b1c8:	3fb8aa3b 	.word	0x3fb8aa3b
 801b1cc:	3f317180 	.word	0x3f317180
 801b1d0:	3717f7d1 	.word	0x3717f7d1
 801b1d4:	7149f2ca 	.word	0x7149f2ca
 801b1d8:	0d800000 	.word	0x0d800000

0801b1dc <__ieee754_logf>:
 801b1dc:	ee10 3a10 	vmov	r3, s0
 801b1e0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b1e4:	d106      	bne.n	801b1f4 <__ieee754_logf+0x18>
 801b1e6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 801b380 <__ieee754_logf+0x1a4>
 801b1ea:	eddf 7a66 	vldr	s15, [pc, #408]	; 801b384 <__ieee754_logf+0x1a8>
 801b1ee:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801b1f2:	4770      	bx	lr
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	da02      	bge.n	801b1fe <__ieee754_logf+0x22>
 801b1f8:	ee30 7a40 	vsub.f32	s14, s0, s0
 801b1fc:	e7f5      	b.n	801b1ea <__ieee754_logf+0xe>
 801b1fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b202:	db02      	blt.n	801b20a <__ieee754_logf+0x2e>
 801b204:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b208:	4770      	bx	lr
 801b20a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801b20e:	bfb8      	it	lt
 801b210:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 801b388 <__ieee754_logf+0x1ac>
 801b214:	485d      	ldr	r0, [pc, #372]	; (801b38c <__ieee754_logf+0x1b0>)
 801b216:	bfbe      	ittt	lt
 801b218:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801b21c:	f06f 0118 	mvnlt.w	r1, #24
 801b220:	ee17 3a90 	vmovlt	r3, s15
 801b224:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801b228:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b22c:	4418      	add	r0, r3
 801b22e:	bfa8      	it	ge
 801b230:	2100      	movge	r1, #0
 801b232:	3a7f      	subs	r2, #127	; 0x7f
 801b234:	440a      	add	r2, r1
 801b236:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801b23a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801b23e:	4319      	orrs	r1, r3
 801b240:	ee00 1a10 	vmov	s0, r1
 801b244:	4952      	ldr	r1, [pc, #328]	; (801b390 <__ieee754_logf+0x1b4>)
 801b246:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801b24a:	f103 000f 	add.w	r0, r3, #15
 801b24e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b252:	4001      	ands	r1, r0
 801b254:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b258:	bb89      	cbnz	r1, 801b2be <__ieee754_logf+0xe2>
 801b25a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801b25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b262:	d10f      	bne.n	801b284 <__ieee754_logf+0xa8>
 801b264:	2a00      	cmp	r2, #0
 801b266:	f000 8087 	beq.w	801b378 <__ieee754_logf+0x19c>
 801b26a:	ee07 2a90 	vmov	s15, r2
 801b26e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801b394 <__ieee754_logf+0x1b8>
 801b272:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801b398 <__ieee754_logf+0x1bc>
 801b276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b27a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b27e:	eea7 0a87 	vfma.f32	s0, s15, s14
 801b282:	4770      	bx	lr
 801b284:	eddf 6a45 	vldr	s13, [pc, #276]	; 801b39c <__ieee754_logf+0x1c0>
 801b288:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b28c:	eee0 7a66 	vfms.f32	s15, s0, s13
 801b290:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b294:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b298:	b912      	cbnz	r2, 801b2a0 <__ieee754_logf+0xc4>
 801b29a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b29e:	4770      	bx	lr
 801b2a0:	ee07 2a90 	vmov	s15, r2
 801b2a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801b394 <__ieee754_logf+0x1b8>
 801b2a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2ac:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801b2b0:	ee37 0a40 	vsub.f32	s0, s14, s0
 801b2b4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801b398 <__ieee754_logf+0x1bc>
 801b2b8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801b2bc:	4770      	bx	lr
 801b2be:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b2c2:	ee70 7a27 	vadd.f32	s15, s0, s15
 801b2c6:	eddf 5a36 	vldr	s11, [pc, #216]	; 801b3a0 <__ieee754_logf+0x1c4>
 801b2ca:	eddf 4a36 	vldr	s9, [pc, #216]	; 801b3a4 <__ieee754_logf+0x1c8>
 801b2ce:	4936      	ldr	r1, [pc, #216]	; (801b3a8 <__ieee754_logf+0x1cc>)
 801b2d0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801b2d4:	4419      	add	r1, r3
 801b2d6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801b2da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801b2de:	430b      	orrs	r3, r1
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	ee07 2a90 	vmov	s15, r2
 801b2e6:	ee26 5a06 	vmul.f32	s10, s12, s12
 801b2ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b2ee:	ee25 7a05 	vmul.f32	s14, s10, s10
 801b2f2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801b3ac <__ieee754_logf+0x1d0>
 801b2f6:	eee7 7a25 	vfma.f32	s15, s14, s11
 801b2fa:	eddf 5a2d 	vldr	s11, [pc, #180]	; 801b3b0 <__ieee754_logf+0x1d4>
 801b2fe:	eee7 5a87 	vfma.f32	s11, s15, s14
 801b302:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801b3b4 <__ieee754_logf+0x1d8>
 801b306:	eee7 7a24 	vfma.f32	s15, s14, s9
 801b30a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 801b3b8 <__ieee754_logf+0x1dc>
 801b30e:	eee7 4a87 	vfma.f32	s9, s15, s14
 801b312:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801b3bc <__ieee754_logf+0x1e0>
 801b316:	eee4 7a87 	vfma.f32	s15, s9, s14
 801b31a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b31e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801b322:	dd1a      	ble.n	801b35a <__ieee754_logf+0x17e>
 801b324:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b328:	ee20 7a07 	vmul.f32	s14, s0, s14
 801b32c:	ee27 7a00 	vmul.f32	s14, s14, s0
 801b330:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b334:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b338:	b912      	cbnz	r2, 801b340 <__ieee754_logf+0x164>
 801b33a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b33e:	e7ac      	b.n	801b29a <__ieee754_logf+0xbe>
 801b340:	ed9f 6a14 	vldr	s12, [pc, #80]	; 801b394 <__ieee754_logf+0x1b8>
 801b344:	eee6 7a86 	vfma.f32	s15, s13, s12
 801b348:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b34c:	ee37 0a40 	vsub.f32	s0, s14, s0
 801b350:	eddf 7a11 	vldr	s15, [pc, #68]	; 801b398 <__ieee754_logf+0x1bc>
 801b354:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801b358:	4770      	bx	lr
 801b35a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b35e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b362:	b912      	cbnz	r2, 801b36a <__ieee754_logf+0x18e>
 801b364:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b368:	4770      	bx	lr
 801b36a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801b394 <__ieee754_logf+0x1b8>
 801b36e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801b372:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b376:	e7eb      	b.n	801b350 <__ieee754_logf+0x174>
 801b378:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801b384 <__ieee754_logf+0x1a8>
 801b37c:	4770      	bx	lr
 801b37e:	bf00      	nop
 801b380:	cc000000 	.word	0xcc000000
 801b384:	00000000 	.word	0x00000000
 801b388:	4c000000 	.word	0x4c000000
 801b38c:	004afb20 	.word	0x004afb20
 801b390:	007ffff0 	.word	0x007ffff0
 801b394:	3717f7d1 	.word	0x3717f7d1
 801b398:	3f317180 	.word	0x3f317180
 801b39c:	3eaaaaab 	.word	0x3eaaaaab
 801b3a0:	3e1cd04f 	.word	0x3e1cd04f
 801b3a4:	3e178897 	.word	0x3e178897
 801b3a8:	ffcf5c30 	.word	0xffcf5c30
 801b3ac:	3e638e29 	.word	0x3e638e29
 801b3b0:	3ecccccd 	.word	0x3ecccccd
 801b3b4:	3e3a3325 	.word	0x3e3a3325
 801b3b8:	3e924925 	.word	0x3e924925
 801b3bc:	3f2aaaab 	.word	0x3f2aaaab

0801b3c0 <with_errnof>:
 801b3c0:	b513      	push	{r0, r1, r4, lr}
 801b3c2:	4604      	mov	r4, r0
 801b3c4:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b3c8:	f7fc fbf2 	bl	8017bb0 <__errno>
 801b3cc:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b3d0:	6004      	str	r4, [r0, #0]
 801b3d2:	b002      	add	sp, #8
 801b3d4:	bd10      	pop	{r4, pc}

0801b3d6 <xflowf>:
 801b3d6:	b130      	cbz	r0, 801b3e6 <xflowf+0x10>
 801b3d8:	eef1 7a40 	vneg.f32	s15, s0
 801b3dc:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b3e0:	2022      	movs	r0, #34	; 0x22
 801b3e2:	f7ff bfed 	b.w	801b3c0 <with_errnof>
 801b3e6:	eef0 7a40 	vmov.f32	s15, s0
 801b3ea:	e7f7      	b.n	801b3dc <xflowf+0x6>

0801b3ec <__math_uflowf>:
 801b3ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b3f4 <__math_uflowf+0x8>
 801b3f0:	f7ff bff1 	b.w	801b3d6 <xflowf>
 801b3f4:	10000000 	.word	0x10000000

0801b3f8 <__math_oflowf>:
 801b3f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b400 <__math_oflowf+0x8>
 801b3fc:	f7ff bfeb 	b.w	801b3d6 <xflowf>
 801b400:	70000000 	.word	0x70000000
 801b404:	00000000 	.word	0x00000000

0801b408 <__kernel_rem_pio2>:
 801b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b40c:	ed2d 8b02 	vpush	{d8}
 801b410:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b414:	f112 0f14 	cmn.w	r2, #20
 801b418:	9306      	str	r3, [sp, #24]
 801b41a:	9104      	str	r1, [sp, #16]
 801b41c:	4bc2      	ldr	r3, [pc, #776]	; (801b728 <__kernel_rem_pio2+0x320>)
 801b41e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801b420:	9009      	str	r0, [sp, #36]	; 0x24
 801b422:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b426:	9300      	str	r3, [sp, #0]
 801b428:	9b06      	ldr	r3, [sp, #24]
 801b42a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b42e:	bfa8      	it	ge
 801b430:	1ed4      	subge	r4, r2, #3
 801b432:	9305      	str	r3, [sp, #20]
 801b434:	bfb2      	itee	lt
 801b436:	2400      	movlt	r4, #0
 801b438:	2318      	movge	r3, #24
 801b43a:	fb94 f4f3 	sdivge	r4, r4, r3
 801b43e:	f06f 0317 	mvn.w	r3, #23
 801b442:	fb04 3303 	mla	r3, r4, r3, r3
 801b446:	eb03 0a02 	add.w	sl, r3, r2
 801b44a:	9b00      	ldr	r3, [sp, #0]
 801b44c:	9a05      	ldr	r2, [sp, #20]
 801b44e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801b718 <__kernel_rem_pio2+0x310>
 801b452:	eb03 0802 	add.w	r8, r3, r2
 801b456:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b458:	1aa7      	subs	r7, r4, r2
 801b45a:	ae20      	add	r6, sp, #128	; 0x80
 801b45c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b460:	2500      	movs	r5, #0
 801b462:	4545      	cmp	r5, r8
 801b464:	dd13      	ble.n	801b48e <__kernel_rem_pio2+0x86>
 801b466:	9b06      	ldr	r3, [sp, #24]
 801b468:	aa20      	add	r2, sp, #128	; 0x80
 801b46a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b46e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801b472:	f04f 0800 	mov.w	r8, #0
 801b476:	9b00      	ldr	r3, [sp, #0]
 801b478:	4598      	cmp	r8, r3
 801b47a:	dc31      	bgt.n	801b4e0 <__kernel_rem_pio2+0xd8>
 801b47c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801b718 <__kernel_rem_pio2+0x310>
 801b480:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b484:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b488:	462f      	mov	r7, r5
 801b48a:	2600      	movs	r6, #0
 801b48c:	e01b      	b.n	801b4c6 <__kernel_rem_pio2+0xbe>
 801b48e:	42ef      	cmn	r7, r5
 801b490:	d407      	bmi.n	801b4a2 <__kernel_rem_pio2+0x9a>
 801b492:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b496:	f7e5 f845 	bl	8000524 <__aeabi_i2d>
 801b49a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b49e:	3501      	adds	r5, #1
 801b4a0:	e7df      	b.n	801b462 <__kernel_rem_pio2+0x5a>
 801b4a2:	ec51 0b18 	vmov	r0, r1, d8
 801b4a6:	e7f8      	b.n	801b49a <__kernel_rem_pio2+0x92>
 801b4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b4ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b4b0:	f7e5 f8a2 	bl	80005f8 <__aeabi_dmul>
 801b4b4:	4602      	mov	r2, r0
 801b4b6:	460b      	mov	r3, r1
 801b4b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b4bc:	f7e4 fee6 	bl	800028c <__adddf3>
 801b4c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b4c4:	3601      	adds	r6, #1
 801b4c6:	9b05      	ldr	r3, [sp, #20]
 801b4c8:	429e      	cmp	r6, r3
 801b4ca:	f1a7 0708 	sub.w	r7, r7, #8
 801b4ce:	ddeb      	ble.n	801b4a8 <__kernel_rem_pio2+0xa0>
 801b4d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b4d4:	f108 0801 	add.w	r8, r8, #1
 801b4d8:	ecab 7b02 	vstmia	fp!, {d7}
 801b4dc:	3508      	adds	r5, #8
 801b4de:	e7ca      	b.n	801b476 <__kernel_rem_pio2+0x6e>
 801b4e0:	9b00      	ldr	r3, [sp, #0]
 801b4e2:	aa0c      	add	r2, sp, #48	; 0x30
 801b4e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b4e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801b4ea:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b4ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b4f0:	9c00      	ldr	r4, [sp, #0]
 801b4f2:	930a      	str	r3, [sp, #40]	; 0x28
 801b4f4:	00e3      	lsls	r3, r4, #3
 801b4f6:	9308      	str	r3, [sp, #32]
 801b4f8:	ab98      	add	r3, sp, #608	; 0x260
 801b4fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b4fe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b502:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801b506:	ab70      	add	r3, sp, #448	; 0x1c0
 801b508:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801b50c:	46c3      	mov	fp, r8
 801b50e:	46a1      	mov	r9, r4
 801b510:	f1b9 0f00 	cmp.w	r9, #0
 801b514:	f1a5 0508 	sub.w	r5, r5, #8
 801b518:	dc77      	bgt.n	801b60a <__kernel_rem_pio2+0x202>
 801b51a:	ec47 6b10 	vmov	d0, r6, r7
 801b51e:	4650      	mov	r0, sl
 801b520:	f000 fd22 	bl	801bf68 <scalbn>
 801b524:	ec57 6b10 	vmov	r6, r7, d0
 801b528:	2200      	movs	r2, #0
 801b52a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b52e:	ee10 0a10 	vmov	r0, s0
 801b532:	4639      	mov	r1, r7
 801b534:	f7e5 f860 	bl	80005f8 <__aeabi_dmul>
 801b538:	ec41 0b10 	vmov	d0, r0, r1
 801b53c:	f7ff f934 	bl	801a7a8 <floor>
 801b540:	4b7a      	ldr	r3, [pc, #488]	; (801b72c <__kernel_rem_pio2+0x324>)
 801b542:	ec51 0b10 	vmov	r0, r1, d0
 801b546:	2200      	movs	r2, #0
 801b548:	f7e5 f856 	bl	80005f8 <__aeabi_dmul>
 801b54c:	4602      	mov	r2, r0
 801b54e:	460b      	mov	r3, r1
 801b550:	4630      	mov	r0, r6
 801b552:	4639      	mov	r1, r7
 801b554:	f7e4 fe98 	bl	8000288 <__aeabi_dsub>
 801b558:	460f      	mov	r7, r1
 801b55a:	4606      	mov	r6, r0
 801b55c:	f7e5 fafc 	bl	8000b58 <__aeabi_d2iz>
 801b560:	9002      	str	r0, [sp, #8]
 801b562:	f7e4 ffdf 	bl	8000524 <__aeabi_i2d>
 801b566:	4602      	mov	r2, r0
 801b568:	460b      	mov	r3, r1
 801b56a:	4630      	mov	r0, r6
 801b56c:	4639      	mov	r1, r7
 801b56e:	f7e4 fe8b 	bl	8000288 <__aeabi_dsub>
 801b572:	f1ba 0f00 	cmp.w	sl, #0
 801b576:	4606      	mov	r6, r0
 801b578:	460f      	mov	r7, r1
 801b57a:	dd6d      	ble.n	801b658 <__kernel_rem_pio2+0x250>
 801b57c:	1e61      	subs	r1, r4, #1
 801b57e:	ab0c      	add	r3, sp, #48	; 0x30
 801b580:	9d02      	ldr	r5, [sp, #8]
 801b582:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b586:	f1ca 0018 	rsb	r0, sl, #24
 801b58a:	fa43 f200 	asr.w	r2, r3, r0
 801b58e:	4415      	add	r5, r2
 801b590:	4082      	lsls	r2, r0
 801b592:	1a9b      	subs	r3, r3, r2
 801b594:	aa0c      	add	r2, sp, #48	; 0x30
 801b596:	9502      	str	r5, [sp, #8]
 801b598:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b59c:	f1ca 0217 	rsb	r2, sl, #23
 801b5a0:	fa43 fb02 	asr.w	fp, r3, r2
 801b5a4:	f1bb 0f00 	cmp.w	fp, #0
 801b5a8:	dd65      	ble.n	801b676 <__kernel_rem_pio2+0x26e>
 801b5aa:	9b02      	ldr	r3, [sp, #8]
 801b5ac:	2200      	movs	r2, #0
 801b5ae:	3301      	adds	r3, #1
 801b5b0:	9302      	str	r3, [sp, #8]
 801b5b2:	4615      	mov	r5, r2
 801b5b4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b5b8:	4294      	cmp	r4, r2
 801b5ba:	f300 809f 	bgt.w	801b6fc <__kernel_rem_pio2+0x2f4>
 801b5be:	f1ba 0f00 	cmp.w	sl, #0
 801b5c2:	dd07      	ble.n	801b5d4 <__kernel_rem_pio2+0x1cc>
 801b5c4:	f1ba 0f01 	cmp.w	sl, #1
 801b5c8:	f000 80c1 	beq.w	801b74e <__kernel_rem_pio2+0x346>
 801b5cc:	f1ba 0f02 	cmp.w	sl, #2
 801b5d0:	f000 80c7 	beq.w	801b762 <__kernel_rem_pio2+0x35a>
 801b5d4:	f1bb 0f02 	cmp.w	fp, #2
 801b5d8:	d14d      	bne.n	801b676 <__kernel_rem_pio2+0x26e>
 801b5da:	4632      	mov	r2, r6
 801b5dc:	463b      	mov	r3, r7
 801b5de:	4954      	ldr	r1, [pc, #336]	; (801b730 <__kernel_rem_pio2+0x328>)
 801b5e0:	2000      	movs	r0, #0
 801b5e2:	f7e4 fe51 	bl	8000288 <__aeabi_dsub>
 801b5e6:	4606      	mov	r6, r0
 801b5e8:	460f      	mov	r7, r1
 801b5ea:	2d00      	cmp	r5, #0
 801b5ec:	d043      	beq.n	801b676 <__kernel_rem_pio2+0x26e>
 801b5ee:	4650      	mov	r0, sl
 801b5f0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801b720 <__kernel_rem_pio2+0x318>
 801b5f4:	f000 fcb8 	bl	801bf68 <scalbn>
 801b5f8:	4630      	mov	r0, r6
 801b5fa:	4639      	mov	r1, r7
 801b5fc:	ec53 2b10 	vmov	r2, r3, d0
 801b600:	f7e4 fe42 	bl	8000288 <__aeabi_dsub>
 801b604:	4606      	mov	r6, r0
 801b606:	460f      	mov	r7, r1
 801b608:	e035      	b.n	801b676 <__kernel_rem_pio2+0x26e>
 801b60a:	4b4a      	ldr	r3, [pc, #296]	; (801b734 <__kernel_rem_pio2+0x32c>)
 801b60c:	2200      	movs	r2, #0
 801b60e:	4630      	mov	r0, r6
 801b610:	4639      	mov	r1, r7
 801b612:	f7e4 fff1 	bl	80005f8 <__aeabi_dmul>
 801b616:	f7e5 fa9f 	bl	8000b58 <__aeabi_d2iz>
 801b61a:	f7e4 ff83 	bl	8000524 <__aeabi_i2d>
 801b61e:	4602      	mov	r2, r0
 801b620:	460b      	mov	r3, r1
 801b622:	ec43 2b18 	vmov	d8, r2, r3
 801b626:	4b44      	ldr	r3, [pc, #272]	; (801b738 <__kernel_rem_pio2+0x330>)
 801b628:	2200      	movs	r2, #0
 801b62a:	f7e4 ffe5 	bl	80005f8 <__aeabi_dmul>
 801b62e:	4602      	mov	r2, r0
 801b630:	460b      	mov	r3, r1
 801b632:	4630      	mov	r0, r6
 801b634:	4639      	mov	r1, r7
 801b636:	f7e4 fe27 	bl	8000288 <__aeabi_dsub>
 801b63a:	f7e5 fa8d 	bl	8000b58 <__aeabi_d2iz>
 801b63e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b642:	f84b 0b04 	str.w	r0, [fp], #4
 801b646:	ec51 0b18 	vmov	r0, r1, d8
 801b64a:	f7e4 fe1f 	bl	800028c <__adddf3>
 801b64e:	f109 39ff 	add.w	r9, r9, #4294967295
 801b652:	4606      	mov	r6, r0
 801b654:	460f      	mov	r7, r1
 801b656:	e75b      	b.n	801b510 <__kernel_rem_pio2+0x108>
 801b658:	d106      	bne.n	801b668 <__kernel_rem_pio2+0x260>
 801b65a:	1e63      	subs	r3, r4, #1
 801b65c:	aa0c      	add	r2, sp, #48	; 0x30
 801b65e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b662:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801b666:	e79d      	b.n	801b5a4 <__kernel_rem_pio2+0x19c>
 801b668:	4b34      	ldr	r3, [pc, #208]	; (801b73c <__kernel_rem_pio2+0x334>)
 801b66a:	2200      	movs	r2, #0
 801b66c:	f7e5 fa4a 	bl	8000b04 <__aeabi_dcmpge>
 801b670:	2800      	cmp	r0, #0
 801b672:	d140      	bne.n	801b6f6 <__kernel_rem_pio2+0x2ee>
 801b674:	4683      	mov	fp, r0
 801b676:	2200      	movs	r2, #0
 801b678:	2300      	movs	r3, #0
 801b67a:	4630      	mov	r0, r6
 801b67c:	4639      	mov	r1, r7
 801b67e:	f7e5 fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 801b682:	2800      	cmp	r0, #0
 801b684:	f000 80c1 	beq.w	801b80a <__kernel_rem_pio2+0x402>
 801b688:	1e65      	subs	r5, r4, #1
 801b68a:	462b      	mov	r3, r5
 801b68c:	2200      	movs	r2, #0
 801b68e:	9900      	ldr	r1, [sp, #0]
 801b690:	428b      	cmp	r3, r1
 801b692:	da6d      	bge.n	801b770 <__kernel_rem_pio2+0x368>
 801b694:	2a00      	cmp	r2, #0
 801b696:	f000 808a 	beq.w	801b7ae <__kernel_rem_pio2+0x3a6>
 801b69a:	ab0c      	add	r3, sp, #48	; 0x30
 801b69c:	f1aa 0a18 	sub.w	sl, sl, #24
 801b6a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	f000 80ae 	beq.w	801b806 <__kernel_rem_pio2+0x3fe>
 801b6aa:	4650      	mov	r0, sl
 801b6ac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801b720 <__kernel_rem_pio2+0x318>
 801b6b0:	f000 fc5a 	bl	801bf68 <scalbn>
 801b6b4:	1c6b      	adds	r3, r5, #1
 801b6b6:	00da      	lsls	r2, r3, #3
 801b6b8:	9205      	str	r2, [sp, #20]
 801b6ba:	ec57 6b10 	vmov	r6, r7, d0
 801b6be:	aa70      	add	r2, sp, #448	; 0x1c0
 801b6c0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801b734 <__kernel_rem_pio2+0x32c>
 801b6c4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801b6c8:	462c      	mov	r4, r5
 801b6ca:	f04f 0800 	mov.w	r8, #0
 801b6ce:	2c00      	cmp	r4, #0
 801b6d0:	f280 80d4 	bge.w	801b87c <__kernel_rem_pio2+0x474>
 801b6d4:	462c      	mov	r4, r5
 801b6d6:	2c00      	cmp	r4, #0
 801b6d8:	f2c0 8102 	blt.w	801b8e0 <__kernel_rem_pio2+0x4d8>
 801b6dc:	4b18      	ldr	r3, [pc, #96]	; (801b740 <__kernel_rem_pio2+0x338>)
 801b6de:	461e      	mov	r6, r3
 801b6e0:	ab70      	add	r3, sp, #448	; 0x1c0
 801b6e2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801b6e6:	1b2b      	subs	r3, r5, r4
 801b6e8:	f04f 0900 	mov.w	r9, #0
 801b6ec:	f04f 0a00 	mov.w	sl, #0
 801b6f0:	2700      	movs	r7, #0
 801b6f2:	9306      	str	r3, [sp, #24]
 801b6f4:	e0e6      	b.n	801b8c4 <__kernel_rem_pio2+0x4bc>
 801b6f6:	f04f 0b02 	mov.w	fp, #2
 801b6fa:	e756      	b.n	801b5aa <__kernel_rem_pio2+0x1a2>
 801b6fc:	f8d8 3000 	ldr.w	r3, [r8]
 801b700:	bb05      	cbnz	r5, 801b744 <__kernel_rem_pio2+0x33c>
 801b702:	b123      	cbz	r3, 801b70e <__kernel_rem_pio2+0x306>
 801b704:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b708:	f8c8 3000 	str.w	r3, [r8]
 801b70c:	2301      	movs	r3, #1
 801b70e:	3201      	adds	r2, #1
 801b710:	f108 0804 	add.w	r8, r8, #4
 801b714:	461d      	mov	r5, r3
 801b716:	e74f      	b.n	801b5b8 <__kernel_rem_pio2+0x1b0>
	...
 801b724:	3ff00000 	.word	0x3ff00000
 801b728:	0801e7e8 	.word	0x0801e7e8
 801b72c:	40200000 	.word	0x40200000
 801b730:	3ff00000 	.word	0x3ff00000
 801b734:	3e700000 	.word	0x3e700000
 801b738:	41700000 	.word	0x41700000
 801b73c:	3fe00000 	.word	0x3fe00000
 801b740:	0801e7a8 	.word	0x0801e7a8
 801b744:	1acb      	subs	r3, r1, r3
 801b746:	f8c8 3000 	str.w	r3, [r8]
 801b74a:	462b      	mov	r3, r5
 801b74c:	e7df      	b.n	801b70e <__kernel_rem_pio2+0x306>
 801b74e:	1e62      	subs	r2, r4, #1
 801b750:	ab0c      	add	r3, sp, #48	; 0x30
 801b752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b756:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b75a:	a90c      	add	r1, sp, #48	; 0x30
 801b75c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b760:	e738      	b.n	801b5d4 <__kernel_rem_pio2+0x1cc>
 801b762:	1e62      	subs	r2, r4, #1
 801b764:	ab0c      	add	r3, sp, #48	; 0x30
 801b766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b76a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b76e:	e7f4      	b.n	801b75a <__kernel_rem_pio2+0x352>
 801b770:	a90c      	add	r1, sp, #48	; 0x30
 801b772:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b776:	3b01      	subs	r3, #1
 801b778:	430a      	orrs	r2, r1
 801b77a:	e788      	b.n	801b68e <__kernel_rem_pio2+0x286>
 801b77c:	3301      	adds	r3, #1
 801b77e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b782:	2900      	cmp	r1, #0
 801b784:	d0fa      	beq.n	801b77c <__kernel_rem_pio2+0x374>
 801b786:	9a08      	ldr	r2, [sp, #32]
 801b788:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801b78c:	446a      	add	r2, sp
 801b78e:	3a98      	subs	r2, #152	; 0x98
 801b790:	9208      	str	r2, [sp, #32]
 801b792:	9a06      	ldr	r2, [sp, #24]
 801b794:	a920      	add	r1, sp, #128	; 0x80
 801b796:	18a2      	adds	r2, r4, r2
 801b798:	18e3      	adds	r3, r4, r3
 801b79a:	f104 0801 	add.w	r8, r4, #1
 801b79e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801b7a2:	9302      	str	r3, [sp, #8]
 801b7a4:	9b02      	ldr	r3, [sp, #8]
 801b7a6:	4543      	cmp	r3, r8
 801b7a8:	da04      	bge.n	801b7b4 <__kernel_rem_pio2+0x3ac>
 801b7aa:	461c      	mov	r4, r3
 801b7ac:	e6a2      	b.n	801b4f4 <__kernel_rem_pio2+0xec>
 801b7ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b7b0:	2301      	movs	r3, #1
 801b7b2:	e7e4      	b.n	801b77e <__kernel_rem_pio2+0x376>
 801b7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7b6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b7ba:	f7e4 feb3 	bl	8000524 <__aeabi_i2d>
 801b7be:	e8e5 0102 	strd	r0, r1, [r5], #8
 801b7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7c4:	46ab      	mov	fp, r5
 801b7c6:	461c      	mov	r4, r3
 801b7c8:	f04f 0900 	mov.w	r9, #0
 801b7cc:	2600      	movs	r6, #0
 801b7ce:	2700      	movs	r7, #0
 801b7d0:	9b05      	ldr	r3, [sp, #20]
 801b7d2:	4599      	cmp	r9, r3
 801b7d4:	dd06      	ble.n	801b7e4 <__kernel_rem_pio2+0x3dc>
 801b7d6:	9b08      	ldr	r3, [sp, #32]
 801b7d8:	e8e3 6702 	strd	r6, r7, [r3], #8
 801b7dc:	f108 0801 	add.w	r8, r8, #1
 801b7e0:	9308      	str	r3, [sp, #32]
 801b7e2:	e7df      	b.n	801b7a4 <__kernel_rem_pio2+0x39c>
 801b7e4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b7e8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b7ec:	f7e4 ff04 	bl	80005f8 <__aeabi_dmul>
 801b7f0:	4602      	mov	r2, r0
 801b7f2:	460b      	mov	r3, r1
 801b7f4:	4630      	mov	r0, r6
 801b7f6:	4639      	mov	r1, r7
 801b7f8:	f7e4 fd48 	bl	800028c <__adddf3>
 801b7fc:	f109 0901 	add.w	r9, r9, #1
 801b800:	4606      	mov	r6, r0
 801b802:	460f      	mov	r7, r1
 801b804:	e7e4      	b.n	801b7d0 <__kernel_rem_pio2+0x3c8>
 801b806:	3d01      	subs	r5, #1
 801b808:	e747      	b.n	801b69a <__kernel_rem_pio2+0x292>
 801b80a:	ec47 6b10 	vmov	d0, r6, r7
 801b80e:	f1ca 0000 	rsb	r0, sl, #0
 801b812:	f000 fba9 	bl	801bf68 <scalbn>
 801b816:	ec57 6b10 	vmov	r6, r7, d0
 801b81a:	4ba0      	ldr	r3, [pc, #640]	; (801ba9c <__kernel_rem_pio2+0x694>)
 801b81c:	ee10 0a10 	vmov	r0, s0
 801b820:	2200      	movs	r2, #0
 801b822:	4639      	mov	r1, r7
 801b824:	f7e5 f96e 	bl	8000b04 <__aeabi_dcmpge>
 801b828:	b1f8      	cbz	r0, 801b86a <__kernel_rem_pio2+0x462>
 801b82a:	4b9d      	ldr	r3, [pc, #628]	; (801baa0 <__kernel_rem_pio2+0x698>)
 801b82c:	2200      	movs	r2, #0
 801b82e:	4630      	mov	r0, r6
 801b830:	4639      	mov	r1, r7
 801b832:	f7e4 fee1 	bl	80005f8 <__aeabi_dmul>
 801b836:	f7e5 f98f 	bl	8000b58 <__aeabi_d2iz>
 801b83a:	4680      	mov	r8, r0
 801b83c:	f7e4 fe72 	bl	8000524 <__aeabi_i2d>
 801b840:	4b96      	ldr	r3, [pc, #600]	; (801ba9c <__kernel_rem_pio2+0x694>)
 801b842:	2200      	movs	r2, #0
 801b844:	f7e4 fed8 	bl	80005f8 <__aeabi_dmul>
 801b848:	460b      	mov	r3, r1
 801b84a:	4602      	mov	r2, r0
 801b84c:	4639      	mov	r1, r7
 801b84e:	4630      	mov	r0, r6
 801b850:	f7e4 fd1a 	bl	8000288 <__aeabi_dsub>
 801b854:	f7e5 f980 	bl	8000b58 <__aeabi_d2iz>
 801b858:	1c65      	adds	r5, r4, #1
 801b85a:	ab0c      	add	r3, sp, #48	; 0x30
 801b85c:	f10a 0a18 	add.w	sl, sl, #24
 801b860:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b864:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801b868:	e71f      	b.n	801b6aa <__kernel_rem_pio2+0x2a2>
 801b86a:	4630      	mov	r0, r6
 801b86c:	4639      	mov	r1, r7
 801b86e:	f7e5 f973 	bl	8000b58 <__aeabi_d2iz>
 801b872:	ab0c      	add	r3, sp, #48	; 0x30
 801b874:	4625      	mov	r5, r4
 801b876:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b87a:	e716      	b.n	801b6aa <__kernel_rem_pio2+0x2a2>
 801b87c:	ab0c      	add	r3, sp, #48	; 0x30
 801b87e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b882:	f7e4 fe4f 	bl	8000524 <__aeabi_i2d>
 801b886:	4632      	mov	r2, r6
 801b888:	463b      	mov	r3, r7
 801b88a:	f7e4 feb5 	bl	80005f8 <__aeabi_dmul>
 801b88e:	4642      	mov	r2, r8
 801b890:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801b894:	464b      	mov	r3, r9
 801b896:	4630      	mov	r0, r6
 801b898:	4639      	mov	r1, r7
 801b89a:	f7e4 fead 	bl	80005f8 <__aeabi_dmul>
 801b89e:	3c01      	subs	r4, #1
 801b8a0:	4606      	mov	r6, r0
 801b8a2:	460f      	mov	r7, r1
 801b8a4:	e713      	b.n	801b6ce <__kernel_rem_pio2+0x2c6>
 801b8a6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801b8aa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801b8ae:	f7e4 fea3 	bl	80005f8 <__aeabi_dmul>
 801b8b2:	4602      	mov	r2, r0
 801b8b4:	460b      	mov	r3, r1
 801b8b6:	4648      	mov	r0, r9
 801b8b8:	4651      	mov	r1, sl
 801b8ba:	f7e4 fce7 	bl	800028c <__adddf3>
 801b8be:	3701      	adds	r7, #1
 801b8c0:	4681      	mov	r9, r0
 801b8c2:	468a      	mov	sl, r1
 801b8c4:	9b00      	ldr	r3, [sp, #0]
 801b8c6:	429f      	cmp	r7, r3
 801b8c8:	dc02      	bgt.n	801b8d0 <__kernel_rem_pio2+0x4c8>
 801b8ca:	9b06      	ldr	r3, [sp, #24]
 801b8cc:	429f      	cmp	r7, r3
 801b8ce:	ddea      	ble.n	801b8a6 <__kernel_rem_pio2+0x49e>
 801b8d0:	9a06      	ldr	r2, [sp, #24]
 801b8d2:	ab48      	add	r3, sp, #288	; 0x120
 801b8d4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801b8d8:	e9c6 9a00 	strd	r9, sl, [r6]
 801b8dc:	3c01      	subs	r4, #1
 801b8de:	e6fa      	b.n	801b6d6 <__kernel_rem_pio2+0x2ce>
 801b8e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b8e2:	2b02      	cmp	r3, #2
 801b8e4:	dc0b      	bgt.n	801b8fe <__kernel_rem_pio2+0x4f6>
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	dc39      	bgt.n	801b95e <__kernel_rem_pio2+0x556>
 801b8ea:	d05d      	beq.n	801b9a8 <__kernel_rem_pio2+0x5a0>
 801b8ec:	9b02      	ldr	r3, [sp, #8]
 801b8ee:	f003 0007 	and.w	r0, r3, #7
 801b8f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801b8f6:	ecbd 8b02 	vpop	{d8}
 801b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b900:	2b03      	cmp	r3, #3
 801b902:	d1f3      	bne.n	801b8ec <__kernel_rem_pio2+0x4e4>
 801b904:	9b05      	ldr	r3, [sp, #20]
 801b906:	9500      	str	r5, [sp, #0]
 801b908:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801b90c:	eb0d 0403 	add.w	r4, sp, r3
 801b910:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801b914:	46a2      	mov	sl, r4
 801b916:	9b00      	ldr	r3, [sp, #0]
 801b918:	2b00      	cmp	r3, #0
 801b91a:	f1aa 0a08 	sub.w	sl, sl, #8
 801b91e:	dc69      	bgt.n	801b9f4 <__kernel_rem_pio2+0x5ec>
 801b920:	46aa      	mov	sl, r5
 801b922:	f1ba 0f01 	cmp.w	sl, #1
 801b926:	f1a4 0408 	sub.w	r4, r4, #8
 801b92a:	f300 8083 	bgt.w	801ba34 <__kernel_rem_pio2+0x62c>
 801b92e:	9c05      	ldr	r4, [sp, #20]
 801b930:	ab48      	add	r3, sp, #288	; 0x120
 801b932:	441c      	add	r4, r3
 801b934:	2000      	movs	r0, #0
 801b936:	2100      	movs	r1, #0
 801b938:	2d01      	cmp	r5, #1
 801b93a:	f300 809a 	bgt.w	801ba72 <__kernel_rem_pio2+0x66a>
 801b93e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801b942:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801b946:	f1bb 0f00 	cmp.w	fp, #0
 801b94a:	f040 8098 	bne.w	801ba7e <__kernel_rem_pio2+0x676>
 801b94e:	9b04      	ldr	r3, [sp, #16]
 801b950:	e9c3 7800 	strd	r7, r8, [r3]
 801b954:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801b958:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b95c:	e7c6      	b.n	801b8ec <__kernel_rem_pio2+0x4e4>
 801b95e:	9e05      	ldr	r6, [sp, #20]
 801b960:	ab48      	add	r3, sp, #288	; 0x120
 801b962:	441e      	add	r6, r3
 801b964:	462c      	mov	r4, r5
 801b966:	2000      	movs	r0, #0
 801b968:	2100      	movs	r1, #0
 801b96a:	2c00      	cmp	r4, #0
 801b96c:	da33      	bge.n	801b9d6 <__kernel_rem_pio2+0x5ce>
 801b96e:	f1bb 0f00 	cmp.w	fp, #0
 801b972:	d036      	beq.n	801b9e2 <__kernel_rem_pio2+0x5da>
 801b974:	4602      	mov	r2, r0
 801b976:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b97a:	9c04      	ldr	r4, [sp, #16]
 801b97c:	e9c4 2300 	strd	r2, r3, [r4]
 801b980:	4602      	mov	r2, r0
 801b982:	460b      	mov	r3, r1
 801b984:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801b988:	f7e4 fc7e 	bl	8000288 <__aeabi_dsub>
 801b98c:	ae4a      	add	r6, sp, #296	; 0x128
 801b98e:	2401      	movs	r4, #1
 801b990:	42a5      	cmp	r5, r4
 801b992:	da29      	bge.n	801b9e8 <__kernel_rem_pio2+0x5e0>
 801b994:	f1bb 0f00 	cmp.w	fp, #0
 801b998:	d002      	beq.n	801b9a0 <__kernel_rem_pio2+0x598>
 801b99a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b99e:	4619      	mov	r1, r3
 801b9a0:	9b04      	ldr	r3, [sp, #16]
 801b9a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b9a6:	e7a1      	b.n	801b8ec <__kernel_rem_pio2+0x4e4>
 801b9a8:	9c05      	ldr	r4, [sp, #20]
 801b9aa:	ab48      	add	r3, sp, #288	; 0x120
 801b9ac:	441c      	add	r4, r3
 801b9ae:	2000      	movs	r0, #0
 801b9b0:	2100      	movs	r1, #0
 801b9b2:	2d00      	cmp	r5, #0
 801b9b4:	da09      	bge.n	801b9ca <__kernel_rem_pio2+0x5c2>
 801b9b6:	f1bb 0f00 	cmp.w	fp, #0
 801b9ba:	d002      	beq.n	801b9c2 <__kernel_rem_pio2+0x5ba>
 801b9bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b9c0:	4619      	mov	r1, r3
 801b9c2:	9b04      	ldr	r3, [sp, #16]
 801b9c4:	e9c3 0100 	strd	r0, r1, [r3]
 801b9c8:	e790      	b.n	801b8ec <__kernel_rem_pio2+0x4e4>
 801b9ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b9ce:	f7e4 fc5d 	bl	800028c <__adddf3>
 801b9d2:	3d01      	subs	r5, #1
 801b9d4:	e7ed      	b.n	801b9b2 <__kernel_rem_pio2+0x5aa>
 801b9d6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801b9da:	f7e4 fc57 	bl	800028c <__adddf3>
 801b9de:	3c01      	subs	r4, #1
 801b9e0:	e7c3      	b.n	801b96a <__kernel_rem_pio2+0x562>
 801b9e2:	4602      	mov	r2, r0
 801b9e4:	460b      	mov	r3, r1
 801b9e6:	e7c8      	b.n	801b97a <__kernel_rem_pio2+0x572>
 801b9e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801b9ec:	f7e4 fc4e 	bl	800028c <__adddf3>
 801b9f0:	3401      	adds	r4, #1
 801b9f2:	e7cd      	b.n	801b990 <__kernel_rem_pio2+0x588>
 801b9f4:	e9da 8900 	ldrd	r8, r9, [sl]
 801b9f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b9fc:	9b00      	ldr	r3, [sp, #0]
 801b9fe:	3b01      	subs	r3, #1
 801ba00:	9300      	str	r3, [sp, #0]
 801ba02:	4632      	mov	r2, r6
 801ba04:	463b      	mov	r3, r7
 801ba06:	4640      	mov	r0, r8
 801ba08:	4649      	mov	r1, r9
 801ba0a:	f7e4 fc3f 	bl	800028c <__adddf3>
 801ba0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ba12:	4602      	mov	r2, r0
 801ba14:	460b      	mov	r3, r1
 801ba16:	4640      	mov	r0, r8
 801ba18:	4649      	mov	r1, r9
 801ba1a:	f7e4 fc35 	bl	8000288 <__aeabi_dsub>
 801ba1e:	4632      	mov	r2, r6
 801ba20:	463b      	mov	r3, r7
 801ba22:	f7e4 fc33 	bl	800028c <__adddf3>
 801ba26:	ed9d 7b06 	vldr	d7, [sp, #24]
 801ba2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ba2e:	ed8a 7b00 	vstr	d7, [sl]
 801ba32:	e770      	b.n	801b916 <__kernel_rem_pio2+0x50e>
 801ba34:	e9d4 8900 	ldrd	r8, r9, [r4]
 801ba38:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801ba3c:	4640      	mov	r0, r8
 801ba3e:	4632      	mov	r2, r6
 801ba40:	463b      	mov	r3, r7
 801ba42:	4649      	mov	r1, r9
 801ba44:	f7e4 fc22 	bl	800028c <__adddf3>
 801ba48:	e9cd 0100 	strd	r0, r1, [sp]
 801ba4c:	4602      	mov	r2, r0
 801ba4e:	460b      	mov	r3, r1
 801ba50:	4640      	mov	r0, r8
 801ba52:	4649      	mov	r1, r9
 801ba54:	f7e4 fc18 	bl	8000288 <__aeabi_dsub>
 801ba58:	4632      	mov	r2, r6
 801ba5a:	463b      	mov	r3, r7
 801ba5c:	f7e4 fc16 	bl	800028c <__adddf3>
 801ba60:	ed9d 7b00 	vldr	d7, [sp]
 801ba64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ba68:	ed84 7b00 	vstr	d7, [r4]
 801ba6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba70:	e757      	b.n	801b922 <__kernel_rem_pio2+0x51a>
 801ba72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ba76:	f7e4 fc09 	bl	800028c <__adddf3>
 801ba7a:	3d01      	subs	r5, #1
 801ba7c:	e75c      	b.n	801b938 <__kernel_rem_pio2+0x530>
 801ba7e:	9b04      	ldr	r3, [sp, #16]
 801ba80:	9a04      	ldr	r2, [sp, #16]
 801ba82:	601f      	str	r7, [r3, #0]
 801ba84:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801ba88:	605c      	str	r4, [r3, #4]
 801ba8a:	609d      	str	r5, [r3, #8]
 801ba8c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801ba90:	60d3      	str	r3, [r2, #12]
 801ba92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ba96:	6110      	str	r0, [r2, #16]
 801ba98:	6153      	str	r3, [r2, #20]
 801ba9a:	e727      	b.n	801b8ec <__kernel_rem_pio2+0x4e4>
 801ba9c:	41700000 	.word	0x41700000
 801baa0:	3e700000 	.word	0x3e700000
 801baa4:	00000000 	.word	0x00000000

0801baa8 <__ieee754_acos>:
 801baa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baac:	ec55 4b10 	vmov	r4, r5, d0
 801bab0:	49b7      	ldr	r1, [pc, #732]	; (801bd90 <__ieee754_acos+0x2e8>)
 801bab2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bab6:	428b      	cmp	r3, r1
 801bab8:	dd1b      	ble.n	801baf2 <__ieee754_acos+0x4a>
 801baba:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801babe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801bac2:	4323      	orrs	r3, r4
 801bac4:	d106      	bne.n	801bad4 <__ieee754_acos+0x2c>
 801bac6:	2d00      	cmp	r5, #0
 801bac8:	f300 8211 	bgt.w	801beee <__ieee754_acos+0x446>
 801bacc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801bd28 <__ieee754_acos+0x280>
 801bad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad4:	ee10 2a10 	vmov	r2, s0
 801bad8:	462b      	mov	r3, r5
 801bada:	ee10 0a10 	vmov	r0, s0
 801bade:	4629      	mov	r1, r5
 801bae0:	f7e4 fbd2 	bl	8000288 <__aeabi_dsub>
 801bae4:	4602      	mov	r2, r0
 801bae6:	460b      	mov	r3, r1
 801bae8:	f7e4 feb0 	bl	800084c <__aeabi_ddiv>
 801baec:	ec41 0b10 	vmov	d0, r0, r1
 801baf0:	e7ee      	b.n	801bad0 <__ieee754_acos+0x28>
 801baf2:	49a8      	ldr	r1, [pc, #672]	; (801bd94 <__ieee754_acos+0x2ec>)
 801baf4:	428b      	cmp	r3, r1
 801baf6:	f300 8087 	bgt.w	801bc08 <__ieee754_acos+0x160>
 801bafa:	4aa7      	ldr	r2, [pc, #668]	; (801bd98 <__ieee754_acos+0x2f0>)
 801bafc:	4293      	cmp	r3, r2
 801bafe:	f340 81f9 	ble.w	801bef4 <__ieee754_acos+0x44c>
 801bb02:	ee10 2a10 	vmov	r2, s0
 801bb06:	ee10 0a10 	vmov	r0, s0
 801bb0a:	462b      	mov	r3, r5
 801bb0c:	4629      	mov	r1, r5
 801bb0e:	f7e4 fd73 	bl	80005f8 <__aeabi_dmul>
 801bb12:	a387      	add	r3, pc, #540	; (adr r3, 801bd30 <__ieee754_acos+0x288>)
 801bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb18:	4606      	mov	r6, r0
 801bb1a:	460f      	mov	r7, r1
 801bb1c:	f7e4 fd6c 	bl	80005f8 <__aeabi_dmul>
 801bb20:	a385      	add	r3, pc, #532	; (adr r3, 801bd38 <__ieee754_acos+0x290>)
 801bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb26:	f7e4 fbb1 	bl	800028c <__adddf3>
 801bb2a:	4632      	mov	r2, r6
 801bb2c:	463b      	mov	r3, r7
 801bb2e:	f7e4 fd63 	bl	80005f8 <__aeabi_dmul>
 801bb32:	a383      	add	r3, pc, #524	; (adr r3, 801bd40 <__ieee754_acos+0x298>)
 801bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb38:	f7e4 fba6 	bl	8000288 <__aeabi_dsub>
 801bb3c:	4632      	mov	r2, r6
 801bb3e:	463b      	mov	r3, r7
 801bb40:	f7e4 fd5a 	bl	80005f8 <__aeabi_dmul>
 801bb44:	a380      	add	r3, pc, #512	; (adr r3, 801bd48 <__ieee754_acos+0x2a0>)
 801bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb4a:	f7e4 fb9f 	bl	800028c <__adddf3>
 801bb4e:	4632      	mov	r2, r6
 801bb50:	463b      	mov	r3, r7
 801bb52:	f7e4 fd51 	bl	80005f8 <__aeabi_dmul>
 801bb56:	a37e      	add	r3, pc, #504	; (adr r3, 801bd50 <__ieee754_acos+0x2a8>)
 801bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb5c:	f7e4 fb94 	bl	8000288 <__aeabi_dsub>
 801bb60:	4632      	mov	r2, r6
 801bb62:	463b      	mov	r3, r7
 801bb64:	f7e4 fd48 	bl	80005f8 <__aeabi_dmul>
 801bb68:	a37b      	add	r3, pc, #492	; (adr r3, 801bd58 <__ieee754_acos+0x2b0>)
 801bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb6e:	f7e4 fb8d 	bl	800028c <__adddf3>
 801bb72:	4632      	mov	r2, r6
 801bb74:	463b      	mov	r3, r7
 801bb76:	f7e4 fd3f 	bl	80005f8 <__aeabi_dmul>
 801bb7a:	a379      	add	r3, pc, #484	; (adr r3, 801bd60 <__ieee754_acos+0x2b8>)
 801bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb80:	4680      	mov	r8, r0
 801bb82:	4689      	mov	r9, r1
 801bb84:	4630      	mov	r0, r6
 801bb86:	4639      	mov	r1, r7
 801bb88:	f7e4 fd36 	bl	80005f8 <__aeabi_dmul>
 801bb8c:	a376      	add	r3, pc, #472	; (adr r3, 801bd68 <__ieee754_acos+0x2c0>)
 801bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb92:	f7e4 fb79 	bl	8000288 <__aeabi_dsub>
 801bb96:	4632      	mov	r2, r6
 801bb98:	463b      	mov	r3, r7
 801bb9a:	f7e4 fd2d 	bl	80005f8 <__aeabi_dmul>
 801bb9e:	a374      	add	r3, pc, #464	; (adr r3, 801bd70 <__ieee754_acos+0x2c8>)
 801bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba4:	f7e4 fb72 	bl	800028c <__adddf3>
 801bba8:	4632      	mov	r2, r6
 801bbaa:	463b      	mov	r3, r7
 801bbac:	f7e4 fd24 	bl	80005f8 <__aeabi_dmul>
 801bbb0:	a371      	add	r3, pc, #452	; (adr r3, 801bd78 <__ieee754_acos+0x2d0>)
 801bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbb6:	f7e4 fb67 	bl	8000288 <__aeabi_dsub>
 801bbba:	4632      	mov	r2, r6
 801bbbc:	463b      	mov	r3, r7
 801bbbe:	f7e4 fd1b 	bl	80005f8 <__aeabi_dmul>
 801bbc2:	4b76      	ldr	r3, [pc, #472]	; (801bd9c <__ieee754_acos+0x2f4>)
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	f7e4 fb61 	bl	800028c <__adddf3>
 801bbca:	4602      	mov	r2, r0
 801bbcc:	460b      	mov	r3, r1
 801bbce:	4640      	mov	r0, r8
 801bbd0:	4649      	mov	r1, r9
 801bbd2:	f7e4 fe3b 	bl	800084c <__aeabi_ddiv>
 801bbd6:	4622      	mov	r2, r4
 801bbd8:	462b      	mov	r3, r5
 801bbda:	f7e4 fd0d 	bl	80005f8 <__aeabi_dmul>
 801bbde:	4602      	mov	r2, r0
 801bbe0:	460b      	mov	r3, r1
 801bbe2:	a167      	add	r1, pc, #412	; (adr r1, 801bd80 <__ieee754_acos+0x2d8>)
 801bbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbe8:	f7e4 fb4e 	bl	8000288 <__aeabi_dsub>
 801bbec:	4602      	mov	r2, r0
 801bbee:	460b      	mov	r3, r1
 801bbf0:	4620      	mov	r0, r4
 801bbf2:	4629      	mov	r1, r5
 801bbf4:	f7e4 fb48 	bl	8000288 <__aeabi_dsub>
 801bbf8:	4602      	mov	r2, r0
 801bbfa:	460b      	mov	r3, r1
 801bbfc:	a162      	add	r1, pc, #392	; (adr r1, 801bd88 <__ieee754_acos+0x2e0>)
 801bbfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bc02:	f7e4 fb41 	bl	8000288 <__aeabi_dsub>
 801bc06:	e771      	b.n	801baec <__ieee754_acos+0x44>
 801bc08:	2d00      	cmp	r5, #0
 801bc0a:	f280 80cb 	bge.w	801bda4 <__ieee754_acos+0x2fc>
 801bc0e:	ee10 0a10 	vmov	r0, s0
 801bc12:	4b62      	ldr	r3, [pc, #392]	; (801bd9c <__ieee754_acos+0x2f4>)
 801bc14:	2200      	movs	r2, #0
 801bc16:	4629      	mov	r1, r5
 801bc18:	f7e4 fb38 	bl	800028c <__adddf3>
 801bc1c:	4b60      	ldr	r3, [pc, #384]	; (801bda0 <__ieee754_acos+0x2f8>)
 801bc1e:	2200      	movs	r2, #0
 801bc20:	f7e4 fcea 	bl	80005f8 <__aeabi_dmul>
 801bc24:	a342      	add	r3, pc, #264	; (adr r3, 801bd30 <__ieee754_acos+0x288>)
 801bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc2a:	4604      	mov	r4, r0
 801bc2c:	460d      	mov	r5, r1
 801bc2e:	f7e4 fce3 	bl	80005f8 <__aeabi_dmul>
 801bc32:	a341      	add	r3, pc, #260	; (adr r3, 801bd38 <__ieee754_acos+0x290>)
 801bc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc38:	f7e4 fb28 	bl	800028c <__adddf3>
 801bc3c:	4622      	mov	r2, r4
 801bc3e:	462b      	mov	r3, r5
 801bc40:	f7e4 fcda 	bl	80005f8 <__aeabi_dmul>
 801bc44:	a33e      	add	r3, pc, #248	; (adr r3, 801bd40 <__ieee754_acos+0x298>)
 801bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc4a:	f7e4 fb1d 	bl	8000288 <__aeabi_dsub>
 801bc4e:	4622      	mov	r2, r4
 801bc50:	462b      	mov	r3, r5
 801bc52:	f7e4 fcd1 	bl	80005f8 <__aeabi_dmul>
 801bc56:	a33c      	add	r3, pc, #240	; (adr r3, 801bd48 <__ieee754_acos+0x2a0>)
 801bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc5c:	f7e4 fb16 	bl	800028c <__adddf3>
 801bc60:	4622      	mov	r2, r4
 801bc62:	462b      	mov	r3, r5
 801bc64:	f7e4 fcc8 	bl	80005f8 <__aeabi_dmul>
 801bc68:	a339      	add	r3, pc, #228	; (adr r3, 801bd50 <__ieee754_acos+0x2a8>)
 801bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc6e:	f7e4 fb0b 	bl	8000288 <__aeabi_dsub>
 801bc72:	4622      	mov	r2, r4
 801bc74:	462b      	mov	r3, r5
 801bc76:	f7e4 fcbf 	bl	80005f8 <__aeabi_dmul>
 801bc7a:	a337      	add	r3, pc, #220	; (adr r3, 801bd58 <__ieee754_acos+0x2b0>)
 801bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc80:	f7e4 fb04 	bl	800028c <__adddf3>
 801bc84:	4622      	mov	r2, r4
 801bc86:	462b      	mov	r3, r5
 801bc88:	f7e4 fcb6 	bl	80005f8 <__aeabi_dmul>
 801bc8c:	ec45 4b10 	vmov	d0, r4, r5
 801bc90:	4680      	mov	r8, r0
 801bc92:	4689      	mov	r9, r1
 801bc94:	f000 f9e6 	bl	801c064 <__ieee754_sqrt>
 801bc98:	a331      	add	r3, pc, #196	; (adr r3, 801bd60 <__ieee754_acos+0x2b8>)
 801bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc9e:	4620      	mov	r0, r4
 801bca0:	4629      	mov	r1, r5
 801bca2:	ec57 6b10 	vmov	r6, r7, d0
 801bca6:	f7e4 fca7 	bl	80005f8 <__aeabi_dmul>
 801bcaa:	a32f      	add	r3, pc, #188	; (adr r3, 801bd68 <__ieee754_acos+0x2c0>)
 801bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcb0:	f7e4 faea 	bl	8000288 <__aeabi_dsub>
 801bcb4:	4622      	mov	r2, r4
 801bcb6:	462b      	mov	r3, r5
 801bcb8:	f7e4 fc9e 	bl	80005f8 <__aeabi_dmul>
 801bcbc:	a32c      	add	r3, pc, #176	; (adr r3, 801bd70 <__ieee754_acos+0x2c8>)
 801bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcc2:	f7e4 fae3 	bl	800028c <__adddf3>
 801bcc6:	4622      	mov	r2, r4
 801bcc8:	462b      	mov	r3, r5
 801bcca:	f7e4 fc95 	bl	80005f8 <__aeabi_dmul>
 801bcce:	a32a      	add	r3, pc, #168	; (adr r3, 801bd78 <__ieee754_acos+0x2d0>)
 801bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd4:	f7e4 fad8 	bl	8000288 <__aeabi_dsub>
 801bcd8:	4622      	mov	r2, r4
 801bcda:	462b      	mov	r3, r5
 801bcdc:	f7e4 fc8c 	bl	80005f8 <__aeabi_dmul>
 801bce0:	4b2e      	ldr	r3, [pc, #184]	; (801bd9c <__ieee754_acos+0x2f4>)
 801bce2:	2200      	movs	r2, #0
 801bce4:	f7e4 fad2 	bl	800028c <__adddf3>
 801bce8:	4602      	mov	r2, r0
 801bcea:	460b      	mov	r3, r1
 801bcec:	4640      	mov	r0, r8
 801bcee:	4649      	mov	r1, r9
 801bcf0:	f7e4 fdac 	bl	800084c <__aeabi_ddiv>
 801bcf4:	4632      	mov	r2, r6
 801bcf6:	463b      	mov	r3, r7
 801bcf8:	f7e4 fc7e 	bl	80005f8 <__aeabi_dmul>
 801bcfc:	a320      	add	r3, pc, #128	; (adr r3, 801bd80 <__ieee754_acos+0x2d8>)
 801bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd02:	f7e4 fac1 	bl	8000288 <__aeabi_dsub>
 801bd06:	4632      	mov	r2, r6
 801bd08:	463b      	mov	r3, r7
 801bd0a:	f7e4 fabf 	bl	800028c <__adddf3>
 801bd0e:	4602      	mov	r2, r0
 801bd10:	460b      	mov	r3, r1
 801bd12:	f7e4 fabb 	bl	800028c <__adddf3>
 801bd16:	4602      	mov	r2, r0
 801bd18:	460b      	mov	r3, r1
 801bd1a:	a103      	add	r1, pc, #12	; (adr r1, 801bd28 <__ieee754_acos+0x280>)
 801bd1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd20:	e76f      	b.n	801bc02 <__ieee754_acos+0x15a>
 801bd22:	bf00      	nop
 801bd24:	f3af 8000 	nop.w
 801bd28:	54442d18 	.word	0x54442d18
 801bd2c:	400921fb 	.word	0x400921fb
 801bd30:	0dfdf709 	.word	0x0dfdf709
 801bd34:	3f023de1 	.word	0x3f023de1
 801bd38:	7501b288 	.word	0x7501b288
 801bd3c:	3f49efe0 	.word	0x3f49efe0
 801bd40:	b5688f3b 	.word	0xb5688f3b
 801bd44:	3fa48228 	.word	0x3fa48228
 801bd48:	0e884455 	.word	0x0e884455
 801bd4c:	3fc9c155 	.word	0x3fc9c155
 801bd50:	03eb6f7d 	.word	0x03eb6f7d
 801bd54:	3fd4d612 	.word	0x3fd4d612
 801bd58:	55555555 	.word	0x55555555
 801bd5c:	3fc55555 	.word	0x3fc55555
 801bd60:	b12e9282 	.word	0xb12e9282
 801bd64:	3fb3b8c5 	.word	0x3fb3b8c5
 801bd68:	1b8d0159 	.word	0x1b8d0159
 801bd6c:	3fe6066c 	.word	0x3fe6066c
 801bd70:	9c598ac8 	.word	0x9c598ac8
 801bd74:	40002ae5 	.word	0x40002ae5
 801bd78:	1c8a2d4b 	.word	0x1c8a2d4b
 801bd7c:	40033a27 	.word	0x40033a27
 801bd80:	33145c07 	.word	0x33145c07
 801bd84:	3c91a626 	.word	0x3c91a626
 801bd88:	54442d18 	.word	0x54442d18
 801bd8c:	3ff921fb 	.word	0x3ff921fb
 801bd90:	3fefffff 	.word	0x3fefffff
 801bd94:	3fdfffff 	.word	0x3fdfffff
 801bd98:	3c600000 	.word	0x3c600000
 801bd9c:	3ff00000 	.word	0x3ff00000
 801bda0:	3fe00000 	.word	0x3fe00000
 801bda4:	ee10 2a10 	vmov	r2, s0
 801bda8:	462b      	mov	r3, r5
 801bdaa:	496d      	ldr	r1, [pc, #436]	; (801bf60 <__ieee754_acos+0x4b8>)
 801bdac:	2000      	movs	r0, #0
 801bdae:	f7e4 fa6b 	bl	8000288 <__aeabi_dsub>
 801bdb2:	4b6c      	ldr	r3, [pc, #432]	; (801bf64 <__ieee754_acos+0x4bc>)
 801bdb4:	2200      	movs	r2, #0
 801bdb6:	f7e4 fc1f 	bl	80005f8 <__aeabi_dmul>
 801bdba:	4604      	mov	r4, r0
 801bdbc:	460d      	mov	r5, r1
 801bdbe:	ec45 4b10 	vmov	d0, r4, r5
 801bdc2:	f000 f94f 	bl	801c064 <__ieee754_sqrt>
 801bdc6:	a34e      	add	r3, pc, #312	; (adr r3, 801bf00 <__ieee754_acos+0x458>)
 801bdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdcc:	4620      	mov	r0, r4
 801bdce:	4629      	mov	r1, r5
 801bdd0:	ec59 8b10 	vmov	r8, r9, d0
 801bdd4:	f7e4 fc10 	bl	80005f8 <__aeabi_dmul>
 801bdd8:	a34b      	add	r3, pc, #300	; (adr r3, 801bf08 <__ieee754_acos+0x460>)
 801bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdde:	f7e4 fa55 	bl	800028c <__adddf3>
 801bde2:	4622      	mov	r2, r4
 801bde4:	462b      	mov	r3, r5
 801bde6:	f7e4 fc07 	bl	80005f8 <__aeabi_dmul>
 801bdea:	a349      	add	r3, pc, #292	; (adr r3, 801bf10 <__ieee754_acos+0x468>)
 801bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdf0:	f7e4 fa4a 	bl	8000288 <__aeabi_dsub>
 801bdf4:	4622      	mov	r2, r4
 801bdf6:	462b      	mov	r3, r5
 801bdf8:	f7e4 fbfe 	bl	80005f8 <__aeabi_dmul>
 801bdfc:	a346      	add	r3, pc, #280	; (adr r3, 801bf18 <__ieee754_acos+0x470>)
 801bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be02:	f7e4 fa43 	bl	800028c <__adddf3>
 801be06:	4622      	mov	r2, r4
 801be08:	462b      	mov	r3, r5
 801be0a:	f7e4 fbf5 	bl	80005f8 <__aeabi_dmul>
 801be0e:	a344      	add	r3, pc, #272	; (adr r3, 801bf20 <__ieee754_acos+0x478>)
 801be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be14:	f7e4 fa38 	bl	8000288 <__aeabi_dsub>
 801be18:	4622      	mov	r2, r4
 801be1a:	462b      	mov	r3, r5
 801be1c:	f7e4 fbec 	bl	80005f8 <__aeabi_dmul>
 801be20:	a341      	add	r3, pc, #260	; (adr r3, 801bf28 <__ieee754_acos+0x480>)
 801be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be26:	f7e4 fa31 	bl	800028c <__adddf3>
 801be2a:	4622      	mov	r2, r4
 801be2c:	462b      	mov	r3, r5
 801be2e:	f7e4 fbe3 	bl	80005f8 <__aeabi_dmul>
 801be32:	a33f      	add	r3, pc, #252	; (adr r3, 801bf30 <__ieee754_acos+0x488>)
 801be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be38:	4682      	mov	sl, r0
 801be3a:	468b      	mov	fp, r1
 801be3c:	4620      	mov	r0, r4
 801be3e:	4629      	mov	r1, r5
 801be40:	f7e4 fbda 	bl	80005f8 <__aeabi_dmul>
 801be44:	a33c      	add	r3, pc, #240	; (adr r3, 801bf38 <__ieee754_acos+0x490>)
 801be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be4a:	f7e4 fa1d 	bl	8000288 <__aeabi_dsub>
 801be4e:	4622      	mov	r2, r4
 801be50:	462b      	mov	r3, r5
 801be52:	f7e4 fbd1 	bl	80005f8 <__aeabi_dmul>
 801be56:	a33a      	add	r3, pc, #232	; (adr r3, 801bf40 <__ieee754_acos+0x498>)
 801be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be5c:	f7e4 fa16 	bl	800028c <__adddf3>
 801be60:	4622      	mov	r2, r4
 801be62:	462b      	mov	r3, r5
 801be64:	f7e4 fbc8 	bl	80005f8 <__aeabi_dmul>
 801be68:	a337      	add	r3, pc, #220	; (adr r3, 801bf48 <__ieee754_acos+0x4a0>)
 801be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be6e:	f7e4 fa0b 	bl	8000288 <__aeabi_dsub>
 801be72:	4622      	mov	r2, r4
 801be74:	462b      	mov	r3, r5
 801be76:	f7e4 fbbf 	bl	80005f8 <__aeabi_dmul>
 801be7a:	4b39      	ldr	r3, [pc, #228]	; (801bf60 <__ieee754_acos+0x4b8>)
 801be7c:	2200      	movs	r2, #0
 801be7e:	f7e4 fa05 	bl	800028c <__adddf3>
 801be82:	4602      	mov	r2, r0
 801be84:	460b      	mov	r3, r1
 801be86:	4650      	mov	r0, sl
 801be88:	4659      	mov	r1, fp
 801be8a:	f7e4 fcdf 	bl	800084c <__aeabi_ddiv>
 801be8e:	4642      	mov	r2, r8
 801be90:	464b      	mov	r3, r9
 801be92:	f7e4 fbb1 	bl	80005f8 <__aeabi_dmul>
 801be96:	2600      	movs	r6, #0
 801be98:	4682      	mov	sl, r0
 801be9a:	468b      	mov	fp, r1
 801be9c:	4632      	mov	r2, r6
 801be9e:	464b      	mov	r3, r9
 801bea0:	4630      	mov	r0, r6
 801bea2:	4649      	mov	r1, r9
 801bea4:	f7e4 fba8 	bl	80005f8 <__aeabi_dmul>
 801bea8:	4602      	mov	r2, r0
 801beaa:	460b      	mov	r3, r1
 801beac:	4620      	mov	r0, r4
 801beae:	4629      	mov	r1, r5
 801beb0:	f7e4 f9ea 	bl	8000288 <__aeabi_dsub>
 801beb4:	4632      	mov	r2, r6
 801beb6:	4604      	mov	r4, r0
 801beb8:	460d      	mov	r5, r1
 801beba:	464b      	mov	r3, r9
 801bebc:	4640      	mov	r0, r8
 801bebe:	4649      	mov	r1, r9
 801bec0:	f7e4 f9e4 	bl	800028c <__adddf3>
 801bec4:	4602      	mov	r2, r0
 801bec6:	460b      	mov	r3, r1
 801bec8:	4620      	mov	r0, r4
 801beca:	4629      	mov	r1, r5
 801becc:	f7e4 fcbe 	bl	800084c <__aeabi_ddiv>
 801bed0:	4602      	mov	r2, r0
 801bed2:	460b      	mov	r3, r1
 801bed4:	4650      	mov	r0, sl
 801bed6:	4659      	mov	r1, fp
 801bed8:	f7e4 f9d8 	bl	800028c <__adddf3>
 801bedc:	4632      	mov	r2, r6
 801bede:	464b      	mov	r3, r9
 801bee0:	f7e4 f9d4 	bl	800028c <__adddf3>
 801bee4:	4602      	mov	r2, r0
 801bee6:	460b      	mov	r3, r1
 801bee8:	f7e4 f9d0 	bl	800028c <__adddf3>
 801beec:	e5fe      	b.n	801baec <__ieee754_acos+0x44>
 801beee:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801bf50 <__ieee754_acos+0x4a8>
 801bef2:	e5ed      	b.n	801bad0 <__ieee754_acos+0x28>
 801bef4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801bf58 <__ieee754_acos+0x4b0>
 801bef8:	e5ea      	b.n	801bad0 <__ieee754_acos+0x28>
 801befa:	bf00      	nop
 801befc:	f3af 8000 	nop.w
 801bf00:	0dfdf709 	.word	0x0dfdf709
 801bf04:	3f023de1 	.word	0x3f023de1
 801bf08:	7501b288 	.word	0x7501b288
 801bf0c:	3f49efe0 	.word	0x3f49efe0
 801bf10:	b5688f3b 	.word	0xb5688f3b
 801bf14:	3fa48228 	.word	0x3fa48228
 801bf18:	0e884455 	.word	0x0e884455
 801bf1c:	3fc9c155 	.word	0x3fc9c155
 801bf20:	03eb6f7d 	.word	0x03eb6f7d
 801bf24:	3fd4d612 	.word	0x3fd4d612
 801bf28:	55555555 	.word	0x55555555
 801bf2c:	3fc55555 	.word	0x3fc55555
 801bf30:	b12e9282 	.word	0xb12e9282
 801bf34:	3fb3b8c5 	.word	0x3fb3b8c5
 801bf38:	1b8d0159 	.word	0x1b8d0159
 801bf3c:	3fe6066c 	.word	0x3fe6066c
 801bf40:	9c598ac8 	.word	0x9c598ac8
 801bf44:	40002ae5 	.word	0x40002ae5
 801bf48:	1c8a2d4b 	.word	0x1c8a2d4b
 801bf4c:	40033a27 	.word	0x40033a27
	...
 801bf58:	54442d18 	.word	0x54442d18
 801bf5c:	3ff921fb 	.word	0x3ff921fb
 801bf60:	3ff00000 	.word	0x3ff00000
 801bf64:	3fe00000 	.word	0x3fe00000

0801bf68 <scalbn>:
 801bf68:	b570      	push	{r4, r5, r6, lr}
 801bf6a:	ec55 4b10 	vmov	r4, r5, d0
 801bf6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801bf72:	4606      	mov	r6, r0
 801bf74:	462b      	mov	r3, r5
 801bf76:	b999      	cbnz	r1, 801bfa0 <scalbn+0x38>
 801bf78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bf7c:	4323      	orrs	r3, r4
 801bf7e:	d03f      	beq.n	801c000 <scalbn+0x98>
 801bf80:	4b35      	ldr	r3, [pc, #212]	; (801c058 <scalbn+0xf0>)
 801bf82:	4629      	mov	r1, r5
 801bf84:	ee10 0a10 	vmov	r0, s0
 801bf88:	2200      	movs	r2, #0
 801bf8a:	f7e4 fb35 	bl	80005f8 <__aeabi_dmul>
 801bf8e:	4b33      	ldr	r3, [pc, #204]	; (801c05c <scalbn+0xf4>)
 801bf90:	429e      	cmp	r6, r3
 801bf92:	4604      	mov	r4, r0
 801bf94:	460d      	mov	r5, r1
 801bf96:	da10      	bge.n	801bfba <scalbn+0x52>
 801bf98:	a327      	add	r3, pc, #156	; (adr r3, 801c038 <scalbn+0xd0>)
 801bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf9e:	e01f      	b.n	801bfe0 <scalbn+0x78>
 801bfa0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801bfa4:	4291      	cmp	r1, r2
 801bfa6:	d10c      	bne.n	801bfc2 <scalbn+0x5a>
 801bfa8:	ee10 2a10 	vmov	r2, s0
 801bfac:	4620      	mov	r0, r4
 801bfae:	4629      	mov	r1, r5
 801bfb0:	f7e4 f96c 	bl	800028c <__adddf3>
 801bfb4:	4604      	mov	r4, r0
 801bfb6:	460d      	mov	r5, r1
 801bfb8:	e022      	b.n	801c000 <scalbn+0x98>
 801bfba:	460b      	mov	r3, r1
 801bfbc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801bfc0:	3936      	subs	r1, #54	; 0x36
 801bfc2:	f24c 3250 	movw	r2, #50000	; 0xc350
 801bfc6:	4296      	cmp	r6, r2
 801bfc8:	dd0d      	ble.n	801bfe6 <scalbn+0x7e>
 801bfca:	2d00      	cmp	r5, #0
 801bfcc:	a11c      	add	r1, pc, #112	; (adr r1, 801c040 <scalbn+0xd8>)
 801bfce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bfd2:	da02      	bge.n	801bfda <scalbn+0x72>
 801bfd4:	a11c      	add	r1, pc, #112	; (adr r1, 801c048 <scalbn+0xe0>)
 801bfd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bfda:	a319      	add	r3, pc, #100	; (adr r3, 801c040 <scalbn+0xd8>)
 801bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfe0:	f7e4 fb0a 	bl	80005f8 <__aeabi_dmul>
 801bfe4:	e7e6      	b.n	801bfb4 <scalbn+0x4c>
 801bfe6:	1872      	adds	r2, r6, r1
 801bfe8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801bfec:	428a      	cmp	r2, r1
 801bfee:	dcec      	bgt.n	801bfca <scalbn+0x62>
 801bff0:	2a00      	cmp	r2, #0
 801bff2:	dd08      	ble.n	801c006 <scalbn+0x9e>
 801bff4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bff8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bffc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c000:	ec45 4b10 	vmov	d0, r4, r5
 801c004:	bd70      	pop	{r4, r5, r6, pc}
 801c006:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c00a:	da08      	bge.n	801c01e <scalbn+0xb6>
 801c00c:	2d00      	cmp	r5, #0
 801c00e:	a10a      	add	r1, pc, #40	; (adr r1, 801c038 <scalbn+0xd0>)
 801c010:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c014:	dac0      	bge.n	801bf98 <scalbn+0x30>
 801c016:	a10e      	add	r1, pc, #56	; (adr r1, 801c050 <scalbn+0xe8>)
 801c018:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c01c:	e7bc      	b.n	801bf98 <scalbn+0x30>
 801c01e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c022:	3236      	adds	r2, #54	; 0x36
 801c024:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c028:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c02c:	4620      	mov	r0, r4
 801c02e:	4b0c      	ldr	r3, [pc, #48]	; (801c060 <scalbn+0xf8>)
 801c030:	2200      	movs	r2, #0
 801c032:	e7d5      	b.n	801bfe0 <scalbn+0x78>
 801c034:	f3af 8000 	nop.w
 801c038:	c2f8f359 	.word	0xc2f8f359
 801c03c:	01a56e1f 	.word	0x01a56e1f
 801c040:	8800759c 	.word	0x8800759c
 801c044:	7e37e43c 	.word	0x7e37e43c
 801c048:	8800759c 	.word	0x8800759c
 801c04c:	fe37e43c 	.word	0xfe37e43c
 801c050:	c2f8f359 	.word	0xc2f8f359
 801c054:	81a56e1f 	.word	0x81a56e1f
 801c058:	43500000 	.word	0x43500000
 801c05c:	ffff3cb0 	.word	0xffff3cb0
 801c060:	3c900000 	.word	0x3c900000

0801c064 <__ieee754_sqrt>:
 801c064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c068:	ec55 4b10 	vmov	r4, r5, d0
 801c06c:	4e67      	ldr	r6, [pc, #412]	; (801c20c <__ieee754_sqrt+0x1a8>)
 801c06e:	43ae      	bics	r6, r5
 801c070:	ee10 0a10 	vmov	r0, s0
 801c074:	ee10 2a10 	vmov	r2, s0
 801c078:	4629      	mov	r1, r5
 801c07a:	462b      	mov	r3, r5
 801c07c:	d10d      	bne.n	801c09a <__ieee754_sqrt+0x36>
 801c07e:	f7e4 fabb 	bl	80005f8 <__aeabi_dmul>
 801c082:	4602      	mov	r2, r0
 801c084:	460b      	mov	r3, r1
 801c086:	4620      	mov	r0, r4
 801c088:	4629      	mov	r1, r5
 801c08a:	f7e4 f8ff 	bl	800028c <__adddf3>
 801c08e:	4604      	mov	r4, r0
 801c090:	460d      	mov	r5, r1
 801c092:	ec45 4b10 	vmov	d0, r4, r5
 801c096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c09a:	2d00      	cmp	r5, #0
 801c09c:	dc0b      	bgt.n	801c0b6 <__ieee754_sqrt+0x52>
 801c09e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c0a2:	4326      	orrs	r6, r4
 801c0a4:	d0f5      	beq.n	801c092 <__ieee754_sqrt+0x2e>
 801c0a6:	b135      	cbz	r5, 801c0b6 <__ieee754_sqrt+0x52>
 801c0a8:	f7e4 f8ee 	bl	8000288 <__aeabi_dsub>
 801c0ac:	4602      	mov	r2, r0
 801c0ae:	460b      	mov	r3, r1
 801c0b0:	f7e4 fbcc 	bl	800084c <__aeabi_ddiv>
 801c0b4:	e7eb      	b.n	801c08e <__ieee754_sqrt+0x2a>
 801c0b6:	1509      	asrs	r1, r1, #20
 801c0b8:	f000 808d 	beq.w	801c1d6 <__ieee754_sqrt+0x172>
 801c0bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c0c0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801c0c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c0c8:	07c9      	lsls	r1, r1, #31
 801c0ca:	bf5c      	itt	pl
 801c0cc:	005b      	lslpl	r3, r3, #1
 801c0ce:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801c0d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c0d6:	bf58      	it	pl
 801c0d8:	0052      	lslpl	r2, r2, #1
 801c0da:	2500      	movs	r5, #0
 801c0dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801c0e0:	1076      	asrs	r6, r6, #1
 801c0e2:	0052      	lsls	r2, r2, #1
 801c0e4:	f04f 0e16 	mov.w	lr, #22
 801c0e8:	46ac      	mov	ip, r5
 801c0ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801c0ee:	eb0c 0001 	add.w	r0, ip, r1
 801c0f2:	4298      	cmp	r0, r3
 801c0f4:	bfde      	ittt	le
 801c0f6:	1a1b      	suble	r3, r3, r0
 801c0f8:	eb00 0c01 	addle.w	ip, r0, r1
 801c0fc:	186d      	addle	r5, r5, r1
 801c0fe:	005b      	lsls	r3, r3, #1
 801c100:	f1be 0e01 	subs.w	lr, lr, #1
 801c104:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801c108:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801c10c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801c110:	d1ed      	bne.n	801c0ee <__ieee754_sqrt+0x8a>
 801c112:	4674      	mov	r4, lr
 801c114:	2720      	movs	r7, #32
 801c116:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801c11a:	4563      	cmp	r3, ip
 801c11c:	eb01 000e 	add.w	r0, r1, lr
 801c120:	dc02      	bgt.n	801c128 <__ieee754_sqrt+0xc4>
 801c122:	d113      	bne.n	801c14c <__ieee754_sqrt+0xe8>
 801c124:	4290      	cmp	r0, r2
 801c126:	d811      	bhi.n	801c14c <__ieee754_sqrt+0xe8>
 801c128:	2800      	cmp	r0, #0
 801c12a:	eb00 0e01 	add.w	lr, r0, r1
 801c12e:	da57      	bge.n	801c1e0 <__ieee754_sqrt+0x17c>
 801c130:	f1be 0f00 	cmp.w	lr, #0
 801c134:	db54      	blt.n	801c1e0 <__ieee754_sqrt+0x17c>
 801c136:	f10c 0801 	add.w	r8, ip, #1
 801c13a:	eba3 030c 	sub.w	r3, r3, ip
 801c13e:	4290      	cmp	r0, r2
 801c140:	bf88      	it	hi
 801c142:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801c146:	1a12      	subs	r2, r2, r0
 801c148:	440c      	add	r4, r1
 801c14a:	46c4      	mov	ip, r8
 801c14c:	005b      	lsls	r3, r3, #1
 801c14e:	3f01      	subs	r7, #1
 801c150:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801c154:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801c158:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801c15c:	d1dd      	bne.n	801c11a <__ieee754_sqrt+0xb6>
 801c15e:	4313      	orrs	r3, r2
 801c160:	d01b      	beq.n	801c19a <__ieee754_sqrt+0x136>
 801c162:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801c210 <__ieee754_sqrt+0x1ac>
 801c166:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801c214 <__ieee754_sqrt+0x1b0>
 801c16a:	e9da 0100 	ldrd	r0, r1, [sl]
 801c16e:	e9db 2300 	ldrd	r2, r3, [fp]
 801c172:	f7e4 f889 	bl	8000288 <__aeabi_dsub>
 801c176:	e9da 8900 	ldrd	r8, r9, [sl]
 801c17a:	4602      	mov	r2, r0
 801c17c:	460b      	mov	r3, r1
 801c17e:	4640      	mov	r0, r8
 801c180:	4649      	mov	r1, r9
 801c182:	f7e4 fcb5 	bl	8000af0 <__aeabi_dcmple>
 801c186:	b140      	cbz	r0, 801c19a <__ieee754_sqrt+0x136>
 801c188:	f1b4 3fff 	cmp.w	r4, #4294967295
 801c18c:	e9da 0100 	ldrd	r0, r1, [sl]
 801c190:	e9db 2300 	ldrd	r2, r3, [fp]
 801c194:	d126      	bne.n	801c1e4 <__ieee754_sqrt+0x180>
 801c196:	3501      	adds	r5, #1
 801c198:	463c      	mov	r4, r7
 801c19a:	106a      	asrs	r2, r5, #1
 801c19c:	0863      	lsrs	r3, r4, #1
 801c19e:	07e9      	lsls	r1, r5, #31
 801c1a0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c1a4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c1a8:	bf48      	it	mi
 801c1aa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c1ae:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801c1b2:	461c      	mov	r4, r3
 801c1b4:	e76d      	b.n	801c092 <__ieee754_sqrt+0x2e>
 801c1b6:	0ad3      	lsrs	r3, r2, #11
 801c1b8:	3815      	subs	r0, #21
 801c1ba:	0552      	lsls	r2, r2, #21
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d0fa      	beq.n	801c1b6 <__ieee754_sqrt+0x152>
 801c1c0:	02dc      	lsls	r4, r3, #11
 801c1c2:	d50a      	bpl.n	801c1da <__ieee754_sqrt+0x176>
 801c1c4:	f1c1 0420 	rsb	r4, r1, #32
 801c1c8:	fa22 f404 	lsr.w	r4, r2, r4
 801c1cc:	1e4d      	subs	r5, r1, #1
 801c1ce:	408a      	lsls	r2, r1
 801c1d0:	4323      	orrs	r3, r4
 801c1d2:	1b41      	subs	r1, r0, r5
 801c1d4:	e772      	b.n	801c0bc <__ieee754_sqrt+0x58>
 801c1d6:	4608      	mov	r0, r1
 801c1d8:	e7f0      	b.n	801c1bc <__ieee754_sqrt+0x158>
 801c1da:	005b      	lsls	r3, r3, #1
 801c1dc:	3101      	adds	r1, #1
 801c1de:	e7ef      	b.n	801c1c0 <__ieee754_sqrt+0x15c>
 801c1e0:	46e0      	mov	r8, ip
 801c1e2:	e7aa      	b.n	801c13a <__ieee754_sqrt+0xd6>
 801c1e4:	f7e4 f852 	bl	800028c <__adddf3>
 801c1e8:	e9da 8900 	ldrd	r8, r9, [sl]
 801c1ec:	4602      	mov	r2, r0
 801c1ee:	460b      	mov	r3, r1
 801c1f0:	4640      	mov	r0, r8
 801c1f2:	4649      	mov	r1, r9
 801c1f4:	f7e4 fc72 	bl	8000adc <__aeabi_dcmplt>
 801c1f8:	b120      	cbz	r0, 801c204 <__ieee754_sqrt+0x1a0>
 801c1fa:	1ca0      	adds	r0, r4, #2
 801c1fc:	bf08      	it	eq
 801c1fe:	3501      	addeq	r5, #1
 801c200:	3402      	adds	r4, #2
 801c202:	e7ca      	b.n	801c19a <__ieee754_sqrt+0x136>
 801c204:	3401      	adds	r4, #1
 801c206:	f024 0401 	bic.w	r4, r4, #1
 801c20a:	e7c6      	b.n	801c19a <__ieee754_sqrt+0x136>
 801c20c:	7ff00000 	.word	0x7ff00000
 801c210:	200002f8 	.word	0x200002f8
 801c214:	20000300 	.word	0x20000300

0801c218 <_init>:
 801c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c21a:	bf00      	nop
 801c21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c21e:	bc08      	pop	{r3}
 801c220:	469e      	mov	lr, r3
 801c222:	4770      	bx	lr

0801c224 <_fini>:
 801c224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c226:	bf00      	nop
 801c228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c22a:	bc08      	pop	{r3}
 801c22c:	469e      	mov	lr, r3
 801c22e:	4770      	bx	lr
